text,embedding
"#
Accounts

Accounts within Solana are used to store state. They are an essential building block for developing on Solana.

#
Facts

Fact Sheet

Accounts are used to store data
Each account has a unique address
Accounts have a max size of 10MB (10 Mega Bytes)
PDA accounts have a max size of 10KB (10 Kilo Bytes)
PDA accounts can be used to sign on behalf of a program
Accounts size are fixed at creation time, but can be adjusted using realloc
open in new window
Account data storage is paid with rent
Default account owner is the System Program
#
Deep Dive
#
Account Model

There are 3 kinds of accounts on Solana:

Data accounts store data
Program accounts store executable programs
Native accounts that indicate native programs on Solana such as System, Stake, and Vote

Within data accounts, there are 2 types:

System owned accounts
PDA (Program Derived Address) accounts

Each account has an address (usually a public key) and an owner (address of a program account). The full field list an account stores is found below.

Field	Description
lamports	The number of lamports owned by this account
owner	The program owner of this account
executable	Whether this account can process instructions
data	The raw data byte array stored by this account
rent_epoch	The next epoch that this account will owe rent

There are a few important ownership rules:

Only a data account's owner can modify its data and debit lamports
Anyone is allowed to credit lamports to a data account
The owner of an account may assign a new owner if the account's data is zeroed out

Program accounts do not store state.

For example, if you have a counter program that lets you increment a counter, you must create two accounts, one account to store the program's code, and one to store the counter.

To prevent an account from being deleted, you must pay rent.

#
Rent

Storing data on accounts costs SOL to maintain, and it is funded by what is called rent. If you maintain a minimum balance equivalent to 2 years of rent payments in an account, your account will be exempt from paying rent. You can retrieve rent by closing the account and sending the lamports back to your wallet.

Rent is paid during two different timings:

When referenced by a transaction
Once an epoch

A percentage of rent collected by accounts is destroyed, while the rest is distributed to vote accounts at the end of every slot.

If the account does not have enough to pay rent, the account will be deallocated and the data removed.

It is also important to note that new accounts must be rent exempt.

#
Other Resources
Solana Account Model
open in new window
Official Documentation
open in new window
pencilflip account thread
open in new window
#
Credit

This core concept is credited to Pencilflip. Follow him on Twitter
open in new window
. #
Transactions

Clients can invoke programs by submitting a transaction to a cluster. A single transaction can include multiple instructions, each targeting its own program. When a transaction is submitted, the Solana Runtime
open in new window
 will process its instructions in order and atomically. If any part of an instruction fails, the entire transaction will fail.

#
Facts

Fact Sheet

Instructions are the most basic operational unit on Solana
Each instruction contains:
The program_id of the intended program
An array of all accounts it intends to read from or write to
An instruction_data byte array that is specific to the","[-4.48951647e-02 -6.87623471e-02 -1.22546740e-01 -3.98099869e-02
 -8.11323002e-02 -7.60038048e-02  3.26782539e-02  4.29181159e-02
  9.16402042e-03  4.83465157e-02  4.84327320e-03 -3.06449663e-02
  1.34964613e-02 -3.62362638e-02  2.14264095e-02  2.15247404e-02
 -9.55608115e-02 -3.02847959e-02 -3.92653272e-02  4.15252708e-02
  5.19240424e-02 -9.07823518e-02 -1.05063953e-01 -1.75909810e-02
 -2.48989370e-02  4.15692814e-02  2.82608327e-02  1.44047365e-02
 -7.37188989e-03 -4.63729799e-02  4.96576503e-02  1.17978286e-02
  5.08245267e-02  2.10481212e-02  5.96142514e-03  1.78381931e-02
 -3.65321375e-02  4.44415119e-03 -3.73439826e-02 -6.30973428e-02
 -3.54988500e-02  5.01029007e-02 -3.04798149e-02  1.88528076e-02
 -1.22421356e-02  2.08715238e-02 -2.96280384e-02  3.51555496e-02
 -3.73664424e-02 -6.32430539e-02  7.25441787e-04  5.41731305e-02
 -3.67836729e-02  1.38273507e-01  1.92907210e-02 -1.56214146e-03
  4.84293513e-02 -1.92651618e-02  2.36993702e-03  5.42075224e-02
 -1.01953177e-02  8.30600262e-02 -1.92644186e-02 -2.89083011e-02
 -1.28218904e-02 -1.71018753e-03 -8.16472769e-02 -6.75094500e-03
  1.09975990e-02 -1.21474482e-01 -8.59849975e-02 -5.68609051e-02
 -1.13121450e-01  4.30298299e-02 -5.35123572e-02 -5.40007725e-02
  6.43225610e-02  5.36081716e-02 -1.42648397e-02 -2.49942522e-02
  2.39784624e-02  7.10636824e-02  2.64268834e-03  2.84047946e-02
 -2.86635049e-02  1.10254623e-02 -4.19134088e-02 -3.76926176e-02
  3.94444950e-02  3.21435705e-02  4.36688624e-02  5.77688869e-03
  6.60665259e-02 -3.94738540e-02  6.92952871e-02  2.37709973e-02
  3.85010093e-02  3.05111259e-02 -1.04720863e-02  2.18512528e-02
  6.25997633e-02 -1.69990305e-02  5.66800125e-02  1.16422381e-02
 -7.78671401e-03 -3.62702124e-02  1.19282573e-01  1.19693205e-03
 -6.18234240e-02  1.15032634e-02 -3.12476214e-02 -2.88520590e-03
 -9.23511088e-02 -1.13091143e-02  3.21530141e-02  6.44392450e-04
 -1.27429381e-01  7.10960552e-02 -6.61563948e-02  1.37582747e-03
  1.05865505e-02  7.14213923e-02  7.40948692e-02 -6.93960786e-02
  3.50301899e-02  6.67608008e-02 -8.80731866e-02  8.24840492e-33
 -2.64966860e-02  9.16931964e-03 -2.75794286e-02  5.48276491e-03
 -3.89308482e-02 -1.88614540e-02  9.33649763e-03  6.25680611e-02
 -6.72767982e-02  5.78442961e-02  5.64477500e-03  8.26099664e-02
 -2.14340836e-02  1.85282622e-02  9.97229964e-02  3.20673808e-02
  1.26130332e-03  7.39105046e-03  8.17027967e-03 -1.37964953e-02
  3.68287787e-02  3.09712365e-02  2.98353918e-02 -2.21536756e-02
  9.99451131e-02 -5.16079515e-02 -5.24039306e-02  5.16877044e-03
 -2.77929138e-02  1.44284731e-03 -6.18352331e-02 -5.89132085e-02
 -3.33298417e-03  4.37906273e-02  9.77511406e-02  3.09303906e-02
  1.16133345e-02 -9.09567177e-02 -2.30100974e-02 -3.71576846e-02
  6.56444654e-02  4.37741056e-02  8.24698657e-02 -7.69349141e-03
 -5.42005263e-02  1.96217895e-02  1.19168852e-02  4.95248958e-02
 -1.36466064e-02  1.08466245e-01 -7.96530396e-03  1.45161347e-02
 -8.98789912e-02  7.20570162e-02  5.70349908e-03 -8.76573613e-04
  2.66814418e-02 -5.95384836e-02  5.71878180e-02  4.06283885e-02
 -5.57682179e-02 -4.41622064e-02 -4.86918865e-03  3.87729667e-02
 -5.57037368e-02 -2.67772712e-02 -1.67962350e-02  1.20745450e-02
  5.31527922e-02  1.23497434e-02 -2.13230383e-02  1.28146540e-02
 -3.21761072e-02  3.98863070e-02 -3.09350491e-02 -6.49218112e-02
  4.74027097e-02  2.68687326e-02 -1.34585500e-01  7.25953728e-02
  2.14963015e-02 -4.86716181e-02  1.10033052e-02  6.27647638e-02
 -8.70888755e-02  2.73475349e-02  2.30479818e-02 -3.99855524e-02
 -6.64382577e-02 -5.75002842e-02  5.41856661e-02 -1.55078084e-03
  2.82577891e-02 -1.13318618e-02 -1.25149041e-02 -8.59736511e-33
 -2.49652881e-02 -9.43425819e-02 -8.24716911e-02 -9.64149237e-02
  1.67048983e-02  3.68073420e-03  2.31849663e-02 -5.89356683e-02
 -9.17265266e-02 -1.05160035e-01 -1.62855446e-01  3.77994664e-02
  7.11747780e-02 -1.68147124e-02  8.48056097e-03  1.26863401e-02
  2.70629711e-02 -4.80384938e-02  8.44685175e-03 -4.94084843e-02
 -3.19930799e-02  1.45593494e-01  4.13298272e-02 -3.34387347e-02
  3.62033350e-03 -5.76415099e-02 -3.58222201e-02  6.84907362e-02
 -9.69981402e-03  9.92302131e-03  6.10516146e-02 -9.78888124e-02
 -4.73382585e-02 -1.68357100e-02 -1.02130741e-01 -1.17591247e-01
  3.36249173e-02 -3.82799171e-02 -2.54214630e-02  4.50212285e-02
  7.29993358e-02 -1.15905395e-02  4.16243821e-02  3.59346718e-02
  7.65622640e-03  2.41504312e-02 -2.22457089e-02 -2.70722564e-02
  3.33709130e-03 -1.57128798e-03  3.62233445e-02 -6.26487136e-02
  3.17400619e-02  9.11694486e-03  1.34578533e-03  2.72671338e-02
  1.18505791e-01  6.89177066e-02  4.71896045e-02 -6.18171915e-02
  6.95598200e-02 -9.42206010e-03  2.56326161e-02  1.35126591e-01
 -2.90409438e-02 -3.28171141e-02  2.19908934e-02 -3.08362301e-02
 -8.85088816e-02 -1.61817987e-02  5.78125492e-02 -1.49264410e-01
 -2.56412886e-02 -1.31766899e-02 -8.26536492e-02  2.33653244e-02
 -4.84603494e-02  1.13020530e-02  9.60459188e-03 -1.98053811e-02
 -4.78623994e-02  3.03844884e-02  9.53241363e-02  4.27990481e-02
  1.84605420e-02 -8.80808830e-02  2.33390350e-02 -6.51130229e-02
 -6.14914820e-02  1.74614433e-02 -5.65647148e-02  2.28263233e-02
 -5.65534495e-02  5.98583855e-02  8.09547491e-03 -5.47375372e-08
 -8.28822516e-03 -6.86211884e-02  1.70438550e-02  7.29723796e-02
 -8.35258607e-03  3.21902311e-03 -4.97817947e-03  4.48860563e-02
  3.72655801e-02  8.11612085e-02  4.85006347e-02  3.28780152e-02
 -8.52817222e-02 -5.42136580e-02  7.14423209e-02  4.37826626e-02
  5.45471199e-02 -9.61584412e-03 -5.50078526e-02  6.67227898e-03
  3.91076803e-02  1.84307173e-02 -3.15895379e-02  1.40538532e-02
 -1.08833406e-02 -2.97581614e-03 -1.59575492e-02  8.30637664e-02
  2.27851495e-02 -1.72876995e-02  5.09449169e-02  2.40191948e-02
  9.45186913e-02 -4.95620770e-03  6.02648593e-02  2.70884894e-02
 -8.47081654e-03  1.96761601e-02 -3.56604648e-03  1.99944228e-02
 -6.13059625e-02 -2.64143897e-03  2.09576394e-02  1.81191675e-02
 -1.15099279e-02  1.29965339e-02 -9.42707509e-02 -2.82227099e-02
  1.04745016e-01  9.43057332e-03 -1.18044196e-02  1.12471115e-02
 -1.26399403e-03  1.00941487e-01  5.56316487e-02  1.95584074e-02
 -5.17283641e-02  6.12444058e-02  1.16773788e-02  9.94835794e-03
 -5.42255351e-03  7.63611421e-02 -1.85648408e-02  1.45107536e-02]"
"intended program
Multiple instructions can be bundled into a single transaction
Each transaction contains:
An array of all accounts it intends to read from or write to
One or more instructions
A recent blockhash
One or more signatures
Instructions are processed in order and atomically
If any part of an instruction fails, the entire transaction fails.
Transactions are limited to 1232 bytes
#
Deep Dive

The Solana Runtime requires both instructions and transactions to specify a list of all accounts they intended to read from or write to. By requiring these accounts in advance, the runtime is able to parallelize execution across all transactions.

When a transaction is submitted to a cluster, the runtime will process its instructions in order and atomically. For each instruction, the receiving program will interpret its data array and operate on its specified accounts. The program will either return successfully or with an error code. If an error is returned, the entire transaction will fail immediately.

Any transaction that aims to debit an account or modify its data requires the signature of its account holder. Any account that will be modified is marked as writable. An account can be credited without the holder’s permission so long as the transaction fee payer covers the necessary rent and transaction fees.

Before submission, all transactions must reference a recent blockhash
open in new window
. The blockhash is used to prevent duplications and eliminate stale transactions. The max age of a transaction's blockhash is 150 blocks, or about ~1 minute 19 seconds as of the time of this writing.

#
Fees

The Solana network collects two types of fees:

Transaction fees
open in new window
 for propagating transactions (aka “gas fees”)
Rent fees
open in new window
 for storing data on-chain

In Solana, transaction fees are deterministic: there is no concept of a fee market in which users can pay higher fees to increase their chances of being included in the next block. At the time of this writing, transaction fees are determined only by the number of signatures required (i.e. lamports_per_signature), not by the amount of resources used. This is because there is currently a hard cap of 1232 bytes on all transactions.

All transactions require at least one writable account to sign the transaction. Once submitted, the writable signer account that is serialized first will be the fee payer. This account will pay for the cost of the transaction regardless of whether the transaction succeeds or fails. If the fee payer does not have a sufficient balance to pay the transaction fee, the transaction will be dropped.

At the time of this writing, 50% of all transaction fees are collected by the validator that produces the block, while the remaining 50% are burned. This structure works to incentivize validators to process as many transactions as possible during their slots in the leader schedule.

#
Other Resources
Official Documentation
open in new window
Transaction Structure
open in new window
Transaction Fees by Justin Starry
open in new window
An Introduction to Solana by Hana
open in new window
Transaction Processing by Jito Labs
open in new window
Solana Transaction in Depth by Alex Miller
open in new window #
Programs

Any developer can write and deploy programs to the Solana blockchain. Programs (known as smart contracts on other protocols) serve as the","[-3.80350351e-02 -1.46926846e-02 -9.20655057e-02 -3.61306928e-02
 -6.02750629e-02 -1.02183275e-01 -3.26484665e-02  1.24583971e-02
  1.69647625e-03  3.73312943e-02  2.06429642e-02  2.13178229e-02
 -5.10555552e-03 -1.02592185e-01 -1.95081998e-02 -7.85922632e-02
 -5.93994558e-02 -1.55576896e-02 -7.78587386e-02 -3.15934159e-02
  1.27046416e-02 -4.24020849e-02 -6.16850182e-02 -4.58326377e-03
 -8.12113509e-02  6.14391975e-02 -2.63094697e-02 -1.40169021e-02
 -4.85437503e-03 -4.56431173e-02  4.19727229e-02  3.55189480e-02
  1.32102706e-02  9.26927254e-02  9.92447790e-03  4.35442775e-02
  5.18304110e-03 -1.25017660e-02 -5.16594276e-02 -6.26519695e-02
 -1.71316992e-02  6.86299875e-02 -1.11198619e-01  6.91869929e-02
  2.69255973e-03 -6.88271150e-02 -4.27261852e-02 -1.29394606e-02
 -7.62766898e-02 -7.59812668e-02 -4.56429124e-02  5.27884513e-02
 -1.01024061e-02  9.86218154e-02  1.27442973e-02 -1.66190509e-02
  7.93109089e-02 -3.70372757e-02  9.29747988e-03  3.05706188e-02
 -1.91274229e-02  8.53950065e-03 -2.63524223e-02 -1.65836252e-02
  8.21668804e-02 -2.01214366e-02  2.75833346e-02 -3.01351883e-02
  1.76405869e-02 -5.18967174e-02 -2.37854756e-02 -6.09172657e-02
 -1.02649398e-01  6.03905171e-02 -6.20699897e-02 -2.48842295e-02
  4.18462716e-02  2.20147688e-02 -5.51783778e-02 -4.56967615e-02
 -6.53227791e-02 -5.56748733e-02  6.22705035e-02  1.46345757e-02
  1.11948205e-02 -4.73036095e-02 -7.34412894e-02 -1.63399871e-03
  1.04811892e-01  8.01642367e-04  2.44378187e-02  1.73337553e-02
  3.47015560e-02 -5.00530079e-02  8.93106833e-02  5.28512597e-02
  4.59222719e-02 -1.69319492e-02 -1.67738646e-02  7.58363679e-02
  5.98001145e-02 -1.52295809e-02  3.68433721e-05 -2.55056545e-02
  2.93506440e-02 -5.79002649e-02  1.36195019e-01 -5.60580045e-02
 -9.29802358e-02 -1.40139768e-02  1.80656184e-02  4.42539044e-02
  2.83600688e-02 -4.52464737e-04 -2.95806993e-02  3.93996686e-02
 -5.94147891e-02  6.73444048e-02 -2.17437856e-02  5.33600301e-02
 -2.62576248e-03  8.36053640e-02  6.12387732e-02 -4.34285142e-02
  4.17215144e-03 -4.88396548e-02 -8.46396983e-02  7.22312846e-33
 -9.60963662e-04 -2.32480634e-02 -1.98075622e-02 -3.06844283e-02
 -2.42232941e-02 -5.17213456e-02 -4.56477748e-03 -5.31946495e-03
 -5.65191694e-02  1.53074618e-02 -2.12557726e-02 -6.89468998e-03
  3.02337725e-02  1.97938997e-02  2.55111996e-02  3.34622711e-02
  2.29409020e-02  4.80636805e-02  1.33969858e-02  3.57115865e-02
  3.43729593e-02 -4.83746454e-02 -6.03063544e-03 -2.05366537e-02
  8.23370740e-03 -5.90048078e-03 -3.58657651e-02 -6.82331249e-02
  2.21348163e-02  2.99548134e-02 -4.92555536e-02 -7.49085157e-04
 -3.38905565e-02  8.50107074e-02  8.10088888e-02  4.34920080e-02
 -2.77695898e-02 -7.58776814e-02  1.23365493e-02 -1.08617961e-01
 -3.74805788e-03 -2.74559371e-02  6.01268560e-03 -5.30910306e-02
 -4.52086478e-02  5.75926807e-03 -4.28265743e-02  8.30430016e-02
 -1.45665763e-04  7.97103494e-02 -8.46592057e-03  1.43429125e-02
  1.69455633e-02  2.38724472e-03  4.61748578e-02  3.52250114e-02
  3.64210308e-02 -3.64711881e-02  4.21907045e-02  1.52906418e-01
 -5.40341390e-03 -5.54503240e-02 -9.82648358e-02  3.99439894e-02
 -4.09020893e-02  4.97456156e-02 -5.03875986e-02  1.43229980e-02
  6.65170103e-02  1.38486475e-02 -8.41749981e-02  2.43554413e-02
  5.65978466e-03  4.28957827e-02 -7.76490616e-03 -1.35723324e-02
  1.09553143e-01  1.36476718e-02 -9.13770795e-02  1.27634844e-02
 -1.95530299e-02 -6.06654510e-02 -3.93431559e-02  5.63959591e-02
 -4.25731726e-02  6.25270605e-02  3.01945908e-03 -2.83672307e-02
 -4.08023410e-02 -4.68760021e-02  9.74451005e-02 -2.52657440e-02
  6.71922043e-02 -6.02193773e-02  3.01309396e-02 -7.17554886e-33
 -9.88087966e-04 -4.37104180e-02 -1.05846040e-01  4.77974489e-02
  1.35189667e-02 -3.23356502e-02 -6.95063844e-02 -5.51452897e-02
 -4.97472286e-02 -4.83590253e-02 -1.13086745e-01 -1.47206057e-03
  4.27519754e-02 -1.67600326e-02 -4.03247178e-02  7.56686274e-03
  1.06292419e-01  3.67177487e-03  8.94789174e-02 -3.98691297e-02
 -8.23901687e-03  1.13982312e-01  6.02901168e-02 -6.88118190e-02
 -4.71118698e-03 -3.46852094e-02 -2.45587938e-02  6.39755949e-02
 -5.67185879e-02 -3.87981953e-03  1.21521041e-01 -9.55533609e-02
 -4.16091010e-02  3.68828140e-02 -6.57411152e-03 -9.37293619e-02
  4.79202457e-02  2.84438189e-02  1.34859947e-04  1.09449690e-02
  8.40981901e-02 -1.14658764e-02  3.01552215e-03  7.78938234e-02
  1.99509989e-02  6.78184303e-03 -6.15144148e-02 -3.07222512e-02
 -5.07943705e-02  4.08418756e-03  6.22105040e-02 -5.57441115e-02
  7.76771009e-02  2.84764189e-02  1.23788128e-02  2.33771410e-02
  1.24459453e-01  3.60034257e-02  8.59366450e-03 -1.73129211e-03
  1.76178943e-02 -3.83621939e-02  6.40447587e-02  8.01106319e-02
  6.90473244e-02 -5.01993485e-02  3.03966086e-02 -4.55293879e-02
 -7.60090724e-02  1.45745799e-02  5.32042533e-02 -5.91451973e-02
 -3.99833396e-02  4.05539162e-02 -1.14698447e-02  6.78028762e-02
 -4.12548892e-02 -6.77568614e-02 -5.11423349e-02  2.07468681e-02
 -5.22960909e-02  1.44973900e-02  1.84923504e-02  8.14546049e-02
  1.50673715e-02 -7.90755749e-02  5.39805926e-02 -1.01803960e-02
 -1.57142561e-02  4.01498517e-03 -1.88758336e-02  4.54662479e-02
  1.42951834e-03  3.65701504e-02 -5.93239963e-02 -6.12356033e-08
 -1.44375663e-03 -5.62964976e-02 -4.32151183e-02  7.93258771e-02
  8.50708038e-02  5.97764663e-02 -5.86821185e-03 -2.63599548e-02
  1.21427290e-02  1.14661166e-02  6.83704242e-02 -1.68464072e-02
 -3.84161882e-02 -6.63561746e-02  7.42866248e-02  5.24377413e-02
  4.19010706e-02 -2.26670224e-02 -1.02622285e-01 -5.07675484e-02
  1.66880656e-02 -1.24574844e-02 -3.90397711e-03  5.30036688e-02
 -2.18120553e-02 -2.87903007e-03  8.60574171e-02  1.04273237e-01
  2.02722736e-02 -6.47118092e-02 -2.30402611e-02 -4.54053655e-03
  1.37092486e-01  1.90081820e-02 -4.77359146e-02  2.43317112e-02
  4.72738734e-03  2.23671719e-02  6.31575957e-02  2.89872810e-02
 -4.97807488e-02  2.40816884e-02 -1.36168692e-02  3.99669185e-02
  3.21059152e-02  1.28244869e-02 -1.45212844e-01 -3.41572016e-02
  2.46591847e-02  1.74907409e-02  5.58979996e-03  3.83009911e-02
  4.31764834e-02  1.23152107e-01  1.85726173e-02  4.09460329e-02
 -3.21622230e-02  1.36500299e-02  8.82848501e-02  6.81096762e-02
  3.92730199e-02  4.87238094e-02 -1.38487369e-02 -5.02512343e-02]"
"foundation for on-chain activity, powering anything from DeFi and NFTs to Social Media and Gaming.

#
Facts

Fact Sheet

Programs process instructions from both end users and other programs
All programs are stateless: any data they interact with is stored in separate accounts that are passed in via instructions
Programs themselves are stored in accounts marked as executable
All programs are owned by the BPF Loader
open in new window
 and executed by the Solana Runtime
open in new window
Developers most commonly write programs in Rust or C++, but can choose any language that targets the LLVM
open in new window
's BPF
open in new window
 backend
All programs have a single entry point where instruction processing takes place (i.e. process_instruction); parameters always include:
program_id: pubkey
accounts: array,
instruction_data: byte array
#
Deep Dive

Unlike most other blockchains, Solana completely separates code from data. All data that programs interact with are stored in separate accounts and passed in as references via instructions. This model allows for a single generic program to operate across various accounts without requiring additional deployments. Common examples of this pattern are seen across the Native and SPL Programs.

#
Native Programs & The Solana Program Library (SPL)

Solana comes equipped with a number of programs that serve as core building blocks for on-chain interactions. These programs are divided into Native Programs
open in new window
 and Solana Program Library (SPL) Programs
open in new window
.

Native Programs provide the base functionality that is required to operate validators. Among these programs, the most well known is the System Program
open in new window
 which is responsible for administering new accounts and transferring SOL between two parties.

SPL Programs support a number of on-chain activities, including creating, swapping, and lending tokens, as well as generating stake pools and maintaining an on-chain name service. The SPL Token Program
open in new window
 can be invoked directly via the CLI, while others like the Associated Token Account Program
open in new window
 are usually composed with custom programs.

#
Writing Programs

Programs are most commonly developed with Rust or C++, but can be developed with any language that targets the LLVM’s BPF backend. Recent initiatives by Neon Labs
open in new window
 and Solang
open in new window
 enable EVM
open in new window
 compatibility and allow developers to write programs in Solidity.

Most Rust-based programs adhere to the following architecture:

File	Description
lib.rs	Registering modules
entrypoint.rs	Entrypoint to the program
instruction.rs	Program API, (de)serializing instruction data
processor.rs	Program logic
state.rs	Program objects, (de)serializing state
error.rs	Program-specific errors

Recently, Anchor
open in new window
 has emerged as a popular framework for developing programs. Anchor is an opinionated framework, akin to Ruby on Rails, that reduces boilerplate and streamlines the (de)serialization process for Rust-based development.

Programs are usually developed and tested against Localhost and Devnet environments before being deployed to Testnet or Mainnet. Solana supports the following environments:

Cluster Environment	RPC Connection URL
Mainnet-beta	https://api.mainnet-beta.solana.com
Testnet	https://api.testnet.solana.com
Devnet	https://api.devnet.solana.com
Localhost	Default port: 8899 (e.g. http://localhost:8899, http://192.168.1.88:8899)

Once deployed to an environment, clients can interact with on-chain programs via RPC connections
open in new window
 to the respective cluster.

#
Deploying Programs

Developers can deploy their programs via the CLI
open in new window
:

solana program deploy <PROGRAM_FILEPATH>

1


When a program is deployed, it is compiled to an ELF shared object
open in new window
 (containing BPF bytecode) and uploaded to the Solana cluster. Programs live in accounts (much like everything else on Solana), except","[-3.23688164e-02 -6.59736767e-02 -9.59095284e-02 -3.64770070e-02
  2.34360173e-02 -9.87103060e-02  7.71389692e-04  4.45652977e-02
  4.10075337e-02 -7.67375529e-03 -3.86357903e-02  4.32433710e-02
 -1.62754897e-02 -5.08741289e-02  9.57733691e-02 -1.03022540e-02
 -5.78539334e-02 -5.20829968e-02 -2.32302211e-02 -3.93730821e-03
  4.13291305e-02 -1.07383309e-02 -9.29193199e-02  3.22397649e-02
 -6.77459165e-02 -2.52823792e-02 -2.11731978e-02 -2.98506692e-02
  2.87863817e-02 -5.30530848e-02  2.37743836e-02  8.13371912e-02
 -3.19109578e-03  8.19974765e-02 -2.15019807e-02  1.35105073e-01
  3.59960645e-02 -3.04370318e-02 -1.06669046e-01 -6.67118728e-02
 -4.43807021e-02  3.94234397e-02 -9.99143347e-02  4.23520543e-02
  6.03234069e-03 -3.43338139e-02 -3.34893465e-02 -5.13116010e-02
 -1.06706955e-01  1.29898335e-03 -2.63654403e-02  1.20520347e-03
 -2.69838087e-02  5.05554713e-02  4.26027514e-02 -2.05737799e-02
  5.83144352e-02 -3.11103314e-02  3.28574665e-02  8.11601579e-02
 -7.15345293e-02  5.79912066e-02 -3.32073905e-02  1.20558431e-02
  1.54126920e-02  4.67151590e-02  8.82058777e-03 -1.03509123e-03
  3.37930247e-02 -1.58791915e-01 -9.17412043e-02 -8.75805020e-02
 -6.44580722e-02  4.42982726e-02 -9.64952335e-02 -9.06394720e-02
 -2.54601631e-02  2.78135277e-02 -7.20300674e-02 -7.17759579e-02
  1.81272216e-02  8.20433423e-02 -7.14956690e-03  1.93904079e-02
  2.87507381e-02  2.65397448e-02  2.99410801e-03 -1.62535869e-02
  1.31698981e-01  9.27781239e-02 -1.77477226e-02 -3.68084828e-03
  3.56400907e-02  7.10612349e-03  1.23974696e-01  1.17631843e-02
  6.03567921e-02 -3.93711999e-02 -2.62846109e-02  6.48639426e-02
  6.17360510e-03  9.09225736e-03  4.98317741e-02 -1.47458408e-02
  4.17382410e-03 -1.68857872e-02  6.82121068e-02  9.53647960e-03
 -8.94948244e-02 -1.67538710e-02 -1.99763905e-02  2.39119474e-02
  1.88738611e-02 -3.71277891e-02  9.18192416e-03 -1.58877447e-02
 -4.37706001e-02  4.03255410e-02  1.03056338e-02  6.80154487e-02
 -8.20199773e-03  6.57535866e-02  3.66158895e-02 -1.25620728e-02
 -1.50223617e-02  1.98697113e-03 -9.94394869e-02  1.05530872e-32
  7.76612759e-03 -4.62863557e-02 -3.94282155e-02  3.33831981e-02
  3.09529416e-02 -4.67215218e-02  6.84036016e-02  2.07015797e-02
 -8.16469714e-02  1.72859617e-02  1.11851972e-02  4.04986404e-02
 -1.78421251e-02  4.08887230e-02  1.07887112e-01 -2.18627714e-02
 -6.82147336e-04  2.15259399e-02  2.17922870e-02 -2.77095847e-03
  5.71936816e-02  6.05025813e-02 -5.53498715e-02  7.19723944e-03
  9.56062898e-02  1.22775892e-02 -4.18964401e-02 -6.46409318e-02
  7.36710662e-03  1.48747033e-02 -1.61977615e-02 -5.81834465e-02
 -4.71308529e-02  6.80910274e-02  9.69354957e-02  1.14015292e-03
 -2.23921929e-02 -5.36811911e-02  2.07472779e-02 -7.23832473e-02
  5.09906225e-02  3.10682897e-02  2.28701569e-02 -1.64459907e-02
 -4.44550961e-02 -7.58898109e-02 -5.50361909e-02  6.67595863e-02
 -2.09969301e-02  1.26743945e-03 -5.22634992e-03  5.90593927e-02
  2.04445608e-02  1.44455573e-02 -2.00651865e-02 -3.10101341e-02
 -2.63965093e-02 -3.93392146e-02  1.65788066e-02  1.34291947e-01
 -4.16573361e-02  2.71403827e-02 -5.03865443e-02  4.33778614e-02
  9.96473525e-03 -2.34926399e-02 -6.06544651e-02 -1.45692630e-02
  6.33778125e-02  3.63831734e-03 -9.01314989e-02  5.72676398e-02
  1.24960765e-02  7.34884664e-02  2.74585094e-02 -3.97139154e-02
  1.00539327e-02 -1.11597283e-02 -6.42955527e-02 -2.40685288e-02
  2.04880424e-02  1.53941782e-02 -5.36515489e-02  4.47202511e-02
 -6.03580549e-02 -7.93070346e-03 -2.23179683e-02 -1.79542899e-02
 -7.65452459e-02 -4.42297682e-02  5.03253490e-02 -7.16030672e-02
  6.26436397e-02 -1.36317257e-02 -2.40496229e-02 -1.18843794e-32
  1.34092364e-02 -9.00926813e-02 -4.60432805e-02 -4.97575141e-02
 -1.21396445e-02  3.50014195e-02  4.03566053e-03 -9.89890695e-02
 -8.47660378e-02 -4.42216657e-02 -8.11260939e-02  2.85079218e-02
  5.66899776e-02  1.82051435e-02  1.73110478e-02  1.00094024e-02
  2.50180010e-02 -2.06664689e-02  7.65954563e-03 -2.62974016e-02
 -5.53484261e-02  9.81470123e-02  1.56103792e-02 -3.12509388e-02
  3.47716324e-02 -3.16389203e-02 -4.34260480e-02  1.05799928e-01
 -2.42558103e-02  3.40765645e-03  4.10646386e-02 -2.60786824e-02
 -2.53666118e-02 -4.35185209e-02 -6.98584691e-02 -6.20200671e-02
  3.47066522e-02  2.23533046e-02 -4.27820086e-02 -5.70862228e-03
  1.13438845e-01 -6.67497097e-03  1.29360764e-03  5.98175004e-02
 -1.57646593e-02  8.36029500e-02 -1.00250475e-01 -6.10265844e-02
 -3.77317816e-02 -8.75577629e-02  3.72512452e-02 -2.55127940e-02
  7.46078342e-02 -6.33492768e-02 -9.27722547e-03 -1.04316352e-02
  8.57696012e-02  2.02346221e-02 -4.23243605e-02 -3.00812069e-02
  1.24268986e-01 -1.83335021e-02  1.23359552e-02 -9.31524392e-03
  1.03385039e-02 -5.13654090e-02 -2.92905327e-02 -3.66323777e-02
 -7.81549066e-02 -5.42424433e-02  6.58291951e-02 -4.25843224e-02
 -4.27062400e-02 -1.16357319e-02 -7.98370913e-02  2.62355525e-02
  4.97009046e-02 -1.08875938e-01 -7.05920383e-02  5.47861904e-02
  4.07187343e-02 -1.10950610e-02  2.44328799e-03  2.06344500e-02
 -2.96549927e-02 -6.47239760e-02  5.66441156e-02 -1.75832622e-02
 -5.03973961e-02 -5.21602063e-03 -3.67425643e-02  6.40920550e-02
 -4.71296757e-02  7.17422739e-02  2.01683342e-02 -6.13907076e-08
  1.97139401e-02 -5.36799170e-02 -1.28525225e-02  6.06944188e-02
 -1.01416185e-02  3.30648124e-02  3.55204828e-02 -2.28136163e-02
  1.77393835e-02 -3.26321274e-02  1.35964593e-02  1.00067686e-02
 -4.73171026e-02 -7.42143914e-02  9.36128050e-02  7.25713298e-02
  1.83482040e-02  2.53950786e-02 -4.81175855e-02 -3.61212194e-02
  6.08094297e-02 -1.03752501e-02 -4.82797772e-02  7.39957094e-02
 -6.01631999e-02 -4.48447056e-02  9.56992432e-02  4.25955169e-02
  6.78932145e-02  9.81087703e-03  4.26810533e-02 -1.74920168e-03
  8.51157382e-02  4.70385291e-02 -9.56915133e-03  3.66230346e-02
 -5.58823682e-02  1.77747514e-02  4.90389131e-02  3.80125158e-02
 -2.90167276e-02  1.07762022e-02 -2.44324207e-02  2.00618897e-02
 -2.69688535e-02 -6.01351087e-04 -1.38253331e-01 -6.50380477e-02
  4.74887788e-02  4.03930107e-03  1.40906153e-02  5.23234233e-02
  4.20241011e-03  1.19705498e-01  5.56249507e-02  1.04519814e-01
 -2.62571350e-02 -4.34614941e-02  5.76765426e-02  4.39638570e-02
 -2.86116847e-03  3.62975732e-03  6.57686666e-02  5.47752194e-02]"
"these accounts are marked as executable and assigned to the BPF Loader. The address of this account is referred to as the program_id and is used to reference the program in all future transactions.

Solana supports multiple BPF Loaders, with the latest being the Upgradable BPF Loader
open in new window
. The BPF Loader is responsible for administering the program’s account and making it available to clients via the program_id. All programs have a single entry point where instruction processing takes place (i.e. process_instruction) and parameters always include:

program_id: pubkey
accounts: array,
instruction_data: byte array

Once invoked, programs are executed by the Solana Runtime.

#
Other Resources
Official Documentation
open in new window
SPL Documentation
open in new window
Program Deploys by Justin Starry
open in new window
Solana Starter Kit by Iron Addicted Dog
open in new window
Programming on Solana by Paulx
open in new window
An Introduction to the Solana Blockchain by Hana
open in new window
Anchor
open in new window #
Program Derived Addresses (PDAs)

Program Derived Addresses (PDAs) are home to accounts that are designed to be controlled by a specific program. With PDAs, programs can programmatically sign for certain addresses without needing a private key. PDAs serve as the foundation for Cross-Program Invocation
open in new window
, which allows Solana apps to be composable with one another.

#
Facts

Fact Sheet

PDAs are 32 byte strings that look like public keys, but don’t have corresponding private keys
findProgramAddress will deterministically derive a PDA from a programId and seeds (collection of bytes)
A bump (one byte) is used to push a potential PDA off the ed25519 elliptic curve
Programs can sign for their PDAs by providing the seeds and bump to invoke_signed
open in new window
A PDA can only be signed by the program from which it was derived
In addition to allowing for programs to sign for different instructions, PDAs also provide a hashmap-like interface for indexing accounts
#
Deep Dive

PDAs are an essential building block for developing programs on Solana. With PDAs, programs can sign for accounts while guaranteeing that no external user could also generate a valid signature for the same account. In addition to signing for accounts, certain programs can also modify accounts held at their PDAs.

Image courtesy of Pencilflip

#
Generating PDAs

To understand the concept behind PDAs, it may be helpful to consider that PDAs are not technically created, but rather found. PDAs are generated from a combination of seeds (such as the string “vote_account”) and a program id. This combination of seeds and program id is then run through a sha256 hash function to see whether or not they generate a public key that lies on the ed25519 elliptic curve.

In running our program id and seeds through a hash function, there is a ~50% chance that we actually end up with a valid public key that does lie on the elliptic curve. In this case, we simply add something to fudge our input a little bit and try again. The technical term for this fudge factor is a bump. In Solana, we start with bump = 255 and simply iterate down through bump = 254, bump = 253, etc. until we get an address that is not on the elliptic curve. This may seem rudimentary, but once found","[-1.06086038e-01 -6.31894320e-02 -1.60881400e-01 -6.55233264e-02
 -4.88974154e-02 -4.58763354e-02  6.83513805e-02  2.12853085e-02
  4.63423654e-02 -4.09354493e-02 -3.97415943e-02  1.07218605e-02
  2.31319270e-03 -9.12055671e-02  6.82786554e-02  2.72575039e-02
 -8.78282562e-02 -4.88320924e-02 -3.53201525e-03  4.18815613e-02
  2.40599061e-03 -2.26858351e-02 -1.28523231e-01  3.72925960e-03
 -8.92843306e-02 -2.91562453e-02 -2.43567023e-02  3.10849468e-03
 -7.06053199e-03 -7.28403172e-03  6.82637170e-02  7.14392439e-02
  2.36388948e-02  2.36717276e-02 -1.40653504e-02  7.67870545e-02
  4.77451198e-02  1.07560633e-02 -3.73822860e-02 -4.04305160e-02
 -4.97846166e-03  1.97962001e-02 -1.04521483e-01  4.47158478e-02
  5.29644405e-03 -3.58519480e-02 -5.86192869e-02 -2.97301752e-03
 -4.87414822e-02 -2.19099522e-02 -2.52692886e-02  5.54198399e-03
 -2.16749292e-02  4.26730216e-02 -1.47081446e-02  8.03957321e-03
  9.32785645e-02 -1.07195815e-02  2.47148573e-02  1.13313772e-01
 -7.71018341e-02  7.38750994e-02 -3.13161500e-02  3.23677361e-02
  9.77855548e-03  2.92769354e-03 -6.28436878e-02 -1.39774820e-02
  5.47243953e-02 -1.53518811e-01 -1.06761850e-01 -6.38346374e-02
 -8.73765051e-02  3.53235356e-03 -5.55821396e-02 -4.01258543e-02
  2.82532256e-02  2.86216140e-02 -6.66310713e-02 -1.17050886e-01
  4.93226014e-03  3.68482582e-02  3.15678418e-02  1.15684792e-02
 -3.09228953e-02  5.90601787e-02 -2.19174009e-02 -5.04588410e-02
  1.23729758e-01  1.13593273e-01  4.04465199e-02 -1.87326446e-02
  2.15535797e-02  8.65307054e-04  1.03476256e-01  2.29855701e-02
  3.68750803e-02  4.44642408e-03 -3.86267081e-02  6.42987266e-02
  5.31868357e-03 -2.84287408e-02  3.02000735e-02 -8.72353371e-03
 -9.49663855e-03 -4.20117564e-02  7.47229382e-02 -1.22001413e-02
 -6.41096681e-02 -2.89907958e-02 -1.32643227e-02  1.28429327e-02
  1.53940674e-02 -5.45051880e-02 -8.28602351e-03 -1.49081610e-02
 -5.19560911e-02  6.34743795e-02  1.93242524e-02 -2.63131689e-02
 -1.28762806e-02  8.18136558e-02  3.43845785e-02 -8.47682506e-02
 -5.50837144e-02  3.03515587e-02 -9.19169635e-02  6.38838568e-33
  2.08327714e-02 -2.04108153e-02  3.17324623e-02  1.07564898e-02
  2.51811575e-02 -4.64207642e-02  2.72744126e-03 -5.40108129e-04
 -8.41599256e-02 -4.74681472e-03  9.69181582e-03  3.64504084e-02
 -3.19078341e-02  6.71615601e-02  2.13689078e-02 -3.60182375e-02
 -5.42543121e-02  6.14841916e-02  5.01665547e-02  9.22898669e-03
 -2.35258183e-03  1.50223700e-02 -3.08983270e-02  9.82482173e-03
  1.37054190e-01  3.45586613e-02 -4.25060652e-02  1.55183738e-02
 -1.47063320e-03  1.39137618e-02 -1.64538324e-02 -6.32460415e-02
 -6.08630739e-02  2.71854550e-02  5.30742183e-02  1.83743238e-02
 -6.55985624e-03 -4.91106287e-02 -2.89111678e-02 -7.74277523e-02
  7.35377520e-02  2.54043993e-02  4.81975228e-02  4.05861214e-02
 -9.10882950e-02 -5.52343503e-02 -3.37141231e-02  9.77339521e-02
  5.98657988e-02  3.51487584e-02 -1.59055814e-02  5.38619235e-03
  1.01686781e-02  3.85167673e-02 -2.14407854e-02 -5.58676794e-02
 -4.33583669e-02 -4.04207855e-02  2.36794073e-02  6.96767569e-02
  2.91990954e-02  3.42664719e-02 -3.52670252e-02  6.29941151e-02
  5.03485538e-02 -1.71566438e-02  8.63324013e-03 -1.83709264e-02
  7.78485164e-02  1.71552431e-02 -6.49160147e-02  2.37478688e-02
  3.27031463e-02  5.10091819e-02  3.34236026e-02 -4.05332260e-02
 -3.29294638e-03  4.97055240e-02 -8.38645548e-02  3.96585166e-02
 -2.00951286e-03  2.00465173e-02 -1.89992469e-02  3.85985486e-02
 -9.77244824e-02  1.73013806e-02 -1.40715353e-02 -5.22233844e-02
 -8.99403542e-02 -9.77478027e-02  7.24813640e-02 -3.58526073e-02
  5.49346302e-03  4.55899797e-02 -3.64354327e-02 -8.48383220e-33
  2.41153967e-02 -7.64060020e-02 -4.60731499e-02 -1.14184141e-01
 -1.99898761e-02  1.57352199e-03  1.14799244e-02 -1.02358401e-01
 -4.94494550e-02 -2.18578670e-02 -6.21977225e-02  3.70720550e-02
  2.99602300e-02  1.14039769e-02  2.86224075e-02 -1.13556003e-02
  7.05386559e-03 -4.50697029e-03 -6.54597357e-02 -5.35820909e-02
 -8.16583913e-03  1.02668963e-01  5.44795170e-02 -8.84452648e-03
  2.29851641e-02 -8.85742232e-02 -9.12976172e-03  8.82118493e-02
 -3.70094031e-02 -1.99704636e-02  7.93865919e-02  7.33635796e-04
 -6.37633726e-02 -3.25353327e-03 -7.50386193e-02 -7.21674636e-02
  3.47472690e-02  3.00098993e-02  4.60163690e-03  7.97966216e-03
  8.72872248e-02  2.27576122e-02  2.40604896e-02  8.39237720e-02
  1.85095414e-03  5.61754704e-02 -4.64998260e-02 -5.98027967e-02
 -4.33813594e-02 -3.19873020e-02 -2.83707436e-02 -4.01596464e-02
  5.08866422e-02 -1.60162430e-02  1.67442691e-02  2.77434010e-03
  9.18989107e-02  2.72406973e-02  2.28827242e-02 -3.29106338e-02
  1.04976751e-01  1.29937241e-03  2.73546297e-02  5.51471561e-02
 -7.92326778e-03 -4.59434055e-02  4.52502631e-03 -3.35853994e-02
 -6.02381751e-02 -8.12139735e-02  7.80294687e-02 -7.91131258e-02
 -4.87555191e-02  2.31420975e-02 -8.27184767e-02  2.69422214e-02
  1.45401713e-02 -6.11600019e-02 -1.01134509e-01  4.66418229e-02
  1.05927829e-02 -3.57112437e-02  2.84683760e-02  4.97326925e-02
 -4.90769707e-02 -9.53913927e-02  7.17414990e-02 -5.32461517e-02
 -3.53317969e-02  6.66553667e-03 -3.25027667e-02  2.94528157e-02
 -1.81122255e-02  8.84499252e-02 -2.81216186e-02 -5.14088008e-08
 -2.18050517e-02 -3.54874805e-02  7.50022416e-04  5.30050369e-03
 -4.31355350e-02  7.18642995e-02 -3.63057368e-02 -1.40057784e-02
  7.18628895e-03 -1.45660061e-02  1.05762556e-02 -1.17595596e-02
 -1.22461626e-02 -4.03910540e-02  7.02336431e-02  5.08057885e-02
  3.40936519e-02  6.63755387e-02 -4.05064225e-02 -1.80220767e-03
  6.23916574e-02  1.50478268e-02  2.27287803e-02  2.58425921e-02
 -2.73933169e-02 -4.96653169e-02  4.21650708e-02  6.26580939e-02
  3.59799117e-02 -3.00028510e-02  4.73142155e-02  3.33165228e-02
  9.36722308e-02  2.79701618e-03  3.71882170e-02  9.90118608e-02
 -6.50227293e-02 -8.77712667e-03  1.32049927e-02  9.03719515e-02
 -4.18287888e-02 -5.67105375e-02 -1.57596660e-03  1.60324089e-02
  1.59787247e-03  1.70009360e-02 -1.31557330e-01 -4.59853647e-04
  8.14052075e-02 -2.23623570e-02  6.45050034e-03  5.53126000e-02
  5.32545336e-02  7.06470907e-02  3.39177288e-02  8.77162516e-02
 -7.23842308e-02  3.73856090e-02  7.14078099e-02  5.10400198e-02
 -7.16804666e-03  7.12635145e-02  4.40509282e-02  5.30218519e-02]"
"it gives us a deterministic way of deriving the same PDA over and over again.

#
Interacting with PDAs

When a PDA is generated, findProgramAddress will return both the address and the bump used to kick the address off of the elliptic curve. Armed with this bump, a program can then sign for any instruction that requires its PDA. In order to sign, programs should pass the instruction, the list of accounts, and the seeds and bump used to derive the PDA to invoke_signed. In addition to signing for instructions, PDAs must also sign for their own creation via invoke_signed.

When building with PDAs, it is common to store the bump seed
open in new window
 in the account data itself. This allows developers to easily validate a PDA without having to pass in the bump as an instruction argument.

#
Other Resources
Official Documentation
open in new window
Understanding Program Derived Addresses
open in new window #
Cross Program Invocations (CPIs)

A Cross-Program Invocation (CPI) is a direct call from one program into another, allowing for the composability of Solana programs. Just as any client can call any program using the JSON RPC, any program can call any other program via a CPI. CPIs essentially turn the entire Solana ecosystem into one giant API that is at your disposal as a developer.

The purpose of this section is to provide a high-level overview CPIs. Please refer to the linked resources below for more detailed explanations, examples, and walkthroughs.

#
Facts

Fact Sheet

A Cross-Program Invocation (CPI) is a call from one program to another, targeting a specific instruction on the program being called
CPIs allow the calling program to extend its signer privileges to the callee program
Programs can execute CPIs using either invoke or invoke_signed within their instructions
invoke is used when all required signatures are accessible prior to invocation, without the need for PDAs to act as signers
invoke_signed is used when PDAs from the calling program are required as signers in the CPI
After a CPI is made to another program, the callee program can make further CPIs to other programs, up to a maximum depth of 4
#
Deep Dive

Cross Program Invocations (CPIs) enable the composability of Solana programs, which allow developers to utilize and build on the instruction of existing programs.

To execute CPIs, use the invoke
open in new window
 or invoke_signed
open in new window
 function found in the solana_program crate.

// Used when there are not signatures for PDAs needed
pub fn invoke(
    instruction: &Instruction,
    account_infos: &[AccountInfo<'_>]
) -> ProgramResult

// Used when a program must provide a 'signature' for a PDA, hence the signer_seeds parameter
pub fn invoke_signed(
    instruction: &Instruction,
    account_infos: &[AccountInfo<'_>],
    signers_seeds: &[&[&[u8]]]
) -> ProgramResult

1
2
3
4
5
6
7
8
9
10
11
12


To make a CPI, you must specify and construct an instruction on the program being invoked and supply a list of accounts necessary for that instruction. If a PDA is required as a signer, the signers_seeds must also be provided when using invoke_signed.

#
CPI with invoke

The invoke function is used when making a CPI that does not require any PDAs to act as signers. When making CPIs, the Solana runtime extends the original signature passed into a program to","[-1.72227651e-01  2.19882728e-04 -7.36475736e-02 -9.51882917e-03
  8.13435484e-03 -1.07808188e-01 -5.80274835e-02  5.66092245e-02
  7.19087794e-02 -4.09340374e-02  7.20777288e-02  3.92312482e-02
 -1.54220294e-02 -7.96874836e-02  7.88373947e-02  1.17362523e-03
 -9.17867497e-02 -4.67416123e-02 -1.18030496e-02 -2.17054300e-02
 -1.22430976e-02 -4.86336797e-02 -6.10547625e-02  2.11753603e-02
 -9.79866982e-02 -1.28675867e-02  9.33778733e-02 -5.99971879e-03
  6.93224967e-02  2.32349569e-03  8.64308998e-02  5.85065819e-02
 -4.10101749e-03  2.74734348e-02 -4.59968261e-02  1.11931093e-01
  6.03483766e-02  1.08895982e-02 -3.40460092e-02 -3.38212885e-02
  1.04440898e-02 -3.16540301e-02 -5.24604991e-02  1.20909698e-02
  8.31969455e-03 -5.17596155e-02 -1.42624136e-02  4.60022651e-02
 -4.72829118e-02 -5.01615517e-02  3.02015170e-02 -2.83090379e-02
 -4.22254503e-02  2.69152634e-02 -5.90710565e-02  5.48310094e-02
  6.42843619e-02  2.52287257e-02 -4.78831632e-03  6.20574318e-02
 -2.94301081e-02  3.00018247e-02 -3.40479203e-02  3.79861402e-03
  6.26892671e-02 -7.01384693e-02  7.26051405e-02 -3.54976505e-02
  7.72182941e-02 -5.47570810e-02 -6.41730204e-02 -4.86494713e-02
 -3.55497338e-02  3.52083929e-02  5.39508834e-02 -9.26908385e-03
 -2.01008264e-02  2.60093007e-02 -1.71741433e-02 -1.09610654e-01
  1.87677089e-02  7.66727030e-02 -8.48328415e-03 -9.22933128e-03
  3.81320342e-02  5.37277572e-02 -6.02627583e-02 -4.43780832e-02
  1.28742725e-01  2.63699107e-02  8.32640529e-02 -9.39851925e-02
 -1.10570766e-01  1.09119259e-03  2.44355220e-02  4.34744582e-02
  8.70060325e-02 -9.45843104e-03  6.34803250e-03  5.04709110e-02
  3.86545621e-03  9.94753558e-03 -3.01485658e-02  1.27294613e-02
  1.08617088e-02  3.31199565e-03  7.20026623e-03 -6.43177778e-02
  2.41038091e-02  3.72529253e-02 -4.42723334e-02 -4.13230248e-02
  2.63112038e-02 -4.22942489e-02 -4.51027527e-02 -1.18381018e-02
 -6.02535941e-02  2.68599223e-02 -2.26141121e-02 -4.97656353e-02
 -3.89587786e-03 -1.42963231e-02  2.46615633e-02 -4.61373851e-02
 -6.69881841e-03  1.06341885e-02 -7.68759772e-02  4.69066070e-33
  8.15979838e-02  3.49845588e-02 -5.77425845e-02  1.65172536e-02
 -3.67788747e-02 -4.23195697e-02  2.57173534e-02  4.80238162e-02
 -7.10345581e-02  3.65573540e-02  1.60763487e-02  8.64068195e-02
  3.78383510e-02  5.10545224e-02  2.84692869e-02  8.96534603e-03
  6.66226074e-03  2.68794745e-02  2.33832225e-02  1.38042052e-03
  2.49118023e-02  6.83130324e-03  6.32725507e-02 -3.73202823e-02
  1.29988953e-01  9.31428373e-02 -2.34569293e-02  3.73023897e-02
  8.44168197e-03  1.33952359e-02 -8.09443966e-02  1.58698168e-02
 -7.18149766e-02  4.45011966e-02  7.74369538e-02  5.54712117e-02
  5.18334471e-03 -1.21010348e-01 -5.01847779e-03 -5.27982339e-02
  7.36154020e-02  5.02064228e-02  4.04476747e-02 -5.84427267e-02
 -3.12220640e-02 -5.77773433e-03 -7.07118511e-02  4.15149368e-02
  4.10283692e-02 -2.12369341e-04  8.75388214e-04  1.82419419e-02
  8.12393613e-03 -1.88177489e-02 -3.25065143e-02 -6.85917959e-02
 -3.30739096e-02 -7.02848956e-02  1.57210436e-02  5.42455427e-02
  4.20692749e-02  1.83251929e-02 -1.12920767e-02  2.54486743e-02
 -1.01086043e-01 -8.53893216e-05 -3.10511477e-02  1.05785556e-01
  6.41456321e-02  3.60723473e-02 -2.54862122e-02  5.87415695e-02
 -1.07967399e-01  6.78258017e-02  9.08873137e-03 -7.28435516e-02
  2.38778591e-02  7.21742734e-02  8.05643871e-02 -3.17913890e-02
 -1.44405207e-02 -2.47694505e-03  2.37305705e-02  6.68119341e-02
 -2.70268023e-02  3.93769238e-03  2.01074705e-02 -1.97010823e-02
 -9.47140753e-02 -6.40605092e-02 -5.09724859e-03  1.61829367e-02
  1.57899484e-02  1.07652612e-01  1.47950426e-02 -7.50091247e-33
 -2.23631654e-02 -8.95045623e-02 -1.01801328e-01 -5.03005274e-02
 -3.24314907e-02 -2.74259951e-02 -1.83851551e-02 -3.69751751e-02
 -4.89171036e-02 -4.89270650e-02 -7.03582987e-02 -8.92642047e-03
  1.57410484e-02 -1.42619247e-02  4.98457588e-02 -6.81695864e-02
 -6.39325753e-02  8.43709055e-03 -2.17531547e-02  1.26199489e-02
 -8.84381309e-03  3.47313248e-02 -5.00326864e-02 -1.49062918e-02
 -1.54876884e-03 -9.59677324e-02 -3.53230461e-02  3.61475646e-02
 -3.87563519e-02  2.26612985e-02  6.80685118e-02  5.53573854e-03
 -1.00010209e-01 -6.80089288e-04 -6.90508559e-02 -5.01344167e-02
  4.22230549e-02  4.88278549e-03  1.85601823e-02 -1.09830620e-02
  8.28684941e-02  1.89211648e-02  8.80998187e-03  6.63154125e-02
  8.32289644e-03  1.08128250e-01 -1.69643983e-02  7.40664899e-02
 -4.09165099e-02  3.98992002e-03  9.03431028e-02  4.09301650e-03
  3.90937291e-02 -6.06131367e-03 -6.57229051e-02  3.87201980e-02
  7.96549246e-02  2.47026104e-02  1.69130769e-02 -1.11890128e-02
  8.71080253e-03 -1.38936369e-02 -2.88671292e-02  5.35000935e-02
 -5.45576178e-02 -3.20351832e-02  2.21536565e-03 -3.63126621e-02
 -4.82876487e-02 -1.94354821e-02  7.71637857e-02 -5.75520843e-02
 -8.30524415e-02 -1.12086479e-02 -3.95024195e-02 -2.22214144e-02
 -5.73396543e-03 -1.35577068e-01 -3.83767970e-02 -1.68800149e-02
 -8.16706866e-02 -3.39636505e-02  4.11640145e-02  3.07667330e-02
 -5.06578125e-02 -8.90367944e-03  4.07741219e-02 -5.19388840e-02
 -7.19530582e-02  3.89239602e-02 -4.20392863e-02  1.35076968e-02
 -4.21453454e-02  1.10951960e-01 -5.58939353e-02 -5.86457141e-08
 -3.15726139e-02 -2.01904494e-02  8.16564821e-03 -1.38258152e-02
  1.10060144e-02  2.14375574e-02 -4.13137898e-02  1.32204555e-02
  4.53434847e-02 -4.23995443e-02  3.86487246e-02  7.39791081e-04
 -8.24561268e-02 -4.31526192e-02  1.63632371e-02  1.10563032e-01
  2.82177962e-02  3.72358784e-02 -9.24550891e-02 -1.48851369e-02
  2.64722984e-02  3.48741896e-02 -2.42499560e-02  6.13317534e-04
  2.12772563e-02 -2.08620541e-02  6.94873706e-02  1.57587975e-01
 -2.22648252e-02 -5.15512861e-02  1.65120307e-02  1.49065331e-02
  9.28951278e-02  7.45838881e-02  3.53582315e-02  8.68574679e-02
  9.22410935e-03 -4.65266593e-02  3.39920335e-02 -5.34728682e-03
 -3.83147784e-02 -1.10481190e-03 -5.47149815e-02 -3.71643901e-02
 -1.77982021e-02  3.38861346e-02 -7.79868960e-02 -3.37315686e-02
  3.61788989e-04  1.59889292e-02 -5.42820953e-02 -3.82103696e-02
  5.87565713e-02  1.88158303e-02  6.28882349e-02  5.64463018e-03
 -5.73692918e-02 -2.23270170e-02  1.26002297e-01  8.36313982e-03
  5.14484383e-02 -2.88006049e-02  9.70132574e-02  2.80409604e-02]"
"the callee program.

invoke(
    &some_instruction,                           // instruction to invoke
    &[account_one.clone(), account_two.clone()], // accounts required by instruction
)?;

1
2
3
4

#
CPI with invoke_signed

To make a CPI that requires a PDA as a signer, use the invoke_signed function and provide the necessary seeds to derive the required PDA of the calling program.

invoke_signed(
    &some_instruction,                   // instruction to invoke
    &[account_one.clone(), pda.clone()], // accounts required by instruction, where one is a pda required as signer
    &[signers_seeds],                    // seeds to derive pda
)?;

1
2
3
4
5


While PDAs have no private keys of their own, they can still act as a signer in an instruction via a CPI. To verify that a PDA belongs to the calling program, the seeds used to generate the PDA required as a signer must be included in as signers_seeds.

The Solana runtime will internally call create_program_address using the seeds provided and the program_id of the calling program. The resulting PDA is then compared to the addresses supplied in the instruction. If there's a match, the PDA is considered a valid signer.

#
CPI Instruction

Depending on the program you're making the call to, there may be a crate available with helper functions for creating the Instruction. Many individuals and organizations create publicly available crates alongside their programs that expose these sorts of functions to simplify calling their programs.

The definition of the Instruction type required for a CPI includes:

program_id - the public key of the program that executes the instruction
accounts - a list of all accounts that may be read or written to during the execution of the instruction
data - the instruction data required by the instruction
pub struct Instruction {
    pub program_id: Pubkey,
    pub accounts: Vec<AccountMeta>,
    pub data: Vec<u8>,
}

1
2
3
4
5


The AccountMeta struct has the following definition:

pub struct AccountMeta {
    pub pubkey: Pubkey,
    pub is_signer: bool,
    pub is_writable: bool,
}

1
2
3
4
5


When creating a CPI, use the following syntax to specify the AccountMeta for each account:

AccountMeta::new - indicates writable
AccountMeta::new_readonly - indicates not writable
(pubkey, true) - indicates account is signer
(pubkey, false) - indicates account is not signer

Here is an example:

use solana_program::instruction::AccountMeta;

let account_metas = vec![
    AccountMeta::new(account1_pubkey, true),
    AccountMeta::new(account2_pubkey, false),
    AccountMeta::new_readonly(account3_pubkey, false),
    AccountMeta::new_readonly(account4_pubkey, true),
]

1
2
3
4
5
6
7
8

#
CPI AccountInfo

To use invoke and invoke_signed, a list of account_infos is also required. Similar to the list of AccountMeta in the instruction, you need to include all the AccountInfo of each account that the program you're calling will read from or write to.

For reference, the AccountInfo struct has the following definition:

/// Account information
#[derive(Clone)]
pub struct AccountInfo<'a> {
    /// Public key of the account
    pub key: &'a Pubkey,
    /// Was the transaction signed by this account's public key?
    pub is_signer: bool,
  ","[-1.57809675e-01  8.08702689e-03 -1.07293852e-01 -6.73119351e-02
 -6.36959076e-02 -1.58150479e-01 -3.95616442e-02  4.97063287e-02
 -3.38700190e-02  6.50200818e-04  5.80462962e-02 -3.59115228e-02
  2.12007631e-02 -8.97485465e-02  3.76281328e-02 -1.56626869e-02
 -5.80182038e-02 -3.32751274e-02 -1.25339199e-02  1.12109808e-02
  5.30489758e-02 -6.05900735e-02 -5.94458692e-02 -7.96972029e-03
 -4.69448394e-04 -2.85605770e-02  4.44513150e-02 -3.08009665e-02
  5.66636287e-02  2.90663298e-02  6.90820441e-02  1.01302274e-01
 -3.77217261e-03  5.16892131e-03  5.39305434e-02  1.58583432e-01
  6.99078292e-02 -8.10985174e-03 -1.00025749e-02 -2.87629664e-02
  3.24536376e-02 -1.06165223e-02 -7.45127723e-02  1.98251605e-02
 -5.64392470e-02 -2.62719486e-03 -7.98275508e-03  9.41365138e-02
 -3.08483802e-02 -7.80261755e-02 -1.13418745e-02  4.29824553e-02
 -8.80219191e-02  1.51655674e-02 -4.55466434e-02  7.96906184e-03
  9.91376862e-02 -8.04263540e-03 -2.53283679e-02  6.64370209e-02
 -8.37438181e-02  1.31100535e-01 -3.54831181e-02 -8.68871436e-03
  3.04492842e-02  1.31861372e-02  5.60269086e-03 -6.84510618e-02
  2.12014243e-02 -1.33233669e-03 -4.44385968e-02 -5.73688596e-02
 -5.12002893e-02  4.10944372e-02 -3.09173949e-02  7.00266426e-03
 -1.58236232e-02  2.90377513e-02 -3.63008231e-02 -1.66498393e-01
 -1.69844576e-03  3.12992372e-02  3.98288220e-02 -3.08103450e-02
 -1.68604646e-02  2.24234052e-02 -2.98545994e-02 -3.26884985e-02
  1.46181598e-01  7.37339333e-02  8.54859427e-02 -2.00532544e-02
 -3.28510143e-02 -3.33098285e-02  1.27437443e-01  5.30709922e-02
  6.76497072e-02 -1.51211936e-02  4.02718410e-03  3.97901125e-02
 -3.89181264e-02 -5.53947836e-02 -1.82264280e-02 -4.09998419e-03
  1.42213814e-02 -2.86948564e-03  1.89822260e-02 -9.77229923e-02
 -2.47805547e-02  4.69141230e-02  1.08354948e-02  9.49144922e-03
  5.18118627e-02 -3.43903690e-03  3.46826054e-02 -7.37195043e-03
 -6.74252072e-03  3.24910320e-02  1.56672765e-03 -2.32258197e-02
  3.76386661e-03  6.04119077e-02  4.63411137e-02 -8.88300221e-03
 -5.05737681e-03 -1.81645658e-02 -5.21035902e-02  2.95172417e-34
  4.35659476e-02  4.72108871e-02  2.25839559e-02  3.66198607e-02
 -5.97342812e-02  1.50597356e-02  9.37240645e-02  2.62900647e-02
 -8.07027966e-02  9.89114307e-03 -3.91684659e-03  2.04702318e-02
  4.49426705e-03  4.19562943e-02  1.60291307e-02  2.07044706e-02
  3.43946833e-03  2.11944431e-02  3.62520628e-02  1.83620434e-02
  5.48185036e-02  2.07365453e-02  3.33696953e-04  1.40283871e-02
  6.03555366e-02  4.37953174e-02 -8.29726160e-02 -3.41936611e-02
  4.75465693e-02 -1.03293303e-02 -4.45097163e-02 -3.62571850e-02
 -3.60958725e-02  4.33720797e-02  4.17475663e-02  8.48607812e-03
  1.95870474e-02 -7.40492865e-02 -4.10055816e-02 -1.17698833e-01
  1.09313935e-01  2.85097267e-02  4.94713038e-02 -1.92092396e-02
 -3.36324014e-02 -1.61213167e-02 -7.66806751e-02  7.20418021e-02
  7.12809041e-02  2.43368298e-02 -2.01264974e-02  1.30843008e-02
  5.61150722e-03 -7.87933916e-03 -4.30541188e-02 -5.28590716e-02
 -9.85128433e-03 -3.25481780e-02  4.39038873e-02  5.08013740e-02
 -1.83587261e-02  6.95300400e-02 -2.30500475e-02  7.07513019e-02
 -2.09289026e-02 -1.06779803e-02 -6.59404621e-02  3.13300900e-02
  9.62340012e-02 -2.67486218e-02 -2.89986189e-02 -6.47552265e-03
 -1.27169207e-01  2.19825730e-02  1.62209459e-02 -4.33709696e-02
  5.63066900e-02  3.02118901e-02 -9.49009508e-02 -2.92693377e-02
 -8.75304453e-03  4.94642965e-02 -3.51877287e-02 -3.99924954e-03
 -2.67337430e-02  1.52790966e-02  3.25223571e-03 -2.84780040e-02
 -6.55777156e-02 -5.74104264e-02  5.90305068e-02 -5.58382086e-02
 -4.63282429e-02  5.29316291e-02 -1.05445366e-02 -3.68072297e-33
 -1.40508553e-02 -8.47935379e-02  1.21033853e-02 -1.03720129e-02
 -3.63682956e-02 -4.11378443e-02 -1.26235178e-02 -8.63335505e-02
 -8.07529986e-02 -3.01671028e-02 -8.15421641e-02 -1.28528550e-02
  3.22371013e-02 -1.41061386e-02  2.50264443e-02 -3.40937935e-02
 -1.24631673e-02  7.80699700e-02  5.69765642e-02  4.59026080e-03
 -2.30431240e-02  1.39252126e-01 -1.11108262e-03  5.87001070e-02
 -3.89944157e-03 -8.14992040e-02 -6.74796030e-02  9.24209133e-02
  5.06878234e-02 -3.88401672e-02  9.60599855e-02  3.94615978e-02
 -4.01946120e-02  9.82994400e-03 -5.64835370e-02 -6.09591529e-02
  4.72123772e-02  3.51043269e-02 -2.50037014e-02  1.84440203e-02
  1.11992396e-01 -4.01021615e-02 -2.35528089e-02  6.99439570e-02
  3.29788099e-03 -7.81887490e-03  3.12572792e-02 -2.07253303e-02
 -8.36886540e-02  2.06672810e-02  3.06197777e-02 -6.23459220e-02
  4.36070599e-02  1.97848249e-02 -2.65562255e-02  1.56319663e-02
  1.29743025e-01  6.61390647e-02  9.29424837e-02 -2.25173999e-02
  8.36654082e-02 -1.65331513e-02  2.11222805e-02 -3.57351825e-02
  5.69333415e-03 -6.35910928e-02  5.07256836e-02 -3.50697490e-04
  1.15265204e-02  1.16056611e-03  5.46604358e-02 -4.09017429e-02
 -1.65200625e-02 -1.55357979e-02  8.03990476e-03  2.71020979e-02
 -4.05267179e-02  1.24269370e-02 -4.00983803e-02 -1.39455218e-02
 -1.02480642e-01 -2.53373645e-02  3.50371376e-02  5.17792292e-02
 -6.01933375e-02 -7.53841773e-02  1.39791220e-01 -4.96212319e-02
 -6.60314411e-02  3.66782695e-02 -3.00823599e-02  3.27596366e-02
  3.92008498e-02  5.79790547e-02 -1.54554369e-02 -4.82247877e-08
  2.20864601e-02 -9.59901884e-03  7.21084280e-03  2.33833119e-02
 -8.79909471e-03  1.57753173e-02 -1.48489652e-02 -4.49459143e-02
 -1.25500523e-02 -4.57466543e-02 -2.38240119e-02 -2.55493391e-02
 -1.27979210e-02 -4.04146314e-02 -1.22234726e-03  2.02818792e-02
 -5.21099847e-03  2.90593947e-03 -7.59818703e-02 -5.46310544e-02
 -1.36012761e-02 -4.65299673e-02 -6.50228858e-02  2.92714834e-02
 -6.17539883e-02 -6.57859142e-04  8.49611089e-02  7.09171891e-02
  2.45322213e-02 -6.75134826e-03  1.07245436e-02  1.48673430e-02
  9.60194692e-02 -2.33395156e-02 -1.03737377e-02  3.77880186e-02
 -9.32838209e-03 -4.85484814e-03  5.99770956e-02 -2.98849363e-02
 -4.77270484e-02  1.90831069e-02 -8.14438909e-02 -3.69227789e-02
  5.83590455e-02 -2.07842290e-02 -1.33880600e-01 -7.66388327e-02
  4.20211330e-02  3.33400909e-03 -3.42878364e-02  1.72702558e-02
  1.45886736e-02  4.27345261e-02  1.65315047e-02 -9.32357088e-03
 -6.36861324e-02  7.44117647e-02  1.17205009e-01  2.41007451e-02
  4.26310934e-02  7.24720731e-02  2.08731648e-02 -1.42952276e-03]"
" /// Is the account writable?
    pub is_writable: bool,
    /// The lamports in the account.  Modifiable by programs.
    pub lamports: Rc<RefCell<&'a mut u64>>,
    /// The data held in this account.  Modifiable by programs.
    pub data: Rc<RefCell<&'a mut [u8]>>,
    /// Program that owns this account
    pub owner: &'a Pubkey,
    /// This account's data contains a loaded program (and is now read-only)
    pub executable: bool,
    /// The epoch at which this account will next owe rent
    pub rent_epoch: Epoch,
}

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20


You can create a copy of the AccountInfo for each required account using the Clone
open in new window
 trait, which is implemented for the AccountInfo
open in new window
 struct in the solana_program crate.

let accounts_infos = [
    account_one.clone(),
    account_two.clone(),
    account_three.clone(),
];

1
2
3
4
5


While this section has provided a high-level overview of CPIs, more detailed explanations, examples, and walkthroughs can be found in the linked resources below.

#
Other Resources
Official Documentation
open in new window
Solana Cookbook Reference
open in new window
Solana Course Native CPI Lesson
open in new window
Solana Course Anchor CPI Lesson
open in new window
Solana Developers Program Examples
open in new window # Get Program AccountsAn RPC method that returns all accounts owned by a program. Currently pagination is not supported. Requests to getProgramAccounts should include the dataSlice and/or filters parameters to improve response time and return only intended results.# FactsParametersprogramId: string - Pubkey of the program to query, provided as a base58 encoded string(optional) configOrCommitment: object - Configuration parameters containing the following optional fields: (optional) commitment: string - State commitmentopen in new window(optional) encoding: string - Encoding for account data, either: base58, base64, or jsonParsed. Note, web3js users should instead use getParsedProgramAccountsopen in new window(optional) dataSlice: object - Limit the returned account data based on: offset: number - Number of bytes into account data to begin returninglength: number - Number of bytes of account data to return(optional) filters: array - Filter results using the following filter objects: memcmp: object - Match a series of bytes to account data: offset: number - Number of bytes into account data to begin comparingbytes: string - Data to match, as base58 encoded string limited to 129 bytesdataSize: number - Compares the account data length with the provided data size(optional) withContext: boolean - Wrap the result in an RpcResponse JSON objectopen in new window# ResponseBy default getProgramAccounts will return an array of JSON objects with the following structure:pubkey: string - The account pubkey as a base58 encoded stringaccount: object - a JSON object, with the following sub fields: lamports: number, number of lamports assigned to the accountowner: string, The base58 encoded pubkey of the program the account has been assigned todata: string | object - data associated with the account, either as encoded binary data or JSON format depending on the provided encoding parameterexecutable: boolean, Indication if the account contains a programrentEpoch: number, The epoch at which this account will next owe rent# Deep DivegetProgramAccounts is","[-2.80216597e-02 -2.30736751e-02 -1.25533476e-01 -1.12472419e-02
 -1.34398770e-02 -1.71323940e-02  2.81778164e-02  2.29240786e-02
 -7.65433768e-03  3.91638018e-02  2.01671515e-02 -1.65878329e-02
 -5.17705409e-03 -3.65495756e-02  8.41475464e-03 -1.37821417e-02
 -1.40304998e-01 -5.27048204e-03  5.92603460e-02  8.13396089e-03
  7.03229010e-02 -4.41384502e-02  1.47558199e-02  2.80226581e-03
  6.57820553e-02 -2.41083112e-02 -5.48568182e-02  5.77008426e-02
 -6.67776819e-03 -5.56539521e-02  6.87958375e-02  2.78669093e-02
 -4.77358773e-02  2.41079479e-02  4.36223932e-02  1.33203566e-01
  4.28245496e-03 -1.01440005e-01  1.42721497e-02 -6.76511154e-02
 -2.22292845e-03  3.05162091e-02 -8.94257203e-02  2.92641134e-03
 -1.07714431e-02  1.19168861e-02 -4.87944633e-02  3.67046595e-02
 -1.52390031e-02 -1.11601211e-03 -8.16358533e-03 -5.55442795e-02
 -3.76385637e-02  8.19976628e-02  9.26378146e-02  3.71232405e-02
  5.66943325e-02 -3.04777399e-02  3.77728492e-02  8.22660234e-03
 -1.76860020e-02  8.37223008e-02 -2.33000312e-02 -1.79252252e-02
 -3.18971612e-02  4.06512655e-02 -5.88766225e-02  3.40811140e-03
  1.33263152e-02 -6.86047450e-02 -1.81510486e-02 -4.15168814e-02
 -1.08588204e-01 -1.83788035e-02 -6.22722320e-02  5.95829217e-03
 -3.33509408e-03  4.09831740e-02 -3.29849944e-02 -6.96415827e-02
 -6.30242154e-02 -2.63031013e-02  2.21784972e-02  8.65491182e-02
 -1.18751088e-02 -3.59842852e-02  2.69711465e-02 -4.40559946e-02
  6.65529370e-02  6.11032061e-02  1.27389804e-02  5.22247292e-02
  6.94854781e-02  2.92743687e-02  1.19399756e-01  4.96604219e-02
  9.66802090e-02  4.43973467e-02 -2.51149666e-02  8.47638547e-02
 -9.58710257e-03  5.90832271e-02  6.97153714e-03  3.73033509e-02
  6.99789748e-02 -5.05770929e-02  9.31000933e-02 -1.01759277e-01
 -1.21786043e-01 -7.12817386e-02  3.14672664e-02  1.14939483e-02
  4.48102280e-02  2.80195028e-02  7.19609037e-02  5.49828401e-03
 -1.57687590e-02  6.24787100e-02 -4.86384295e-02  6.10024221e-02
  9.05912966e-02  9.91175994e-02  5.97216077e-02  7.01126084e-03
 -4.04744688e-03  9.85702593e-03 -9.60482343e-04  4.99858989e-33
  5.09093590e-02 -4.88933139e-02 -6.99889958e-02  4.24464196e-02
  2.83898227e-02  1.48829687e-02  3.77365667e-03  7.71380216e-02
 -1.31821245e-01 -7.26324692e-03  3.37095186e-02 -2.77364714e-04
 -2.99358554e-02 -7.05595165e-02  6.49401173e-02  3.81455058e-03
  1.98071003e-02  4.67901379e-02  6.31593019e-02  5.72893303e-03
  2.07909625e-02 -4.10945825e-02 -5.02046272e-02 -7.91967511e-02
  2.26294566e-02 -6.13502227e-02 -7.49247149e-02 -3.79554108e-02
 -9.58353840e-03  2.59886701e-02 -6.22108579e-02 -5.50675625e-03
 -4.77285907e-02  3.72382589e-02  1.38433864e-02 -2.85861529e-02
  3.21087614e-02 -6.31905273e-02 -6.69991896e-02 -3.85878771e-03
  9.84687731e-02  1.18690089e-03  9.63429082e-03 -3.64258289e-02
 -3.91739905e-02  8.47074296e-03 -3.23802046e-02  7.62476623e-02
  5.25927506e-02  6.72399476e-02 -3.57208997e-02  1.30295823e-03
 -1.09207876e-01 -2.92218160e-02 -3.52843627e-02 -4.24271971e-02
 -4.01794165e-02 -3.12860981e-02  4.35487702e-02 -3.72464157e-04
  6.63760528e-02  2.05749888e-02 -1.19072888e-02  4.77908403e-02
 -1.76182631e-02  1.05761178e-02 -2.52231713e-02 -1.02387359e-02
  5.66715784e-02  3.34129781e-02 -4.92826104e-02  3.23203579e-02
 -6.65438101e-02  2.58836173e-03 -3.08279544e-02 -7.67846256e-02
  9.84288007e-03  7.10338494e-03 -1.12645730e-01  2.20867284e-02
  5.33055998e-02  1.79552492e-02 -1.06316112e-01  3.77320834e-02
 -8.05648267e-02  1.73421968e-02  5.99131286e-02 -2.03805398e-02
 -1.19209841e-01 -7.38264769e-02  7.48753101e-02 -6.26523793e-02
  4.96845096e-02 -1.01036750e-01 -5.07903434e-02 -5.01698491e-33
  8.90470203e-03 -1.33100569e-01 -1.44782308e-02 -4.23733331e-02
 -1.12872245e-02 -3.56262848e-02  8.04821495e-03 -5.17774932e-02
 -3.77855971e-02  1.12467594e-02 -5.68590797e-02  9.40070208e-03
  6.62462190e-02 -2.60940939e-02  4.14601825e-02  6.25159079e-03
 -6.41475394e-02 -7.36658946e-02 -5.23547549e-03 -5.32740653e-02
  1.87501237e-02  8.01097974e-02  7.00723305e-02  5.79064228e-02
  3.75200212e-02 -1.06792187e-03 -1.52612682e-02  7.02203289e-02
 -1.16458889e-02 -4.34025228e-02  3.43747400e-02  2.46560248e-03
 -7.19053745e-02  1.48314061e-02 -5.18767647e-02 -4.80320640e-02
  6.74460083e-02  2.73734350e-02 -7.14307427e-02  6.98852763e-02
  1.48080006e-01  2.51340829e-02 -8.38608593e-02 -4.04606611e-02
  5.58410063e-02  6.64908364e-02  3.83632630e-02 -2.84601841e-03
  4.54522111e-02  1.70880873e-02  8.15004557e-02 -4.98014875e-02
  2.10556220e-02  1.83790568e-02 -8.30353983e-03 -3.59281828e-03
  1.21718585e-01  1.47746168e-02  6.86863661e-02 -1.00091971e-01
  6.79342896e-02 -3.06871124e-02 -9.07237176e-03  7.62234554e-02
  1.33025572e-02 -7.43168071e-02 -2.43896414e-02 -3.55248488e-02
 -1.43431956e-02 -1.29178623e-02  4.69062664e-03 -7.40075111e-02
  4.16232273e-02 -7.55681992e-02  8.11483990e-03  6.52062818e-02
 -5.75498166e-03 -7.51357852e-03 -3.38454917e-02 -1.72371138e-02
 -6.18544593e-02  6.43914789e-02  2.57064905e-02  8.88090357e-02
 -6.50198758e-02 -1.30855024e-01  7.17725158e-02 -5.40019339e-03
 -4.71871234e-02 -1.00991111e-02 -4.66241501e-02  2.88100224e-02
 -3.66000496e-02 -1.02310572e-02  2.78586168e-02 -5.88844067e-08
 -3.89061533e-02 -1.60169546e-02 -4.73747030e-02  1.26927450e-01
  5.19960783e-02 -3.27054746e-02 -1.26822647e-02  3.52416886e-03
  1.43576739e-02  1.48260491e-02  2.38283295e-02  6.08954802e-02
 -1.20765716e-02 -1.71026979e-02  7.56491767e-03  2.47229077e-02
 -5.06278547e-03 -3.31697501e-02 -5.38737103e-02 -4.48041186e-02
 -6.23886066e-04 -6.87752245e-03  1.83472298e-02  1.74122695e-02
 -5.02689779e-02 -1.64472312e-02  1.21982172e-02  3.57817523e-02
  6.37864992e-02 -1.23442737e-02  3.12219784e-02  1.23431943e-02
  8.43417495e-02  1.26864444e-02 -6.50431588e-02  2.18500756e-02
 -2.25504972e-02  7.57103786e-02 -1.12887518e-02  4.24858704e-02
 -3.62259783e-02 -4.74024601e-02 -2.39279363e-02  2.00828090e-02
 -1.24752186e-02 -7.10332319e-02 -4.96511981e-02  4.82029421e-03
  1.10100269e-01  5.25661325e-03 -3.57540375e-05  1.59480479e-02
  9.71129909e-02  8.81410241e-02 -4.49630208e-02  2.72776000e-04
 -1.26850540e-02  2.58225035e-02 -2.47986615e-03  7.95345288e-03
  4.35374379e-02  4.36677746e-02  4.53281440e-02 -1.48836169e-02]"
"a versatile RPC method that returns all accounts owned by a program. We can use getProgramAccounts for a number of useful queries, such as finding:All token accounts for a particular walletAll token accounts for a particular mint (i.e. All SRMopen in new window holders)All custom accounts for a particular program (i.e. All Mangoopen in new window users)Despite its usefulness, getProgramAccounts is often misunderstood due to its current constraints. Many of the queries supported by getProgramAccounts require RPC nodes to scan large sets of data. These scans are both memory and resource intensive. As a result, calls that are too frequent or too large in scope can result in connection timeouts. Furthermore, at the time of this writing, the getProgramAccounts endpoint does not support pagination. If the results of a query are too large, the response will be truncated.To get around these current constraints, getProgramAccounts offers a number of useful parameters: namely, dataSlice and the filters options memcmp and dataSize. By providing combinations of these parameters, we can reduce the scope of our queries down to manageable and predictable sizes.A common example of getProgramAccounts involves interacting with the SPL-Token Programopen in new window. Requesting all accounts owned by the Token Program with a basic call would involve an enormous amount of data. By providing parameters, however, we can efficiently request just the data we intend to use.# filtersThe most common parameter to use with getProgramAccounts is the filters array. This array accepts two types of filters,dataSize and memcmp. Before using either of these filters, we should be familiar with how the data we are requesting is laid out and serialized.# dataSizeIn the case of the Token Program, we can see that token accounts are 165 bytes in lengthopen in new window. Specifically, a token account has eight different fields, with each field requiring a predictable number of bytes. We can visualize how this data is laid out using the below illustration.If we wanted to find all token accounts owned by our wallet address, we could add { dataSize: 165 } to our filters array to narrow the scope of our query to just accounts that are exactly 165 bytes in length. This alone, however, would be insufficient. We would also need to add a filter that looks for accounts owned by our address. We can achieve this with the memcmp filter.# memcmpThe memcmp filter, or ""memory comparison"" filter, allows us to compare data at any field stored on our account. Specifically, we can query only for accounts that match a particular set of bytes at a particular position. memcmp requires two arguments:offset: The position at which to begin comparing data. This position is measured in bytes and is expressed as an integer.bytes: The data that should match the account's data. This is represented as a base-58 encoded string should be limited to less than 129 bytes.It's important to note that memcmp will only return results that are an exact match on bytes. Currently, it does not support comparisons for values that are less than or greater than the bytes we provide.In keeping with","[-2.97855213e-02  4.38277284e-03 -1.13979623e-01  2.96217930e-02
 -4.91978563e-02 -1.63617916e-02  2.83329953e-02  3.41090113e-02
 -1.36073492e-02 -5.52451843e-03 -5.70438951e-02  1.16193518e-02
  3.57877985e-02 -3.22371908e-02  3.54893468e-02 -3.70046794e-02
  3.31001058e-02  7.86180329e-03 -1.68621372e-02 -3.31411473e-02
 -2.72922441e-02 -3.50028574e-02 -5.13851382e-02 -7.90404342e-03
 -5.59144691e-02  1.90432109e-02 -7.97688589e-02 -1.13400005e-01
 -2.20146379e-03  4.92042564e-02  6.29965812e-02  1.91122368e-02
 -4.82446067e-02  5.51948436e-02  3.34890187e-02  6.41711950e-02
 -6.36110753e-02  3.33259441e-02  2.88080983e-02 -9.66909379e-02
 -1.29817810e-03  6.66743293e-02 -4.80832085e-02  7.97628015e-02
  3.50182168e-02 -1.86378937e-02 -5.56925684e-02  1.50012653e-02
 -1.30441254e-02 -7.48418421e-02 -5.13550304e-02  4.16833647e-02
  2.21437067e-02 -4.13534883e-03  1.11453598e-02 -3.05899270e-02
 -1.44986399e-02 -4.07308787e-02 -1.32635087e-02  1.31209493e-01
 -6.41647130e-02 -9.38743576e-02 -7.29534253e-02  5.42074488e-03
 -3.35297436e-02  3.03564873e-02  2.01882441e-02  5.86386994e-02
  1.18861452e-01  4.90543321e-02 -4.48387414e-02  7.77059747e-03
 -1.15270011e-01  5.26675619e-02 -2.15366390e-02  2.45524123e-02
 -2.36795060e-02 -1.38091799e-02 -5.40960953e-03 -1.12826794e-01
  4.63635288e-02  6.70324117e-02 -2.42188964e-02  4.58985567e-02
  9.63049531e-02  1.26793403e-02  4.51085456e-02 -2.76537128e-02
  2.56595071e-02  6.71733869e-03  7.31627420e-02  5.31396978e-02
  4.11490910e-03 -3.26062255e-02  2.69871186e-02  1.61672626e-02
  6.03517629e-02 -5.42285368e-02 -1.14388904e-03  3.33305001e-02
  6.11298345e-02  4.75067832e-02  4.84962463e-02 -6.56690774e-03
 -2.00642981e-02 -2.84265075e-02 -1.45759070e-02  4.18128632e-02
 -6.23730756e-03 -2.45963247e-03 -2.62399260e-02  5.73394597e-02
 -3.39273326e-02 -4.47979830e-02 -1.81868002e-02 -1.08332364e-02
 -2.59688254e-02 -2.18677800e-02 -3.33898328e-02  7.42375553e-02
  3.25366072e-02  1.28990542e-02 -3.42591256e-02 -1.19032927e-01
 -1.44861033e-02  2.75586545e-02 -4.34998944e-02  1.12130002e-32
 -5.98926395e-02  1.34403044e-02 -6.17301092e-04 -2.56638993e-02
  5.09315287e-04  1.83552615e-02  3.85964587e-02  6.92991167e-02
  1.66970014e-03  3.75573449e-02  4.56272922e-02  1.75774638e-02
 -4.60343994e-02 -2.02272367e-02  6.72350600e-02  4.42145616e-02
 -1.41789392e-02  1.09935820e-01  3.06810737e-02  2.93134730e-02
 -4.52880822e-02 -1.23976268e-01  1.32735157e-02  3.29854675e-02
  1.03315666e-01  2.93729897e-03 -4.12802398e-02  5.05892606e-03
 -1.15909614e-02  2.17805151e-02  1.47064254e-02  6.23222664e-02
 -6.29743859e-02  8.24509338e-02  1.81262158e-02 -9.41271484e-02
  1.07826348e-02 -8.20678771e-02  1.89605653e-02 -4.70488369e-02
 -7.51812160e-02  5.49380407e-02 -3.92087139e-02 -3.30917677e-03
 -9.15082246e-02 -5.70499040e-02 -4.07189950e-02  7.33106807e-02
 -5.02476282e-02  1.42795220e-01  2.78161746e-02  5.20808101e-02
 -5.02820015e-02  2.72055976e-02  1.28620900e-02 -1.02664784e-01
  1.24231828e-02  4.20452766e-02  4.11139466e-02  9.26320702e-02
 -2.35644598e-02 -1.14292644e-01 -2.17166636e-02 -1.53742619e-02
  4.55558933e-02  7.58787766e-02 -1.72012504e-02 -4.10824036e-03
 -3.93056795e-02  1.01216301e-01  4.30088714e-02 -2.73734499e-02
  4.05736379e-02 -4.48044650e-02 -1.05222259e-02 -1.79790203e-02
 -1.65707134e-02  5.50310649e-02 -2.02909932e-02  2.74803117e-02
  2.32995581e-02  4.43981886e-02 -3.44030443e-03  1.71045195e-02
  1.77655146e-02  2.04365551e-02  2.76613496e-02 -4.07531895e-02
 -6.09947853e-02 -1.92678871e-03  1.58871301e-02  4.71608341e-03
  1.69418845e-02  9.97164007e-03 -9.64177921e-02 -8.47538039e-33
  4.55759902e-04 -8.93791914e-02  2.68693957e-02 -3.92923784e-03
  5.55763301e-03 -7.26525933e-02 -1.93645917e-02 -4.19793045e-03
  1.56376772e-02 -2.56507695e-02  1.16856466e-03 -1.66520383e-02
  3.68240774e-02  3.23278159e-02  2.10207701e-02  2.87587438e-02
  4.91142236e-02 -6.69462755e-02 -6.48500537e-03  3.57070416e-02
  7.50903832e-03  7.03960583e-02 -1.30246929e-03 -3.44206812e-03
  1.56982173e-03  3.88620682e-02 -8.89721587e-02  1.60443541e-02
  7.30742365e-02 -5.51887006e-02  2.34904755e-02 -5.04481755e-02
 -1.03754081e-01 -6.54985523e-03  1.28828799e-02  4.13396582e-03
  4.88331988e-02  1.16230205e-01 -6.81493664e-03  9.06284899e-02
  6.77211806e-02 -7.39926100e-03 -1.67951770e-02 -2.99717151e-02
  3.62681150e-02 -4.41075899e-02 -7.06222355e-02  7.62035251e-02
  1.16965370e-02  4.59157676e-02 -6.12180540e-03 -3.19969840e-02
  1.12177581e-02  1.01757534e-01 -7.57352114e-02 -2.44343970e-02
  3.81058753e-02  1.38523560e-02  4.49332222e-02 -1.22973450e-01
 -3.31549980e-02 -7.38262907e-02 -4.83647548e-02  6.74308538e-02
 -2.37875786e-02  1.96714867e-02  8.19538161e-02 -1.77074131e-02
 -2.80866418e-02  1.33907804e-02  2.33397502e-02 -7.68752396e-02
  7.16216303e-03 -2.09728889e-02 -6.30220473e-02  1.08631752e-01
 -4.73113023e-02 -1.40792578e-01 -4.36535524e-03  7.53358006e-02
 -4.74330597e-02  1.29605502e-01  2.26425324e-02  1.48284547e-02
  2.71882932e-03 -2.88601872e-02 -4.56231795e-02 -3.00322790e-02
  5.22926711e-02  6.90822431e-04  1.48148264e-03 -3.11456714e-02
 -5.40848374e-02  7.57271647e-02  3.88862491e-02 -6.35509849e-08
 -1.41310105e-02 -6.75985366e-02  1.78821329e-02  3.64213362e-02
  1.43729433e-01  1.46155069e-02 -7.24140704e-02  1.06782414e-01
 -1.74881332e-02  9.73070189e-02  1.09153524e-01 -4.94948626e-02
 -1.15121901e-02 -3.85430641e-02  3.91403586e-02 -2.96285190e-02
  3.43727879e-02 -1.15364809e-02 -6.11134060e-02 -3.03684790e-02
 -8.72419998e-02  1.66185666e-02  3.96804735e-02 -1.05548808e-02
 -2.02626735e-02 -5.88450544e-02  1.05847858e-01  7.62487799e-02
 -3.46719362e-02 -1.12437107e-01 -4.02531289e-02  1.09178917e-02
  6.67519048e-02  1.03474623e-02  1.72970667e-02 -1.41104404e-02
 -4.88859005e-02  1.03858474e-03 -1.60848442e-02 -1.38361407e-02
 -2.87453011e-02 -1.71419084e-02 -1.51552204e-02  1.01097807e-01
 -2.21405714e-03  1.06931403e-02 -9.48471203e-02  5.94818257e-02
  8.61533582e-02 -3.47235277e-02 -1.76516995e-02 -8.01401138e-02
  3.11100129e-02 -9.13941488e-03 -3.22454562e-03 -2.48816367e-02
 -3.79325561e-02 -1.22757703e-02  9.17025581e-02  5.95122911e-02
 -6.45509586e-02  7.62712210e-03 -3.74513343e-02 -1.69114023e-02]"
"our Token Program example, we can amend our query to only return token accounts that are owned by our wallet address. When looking at a token account, we can see the first two fields stored on a token account are both pubkeys, and that each pubkey is 32 bytes in length. Given that owner is the second field, we should begin our memcmp at an offset of 32 bytes. From here, we’ll be looking for accounts whose owner field matches our wallet address.We can invoke this query via the following example:TSRust ClientcURLimport { TOKEN_PROGRAM_ID } from ""@solana/spl-token"";
import { clusterApiUrl, Connection } from ""@solana/web3.js"";

(async () => {
  const MY_WALLET_ADDRESS = ""FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T"";
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const accounts = await connection.getParsedProgramAccounts(
    TOKEN_PROGRAM_ID, // new PublicKey(""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"")
    {
      filters: [
        {
          dataSize: 165, // number of bytes
        },
        {
          memcmp: {
            offset: 32, // number of bytes
            bytes: MY_WALLET_ADDRESS, // base58 encoded string
          },
        },
      ],
    }
  );

  console.log(
    `Found ${accounts.length} token account(s) for wallet ${MY_WALLET_ADDRESS}: `
  );
  accounts.forEach((account, i) => {
    console.log(
      `-- Token Account Address ${i + 1}: ${account.pubkey.toString()} --`
    );
    console.log(`Mint: ${account.account.data[""parsed""][""info""][""mint""]}`);
    console.log(
      `Amount: ${account.account.data[""parsed""][""info""][""tokenAmount""][""uiAmount""]}`
    );
  });
  /*
    // Output

    Found 2 token account(s) for wallet FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T: 
    -- Token Account Address 0:  H12yCcKLHFJFfohkeKiN8v3zgaLnUMwRcnJTyB4igAsy --
    Mint: CKKDsBT6KiT4GDKs3e39Ue9tDkhuGUKM3cC2a7pmV9YK
    Amount: 1
    -- Token Account Address 1:  Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb --
    Mint: BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf
    Amount: 3
  */
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748use solana_client::{
  rpc_client::RpcClient, 
  rpc_filter::{RpcFilterType, Memcmp, MemcmpEncodedBytes, MemcmpEncoding},
  rpc_config::{RpcProgramAccountsConfig, RpcAccountInfoConfig},
};
use solana_sdk::{commitment_config::CommitmentConfig, program_pack::Pack};
use spl_token::{state::{Mint, Account}};
use solana_account_decoder::{UiAccountEncoding};

fn main() {
  const MY_WALLET_ADDRESS: &str = ""FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T"";

  let rpc_url = String::from(""http://api.devnet.solana.com"");
  let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

  let filters = Some(vec![
      RpcFilterType::Memcmp(Memcmp {
          offset: 32,
          bytes: MemcmpEncodedBytes::Base58(MY_WALLET_ADDRESS.to_string()),
          encoding: Some(MemcmpEncoding::Binary),
      }),
      RpcFilterType::DataSize(165),
  ]);

  let accounts = connection.get_program_accounts_with_config(
      &spl_token::ID,
      RpcProgramAccountsConfig {
          filters,
       ","[-2.82184444e-02  7.64346272e-02 -3.11429780e-02  2.45349742e-02
 -4.02315818e-02 -8.98583233e-02  9.25541297e-02  4.04918380e-02
  9.55885351e-02 -2.19815876e-02 -3.70313562e-02 -6.15791380e-02
  6.46358803e-02 -9.16716382e-02 -1.08368956e-02 -4.96045081e-03
 -9.19511542e-02  2.80177966e-02  3.26327747e-03  1.12239867e-02
 -2.28517782e-02 -3.94032784e-02 -6.36697561e-03 -4.61165793e-02
 -1.07971914e-02  7.52080232e-03 -8.21423251e-03  6.51322491e-03
 -3.31352688e-02 -9.71465558e-03  2.38358099e-02 -3.91328968e-02
  1.49006490e-02  7.30458051e-02  8.17244351e-02  6.66131675e-02
 -2.52771825e-02 -8.06045532e-03  3.23194414e-02 -2.93228943e-02
  3.82848084e-02  2.85016913e-02  3.41782086e-02  2.22746413e-02
  1.12267725e-01  2.11455021e-02 -6.37011454e-02  8.51998702e-02
  1.88089721e-02 -1.41026294e-02 -9.69944596e-02  5.93801066e-02
 -5.88162467e-02  6.19115680e-02 -4.43992950e-03  3.89218330e-02
 -6.89016879e-02  8.60056877e-02  2.99609732e-02 -1.29818907e-02
  1.90541185e-02 -5.43635748e-02  7.13216215e-02 -4.70197611e-02
 -2.08241586e-02 -5.58092967e-02 -1.09885838e-02 -4.14195843e-03
  1.10454410e-01 -1.93561874e-02  7.21258596e-02  2.09541898e-02
 -1.10165723e-01  2.30854992e-02 -6.94629103e-02  7.84988552e-02
 -1.24766612e-02  5.01096211e-02  4.26791282e-03 -9.87448636e-03
 -2.94871610e-02 -1.07690841e-01  1.56254973e-02  2.59011108e-02
  1.48656461e-02  2.90629198e-03 -2.37233527e-02 -8.68302733e-02
  7.93526843e-02 -1.34221241e-02 -5.84013946e-02 -4.53134961e-02
 -7.99771547e-02 -3.87618281e-02  4.76054214e-02  1.55585436e-02
  5.65935150e-02  4.95687313e-02 -3.03589627e-02  9.12065431e-02
  3.95666026e-02 -3.45990174e-02 -3.10281608e-02  3.25786173e-02
  1.16054609e-03  2.47610994e-02  5.12825549e-02 -3.57134454e-02
 -2.33562086e-02  5.40745072e-03 -3.01974919e-02  8.79740342e-02
 -3.98422442e-02  4.23299372e-02  4.11378369e-02  1.08888686e-01
  8.54315087e-02  5.93609475e-02  1.33517589e-02  5.65865673e-02
  5.09290658e-02  3.32554500e-03 -6.42045513e-02 -4.25586253e-02
 -8.13650265e-02  5.01845367e-02  1.55949229e-02  1.16719683e-32
 -4.64979149e-02  3.85953523e-02  7.26332515e-02 -1.85536463e-02
 -6.30791709e-02  1.74439175e-03 -2.64796373e-02  4.96668965e-02
 -9.47423503e-02  8.62165354e-03  2.52790895e-04  1.64046921e-02
  3.13665979e-02 -8.65948275e-02 -2.91335527e-02 -2.25072168e-02
 -7.02618286e-02  2.05732603e-02  7.81297963e-03  8.77535250e-03
 -5.82436435e-02 -5.13207130e-02 -4.79577866e-04  2.28214730e-02
  5.83003052e-02 -1.14139900e-01 -8.01313892e-02  7.68441055e-03
 -2.38326006e-02  2.76689995e-02 -3.64755429e-02  3.24634947e-02
 -7.25040138e-02 -1.05348321e-04  7.62609094e-02 -1.98095702e-02
  3.26641537e-02 -7.63848796e-02 -9.94596258e-02 -1.75154377e-02
 -1.07002845e-02 -1.54219706e-05  5.35082147e-02 -6.63874373e-02
 -1.24655440e-01 -7.73839951e-02 -2.06955411e-02 -1.97697803e-02
  3.04161180e-02  2.99258977e-02 -1.57521362e-03  7.16454536e-02
 -5.52072339e-02 -6.02903888e-02  8.41641575e-02 -7.28643835e-02
  3.69226336e-02  9.35242325e-02  4.28502597e-02  7.93120191e-02
 -1.23325428e-02 -4.75238301e-02  3.26248780e-02 -1.29499324e-02
  3.78224514e-02  2.83071082e-02  1.82221942e-02  5.55176064e-02
  2.80130953e-02  2.63907779e-02  7.48140216e-02  4.71468009e-02
 -7.56873423e-03  1.24095157e-02 -8.20723325e-02 -3.30547728e-02
  4.86985072e-02  7.49180540e-02 -6.77762330e-02 -1.84313748e-02
  1.13161402e-02 -3.11249997e-02 -5.81289455e-02  6.55533448e-02
 -1.00593336e-01  2.58495770e-02  2.89457869e-02 -5.53597398e-02
 -1.64498128e-02 -4.32029627e-02  7.22070038e-02 -8.52182694e-03
 -2.93091987e-03 -2.01631188e-02 -1.30972639e-01 -9.52854766e-33
 -2.32276181e-03 -1.18972741e-01  9.07665584e-03 -7.52622485e-02
 -4.85575981e-02 -8.21738094e-02  8.35980698e-02 -2.24581249e-02
  1.11357346e-02 -8.32478632e-04 -6.90718088e-03 -3.78213115e-02
  4.38757794e-04 -7.21771875e-03 -9.77343507e-03  1.40883967e-01
  3.75985727e-02 -1.02697566e-01  3.59787308e-02 -1.68946050e-02
 -5.04006259e-02  3.03052049e-02  4.60825488e-02  7.84973055e-02
 -1.09071523e-01  4.99920584e-02 -3.65053527e-02  2.16479246e-02
 -8.99008289e-02 -6.13072254e-02  3.17636579e-02 -4.55035307e-02
 -9.45084766e-02  3.97263169e-02 -3.85656953e-02 -1.08038493e-01
 -4.10102420e-02  1.02045730e-01  9.67770144e-02  6.20289259e-02
  5.22219129e-02  1.94605440e-02  3.79515695e-03  4.41293307e-02
  4.16810485e-03 -2.21057851e-02  9.61442441e-02  3.02037261e-02
  2.57001817e-02  4.22620922e-02  1.79784205e-02 -3.66034843e-02
  7.63423694e-03  5.20668328e-02 -3.57757881e-02 -3.26232868e-03
  4.20440324e-02 -3.86719243e-03  2.28255112e-02 -7.22049326e-02
  7.74927512e-02 -5.54368235e-02  1.91187356e-02  3.45435925e-02
  6.76668212e-02 -2.26871017e-02 -4.07422371e-02 -8.10392201e-03
 -3.90015878e-02 -5.05363895e-03  3.37851830e-02 -1.15237243e-01
  1.10779274e-02  6.37817681e-02 -2.47763051e-03  8.33413526e-02
  2.07322482e-02 -2.34892052e-02  4.50176820e-02 -9.31508653e-03
 -7.91927278e-02  2.50597373e-02 -4.31530597e-03  3.14867795e-02
 -3.07560042e-02  1.52982154e-03 -3.81129570e-02  3.53280418e-02
  2.34304145e-02  2.18919143e-02  3.34238447e-02  2.58729886e-02
 -6.05157316e-02 -2.81742048e-02  4.62856144e-02 -6.51322338e-08
 -4.06534672e-02 -5.60965315e-02 -6.99110404e-02  9.30321813e-02
  2.64524147e-02  3.01105659e-02 -1.73913222e-02  2.25357469e-02
  6.46684458e-03  2.27537397e-02 -2.60377247e-02  1.62101928e-02
  3.91246192e-02 -8.36113766e-02  3.94179076e-02 -2.38362495e-02
 -2.11946033e-02 -4.70332503e-02 -4.94189896e-02 -5.41191809e-02
 -1.63907409e-02  2.11622808e-02  3.48980688e-02 -8.26167222e-03
  2.44007520e-02  8.48775543e-03 -1.37438215e-02  3.30290236e-02
  2.77980305e-02 -8.22282135e-02 -8.59627128e-02  1.22007765e-02
  2.82963831e-03 -2.21945141e-02  8.89436342e-03  2.79100728e-03
 -4.62871091e-03 -1.58340130e-02 -2.93724723e-02  1.08542241e-01
  4.03898815e-03  1.30837234e-02 -3.77287902e-02  4.53629494e-02
 -5.52191213e-02  2.92886831e-02  6.07501715e-02  6.54107258e-02
  7.85906240e-02 -2.29219757e-02 -2.77398396e-02 -7.91229531e-02
  8.68403353e-03  3.37468088e-02 -8.20564479e-02 -3.73107456e-02
 -7.09309131e-02  8.96159634e-02  3.57788503e-02  1.03279054e-02
 -2.66955942e-02  2.79530324e-02 -3.96203622e-02  2.49773320e-02]"
"  account_config: RpcAccountInfoConfig {
              encoding: Some(UiAccountEncoding::Base64),
              commitment: Some(connection.commitment()),
              ..RpcAccountInfoConfig::default()
          },
          ..RpcProgramAccountsConfig::default()
      },
  ).unwrap();

  println!(""Found {:?} token account(s) for wallet {MY_WALLET_ADDRESS}: "", accounts.len());

  for (i, account) in accounts.iter().enumerate() {
      println!(""-- Token Account Address {:?}:  {:?} --"", i, account.0);

      let mint_token_account = Account::unpack_from_slice(account.1.data.as_slice()).unwrap();
      println!(""Mint: {:?}"", mint_token_account.mint);

      let mint_account_data = connection.get_account_data(&mint_token_account.mint).unwrap();
      let mint = Mint::unpack_from_slice(mint_account_data.as_slice()).unwrap();
      println!(""Amount: {:?}"", mint_token_account.amount as f64 /10usize.pow(mint.decimals as u32) as f64);
  }
}

/*
// Output

Found 2 token account(s) for wallet FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T: 
-- Token Account Address 0:  H12yCcKLHFJFfohkeKiN8v3zgaLnUMwRcnJTyB4igAsy --
Mint: CKKDsBT6KiT4GDKs3e39Ue9tDkhuGUKM3cC2a7pmV9YK
Amount: 1.0
-- Token Account Address 1:  Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb --
Mint: BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf
Amount: 3.0
*/
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162curl http://api.mainnet-beta.solana.com -X POST -H ""Content-Type: application/json"" -d '
  {
    ""jsonrpc"": ""2.0"",
    ""id"": 1,
    ""method"": ""getProgramAccounts"",
    ""params"": [
      ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
      {
        ""encoding"": ""jsonParsed"",
        ""filters"": [
          {
            ""dataSize"": 165
          },
          {
            ""memcmp"": {
              ""offset"": 32,
              ""bytes"": ""FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T""
            }
          }
        ]
      }
    ]
  }
'

# Output: 
# {
#   ""jsonrpc"": ""2.0"",
#   ""result"": [
#     {
#       ""account"": {
#         ""data"": {
#           ""parsed"": {
#             ""info"": {
#               ""isNative"": false,
#               ""mint"": ""BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf"",
#               ""owner"": ""FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T"",
#               ""state"": ""initialized"",
#             ","[-6.47346601e-02  4.76774424e-02 -9.09275338e-02  3.53960879e-02
 -1.63296200e-02  1.38745429e-02  3.76448520e-02  3.07159647e-02
 -3.82349305e-02 -5.23225591e-02  5.67192771e-02 -6.40342683e-02
  4.80166785e-02  6.69790758e-03  5.50889745e-02 -2.59169359e-02
 -1.28734306e-01  4.20846790e-02  5.48870936e-02 -1.10170497e-02
  2.79344637e-02  9.68742743e-03  2.49533150e-02 -1.99558176e-02
  7.86840692e-02  2.35711448e-02  2.99449754e-03 -1.99287739e-02
 -3.52937952e-02  5.50232641e-02  8.75528902e-02  5.32827228e-02
  3.05177551e-02  3.93121019e-02  6.41994849e-02  6.96276203e-02
 -3.18573825e-02  2.47780569e-02  7.72835314e-02 -7.67767578e-02
 -4.30530980e-02  3.56200896e-02 -2.19858494e-02  3.29360068e-02
  2.42495108e-02  5.69088683e-02 -6.70866743e-02  2.88632214e-02
 -8.74615368e-03 -5.84045537e-02 -6.68386056e-04  4.63249125e-02
 -7.07697496e-02 -1.21294912e-02  2.47677360e-02  1.98722649e-02
 -1.51163060e-02 -1.83374844e-02  4.94352058e-02  3.03981062e-02
  4.98430096e-02 -3.75749692e-02 -2.21862551e-02  2.92825103e-02
 -9.88990143e-02 -2.41364725e-02  1.96005683e-02  7.63529912e-02
  7.87176862e-02  1.37602994e-02 -8.72543361e-03 -1.51028662e-05
 -6.32279366e-02 -3.94209735e-02 -4.36433665e-02  2.70872470e-02
 -3.29170600e-02  4.62364927e-02 -2.72763968e-02 -6.45127371e-02
 -1.74866989e-02  4.70391894e-03  5.92722632e-02  1.05774209e-01
  5.44014387e-02  4.82889898e-02 -3.75213847e-02 -7.54311383e-02
 -5.71508370e-02  1.54194841e-02  6.17808066e-02 -7.42329797e-03
  1.45985037e-02 -5.34519516e-02 -9.91334300e-03  4.48586419e-02
  2.47338116e-02  6.35243729e-02 -1.08285651e-01  7.41269514e-02
  4.25486453e-03 -1.14352191e-02  3.32820192e-02  1.86252110e-02
  2.97878310e-02  2.70171760e-04  7.14434311e-03 -1.76426265e-02
 -5.89009933e-03  3.94466296e-02 -2.09988956e-03  1.77743770e-02
 -8.58535022e-02  1.14517035e-02 -3.47752287e-03  2.17529386e-02
 -5.77340163e-02  5.32571264e-02  2.48521660e-02  1.12232767e-01
  2.67544221e-02 -1.54817225e-02 -2.96547189e-02 -4.85650823e-02
 -1.53050721e-01  2.67979479e-03  4.09006290e-02  6.17818158e-33
 -2.87914574e-02 -3.52657549e-02 -5.71028292e-02 -4.21534665e-03
 -5.02682514e-02  1.53490482e-02 -1.24577889e-02  2.91431509e-02
 -4.24674712e-02  8.32679495e-02  5.22176214e-02  1.20868692e-02
 -9.65351518e-03  4.71431389e-02 -9.65749770e-02 -1.69544592e-02
  1.72168780e-02  8.48657712e-02  1.18594669e-01  4.13483530e-02
 -1.50222778e-02 -1.04683479e-02 -1.29086170e-02 -7.13177025e-02
  5.85609488e-02  4.22177948e-02 -4.12932783e-02 -2.82760169e-02
 -5.68635426e-02  4.84616728e-03  3.58716547e-02 -6.68939855e-03
  2.41482467e-03  2.52865069e-02  5.02457209e-02 -5.39555177e-02
  6.26881346e-02 -4.72475514e-02 -1.20637588e-01 -3.87966447e-02
  2.47274190e-02  3.15657444e-02 -3.28075476e-02  2.22502351e-02
 -4.88333823e-03  4.17097993e-02  7.02207396e-03  4.67634052e-02
  7.96680748e-02  6.34281784e-02 -5.59898987e-02  5.11137694e-02
 -6.40447810e-02 -3.00002415e-02  4.94801477e-02 -7.87595287e-02
  1.05816899e-02  3.33717391e-02 -1.79361869e-02 -5.58050610e-02
 -6.87686577e-02 -1.01885630e-03 -6.28214255e-02 -2.25026831e-02
  3.18569392e-02  8.59834254e-02 -7.75464624e-02 -4.18491922e-02
 -4.88610789e-02  4.65476774e-02 -4.78840545e-02  1.75803937e-02
 -7.92245045e-02  9.19581391e-03 -6.01407066e-02 -3.45100649e-02
 -3.89773538e-03  1.08959782e-03 -7.91288912e-02 -3.99745516e-02
  1.61694828e-02  1.01065986e-01 -1.02117933e-01  1.51774824e-01
 -3.88969434e-03  5.67034967e-02  5.86656854e-02 -3.34861651e-02
 -6.30424870e-03 -9.58677474e-03  4.95764017e-02 -5.75702079e-02
  4.48941961e-02 -6.86621591e-02 -9.58199203e-02 -6.28004110e-33
  3.72056030e-02 -3.99058126e-02  2.36535296e-02 -9.37093347e-02
  3.03196866e-04 -1.19752297e-02  8.54652300e-02  4.20439616e-02
  5.52570000e-02  9.95118450e-03  2.60353480e-02 -2.68761795e-02
 -7.13982678e-04  1.47750033e-02  2.79978663e-02  2.27087755e-02
 -8.18426758e-02 -1.08069589e-03 -1.60918999e-02 -9.16809309e-03
 -2.94912998e-02  4.35956419e-02  8.20814148e-02  2.00154781e-02
  9.71992704e-05  1.75394677e-02  6.54201489e-03  2.15982255e-02
  2.93765422e-02 -3.42451259e-02  1.04575515e-01 -2.64696907e-02
 -7.50480592e-02  6.78279176e-02 -4.75514531e-02 -7.75347576e-02
 -1.17296055e-02  1.59209371e-01 -1.55516211e-02  3.09487712e-02
  7.77280703e-02 -2.48290543e-02 -8.32179934e-02  3.25211063e-02
  2.36941464e-02 -3.42559405e-02  6.52875453e-02  6.15366735e-02
 -2.40426213e-02  9.02587175e-03  2.87722740e-02 -9.96688455e-02
 -9.91905481e-02  2.25059632e-02 -5.58475628e-02  2.36594304e-02
  9.49833840e-02 -1.30177727e-02  7.67582729e-02 -1.31563306e-01
  1.12525895e-02 -7.22004622e-02 -1.62392613e-02  8.99119526e-02
  1.89268906e-02 -7.25881159e-02 -7.92567283e-02  4.93321270e-02
 -3.69831026e-02 -6.45037042e-03 -1.08754691e-02 -9.09023434e-02
 -2.10411120e-02 -1.50169348e-02  2.11282466e-02  6.77371724e-03
 -4.28935215e-02 -7.19802231e-02  5.12439571e-02  6.23333566e-02
 -3.76238599e-02  7.71758556e-02 -3.68047282e-02  3.78823914e-02
  3.46025676e-02 -1.03753380e-01  5.13629802e-02  5.17183840e-02
  1.87201090e-02  2.72664893e-02 -1.82828736e-02  2.56434698e-02
 -2.08565332e-02  5.39948530e-02 -3.55721149e-03 -5.86690092e-08
 -3.93817537e-02 -9.17454138e-02  3.01578012e-03  3.95068666e-03
  1.01811372e-01  2.46015154e-02 -2.09124503e-03 -6.05718121e-02
 -5.20161167e-02  2.61968095e-02 -1.88167132e-02  5.44018634e-02
 -1.17839411e-01 -2.65225396e-02 -5.97436316e-02 -3.83131467e-02
  3.86234485e-02  2.90075829e-03 -3.30529995e-02  2.08907016e-02
 -6.13945313e-02 -7.30605843e-03  1.14394054e-02 -6.36085644e-02
 -1.41087957e-02 -1.92739852e-02  8.92295018e-02  1.08160809e-01
  3.22104692e-02 -1.39850546e-02  2.33985891e-04 -1.45793159e-03
  7.32323453e-02 -4.16950360e-02 -7.41086304e-02  4.08744207e-03
 -5.07371277e-02 -7.01615680e-03  3.98679115e-02  2.89786514e-02
 -7.95356110e-02 -3.47879604e-02 -2.99443789e-02  3.45713757e-02
 -1.39337266e-02 -8.35570544e-02  4.28288663e-03  4.61197533e-02
  7.75308385e-02 -1.64232254e-02 -1.09415315e-01 -6.33093640e-02
  2.00686865e-02 -8.44173320e-03 -4.92997281e-02 -3.93544771e-02
 -7.30825439e-02 -3.91603913e-03  1.77296959e-02  4.38586669e-03
 -2.95714960e-02  1.16987275e-02  3.99152981e-03 -4.08751778e-02]"
" ""tokenAmount"": {
#                 ""amount"": ""998999999000000000"",
#                 ""decimals"": 9,
#                 ""uiAmount"": 998999999,
#                 ""uiAmountString"": ""998999999""
#               }
#             },
#             ""type"": ""account""
#           },
#           ""program"": ""spl-token"",
#           ""space"": 165
#         },
#         ""executable"": false,
#         ""lamports"": 2039280,
#         ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 313
#       },
#       ""pubkey"": ""Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb""
#     }
#   ],
#   ""id"": 1
# }
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# dataSliceOutside of the two filter parameters, the third most common parameter for getProgramAccounts is dataSlice. Unlike the filters parameter, dataSlice will not reduce the number of accounts returned by a query. Instead, dataSlice will limit the amount of data for each account.Much like memcmp, dataSlice accepts two arguments:offset: The position (in number of bytes) at which to begin returning account datalength: The number of bytes which should be returneddataSlice is particularly useful when we run queries on a large dataset but don’t actually care about the account data itself. An example of this would be if we wanted to find the number of token accounts (i.e. number of token holders) for a particular token mint.TSRust ClientcURLimport { TOKEN_PROGRAM_ID } from ""@solana/spl-token"";
import { clusterApiUrl, Connection } from ""@solana/web3.js"";

(async () => {
  const MY_TOKEN_MINT_ADDRESS = ""BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf"";
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const accounts = await connection.getProgramAccounts(
    TOKEN_PROGRAM_ID, // new PublicKey(""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"")
    {
      dataSlice: {
        offset: 0, // number of bytes
        length: 0, // number of bytes
      },
      filters: [
        {
          dataSize: 165, // number of bytes
        },
        {
          memcmp: {
            offset: 0, // number of bytes
           ","[-4.41274121e-02  3.53270210e-02 -9.27843377e-02  8.68712272e-03
 -8.53288099e-02 -2.90373676e-02  1.20358661e-01  3.52751575e-02
 -5.18574100e-03 -2.98093297e-02  2.91089267e-02 -1.33466780e-01
  6.33139536e-02 -1.01620421e-01  3.76684815e-02  7.94504285e-02
 -5.91271929e-02 -1.23633239e-02 -4.23303433e-02 -6.40741959e-02
  8.89343396e-02  2.60423087e-02 -7.92403147e-02 -3.45682614e-02
  2.44308189e-02  2.86450591e-02 -1.53700085e-02  2.99807340e-02
 -3.62355188e-02  2.81136949e-02  4.77259792e-02 -2.49936432e-02
 -2.75279563e-02  4.89608310e-02  1.16014861e-01 -2.60934210e-03
  1.53333852e-02 -3.69801410e-02  7.66788125e-02 -3.61072384e-02
 -1.77258998e-02  3.00521459e-02 -8.94539356e-02  4.29335656e-03
 -2.01566480e-02  4.96563762e-02 -9.73117501e-02 -2.61020139e-02
 -6.20763451e-02 -1.35735068e-02 -3.01981177e-02  1.87661909e-02
  1.02357063e-02  5.50642423e-02  2.33558677e-02 -1.80870193e-05
 -1.27807662e-01  1.56822298e-02  7.21865147e-02  5.48059121e-03
 -2.30263937e-02 -3.38491425e-02 -3.84385581e-03  8.73563346e-03
 -4.70977500e-02  2.97511672e-03 -4.74993028e-02 -6.10966161e-02
  6.57552481e-03  8.27977154e-03 -6.42117113e-02  9.05900542e-03
 -1.02405734e-01  3.59461759e-03 -2.09100787e-02  5.34072034e-02
 -1.78266857e-02 -2.30825432e-02 -6.41062185e-02 -1.18586995e-01
  3.30740795e-03 -2.38610376e-02 -9.07862857e-02  9.12428200e-02
 -5.69161912e-03 -1.17239514e-02 -1.91805083e-02 -2.96899527e-02
  4.78966087e-02  6.69103786e-02  2.42070016e-02  3.92765515e-02
  3.17589454e-02 -2.94269249e-02  5.41321598e-02  8.10261592e-02
 -6.56697974e-02 -7.08967447e-03 -2.59854123e-02  6.92655072e-02
 -5.76761998e-02  2.24883556e-02  5.66536784e-02 -3.40293348e-02
  7.09343851e-02 -5.54578863e-02  9.62415412e-02  7.75439944e-03
 -1.86691284e-02  4.75185597e-03 -8.62453715e-04  8.76102373e-02
 -1.20371915e-02 -3.37729380e-02  9.59916320e-03  8.50688517e-02
  7.54988715e-02  1.58421993e-02  4.27582301e-02 -2.70063877e-02
  7.20752776e-02 -7.69367022e-03 -9.41556692e-02 -4.45241947e-03
 -5.01628593e-02 -3.62722315e-02  2.46317498e-02  1.18502790e-32
  5.96507546e-03 -4.30904366e-02 -9.40123480e-03 -5.34850918e-02
 -2.06423551e-02 -2.01602299e-02  5.12571819e-02  6.81635961e-02
 -2.34978069e-02  5.76963611e-02 -1.06289089e-01 -7.56567577e-03
 -1.85849015e-02 -7.44007677e-02 -2.03105006e-02 -4.22965586e-02
 -1.25890169e-02  9.29391310e-02 -1.97945870e-02 -4.57055587e-03
  1.36016561e-02 -3.09168547e-02  2.27401722e-02  1.26714967e-02
  2.97434051e-02 -1.43787905e-03 -6.78730477e-03 -4.39596474e-02
  1.70101654e-02  1.56119177e-02  3.30439173e-02  2.10052524e-02
 -5.59778586e-02  4.79728431e-02  4.47994061e-02 -3.64440940e-02
  3.99385691e-02 -3.35089542e-04  1.11219026e-02  2.17961315e-02
 -2.06758603e-02  7.46609410e-03  1.18307434e-02 -3.08799208e-03
 -9.13020521e-02 -6.84583709e-02 -5.42996898e-02 -1.90820650e-03
  8.43478218e-02  6.34790733e-02  8.81109480e-03  2.70924885e-02
 -4.63299565e-02  1.65459048e-02 -4.79430659e-03 -1.12639368e-01
 -5.17099462e-02  3.31886895e-02  1.25641553e-02  3.16907391e-02
 -1.24307416e-01  3.74959446e-02  4.96319160e-02 -6.92440721e-04
  1.04996778e-01  1.35578271e-02  6.60119876e-02 -1.84346512e-02
 -2.40009390e-02 -4.65202965e-02 -1.74821001e-02  3.04437708e-02
  4.46807519e-02 -1.19727734e-03  1.30383009e-02 -6.30274341e-02
  4.38510552e-02 -5.99400140e-03 -3.77612822e-02  1.30322557e-02
 -1.25562365e-03 -3.50559503e-02 -5.59368022e-02  5.95871545e-02
 -5.55722415e-02  6.70664757e-02 -2.46115495e-02 -8.07241723e-03
 -5.15627973e-02 -5.00641912e-02 -3.29177231e-02 -1.66726708e-02
 -7.39583150e-02 -7.82775879e-02 -5.87271713e-02 -1.17953526e-32
  3.49962711e-02 -6.20132051e-02  5.17067648e-02 -4.54322174e-02
 -2.77367420e-03 -9.24095418e-03  6.09454252e-02 -6.72875941e-02
  5.04777245e-02  1.07939683e-01  2.69727781e-02 -7.40175834e-03
 -4.43064943e-02 -3.27440351e-02  8.54830071e-02  8.28431845e-02
 -6.14165328e-02 -3.50408466e-03 -1.03196017e-02  2.05127988e-02
 -3.95019501e-02  1.43691674e-01 -2.06031185e-02  1.00771956e-01
 -6.21296465e-02  2.86190379e-02 -4.48689498e-02  6.19771257e-02
  5.10815009e-02 -7.44620478e-03 -5.48201264e-04  2.59407684e-02
 -4.56565395e-02  6.67455569e-02 -2.97061428e-02 -1.11245111e-01
  3.42384391e-02  1.12339571e-01  7.39838928e-04  1.04118504e-01
  1.90086477e-02  5.34552857e-02 -9.10954084e-03  3.37829627e-02
  7.06895813e-02  3.30433510e-02  1.13900036e-01  2.00515911e-02
 -3.26423720e-02 -1.05916429e-02  4.83628772e-02  1.99613757e-02
 -4.77287211e-02  7.01235309e-02 -1.84396130e-03 -2.08430365e-02
  7.71752298e-02 -6.84549212e-02 -3.25369947e-02 -1.25394404e-01
  1.20062511e-02  7.74959521e-03  7.06641525e-02  1.80872194e-02
  8.79643038e-02 -3.19365831e-03 -5.08328713e-02 -3.87831666e-02
 -5.92008270e-02 -8.86587277e-02 -3.94977927e-02 -1.37138203e-01
 -1.89970657e-02 -1.63444225e-02 -4.73629392e-04  2.64493376e-02
  2.75139865e-02 -1.81808081e-02  2.87029967e-02  1.47353917e-01
  1.57472380e-02  4.39279750e-02  1.44295096e-02  8.27403516e-02
 -6.09957203e-02 -4.13964577e-02 -3.10513061e-02  5.05265594e-02
 -2.29595993e-02  2.94482075e-02 -6.54924586e-02 -2.54450515e-02
 -1.33523671e-02  3.64389382e-02  9.23528988e-03 -6.14846698e-08
 -5.07262312e-02  2.58069090e-03 -5.74619472e-02  5.77463284e-02
  4.07756865e-02  5.25952540e-02 -6.49806112e-02  5.40540405e-02
 -4.71668914e-02 -1.14271916e-01 -9.46802460e-03  3.32904495e-02
 -4.82747704e-02 -4.54841070e-02 -3.15162167e-02 -7.30732381e-02
 -6.41631857e-02 -3.18792462e-02 -1.91958454e-02 -5.12301864e-04
 -2.84158811e-02 -2.67387163e-02 -5.73382415e-02 -3.18254456e-02
  3.63793671e-02  1.98401306e-02  4.44652066e-02  7.76010454e-02
 -2.97373863e-05  2.75384746e-02  2.89632026e-02  1.61934120e-04
  1.36476411e-02 -5.67290783e-02 -3.16736288e-02 -6.62516803e-03
  4.05802624e-03  2.73510069e-02  4.10324987e-03  5.89310657e-03
 -1.75220035e-02  4.19213399e-02 -6.58526793e-02  5.92421070e-02
 -1.78303570e-02  5.69759915e-03 -1.61669739e-02  5.96613996e-03
  1.21124886e-01 -2.86199488e-02 -5.27308658e-02 -5.07587753e-02
  4.36296910e-02  1.81135312e-02 -1.12895511e-01 -7.18032056e-03
 -4.26454209e-02 -5.70101067e-02 -3.96608794e-03  3.42655294e-02
  9.02478322e-02  1.39264921e-02 -1.25869792e-02  3.87878455e-02]"
"bytes: MY_TOKEN_MINT_ADDRESS, // base58 encoded string
          },
        },
      ],
    }
  );
  console.log(
    `Found ${accounts.length} token account(s) for mint ${MY_TOKEN_MINT_ADDRESS}`
  );
  console.log(accounts);

  /*
  // Output (notice the empty <Buffer > at acccount.data)
  
  Found 3 token account(s) for mint BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf
  [
    {
      account: {
        data: <Buffer >,
        executable: false,
        lamports: 2039280,
        owner: [PublicKey],
        rentEpoch: 228
      },
      pubkey: PublicKey {
        _bn: <BN: a8aca7a3132e74db2ca37bfcd66f4450f4631a5464b62fffbd83c48ef814d8d7>
      }
    },
    {
      account: {
        data: <Buffer >,
        executable: false,
        lamports: 2039280,
        owner: [PublicKey],
        rentEpoch: 228
      },
      pubkey: PublicKey {
        _bn: <BN: ce3b7b906c2ff6c6b62dc4798136ec017611078443918b2fad1cadff3c2e0448>
      }
    },
    {
      account: {
        data: <Buffer >,
        executable: false,
        lamports: 2039280,
        owner: [PublicKey],
        rentEpoch: 228
      },
      pubkey: PublicKey {
        _bn: <BN: d4560e42cb24472b0e1203ff4b0079d6452b19367b701643fa4ac33e0501cb1>
      }
    }
  ]
  */
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576use solana_client::{
  rpc_client::RpcClient, 
  rpc_filter::{RpcFilterType, Memcmp, MemcmpEncodedBytes, MemcmpEncoding},
  rpc_config::{RpcProgramAccountsConfig, RpcAccountInfoConfig},
};
use solana_sdk::{commitment_config::CommitmentConfig};
use solana_account_decoder::{UiAccountEncoding, UiDataSliceConfig};

pub fn main() {
  const MY_TOKEN_MINT_ADDRESS: &str = ""BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf"";

  let rpc_url = String::from(""http://api.devnet.solana.com"");
  let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

  let filters = Some(vec![
      RpcFilterType::Memcmp(Memcmp {
          offset: 0, // number of bytes
          bytes: MemcmpEncodedBytes::Base58(MY_TOKEN_MINT_ADDRESS.to_string()),
          encoding: Some(MemcmpEncoding::Binary),
      }),
      RpcFilterType::DataSize(165), // number of bytes
  ]);

  let accounts = connection.get_program_accounts_with_config(
      &spl_token::ID,
      RpcProgramAccountsConfig {
          filters,
          account_config: RpcAccountInfoConfig {
              data_slice: Some(UiDataSliceConfig {
 ","[-2.25574169e-02  7.90376775e-03 -8.79826248e-02 -1.14877603e-03
 -1.02207647e-04 -5.14605790e-02  4.46074530e-02  4.65779118e-02
  4.74592857e-02  1.10322768e-02  9.51526221e-03 -5.17516136e-02
  7.46084377e-02 -6.11744374e-02  2.40018032e-02  2.43729167e-02
 -1.52481467e-01 -1.09124808e-02  3.52488011e-02 -5.48335314e-02
  5.96658252e-02 -1.61815807e-02 -4.26278785e-02 -6.57383502e-02
  3.90284993e-02  5.21384776e-02 -1.42635852e-02  3.65941152e-02
 -4.10381444e-02 -1.47522474e-02  1.01857774e-01 -2.65211966e-02
  5.10028861e-02 -2.09724791e-02  9.17978883e-02  5.56312315e-02
 -4.00371403e-02 -4.53160964e-02  8.25965181e-02 -1.12144865e-01
 -3.00851054e-02  3.31836641e-02 -4.08984087e-02 -6.38318888e-04
  5.96761098e-03  5.01674004e-02 -3.18534300e-02  3.96726690e-02
 -3.69477198e-02 -8.67387056e-02  4.91852723e-02  3.19219083e-02
  2.79792771e-03  3.58809084e-02 -1.55408792e-02 -2.68671885e-02
 -4.22800519e-02 -7.14700390e-03  4.97065820e-02  8.37468728e-02
  4.98356745e-02  1.98323820e-02 -2.71350089e-02 -2.80751940e-03
  7.67820794e-03  2.63192207e-02 -1.00834288e-01 -1.79193038e-02
 -2.36436957e-03 -1.31875640e-02 -2.49482077e-02 -1.59142315e-02
 -1.21492907e-01  3.37440148e-02 -5.32637583e-03 -4.09127586e-02
 -7.75030814e-04  9.08211805e-03 -4.43566181e-02 -5.73048815e-02
 -4.40074988e-02 -2.09420584e-02  5.65085374e-02  1.11356974e-01
  8.72822702e-02  7.05631301e-02  3.55262455e-05 -1.45267956e-02
 -1.86883677e-02  2.31991429e-02  2.28708070e-02  9.62002552e-04
  7.52042159e-02  3.55740339e-02  6.72935322e-02  2.67599504e-02
  8.97512361e-02  1.88777298e-02 -2.21817456e-02  1.09711610e-01
  1.86748628e-03  5.99231385e-02  2.71828622e-02  4.06101951e-03
  1.11514658e-01  4.89732623e-02  4.20127735e-02  2.32691821e-02
 -2.62447204e-02 -4.79515716e-02 -2.21626163e-02 -2.86441855e-03
 -5.71245886e-02 -1.18138120e-02 -1.64073787e-03 -7.54139526e-03
 -2.60758605e-02  2.89444271e-02 -4.81670275e-02  8.81611332e-02
  1.52745962e-01 -2.77648792e-02 -6.95949420e-02 -3.21573243e-02
 -8.29166472e-02 -2.79344004e-02  6.47106767e-02  1.08446245e-32
 -6.65679350e-02 -5.11226580e-02 -2.13482697e-03 -4.81436625e-02
 -2.78999414e-02  4.10417579e-02 -2.70886179e-02  7.99334645e-02
 -2.29276083e-02  1.05961740e-01  3.57686244e-02 -4.89836857e-02
  3.63094881e-02  5.36005013e-02 -4.05082181e-02  3.45559418e-02
  7.54079456e-03  3.56265120e-02  6.14087880e-02 -5.70454495e-03
 -5.13379574e-02  2.15068161e-02 -5.41105792e-02 -2.88967285e-02
  3.42753269e-02  4.64708693e-02 -1.58876963e-02 -4.55709472e-02
 -2.22088397e-03  1.78456809e-02 -1.10365879e-02 -6.35720510e-03
 -6.85484782e-02 -1.68376062e-02  3.99610624e-02 -5.87242842e-02
  2.93568913e-02 -8.18988010e-02 -1.17520884e-01 -9.07806586e-03
  8.95196572e-02 -1.04675889e-02 -7.64549747e-02 -2.62871347e-02
 -7.14180097e-02  1.34173539e-02 -8.75648931e-02 -2.78590582e-02
  1.98634416e-02  5.63691370e-02 -4.15630639e-02  8.66067857e-02
 -1.01842009e-01  5.14423475e-02  4.46420871e-02 -5.71735203e-02
 -3.14521827e-02 -1.45828240e-02  2.96272361e-03  4.40381840e-03
  2.37299819e-02 -5.39895985e-03  1.75513066e-02 -7.85525609e-03
 -2.02318411e-02 -2.63586491e-02  2.12777779e-02 -2.17143614e-02
 -3.25694196e-02  5.03679402e-02 -3.59891541e-02 -7.84243736e-03
  2.53089610e-02  2.27662716e-02 -1.06483221e-01 -5.57209700e-02
 -1.78244580e-02 -8.15357175e-03 -2.45790631e-02 -7.23213796e-03
  8.19611996e-02 -1.61882844e-02 -5.64224012e-02  2.75132596e-03
 -1.30888224e-02  2.70925220e-02 -2.17551515e-02 -1.11574195e-01
 -9.20381099e-02 -2.44443081e-02 -1.64928399e-02 -5.94628640e-02
 -3.04005370e-02 -5.69159836e-02 -1.67008132e-01 -1.24576070e-32
  2.72991527e-02  8.36781692e-03  1.77346636e-02 -5.78107685e-02
 -6.46105260e-02  9.35216807e-03  2.96464413e-02  1.94456279e-02
 -1.68571174e-02  8.34910348e-02 -4.64442484e-02  4.28529643e-02
  2.60809790e-02  2.13335399e-02  1.09026082e-01  1.05207913e-01
 -5.67988418e-02 -2.75290459e-02 -5.25219701e-02  2.00285882e-04
 -5.65836616e-02  7.73962215e-02  7.40007833e-02  7.26206452e-02
 -4.81912717e-02  3.81925143e-02 -8.09155125e-03  5.68508171e-02
  8.85231234e-03  5.69489365e-03  4.30341773e-02 -1.26063440e-03
 -8.33345354e-02  1.32253263e-02  2.41609756e-03 -7.85814747e-02
  3.26438732e-02  1.14286043e-01 -1.56517625e-02  3.56255695e-02
  6.20938800e-02  1.29332710e-02  9.38670337e-03 -1.29331211e-02
  5.90285249e-02 -8.27264693e-03  3.20324413e-02  5.40158264e-02
 -6.27437979e-03  3.15451846e-02  7.43670315e-02 -2.94736736e-02
 -7.46214539e-02  3.44280228e-02 -4.19267826e-02 -4.23140228e-02
  7.20812976e-02 -2.95745935e-02  5.07240668e-02 -1.13217182e-01
 -1.06196096e-02 -8.87992308e-02 -2.31254045e-02  1.08173408e-01
  4.02916875e-03 -9.98352543e-02 -7.21197128e-02  3.15531418e-02
 -4.67860810e-02 -3.08534093e-02  4.24851216e-02 -5.58835045e-02
 -3.20944563e-02 -4.57411772e-03  2.50227284e-02  7.07889497e-02
  4.08774503e-02 -7.75972903e-02 -3.26385535e-03  1.21782357e-02
 -3.67153808e-02  8.53212327e-02  4.64205742e-02  2.43297722e-02
 -3.54851037e-02 -9.61206332e-02 -2.65717432e-02  1.54039012e-02
  7.00499769e-03 -9.25913826e-03 -3.30119096e-02  9.42599997e-02
 -4.57397588e-02  7.08210887e-03  6.79333061e-02 -6.33089527e-08
  6.31786650e-03 -1.08169876e-01 -2.04114756e-03  8.30791444e-02
  4.18465622e-02  2.39917403e-03 -3.18632610e-02 -2.66573112e-02
 -1.53328041e-02 -1.75830293e-02  5.75532950e-02  6.67414814e-03
 -1.02978878e-01 -3.26333418e-02 -5.17706573e-02 -2.56650019e-02
 -4.89273369e-02 -3.62386182e-02 -3.82505283e-02 -5.04574180e-03
 -2.42548566e-02  3.95748392e-02  5.08736446e-02 -6.31198362e-02
 -1.84320025e-02 -7.41988942e-02  6.53585372e-03  8.10962915e-02
 -4.39801961e-02 -1.24767311e-02  1.48359425e-02  6.85435236e-02
  5.07054888e-02 -9.07187834e-02 -2.54889540e-02  6.62824372e-03
 -2.01683436e-02 -1.14573408e-02 -4.81380373e-02 -9.96327028e-03
 -1.82968732e-02 -1.56330708e-02 -1.42332027e-02  1.34666860e-02
 -3.12137194e-02 -5.12926318e-02  9.54738818e-03  3.32287662e-02
  9.08181220e-02 -1.04888104e-01 -4.43739034e-02 -4.36217375e-02
 -5.70573937e-03  6.25446364e-02 -3.87495011e-02 -6.07765689e-02
 -9.91238058e-02  5.71065545e-02  4.41504754e-02  3.26221809e-02
  2.77449042e-02  4.38020378e-02 -4.29757722e-02 -4.55200039e-02]"
"                offset: 0, // number of bytes
                  length: 0, // number of bytes
              }),
              encoding: Some(UiAccountEncoding::Base64),
              commitment: Some(connection.commitment()),
              ..RpcAccountInfoConfig::default()
          },
          ..RpcProgramAccountsConfig::default()
      },
  ).unwrap();

  println!(""Found {:?} token account(s) for mint {MY_TOKEN_MINT_ADDRESS}: "", accounts.len());
  println!(""{:#?}"", accounts);
}

/*
// Output (notice the empty <Buffer > at acccount.data)

Found 3 token account(s) for mint BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf: 
[
  (
      tofD3NzLfZ5pWG91JcnbfsAbfMcFF2SRRp3ChnjeTcL,
      Account {
          lamports: 2039280,
          data.len: 0,
          owner: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA,
          executable: false,
          rent_epoch: 319,
      },
  ),
  (
      CMSC2GeWDsTPjfnhzCZHEqGRjKseBhrWaC2zNcfQQuGS,
      Account {
          lamports: 2039280,
          data.len: 0,
          owner: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA,
          executable: false,
          rent_epoch: 318,
      },
  ),
  (
      Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb,
      Account {
          lamports: 2039280,
          data.len: 0,
          owner: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA,
          executable: false,
          rent_epoch: 318,
      },
  ),
]
*/
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# Note: encoding only available for ""base58"", ""base64"" or ""base64+zstd""
curl http://api.mainnet-beta.solana.com -X POST -H ""Content-Type: application/json"" -d '
  {
    ""jsonrpc"": ""2.0"",
    ""id"": 1,
    ""method"": ""getProgramAccounts"",
    ""params"": [
      ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
      {
        ""encoding"": ""base64"",
        ""dataSlice"": {
          ""offset"": 0,
          ""length"": 0
        },
        ""filters"": [
          {
 ","[-8.48989412e-02  4.26060408e-02 -9.71348807e-02  1.72546355e-03
 -1.14542535e-02 -1.54013117e-03  3.58042866e-02  5.40437177e-02
  1.91736147e-02 -4.72126417e-02  6.09582253e-02 -5.13796844e-02
  5.80075383e-02 -2.55114269e-02 -3.29325013e-02 -1.77761707e-02
 -1.42093882e-01  8.74342583e-03  1.77012924e-02 -3.09561063e-02
  7.74776563e-02  3.57540175e-02 -7.02178804e-04 -2.74583157e-02
  9.16018561e-02  7.34943673e-02 -1.66783500e-02  1.41851399e-02
 -2.77404841e-02  5.94728114e-03  8.28039721e-02  5.63930683e-02
  4.80511561e-02 -1.06681455e-02  6.19273521e-02  5.34218103e-02
 -6.57359585e-02 -1.91782843e-02  1.36522502e-01 -1.04012728e-01
 -2.76218578e-02  3.74894924e-02 -7.98482914e-03  5.68674691e-02
  1.05915987e-03  7.30946288e-02 -3.18730436e-02  4.77984510e-02
 -5.27860746e-02 -8.24475139e-02  4.85562198e-02  4.11993712e-02
 -1.13884714e-02  5.84021136e-02 -9.74876434e-03 -4.26950045e-02
 -5.33616282e-02 -4.90853097e-03  3.78746502e-02  8.33895281e-02
  2.16083582e-02  4.25547734e-03 -3.96950804e-02  3.63283008e-02
 -5.30080684e-02 -3.38619165e-02 -4.32538465e-02  3.15701216e-02
  5.68386503e-02  1.42375492e-02 -3.02909985e-02  8.20617564e-03
 -1.10310577e-01  3.28791104e-02  6.04818249e-03 -3.86531278e-03
  5.17210050e-04  3.70030217e-02 -2.04296038e-02 -8.59968737e-02
 -3.82632203e-02 -3.50200087e-02  9.54694375e-02  1.25308186e-01
  6.14310429e-02  6.10113740e-02 -2.47110538e-02 -1.97836142e-02
 -3.77152003e-02 -2.77551764e-04  3.43780741e-02 -2.49101147e-02
  2.49085538e-02 -1.32061529e-03 -3.06944922e-03  3.37476581e-02
  5.49416393e-02  5.53026646e-02 -4.56848480e-02  9.53913406e-02
  2.48311199e-02  4.91759069e-02  3.71182747e-02  3.44074704e-02
  4.10776585e-02  6.94170035e-03 -1.84451956e-02  4.13200632e-02
 -2.01074101e-04 -5.99560328e-03  1.06007457e-02 -1.88773032e-02
 -8.14580247e-02  1.79756675e-02  1.17935287e-02 -1.71623044e-02
 -4.51728739e-02  3.77474315e-02 -3.64348814e-02  5.70026152e-02
  7.09104538e-02 -3.98498923e-02 -1.05810888e-01 -4.15225290e-02
 -1.48444682e-01 -1.16661554e-02  3.36585902e-02  1.08944714e-32
 -3.32406797e-02 -2.46663168e-02 -4.21239063e-02 -3.80380638e-02
 -5.92362694e-02  3.03600505e-02 -3.34011316e-02  4.49845456e-02
 -2.31918190e-02  7.29883164e-02  1.15434509e-02 -8.53700750e-03
  3.49438265e-02  6.02003671e-02 -9.52528343e-02 -1.46652469e-02
  9.05708130e-03  5.06098047e-02  6.28098026e-02  2.94299498e-02
 -4.09576707e-02  1.59318764e-02 -4.96809930e-02 -5.50645404e-02
  2.30233073e-02  8.23779479e-02 -3.88047695e-02 -5.90919107e-02
 -6.92961365e-02  4.85322019e-03 -3.28933820e-02  1.19310375e-02
 -8.88938084e-03 -1.30062746e-02  9.15717855e-02 -4.66161072e-02
  5.18469624e-02 -9.73554403e-02 -1.10261597e-01 -3.63208316e-02
  3.35511491e-02  1.30525129e-02 -7.35137165e-02 -1.05027920e-02
 -2.50159181e-03  3.11342860e-03 -5.02579361e-02  1.69464983e-02
  6.51236176e-02  1.06150471e-01 -2.99929157e-02  8.53280649e-02
 -1.48686897e-02  2.92633045e-02  5.91482483e-02 -7.36113563e-02
 -3.62266018e-03  9.95731167e-03 -2.25451235e-02  7.48516293e-03
 -2.41219681e-02 -2.30208766e-02 -1.52161568e-02 -3.62349674e-02
 -1.37431046e-03  5.36770187e-02 -3.55622657e-02 -4.72551920e-02
 -2.86917705e-02  9.11956280e-02 -5.56332655e-02 -2.42365655e-02
 -1.66720916e-02  5.52225746e-02 -9.93850604e-02 -2.72664223e-02
  4.15006373e-03 -6.20924588e-03 -3.55409533e-02 -2.41011549e-02
  1.43959867e-02  6.06341511e-02 -6.83744550e-02  5.01121357e-02
 -1.01520605e-02  1.67520717e-02  3.39125656e-02 -1.15363255e-01
 -3.90988961e-02 -1.16304997e-02  9.68641788e-03 -3.07255015e-02
  1.54378144e-02 -3.59935798e-02 -1.46530747e-01 -1.07214739e-32
  5.99902160e-02  7.00523192e-03  1.18129998e-02 -6.89540952e-02
 -4.52840291e-02 -4.62503452e-03  5.73955290e-02  4.57178317e-02
  3.20511460e-02  4.61952090e-02 -2.49640886e-02  1.66480150e-02
 -1.91883333e-02  9.33667552e-03  4.66971099e-02  3.50343250e-02
 -2.54372731e-02  6.23750221e-03 -4.66100462e-02  2.12369785e-02
 -2.56529506e-02  5.98481111e-02  6.82249591e-02  3.82487029e-02
 -1.07103363e-02  4.72746901e-02  2.99448594e-02  3.75165939e-02
  8.61643255e-03 -1.33808777e-02  6.01022430e-02 -5.59804104e-02
 -5.45597970e-02 -1.42551558e-02  3.99363637e-02 -6.63560182e-02
  4.10625041e-02  1.22777507e-01  2.07800176e-02  2.24106126e-02
  7.81977400e-02  8.10562633e-03 -1.31940451e-02  5.63568063e-02
  5.88413775e-02 -1.30407820e-02  3.20300199e-02  8.85203630e-02
 -2.97371745e-02 -4.84867254e-03  5.68487830e-02 -4.99411821e-02
 -5.98615929e-02  5.39705418e-02 -3.95201892e-02  3.14346282e-03
  5.57633527e-02 -1.77853052e-02  9.61521193e-02 -1.36715308e-01
 -3.09817139e-02 -6.82934299e-02 -1.49085617e-03  5.62086068e-02
  3.10440678e-02 -6.93276301e-02 -5.54059744e-02  5.99182397e-02
 -8.29360783e-02  1.84233009e-03  3.77360843e-02 -8.00457522e-02
 -3.13345529e-02 -1.89280472e-04  1.43686561e-02 -7.19735399e-03
 -3.82849872e-02 -9.73891690e-02  2.87937676e-03  5.71740903e-02
 -4.24349420e-02  9.84119996e-02  1.80464685e-02  4.35428023e-02
  1.11764446e-02 -7.01265037e-02 -2.06572153e-02  3.94493341e-02
  8.95347167e-03 -6.22525765e-03 -9.64361429e-03  9.85226855e-02
 -1.52694909e-02  7.90243000e-02  3.50996181e-02 -6.12251014e-08
 -3.82913533e-03 -1.11373246e-01  4.58845217e-03  3.35714817e-02
  8.83556157e-02  3.48517261e-02 -4.89729494e-02 -6.70209154e-02
 -5.08585349e-02 -9.95344575e-03  5.36920466e-02  3.35474163e-02
 -1.03182562e-01 -7.24054500e-02 -2.81544290e-02 -2.98445318e-02
 -2.19033193e-02 -3.64680663e-02 -6.85662851e-02  1.20512117e-03
 -4.77945097e-02  2.34621633e-02 -1.70246158e-02 -9.67309922e-02
 -2.89139561e-02 -5.73267303e-02  7.09719807e-02  1.48880914e-01
 -2.03658976e-02 -9.20128226e-02  1.30597269e-02  5.16445562e-02
  7.59344101e-02 -6.47576973e-02 -4.74726036e-02  1.67372935e-02
 -9.82876308e-03 -2.68303230e-02 -6.77997805e-03  6.35237759e-03
 -7.75283352e-02 -3.29879448e-02  1.02077881e-02  4.56518531e-02
 -1.61481258e-02 -5.98958060e-02 -1.57565121e-02  5.64924367e-02
  5.38672544e-02 -8.08560178e-02 -8.01315010e-02 -5.03688641e-02
 -9.33127664e-03  5.96169792e-02 -5.29930666e-02 -7.26453066e-02
 -9.10337865e-02  1.43941343e-02  2.25862395e-02  2.15698443e-02
 -3.29357386e-03  3.60554792e-02  6.39571901e-03 -2.21755803e-02]"
"          ""dataSize"": 165
          },
          {
            ""memcmp"": {
              ""offset"": 0,
              ""bytes"": ""BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf""
            }
          }
        ]
      }
    ]
  }
'

# Output:
# {
#   ""jsonrpc"": ""2.0"",
#   ""result"": [
#     {
#       ""account"": {
#         ""data"": [
#           """",
#           ""base64""
#         ],
#         ""executable"": false,
#         ""lamports"": 2039280,
#         ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 313
#       },
#       ""pubkey"": ""FqWyVSLQgyRWyG1FuUGtHdTQHrEaBzXh1y9K6uPVTRZ4""
#     },
#     {
#       ""account"": {
#         ""data"": [
#           """",
#           ""base64""
#         ],
#         ""executable"": false,
#         ""lamports"": 2039280,
#         ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 314
#       },
#       ""pubkey"": ""CMSC2GeWDsTPjfnhzCZHEqGRjKseBhrWaC2zNcfQQuGS""
#     },
#     {
#       ""account"": {
#         ""data"": [
#           """",
#           ""base64""
#         ],
#         ""executable"": false,
#         ""lamports"": 2039280,
#         ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 314
#       },
#       ""pubkey"": ""61NfACb21WvuEzxyiJoxBrivpiLQ79gLBxzFo85BiJ2U""
#     },
#     {
#       ""account"": {
#         ""data"": [
#           """",
#         ","[ 8.96858342e-04  7.51458853e-02 -3.18292454e-02 -1.80058684e-02
 -8.53866991e-03 -8.81894082e-02  1.69172473e-02  6.13609478e-02
  2.71554161e-02  1.66285485e-02  3.56313922e-02 -2.75829062e-02
  1.07662370e-02 -2.09181402e-02  4.68477570e-02  5.52538857e-02
 -1.47596478e-01 -7.55361281e-03 -3.44162364e-03 -8.77704918e-02
  2.97362432e-02  3.55917327e-02 -6.56879647e-03 -4.85889353e-02
  2.39107925e-02  5.17545193e-02 -4.11173664e-02  1.10044643e-01
 -3.45174707e-02 -2.88253278e-02  5.41676767e-02 -8.65343288e-02
  5.91893718e-02  5.37146535e-03  1.31838500e-01  5.40005155e-02
  1.40183643e-02 -1.07355930e-01  8.21395367e-02 -5.56469290e-03
  2.18657870e-02  1.24511020e-02 -4.78218794e-02 -5.58716692e-02
 -2.37253457e-02 -1.43497679e-02 -6.59745038e-02  6.28998177e-03
 -5.49678802e-02 -3.01354332e-03 -1.14638647e-02 -2.45882408e-03
  3.61103890e-03  5.86518832e-02 -2.14923136e-02 -1.61169264e-02
 -1.10724553e-01  5.10528944e-02  2.39542592e-02 -2.18825764e-03
  2.77558248e-02 -1.55747943e-02 -3.49806286e-02 -1.30025931e-02
 -3.94867100e-02 -1.95841920e-02 -7.80706629e-02  2.08420726e-03
  3.98712866e-02 -1.36053022e-02  2.36875694e-02 -4.31327932e-02
 -1.11439228e-01  3.90138328e-02 -4.32763575e-03  2.11682357e-02
 -2.57312991e-02 -3.01685221e-02 -4.31626253e-02  5.89764770e-03
 -6.12130314e-02 -1.01886764e-01 -4.80857305e-02  1.11706451e-01
 -5.92743754e-02  3.75023857e-02 -1.53224915e-02  7.96616916e-03
 -3.69999036e-02  1.11893909e-02 -2.84043718e-02 -2.22320128e-02
  6.04168838e-03 -5.64975257e-04  1.76601429e-02  6.56670332e-02
  4.98040542e-02 -3.79493125e-02 -4.63204049e-02  8.40576366e-02
  1.55450348e-02  9.20779724e-03  4.60223109e-02  5.52569749e-04
  6.22003451e-02 -1.21253124e-02  6.02200851e-02  5.13816550e-02
 -4.19390388e-02 -2.14404017e-02 -7.54044671e-03  6.63241595e-02
 -7.35556632e-02  7.35678058e-03  2.06775614e-03 -2.12780964e-02
 -2.56867404e-03  1.15823583e-03 -1.60234068e-02  5.28588928e-02
  2.02501059e-01 -6.80763647e-02 -4.93093729e-02  3.32335085e-02
 -1.98372155e-02 -4.51131463e-02  1.26158977e-02  1.29869042e-32
  4.47177328e-02 -3.58251631e-02  4.70254719e-02 -1.67364161e-02
  2.76993532e-02 -1.19997310e-02 -7.69894058e-03  1.45996083e-02
 -7.00881407e-02  3.86392735e-02 -3.97032909e-02 -2.99104936e-02
  1.13956314e-02  1.15337698e-02 -5.16733751e-02 -4.42968830e-02
  1.64799378e-04  5.60257956e-02  1.61630642e-02  4.29813936e-02
  9.39910859e-03  2.83900257e-02  1.65829640e-02  4.46488243e-03
 -4.79833595e-02 -6.56067953e-03 -7.34631345e-02 -1.12224538e-02
 -3.61232646e-02  1.81620754e-02 -8.37380812e-03  3.09854429e-02
 -3.32712568e-02 -1.56486984e-02  6.20245971e-02 -4.86120135e-02
  1.63414013e-02 -6.62233755e-02 -6.16777949e-02 -2.80699246e-02
  2.99800448e-02 -1.07311588e-02 -6.90018088e-02 -2.98063140e-02
 -5.22949584e-02 -1.69585354e-03 -2.34001987e-02 -7.20416009e-02
 -1.86549057e-03  4.85342108e-02  5.54880872e-03  9.33980271e-02
 -5.33664189e-02  3.33305374e-02  6.01928607e-02 -1.02875367e-01
  2.67492812e-02 -2.28887610e-02  1.86644811e-02 -2.19132402e-03
 -2.91898195e-02  8.02442729e-02  4.52500992e-02 -7.60266045e-03
  6.53704181e-02 -1.34263173e-01  4.73817736e-02  5.98462187e-02
 -6.98571652e-02  8.67161527e-02  2.47819982e-02  3.13723423e-02
  6.59889802e-02  1.20314322e-02 -6.87562227e-02 -8.41774195e-02
 -1.00566577e-02  7.93727953e-03 -1.96588878e-02 -2.14985684e-02
  1.01706870e-01 -5.70656285e-02 -2.80572437e-02 -7.57353902e-02
 -2.94549260e-02  6.71053454e-02  5.81888668e-03 -5.14352135e-02
 -3.05964798e-02 -2.34664567e-02 -4.76027690e-02  1.02105755e-02
 -2.34964229e-02 -1.35667890e-01 -1.17010482e-01 -1.33340865e-32
  3.26987244e-02 -4.56681252e-02  1.36758564e-02  1.82228032e-05
 -3.40453908e-02 -7.19871968e-02  7.77632520e-02  1.76356100e-02
  6.60942420e-02  8.13759714e-02 -1.36883454e-02  4.98980796e-03
 -1.59506798e-02 -3.12305391e-02  9.74599272e-02  4.64645401e-02
 -5.76810651e-02 -3.62774692e-02  6.60139322e-02 -2.74394676e-02
 -2.71441694e-02  5.78219742e-02  3.72797623e-02  1.17364146e-01
 -2.62243897e-02 -7.64035881e-02 -2.23489292e-02  6.36972636e-02
 -4.72660288e-02 -2.90743401e-03 -3.78287099e-02  3.30688916e-02
 -3.36789005e-02  2.72764787e-02  4.52923030e-03 -1.13000855e-01
  3.66025567e-02  1.39484495e-01  3.81057560e-02  8.13316554e-03
  4.27704863e-02  1.01797301e-02 -6.16114289e-02 -3.15018818e-02
  8.90342966e-02 -3.90196890e-02  9.01896656e-02  9.81339514e-02
 -2.31883787e-02 -9.80102550e-03  4.87337150e-02  2.87287403e-02
 -1.05157346e-02  3.09701059e-02  3.70088406e-02 -2.97256373e-02
  3.39757046e-03 -2.09862292e-02 -1.07840635e-02 -5.21002263e-02
 -1.99979451e-02 -1.16389818e-01 -7.45768007e-03  3.85436900e-02
  7.50340968e-02 -1.01222500e-01 -7.08552673e-02 -4.79980707e-02
 -6.84641600e-02 -1.69766415e-02  1.18693085e-02 -9.06563476e-02
 -2.59651542e-02  3.30658704e-02  3.69513966e-02 -2.34684255e-02
  1.86659303e-02  1.89068876e-02  3.10571026e-02  6.96445256e-02
 -8.48629791e-03  7.92343989e-02  1.32779945e-02  7.18460977e-02
  6.29821271e-02 -6.13619015e-02 -2.92735882e-02  5.82380369e-02
 -7.59376511e-02 -6.75975438e-03 -1.30396290e-02  4.32449281e-02
  2.20342930e-02  4.76875268e-02  8.09013247e-02 -6.39385291e-08
 -4.56808880e-02 -5.57766967e-02 -7.16607198e-02  9.06008333e-02
  3.14628929e-02  3.69260088e-02  1.98124014e-02 -2.67803296e-02
  5.38973846e-02 -6.52395859e-02  1.15889885e-01  5.02925143e-02
 -5.92199713e-02 -1.57279111e-02 -3.52677815e-02  2.52968632e-02
 -9.80918184e-02  6.93414453e-03 -1.32810343e-02  2.80963778e-02
  1.50036151e-02  2.77676638e-02 -2.28178687e-02 -4.26548161e-02
 -1.39242061e-03  2.76785772e-02  1.10327983e-02  8.58133584e-02
 -8.30870047e-02 -5.56889810e-02 -1.66031141e-02 -4.01580483e-02
  3.53365764e-02 -1.01351008e-01 -1.84025653e-02 -4.24172282e-02
  2.54158098e-02  2.68917084e-02 -3.85604203e-02 -2.42415946e-02
 -1.39666824e-02  8.35091919e-02 -6.23812489e-02  2.60284804e-02
 -2.28558462e-02 -3.82504128e-02 -1.44374277e-02  1.15944773e-01
  4.84850667e-02 -3.56680416e-02  2.43526343e-02 -3.22302803e-02
  1.84773505e-02 -1.86677687e-02 -2.61327885e-02 -4.12030108e-02
  1.45125920e-02  4.09782790e-02 -3.17790918e-02  7.96987414e-02
  9.59586129e-02  5.05205877e-02  3.86539511e-02 -3.63829881e-02]"
" ""base64""
#         ],
#         ""executable"": false,
#         ""lamports"": 2039280,
#         ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 313
#       },
#       ""pubkey"": ""Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb""
#     }
#   ],
#   ""id"": 1
# }
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889By combining all three parameters (dataSlice, dataSize, and memcmp) we can limit the scope of our query and efficiently return only the data we’re interested in.# Other ResourcesRPC API Documentationopen in new windowWeb3js Documentationopen in new windowJSON-parsed Web3js Documentationopen in new window # Migrating a Programs Data Accounts# How can you migrate a program's data accounts?When you create a program, each data account associated with that program will have a specific data structure. If you ever need to upgrade a program derived account, you end up having a bunch of leftover program derived accounts with the old structure.With account versioning, you can upgrade your old accounts to the new structure.NoteThis is only one of many ways to migrate data in Program Owned Accounts (POA).# ScenarioTo version and migrate our account data, we will be providing an id for each account. This id will allow us to identify the account version when we pass it to the program, and thus handle the account correctly.Take the following account state and program:AccountInstructionProcessorPress </> button to view full source//! @brief account_state manages account data

use arrayref::{array_ref, array_refs};
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    msg,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack, Sealed},
};
use std::{io::BufWriter, mem};

/// Currently using state. If version changes occur, this
/// should be copied to another serializable backlevel one
/// before adding new fields here
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentCurrent {
    pub somevalue: u64,
}

/// Maintains account data
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    data_version: u8,
    account_data: AccountContentCurrent,
}

impl ProgramAccountState {
    /// Signal initialized
    pub fn set_initialized(&mut self) {
        self.is_initialized = true;
    }
    /// Get the initialized flag
    pub fn initialized(&self) -> bool {
        self.is_initialized
    }
    /// Gets the current data version
    pub fn version(&self) -> u8 {
        self.data_version
    }
    /// Get the reference to content structure
    pub fn content(&self) -> &AccountContentCurrent {
        &self.account_data
    }
    /// Get the mutable reference to content structure
    pub fn content_mut(&mut self) -> &mut AccountContentCurrent {
        &mut self.account_data
    }
}

/// Declaration of the current data version.
pub const DATA_VERSION: u8 = 0;
/// Account allocated size
pub const ACCOUNT_ALLOCATION_SIZE: usize = 1024;
///","[-4.83165942e-02  7.30162933e-02 -7.35161752e-02  4.40996289e-02
  3.30269299e-02 -7.33448043e-02 -5.57823759e-03  3.78311202e-02
 -4.54110466e-03  3.57266329e-02 -3.89972217e-02 -4.65591177e-02
  7.16585666e-02 -6.44349083e-02  7.25337863e-02  7.17183724e-02
 -4.08760309e-02  2.45430209e-02 -9.48278531e-02 -3.86390910e-02
  8.90532210e-02 -7.48903444e-03 -1.31509928e-02 -8.22546706e-02
  1.36227924e-02  3.69818173e-02 -4.90583740e-02  3.73101830e-02
  3.41659077e-02 -3.06679681e-02  4.47635986e-02 -6.51917085e-02
 -4.96776514e-02  8.73588845e-02  9.67786536e-02  9.80317146e-02
  7.06672389e-03 -1.01859711e-01  2.24917568e-02  3.17501910e-02
  3.31534222e-02  7.31609687e-02 -6.74882159e-02 -1.96216498e-02
 -1.09918499e-02 -5.46060037e-03 -6.47393540e-02 -3.68327671e-03
 -7.11459070e-02  1.11199438e-03 -6.03781641e-02 -5.43489568e-02
 -6.37762472e-02  9.91554111e-02  8.04009568e-03 -4.45028245e-02
 -1.13692090e-01  5.63022606e-02 -4.51901592e-02  3.33289914e-02
  8.60608555e-03 -3.66087183e-02  7.16388598e-02 -4.35189046e-02
 -4.12807465e-02 -6.27314672e-03 -3.02822981e-02 -4.49084602e-02
  9.21636522e-02 -1.00479409e-01 -7.45890886e-02 -2.73842588e-02
 -1.39410079e-01  4.82051596e-02 -1.53168542e-02  2.88783684e-02
 -2.10967716e-02 -1.44381588e-02 -4.27790321e-02 -1.36778101e-01
 -1.91449048e-03 -4.37778272e-02 -5.06379791e-02  1.07668437e-01
  1.25173852e-02  1.29062589e-02 -7.58051686e-03  3.24102603e-02
  3.81739102e-02  2.72620022e-02 -1.88086685e-02 -2.37853061e-02
 -4.92133088e-02  1.47001017e-02  9.21806544e-02  8.94360542e-02
  1.31594958e-02 -9.05953497e-02  9.60286055e-03  4.27443087e-02
  1.05914799e-02 -4.15901421e-03  2.70568188e-02 -4.26962832e-03
 -7.42358249e-03 -7.50911236e-02  2.30932347e-02  8.21006596e-02
 -9.12801847e-02 -2.25697905e-02 -4.92465235e-02  9.93597433e-02
 -7.12220296e-02 -6.13746569e-02  1.66492686e-02  6.46754028e-03
 -4.94902954e-03 -3.79072390e-02 -1.15506928e-02  4.75206077e-02
  1.01284184e-01  3.83572243e-02  3.11761852e-02  2.47249175e-02
  1.15535371e-02  2.51020957e-03 -1.13408426e-02  1.46267365e-32
 -3.01611926e-02  2.57548429e-02  1.79913640e-02  3.49619682e-03
 -4.26439755e-02  2.77104452e-02  9.14164409e-02  6.80115148e-02
 -8.74158591e-02  1.97922830e-02 -2.93583293e-02  9.55392569e-02
 -1.27924085e-02 -3.19765806e-02  3.99646051e-02  5.66280913e-04
 -1.84350610e-02  9.90785137e-02  7.60077015e-02  3.08904368e-02
  5.72443642e-02  1.94507018e-02  1.80291738e-02  3.36876325e-02
  5.96311390e-02 -5.43174446e-02 -7.81508684e-02  3.50018777e-02
 -3.82235311e-02  4.07372368e-03  3.22047272e-03  2.10163239e-02
 -8.54356289e-02 -1.21568730e-02  7.18288273e-02 -5.13393153e-03
 -2.41813976e-02 -5.74907474e-02 -4.83696237e-02  2.98784953e-02
  7.64409825e-03  3.39977704e-02 -1.88107267e-02 -1.52905388e-02
 -5.85541874e-02 -6.06077015e-02 -3.95055041e-02 -8.41125771e-02
  2.78302953e-02 -3.82449180e-02  1.54841542e-02  7.13133663e-02
  4.55773249e-02 -2.72891186e-02  3.51615772e-02 -1.38341263e-01
  1.57258399e-02  3.29671800e-02  2.63504777e-03  1.60332546e-02
 -3.90145741e-02 -5.74516430e-02 -1.57037880e-02 -5.78743313e-03
  7.26189464e-02 -1.05971217e-01 -2.89435848e-03  5.48376739e-02
  1.15742022e-03  5.15866429e-02  5.53278252e-02 -1.51526900e-02
  5.90128973e-02  2.32212618e-03  7.90762715e-03 -6.37822077e-02
 -2.72834077e-02  5.35966828e-02 -1.28926355e-02 -6.36715069e-02
  7.04598725e-02 -1.14036929e-02 -8.86492431e-03 -4.63246517e-02
 -1.07857212e-02  2.87899189e-02 -2.58016624e-02 -5.17653972e-02
  5.70345577e-03 -2.99862642e-02  4.63021584e-02 -1.25894218e-03
 -5.86511865e-02 -8.57470483e-02 -6.70390576e-02 -1.35481719e-32
  3.69901769e-02 -3.50571722e-02 -1.78677775e-02  1.05946301e-03
 -4.96091433e-02 -3.93717512e-02  2.85874158e-02 -1.40027124e-02
  3.94950062e-02 -3.98348048e-02  3.41414548e-02 -2.41795108e-02
  3.56715880e-02 -5.85773401e-02  1.59072857e-02  7.33815581e-02
 -1.00119628e-01 -8.31195489e-02  4.66445014e-02  2.83424184e-02
 -6.15002811e-02  1.06253758e-01 -3.51873115e-02  8.47833753e-02
 -2.57897731e-02  5.74832549e-03 -7.60078505e-02  3.36867794e-02
  2.89245453e-02 -2.33379994e-02 -5.96027598e-02 -1.60490815e-02
 -6.56430796e-02 -4.62674685e-02 -7.62750804e-02 -1.04100488e-01
  3.66912819e-02  6.21412843e-02  1.90813821e-02  7.22624585e-02
  6.90777078e-02 -3.64095904e-02 -3.16136330e-02 -2.95757893e-02
  1.85933970e-02 -3.12811732e-02 -3.76001708e-02  4.92628291e-02
  3.08814477e-02  8.55983887e-03  4.21357118e-02  1.01594592e-03
 -3.08270985e-03 -1.76912881e-02  3.87647189e-02 -1.89425666e-02
  3.09685245e-02 -2.84220576e-02  2.36291457e-02 -7.76428655e-02
  2.49024052e-02 -4.05946374e-03  3.74169648e-02  6.43188134e-02
 -2.44450178e-02 -2.28959192e-02 -3.77032720e-02 -1.09831907e-01
 -9.45231766e-02 -2.93009318e-02 -2.37470865e-02 -1.03611089e-01
  3.66281644e-02 -1.54309580e-02  1.25915911e-02  2.73491023e-03
  5.90061620e-02  2.88487645e-03  3.28433104e-02  4.41317149e-02
 -1.87202524e-02  7.48731866e-02  2.81579737e-02  3.41609679e-02
  3.84038053e-02 -3.32423151e-02 -2.26794556e-02 -9.50467307e-03
 -3.25239375e-02 -3.83042358e-02 -2.90118326e-02 -1.84198115e-02
 -4.79669198e-02  4.16108817e-02  1.09925449e-01 -7.39495505e-08
 -5.02350740e-02  2.31358800e-02 -1.09536238e-01  7.36323148e-02
  6.35519996e-02 -7.06328778e-03 -2.92459540e-02  1.18518516e-01
  8.26871172e-02  4.12919335e-02  1.20340645e-01  7.04059452e-02
  2.21600402e-02 -3.50326598e-02  1.30727878e-02  3.01672164e-02
 -1.65910013e-02 -6.09353743e-02  2.90341768e-03 -3.80803756e-02
 -7.50263706e-02  1.46667212e-02 -2.91376351e-03 -2.60731503e-02
  1.40038192e-01 -7.05309724e-03  3.22722308e-02  1.06578164e-01
  8.83677043e-04 -2.78599653e-03 -6.78526759e-02 -4.94592562e-02
  3.49099003e-02 -1.88413411e-02  3.73314098e-02 -4.75683855e-03
 -3.20146643e-02  4.31416854e-02 -4.31114733e-02 -3.95573340e-02
  4.47139814e-02  6.36947677e-02 -4.57340628e-02  2.38559339e-02
  4.33972664e-02  1.33333262e-02 -3.93386632e-02  8.08298439e-02
  4.91345581e-03 -2.18183622e-02  7.22903432e-03 -9.34376121e-02
  7.47983018e-03  3.20963897e-02 -3.66516337e-02  5.80720007e-02
 -4.88354862e-02  2.50192569e-03  1.73320808e-02  3.57491970e-02
  3.86534370e-02  2.75010825e-03  2.92739142e-02 -1.48396073e-02]"
"Initialized flag is 1st byte of data block
const IS_INITIALIZED: usize = 1;
/// Data version (current) is 2nd byte of data block
const DATA_VERSION_ID: usize = 1;

/// Previous content data size (before changing this is equal to current)
pub const PREVIOUS_VERSION_DATA_SIZE: usize = mem::size_of::<AccountContentCurrent>();
/// Total space occupied by previous account data
pub const PREVIOUS_ACCOUNT_SPACE: usize =
    IS_INITIALIZED + DATA_VERSION_ID + PREVIOUS_VERSION_DATA_SIZE;

/// Current content data size
pub const CURRENT_VERSION_DATA_SIZE: usize = mem::size_of::<AccountContentCurrent>();
/// Total usage for data only
pub const CURRENT_USED_SIZE: usize = IS_INITIALIZED + DATA_VERSION_ID + CURRENT_VERSION_DATA_SIZE;
/// How much of 1024 is used
pub const CURRENT_UNUSED_SIZE: usize = ACCOUNT_ALLOCATION_SIZE - CURRENT_USED_SIZE;
/// Current space used by header (initialized, data version and Content)
pub const ACCOUNT_STATE_SPACE: usize = CURRENT_USED_SIZE + CURRENT_UNUSED_SIZE;

/// Future data migration logic that converts prior state of data
/// to current state of data
fn conversion_logic(src: &[u8]) -> Result<ProgramAccountState, ProgramError> {
    let past = array_ref![src, 0, PREVIOUS_ACCOUNT_SPACE];
    let (initialized, _, _account_space) = array_refs![
        past,
        IS_INITIALIZED,
        DATA_VERSION_ID,
        PREVIOUS_VERSION_DATA_SIZE
    ];
    // Logic to uplift from previous version
    // GOES HERE

    // Give back
    Ok(ProgramAccountState {
        is_initialized: initialized[0] != 0u8,
        data_version: DATA_VERSION,
        account_data: AccountContentCurrent::default(),
    })
}
impl Sealed for ProgramAccountState {}

impl IsInitialized for ProgramAccountState {
    fn is_initialized(&self) -> bool {
        self.is_initialized
    }
}

impl Pack for ProgramAccountState {
    const LEN: usize = ACCOUNT_STATE_SPACE;

    /// Store 'state' of account to its data area
    fn pack_into_slice(&self, dst: &mut [u8]) {
        let mut bw = BufWriter::new(dst);
        self.serialize(&mut bw).unwrap();
    }

    /// Retrieve 'state' of account from account data area
    fn unpack_from_slice(src: &[u8]) -> Result<Self, ProgramError> {
        let initialized = src[0] != 0;
        // Check initialized
        if initialized {
            // Version check
            if src[1] == DATA_VERSION {
                msg!(""Processing consistent data"");
                Ok(
                    ProgramAccountState::try_from_slice(array_ref![src, 0, CURRENT_USED_SIZE])
                        .unwrap(),
             ","[ 7.82388672e-02  3.99292931e-02 -6.54413328e-02  1.09820869e-02
  2.71178596e-02 -7.48931915e-02  4.35893089e-02  7.43968859e-02
 -3.09131499e-02  6.32249787e-02 -1.73804145e-02 -9.12744552e-04
 -1.50594325e-03 -4.52482253e-02 -6.25932366e-02  3.20341699e-02
 -3.99862006e-02 -4.75321598e-02 -2.89957714e-03  1.87557191e-02
  2.18547489e-02 -4.90433127e-02 -1.22673092e-02 -2.76876502e-02
  7.43000433e-02  4.09355424e-02 -5.58571517e-02  4.45900150e-02
  7.16328621e-02 -8.11380073e-02  7.18827248e-02  3.25381719e-02
  1.32778229e-03  4.42970209e-02  6.93880860e-03  2.36251019e-02
 -2.52635367e-02 -9.21346843e-02 -1.81903765e-02  4.98066135e-02
 -2.92321481e-02  7.83062577e-02 -6.85821548e-02  6.21542372e-02
  1.55033376e-02  8.08673203e-02 -1.07562736e-01  4.40918915e-02
 -1.00425165e-02  2.04974366e-03  3.77499275e-02  1.72834862e-02
 -4.42855470e-02  3.48580070e-02  4.70243320e-02 -4.95011769e-02
 -3.33940946e-02  3.61490622e-02 -3.18240561e-02  8.33182782e-02
 -5.26746772e-02  3.71904969e-02  4.43757139e-02 -3.26846726e-02
 -1.85510260e-03  1.79226492e-02  2.87718624e-02  3.69509608e-02
 -1.47761256e-02  1.80186741e-02 -6.73478171e-02  5.83684258e-02
 -8.98559242e-02  5.68787381e-03 -7.02362806e-02 -2.38542035e-02
  1.63229145e-02  2.54067183e-02 -3.51570658e-02 -8.62315595e-02
 -3.81761640e-02 -5.67514449e-03 -1.01145636e-02 -6.08732551e-02
 -1.40760595e-03  1.23259528e-02  4.50219074e-03 -2.43984610e-02
  2.25971472e-02  1.94719585e-03  2.11333558e-02  8.47255960e-02
 -1.35467676e-02  5.04591987e-02  1.11862585e-01  8.91582854e-03
 -5.49004003e-02  3.63607854e-02  1.20324921e-02  5.99140562e-02
  2.38402560e-02  9.34396982e-02  1.53656872e-02  4.46646661e-02
  1.36518860e-02 -8.25118050e-02  2.90647764e-02  7.24404007e-02
 -6.40858263e-02  4.52002250e-02  4.65630963e-02  6.98785260e-02
 -2.88968720e-02 -2.90710423e-02  1.21135786e-01 -1.47837019e-02
  5.89326071e-03 -8.13064049e-04  2.50515994e-02  5.48470877e-02
  1.25482589e-01 -1.05636781e-02 -3.63799967e-02 -3.52410562e-02
 -1.37587756e-01 -3.13535482e-02  2.10148469e-02  6.03917423e-33
  4.46678735e-02 -7.97211677e-02 -4.98645231e-02  1.08096898e-01
 -2.67974678e-02  5.09598292e-02  1.04943383e-02  8.46006200e-02
 -1.33577079e-01 -4.35790606e-03  1.41101005e-02  4.90584560e-02
 -8.88629556e-02  5.47849108e-03  6.49331138e-02 -6.60779998e-02
  3.99699435e-02  5.82965724e-02  9.87547170e-03 -1.02751637e-02
  3.93387862e-02  2.05266420e-02 -1.09196240e-02 -2.87480969e-02
  6.80813044e-02 -6.62312657e-02 -1.67343691e-02 -3.31583507e-02
 -9.74772647e-02 -3.32283825e-02 -2.13284455e-02 -2.09154263e-02
 -4.91870940e-02  6.20409055e-03  5.71851432e-02  1.28637219e-03
  3.00654036e-04 -1.20664863e-02 -2.71183550e-02 -4.69854474e-02
  7.97114521e-02  6.29658848e-02  5.83047383e-02 -1.08164728e-01
 -9.78388786e-02 -7.18617439e-02 -8.63766484e-03 -6.48598745e-02
 -3.09500881e-02 -1.63499098e-02  9.66939256e-02  5.63207641e-02
 -7.78853372e-02  1.63806602e-04 -2.03135400e-03 -3.38716395e-02
  4.13860718e-04 -3.88616771e-02  1.76402982e-02  8.15307349e-02
 -3.07007078e-02 -1.60957389e-02  1.62232369e-02  6.58238083e-02
  2.57971585e-02  2.92431936e-02 -3.21717225e-02 -1.40026417e-02
  5.48023544e-02  2.22682133e-02 -3.08992863e-02 -6.82864636e-02
  5.49054518e-02 -1.02255272e-03 -1.37260733e-02 -4.58527915e-02
 -1.22675337e-02 -5.43497875e-03 -1.16276003e-01 -5.70953339e-02
  2.96702106e-02 -3.11192148e-03 -1.50492806e-02  9.94607923e-04
 -2.40615848e-02 -1.67870689e-02  9.04843807e-02 -1.83158629e-02
 -6.72678202e-02  1.42865060e-02 -3.92838344e-02 -6.29249215e-02
  8.04779828e-02 -1.23986475e-01 -6.49786144e-02 -6.51069293e-33
 -6.42594323e-02  1.67216938e-02  3.70585988e-03  4.42339815e-02
 -5.87982982e-02  1.53368209e-02  6.71576485e-02  1.43460324e-02
 -3.79000567e-02  5.59711480e-04 -2.04004869e-02  4.84163221e-03
  3.33041027e-02 -2.54072193e-02 -8.45441036e-03  1.16615407e-02
 -7.48131126e-02 -7.17837512e-02  8.64681415e-03  1.01565663e-02
 -3.76214609e-02  6.47595078e-02  1.50808588e-01  2.94195581e-02
 -2.51450278e-02  1.21079963e-02 -5.63744530e-02  1.64213427e-03
  2.23868545e-02 -1.04120672e-01 -2.98882443e-02 -3.95059623e-02
 -5.03649116e-02 -2.64866743e-03 -1.87226199e-02 -1.33863494e-01
  3.71360332e-02  9.53204930e-02  1.66202765e-02  3.94804701e-02
  6.23065718e-02  2.29452029e-02 -7.15980306e-02 -4.78440635e-02
 -1.97974965e-02  2.82670557e-02  3.94817628e-02  3.72097827e-02
  1.75826140e-02 -3.89465541e-02  4.47105151e-03 -4.13822494e-02
  2.91376039e-02 -3.26520787e-03 -6.01370819e-03 -1.40268737e-02
  1.49541385e-02  4.02182434e-03  3.16538773e-02 -2.72616949e-02
  4.14241701e-02 -5.05044125e-02 -3.60990851e-03 -7.17515051e-02
  3.82984942e-03 -2.26409864e-02 -6.23553135e-02 -5.90424659e-03
 -6.23508766e-02  7.54012391e-02 -1.36258453e-02  6.53738305e-02
  2.68065333e-02 -3.14091630e-02  1.82542372e-02  5.76029764e-03
  1.75007116e-02 -7.09009320e-02  6.09603859e-02  3.65333930e-02
 -1.29951432e-01  7.10815489e-02 -4.75615226e-02 -1.46763017e-02
 -1.27470307e-02 -1.38754873e-02  1.72302837e-03 -7.05681229e-03
 -3.89766768e-02  2.79200897e-02 -7.79270977e-02  3.13915014e-02
 -7.43298754e-02 -7.55333379e-02 -3.00687533e-02 -5.04370483e-08
 -2.75587570e-02 -9.05124396e-02  2.50580404e-02  1.22050427e-01
  1.32016614e-01 -1.04113426e-02  9.66481864e-03  4.08140309e-02
  1.92951579e-02 -5.24078831e-02  7.92890564e-02  3.54452096e-02
 -4.90959361e-02 -9.82424468e-02 -4.62229140e-02 -1.68610252e-02
 -1.48706604e-02 -1.03248790e-01 -2.77495123e-02  5.63832652e-03
 -4.22947742e-02  6.95937946e-02 -4.44089212e-02  7.73471128e-03
  4.80142124e-02 -3.93678918e-02  1.05705835e-01  9.99575630e-02
 -4.88520181e-03  1.65562378e-03  6.34445623e-02  1.96012966e-02
  2.00431570e-02 -7.30945915e-02 -3.73990536e-02 -1.71659235e-02
  3.70422495e-03  7.39775375e-02  3.04789804e-02  2.33842861e-02
  3.05268522e-02  3.98371043e-03  7.54346699e-02  7.31320828e-02
 -4.70191240e-02 -9.86607373e-03 -1.07387714e-01  3.59223858e-02
  8.82264413e-03 -8.72011483e-02  3.62249240e-02 -1.52947493e-02
  1.62648000e-02  1.02920197e-01 -4.36863722e-03 -5.13292998e-02
 -2.33076829e-02  4.81177606e-02  9.24587622e-03  3.52728814e-02
  2.72245761e-02 -2.69960100e-03 -3.09955589e-02  6.82520214e-03]"
"  )
            } else {
                msg!(""Processing backlevel data"");
                conversion_logic(src)
            }
        } else {
            msg!(""Processing pre-initialized data"");
            Ok(ProgramAccountState {
                is_initialized: false,
                data_version: DATA_VERSION,
                account_data: AccountContentCurrent::default(),
            })
        }
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentCurrent {
    pub somevalue: u64,
}

#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    data_version: u8,
    account_data: AccountContentCurrent,
}
1234567891011//! instruction Contains the main ProgramInstruction enum

use {
    crate::error::DataVersionError,
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::program_error::ProgramError,
};

#[derive(BorshDeserialize, BorshSerialize, Debug, PartialEq)]
/// All custom program instructions
pub enum ProgramInstruction {
    InitializeAccount,
    SetU64Value(u64),
    FailInstruction,
}

impl ProgramInstruction {
    /// Unpack inbound buffer to associated Instruction
    /// The expected format for input is a Borsh serialized vector
    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {
        let payload = ProgramInstruction::try_from_slice(input).unwrap();
        match payload {
            ProgramInstruction::InitializeAccount => Ok(payload),
            ProgramInstruction::SetU64Value(_) => Ok(payload),
            _ => Err(DataVersionError::InvalidInstruction.into()),
        }
    }
}
12345678910111213141516171819202122232425262728impl ProgramInstruction {
    /// Unpack inbound buffer to associated Instruction
    /// The expected format for input is a Borsh serialized vector
    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {
        let payload = ProgramInstruction::try_from_slice(input).unwrap();
        match payload {
            ProgramInstruction::InitializeAccount => Ok(payload),
            ProgramInstruction::SetU64Value(_) => Ok(payload),
            _ => Err(DataVersionError::InvalidInstruction.into()),
        }
    }
}
123456789101112//! Resolve instruction and execute

use crate::{
    account_state::ProgramAccountState, error::DataVersionError, instruction::ProgramInstruction,
};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack},
  ","[-8.46806262e-03  6.04508407e-02 -4.04528193e-02 -3.28453481e-02
 -2.47328784e-02 -4.30564359e-02 -1.38618296e-03  6.27838224e-02
 -7.58205131e-02  1.16300918e-02  4.12384141e-03 -8.98207501e-02
 -1.75725184e-02 -3.56766954e-02  4.91830744e-02  1.47634791e-03
 -6.23629875e-02 -1.57862753e-02  1.14831310e-02 -2.49145017e-03
  9.53762326e-03  5.91928996e-02 -7.73846954e-02  1.02039695e-01
 -3.85433692e-03  1.38356918e-02 -8.67973547e-03  2.79211123e-02
  5.61089776e-02 -4.28427607e-02 -5.99029614e-03  3.28169757e-04
  4.98969574e-03  2.33065989e-02  8.85440484e-02  7.97208995e-02
  4.41130484e-03 -9.65899900e-02  7.04314047e-03 -2.36796066e-02
 -4.69717197e-02  2.95249410e-02 -1.12651907e-01 -1.34785473e-02
  3.62783447e-02 -3.12274490e-02 -5.74812433e-03  6.44243881e-02
 -4.36103679e-02  2.66149715e-02  2.88134273e-02  3.95912454e-02
 -1.75474596e-03 -2.23621745e-02  4.86310236e-02  9.92385000e-02
 -4.46461514e-02  1.19792679e-02 -6.57644880e-04 -1.31231714e-02
 -1.11218974e-01 -3.00608948e-02 -2.46565253e-03 -5.66760637e-02
  3.05242129e-02  4.69409078e-02 -1.74702760e-02  2.07574642e-03
  4.84910607e-03  2.06964519e-02 -4.00213851e-03 -4.77040596e-02
 -6.34096339e-02  1.08982705e-01 -4.07385379e-02  6.29295334e-02
  4.62216884e-02 -2.81873345e-03  6.41901325e-03 -6.40074313e-02
 -6.24108966e-03 -2.28964742e-02 -6.74343109e-02  1.52617441e-02
  2.12366078e-02 -3.94809619e-03 -1.30900806e-02 -5.60830310e-02
  3.52284536e-02  4.28130366e-02  4.29445170e-02 -2.33415682e-02
 -3.21031958e-02 -5.24352398e-03  1.13762841e-01  1.09676085e-02
 -3.38170901e-02 -2.35094363e-03  8.07716101e-02  6.01500310e-02
 -4.29088622e-02  4.25126404e-02  8.56748894e-02  4.34119999e-02
  3.57711576e-02 -7.68707916e-02  9.34209526e-02  2.58779526e-02
 -9.74966511e-02 -6.80767074e-02  3.72281224e-02  4.27424461e-02
  4.38156016e-02 -4.94089648e-02  5.09907939e-02 -5.81308675e-04
  4.52479795e-02 -1.99561510e-02 -8.71333405e-02 -5.02759591e-02
  8.67458656e-02  1.51246013e-02  2.43402272e-02  5.64859509e-02
 -6.73778430e-02 -1.27702236e-01 -3.39316693e-03  1.04568025e-32
  1.91325452e-02 -9.62535217e-02 -1.61768962e-02 -6.96882606e-03
 -1.28522312e-04  4.86491956e-02  9.78828501e-03  1.08875595e-02
 -1.14594720e-01  5.08651584e-02 -4.15554009e-02 -2.22886559e-02
 -5.15591465e-02 -1.05855018e-02  1.00182191e-01 -4.16121148e-02
  5.68320043e-03  4.09918390e-02  6.97444230e-02  3.02201919e-02
  8.35894048e-02 -3.50383832e-03 -8.66211802e-02 -1.90723110e-02
 -6.26605051e-03  4.63077463e-02 -3.99048030e-02 -1.98564455e-02
 -3.95360328e-02 -1.46550387e-02 -9.97229852e-03 -2.16026753e-02
  1.93809662e-02  1.53538175e-02  4.49922122e-02 -6.97862431e-02
  1.94792431e-02  2.10292195e-03 -2.92444620e-02 -4.08877060e-02
  8.29489008e-02  4.37657982e-02 -1.90178805e-03 -2.44999304e-02
 -2.88126618e-02 -1.03252292e-01 -8.41200724e-03 -1.08765233e-02
  5.37253357e-02 -6.64549023e-02  7.65289217e-02  5.50634339e-02
 -2.90824305e-02 -3.77547219e-02 -2.27178028e-03 -6.45658448e-02
 -4.26886650e-03  6.83828294e-02  1.98862161e-02  7.41584525e-02
  1.54951587e-02  2.63256840e-02 -3.75530981e-02  1.10696664e-03
  1.86815974e-03 -6.46203458e-02 -1.00286089e-01 -5.30965440e-02
  2.68962514e-02 -3.40059213e-02 -3.87357958e-02  1.88929513e-02
 -2.33384483e-02  5.24100475e-02 -3.45852715e-03 -1.39101548e-02
 -1.80163495e-02  3.57242785e-02  1.18109873e-02 -1.12120971e-01
 -3.73634063e-02  6.91717416e-02 -5.76036647e-02  7.01475143e-02
 -2.04084124e-02  6.65927976e-02  7.48727657e-03 -3.85583863e-02
 -5.94287328e-02  3.16165872e-02  1.61032416e-02 -1.02624819e-01
  3.67054865e-02 -4.94548790e-02 -5.21580540e-02 -1.02980086e-32
  5.83146736e-02 -1.44999912e-02 -1.73499156e-02 -6.93400949e-02
 -8.65710527e-02  1.97015906e-04  9.21118557e-02 -5.38182482e-02
  2.30540032e-03  2.09596213e-02  3.85330804e-02  1.61282048e-02
  6.96076974e-02 -1.99994567e-04  5.42110018e-02  3.17466538e-03
 -4.64251041e-02 -6.58831894e-02 -3.37113924e-02  2.46573277e-02
  2.43135411e-02  9.17568207e-02  6.03959262e-02 -1.74245648e-02
 -6.49484526e-03  4.32289988e-02 -3.24839540e-02  7.96070397e-02
  6.82289302e-02  2.39689909e-02 -4.66734432e-02  2.79159360e-02
 -1.01984516e-02  2.43447348e-02 -6.51679859e-02 -7.65834674e-02
  8.04766938e-02  3.05361841e-02 -8.38145707e-03 -3.10079809e-02
  4.46778014e-02  3.58911864e-02 -9.85109583e-02 -1.84920896e-02
  2.52443776e-02  6.01735003e-02  7.69576654e-02  5.99253271e-03
  2.93078646e-02 -4.23411354e-02  4.12021279e-02 -4.76769097e-02
  2.21297666e-02  3.00661530e-02 -4.46067192e-02 -7.28305206e-02
  1.13141038e-01 -1.37120888e-01 -1.68811996e-03 -3.59453144e-03
  1.20122749e-02 -3.26027311e-02  3.98957096e-02 -2.99144629e-02
  3.20182703e-02 -1.84374321e-02 -6.40006214e-02 -1.60082150e-03
  2.79520079e-02 -6.89666718e-02 -5.99574577e-03  5.26350504e-03
 -4.44929563e-02 -1.99735370e-02  7.04067945e-02  4.86119427e-02
 -5.20916022e-02 -2.68169213e-02  8.25322792e-02  5.20419069e-02
 -1.44709200e-01  6.95461268e-03 -1.94833912e-02  7.56648257e-02
  1.64002161e-02 -1.23167329e-01  3.98153402e-02  2.81564631e-02
 -6.59626126e-02  2.98252832e-02 -6.48647025e-02 -5.70599735e-02
  3.81506607e-02  5.83274439e-02 -1.52775552e-02 -5.80212003e-08
 -1.05032146e-01 -8.43208507e-02 -1.12701869e-02  8.80676880e-02
  6.72684014e-02  7.34970719e-03 -5.20422012e-02 -9.31287408e-02
  6.98380023e-02 -1.31811470e-01 -5.42714298e-02  6.47606924e-02
 -3.37694585e-02 -8.41040686e-02  2.54826769e-02  6.12692581e-03
 -6.55004978e-02 -2.72671934e-02 -1.35960467e-02 -4.56596315e-02
 -9.14237608e-05  8.60329997e-03 -5.62126748e-02 -8.33340734e-03
  6.64014667e-02  6.61662605e-04  4.25134227e-02  1.07580096e-01
  6.00188375e-02 -4.92583960e-03  6.26590550e-02 -2.08842345e-02
  5.69186658e-02  2.76096091e-02  1.63494553e-02 -9.93260462e-03
  5.94552085e-02  1.11205362e-01 -2.69053364e-03 -1.63520519e-02
 -8.25648848e-03  1.98027194e-02 -1.14595026e-01  3.49674076e-02
 -2.50641652e-03  7.49908993e-03 -7.67902583e-02  8.92385021e-02
  4.89443466e-02 -2.55663004e-02 -1.58690214e-02 -1.26286978e-02
  4.84518558e-02  2.48751771e-02 -2.51018144e-02 -7.12879673e-02
  2.30044313e-02 -4.16621231e-02 -3.56117599e-02  4.34593856e-02
  6.76736608e-02  4.56740111e-02  5.19748479e-02 -3.53248641e-02]"
" pubkey::Pubkey,
};

/// Checks each tracking account to confirm it is owned by our program
/// This function assumes that the program account is always the last
/// in the array
fn check_account_ownership(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {
    // Accounts must be owned by the program.
    for account in accounts.iter().take(accounts.len() - 1) {
        if account.owner != program_id {
            msg!(
                ""Fail: The tracking account owner is {} and it should be {}."",
                account.owner,
                program_id
            );
            return Err(ProgramError::IncorrectProgramId);
        }
    }
    Ok(())
}

/// Initialize the programs account, which is the first in accounts
fn initialize_account(accounts: &[AccountInfo]) -> ProgramResult {
    msg!(""Initialize account"");
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Just using unpack will check to see if initialized and will
    // fail if not
    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;
    // Where this is a logic error in trying to initialize the same account more than once
    if account_state.is_initialized() {
        return Err(DataVersionError::AlreadyInitializedState.into());
    } else {
        account_state.set_initialized();
        account_state.content_mut().somevalue = 1;
    }
    msg!(""Account Initialized"");
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}

/// Sets the u64 in the content structure
fn set_u64_value(accounts: &[AccountInfo], value: u64) -> ProgramResult {
    msg!(""Set new value {}"", value);
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    account_state.content_mut().somevalue = value;
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}
/// Main processing entry point dispatches to specific
/// instruction handlers
pub fn process(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!(""Received process request"");
    // Check the account for program relationship
    if let Err(error) = check_account_ownership(program_id, accounts) {
        return Err(error);
    };
    // Unpack the inbound data, mapping instruction to appropriate structure
    let instruction = ProgramInstruction::unpack(instruction_data)?;
    match instruction {
        ProgramInstruction::InitializeAccount => initialize_account(accounts),
      ","[-4.98419218e-02  2.15068068e-02 -6.84751645e-02 -5.77097870e-02
  2.31820699e-02 -3.05462871e-02  1.21760346e-01  2.22389605e-02
 -9.31162573e-03  2.54080072e-02  5.69538795e-04 -5.76046892e-02
  5.12371436e-02  4.23178729e-03 -1.94799341e-02  8.96336418e-03
 -7.26556182e-02  1.14912596e-02  2.94212829e-02 -2.16724724e-02
 -6.39589056e-02 -3.52171548e-02  5.49244434e-02  7.20015019e-02
 -3.60813364e-02 -6.52484670e-02 -4.25071865e-02  7.99767580e-03
 -4.62623797e-02 -4.36567068e-02  8.61362219e-02 -1.03471339e-01
 -1.42151704e-02  6.54907525e-02  1.62055288e-02  5.05338423e-02
  9.46707733e-04 -1.25593111e-01  6.17314167e-02 -4.77751084e-02
 -3.85869443e-02  4.27722186e-02 -5.05239479e-02 -4.82248282e-03
  2.16034148e-02  3.88649590e-02 -2.65245922e-02  4.80357632e-02
 -1.86011006e-04  6.60257861e-02 -3.19597078e-03 -4.15363684e-02
  1.00765415e-02 -2.83939391e-02  9.73909255e-03  1.22296154e-01
  2.25549117e-02  1.28528001e-02  1.73262581e-02  5.56733385e-02
  1.71197467e-02 -3.28402966e-02 -2.03793030e-02  3.87874898e-03
 -3.03609818e-02  6.67008907e-02 -3.99644449e-02 -2.05879398e-02
 -5.45884250e-03  2.05173101e-02  5.08557186e-02  2.22737752e-02
 -2.26052888e-02  6.41450891e-03 -9.10720974e-02 -6.35876134e-02
 -3.77825759e-02  4.51616310e-02 -5.66717423e-02 -4.37906943e-02
 -4.15257514e-02 -8.01980868e-03  2.68039685e-02  4.74976152e-02
  1.93695668e-02  6.30162209e-02 -2.21738294e-02 -4.79105003e-02
  5.72573282e-02  7.16143325e-02 -1.97847467e-02 -4.38979687e-03
  7.58379027e-02  1.15672508e-02  1.40025839e-01  8.79113153e-02
  1.45856757e-03  1.81472115e-02 -5.05355336e-02  6.26838580e-02
 -7.77365342e-02 -3.31595875e-02  6.50038719e-02 -1.12239579e-02
  1.19064979e-01  5.33623621e-02  3.93290296e-02 -4.16751765e-02
 -9.75537077e-02 -4.19678427e-02 -3.02185945e-04  3.77428792e-02
  8.09464324e-03  9.70202014e-02  3.88128087e-02  5.40518463e-02
 -4.28927988e-02  1.05711974e-01 -3.07859965e-02  1.19171785e-02
  7.64736906e-02  2.23280061e-02  3.48956846e-02 -2.77394075e-02
 -5.43776117e-02  3.41591723e-02  2.38227099e-02  2.54159419e-33
 -8.68102536e-03  4.00888212e-02 -7.60933310e-02 -7.72507116e-03
  1.83825549e-02  3.97767089e-02 -6.55371696e-04  4.29322980e-02
 -1.11023307e-01  3.29848602e-02  5.17218225e-02  1.70086622e-02
 -3.57822813e-02 -5.39987348e-02  4.26649302e-02  4.32390458e-04
  2.45690811e-02  9.03172120e-02  5.22767007e-02  1.00588817e-02
  9.02934838e-03 -3.48499268e-02 -2.70437598e-02 -2.39691623e-02
  8.11724514e-02 -1.05288159e-02 -4.04682197e-02  8.01267549e-02
  9.44308843e-03 -1.80126878e-03  2.60995496e-02 -7.17681879e-03
  2.76198681e-03 -1.03887413e-02  6.13633171e-02 -4.51742858e-02
 -1.63296666e-02 -4.10086242e-03 -8.58905241e-02 -1.31203523e-02
  8.59911367e-02 -4.62203324e-02 -3.83304507e-02 -3.90159376e-02
 -7.46196806e-02 -5.68592399e-02 -7.30141550e-02  8.98123439e-03
  5.53422719e-02  7.78165609e-02 -5.66823259e-02  2.21832562e-02
 -9.05169323e-02 -7.14511946e-02 -3.97442793e-03 -1.04291365e-01
 -6.43943772e-02 -1.93524081e-02 -1.53352995e-03 -8.22954476e-02
  5.68336584e-02 -1.49185304e-02 -1.91535912e-02  1.55428015e-02
 -2.40172371e-02 -2.33675353e-02 -2.13779137e-02 -4.31185681e-03
  8.43709409e-02  1.39076263e-02 -2.35455930e-02  1.84598602e-02
 -4.48831581e-02  1.94947124e-02  2.90804217e-03 -6.34811446e-02
 -4.17763740e-02  1.75306108e-02 -5.96048199e-02 -3.54073793e-02
  2.58021019e-02 -5.57460263e-02 -7.73105100e-02  8.62769634e-02
 -8.07839930e-02  9.00058597e-02 -3.22311185e-02  9.82948393e-03
 -6.04147650e-02  1.29397869e-01  3.02825551e-02 -3.37394513e-02
 -1.31173357e-02  3.38605270e-02 -6.96963221e-02 -5.13785769e-33
 -1.35489777e-02 -6.97816685e-02  3.37668248e-02 -5.87852076e-02
 -5.72861321e-02 -3.16569060e-02  6.20619319e-02 -4.05603386e-02
 -2.34613828e-02  6.47789519e-03 -3.93140838e-02 -2.52660271e-02
  3.21010984e-02  3.49620334e-03  4.79419604e-02  4.55601793e-03
 -4.70000170e-02 -8.37705508e-02  1.02466103e-02 -7.13256523e-02
 -2.12975815e-02  5.66787496e-02  4.25225496e-02  7.20039830e-02
 -1.02043594e-03  4.23262827e-02 -3.57543468e-03  6.82245195e-03
  2.72905175e-03 -2.48930622e-02  6.86333850e-02 -4.99601439e-02
 -6.61295354e-02  1.70146804e-02  1.67187825e-02 -1.20587498e-01
  6.07687794e-03  9.94647294e-02 -1.60319973e-02  2.87160520e-02
  1.16188765e-01 -2.66227929e-04  2.59966552e-02 -2.43827309e-02
  4.38651815e-03  1.67030562e-02  7.61544704e-02 -8.57605482e-04
 -1.40185468e-02  1.10119153e-02  3.31526599e-03 -7.35007823e-02
  7.12938234e-02 -3.10494304e-02 -4.43853587e-02  2.75057796e-02
  1.98887527e-01 -1.80366356e-02  2.68883295e-02 -5.76714240e-02
  9.26912762e-03 -8.32253247e-02 -4.77918331e-03  1.17639758e-01
 -2.63570193e-02 -7.65730962e-02 -3.88068184e-02  3.49861458e-02
  1.17060289e-01  7.10244402e-02 -8.39588512e-03 -6.61960989e-02
 -2.11368222e-02 -4.28206250e-02  1.12697296e-02  4.43472750e-02
 -2.85061188e-02 -5.70879281e-02 -1.26383519e-02  2.44237948e-02
  1.17912209e-02  1.77284312e-02  5.20628057e-02 -6.14717714e-02
 -3.21057253e-02 -6.90748543e-02  5.02436496e-02 -2.54677888e-02
 -4.52657007e-02  3.29734646e-02  1.30908592e-02  2.74460725e-02
 -7.40484446e-02 -1.11942261e-01 -3.96030098e-02 -5.50411663e-08
 -8.59510601e-02  9.90488939e-03  2.18001157e-02  5.88545315e-02
  6.62829429e-02 -4.38185185e-02  4.36346121e-02 -3.53064686e-02
 -5.01749665e-02 -7.90759400e-02 -1.11948527e-01  5.30911982e-02
 -2.17686966e-02 -2.26335321e-02  7.05372309e-04 -1.21145204e-01
 -4.25411873e-02  4.98825498e-02 -3.36233824e-02  1.12848394e-02
 -4.32627089e-02 -8.82285833e-03  3.08148134e-02  1.19571825e-02
 -9.95228365e-02 -7.33202440e-04  4.79258262e-02  7.37647861e-02
  6.22041486e-02  5.32027520e-02  1.94031633e-02  4.34161685e-02
  2.35352367e-02 -4.93500866e-02 -4.54522967e-02  1.40048508e-02
  5.75806480e-03 -9.23002313e-04  3.57600786e-02  1.11561979e-03
  2.63672159e-03  3.75611633e-02  3.05437464e-02  2.18258444e-02
 -8.23662207e-02 -1.98056456e-02  3.86772305e-02 -3.55123095e-02
  9.77339521e-02 -4.46571149e-02 -6.00601360e-03 -7.31860325e-02
 -7.61455251e-03  9.45817679e-02 -4.97938059e-02  4.99681616e-03
  7.75644137e-03 -9.13986564e-02 -4.08198200e-02 -8.34036386e-04
  3.55135575e-02 -2.25541042e-03  1.14712240e-02 -1.12474374e-02]"
" ProgramInstruction::SetU64Value(value) => set_u64_value(accounts, value),
        _ => {
            msg!(""Received unknown instruction"");
            Err(DataVersionError::InvalidInstruction.into())
        }
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687fn check_account_ownership(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {
    // Accounts must be owned by the program.
    for account in accounts.iter().take(accounts.len() - 1) {
        if account.owner != program_id {
            msg!(
                ""Fail: The tracking account owner is {} and it should be {}."",
                account.owner,
                program_id
            );
            return Err(ProgramError::IncorrectProgramId);
        }
    }
    Ok(())
}

/// Initialize the programs account, which is the first in accounts
fn initialize_account(accounts: &[AccountInfo]) -> ProgramResult {
    msg!(""Initialize account"");
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Just using unpack will check to see if initialized and will
    // fail if not
    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;
    // Where this is a logic error in trying to initialize the same account more than once
    if account_state.is_initialized() {
        return Err(DataVersionError::AlreadyInitializedState.into());
    } else {
        account_state.set_initialized();
        account_state.content_mut().somevalue = 1;
    }
    msg!(""Account Initialized"");
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}

/// Sets the u64 in the content structure
fn set_u64_value(accounts: &[AccountInfo], value: u64) -> ProgramResult {
    msg!(""Set new value {}"", value);
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    account_state.content_mut().somevalue = value;
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}
/// Main processing entry point dispatches to specific
/// instruction handlers
pub fn process(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!(""Received process request"");
    // Check the account for program relationship
    if let Err(error) = check_account_ownership(program_id, accounts) {
        return Err(error);
    };
    // Unpack the inbound data, mapping instruction to appropriate structure
    let","[-3.14482190e-02  5.81782013e-02 -8.25910568e-02 -4.55768593e-02
 -2.56657712e-02 -2.53923908e-02  1.01908594e-01  5.32188155e-02
 -5.61660416e-02  5.16581424e-02  4.49259998e-03 -7.50980750e-02
  4.44252081e-02 -2.03691702e-02  3.20105180e-02  3.58740650e-02
 -5.37761562e-02 -1.92413088e-02  1.28755653e-02  6.97869249e-03
 -7.03090045e-04  1.56724837e-03  1.81219857e-02  9.06513855e-02
 -3.57679534e-03 -9.27020982e-02 -5.17590903e-02  1.62603259e-02
  2.67646182e-03  8.67762510e-03  8.34790915e-02 -7.57450610e-02
 -6.29650056e-03  5.37829660e-02  7.09589943e-02  1.08647801e-01
 -8.38804990e-03 -9.36185271e-02  3.67303868e-03 -3.98801975e-02
 -4.78346422e-02  7.04909265e-02 -5.19555137e-02  9.31923185e-03
  2.06564143e-02  3.46161313e-02 -4.06827312e-03 -2.46070465e-03
  1.11331576e-02  3.63985710e-02 -1.93652278e-03  7.27757346e-03
  4.92234379e-02 -6.37770668e-02 -7.68837845e-03  9.43183303e-02
  4.24600318e-02  3.64301987e-02 -6.59971545e-03  5.57270087e-02
 -2.27047149e-02 -2.51240041e-02  3.35147046e-02 -3.39625366e-02
 -7.04880133e-02  3.53367850e-02 -2.16778796e-02 -3.60655785e-02
  1.77409295e-02  4.83419886e-03 -8.40229820e-03 -1.05340928e-02
 -6.01239838e-02  5.87998331e-02 -8.02094117e-02 -8.40462279e-03
 -2.44380850e-02  3.39964591e-02 -5.45391366e-02 -7.09297359e-02
 -2.43543610e-02 -2.53619384e-02  7.45439809e-03  5.84105328e-02
  1.07679062e-03  3.94714661e-02  1.48715312e-02 -1.73007082e-02
  1.08612180e-01  1.13122866e-01 -2.24481840e-02 -1.35337701e-02
  4.97085005e-02  1.77844223e-02  1.94798931e-01  7.11200088e-02
  3.49839665e-02 -3.17029166e-03 -8.77516791e-02  4.21784818e-02
 -5.07997535e-02 -6.12380281e-02  4.16270979e-02  1.70855615e-02
  5.36514074e-02  2.66503971e-02  4.28305343e-02 -1.55372769e-02
 -1.01712354e-01 -7.69821480e-02 -1.68233365e-03  4.24734242e-02
 -1.52364550e-02  2.54535526e-02  6.89446256e-02  6.59756362e-02
 -8.84161368e-02  6.58618659e-02 -5.48939183e-02  3.08247190e-02
  5.93715645e-02  1.06043871e-02 -4.52260487e-03 -1.97142400e-02
 -7.27411956e-02 -3.31842750e-02  5.51631162e-03  3.15117967e-33
 -1.91095844e-02  1.22172963e-02 -6.84925094e-02  4.10583727e-02
  2.66457703e-02  2.26169433e-02  2.97865691e-03  5.39130270e-02
 -1.20791979e-01  3.84139344e-02  4.10544313e-02 -5.04155830e-02
 -3.95888798e-02  1.29280277e-02  6.82160705e-02 -6.41877018e-03
  2.99782902e-02  5.08930795e-02  9.20102373e-02 -3.53215076e-02
  4.90614772e-02 -2.10147537e-02 -4.47027981e-02 -5.63434772e-02
  5.69807440e-02  2.23599523e-02 -7.24170581e-02  7.70355314e-02
  2.17505265e-02 -1.57132298e-02  1.40184173e-04 -3.79942618e-02
 -8.11991468e-03 -1.53821511e-02  4.72821072e-02 -8.90550166e-02
 -3.26126218e-02  2.61332728e-02 -5.78761287e-02  1.37449550e-02
  1.04772128e-01 -3.31219472e-02 -8.72205012e-03 -1.16896285e-02
 -1.67635549e-02 -5.88081889e-02 -4.07353565e-02  3.20946202e-02
  5.56655936e-02  6.53338134e-02 -4.55469228e-02  3.08910888e-02
 -5.05823791e-02 -5.86865172e-02 -1.92218423e-02 -8.52484331e-02
 -2.92112436e-02 -2.30752528e-02 -9.22345463e-03 -1.15977190e-01
  4.65565808e-02  5.11922538e-02  7.88080215e-04  4.83815335e-02
  4.64163162e-03 -1.89407598e-02 -1.74371786e-02 -2.55367495e-02
  2.80752908e-02  4.24896553e-03 -7.47520402e-02 -1.27289584e-02
 -3.54563408e-02  4.17721085e-02 -3.75925526e-02 -7.65328184e-02
 -3.88961355e-03  1.23911425e-02 -4.87089641e-02 -2.72931848e-02
  2.37832051e-02 -6.35027438e-02 -8.43970180e-02  3.21580544e-02
 -1.24769635e-01  8.90643373e-02 -3.35312225e-02  1.12753492e-02
 -8.55385419e-03  1.34196505e-01  4.93720621e-02 -7.43340030e-02
 -3.49002443e-02  5.18132038e-02 -7.48157799e-02 -6.73939344e-33
  1.53327209e-03 -4.85458635e-02  2.32877117e-02 -8.17505643e-02
 -1.10860663e-02 -3.79048549e-02  5.60060740e-02 -1.90066185e-03
 -4.96112891e-02 -5.42938896e-02 -6.19392805e-02 -1.41686294e-03
  2.98063038e-03 -1.12069712e-03  2.58759614e-02  7.36591313e-03
 -7.13282824e-02 -4.50806245e-02  1.85782779e-02 -1.94741581e-02
 -3.25476602e-02  8.77112597e-02  4.81717475e-02  4.47831713e-02
  1.43721392e-02  1.06963143e-02  1.02004185e-02  2.27150116e-02
  4.21646684e-02 -7.04116793e-03  5.68710454e-02 -3.13353143e-03
 -5.35986871e-02  7.28259236e-02 -1.48595395e-02 -1.45051822e-01
  3.14580463e-02  2.34875046e-02 -4.56624255e-02  2.13907193e-02
  1.36850074e-01 -7.11252855e-04 -2.41889269e-03 -4.52764938e-03
  4.90071774e-02  3.37732174e-02  7.96874240e-02 -1.30241606e-02
 -1.29299732e-02  5.52779250e-03  2.30362779e-03 -7.80126750e-02
  7.43116289e-02 -1.61020625e-02 -2.45743943e-03  4.57029790e-03
  2.06023172e-01 -3.87772433e-02  5.33032268e-02 -7.47402608e-02
  1.04512302e-02 -6.42124787e-02 -1.09271873e-02  9.11386460e-02
 -2.17138361e-02 -1.10519510e-02 -5.44099063e-02  5.14336079e-02
  4.90763821e-02  5.23083806e-02  2.64889561e-03 -9.44667235e-02
 -2.61003617e-02 -8.82738605e-02 -1.64521520e-03  6.90165311e-02
 -9.69573632e-02 -2.69899028e-03 -6.07995763e-02  2.19023917e-02
  1.26649020e-02  1.07805319e-02  3.86895947e-02 -1.95395332e-02
 -1.39609156e-02 -1.00771293e-01  3.59406807e-02  9.57605056e-03
 -3.56220566e-02 -2.01135892e-02 -1.45293940e-02 -1.40174814e-02
 -4.07176055e-02 -4.16388214e-02 -6.24907613e-02 -6.08179676e-08
 -7.54358470e-02 -1.02831498e-02  2.73478851e-02  5.84539212e-02
  6.47461712e-02 -5.41219749e-02 -6.39111921e-03 -5.26154712e-02
 -2.21475642e-02 -3.10080536e-02 -1.16810091e-01  4.01275828e-02
 -5.29495254e-02 -1.18002808e-02 -4.45065508e-03 -1.14396960e-01
 -6.85381219e-02  8.94166231e-02  7.75899831e-03  1.20897871e-02
 -1.47396084e-02 -5.76974154e-02  1.58275105e-02  9.64950956e-03
 -2.87413746e-02  1.45495292e-02  5.10049313e-02  9.40888375e-02
  5.06414101e-02  2.86698043e-02  6.44039968e-03  3.10380086e-02
  5.90942763e-02 -1.91898458e-02 -7.70880282e-03  1.30214188e-02
  9.99200996e-03  2.90187052e-03  5.24941944e-02 -4.62114178e-02
 -2.95373760e-02  7.55155906e-02  2.03099661e-02  6.79318421e-03
 -4.29590270e-02 -2.16706041e-02 -2.36645825e-02  6.21671882e-03
  8.54153186e-02 -3.67329083e-02 -4.97403964e-02 -7.13672768e-03
 -6.34898692e-02  8.58089328e-02 -1.74764339e-02  3.46889719e-03
 -2.57704519e-02 -5.88959455e-02 -8.90704021e-02 -1.11916326e-02
  6.96526393e-02  2.09467374e-02  9.52420756e-03 -6.36303499e-02]"
"instruction = ProgramInstruction::unpack(instruction_data)?;
    match instruction {
        ProgramInstruction::InitializeAccount => initialize_account(accounts),
        ProgramInstruction::SetU64Value(value) => set_u64_value(accounts, value),
        _ => {
            msg!(""Received unknown instruction"");
            Err(DataVersionError::InvalidInstruction.into())
        }
    }
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970In our first version of an account, we are doing the following:IDAction1Include a 'data version' field in your data. It can be a simple incrementing ordinal (e.g. u8) or something more sophisticated2Allocating enough space for data growth3Initializing a number of constants to be used across program versions4Add an update account function under fn conversion_logic for future upgradesLet's say we want to upgrade our program's accounts now to include a new required field, the somestring field.If we didn't allocate extra space on the previous account, we could not upgrade the account and be stuck.# Upgrading the AccountIn our new program we want to add a new property for the content state. The changes that follow are how we leveraged the initial program constructs as they come into use now.# 1. Add account conversion logicAccountPress </> button to view full source//! @brief account_state manages account data

use arrayref::{array_ref, array_refs};
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    borsh::try_from_slice_unchecked,
    msg,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack, Sealed},
};
use std::{io::BufWriter, mem};

/// Current state (DATA_VERSION 1). If version changes occur, this
/// should be copied to another (see AccountContentOld below)
/// We've added a new field: 'somestring'
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentCurrent {
    pub somevalue: u64,
    pub somestring: String,
}

/// Old content state (DATA_VERSION 0).
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentOld {
    pub somevalue: u64,
}

/// Maintains account data
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    data_version: u8,
    account_data: AccountContentCurrent,
}

impl ProgramAccountState {
    /// Signal initialized
    pub fn set_initialized(&mut self) {
        self.is_initialized = true;
    }
    /// Get the initialized flag
    pub fn initialized(&self) -> bool {
        self.is_initialized
    }
    /// Gets the current data version
    pub fn version(&self) -> u8 {
        self.data_version
    }
    /// Get the reference to content structure
    pub fn content(&self) -> &AccountContentCurrent {
        &self.account_data
    }
    /// Get the mutable reference to content structure
    pub fn content_mut(&mut self) -> &mut AccountContentCurrent {
        &mut self.account_data
    }
}

/// Declaration of the current data version.
const DATA_VERSION: u8 = 1; // Adding string to content
           ","[ 8.03828426e-03  5.36424778e-02 -3.34848687e-02 -2.36737784e-02
 -5.43544143e-02 -3.54458243e-02 -2.06643734e-02  2.00854819e-02
 -6.20164536e-02  2.33062487e-02  4.60858569e-02 -5.84387919e-03
  4.75247726e-02 -1.13005571e-01  6.18530698e-02  2.92614214e-02
 -1.11362614e-01  1.97193976e-02 -6.84443265e-02 -2.52122656e-02
  4.33327667e-02 -1.93767380e-02 -5.90974204e-02  7.88689926e-02
  1.53993117e-03 -1.89100504e-02 -3.01053319e-02  5.67682683e-02
  4.19443436e-02 -3.59463021e-02  4.51575816e-02 -1.39354239e-03
  1.57801863e-02  2.25743465e-02  3.80244590e-02  6.11606129e-02
 -3.08193434e-02 -3.04817688e-04 -2.37422474e-02  1.85958873e-02
 -9.03476253e-02  5.23562469e-02  5.16207190e-03  6.52877763e-02
  8.70094262e-03  2.50081420e-02 -4.21793759e-02  1.66163817e-02
 -4.92697256e-03 -2.42277328e-03  3.85509878e-02  2.31597889e-02
 -3.53220925e-02 -2.26595271e-02 -2.73548951e-03  3.05978525e-02
  4.00697626e-02  2.69300453e-02 -8.29878300e-02  3.21911797e-02
 -9.24149305e-02 -2.40587033e-02  8.31362754e-02 -3.77870053e-02
 -7.28816167e-02 -1.25122797e-02  2.81639723e-03 -1.41526191e-02
  5.41702621e-02  2.63595507e-02 -9.23136473e-02 -2.05878634e-02
 -7.98945501e-02  7.72312507e-02 -5.19147925e-02  8.96692872e-02
  9.25790286e-04  2.64032129e-02  1.46855619e-02 -5.39131127e-02
 -2.89307814e-02 -1.62848122e-02  1.60259474e-02  5.49920648e-03
  1.04383333e-02 -3.81783023e-02  4.37008366e-02 -1.33856328e-03
  5.26313148e-02  6.82227984e-02 -3.00786365e-03 -3.99307609e-02
  4.89684157e-02  9.16447304e-03  1.42048866e-01  5.07446751e-02
  7.23888923e-04 -5.52795194e-02 -2.48923469e-02 -1.36410096e-03
 -4.26421240e-02  3.97749022e-02  3.62020917e-02  1.67549029e-02
 -4.54798480e-03 -2.97808591e-02  6.91759214e-02 -1.71523336e-02
 -8.66092220e-02 -1.38360783e-01  5.19958176e-02  3.36825401e-02
 -3.59616317e-02 -4.42284942e-02  7.06481114e-02  2.61967145e-02
 -5.76021560e-02 -7.07283150e-03 -3.41867022e-02  5.69584221e-02
  8.92548934e-02  2.07763501e-02  5.47125936e-03  5.18588349e-02
 -1.03787959e-01 -6.47334605e-02 -1.24844983e-02  6.52796094e-33
 -8.39129556e-03  2.39800699e-02 -5.84398732e-02  7.92920291e-02
 -2.16989499e-02  2.13246085e-02  3.79417427e-02  8.71858224e-02
 -1.40089899e-01  8.54830369e-02  1.27007682e-02 -2.45563663e-03
 -3.71466279e-02  3.37389372e-02  1.27843842e-01 -7.77735636e-02
  2.74109039e-02  5.47146052e-02  9.62447375e-02 -1.45157492e-02
  9.68783945e-02 -1.24745620e-02 -5.71366437e-02 -4.94345911e-02
  1.13816068e-01  5.20200543e-02 -6.82807267e-02  2.75626425e-02
 -3.54309194e-02 -5.07033877e-02 -5.72510734e-02 -3.26870121e-02
 -2.71960385e-02 -1.95775623e-03  5.26145734e-02 -1.00935690e-01
  1.34721762e-02 -3.38765979e-02  5.18164858e-02  2.28547864e-02
  1.04982629e-01  2.40688007e-02  4.13869247e-02  1.28223579e-02
  3.01744845e-02 -3.50868180e-02 -1.17299743e-02  5.33563159e-02
  3.32178436e-02 -3.76028419e-02  6.00635931e-02  6.08037636e-02
 -6.64756820e-02 -8.26021507e-02 -7.87845328e-02 -6.77092299e-02
  1.30440118e-02 -3.51313688e-02  5.07104816e-03 -1.87098403e-02
  2.01697927e-02  1.21611543e-02  9.26690083e-03  7.16498643e-02
  7.59032415e-03 -9.91481449e-03 -1.01615489e-02 -6.45465776e-02
  2.14382093e-02  3.51807475e-02 -6.18822724e-02 -1.95269007e-02
 -1.00818880e-01  2.65775677e-02 -2.65989136e-02 -3.46735269e-02
  1.44162895e-02 -9.18290764e-03 -2.60727666e-02 -5.39837107e-02
  1.67332105e-02  2.02877577e-02 -8.65108594e-02  1.37036862e-02
 -2.70646662e-02  2.50573666e-03  8.42371024e-03 -9.64070670e-03
 -2.93419845e-02 -3.73363942e-02  4.90635335e-02 -6.68841749e-02
 -2.97125336e-02 -4.01987582e-02  2.09131949e-02 -7.81740037e-33
  6.88918382e-02 -2.32574046e-02  2.58585513e-02 -7.64334295e-03
  2.18060724e-02 -1.03868628e-02  5.14227711e-02  2.37351507e-02
 -1.15563441e-02 -6.57849386e-02 -5.60470410e-02  4.90003526e-02
  1.73720494e-02 -6.88649490e-02  6.16312725e-03  3.88743207e-02
 -1.39427111e-01 -1.65735204e-02  1.72692481e-02  4.05241922e-02
 -1.05941352e-02  1.02357633e-01  1.08296629e-02  2.23895293e-02
  3.66738774e-02 -2.33832188e-03 -2.01286245e-02  5.04957810e-02
  6.91632107e-02  2.39473227e-02 -1.50269009e-02 -1.04216915e-02
 -1.19987465e-02  4.84923124e-02 -5.48565276e-02 -9.26232189e-02
  1.28209397e-01 -3.58344615e-02 -3.49881463e-02  8.84587765e-02
  9.79141518e-02  6.33589039e-03 -5.68913482e-02  2.51498707e-02
  7.42725581e-02  2.81749628e-02  2.81926524e-02  4.16625887e-02
  3.32388328e-03 -3.96869890e-02  2.30612401e-02 -2.87356088e-03
 -2.45874096e-02  1.58359502e-02 -1.77361649e-02 -1.76669303e-02
  8.21205676e-02 -4.25880104e-02  2.47751195e-02 -8.94756392e-02
 -2.42663939e-02 -2.65430864e-02  1.03824258e-01  2.23999340e-02
 -4.04075347e-02  2.74490509e-02 -7.56727308e-02 -3.30249369e-02
 -7.35563487e-02  5.96592017e-02  2.55881110e-03 -5.21151610e-02
 -3.22133936e-02 -4.07626554e-02 -4.36243340e-02  1.30291339e-02
 -3.38306539e-02 -1.40387407e-02  5.87514695e-03  4.97670695e-02
 -3.99403982e-02  2.63368916e-02  4.13556881e-02  5.96436299e-02
 -4.39613126e-02 -8.14579204e-02  8.07941854e-02  2.34695245e-02
 -2.12297328e-02 -5.86286262e-02 -8.14652219e-02 -2.39714440e-02
 -5.25976717e-02 -1.81738064e-02 -7.50917271e-02 -6.13651281e-08
 -2.70369612e-02 -3.24759968e-02 -2.40392424e-03  8.06262121e-02
  8.82787853e-02 -2.90996674e-02 -1.16190590e-01 -2.79766954e-02
  2.28154957e-02 -6.02853000e-02 -3.16432640e-02  1.03773035e-01
 -1.11119670e-03 -5.79196587e-02 -1.25304898e-02  5.69352880e-02
  6.33440353e-03 -4.78388891e-02  1.29499901e-02  1.68629438e-02
 -6.26853183e-02  3.94742750e-02 -1.68462470e-02 -1.47558190e-02
  2.77377833e-02 -5.50842546e-02  3.75422761e-02  1.50264010e-01
  1.22527510e-01 -2.09952258e-02  9.53000858e-02 -4.77680042e-02
  9.68367532e-02 -4.40990133e-03  5.14403731e-02  5.99268172e-03
  4.59419042e-02  5.80562241e-02  4.13634703e-02 -6.90983683e-02
 -3.48204225e-02  1.27287069e-02 -2.19359268e-02  2.05490924e-02
 -4.85531567e-03 -7.44056180e-02 -1.05319113e-01 -3.34383324e-02
  3.58749032e-02 -6.27898425e-03 -6.18683957e-02  4.78295051e-02
 -8.57359171e-02  4.91840541e-02 -1.73270665e-02 -2.98376977e-02
 -7.11302981e-02 -3.38863628e-03 -7.82497525e-02  5.89442300e-03
 -1.69869438e-02  2.10707784e-02  4.33292612e-02 -8.49027932e-02]"
"                // Previous const DATA_VERSION: u8 = 0;

/// Account allocated size
const ACCOUNT_ALLOCATION_SIZE: usize = 1024;
/// Initialized flag is 1st byte of data block
const IS_INITIALIZED: usize = 1;
/// Data version (current) is 2nd byte of data block
const DATA_VERSION_ID: usize = 1;

/// Previous content data size (before changing this is equal to current)
const PREVIOUS_VERSION_DATA_SIZE: usize = mem::size_of::<AccountContentOld>();
/// Total space occupied by previous account data
const PREVIOUS_ACCOUNT_SPACE: usize = IS_INITIALIZED + DATA_VERSION_ID + PREVIOUS_VERSION_DATA_SIZE;

/// Current content data size
const CURRENT_VERSION_DATA_SIZE: usize = mem::size_of::<AccountContentCurrent>();
/// Total usage for data only
const CURRENT_USED_SIZE: usize = IS_INITIALIZED + DATA_VERSION_ID + CURRENT_VERSION_DATA_SIZE;
/// How much of 1024 is used
const CURRENT_UNUSED_SIZE: usize = ACCOUNT_ALLOCATION_SIZE - CURRENT_USED_SIZE;
/// Current space used by header (initialized, data version and Content)
pub const ACCOUNT_STATE_SPACE: usize = CURRENT_USED_SIZE + CURRENT_UNUSED_SIZE;

/// Future data migration logic that converts prior state of data
/// to current state of data
fn conversion_logic(src: &[u8]) -> Result<ProgramAccountState, ProgramError> {
    let past = array_ref![src, 0, PREVIOUS_ACCOUNT_SPACE];
    let (initialized, _, account_space) = array_refs![
        past,
        IS_INITIALIZED,
        DATA_VERSION_ID,
        PREVIOUS_VERSION_DATA_SIZE
    ];
    // Logic to upgrade from previous version
    // GOES HERE
    let old = try_from_slice_unchecked::<AccountContentOld>(account_space).unwrap();
    // Default sets 'somevalue' to 0 and somestring to default """"
    let mut new_content = AccountContentCurrent::default();
    // We copy the existing 'somevalue', the program instructions will read/update 'somestring' without fail
    new_content.somevalue = old.somevalue;

    // Give back
    Ok(ProgramAccountState {
        is_initialized: initialized[0] != 0u8,
        data_version: DATA_VERSION,
        account_data: new_content,
    })
}
impl Sealed for ProgramAccountState {}

impl IsInitialized for ProgramAccountState {
    fn is_initialized(&self) -> bool {
        self.is_initialized
    }
}

impl Pack for ProgramAccountState {
    const LEN: usize = ACCOUNT_STATE_SPACE;

    /// Store 'state' of account to its data area
    fn pack_into_slice(&self, dst: &mut [u8]) {
        let mut bw = BufWriter::new(dst);
        self.serialize(&mut bw).unwrap();
    }

    /// Retrieve 'state' of account from account data area
    fn unpack_from_slice(src: &[u8]) -> Result<Self, ProgramError> {
        let initialized = src[0] != 0;
        // Check initialized
        if initialized {
            // Version check
            if src[1] == DATA_VERSION {
                msg!(""Processing consistent version data"");
","[ 4.28402945e-02  2.99816318e-02 -3.90412398e-02  1.79476738e-02
  1.29150692e-02 -8.99634585e-02  4.11511287e-02  6.01428151e-02
 -3.40946503e-02  4.28224802e-02  9.05575603e-03  2.20381469e-02
 -1.14468532e-02 -4.78911437e-02 -7.22930133e-02  3.46542634e-02
 -5.38973324e-02  7.52475718e-03 -3.59993428e-02 -1.69397946e-02
  4.78262156e-02 -5.09785451e-02 -2.19365023e-02 -9.05959960e-03
  8.60577598e-02  8.03761408e-02 -5.11327945e-02  4.03742269e-02
  7.48680905e-02 -7.40479752e-02  3.73960659e-02  2.49388348e-02
  1.69527065e-03  1.50700212e-02  4.38133534e-03  1.80468913e-02
 -5.94387241e-02 -6.60796613e-02  1.15661928e-02  3.13925222e-02
 -4.46983725e-02  1.33215338e-01 -3.57898399e-02  4.29926664e-02
 -1.48844451e-03  8.09577852e-02 -9.07676667e-02  4.09004763e-02
 -1.26546426e-02  7.70957349e-03  4.94046472e-02  2.99477782e-02
 -3.91766615e-02  3.38394791e-02  4.44525704e-02 -4.66825776e-02
 -6.80975243e-03  1.14997989e-02 -4.25585285e-02  1.08261764e-01
 -3.56348380e-02  3.89976352e-02  7.22124055e-02 -3.43930461e-02
 -8.92234314e-03 -5.73512446e-03  1.31582422e-02  4.89582568e-02
 -2.93705463e-02  3.50799300e-02 -6.62751049e-02  7.19844401e-02
 -7.03371838e-02  1.06196534e-02 -6.14834651e-02 -2.23304294e-02
  3.29785869e-02  3.19250375e-02 -3.83668989e-02 -9.83422697e-02
 -4.10634838e-02  2.40226439e-03  9.44334734e-03 -6.29809499e-02
  1.60201278e-03 -7.14411680e-03 -4.19420237e-03 -6.57305308e-03
  1.27118919e-02 -1.95554998e-02  1.39728878e-02  5.79264276e-02
  1.51708594e-03  4.37092260e-02  6.16995804e-02  2.09308392e-03
 -6.76652044e-02  3.63598764e-02  2.19677128e-02  4.49222773e-02
  2.95727346e-02  8.17202553e-02  2.47797165e-02  5.92007115e-02
  2.60860305e-02 -9.02427807e-02  4.08102088e-02  7.14233071e-02
 -7.11100698e-02  4.01054472e-02  5.80760501e-02  8.69931579e-02
 -3.06744259e-02 -6.69256132e-03  1.05892159e-01 -5.29230982e-02
  4.89821797e-03 -1.24091068e-02  3.91970463e-02  6.05564229e-02
  1.25129521e-01 -1.97603516e-02 -4.38474156e-02 -3.40607278e-02
 -9.71627608e-02 -5.17151766e-02  2.64034532e-02  5.94385155e-33
  9.48887039e-03 -8.90747011e-02 -2.59939432e-02  9.49731171e-02
 -4.59353738e-02  4.69023474e-02  1.67334601e-02  7.98593685e-02
 -1.14559762e-01  1.91845987e-02  1.71270557e-02  5.63214868e-02
 -8.80277753e-02 -2.07648540e-04  2.16106251e-02 -8.82587060e-02
  2.17990391e-02  6.30638003e-02  9.60763171e-03 -2.67584398e-02
  2.85265148e-02  3.19269188e-02  7.08981929e-03 -2.35085953e-02
  7.91848898e-02 -7.52422214e-02 -1.96911953e-02 -2.39004772e-02
 -1.08536817e-01 -4.32457104e-02 -4.16371925e-03 -1.55071616e-02
 -4.69974242e-02 -6.88434020e-03  6.50630295e-02  1.05407480e-02
  2.76371315e-02 -2.39900034e-02 -2.44378834e-03 -3.73735018e-02
  9.55204740e-02  7.14218915e-02  5.07588275e-02 -1.08988181e-01
 -1.12752371e-01 -6.64235950e-02  1.97569304e-03 -4.23246101e-02
 -2.74446830e-02 -3.83056886e-02  1.11423813e-01  4.39712368e-02
 -7.87336603e-02 -7.07640452e-03 -9.02685896e-03 -4.33923677e-02
 -5.13299508e-03 -5.89628927e-02  3.14244218e-02  8.94040763e-02
 -2.54247393e-02 -1.57823376e-02 -1.09345024e-03  6.79667145e-02
  2.08152626e-02  2.68146526e-02 -4.18035500e-03 -1.74451321e-02
  3.37530747e-02  1.38899852e-02 -4.00365777e-02 -9.99308676e-02
  2.35758349e-02  1.69268195e-02  6.47323625e-03 -5.40626533e-02
 -1.52676571e-02 -1.13959843e-02 -1.17926970e-01 -5.98377883e-02
  1.99851580e-02 -3.57418768e-02 -1.63042583e-02 -1.19243953e-02
 -6.20300043e-03 -1.40382312e-02  7.93611929e-02 -2.89716702e-02
 -4.00305167e-02  7.88775273e-03 -5.35386056e-02 -7.19841197e-02
  8.95630568e-02 -9.47601572e-02 -5.08003831e-02 -6.15484838e-33
 -3.82282995e-02  3.42614539e-02  4.33524698e-02  2.32172385e-02
 -3.87770906e-02  1.34895574e-02  4.10688557e-02  2.76289135e-02
 -3.90934870e-02 -1.43273091e-02 -2.60766651e-02  1.65277049e-02
  4.78438661e-02 -2.13364642e-02 -7.61311874e-03  4.53902818e-02
 -4.85781245e-02 -4.87410985e-02  1.55993896e-02  7.51726853e-04
 -3.79245803e-02  6.56797960e-02  1.45068571e-01  4.56226664e-03
 -4.80222926e-02  2.10857186e-02 -4.69400845e-02  3.49244438e-02
  3.14608738e-02 -1.02138408e-01 -5.23096994e-02 -5.24368063e-02
 -2.94738710e-02  8.66857078e-03 -1.92003138e-02 -1.42756268e-01
  2.90909577e-02  6.97545558e-02  2.87226830e-02  4.77932654e-02
  6.45027235e-02  1.14352349e-03 -1.70501098e-02 -3.22091877e-02
  2.37658713e-03  3.17105539e-02  2.39418745e-02  4.28119339e-02
  3.34535795e-03 -4.98537906e-02 -1.73792429e-03 -2.43753642e-02
 -9.47711244e-03  6.64024474e-03 -6.55333046e-03  1.26753058e-02
  2.96770856e-02 -7.37591460e-03  4.00124639e-02 -5.15789203e-02
  7.06810923e-03 -6.65408149e-02  5.53969592e-02 -8.44669789e-02
  2.74813175e-03  5.93307987e-03 -5.97553812e-02 -2.36674193e-02
 -6.62162006e-02  1.01669401e-01 -3.40755633e-03  9.01727825e-02
  1.04719028e-02 -3.08299232e-02 -8.63758440e-04 -6.38084020e-03
  1.21613797e-02 -6.27801567e-02  7.16218129e-02  3.12430896e-02
 -1.16409823e-01  6.68122992e-02 -1.21205151e-02 -1.33883590e-02
 -1.37699097e-02  2.66726464e-02 -6.60034548e-03 -3.43606621e-02
 -2.58558039e-02  1.12780929e-03 -9.43949148e-02  9.89990402e-03
 -5.11869118e-02 -9.37647000e-02 -3.85460854e-02 -4.83686584e-08
 -3.95914353e-02 -9.92637500e-02  1.28072780e-02  1.08370990e-01
  9.88611057e-02 -3.16339917e-02 -2.02132501e-02  6.35815039e-02
  7.06061209e-03 -4.62347642e-02  9.73484218e-02  6.80818111e-02
 -1.62108038e-02 -8.48043188e-02 -8.37402642e-02 -5.27263433e-03
 -7.06039544e-04 -1.20926954e-01 -2.90840049e-03  1.14992307e-02
 -3.62065136e-02  7.83383176e-02 -2.14273073e-02  3.20724696e-02
  5.22468798e-02 -3.15965563e-02  7.99244121e-02  8.95510241e-02
  3.16346139e-02 -2.67406404e-02  9.03928429e-02  1.88973621e-02
  4.28184196e-02 -5.04343212e-02  1.01924930e-02 -6.45810068e-02
 -4.01902385e-03  5.77430949e-02  3.52026634e-02  1.63783431e-02
  3.53706740e-02  2.15745009e-02  7.13515282e-02  8.61797631e-02
 -3.19061056e-02 -2.99485438e-02 -1.20905802e-01 -6.56950660e-03
  1.33296661e-02 -7.95325115e-02  4.50201146e-02 -2.92114168e-02
 -2.25093379e-03  1.01711206e-01 -8.11493490e-04 -7.22051933e-02
 -4.36032787e-02  5.06033860e-02 -2.82291025e-02  5.38225695e-02
  8.76085833e-03 -1.33524975e-02 -4.71641608e-02 -6.97368011e-03]"
"               Ok(try_from_slice_unchecked::<ProgramAccountState>(src).unwrap())
            } else {
                msg!(""Processing backlevel data"");
                conversion_logic(src)
            }
        } else {
            msg!(""Processing pre-initialized data"");
            Ok(ProgramAccountState {
                is_initialized: false,
                data_version: DATA_VERSION,
                account_data: AccountContentCurrent::default(),
            })
        }
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148/// Current state (DATA_VERSION 1). If version changes occur, this
/// should be copied to another (see AccountContentOld below)
/// We've added a new field: 'somestring'
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentCurrent {
    pub somevalue: u64,
    pub somestring: String,
}

/// Old content state (DATA_VERSION 0).
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentOld {
    pub somevalue: u64,
}

/// Maintains account data
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    data_version: u8,
    account_data: AccountContentCurrent,
}
12345678910111213141516171819202122Line(s)Note6We've added Solana's solana_program::borsh::try_from_slice_unchecked to simplify reading subsets of data from the larger data block13-26Here we've preserved the old content structure, AccountContentOld line 24, before extending the AccountContentCurrent starting in line 17.60We bump the DATA_VERSION constant71We now have a 'previous' version and we want to know it's size86The Coup de grâce is adding the plumbing to upgrade the previous content state to the new (current) content stateWe then update our instructions, to add a new one for updating somestring, and processor for handling the new instruction. Note that the 'upgrading' the data structure is encapsulated behind pack/unpackInstructionProcessor//! instruction Contains the main VersionProgramInstruction enum

use {
    crate::error::DataVersionError,
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::{borsh::try_from_slice_unchecked, msg, program_error::ProgramError},
};

#[derive(BorshDeserialize, BorshSerialize, Debug, PartialEq)]
/// All custom program instructions
pub enum VersionProgramInstruction {
    InitializeAccount,
    SetU64Value(u64),
    SetString(String), // Added with data version change
    FailInstruction,
}

impl VersionProgramInstruction {
    /// Unpack inbound buffer to associated Instruction
    /// The expected format for input is a Borsh serialized vector
    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {
        let payload = try_from_slice_unchecked::<VersionProgramInstruction>(input).unwrap();
        // let payload = VersionProgramInstruction::try_from_slice(input).unwrap();
        match payload {
            VersionProgramInstruction::InitializeAccount => Ok(payload),
     ","[-3.73325124e-02 -2.08557118e-02 -3.57929729e-02 -5.45963738e-03
  1.20696137e-02 -4.77278382e-02  3.01568024e-03  1.80184841e-02
 -4.66697812e-02  2.05599442e-02  3.38428803e-02 -7.18666837e-02
  5.17102145e-03 -7.79493824e-02  1.23228757e-02  2.68929941e-03
 -2.43441444e-02 -4.55247611e-02  1.91710852e-02 -1.04798870e-02
 -5.64899994e-03  6.70846030e-02 -3.93632762e-02  8.79210681e-02
  9.14600194e-02  8.75741150e-03 -3.59828249e-02 -2.13333443e-02
  3.90572869e-03 -2.11926587e-02  2.66384631e-02  7.17644300e-03
 -3.00821792e-02 -3.27984686e-03  9.39922407e-02  8.42110068e-02
 -2.21652929e-02 -4.30147611e-02  3.50494720e-02 -1.28443306e-02
 -5.64606627e-03  1.15629437e-03 -8.69842172e-02  2.80814227e-02
 -1.06282700e-02 -4.34126258e-02 -3.63075803e-03  3.63982879e-02
 -3.73897403e-02  5.88110164e-02  4.01239097e-03  7.21886987e-03
 -7.19273016e-02  1.95559524e-02  6.63551912e-02  9.75650996e-02
 -2.00231578e-02  6.63746968e-02 -5.59329651e-02  6.03231676e-02
 -8.78238901e-02 -4.52963114e-02 -2.93379114e-03 -6.83380291e-02
 -1.12693338e-02  4.86926734e-02 -1.51670855e-02  2.24326900e-03
  6.26314208e-02 -1.81706809e-02 -6.35037497e-02  4.69467454e-02
 -6.55310601e-02  3.93046588e-02 -5.77852987e-02  4.85777557e-02
 -2.25108936e-02  2.41169408e-02 -3.92495021e-02 -1.32423595e-01
 -2.76461150e-02 -6.12045415e-02 -1.59162413e-02  1.66862961e-02
  4.49744286e-04 -1.24222524e-02  1.61381345e-02 -5.07650338e-02
  4.26784530e-02  9.94616747e-03  3.16177756e-02  2.26574717e-03
  7.74912164e-02  1.70586519e-02  5.30176274e-02  4.49671671e-02
 -6.29988760e-02  3.85297425e-02  1.02061875e-01  6.66947439e-02
 -2.20743865e-02  2.79267561e-02  6.71520978e-02  6.93545416e-02
  2.53776796e-02 -8.49074349e-02  7.74527863e-02  1.97891183e-02
 -1.27194688e-01 -8.20976030e-03  5.51712401e-02  1.30365610e-01
 -3.65505111e-03 -4.48327363e-02  1.46451341e-02 -5.43517619e-02
  3.67523357e-02 -1.61306281e-02 -1.13533027e-01  2.38769744e-02
  8.69240835e-02  4.71478474e-04  3.74547541e-02  4.12130095e-02
 -7.77049959e-02 -5.07651642e-02  6.78801686e-02  6.16642369e-33
  5.72754592e-02 -7.78194517e-02  1.45128816e-02  1.05046539e-03
  3.96612659e-03  3.57068330e-02  2.58285757e-02  3.85188963e-04
 -8.67261067e-02  1.55746844e-02 -5.27595403e-03 -1.39240064e-02
 -4.85344306e-02 -3.97059992e-02  4.05129232e-02 -1.02200128e-01
 -7.27892015e-03  6.04495294e-02  7.99103007e-02  2.41925903e-02
  7.85290599e-02 -2.43251980e-03 -8.24129060e-02 -3.97809036e-02
 -2.70663016e-03  3.10812332e-02 -8.22046697e-02  1.90239605e-02
 -8.02337080e-02 -1.25327455e-02  1.41198682e-02 -1.85368825e-02
  3.73101160e-02  1.13416230e-02  2.15756539e-02 -3.05810329e-02
  7.23128486e-03 -2.43042540e-02 -1.13507044e-02 -3.75759490e-02
  1.16136067e-01  4.66701761e-02  3.91504094e-02 -2.48278957e-03
 -3.47579308e-02 -1.16704941e-01 -7.24689886e-02  2.26453990e-02
  1.73051804e-02 -7.25710541e-02  1.21438511e-01  5.86414188e-02
 -3.99386697e-02 -5.41481897e-02 -3.73498090e-02 -1.12586692e-01
 -3.57078835e-02 -3.31072742e-03  5.66270538e-02  2.18930561e-02
  4.64802273e-02  4.68333662e-02 -5.91637045e-02  1.23028755e-02
  6.30099420e-03  4.23621759e-02  6.30827202e-03 -4.59419973e-02
 -1.38890194e-02 -1.50669254e-02 -1.82790346e-02  7.82232638e-03
 -6.08024187e-02  2.65567154e-02  2.35744286e-02 -1.56519171e-02
 -3.39048803e-02 -9.42060910e-03 -4.60282294e-03 -7.63347596e-02
 -1.87643003e-02  3.80008435e-03 -9.97900218e-02 -7.82038551e-03
 -5.64728910e-03  7.58286044e-02 -1.97488498e-02 -3.26079279e-02
 -6.88321963e-02  1.13939149e-02  5.06263301e-02 -9.63988230e-02
  2.46421751e-02 -8.99617895e-02  5.98242097e-02 -6.12168952e-33
  9.04316530e-02 -4.36026566e-02  5.46692424e-02 -2.16307398e-02
 -1.75801441e-02 -2.90811062e-02  6.54090121e-02  3.79740223e-02
 -3.18299271e-02 -1.60474405e-02 -2.48000901e-02  4.54498222e-03
  1.13511169e-02 -9.59541183e-03 -6.23883680e-04  1.68605521e-02
 -5.00410981e-02 -5.56919686e-02 -3.17895897e-02  3.80998813e-02
  3.28369415e-03  1.04095429e-01  5.43681793e-02  7.52418861e-02
  2.84588756e-03 -3.28643876e-03 -1.31827211e-02  5.58611043e-02
  5.96816018e-02 -7.78348967e-02 -1.48937097e-02 -1.95878372e-02
 -1.57922916e-02 -5.56624681e-03 -1.73922423e-02 -2.54959594e-02
  1.65288057e-02  4.72132452e-02 -9.70669731e-04  7.83422068e-02
  4.61494252e-02 -3.54629830e-02 -1.00813404e-01 -8.84648133e-03
  4.72933911e-02  5.48219495e-02  6.80741742e-02  7.96709955e-02
 -3.46197165e-03 -4.47214767e-02  1.26363104e-02  7.67528894e-04
  3.93841304e-02  2.62344796e-02  1.51062952e-02 -3.12424675e-02
  8.73689950e-02 -8.55725110e-02 -6.22771420e-02 -9.04876962e-02
 -2.63728984e-02 -3.72990184e-02  5.54767512e-02 -3.77633609e-02
  7.55473971e-02 -3.34377843e-03 -3.16333696e-02  3.16877523e-03
  4.57108766e-03 -6.34563435e-03 -1.02502219e-02 -4.01685387e-02
 -2.17159018e-02 -6.12551048e-02  4.94830869e-02 -2.34168414e-02
 -5.76854385e-02 -1.92827647e-04  3.59162614e-02  6.90948144e-02
 -1.18038915e-01  3.37863825e-02  2.81733293e-02  2.83906311e-02
  1.55412192e-02 -7.44305551e-02  2.21415311e-02  7.06378464e-03
 -1.04947966e-02  3.68253747e-03 -9.15392861e-02 -7.26389885e-02
 -2.89369132e-02 -7.98284821e-03 -4.44883341e-03 -5.60986066e-08
 -9.77219343e-02 -8.74520838e-03 -4.14502770e-02  1.44025072e-01
  8.66643637e-02  4.90692966e-02 -1.29128113e-01 -5.06598242e-02
  3.26649360e-02 -1.12482771e-01 -4.35347594e-02  7.79701173e-02
 -1.10288588e-02 -6.57925904e-02 -2.70885453e-02 -3.11522186e-02
  3.66538242e-02 -1.13933058e-02 -5.84887050e-04  9.13678948e-03
 -6.15153424e-02  3.33900191e-02  1.43743865e-02 -2.17542294e-02
  7.22755417e-02  1.41027616e-02  1.28350407e-02  1.21292360e-01
  9.42444354e-02 -1.38532706e-02  1.30603731e-01 -2.80278437e-02
  5.80452010e-02  3.05466410e-02  6.81003230e-03 -1.07761864e-02
  8.06655511e-02  8.08392242e-02  3.36959139e-02 -2.52756737e-02
  7.41682276e-02  4.85940091e-02 -1.17196701e-01  6.67986646e-02
 -6.18805923e-02 -4.52379324e-02 -7.90448040e-02  4.40808311e-02
  8.81007761e-02 -3.49292420e-02 -2.24665366e-02 -1.50162550e-02
  3.11339321e-03  6.69479296e-02 -6.83558919e-03 -4.92398664e-02
  3.63651775e-02 -2.17662193e-02 -7.37448083e-03  7.82504529e-02
  5.83504178e-02 -2.22062003e-02  1.46865929e-02 -7.48176221e-03]"
"      VersionProgramInstruction::SetU64Value(_) => Ok(payload),
            VersionProgramInstruction::SetString(_) => Ok(payload), // Added with data version change
            _ => Err(DataVersionError::InvalidInstruction.into()),
        }
    }
}
12345678910111213141516171819202122232425262728293031//! Resolve instruction and execute

use crate::{
    account_state::ProgramAccountState, error::DataVersionError,
    instruction::VersionProgramInstruction,
};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack},
    pubkey::Pubkey,
};

/// Checks each tracking account to confirm it is owned by our program
/// This function assumes that the program account is always the last
/// in the array
fn check_account_ownership(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {
    // Accounts must be owned by the program.
    for account in accounts.iter().take(accounts.len() - 1) {
        if account.owner != program_id {
            msg!(
                ""Fail: The tracking account owner is {} and it should be {}."",
                account.owner,
                program_id
            );
            return Err(ProgramError::IncorrectProgramId);
        }
    }
    Ok(())
}

/// Initialize the programs account, which is the first in accounts
fn initialize_account(accounts: &[AccountInfo]) -> ProgramResult {
    msg!(""Initialize account"");
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Just using unpack will check to see if initialized and will
    // fail if not
    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;
    // Where this is a logic error in trying to initialize the same account more than once
    if account_state.is_initialized() {
        return Err(DataVersionError::AlreadyInitializedState.into());
    } else {
        account_state.set_initialized();
        account_state.content_mut().somevalue = 1;
    }
    msg!(""Account Initialized"");
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}

/// Sets the u64 in the content structure
fn set_u64_value(accounts: &[AccountInfo], value: u64) -> ProgramResult {
    msg!(""Set new value {}"", value);
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    account_state.content_mut().somevalue = value;
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}

/// Sets the string in the content structure
fn set_string_value(accounts: &[AccountInfo], value: String) -> ProgramResult {
  ","[-5.64649440e-02  5.95766939e-02 -6.60285652e-02 -5.24534984e-03
 -2.26814859e-02 -6.65327758e-02  1.40998634e-02  1.96480602e-02
 -2.87473388e-02  5.96857555e-02 -2.10167263e-02 -9.47256386e-02
 -3.27235796e-02 -5.47116958e-02  4.16469574e-02  2.31399629e-02
 -1.13481700e-01  2.11032061e-03 -2.45394744e-02 -8.01399467e-04
  3.11027318e-02 -3.08832042e-02 -1.92460623e-02  4.55128923e-02
 -1.33095300e-02 -2.58273222e-02 -2.25683115e-02  2.29101162e-03
  1.00725924e-03  5.01075871e-02  6.67018369e-02  4.26468626e-03
 -1.88188720e-02  6.81409016e-02  8.46619979e-02  1.21185750e-01
 -2.24704556e-02 -1.59921516e-02 -3.02439439e-03 -7.31385797e-02
  2.59328680e-03  1.09365478e-01 -7.58753344e-02 -2.48832814e-02
  3.36494856e-02 -8.60618427e-02 -2.53952611e-02 -3.99534479e-02
 -2.69575212e-02  1.51312696e-02 -1.42539050e-02 -1.16815837e-03
  2.88483389e-02  1.33240260e-02  3.93985026e-02  2.17163432e-02
  1.25225205e-02  4.32859287e-02  2.11131070e-02  1.69299003e-02
 -1.58612523e-03 -3.15258242e-02  3.31359059e-02 -1.20056860e-01
 -7.17748627e-02 -3.66026200e-02 -6.38241507e-03 -1.86951961e-02
  4.02287282e-02  2.87252082e-03 -3.73233482e-02 -4.72453013e-02
 -3.02885212e-02  1.57808382e-02 -7.17705712e-02  4.96434532e-02
  2.46776864e-02  9.94518399e-03 -3.71808442e-03 -4.92936820e-02
  5.22177247e-03 -2.74369512e-02  1.27704823e-02  8.90817568e-02
 -3.65213715e-02 -2.04475243e-02 -2.23037209e-02 -5.45110032e-02
  1.02540702e-01  4.54669446e-02 -3.15706944e-03 -4.67080064e-02
  4.68893275e-02 -2.86303647e-02  1.33664742e-01  5.75048216e-02
  3.31946537e-02  6.76987991e-02 -2.82203816e-02  9.93537977e-02
  2.42206603e-02 -3.92577238e-02 -5.34446491e-03 -7.37789160e-05
  4.93422784e-02  4.48265579e-03  8.89092535e-02 -5.01521630e-03
 -9.53759700e-02 -2.19021458e-03  2.77819950e-02  5.37935682e-02
 -1.18943863e-02 -1.05192726e-02  6.79360032e-02  3.09245056e-03
 -3.86596099e-02  6.78724498e-02 -5.06106615e-02  4.59051356e-02
  1.14145145e-01 -2.43789656e-03  8.50603878e-02  3.65733122e-03
 -6.40003905e-02 -4.31458950e-02  7.38692610e-03  7.89326457e-33
  1.63920801e-02 -2.80907415e-02 -5.94523102e-02  2.09638458e-02
  5.70566803e-02 -3.19004543e-02  1.51755624e-02  5.34505732e-02
 -1.36364162e-01  4.35712524e-02 -1.47437975e-02  6.42883591e-03
 -3.28430198e-02 -9.32425037e-02  1.14176804e-02 -4.08968143e-02
 -2.05844063e-02  5.04470095e-02  5.50241768e-02  2.61904276e-03
  4.63944674e-02 -6.79767355e-02 -3.38680036e-02 -4.01749089e-02
  7.97301233e-02 -3.26256864e-02 -7.18257651e-02 -6.60852436e-03
  1.98352449e-02 -6.86040241e-03  1.53073603e-02  7.26529211e-03
  8.70797783e-03  3.74161638e-02  2.76065152e-02 -6.10101260e-02
 -2.91679464e-02 -3.77136320e-02 -8.05426016e-02 -3.46026085e-02
  1.32015690e-01  6.79175556e-03  3.62601219e-04 -3.10617909e-02
  2.29632463e-02 -4.51939553e-02 -5.33897430e-02  8.22984651e-02
  7.51922727e-02 -1.17746647e-02 -2.55755577e-02  4.42863740e-02
 -1.13243476e-01 -7.60315061e-02  1.67029817e-02 -1.05029605e-01
 -1.14684189e-02 -6.10331725e-03  5.86977713e-02 -4.61206473e-02
  2.33155191e-02  2.63800677e-02 -1.44960741e-02  2.12882250e-03
  4.44673821e-02 -1.17907301e-02 -4.60303240e-02  4.62124869e-02
 -1.81448960e-03  3.63662839e-02 -6.15701675e-02  7.07386285e-02
 -6.30560741e-02  5.41897081e-02  2.51868740e-02 -9.34598520e-02
  6.32416457e-02  6.68351874e-02 -7.56709278e-02 -4.55635861e-02
 -8.52570287e-04 -8.26091245e-02 -6.58663511e-02  9.83476490e-02
 -8.65317583e-02 -7.89033342e-03 -1.22872842e-02  1.28724603e-02
 -4.27507646e-02 -1.66030359e-02  6.22025542e-02 -5.99636137e-02
 -5.25630601e-02 -4.36291583e-02 -7.68924952e-02 -8.17268766e-33
  3.95313576e-02 -2.62843594e-02 -1.87926833e-02 -1.03290193e-01
 -1.84548199e-02 -8.81632045e-02  1.44940987e-02 -1.85371302e-02
 -3.52570228e-02 -2.94529274e-02 -2.88613867e-02 -4.08129543e-02
  1.05730686e-02  8.79783742e-03 -4.24348377e-03  6.65607080e-02
 -5.38433529e-02 -8.75841156e-02 -5.06657129e-03 -4.93409820e-02
 -5.22478148e-02  1.10223144e-01  1.87435132e-02  4.81110886e-02
  1.22219929e-02 -4.59688157e-02  2.32065469e-02  6.84464350e-02
  3.23248394e-02 -2.30177902e-02  7.61422664e-02 -6.16708547e-02
 -5.72979897e-02  5.42009547e-02 -4.55811322e-02 -1.01004004e-01
  9.32467207e-02 -1.27505586e-02 -7.09728077e-02  7.45394304e-02
  9.60632190e-02  2.13268381e-02 -7.58066028e-02  5.74163347e-02
 -1.29073262e-02  3.15689817e-02  1.04422979e-01  4.81621437e-02
 -2.72750366e-03 -4.68963385e-02  6.39158636e-02 -7.87714720e-02
 -8.36135633e-03  1.18797785e-03  1.59909688e-02  2.15218980e-02
  1.66764647e-01  2.05994993e-02 -2.21121628e-02 -4.98157144e-02
  8.71801749e-03 -5.41575588e-02  7.46050179e-02  2.31417567e-02
  4.18819748e-02 -2.84711737e-02 -7.10052326e-02  5.27973473e-02
 -2.07265047e-03  3.05989236e-02  7.22602606e-02 -5.25694042e-02
 -6.07300699e-02 -3.55435978e-03  1.04471529e-02  2.56959759e-02
 -2.52610329e-03 -3.24311154e-03 -9.39300563e-03  3.31553482e-02
 -3.04746032e-02 -2.19446188e-03  6.81184083e-02  2.98912264e-02
 -1.35055650e-02 -5.24713323e-02  6.49788827e-02  7.00057596e-02
 -6.18470721e-02  3.01243253e-02 -1.97809320e-02 -2.87917368e-02
 -6.50599599e-02  2.09211750e-04 -1.93218272e-02 -6.44902940e-08
 -1.09177947e-01  6.87893620e-03 -8.02154094e-02  9.06633511e-02
  9.19216126e-02  8.29479545e-02 -1.51565019e-02 -5.47160842e-02
 -3.94477695e-02 -3.92207168e-02 -7.14760125e-02  4.61809449e-02
 -7.49169961e-02 -4.60190512e-02  1.75693855e-02 -6.02528229e-02
 -3.85629758e-02  6.65590316e-02 -1.37367724e-02 -7.78897014e-03
 -5.09461425e-02 -2.29597948e-02  1.86799280e-02 -4.48867045e-02
 -2.62345094e-02 -9.23836138e-03  1.48060396e-02  9.77067277e-02
  3.73988412e-02  7.90526159e-03  1.10793253e-03  1.19505124e-03
  1.07503869e-01  2.57809497e-02  1.20620849e-02  5.04677966e-02
 -7.67995929e-03  2.75782850e-02  7.90940374e-02  1.70201343e-02
 -2.48918589e-02  8.78181532e-02 -4.05450687e-02  5.65652922e-02
 -1.93509366e-02 -4.85216156e-02 -4.53104228e-02 -1.40893962e-02
  8.84663314e-02 -2.90313791e-02  9.20284539e-03 -1.66860055e-02
  7.28787621e-04  1.31748497e-01  7.81535264e-03  6.60537183e-03
 -5.55567369e-02  2.82364734e-03 -1.83409993e-02  3.97491045e-02
  5.65373525e-02  3.46815288e-02  2.77406201e-02 -6.65309886e-03]"
" msg!(""Set new string {}"", value);
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    account_state.content_mut().somestring = value;
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}
/// Main processing entry point dispatches to specific
/// instruction handlers
pub fn process(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!(""Received process request 0.2.0"");
    // Check the account for program relationship
    if let Err(error) = check_account_ownership(program_id, accounts) {
        return Err(error);
    };
    // Unpack the inbound data, mapping instruction to appropriate structure
    msg!(""Attempting to unpack"");
    let instruction = VersionProgramInstruction::unpack(instruction_data)?;
    match instruction {
        VersionProgramInstruction::InitializeAccount => initialize_account(accounts),
        VersionProgramInstruction::SetU64Value(value) => set_u64_value(accounts, value),
        VersionProgramInstruction::SetString(value) => set_string_value(accounts, value),
        _ => {
            msg!(""Received unknown instruction"");
            Err(DataVersionError::InvalidInstruction.into())
        }
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102After building and submitting an instruction: VersionProgramInstruction::SetString(String) we now have the following 'upgraded' account data layout# ResourcesBorsh Specificationopen in new windowSolana try_from_slice_uncheckedopen in new windowReference Implementationopen in new window # Serializing DataWhen we talk about serialization we mean both serializing data as well as deserialization of data.Serialization comes into play at a few points along Solana program and program accounts lifecycle:Serializing instruction data on to clientDeserializing instruction data on the programSerializing Account data on the programDeserializing Account Data on the clientIt is important that the above actions are all supported by the same serialization approach. The included snippets are demonstrating serialization using Borsh.The samples in the remainder of this document are excerpts as taken from the Solana CLI Program Template# Setting up for Borsh SerializationLibraries for Borsh must be setup for the Rust program, Rust client, Node and/or Python client.ProgramRust ClientNode ClientPython Client[package]
name = ""solana-cli-template-program-bpf""
version = ""0.1.0""
edition = ""2018""
license = ""WTFPL""

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
no-entrypoint = []

[dependencies]
borsh = ""0.9.0""
lazy_static = ""1.4.0""
num-derive = ""0.3""
num_enum = ""0.5.1""
num-integer = ""0.1.44""
num-traits = ""0.2""
sol-template-shared = {path = ""../shared""}
solana-program = ""1.8.2""
thiserror = ""1.0""

[dev-dependencies]
solana-program-test = ""1.8.2""
solana-sdk = ""1.8.2""

[lib]
crate-type = [""cdylib"", ""lib""]
12345678910111213141516171819202122232425262728[package]
name = ""cli-program-template""
version = ""0.1.5""
edition = ""2018""
license = ""WTFPL""
publish = false

[dependencies]
borsh = ""0.9.0""
clap = ""2.33.3""
lazy_static = ""1.4.0""
serde = { version = ""1.0.125"", features = [""derive""] }
serde_yaml = ""0.8.17""
sol-template-shared = {path = ""shared""}
solana-clap-utils = ""1.8.2""
solana-cli-config = ""1.8.2""
solana-client = ""1.8.2""
solana-logger = ""1.8.2""
solana-remote-wallet = ""1.8.2""
solana-sdk = ""1.8.2""
tokio = { version = ""1"", features = [""full""] }

[workspace]
members = [
    ""program"",
    ""shared"",
]
[dev-dependencies]
lazy_static = ""1.4.0""
solana-validator = ""1.8.2""
solana-streamer = ""1.8.2""
12345678910111213141516171819202122232425262728293031{
  ""name"": ""ts-program-template"",
  ""version"": ""0.1.0"",
  ""description"": ""Sample TS App"",
  ""main"": ""client/nmain.ts"",
  ""author"": """",
  ""keywords"": [],
  ""workspace"":","[-2.96081528e-02  1.61709338e-02 -6.19338006e-02 -2.26870626e-02
 -8.10403749e-02 -2.68891137e-02  6.22390434e-02  1.06368735e-01
  9.23458114e-03 -5.51218214e-03 -2.54357178e-02 -5.85430413e-02
 -1.00250682e-02 -2.15019453e-02  4.57418896e-02  1.64200440e-02
 -3.69828045e-02 -5.70020936e-02 -2.35075615e-02 -2.60424260e-02
  7.80503750e-02  8.51828791e-03  2.05586199e-02  4.92058806e-02
 -2.27329042e-02 -2.84552835e-02 -3.25411633e-02  2.99750548e-03
  4.50119935e-02 -2.22614352e-02  7.59232268e-02 -2.18106732e-02
 -2.82125697e-02  6.22481816e-02  5.85963503e-02  1.00094244e-01
 -1.84746776e-02 -1.51573852e-01  1.70942117e-02 -6.25939295e-02
 -3.38680260e-02  5.33346049e-02 -9.01691988e-02  6.92962483e-02
  2.98703592e-02  1.45308478e-02 -4.50207889e-02 -1.70388166e-02
 -3.96932960e-02  5.24266250e-02 -8.73181783e-03  2.80834734e-02
 -4.74120192e-02 -1.38607146e-02  5.47621623e-02  8.52733627e-02
  5.45320138e-02 -1.41259832e-02  1.48634976e-02  9.07963589e-02
 -7.49887004e-02 -1.18911080e-02  2.36395057e-02 -1.47202704e-02
 -1.33396247e-02  5.79812676e-02 -1.72349606e-02 -1.29863108e-02
  1.67053938e-02 -7.01272264e-02 -3.67833152e-02 -1.36775349e-03
 -7.82499090e-02  1.46764247e-02 -8.70939046e-02 -2.09778640e-02
 -4.80804071e-02  9.60058533e-03 -8.74533132e-02 -6.72589913e-02
 -1.66261755e-02 -1.23325561e-03  8.66519660e-03  5.71705401e-02
  6.41698912e-02  7.33495876e-02 -1.43754110e-02 -1.25235748e-02
  7.91300610e-02  9.47110057e-02 -3.73051129e-02 -3.46095227e-02
 -1.90995410e-02  3.87138389e-02  9.92950350e-02  9.61487591e-02
 -1.09032057e-02 -2.04466302e-02 -6.06005937e-02  3.49996313e-02
 -5.60922287e-02  3.88581939e-02  6.32845610e-02  3.31603289e-02
  3.89119685e-02 -2.95625348e-02  6.68842942e-02 -3.28354463e-02
 -1.04256988e-01 -5.83851039e-02 -1.42156463e-02  8.69291276e-02
  8.34699254e-03  4.18378338e-02 -1.75243691e-02  1.84682030e-02
 -2.04279423e-02  1.44692101e-02  1.05799467e-03  9.23502818e-02
  7.25620985e-02  1.45840021e-02 -7.81277716e-02  1.46745518e-02
 -1.02817453e-01 -6.87250718e-02  4.07173708e-02  3.67648862e-33
 -2.30405498e-02 -5.63915931e-02 -4.79971431e-02  1.60229038e-02
 -2.41319090e-02 -9.39068012e-03  1.30223250e-02  3.42063159e-02
 -7.57425055e-02  3.81789170e-03  6.70487387e-03 -5.37073649e-02
 -2.79275049e-02 -3.06615736e-02  4.91288975e-02 -9.88739803e-02
  6.50433898e-02  4.98066172e-02  8.38193074e-02  3.66186313e-02
  8.80901814e-02  1.65264625e-02 -8.01846683e-02 -4.49835025e-02
  5.59793673e-02  4.39435430e-02 -8.86749104e-02  8.18022061e-03
 -1.48175545e-02 -2.29524579e-02  5.04398532e-02 -3.14017795e-02
 -1.33181354e-02  1.19450642e-02  6.85609803e-02 -9.18317512e-02
  2.69257072e-02  4.87849973e-02 -3.71240638e-02 -2.18853801e-02
  1.01991661e-01 -6.30776025e-03 -1.77680068e-02  3.62612270e-02
 -4.21794169e-02 -7.47006312e-02 -5.43775000e-02 -4.14115489e-02
  3.57770957e-02  7.05333753e-03  1.70866102e-02  7.54245222e-02
 -5.00523001e-02 -5.00702262e-02  1.46877242e-03 -8.14389959e-02
 -1.43348137e-02 -7.83620030e-02 -2.65582502e-02  4.71791206e-03
 -3.65479551e-02  4.84685414e-02 -1.46610010e-02  1.78110413e-02
  2.06678491e-02 -5.47548523e-03 -4.14920710e-02 -4.68946658e-02
  7.02765062e-02 -3.78676457e-03 -9.75409672e-02 -1.36861214e-02
 -1.38470549e-02 -6.87662046e-03 -2.55018622e-02 -1.28177563e-02
 -5.54573387e-02 -4.14863452e-02 -6.11693971e-02 -9.25939307e-02
  3.86026129e-02 -3.57936397e-02 -1.12333447e-01  7.26802647e-02
  2.01464295e-02  5.84023297e-02 -4.45297621e-02 -2.40697023e-02
 -1.20785292e-02  5.53625226e-02  1.81106310e-02 -1.08727053e-01
 -3.82128358e-02 -2.45807264e-02 -3.22457068e-02 -6.05976448e-33
  5.89514524e-02 -7.65926391e-02 -3.21725309e-02  8.02907161e-03
 -4.74969596e-02 -5.51367737e-03  8.35098550e-02 -7.35142455e-03
 -3.56123690e-03  4.05481495e-02 -9.21942517e-02  5.09270877e-02
  4.63007353e-02  1.59733498e-03  2.73679346e-02  6.20865747e-02
 -9.53609869e-02  1.39023867e-02  5.09502478e-02  4.51332144e-03
 -1.53205516e-02  8.62074643e-02  3.95931453e-02 -1.54716149e-02
  1.93252154e-02  5.14213406e-02  6.24386361e-03  3.79859395e-02
  3.38311121e-02 -2.83389390e-02 -2.65998039e-02 -1.74745116e-02
 -2.78777741e-02  6.27076626e-02 -8.35586432e-03 -1.23033047e-01
  9.70503390e-02  7.19275251e-02 -2.08899379e-02  2.35094242e-02
  1.69902578e-01 -7.26096658e-03 -4.39307690e-02  4.06794660e-02
  7.81189790e-03  6.37662411e-02  1.05327917e-02 -1.76615715e-02
 -2.46980380e-06 -6.01984700e-03  6.53115939e-03 -4.04441282e-02
  1.50334556e-02 -3.47431586e-03 -2.41654944e-02 -2.47873459e-03
  1.53820321e-01 -1.05703421e-01  9.79288202e-03 -5.67349643e-02
  2.64652818e-02 -5.93649223e-02  1.97482277e-02 -1.37660149e-02
  8.17760900e-02 -1.66021790e-02 -6.36452287e-02 -2.09527686e-02
  8.22101831e-02  3.95589182e-03  4.77950182e-03 -5.56639619e-02
  3.28423679e-02 -5.94369620e-02  3.63783874e-02  2.77250558e-02
 -4.08658646e-02 -9.91244167e-02 -2.60565504e-02  1.13039516e-01
 -1.74626503e-02  9.83175784e-02 -1.11658499e-02  2.10324228e-02
 -8.86770524e-03 -3.05361561e-02  2.95091048e-02  6.04108460e-02
 -3.35590579e-02 -3.40849832e-02 -2.59912349e-02  3.81480940e-02
 -3.26068774e-02 -4.95267510e-02 -7.65065551e-02 -6.24783993e-08
 -8.77360404e-02 -6.06897473e-02  2.19526477e-02  1.27903759e-01
  9.46215019e-02 -4.06412594e-02 -6.34095743e-02 -4.31801490e-02
 -5.12399187e-04 -8.32571089e-02 -5.10910377e-02  3.56581248e-02
 -5.05099744e-02 -5.04936762e-02  4.02505286e-02 -5.79798557e-02
  1.35393124e-02 -2.04071477e-02 -1.60697680e-02 -4.48254235e-02
 -1.11093409e-02  1.33573078e-02 -7.64021697e-03  1.72045603e-02
 -4.48466465e-02 -8.55814293e-03  5.60861379e-02  8.48634765e-02
  4.01024036e-02  1.50263747e-02  6.63050488e-02  2.12155674e-02
  4.06070650e-02 -9.78768524e-03 -7.99380019e-02  4.96639591e-03
  5.11121750e-02 -2.27020886e-02  7.11660385e-02 -3.40776071e-02
  5.99951521e-02  3.94508056e-02 -3.86137180e-02  3.36926691e-02
 -9.47743282e-03  7.38464715e-03 -1.86961927e-02 -2.71125175e-02
  1.13991894e-01 -3.43408622e-03 -5.05530387e-02 -2.09050532e-02
 -4.32316065e-02  8.10745656e-02 -5.46094775e-02 -1.46178994e-02
 -1.13124261e-02 -9.15595591e-02 -1.94799155e-02  4.54105698e-02
  2.90278196e-02 -1.86353829e-02  1.35745173e-02 -2.43818071e-02]"
"""client/"",
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""https: //github.com/hashblock/solana-cli-program-template""
  },
  ""homepage"": ""https: //github.com/hashblock/solana-cli-program-template"",
  ""scripts"": {
    ""test:all"": ""npm run build:client && npm run test:client"",
    ""build:client"": ""rm -rf ./.dist/client && tsc "",
    ""start"": ""node ./node_modules/.bin/mocha .dist/client/main.js"",
    ""test:client"": ""npm run start"",
    ""lint"": ""eslint --ext .ts client/* && prettier --check \""client/**/*.ts\"""",
    ""lint:fix"": ""eslint --ext .ts client/* --fix"",
    ""pretty"": ""prettier --write '{,client/**/}*.ts'""
  },
  ""devDependencies"": {
    ""@tsconfig/recommended"": ""^1.0.1"",
    ""@types/chai"": ""^4.3.0"",
    ""@types/eslint"": ""^7.28.2"",
    ""@types/eslint-plugin-prettier"": ""^3.1.0"",
    ""@types/mkdirp"": ""^1.0.2"",
    ""@types/mocha"": ""^9.0.0"",
    ""@types/prettier"": ""^2.4.1"",
    ""@typescript-eslint/eslint-plugin"": ""^5.6.0"",
    ""@typescript-eslint/parser"": ""^5.6.0"",
    ""chai"": ""^4.3.4"",
    ""eslint"": ""^8.2.0"",
    ""eslint-config-google"": ""^0.14.0"",
    ""eslint-config-prettier"": ""^8.3.0"",
    ""eslint-plugin-prettier"": ""^4.0.0"",
    ""html-webpack-plugin"": ""^5.5.0"",
    ""mocha"": ""^9.1.3"",
    ""prettier"": ""^2.4.1"",
    ""start-server-and-test"": ""^1.14.0"",
    ""ts-node"": ""^10.4.0"",
    ""typescript"": ""^4.5.2""
  },
  ""dependencies"": {
    ""@solana/web3.js"": ""^1.31.0"",
    ""borsh"": ""^0.7.0"",
    ""env"": ""^0.0.2"",
    ""fs"": ""^0.0.1-security"",
    ""mkdirp"": ""^1.0.4"",
    ""npm-check-updates"": ""^12.0.3"",
    ""sync-request"": ""^6.1.0"",
    ""update"": ""^0.4.2""
  }
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455borsh-construct==0.1.0
solana==0.20.0
12# How to serialize instruction data on the clientIf you are serializing outbound instruction data to send to a program it must mirror how the program deserializes the inbound instruction data.In this template, an instruction data block is a serialized array containing, with examples:Instruction (Variant index)Serialized KeySerialized ValueInitialize (0)not applicable for instructionnot applicable for instructionMint (1)""foo""""bar""Transfer (2)""foo""not applicable for instructionBurn (2)""foo""not applicable for instructionIn the following example we assume the program owned account has been initializedTS ClientPython ClientRust Client// Include borsh functionality

import { serialize, deserialize, deserializeUnchecked } from ""borsh"";
import { Buffer } from ""buffer"";

// Get Solana
import {
  Keypair,
  Connection,
  PublicKey,
  Transaction,
  TransactionInstruction,
  sendAndConfirmTransaction,
} from ""@solana/web3.js"";

// Flexible class that takes properties and imbues them
// to the object instance
class Assignable {
  constructor(properties) {
    Object.keys(properties).map((key) => {
      return (this[key] = properties[key]);
    });
  }
}

// Our instruction payload vocabulary
class Payload extends Assignable {}

// Borsh needs a schema describing the payload
const payloadSchema = new Map([
  [
    Payload,
    {
      kind: ""struct"",
      fields: [
        [""id"", ""u8""],
        [""key"", ""string""],
        [""value"", ""string""],
      ],
    },
  ],
]);

// Instruction variant indexes
enum InstructionVariant {
  InitializeAccount = 0,
  MintKeypair,
  TransferKeypair,
  BurnKeypair,
}

/**
 * Mint a key value pair to account
 * @param {Connection} connection - Solana RPC connection
 * @param {PublicKey} progId - Sample Program public key
 * @param {PublicKey}","[-7.35208541e-02 -1.49610220e-02 -3.80266197e-02  4.87116352e-03
  6.08097464e-02 -6.97353482e-02 -1.54918879e-02  4.58095595e-02
  1.31701892e-02  3.84964012e-02  1.98967438e-02 -1.80374142e-02
 -4.18747403e-02  1.40449312e-02  9.69194025e-02  7.16655552e-02
 -6.82109669e-02 -3.96546833e-02  7.19060078e-02  6.55748136e-03
 -2.98724300e-03 -5.72884595e-03  4.67440747e-02 -2.99885906e-02
 -1.12042669e-02 -4.09650058e-02  8.06342810e-03 -1.80129521e-02
 -3.38865188e-03  2.27111876e-02  1.69589948e-02  3.54371816e-02
 -5.37333712e-02  3.66048589e-02  4.07908410e-02  1.45402640e-01
  5.74189201e-02  4.56253625e-02 -3.49169523e-02  2.41988171e-02
  2.51728185e-02  9.84298140e-02 -4.71578911e-02 -1.14509508e-01
  7.21284747e-02 -1.36575684e-01 -1.01562142e-01 -5.48902340e-02
 -6.68409243e-02  4.02360298e-02 -5.25498539e-02 -8.57464075e-02
 -7.55530149e-02 -4.80719730e-02  6.52745590e-02  8.81924946e-03
 -3.82842459e-02  8.54069367e-02  8.89124200e-02  2.87997257e-02
  4.15986516e-02  1.96543094e-02  8.23117606e-03 -5.04789501e-02
  4.41998579e-02 -1.09176536e-03 -4.94062006e-02  2.73602810e-02
 -2.07145568e-02 -2.34745871e-02 -7.46400468e-03 -2.84916367e-02
 -2.86358651e-02  2.64360867e-02 -1.37583345e-01 -2.75771599e-02
  3.82508785e-02  8.46259370e-02 -1.51523566e-02  2.84691416e-02
 -1.65597014e-02 -1.05329771e-02  7.30008818e-03  4.16848399e-02
 -1.41402092e-02  8.96973908e-02 -3.52184027e-02 -1.19622108e-02
  1.39420524e-01  4.86385636e-02  2.25050431e-02 -8.46911967e-02
 -7.82701597e-02  5.04573025e-02  3.31627913e-02  1.25592621e-02
 -1.60615966e-02  8.38022828e-02 -5.06381318e-02  7.84337968e-02
 -1.11357654e-02 -8.82141516e-02  2.53380835e-02 -2.34614853e-02
 -1.93524808e-02 -1.38142705e-02  1.27576590e-01 -2.95251701e-03
 -2.63804141e-02  1.19964676e-02 -4.41444339e-03  1.84393972e-02
  1.64230745e-02 -9.52488258e-02 -3.81654277e-02 -2.10418813e-02
  3.88177931e-02  3.20753753e-02 -5.44262165e-03  7.65224621e-02
  7.38947913e-02  8.79461691e-02 -9.08004679e-03 -3.91302332e-02
 -7.78419664e-03  7.62711745e-03  1.00457251e-01  2.26916401e-33
  1.02911606e-01 -1.81022342e-02 -5.90863675e-02  1.05631873e-01
  1.32754698e-01 -2.28490345e-02  6.61451891e-02 -4.50706035e-02
 -1.60478085e-01 -1.84227563e-02  1.15033728e-03  1.04571762e-03
 -3.57461087e-02 -5.06734736e-02 -4.31017317e-02 -4.15120609e-02
  7.21361255e-03 -4.03109863e-02 -1.60074502e-03 -2.16608457e-02
  1.87684596e-02 -1.50103234e-02 -1.95620153e-02  1.95632149e-02
 -1.92303024e-02 -3.55554931e-02 -4.37013209e-02  2.96866545e-03
 -1.82962511e-02 -2.97410414e-03  8.38040337e-02  7.39461780e-02
 -2.20497493e-02  1.04553193e-01 -2.97465231e-02 -3.76152061e-02
 -4.82596532e-02 -3.90962325e-02 -1.66282747e-02 -6.14692010e-02
 -2.05689948e-02  3.06948535e-02 -2.89170835e-02  1.17606027e-02
 -2.21867189e-02 -9.44653451e-02 -1.07894251e-02  7.01946579e-03
  1.31092817e-01 -2.87756920e-02 -9.15564969e-02  7.82530382e-02
 -5.02575673e-02  5.32594807e-02  2.37497073e-02  5.37536368e-02
 -2.79893540e-02 -3.92615013e-02  2.62668300e-02  1.55945988e-02
 -1.05478680e-02  4.19222238e-03  9.95188951e-03 -8.69192034e-02
  2.81075351e-02 -7.49561237e-03 -7.14631751e-02 -2.29553469e-02
  6.24485090e-02  8.03575292e-03  3.58104482e-02 -3.06317732e-02
  9.63496603e-03  3.32252644e-02  2.83880625e-02 -5.33416122e-02
  4.74501252e-02  7.43244141e-02 -4.97616380e-02 -3.90853733e-02
 -2.12922636e-02 -7.08548948e-02 -5.40638417e-02  4.41305451e-02
  4.01771441e-02  2.10997742e-02  1.31591465e-02  5.13222329e-02
  9.81041417e-03 -3.48049216e-02  8.48415717e-02 -2.43806168e-02
 -4.66313958e-02 -1.11350998e-01 -6.92499205e-02 -3.29728663e-33
  5.32989092e-02 -1.89592335e-02 -6.87336475e-02 -4.32025753e-02
 -4.81920801e-02 -6.27851412e-02 -4.57985848e-02 -9.92914289e-02
 -2.31080875e-02  8.66083205e-02 -6.18180120e-03  2.01000381e-04
  3.36091556e-02  2.77899355e-02 -5.41538224e-02  7.36394376e-02
 -2.09546499e-02 -5.34626432e-02  4.39650230e-02 -1.33408830e-01
  1.78745128e-02  8.05617645e-02 -2.15592049e-02  1.47270481e-03
 -6.51918259e-03 -4.25671898e-02 -1.96548086e-03  2.99606174e-02
 -5.78940995e-02 -7.81423002e-02 -1.41042506e-03  1.57504417e-02
 -1.07359894e-01  1.60193089e-02 -1.87658817e-02 -2.38418020e-02
  3.92376222e-02  7.85748512e-02 -3.08173243e-02  2.95069534e-03
  8.12155679e-02 -4.18301858e-02 -9.60597768e-02  1.20721729e-02
 -1.17920777e-02 -4.54127975e-03  6.85148314e-02  1.06968973e-02
 -1.98504403e-02 -4.04411601e-03  2.81172469e-02 -5.90424016e-02
  6.35510907e-02 -7.84717873e-02 -2.98290215e-02 -3.15707289e-02
  2.69251503e-02 -3.12525779e-02 -5.66259846e-02  1.16964160e-02
  8.33515227e-02 -5.84502667e-02 -1.61900502e-02 -3.78314182e-02
  4.95019462e-03 -6.39631376e-02 -5.83361201e-02  5.08154407e-02
  8.09665918e-02 -9.64784175e-02 -1.10579416e-01  1.68016534e-02
  1.70679446e-02 -1.04903271e-02  4.41474058e-02 -5.69015509e-03
 -5.36127808e-03  1.18451109e-02  5.30872270e-02 -4.91671776e-03
 -3.50557230e-02  4.24741097e-02  2.13641766e-02  3.04606408e-02
 -1.92638170e-02  7.29448720e-06 -5.90964314e-03  5.65837547e-02
 -1.86235532e-02  4.81025875e-02 -5.29971793e-02  9.91163403e-03
  4.50260155e-02  5.53256497e-02  3.37479338e-02 -4.69235459e-08
 -8.19723234e-02  8.05783737e-03 -1.40945271e-01 -2.65937243e-02
 -2.29490083e-02  3.50128971e-02  4.12563011e-02  4.69226995e-03
  2.17625089e-02  9.84150264e-03 -3.32223400e-02  1.14260882e-01
 -2.47454438e-02  5.06998561e-02 -9.69490688e-03 -1.51648074e-02
 -5.66918112e-04  9.38051641e-02 -6.69405144e-03 -4.22509760e-02
  2.75067501e-02 -2.91014253e-03 -3.95351602e-03  1.07763968e-01
  5.08055557e-03  4.71336674e-03 -2.38685478e-02  5.93138970e-02
 -8.02533254e-02  3.90445068e-03 -7.03560263e-02  4.40413971e-03
  4.13239114e-02 -6.26621768e-02 -1.18241748e-02  2.30759662e-02
 -1.12251928e-02 -4.47314084e-02  9.86689422e-03  4.96084541e-02
  8.98749568e-03  2.92880666e-02  1.46778813e-02  2.74452977e-02
 -7.16636330e-02 -2.32402906e-02 -5.97929629e-03  6.34222403e-02
  5.44137619e-02 -3.42382714e-02  3.26351002e-02 -1.90983992e-02
 -1.15147186e-02  5.40991686e-02 -1.97258331e-02  2.94712279e-02
 -8.04522634e-03 -1.00752590e-02  4.99709770e-02 -6.23507565e-03
 -6.22534484e-04 -1.78309176e-02  5.63826226e-02 -6.36624405e-03]"
"account - Target program owned account for Mint
 * @param {Keypair} wallet - Wallet for signing and payment
 * @param {string} mintKey - The key being minted key
 * @param {string} mintValue - The value being minted
 * @return {Promise<Keypair>} - Keypair
 */

export async function mintKV(
  connection: Connection,
  progId: PublicKey,
  account: PublicKey,
  wallet: Keypair,
  mintKey: string,
  mintValue: string
): Promise<string> {
  // Construct the payload
  const mint = new Payload({
    id: InstructionVariant.MintKeypair,
    key: mintKey, // 'ts key'
    value: mintValue, // 'ts first value'
  });

  // Serialize the payload
  const mintSerBuf = Buffer.from(serialize(payloadSchema, mint));
  // console.log(mintSerBuf)
  // => <Buffer 01 06 00 00 00 74 73 20 6b 65 79 0e 00 00 00 74 73 20 66 69 72 73 74 20 76 61 6c 75 65>
  // let mintPayloadCopy = deserialize(schema, Payload, mintSerBuf)
  // console.log(mintPayloadCopy)
  // => Payload { id: 1, key: 'ts key', value: 'ts first value' }

  // Create Solana Instruction
  const instruction = new TransactionInstruction({
    data: mintSerBuf,
    keys: [
      { pubkey: account, isSigner: false, isWritable: true },
      { pubkey: wallet.publicKey, isSigner: false, isWritable: false },
    ],
    programId: progId,
  });

  // Send Solana Transaction
  const transactionSignature = await sendAndConfirmTransaction(
    connection,
    new Transaction().add(instruction),
    [wallet],
    {
      commitment: ""singleGossip"",
      preflightCommitment: ""singleGossip"",
    }
  );
  console.log(""Signature = "", transactionSignature);
  return transactionSignature;
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108from borsh_construct import String, CStruct, U8
from enum import IntEnum
from solana.transaction import Transaction
from solders.pubkey import Pubkey
from solders.keypair import Keypair
from solders.instruction import Instruction, AccountMeta
from solders.rpc.responses import SendTransactionResp
from solana.rpc.api import Client


# Instruction variants for target program
class InstructionVariant(IntEnum):
    INITIALIZE = 0
    MINT = 1
    TRANSFER = 2
    BURN = 3


# Schema for sending instructionVariants to on-chain sample program
payload_schema = CStruct(""id"" / U8, ""key"" / String, ""value"" / String)


def construct_payload(instruction_variant: InstructionVariant, key: str, value: str):
    """"""Generate a serialized instructionVariant""""""
    return payload_schema.build({""id"": instruction_variant, ""key"": key, ""value"": value})


def mint_kv(
    client: Client,
    program_pk: Pubkey,
    account_pk: Pubkey,
    wallet_kp: Keypair,
    mint_key: str,
    mint_value: str,
) -> SendTransactionResp:
    """"""Mint with a key/value pair to an account""""""
    # Construct the program payload for Mint invariant
    payload_ser = construct_payload(InstructionVariant.MINT, mint_key, mint_value)

    # print(payload_ser)
    # => b'\x01\n\x00\x00\x00python key\x0c\x00\x00\x00python value'
    # mint_payload_copy = payload_schema.parse(payload_ser)
    # print(mint_payload_copy)
    # => Container:
    # =>     initialized = 1
    # =>     key = u'python key' (total 10)
    # =>","[-8.54053795e-02  3.62441726e-02 -8.32747445e-02  5.86434221e-03
 -6.49726614e-02 -3.28785330e-02  2.45504770e-02  1.24138266e-01
 -2.45257840e-02 -1.05148191e-02 -5.73642440e-02 -4.45035510e-02
  1.31557072e-02 -2.86469068e-02  7.78124109e-02 -1.50810666e-02
 -5.56554645e-02 -4.75145839e-02  7.44747045e-03 -4.05728556e-02
  6.56204894e-02 -7.46038035e-02  1.97767466e-02 -2.62121148e-02
  6.08226210e-02 -3.48982913e-03  1.08485185e-02  8.87495349e-04
 -1.96150094e-02  4.46101688e-02  1.22379646e-01 -2.65780669e-02
 -1.82358585e-02  1.05401408e-03  9.06018354e-03  1.78448081e-01
 -4.85673547e-02 -2.57694570e-04  8.62243548e-02 -1.13406226e-01
  3.46988929e-03  6.89853132e-02 -1.31139129e-01 -1.56066567e-02
  7.29414448e-02 -1.74578801e-02 -1.08449059e-02  5.82031533e-02
 -4.79271337e-02  6.27591088e-03  2.12390535e-02  2.02416424e-02
 -4.58932109e-02  8.45889281e-03 -6.24124445e-02  2.85655297e-02
  3.69281806e-02 -3.71352793e-03  5.25997505e-02  2.65868120e-02
 -3.10888886e-02 -1.03084766e-03 -2.33339029e-04  2.06186641e-02
 -2.25208607e-02  4.48352769e-02 -6.55247495e-02  2.01198999e-02
  7.59894634e-03  1.32053588e-02  4.86273207e-02 -6.50803670e-02
 -7.99667165e-02 -1.79633386e-02 -4.67798114e-02 -5.42656630e-02
 -1.34288687e-02  1.18234027e-02 -6.38552979e-02 -3.64869013e-02
 -9.15588439e-03 -2.27536876e-02 -3.76145393e-02  7.62984604e-02
 -2.71466654e-02  9.73964334e-02 -2.11417843e-02 -1.78169515e-02
 -2.55711209e-02  1.61133390e-02  5.11938380e-03  1.54860634e-02
  2.29664575e-02 -1.07333399e-02  7.19507337e-02  4.13247198e-02
  4.50828485e-02  2.07852833e-02 -2.42050048e-02  3.76722217e-02
 -3.13869715e-02  2.01373994e-02  5.09002022e-02 -2.66440416e-04
  1.03178173e-01  3.06944717e-02  3.14385518e-02 -4.49110158e-02
 -4.57525365e-02 -3.20968442e-02 -3.10232807e-02  6.58299625e-02
  2.41044443e-02  4.84327823e-02  1.34154670e-02  5.63272387e-02
 -3.53788324e-02  2.92391833e-02  1.24798501e-02  5.83871640e-02
  1.28801435e-01 -1.21248942e-02 -3.17024179e-02  3.29472609e-02
 -4.08018120e-02 -6.96598459e-03  6.56011701e-02  5.88172704e-33
 -4.60225604e-02 -5.10290898e-02  6.08169753e-03 -5.88196926e-02
 -7.20754778e-03  4.24246490e-02  1.21806353e-01 -1.81251410e-02
 -5.84111065e-02  2.69386303e-02  4.47984366e-03 -9.64270011e-02
 -2.76527870e-02  1.19373454e-02 -9.14262235e-02  1.02949915e-02
 -1.94654595e-02  1.37970857e-02  1.12027712e-01  1.23240128e-01
 -1.68634467e-02 -3.76721397e-02 -5.74083254e-02 -5.25263418e-03
 -1.63942249e-03 -3.77463689e-03 -4.36119996e-02  2.64874268e-02
 -1.14172157e-02 -5.17153833e-03  4.61445786e-02  3.72500308e-02
 -4.54955921e-02 -1.90740209e-02  6.42096391e-03 -1.14520356e-01
  2.12387759e-02 -3.88409495e-02 -1.26509935e-01 -8.83259997e-03
  6.29384443e-02  1.08836973e-02 -8.24608058e-02  2.45269965e-02
 -5.57970703e-02 -2.97929663e-02 -6.77171275e-02  1.92888435e-02
  1.26366779e-01  4.57164422e-02 -6.68812171e-02  2.63187215e-02
 -1.18252141e-02 -6.62972108e-02  6.67843297e-02 -6.20621517e-02
  1.80636365e-02 -3.55541683e-03 -8.40263348e-03 -5.98810241e-02
 -2.05133762e-02 -6.49653599e-02 -1.85111165e-02 -1.54971855e-03
  5.95801584e-02  2.87745930e-02 -5.26249707e-02 -1.02713769e-02
 -6.69713691e-02  3.63103263e-02 -6.35752156e-02 -1.68617237e-02
 -6.28709942e-02  2.45924145e-02  1.28953401e-02  5.41484766e-02
  7.06829363e-04  5.54848760e-02  1.01910334e-03 -6.71175122e-02
 -1.25443991e-02  8.94615948e-02 -7.87592381e-02  8.07657465e-02
  3.98162194e-02  9.80769470e-02 -6.08849376e-02 -9.82518271e-02
 -5.62876351e-02  3.64339426e-02 -2.35976819e-02 -6.53199703e-02
 -6.15503937e-02  1.16248755e-02 -1.26180679e-01 -7.84658936e-33
  7.09416196e-02  8.67888983e-03  3.78693454e-02  6.89841434e-02
 -2.06247997e-03  8.26604813e-02  1.02765961e-02  2.19070842e-03
 -3.46379690e-02  8.19200352e-02 -6.36219457e-02  3.20907636e-03
  7.51640741e-03  4.34294678e-02  5.02416119e-02  5.54182976e-02
 -1.58431064e-02  2.35845950e-02 -6.07477082e-03 -3.72627638e-02
 -2.69978633e-03  4.26795706e-02  4.47666235e-02  5.06001040e-02
 -4.32158709e-02  2.13505942e-02 -4.68453653e-02  4.28090468e-02
 -2.38641221e-02 -1.34912906e-02  5.05784452e-02  6.28481880e-02
 -1.97193846e-02  4.27429974e-02 -4.48701344e-03 -5.17305061e-02
  5.44417612e-02  5.68414330e-02  1.23917754e-03  5.86382411e-02
  5.28532751e-02 -6.20538965e-02  1.45231728e-02 -1.43976631e-02
  4.45257425e-02 -5.01866452e-02  3.57003361e-02  2.87530180e-02
  7.33128330e-03  3.89117450e-02  4.84757274e-02 -2.11050566e-02
 -7.35315904e-02 -5.71844913e-03 -4.79297042e-02 -2.37625130e-02
  1.11657783e-01 -5.55862635e-02  1.00928664e-01 -1.19335793e-01
  5.71939303e-03 -5.82531206e-02  9.26094055e-02  3.63157433e-03
 -1.73680931e-02 -9.53637958e-02 -1.39092430e-02  1.63187291e-02
  2.91597340e-02  5.90848811e-02  8.94571654e-03 -7.99726769e-02
  6.00520968e-02  3.33496393e-03  2.22232845e-02 -2.11604615e-03
 -8.11135694e-02 -1.47297040e-01  5.35112694e-02  6.23436160e-02
 -1.45913102e-02  9.38358605e-02  2.51557548e-02  2.35749427e-02
 -6.08894136e-03 -3.27759311e-02  3.61099048e-03  5.66565022e-02
 -7.18496600e-03  3.03434618e-02  6.79852674e-03  2.61464510e-02
 -5.71439825e-02 -8.08305442e-02  4.01036330e-02 -6.29407211e-08
  9.90174524e-03 -3.54036279e-02 -6.06199317e-02  5.54355122e-02
 -1.67797413e-02  2.62587927e-02 -7.35804737e-02 -1.26963139e-01
  8.92817229e-03 -4.39581275e-03 -3.01660541e-02 -1.64013542e-02
 -2.55891643e-02 -2.29751244e-02 -7.41433427e-02 -1.09222457e-02
 -1.43023115e-02  4.08223737e-03 -3.12045068e-02 -2.67031584e-02
  3.78070250e-02  2.06879973e-02 -2.14885976e-02 -6.94663748e-02
  2.38460395e-03 -7.76404887e-02  8.02875832e-02  1.07044518e-01
  2.78504603e-02 -4.29732576e-02 -5.30623794e-02  3.50761861e-02
  4.20653373e-02 -8.77992883e-02 -3.22888121e-02 -7.92680681e-02
  4.04320061e-02 -2.40778830e-02  4.50639538e-02  2.49213744e-02
  6.53788738e-04  1.31066227e-02 -4.78781164e-02 -2.16107722e-03
 -3.41360010e-02  2.71157268e-03 -2.46928725e-02  5.83402738e-02
  3.25748064e-02  1.12571642e-02 -4.93712258e-03 -8.60016644e-02
 -1.16451327e-02  9.22354031e-03 -2.08847523e-02 -7.09505379e-02
 -9.31777656e-02 -4.55661789e-02  4.75309789e-02 -5.46592809e-02
  6.36288300e-02 -9.48656350e-04  1.00324024e-02 -5.86305857e-02]"
"    value = u'python value' (total 12)

    # Construct the transaction with instructionVariant
    txn = Transaction().add(
        Instruction(
            accounts=[AccountMeta(account_pk, False, True)], program_id=program_pk, data=payload_ser
        )
    )
    return client.send_transaction(txn, wallet_kp)
    # => {'jsonrpc': '2.0', 'result': '4ZdpWNdovdVaLextWSiqEBWp67k9rNTTUaX3qviHDXWY9c98bVtaRt5sasPhYzMVXHqhex78gzNKytcBnVH5CSTZ', 'id': 2}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556
/// Instruction payload gets serialized
#[derive(BorshSerialize)]
pub struct Payload<'a> {
    variant: u8,
    key: &'a str,
    value: &'a str,
}

/// Perform a mint transaction consisting of a key/value pair
/// See submit_transaction below
pub fn mint_transaction(
    rpc_client: &RpcClient,
    accounts: &[AccountMeta],
    wallet_signer: &dyn Signer,
    mint_key: &str,
    mint_value: &str,
    mint_instruction_id: u8,
    commitment_config: CommitmentConfig,
) -> Result<Signature, Box<dyn std::error::Error>> {
    // Setup the payload. `mint_instruction_id` is instruction variant index = 1
    let data = Payload<`_> {
        variant: mint_instruction_id,
        key: mint_key,
        value: mint_value,
    };
    let instruction = Instruction::new_with_borsh(PROG_KEY.pubkey(), &data, accounts.to_vec());
    submit_transaction(rpc_client, wallet_signer, instruction, commitment_config)
}

/// Submits the program instruction as per the
/// instruction definition
pub fn submit_transaction(
    rpc_client: &RpcClient,
    wallet_signer: &dyn Signer,
    instruction: Instruction,
    commitment_config: CommitmentConfig,
) -> Result<Signature, Box<dyn std::error::Error>> {
    let mut transaction =
        Transaction::new_unsigned(Message::new(&[instruction], Some(&wallet_signer.pubkey())));
    let (recent_blockhash, _fee_calculator) = rpc_client
        .get_recent_blockhash()
        .map_err(|err| format!(""error: unable to get recent blockhash: {}"", err))?;
    transaction
        .try_sign(&vec![wallet_signer], recent_blockhash)
        .map_err(|err| format!(""error: failed to sign transaction: {}"", err))?;
    let signature = rpc_client
        .send_and_confirm_transaction_with_spinner_and_commitment(&transaction, commitment_config)
        .map_err(|err| format!(""error: send transaction: {}"", err))?;
    Ok(signature)
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# How to deserialize instruction data on the programRust Program//! instruction Contains the main ProgramInstruction enum

use {
    crate::error::SampleError, borsh::BorshDeserialize, solana_program::program_error::ProgramError,
};

#[derive(Debug, PartialEq)]
/// All custom program instructions
pub enum ProgramInstruction {
    InitializeAccount,
    MintToAccount { key: String, value: String },
    TransferBetweenAccounts { key: String },
    BurnFromAccount { key: String },
    MintToAccountWithFee { key: String, value: String },
    TransferBetweenAccountsWithFee { key: String },
    BurnFromAccountWithFee { key: String },
}

/// Generic Payload Deserialization
#[derive(BorshDeserialize, Debug)]
struct Payload {
    variant: u8,
    arg1: String,
    arg2: String,
}

impl ProgramInstruction {
    /// Unpack inbound buffer to associated Instruction
    /// The expected format for input is a Borsh serialized vector
    pub fn unpack(input: &[u8])","[-5.41519411e-02  8.65169168e-02 -9.76188853e-02 -3.47262174e-02
 -1.30654812e-01 -6.17709272e-02  3.50891985e-02  1.04421765e-01
  3.45859560e-03 -1.06574902e-02  4.03684080e-02  3.38295125e-04
 -3.84149142e-04  2.82081636e-03  1.00167565e-01 -3.02980114e-02
 -7.80085251e-02 -3.09378430e-02 -8.68484378e-03 -3.82232782e-03
  4.19209898e-02  2.89523769e-02  2.56264266e-02  6.94205835e-02
  1.59854405e-02 -2.69392785e-02  4.65273205e-03  5.97495995e-02
 -9.41255596e-03  5.00524603e-02  9.44862068e-02  3.72792520e-02
 -5.57818962e-03 -1.74862128e-02  8.02251995e-02  1.17066376e-01
  2.49347975e-03 -3.77428085e-02  6.28796443e-02 -6.14505000e-02
 -2.15872731e-02  2.57150661e-02 -9.45437327e-02  2.39736792e-02
  2.30664797e-02 -1.00489976e-02  7.68983923e-03  4.86719944e-02
 -6.88775303e-03 -3.00447121e-02  3.57197900e-03  1.18434496e-01
  1.27678807e-03  2.86121853e-02 -5.13857529e-02 -2.08666380e-02
 -1.57112554e-02 -1.80210024e-02  2.78171171e-02 -2.17057541e-02
 -3.96282226e-02  2.12574750e-02  1.78068634e-02 -4.12484724e-03
 -9.07671973e-02  1.53562864e-02 -8.36405382e-02 -2.31852476e-02
  1.61823537e-02 -1.27127836e-03  2.83849947e-02 -1.22246645e-01
 -1.28716916e-01  2.03078836e-02 -4.86622788e-02 -6.21470436e-02
  4.97638173e-02 -2.38305610e-02 -7.44832084e-02 -1.84937380e-03
  6.81238296e-03 -3.94699648e-02 -2.13730000e-02  6.68488741e-02
  4.52170894e-03 -5.73068447e-02  1.08047808e-03  4.03141789e-02
 -1.36908730e-02 -2.82107474e-04  4.80865389e-02 -4.70494246e-03
 -2.69685518e-02 -9.05833468e-02  1.01012044e-01  6.81127235e-03
  7.48971403e-02 -2.79003698e-02 -5.82416682e-03  5.70872612e-02
  4.40709591e-02 -6.60810096e-04 -4.68310993e-03  2.24151574e-02
  5.26093803e-02  4.01326157e-02  5.55111729e-02  1.32252392e-03
 -7.37562869e-03 -6.26647696e-02 -2.47463845e-02  6.16548099e-02
 -5.43570854e-02 -2.53939033e-02 -1.82591155e-02  8.93497691e-02
 -3.47982310e-02  3.81806344e-02 -1.65577512e-02  2.96946485e-02
  1.17764100e-01 -2.80501749e-02 -7.93975070e-02  3.98756787e-02
 -6.52071610e-02 -8.47407952e-02  1.03610884e-02  9.17673322e-33
 -6.15657233e-02 -2.17733681e-02  4.86386893e-03 -6.83814436e-02
 -4.89204703e-03  4.03258353e-02  5.37786372e-02  2.59682741e-02
 -3.64553407e-02  1.89834349e-02 -8.87780488e-02 -6.05584383e-02
 -3.85645567e-03  1.83493253e-02 -8.94585922e-02  9.43611097e-03
 -4.38817292e-02  2.99988557e-02  1.57684818e-01  4.79461178e-02
  6.94416985e-02 -1.86338071e-02 -3.53796445e-02  1.38821844e-02
 -5.48204333e-02  7.64180571e-02 -9.76811796e-02 -3.22360583e-02
 -2.71154623e-02  1.28487051e-02 -1.64616294e-02  9.05302353e-03
 -3.85604277e-02 -2.69203000e-02  9.35039017e-03 -9.06564295e-02
 -4.26563509e-02 -7.02184588e-02 -4.32057828e-02 -9.27001163e-02
  3.39746065e-02  2.34094393e-02 -7.36477301e-02  2.57868618e-02
 -1.54352300e-02  1.21096894e-02 -5.20778373e-02  7.91455880e-02
  4.89901379e-02  4.31811288e-02 -3.02361045e-02  7.05840904e-03
  4.20450754e-02  2.57453229e-03  1.71510149e-02 -2.72151455e-02
  5.34807816e-02  1.61798985e-03 -2.53541078e-02 -3.76928337e-02
  6.59269793e-03  3.46346125e-02 -2.38055047e-02 -3.24878693e-02
  3.26120146e-02 -1.11882566e-02 -4.90056956e-03  2.16269642e-02
 -4.32300456e-02  1.41248498e-02 -7.15970322e-02  8.02205577e-02
 -1.30075924e-02  2.19201576e-02 -1.18803671e-02 -4.47868323e-03
  5.23845516e-02 -2.85545718e-02  2.88918037e-02 -1.97395831e-02
  4.96873632e-03  5.66130243e-02 -5.93598895e-02  3.02664023e-02
  1.41208554e-02  1.07030749e-01  1.04697682e-02  3.62487626e-03
 -5.56147136e-02 -1.75591595e-02  5.69446338e-03 -8.63670111e-02
 -2.00629123e-02 -2.40577646e-02 -3.14717963e-02 -1.07218280e-32
  1.97972860e-02 -1.28663369e-02  3.70553657e-02 -6.49188820e-04
 -3.63536961e-02 -5.74734237e-04  3.16378549e-02 -1.51338754e-04
  5.51175233e-03  4.00554799e-02 -2.97571234e-02 -3.45170908e-02
 -1.85214467e-02 -5.00009803e-04  8.19367543e-02  3.15944143e-02
 -9.31985304e-02  8.23450089e-02  4.35345247e-02  5.57985110e-03
 -4.01646011e-02  6.37484416e-02  1.98070407e-02  1.79179478e-02
 -3.50248478e-02 -1.81016549e-02 -1.75091885e-02  6.77900165e-02
  1.57830976e-02  1.75723489e-02  3.20827514e-02  3.25288363e-02
 -1.87338293e-02  9.50245187e-02  1.26620885e-02 -5.90105131e-02
  9.95036513e-02  2.09068786e-02  2.50004083e-02  3.81258577e-02
  5.57223596e-02  2.75142826e-02 -4.09096815e-02  7.13326260e-02
  6.90891296e-02 -3.95582803e-02 -1.67218260e-02  6.70727715e-02
  3.15025859e-02 -1.76051892e-02  3.99971306e-02 -1.08934510e-02
 -8.01448897e-02  1.26615549e-02 -5.78109883e-02 -2.65922155e-02
  1.26066819e-01 -7.49271885e-02  3.32929497e-03 -1.21700302e-01
 -1.61900781e-02 -5.28862141e-02  3.05991117e-02  8.00050646e-02
  4.84413169e-02 -6.61529973e-02 -4.28364202e-02  1.25405956e-02
 -2.14914922e-02 -2.49644052e-02  2.09248420e-02 -4.33102660e-02
  6.69207573e-02  6.52940478e-03  9.32040364e-02  9.04042497e-02
 -7.72803277e-02 -5.56238666e-02  3.22092809e-02  7.15318322e-02
 -1.17318537e-02  1.90066975e-02  5.40948138e-02  3.77735980e-02
 -6.67763799e-02 -7.91738033e-02  2.20134892e-02  8.89914408e-02
 -4.79403213e-02 -4.78469506e-02  9.83095448e-03  2.82391291e-02
  2.79376153e-02 -2.25101281e-02  4.97293323e-02 -6.14665439e-08
 -2.68681403e-02 -9.45626572e-02 -4.11988832e-02  5.22674583e-02
  4.10305485e-02  9.35457945e-02 -8.14400017e-02 -1.17036253e-01
 -4.77438327e-03 -3.91242541e-02 -3.95683274e-02 -2.01520044e-02
 -7.17163086e-02 -7.14131445e-02 -5.04902042e-02  5.45518398e-02
 -3.00463531e-02 -1.49726896e-02 -1.82166807e-02 -9.28241666e-03
  6.95466474e-02 -4.84888032e-02  1.45515325e-02 -6.49721473e-02
 -1.78429109e-04 -4.02041078e-02  2.53481548e-02  1.28415987e-01
 -5.36476076e-03 -9.55112576e-02  5.56024499e-02 -7.19349980e-02
  5.03175668e-02 -2.16558166e-02 -3.01220864e-02 -4.72705401e-02
  6.88131899e-02  1.37240230e-03  1.52412755e-02  2.72755977e-03
 -5.23885526e-02 -3.81480418e-02 -1.45512268e-01  1.58216003e-02
  9.03731119e-03  2.87980251e-02 -1.18438557e-01  6.80529326e-02
  4.25382983e-03  2.42543127e-02  1.13851158e-02 -7.39498362e-02
  5.49740233e-02 -2.24887226e-02 -4.96244915e-02 -6.70325011e-02
 -6.20500557e-02 -1.21965781e-02  5.67160584e-02 -6.15674257e-02
  5.99941276e-02  8.89089406e-02  2.67030839e-02 -6.33275211e-02]"
"-> Result<Self, ProgramError> {
        let payload = Payload::try_from_slice(input).unwrap();
        match payload.variant {
            0 => Ok(ProgramInstruction::InitializeAccount),
            1 => Ok(Self::MintToAccount {
                key: payload.arg1,
                value: payload.arg2,
            }),
            2 => Ok(Self::TransferBetweenAccounts { key: payload.arg1 }),
            3 => Ok(Self::BurnFromAccount { key: payload.arg1 }),
            4 => Ok(Self::MintToAccountWithFee {
                key: payload.arg1,
                value: payload.arg2,
            }),
            5 => Ok(Self::TransferBetweenAccountsWithFee { key: payload.arg1 }),
            6 => Ok(Self::BurnFromAccountWithFee { key: payload.arg1 }),
            _ => Err(SampleError::DeserializationFailure.into()),
        }
    }
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# How to serialize account data on the programThe program account data block (from the sample repo) is layed out asByte 0Bytes 1-4Remaining Byte up to 1019Initialized flaglength of serialized BTreeMapBTreeMap (where key value pairs are stored)# PackA word about the Packopen in new window traitThe Pack trait makes it easier to hide the details of account data serialization/deserialization from your core Program instruction processing. So instead of putting all the serialize/deserialize log in the program processing code, it encapsulates the details behind (3) functions:unpack_unchecked - Allows you to deserialize an account without checking if it has been initialized. This is useful when you are actually processing the Initialization function (variant index 0)unpack - Calls your Pack implementation of unpack_from_slice and checks if account has been initialized.pack - Calls your Pack implementation of pack_into_sliceHere is the implementation of the Pack trait for our sample program. This is followed with the actual processing of the account data using borsh.Rust Program//! @brief account_state manages account data

use crate::error::SampleError;
use sol_template_shared::ACCOUNT_STATE_SPACE;
use solana_program::{
    entrypoint::ProgramResult,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack, Sealed},
};
use std::collections::BTreeMap;

/// Maintains global accumulator
#[derive(Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    btree_storage: BTreeMap<String, String>,
}

impl ProgramAccountState {
    /// Returns indicator if this account has been initialized
    pub fn set_initialized(&mut self) {
        self.is_initialized = true;
    }
    /// Adds a new key/value pair to the account
    pub fn","[-7.48216435e-02  2.34230049e-02 -1.98641941e-02  7.68079516e-03
 -4.69851913e-03 -3.57390451e-03  3.04421391e-02  3.38246077e-02
 -3.27749029e-02 -3.77004780e-02  3.12712826e-02 -9.63557735e-02
 -1.09652346e-02  4.43083346e-02  6.19845912e-02 -3.97996791e-03
 -8.30708519e-02 -4.18594368e-02 -6.50152043e-02 -5.77542409e-02
  7.51076862e-02  2.19979859e-03  2.22502672e-03  6.65231608e-03
  8.32310133e-03 -9.97923315e-03 -4.21150364e-02 -2.57863067e-02
 -1.51572342e-03 -1.56654771e-02  8.04617107e-02  3.68233547e-02
 -5.98169640e-02  7.48233944e-02  5.06936461e-02  8.54714438e-02
 -3.64997052e-02 -3.57177518e-02 -1.73770692e-02 -9.24322307e-02
  1.36053106e-02 -4.10450064e-03 -1.16085559e-01 -3.79728749e-02
  1.01275248e-02 -1.78090902e-03 -7.12431744e-02  1.17604705e-02
  2.19651517e-02 -1.58370808e-02  1.39480820e-02  5.41645586e-02
 -6.19216114e-02  1.19756386e-01  7.62596056e-02  4.27685902e-02
  7.10604433e-03 -2.68260669e-02  4.34991643e-02  7.69264158e-03
  1.51017345e-02 -3.51625644e-02 -1.96425803e-02 -4.86363173e-02
 -1.76883843e-02 -1.36519419e-02 -5.08818030e-02  2.41206009e-02
 -1.69560369e-02  4.07823101e-02  4.09499817e-02 -3.32635902e-02
  7.87716173e-03  3.37581933e-02  1.42594026e-02 -5.61863743e-02
 -3.06950342e-02  7.06057018e-03 -8.10102448e-02 -4.79885973e-02
 -8.44380036e-02 -2.80709490e-02 -4.44822945e-02  1.10571787e-01
  9.65695712e-04  6.17868565e-02 -7.85566941e-02 -2.19493993e-02
  3.17011140e-02 -8.35783605e-04  4.49606311e-03  8.06280039e-03
  6.15226664e-02  4.95911427e-02  9.02214274e-02 -3.90888797e-03
  6.11674413e-02 -4.18718271e-02  1.44685535e-02  7.15208277e-02
 -1.88695826e-02  3.01486929e-03 -1.30308594e-03 -1.96954105e-02
  7.95834213e-02 -1.56868994e-03  3.38809304e-02 -3.72713096e-02
 -6.80249184e-02 -9.70238005e-04  2.33416818e-02  6.30386621e-02
  2.03049704e-02  1.15641570e-02 -5.72877415e-02  2.69238092e-02
 -6.34614080e-02  5.55182137e-02 -7.20553519e-03  5.38274944e-02
  7.60990754e-02  1.58325548e-03  2.36258712e-02  1.46538699e-02
 -8.61305743e-02 -3.96246463e-02  6.58469945e-02  1.03241472e-32
 -4.40834127e-02 -2.28329352e-03 -5.93941808e-02 -3.16661075e-02
 -3.14736851e-02  7.36394804e-03  4.34572622e-02  8.56610835e-02
 -3.52518931e-02  4.76043532e-03 -5.75634539e-02  9.05195996e-03
 -5.30107953e-02  1.55796474e-02 -3.65260169e-02 -6.05434366e-03
  1.97699722e-02  6.18490763e-02  8.31150413e-02  3.87381203e-02
  6.03425391e-02 -4.97241654e-02 -7.58575574e-02 -7.41512775e-02
 -6.27896860e-02  8.54509845e-02 -5.69333099e-02 -3.87597643e-02
  3.44283432e-02  2.37112455e-02  2.19658911e-02  5.69346882e-02
 -1.42927533e-02 -3.60569023e-02  4.01914902e-02 -5.53086028e-02
  8.15312937e-03  2.89626122e-02 -1.38890520e-01 -6.67705536e-02
  5.27086593e-02  3.93182375e-02 -5.87535799e-02  8.02579802e-03
  2.19403561e-02 -6.69011399e-02 -8.66989885e-03  1.92127936e-02
  4.80605103e-02  1.87828392e-02 -1.53666660e-02 -1.90889789e-03
  2.77795214e-02 -5.87286577e-02  2.56401002e-02 -6.63637295e-02
  4.75512445e-02  3.20682414e-02  3.74192744e-02 -3.01110912e-02
 -2.11932268e-02  3.81633267e-02 -3.32776979e-02 -2.43578628e-02
  3.73415314e-02  1.41583562e-01 -5.26542105e-02 -7.33968988e-02
 -6.16821926e-04 -4.02426198e-02 -8.73172134e-02  3.03379111e-02
 -1.07744835e-01  1.76257826e-02 -2.10924018e-02 -6.50401935e-02
  4.09483537e-02 -3.25836688e-02 -1.91806909e-02 -8.56572464e-02
 -1.22396862e-02  5.08523062e-02 -1.11081496e-01  7.23423138e-02
 -2.06930172e-02  5.46954088e-02 -3.69413905e-02 -6.56478703e-02
 -8.40540379e-02  7.64469504e-02 -1.18676145e-02 -4.83068004e-02
 -5.17739691e-02 -8.36902186e-02 -5.26618659e-02 -1.00649257e-32
  8.85538906e-02  4.80719060e-02  3.32880095e-02 -5.40488400e-03
  1.08292447e-02 -3.65215167e-02  5.36479987e-02  6.53396696e-02
  2.14309078e-02  4.02241237e-02 -7.53088221e-02 -2.14082859e-02
  4.59997728e-02 -3.37097049e-02 -3.35259438e-02  2.39399225e-02
 -7.09265843e-02 -4.10021134e-02 -3.28523992e-03  2.93636899e-02
 -3.28118913e-02  3.81193832e-02 -2.67503262e-02  6.30975217e-02
 -8.19581524e-02  1.01553194e-01  4.03362662e-02  2.32111551e-02
  5.85994050e-02 -3.94188762e-02  9.32834297e-02 -3.02658956e-02
 -3.06679513e-02  2.14429349e-02  7.68249435e-03  4.59456816e-03
  7.90395960e-02  8.71213973e-02 -6.13643117e-02  3.80130000e-02
  6.27312362e-02 -3.48056108e-03 -6.75342381e-02  9.86720622e-03
 -1.94446389e-02 -2.40100790e-02  5.47799766e-02  9.03015360e-02
  2.54799426e-03 -7.01015722e-03  7.94205815e-02 -2.69075967e-02
 -1.56727642e-01  4.07384858e-02 -3.15259658e-02 -2.20116358e-02
  1.31111428e-01 -6.05667606e-02  2.66416464e-02 -8.29197913e-02
  1.01584606e-02 -6.83814809e-02  3.28927040e-02  5.30705377e-02
  9.74839553e-02 -9.21636820e-02 -4.25730459e-02 -5.26901847e-03
  2.07500178e-02  4.28078771e-02 -1.29680717e-02  4.91474429e-03
  8.67389813e-02 -1.19885683e-01  4.26897630e-02  1.08534563e-02
 -6.40278384e-02 -5.61971441e-02  3.54350321e-02  6.90809935e-02
 -9.28196833e-02  5.09525537e-02  3.04226018e-02  9.61958691e-02
 -1.25619462e-02  3.20220389e-03  8.17943960e-02  3.77099030e-02
 -4.38672118e-02  6.30304739e-02 -1.94997946e-03  3.74860689e-02
  1.21669564e-02  4.15348038e-02  4.58009960e-03 -5.58682700e-08
 -5.82733341e-02 -5.99999093e-02 -3.60994786e-02  6.68033510e-02
 -3.50592807e-02  2.34597363e-02 -6.70387223e-02 -2.48765871e-02
  5.17458066e-05 -5.52712940e-02 -6.49742112e-02  1.03318200e-01
 -6.87010959e-02  1.48150967e-02 -2.11286806e-02 -2.12642085e-02
  1.37532530e-02  5.95808309e-03 -2.45885719e-02 -9.87013150e-03
  9.18401685e-03 -5.38273789e-02  1.86811723e-02 -5.18970937e-02
  1.87026747e-02 -1.61082093e-02  3.70695367e-02  8.11940730e-02
  4.67423201e-02 -4.10898253e-02  3.48161720e-02 -1.85627081e-02
  7.83792287e-02  3.26808803e-02  7.31506478e-03 -5.63031342e-03
 -1.32186646e-02  2.16106679e-02  2.17752755e-02 -1.72600914e-02
  3.61792780e-02  4.60344292e-02 -1.38227880e-01  4.08125762e-03
 -1.57994255e-02 -6.86367527e-02 -2.49929689e-02  2.44205873e-02
  1.33102359e-02  5.90577349e-02 -3.19614373e-02 -1.33093983e-01
 -2.02601776e-02 -6.94521982e-03 -2.35167649e-02 -6.23189360e-02
 -1.29980249e-02 -7.48614594e-02  7.46544674e-02  2.14760229e-02
  1.23817459e-01 -2.07959171e-02 -2.31022965e-02  1.70965437e-02]"
"add(&mut self, key: String, value: String) -> ProgramResult {
        match self.btree_storage.contains_key(&key) {
            true => Err(SampleError::KeyAlreadyExists.into()),
            false => {
                self.btree_storage.insert(key, value);
                Ok(())
            }
        }
    }
    /// Removes a key from account and returns the keys value
    pub fn remove(&mut self, key: &str) -> Result<String, SampleError> {
        match self.btree_storage.contains_key(key) {
            true => Ok(self.btree_storage.remove(key).unwrap()),
            false => Err(SampleError::KeyNotFoundInAccount),
        }
    }
}

impl Sealed for ProgramAccountState {}

// Pack expects the implementation to satisfy whether the
// account is initialzed.
impl IsInitialized for ProgramAccountState {
    fn is_initialized(&self) -> bool {
        self.is_initialized
    }
}

impl Pack for ProgramAccountState {
    const LEN: usize = ACCOUNT_STATE_SPACE;

    /// Store 'state' of account to its data area
    fn pack_into_slice(&self, dst: &mut [u8]) {
        sol_template_shared::pack_into_slice(self.is_initialized, &self.btree_storage, dst);
    }

    /// Retrieve 'state' of account from account data area
    fn unpack_from_slice(src: &[u8]) -> Result<Self, ProgramError> {
        match sol_template_shared::unpack_from_slice(src) {
            Ok((is_initialized, btree_map)) => Ok(ProgramAccountState {
                is_initialized,
                btree_storage: btree_map,
            }),
            Err(_) => Err(ProgramError::InvalidAccountData),
        }
    }
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# Serialization/DeserializationTo complete the underlying serialization and deserialization:sol_template_shared::pack_into_slice - Where the actual serialization occurssol_template_shared::unpack_from_slice - Where the actual deserialization occursNote that in the following we have a u32 (4 bytes) partition in the data layout for BTREE_LENGTH preceding the BTREE_STORAGE. This is because borsh, during deserialization, checks that the length of the slice you are deserializing agrees with the amount of data it reads prior to actually recombobulation of the receiving object. The approach demonstrated below first reads the BTREE_LENGTH to get the size to slice out of the BTREE_STORAGE pointer.Rust Programuse {
    arrayref::*,
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::program_memory::sol_memcpy,
    std::{collections::BTreeMap, error::Error},
};

/// Initialization flag size for account state
pub const INITIALIZED_BYTES: usize = 1;
/// Storage for the serialized size","[-5.11644930e-02  6.59978688e-02 -3.47748920e-02  8.69323500e-03
 -5.76052964e-02 -3.40888500e-02  8.70020837e-02  7.41031170e-02
  2.18943367e-03  2.74339020e-02  6.79982081e-02 -4.95305173e-02
  9.92859453e-02 -6.41678795e-02  5.52322678e-02  3.53719033e-02
 -5.34147099e-02 -6.60043806e-02  3.79461213e-03  1.54721169e-02
  3.90258729e-02  2.89582415e-03  9.42132715e-03  9.84536409e-02
 -7.81913381e-03 -9.61933360e-02 -4.55098823e-02 -6.16392493e-03
  8.05874169e-03  4.47873473e-02  9.54163168e-03 -1.76824424e-02
  4.83419001e-02  8.65473151e-02  1.12633325e-01  7.24073797e-02
 -1.22204162e-02 -4.72774245e-02 -4.91461679e-02 -2.93891765e-02
 -1.73259750e-02  1.69672575e-02 -1.21309139e-01  7.79318111e-03
  1.58242770e-02  2.04077139e-02 -7.27763847e-02  1.99796055e-02
 -6.75699040e-02 -7.67772971e-03 -4.18898091e-02  9.01091993e-02
 -7.45944604e-02 -5.65406866e-03 -4.18757237e-02  8.26793611e-02
  3.01691368e-02  1.11503117e-02 -1.82342436e-02  4.50538564e-03
  4.44121547e-02  1.70419849e-02  1.42529299e-02 -1.32310688e-02
 -6.59440830e-02  1.26046568e-01 -9.10391659e-03 -2.00978983e-02
  7.55815059e-02 -1.16911586e-02  2.68011354e-02 -3.25580016e-02
 -6.89053833e-02 -2.09985953e-03 -2.10041329e-02 -1.42244138e-02
 -2.40970664e-02  1.84960756e-02 -6.29075691e-02 -9.46827885e-03
 -7.26474375e-02 -8.48865584e-02  2.44294815e-02  3.24787199e-02
 -4.40631323e-02 -1.03518728e-03 -7.96250161e-03 -8.89733285e-02
 -6.01751171e-03  3.83197777e-02  1.07028484e-02 -3.35654989e-02
  1.71586294e-02 -1.02094840e-02  1.17677651e-01  4.51992452e-02
  5.95462695e-02 -2.48260610e-02  6.13422180e-03  3.34097706e-02
 -4.70130183e-02 -1.79501455e-02  7.83231371e-05 -4.32027504e-02
  1.25633022e-02 -2.85584070e-02  5.22864573e-02 -7.86207691e-02
 -4.75504510e-02 -4.61430736e-02  4.55366494e-03  4.94199917e-02
  4.18153554e-02  3.17575634e-02 -3.79944108e-02  1.16040833e-01
 -1.36043299e-02  8.05457085e-02 -3.35393995e-02  3.27074081e-02
  6.43103868e-02 -4.46611047e-02  1.22498805e-02 -1.97566114e-02
 -9.27410573e-02 -4.11466360e-02 -5.42263081e-03  3.99448152e-33
 -2.16569360e-02 -5.64302392e-02 -4.70451415e-02  1.76644456e-02
 -3.50900628e-02  3.47878365e-03  3.37310173e-02  6.77042678e-02
 -1.15834646e-01  2.86312978e-04 -2.98124366e-02 -3.86345293e-03
 -5.81550077e-02 -3.97248045e-02  1.13234166e-02 -3.23521383e-02
  1.81953714e-03  6.20290972e-02  4.44116592e-02 -2.48378944e-02
  8.65211487e-02  3.44375521e-02 -2.02478915e-02 -1.14415348e-01
  2.86551844e-02  4.32650223e-02 -6.03900626e-02  4.67430009e-03
  1.74563006e-02  1.09349666e-02  4.50906120e-02 -6.36856118e-03
 -5.15941270e-02  6.14038296e-02  8.94777011e-03 -1.76520720e-02
 -7.03980308e-03  3.20056849e-03 -6.73529953e-02 -9.77200717e-02
  3.59825939e-02  1.41170705e-02  1.76097769e-02 -4.59092781e-02
 -1.67819543e-03 -8.34019184e-02 -7.07171857e-02  6.30944818e-02
  6.45828173e-02  2.69446988e-02  8.98527447e-03  6.79997504e-02
 -9.00904313e-02 -9.78965219e-03 -1.12782702e-01 -4.49033827e-02
  1.32866232e-02 -3.81957204e-03  1.05705997e-02 -1.57926250e-02
  1.45324236e-02  4.71516028e-02 -1.06683709e-02  6.79289997e-02
  2.80569997e-02 -1.70317050e-02  5.68502024e-02 -5.00404984e-02
  2.52588298e-02 -9.29911807e-02  5.38627198e-03 -3.89968567e-02
 -1.07542202e-01 -1.83631033e-02 -5.25660105e-02 -6.29046857e-02
  6.04790524e-02 -4.10850607e-02 -7.64083415e-02 -2.35232208e-02
  5.45749739e-02 -4.43582423e-02 -4.55766246e-02  6.71710372e-02
 -6.56981021e-02  1.85495131e-02 -1.08527672e-02 -1.36419218e-02
  8.46288279e-02  8.78417492e-03  3.32316794e-02 -6.13211058e-02
 -5.51637933e-02 -3.23740393e-02 -5.07259443e-02 -5.39863560e-33
  1.05137810e-01 -1.01497523e-01  5.51114641e-02 -9.73827858e-03
  2.11244915e-02  1.73780732e-02  3.20903994e-02 -4.59091924e-02
 -1.54621983e-02 -6.29156679e-02 -2.61858162e-02  3.91928777e-02
  8.64235982e-02 -1.96040832e-02  1.75739434e-02  6.28876500e-03
 -7.76979327e-02 -3.86399813e-02 -4.12333682e-02  5.37184589e-02
 -2.32862774e-02  1.24852173e-02  1.40341306e-02  7.07301423e-02
 -1.50548248e-02  5.87040838e-03 -5.89330345e-02  6.75621256e-02
 -1.05148845e-03 -3.61370631e-02  5.65038212e-02  1.19431145e-01
 -4.55609895e-02 -3.89055498e-02 -4.77574095e-02 -1.11047603e-01
  3.17980722e-02  4.04936448e-02 -5.48608564e-02  5.76518625e-02
  7.70613253e-02 -7.61952205e-03 -9.77127850e-02 -4.78117876e-02
  1.74237974e-02 -5.04116062e-04  6.73843473e-02 -1.99728031e-02
  5.73749244e-02  3.77800949e-02  5.28204963e-02 -6.83204010e-02
  1.51820760e-02 -7.67387003e-02 -9.38209519e-03  3.66637371e-02
  4.17373925e-02 -1.10628540e-02  1.98261552e-02 -9.26859677e-02
  7.89724067e-02 -1.39184548e-02  3.42167318e-02  4.66594920e-02
  1.39617641e-02 -6.35109842e-02 -2.64030844e-02  4.89130467e-02
 -2.99394149e-02 -6.83280751e-02  1.39112733e-02 -3.50902346e-03
  6.02609757e-03 -1.46724107e-02  1.76279470e-02  2.79962812e-02
 -8.29559565e-02 -6.96297735e-02 -9.82048549e-03  4.00416553e-02
 -3.35878618e-02  3.62475850e-02 -1.55614465e-02  1.60739124e-02
 -6.26217052e-02 -8.95890519e-02  3.71917933e-02  3.07305120e-02
 -6.71983957e-02  3.31899785e-02 -1.29298335e-02  1.14918062e-02
 -6.49152622e-02  4.09891605e-02 -4.49460000e-03 -5.67437581e-08
 -5.80047257e-02  2.08209753e-02 -2.42378470e-02  9.96228680e-02
  1.71283800e-02 -5.43338321e-02  5.59211709e-02  1.14650419e-02
 -4.71561961e-02 -7.68410414e-02 -5.13430312e-02  4.56579216e-02
 -1.20376036e-01 -6.12589046e-02 -6.16363361e-02 -1.82846002e-02
 -4.92105410e-02  2.66154460e-03 -9.71349305e-04  4.86279875e-02
  4.88610566e-02 -8.28528963e-03  1.32138180e-02  1.96884144e-02
  2.80889049e-02  2.06952691e-02  6.76687360e-02  7.21712559e-02
  9.88252759e-02  3.88073623e-02  5.65554388e-02 -8.92010890e-03
  1.14915900e-01  3.63283455e-02 -4.29513529e-02  9.48545188e-02
  3.07964534e-02  9.21576247e-02 -4.12824713e-02  5.25055826e-02
  2.95115467e-02  7.07310662e-02 -3.62436809e-02  7.78571749e-03
 -1.02455989e-01 -4.75170761e-02 -2.29585618e-02  1.00763537e-01
  9.03757885e-02  5.71441054e-02 -7.09699616e-02 -3.26246880e-02
 -4.68538925e-02  5.32367937e-02 -6.19337447e-02  5.34997173e-02
  4.76849601e-02  4.55766097e-02  1.42639643e-02  4.60682549e-02
  6.13569357e-02 -3.48690823e-02  6.30864948e-02 -2.15719230e-02]"
"of the BTreeMap control
pub const BTREE_LENGTH: usize = 4;
/// Storage for the serialized BTreeMap container
pub const BTREE_STORAGE: usize = 1019;
/// Sum of all account state lengths
pub const ACCOUNT_STATE_SPACE: usize = INITIALIZED_BYTES + BTREE_LENGTH + BTREE_STORAGE;

/// Packs the initialized flag and data content into destination slice
#[allow(clippy::ptr_offset_with_cast)]
pub fn pack_into_slice(
    is_initialized: bool,
    btree_storage: &BTreeMap<String, String>,
    dst: &mut [u8],
) {
    let dst = array_mut_ref![dst, 0, ACCOUNT_STATE_SPACE];
    // Setup pointers to key areas of account state data
    let (is_initialized_dst, data_len_dst, data_dst) =
        mut_array_refs![dst, INITIALIZED_BYTES, BTREE_LENGTH, BTREE_STORAGE];
    // Set the initialized flag
    is_initialized_dst[0] = is_initialized as u8;
    // Store the core data length and serialized content
    let keyval_store_data = btree_storage.try_to_vec().unwrap();
    let data_len = keyval_store_data.len();
    if data_len < BTREE_STORAGE {
        data_len_dst[..].copy_from_slice(&(data_len as u32).to_le_bytes());
        sol_memcpy(data_dst, &keyval_store_data, data_len);
    } else {
        panic!();
    }
}

/// Unpacks the data from slice and return the initialized flag and data content
#[allow(clippy::ptr_offset_with_cast)]
pub fn unpack_from_slice(src: &[u8]) -> Result<(bool, BTreeMap<String, String>), Box<dyn Error>> {
    let src = array_ref![src, 0, ACCOUNT_STATE_SPACE];
    // Setup pointers to key areas of account state data
    let (is_initialized_src, data_len_src, data_src) =
        array_refs![src, INITIALIZED_BYTES, BTREE_LENGTH, BTREE_STORAGE];

    let is_initialized = match is_initialized_src {
        [0] => false,
        [1] => true,
        _ => {
            return Err(Box::<dyn Error>::from(format!(
                ""unrecognized initialization flag \""{:?}\"". in account"",
                is_initialized_src
            )))
        }
    };
    // Get current size of content in data area
    let data_len = u32::from_le_bytes(*data_len_src) as usize;
    // If emptry, create a default
    if data_len == 0 {
        Ok((is_initialized, BTreeMap::<String, String>::new()))
    } else {
        let data_dser = BTreeMap::<String, String>::try_from_slice(&data_src[0..data_len]).unwrap();
        Ok((is_initialized, data_dser))
    }
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# UsageThe following pulls it all together and demonstrates how the program interacts with the ProgramAccountState which encapsulates the initialization flag as well as the underlying BTreeMap for our key/value pairs.First when we want to initialize a brand new account:Rust/// Initialize a new program account, which is the first in AccountInfo array
fn initialize_account(accounts: &[AccountInfo]) -> ProgramResult {
    msg!(""Initialize account"");
","[ 4.43151817e-02  5.01738042e-02 -2.67058667e-02 -2.06835642e-02
 -6.33982867e-02 -2.97050662e-02  2.57519986e-02  1.75119843e-02
 -9.64633226e-02 -4.90147388e-03 -4.13165614e-03 -3.51289213e-02
 -1.80621408e-02 -1.56396758e-02  1.84939746e-02  7.02860057e-02
 -6.73799068e-02 -3.43520232e-02 -8.35574046e-03  1.68586280e-02
  5.82060143e-02  4.50900681e-02  2.14001964e-04  4.05312553e-02
  3.51423696e-02  2.47195549e-02 -2.61382479e-02 -4.25839014e-02
  3.26284692e-02 -5.19967116e-02  4.36147675e-02 -7.81372935e-03
  5.42975217e-02  3.39219868e-02  4.21456508e-02  1.23318350e-02
  2.43876055e-02 -7.24354088e-02 -2.43372694e-02  2.68419832e-02
  1.17999651e-02  1.16800301e-01 -5.90793751e-02 -5.15900645e-03
  1.49021577e-03 -1.65810939e-02 -5.50861768e-02  7.49689192e-02
 -3.47609334e-02  4.64841053e-02 -7.28165871e-03  7.26726800e-02
 -1.93091445e-02  7.62030780e-02  2.32735220e-02  5.88473789e-02
  2.33007353e-02 -8.55853036e-03  2.45299172e-02  3.57415639e-02
 -3.14575918e-02  1.17494529e-02 -6.61188911e-04 -3.75458449e-02
  5.11834398e-02  5.12785316e-02 -2.36763116e-02  5.80166392e-02
  2.09696349e-02  3.35570425e-02 -7.17171049e-03 -1.18230283e-02
 -6.22849017e-02  1.71256028e-02  7.88654666e-03 -5.26094921e-02
  1.03017772e-02 -3.34410486e-03 -4.85059917e-02 -1.52416844e-02
 -3.17255370e-02 -1.09858578e-02  5.04962280e-02  1.88100748e-02
 -5.99147789e-02 -2.84346584e-02 -9.13986862e-02  4.41007055e-02
 -1.52702378e-02 -2.17045210e-02  6.76403344e-02 -4.43552583e-02
 -7.02417865e-02 -5.46485651e-03  1.37360757e-02 -2.69740932e-02
  7.38771167e-04 -3.85295451e-02  5.37330247e-02  8.42215319e-04
  1.48415454e-02  7.65438378e-03  3.63396890e-02  2.24658754e-02
 -3.43187824e-02 -5.11607789e-02  3.24258246e-02 -4.31419648e-02
 -7.06837550e-02  4.90461253e-02  8.48371610e-02  9.06167999e-02
  2.00241208e-02  5.02597354e-02 -6.64147269e-03 -7.28326011e-03
 -1.04447827e-01 -2.40117796e-02  2.00990178e-02 -1.91163346e-02
  6.74962252e-02 -4.31793965e-02 -3.62896845e-02  8.46817717e-02
 -2.43662056e-02 -3.96021977e-02 -4.44904231e-02  5.38210705e-33
  4.51635979e-02 -6.93409443e-02  2.57202554e-02  1.03894271e-01
 -1.12101920e-02  4.48731892e-02 -3.25136061e-04 -2.91348714e-02
 -1.23121038e-01 -3.07092238e-02 -1.77297257e-02 -4.02397625e-02
 -1.57400593e-02 -1.24321021e-02  2.65894476e-02 -9.20678526e-02
 -1.52459489e-02  9.98089388e-02 -2.53061987e-02 -2.73897760e-02
  5.28384857e-02  1.16742983e-01 -3.52863111e-02 -7.53412172e-02
  5.15879951e-02 -9.59391147e-03 -5.28809577e-02 -2.47659571e-02
  2.66379025e-02  2.00182535e-02  1.13509204e-02  5.69454059e-02
  1.19554475e-02  4.87905694e-03  8.89403075e-02  1.87113825e-02
 -1.89569052e-02 -1.51780033e-02 -1.17066771e-01 -7.50291720e-02
  6.61699548e-02  4.29611169e-02 -3.65028791e-02 -2.83339359e-02
 -7.30748996e-02 -7.81232417e-02 -1.16002350e-03 -2.31304560e-02
 -1.75630152e-02  7.55799785e-02  5.52036874e-02  3.76288369e-02
 -1.15139760e-01 -6.12506457e-02 -4.76065185e-03 -6.65754601e-02
  3.27974409e-02 -4.86673377e-02  3.70643884e-02  1.06246494e-01
  1.62622612e-02  4.62582195e-03  3.17143761e-02  2.05261982e-04
  1.95701281e-03  2.42238846e-02  9.02895723e-03 -1.22861108e-02
  1.81460381e-02 -3.25815566e-02 -6.65383488e-02  3.03076953e-02
  6.73814258e-03  3.05022448e-02 -8.47016927e-03 -3.42529528e-02
  2.69921194e-03 -6.09273836e-03 -1.68965802e-01 -8.56517702e-02
 -3.95463966e-02 -7.95024857e-02 -5.39133884e-03 -1.98922073e-03
  2.58604530e-02 -1.28069982e-01  2.39912178e-02 -2.48901993e-02
 -2.83190701e-02 -2.76489854e-02 -3.83819975e-02 -5.50933294e-02
 -2.04033218e-03 -2.14588996e-02 -7.22209811e-02 -5.45285234e-33
 -4.52438183e-03 -1.16455972e-01  6.29349202e-02  4.44804356e-02
 -9.85969156e-02 -5.17833941e-02  7.64995068e-02  1.49200112e-02
 -3.58893573e-02  9.82081983e-03 -1.17557205e-01  5.25584966e-02
  6.34643957e-02 -1.31235663e-02  8.92781094e-02 -3.00449096e-02
 -1.53905461e-02 -3.80712859e-02 -1.47985788e-02  1.21959075e-02
  6.50297664e-03  4.21339972e-03  6.74638450e-02  8.14691558e-02
 -4.61546481e-02  3.61319594e-02 -2.52052434e-02  1.04240347e-02
  8.41656104e-02 -7.10972026e-02 -4.46624160e-02 -1.78754013e-02
 -5.20946793e-02  3.25404899e-03 -3.40405526e-03 -5.76689951e-02
  3.34615707e-02  9.19939205e-02  1.50184035e-02  4.49263975e-02
 -9.37584415e-03  3.14620025e-02 -9.17709097e-02 -3.98222320e-02
  5.42016607e-03 -1.27267251e-02  5.55971600e-02  7.81598464e-02
 -2.24859696e-02  1.91697001e-03  3.15340422e-02 -3.32259163e-02
  2.56232433e-02 -5.08484943e-03 -1.00815101e-02 -1.37768285e-02
 -1.12225590e-02 -4.13650237e-02  8.34267288e-02 -8.49146321e-02
 -3.59167457e-02 -5.62714078e-02  3.30410562e-02 -3.47385742e-02
  5.07307127e-02 -2.27950420e-02 -4.01646867e-02 -4.32392061e-02
 -1.55415786e-02  2.46581361e-02  2.50677243e-02  4.85577919e-02
  6.71785474e-02  2.89361253e-02  3.94378975e-02 -4.13804948e-02
 -3.96552160e-02 -8.04116577e-02  1.65230464e-02  5.17372750e-02
 -1.08339511e-01  8.56195018e-02  6.66633472e-02  9.36385617e-02
  6.58914074e-02  3.97803709e-02  4.41841483e-02  1.48516661e-02
 -3.36953104e-02 -3.25270779e-02 -5.48649542e-02  5.55686504e-02
 -1.85151491e-02  7.70188645e-02 -2.46473271e-02 -5.43409548e-08
 -1.05713107e-01 -4.54142578e-02 -6.07095398e-02  1.35879710e-01
  1.71587579e-02 -6.60492778e-02  6.44969493e-02  1.59600079e-02
  5.29588619e-03 -5.17918877e-02  1.90008078e-02  7.02434629e-02
 -8.71449336e-02 -1.11376420e-01  2.15987079e-02 -6.10839501e-02
 -2.59213503e-02 -9.98403654e-02 -2.80950218e-02  6.89200386e-02
  3.53466570e-02  2.51455754e-02 -1.35826999e-02  9.46042314e-02
 -3.97134991e-03  2.79855654e-02  4.43289541e-02  7.13005811e-02
  1.57148868e-01 -3.15964110e-02  9.80851129e-02  1.95398964e-02
  5.29453680e-02  9.81196314e-02 -5.99674247e-02 -4.36155573e-02
  3.81579227e-03  9.07775164e-02 -8.06046533e-04  3.85999307e-02
  4.51988243e-02 -3.67695540e-02  1.17224082e-03  1.18288184e-02
 -2.48557217e-02 -3.39997630e-03 -5.85731789e-02  1.17899835e-01
  6.05550222e-02  9.53641441e-03 -1.52301239e-02 -6.05425797e-02
 -3.92188095e-02  1.02702841e-01  2.15760935e-02 -8.22398067e-02
 -6.13351353e-03 -2.97970474e-02  6.06721230e-02  7.70366788e-02
  1.56717524e-02 -4.07235371e-03  2.04255227e-02  2.29036622e-02]"
"   let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Here we use unpack_unchecked as we have yet to initialize
    // Had we tried to use unpack it would fail because, well, chicken and egg
    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;
    // We double check that we haven't already initialized this accounts data
    // more than once. If we are good, we set the initialized flag
    if account_state.is_initialized() {
        return Err(SampleError::AlreadyInitializedState.into());
    } else {
        account_state.set_initialized();
    }
    // Finally, we store back to the accounts space
    ProgramAccountState::pack(account_state, &mut account_data).unwrap();
    Ok(())
}
1234567891011121314151617181920Now we can operate on our other instructions as the following demonstrates minting a new key value pair that we demonstrated above when sending instructions from a client:Rust/// Mint a key/pair to the programs account, which is the first in accounts
fn mint_keypair_to_account(accounts: &[AccountInfo], key: String, value: String) -> ProgramResult {
    msg!(""Mint to account"");
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Unpacking an uninitialized account state will fail
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    // Add the key value pair to the underlying BTreeMap
    account_state.add(key, value)?;
    // Finally, serialize back to the accounts data
    ProgramAccountState::pack(account_state, &mut account_data)?;
    Ok(())
}
1234567891011121314# How to deserialize account data on the clientClients can call Solana to fetch program owned account, in which the serialized data block is a part of the return. Deserializing requires knowing the data block layout.The layout of the account data was described HereTSPythonRustimport { serialize, deserialize, deserializeUnchecked } from ""borsh"";
import { Buffer } from ""buffer"";
import {
  Keypair,
  AccountMeta,
  Connection,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
  sendAndConfirmTransaction,
} from ""@solana/web3.js"";

// Flexible class that takes properties and imbues them
// to the object instance
class Assignable {
  constructor(properties) {
    Object.keys(properties).map((key) => {
      return (this[key] = properties[key]);
    });
  }
}

export class AccoundData extends Assignable {}

const dataSchema = new Map([
  [
    AccoundData,
    {
      kind: ""struct"",
      fields: [
        [""initialized"", ""u8""],
        [""tree_length"", ""u32""],
        [""map"", { kind: ""map"", key: ""string"", value: ""string"" }],
      ],
    },
  ],
]);

/**
 * Fetch program account data
 * @param {Connection} connection - Solana RPC connection
 * @param {PublicKey} account - Public key for account whose data we want
 * @return {Promise<AccoundData>} - Keypair
 */
export async function","[-7.26915002e-02 -1.49270426e-03 -1.88881345e-02  5.63922385e-03
  2.41234709e-04 -3.48511152e-02  7.73522854e-02  9.70955752e-03
 -2.61093751e-02 -3.72317024e-02  3.43427472e-02 -5.29891923e-02
 -2.61558238e-02 -3.78144206e-03  1.88766103e-02  8.05261265e-03
 -3.93478386e-02 -4.48370166e-02  2.83056181e-02 -1.98342167e-02
  3.79972495e-02 -2.26477701e-02  1.85613092e-02  5.91983721e-02
  4.38781306e-02  2.07731184e-02 -1.03432527e-02  5.99286705e-03
  8.10354203e-03 -5.82937114e-02  4.11342606e-02 -2.29320098e-02
 -4.12322506e-02  3.94702405e-02  5.74003905e-02  8.33493471e-02
 -4.68142256e-02 -4.00983207e-02 -4.48252223e-02 -3.74755003e-02
 -2.67077014e-02  6.37347177e-02 -9.11031440e-02  5.36274835e-02
 -3.29629630e-02  3.74995992e-02 -2.60410346e-02  7.32515054e-03
 -2.09518690e-02  3.69207258e-03  1.56763066e-02  2.88049784e-02
  1.53997884e-04 -2.16991436e-02  9.36233252e-02  7.60652572e-02
  4.37843986e-02 -4.41199094e-02 -3.15469615e-02  3.70686874e-02
 -8.70615095e-02  9.30391601e-04  1.61839463e-02  4.00443934e-03
 -4.40040650e-03  8.03475901e-02 -8.24777316e-03  5.18191829e-02
  4.37743105e-02  8.59466009e-03 -4.16623950e-02  2.27362532e-02
 -2.76714582e-02  3.59783024e-02 -2.24643182e-02  2.16526948e-02
 -2.85258703e-02 -4.92439838e-03 -1.41127827e-02 -6.30963743e-02
 -8.01880062e-02  3.98013974e-03  6.23270916e-03  6.94742203e-02
  1.01844715e-02  1.46576064e-03 -1.94372935e-03 -1.03278523e-02
  6.05911128e-02  1.13164941e-02  1.20202852e-02 -2.56516170e-02
  2.57699303e-02  8.21273252e-02  1.07626081e-01  7.33284280e-02
 -1.13099171e-02  7.05918530e-03 -5.98040782e-02  4.62502092e-02
 -3.19246054e-02  2.90501639e-02  1.01643585e-01  7.98228830e-02
  2.47319378e-02 -8.16729218e-02  5.96568510e-02 -9.24158171e-02
 -1.00146450e-01  3.02606747e-02  1.34781422e-02  8.25478062e-02
  2.52066161e-02  5.07467985e-02 -2.55859848e-02  1.20295351e-02
 -8.30904171e-02  3.89087424e-02 -7.79320896e-02  7.98368752e-02
  8.54956359e-02 -1.86589547e-02  4.86846790e-02  2.73822201e-03
 -9.45770666e-02  1.77083220e-02  1.28935399e-02  2.06399672e-33
 -5.16192243e-02 -9.12212878e-02 -4.97361794e-02  8.28373134e-02
 -8.04422498e-02  5.23874769e-03  1.73248872e-02  6.56538680e-02
 -1.17237456e-01  6.07787482e-02  3.04989889e-02  8.78565200e-03
 -8.26625600e-02  4.90543060e-02  3.84364165e-02 -5.78343160e-02
  3.14574167e-02  5.32771125e-02  6.58649132e-02 -8.79765768e-03
  6.13699481e-02  2.30902918e-02 -5.57090007e-02 -1.04784437e-01
  4.16373461e-02  3.92867737e-02 -6.30931780e-02  1.10481661e-02
 -5.21667823e-02  1.71455333e-03 -8.32105149e-03 -5.05252555e-02
  3.25734280e-02  2.51047034e-02  3.91848125e-02 -3.83119136e-02
  1.71176679e-02  3.02869151e-03 -7.54188895e-02 -2.22985484e-02
  1.44485936e-01  1.44897094e-02  4.91408817e-02  4.84232791e-03
 -1.83666814e-02 -7.11071268e-02 -2.36301851e-02 -2.64792284e-03
  3.58965956e-02 -2.85508391e-02  5.59397489e-02  4.27499525e-02
 -9.90590081e-02 -7.06044286e-02 -9.15442035e-02 -6.65941462e-02
  8.19712784e-03 -9.07373279e-02 -2.47338917e-02 -2.26580836e-02
 -4.05061245e-02  2.40708385e-02 -4.00357507e-02  2.93620061e-02
 -1.14675332e-02  3.72640565e-02 -8.01373422e-02 -5.11200130e-02
  4.87529812e-03 -2.91008689e-03 -3.75159420e-02 -3.66622210e-02
 -9.05839726e-02 -7.40091200e-04 -3.11441068e-02 -1.85364485e-02
  3.97332311e-02  4.06537671e-03 -5.97823001e-02 -5.87066114e-02
  9.42075700e-02 -5.92602454e-02 -1.23491056e-01  1.14716619e-01
 -4.48823236e-02  3.25872824e-02  2.14285459e-02 -1.94014926e-02
 -3.87792103e-02  7.40393400e-02 -1.22886430e-02 -6.63200319e-02
  3.33728269e-02 -6.63980767e-02 -1.66139267e-02 -4.43240679e-33
  5.88800423e-02 -5.41682467e-02  4.37928587e-02 -1.37968333e-02
  3.84539235e-05  1.03997923e-02  7.16840550e-02  7.47844353e-02
 -1.04284976e-02 -2.68431548e-02 -8.86247382e-02 -8.41362495e-03
  8.69900063e-02 -1.72246508e-02  7.96221197e-02  9.29337069e-02
 -7.47271031e-02 -1.21360235e-02  1.56453792e-02  3.78267914e-02
 -8.56419746e-03  5.19258976e-02  3.60473767e-02  2.47866623e-02
  1.59283914e-02  7.37632588e-02 -2.06325967e-02  2.43031867e-02
  3.28849070e-02 -3.40506174e-02 -1.90865044e-02 -5.34610562e-02
 -2.59831920e-02  3.47659998e-02 -5.86161129e-02 -7.81580582e-02
  1.96622889e-02  5.63020706e-02 -3.32429484e-02  5.10889478e-02
  1.09083384e-01  3.05309449e-03 -1.32395744e-01  2.86374465e-02
  9.66192409e-03  3.48099433e-02  3.10019292e-02  3.32320333e-02
 -2.47178017e-03 -9.33742244e-03 -2.68240832e-02 -2.96254102e-02
  4.72417846e-03 -1.82677638e-02 -3.44119072e-02  5.04405871e-02
  1.03236400e-01 -3.67139541e-02  4.94118556e-02 -6.59449846e-02
 -2.99882963e-02 -9.11262259e-02  8.20180774e-03  1.48230623e-02
  1.69028305e-02 -6.64888844e-02 -4.63944636e-02 -3.70959230e-02
  4.42215726e-02 -7.86605850e-03  6.26532361e-03  3.20775900e-03
 -5.20828515e-02 -1.17144600e-01  2.74055935e-02  6.24046735e-02
 -5.85101917e-02 -5.52438051e-02  3.70207764e-02  7.47405970e-03
 -8.84298980e-02  4.90309782e-02  3.67475580e-03  8.87469295e-03
  6.77869469e-02 -4.27867919e-02  5.24705239e-02 -2.06399914e-02
  2.31305361e-02  2.91157458e-02 -6.13935776e-02 -1.95143127e-03
 -2.09222138e-02  1.60601903e-02 -7.12284744e-02 -5.05239051e-08
 -5.70627376e-02 -9.95134935e-02  3.25462930e-02  1.38921633e-01
  9.61423814e-02 -6.64365217e-02 -4.97224554e-02  1.70094147e-02
 -2.72100698e-02 -5.00368476e-02 -1.43888500e-02  1.25586331e-01
 -7.96077400e-02 -3.81552568e-03 -4.56296802e-02 -1.82862306e-04
  6.53696153e-03  2.53040884e-02 -4.22005914e-02  3.66922468e-02
 -6.46411031e-02  6.60221428e-02  1.18682561e-02  2.90361494e-02
 -1.99099872e-02  7.24657765e-03  7.23216087e-02  8.67397338e-02
  1.15896240e-01 -7.08141504e-03  4.63849492e-02 -3.33561469e-03
  4.84648682e-02  7.80680263e-03 -7.85700828e-02  2.15929449e-02
 -8.13381094e-03  3.55670080e-02  6.03653863e-02 -4.15248349e-02
  4.15566191e-03  7.06575811e-02 -2.29698662e-02  1.51065206e-02
 -4.20170501e-02 -3.36527638e-02 -1.32813826e-01 -2.35757488e-03
  8.75638723e-02 -1.80668700e-02 -1.04020759e-01 -2.46610623e-02
 -3.84535417e-02  7.02082217e-02  1.17576253e-02 -5.01865409e-02
 -1.96603611e-02 -5.07765710e-02 -1.36104440e-02  5.17039336e-02
 -3.60483155e-02 -4.61382195e-02  3.49337026e-03 -6.98707774e-02]"
"getAccountData(
  connection: Connection,
  account: PublicKey
): Promise<AccoundData> {
  let nameAccount = await connection.getAccountInfo(account, ""processed"");
  return deserializeUnchecked(dataSchema, AccoundData, nameAccount.data);
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253from borsh_construct import CStruct, U8, U32, HashMap, String
from solana.rpc.commitment import Confirmed
from solders.pubkey import Pubkey
from solana.rpc.api import Client


# Schema to deserialize program's account data
account_schema = CStruct(
    ""initialized"" / U8,
    ""map_length"" / U32,
    ""map"" / HashMap(String, String)
)


def get_account_info(client: Client, account_pk: Pubkey):
    """"""Fetch account information from RPC, parse out the data and deserialize""""""
    res = client.get_account_info(account_pk, Confirmed, encoding='base64')
    return account_schema.parse(res.value.data)

# Results in or similar
# => Container:
# =>     initialized = 1
# =>     map_length = 109
# =>     map = {'Happy': 'New Year!', 'newKey': 'A new value',
# =>            'python key': 'python value', 'ts key': 'ts first value'}
12345678910111213141516171819202122232425use {
    arrayref::*,
    borsh::{BorshDeserialize, BorshSerialize},
    std::{collections::BTreeMap, error::Error},
};

#[allow(clippy::ptr_offset_with_cast)]
pub fn unpack_from_slice(src: &[u8]) -> Result<(bool, BTreeMap<String, String>), Box<dyn Error>> {
    let src = array_ref![src, 0, ACCOUNT_STATE_SPACE];
    // Setup pointers to key areas of account state data
    let (is_initialized_src, data_len_src, data_src) =
        array_refs![src, INITIALIZED_BYTES, BTREE_LENGTH, BTREE_STORAGE];

    let is_initialized = match is_initialized_src {
        [0] => false,
        [1] => true,
        _ => {
            return Err(Box::<dyn Error>::from(format!(
                ""unrecognized initialization flag \""{:?}\"". in account"",
                is_initialized_src
            )))
        }
    };
    // Get current size of content in data area
    let data_len = u32::from_le_bytes(*data_len_src) as usize;
    // If emptry, create a default
    if data_len == 0 {
        Ok((is_initialized, BTreeMap::<String, String>::new()))
    } else {
        let data_dser = BTreeMap::<String, String>::try_from_slice(&data_src[0..data_len]).unwrap();
        Ok((is_initialized, data_dser))
    }
}
123456789101112131415161718192021222324252627282930313233# Common Solana TS/JS MappingsThe Borsh Specification contains most mappings for primitive and compound data types.The key to TS/JS and Python is creating a Borsh Schema with a proper definition so the serialize and deserialize can generate or walk the respective inputs.Here we demonstrate serialization of primitives (numbers, strings) and compound types (fixed size array, Map) first in Typescript, then in Python and then equivalent deserialization on the Rust side:TSPythonRust#!/usr/bin/env node

import { serialize, deserialize, deserializeUnchecked } from ""borsh"";
import { Buffer } from ""buffer"";
import { expect } from ""chai"";
import { PublicKey, Struct } from ""@solana/web3.js"";

/**
 * Primitive extends the Struct type from Solana","[-6.02131933e-02 -1.03118587e-02 -1.44025669e-01 -1.22666163e-02
 -1.21393308e-01 -6.17666095e-02  4.21452373e-02  7.08600208e-02
 -9.13600903e-03 -6.97330385e-03  2.12418884e-02 -1.03170574e-01
 -2.72214171e-02 -4.77749109e-02  7.87372440e-02  1.49332331e-02
 -8.96675587e-02 -3.85264754e-02 -5.78269502e-03  7.16842990e-03
  4.38393168e-02  1.19841546e-02 -3.07194749e-03  3.33461799e-02
  3.04607358e-02 -3.67556252e-02  3.79275829e-02  2.91224364e-02
 -8.77734721e-02  2.38433890e-02  9.05128941e-02 -1.14326328e-02
  1.45352101e-02  2.59863455e-02  3.26564573e-02  6.06609546e-02
 -3.29026096e-02 -9.81035829e-03  5.39598688e-02 -3.67420614e-02
  1.97933912e-02  3.39239389e-02 -8.61782506e-02  3.99248935e-02
  6.05076738e-02 -3.23152654e-02 -5.29544055e-02  7.16877133e-02
  2.94374325e-03  1.45232603e-02 -6.14785515e-02  7.84186795e-02
 -6.61052316e-02  6.39408007e-02  2.76683215e-02  4.09794115e-02
 -7.87099730e-03 -3.90255675e-02  1.22748753e-02  5.12920041e-03
 -3.48809212e-02 -4.35668826e-02  1.70288682e-02 -5.92907071e-02
 -5.91180474e-02 -4.27318178e-02  1.64283137e-03 -1.01964138e-02
  4.98465188e-02  9.23303049e-03  6.36162758e-02 -8.24267939e-02
 -5.32215461e-02  3.92789440e-03 -8.47463384e-02 -3.82747464e-02
  5.98610938e-03  1.46910874e-02  1.70414732e-03 -8.84187315e-03
  5.73335215e-03 -7.01068714e-02 -2.85343006e-02  9.75763053e-02
 -2.08120253e-02  2.61780061e-02 -1.82088092e-02 -8.11274797e-02
 -4.25381176e-02 -1.85309872e-02  9.22052073e-04 -9.63624008e-03
 -8.23268592e-02 -1.78532321e-02  3.81983183e-02  4.34124582e-02
  1.63078662e-02  5.52821644e-02 -3.47633846e-02  6.68474957e-02
 -2.97518168e-02 -4.54632267e-02 -2.11016852e-02 -4.42928746e-02
 -5.11756763e-02 -1.29327867e-02  9.47779417e-02 -2.95074675e-02
 -6.65308088e-02  5.98107763e-02 -2.36834176e-02  2.48384178e-02
 -7.77781308e-02  4.30185124e-02  1.29071055e-02  7.31163546e-02
 -3.68050337e-02  6.19702637e-02  8.27059429e-03  1.03705879e-02
  7.89598450e-02  8.62182602e-02  5.39353378e-02 -4.16281819e-02
 -8.88842270e-02 -2.38656364e-02  3.85535834e-03  9.93355615e-33
  7.00858328e-03  3.68709210e-03  2.16465872e-02 -3.91970295e-03
  1.20763201e-02 -3.19908261e-02  1.88443251e-02  4.63967286e-02
 -9.21489224e-02  1.81165542e-02 -5.40690608e-02  2.81183813e-02
 -4.43566442e-02 -9.17544514e-02 -1.47504248e-02  4.48366478e-02
  2.57753767e-03  1.80692077e-02  4.09198552e-02  2.05119364e-02
  4.53596115e-02 -5.20119183e-02 -9.35738627e-03 -2.73738950e-02
  2.36176848e-02 -1.45741710e-02 -8.20578933e-02  1.61977801e-02
 -2.45512892e-02 -6.06103335e-03  2.61287857e-02  6.72695562e-02
  2.18316913e-02  5.91787277e-03  1.20099366e-01 -6.18016943e-02
 -2.14068685e-02 -1.31560005e-02 -1.10356726e-01 -4.22724187e-02
  4.57900837e-02 -3.93447652e-03 -1.82494782e-02  3.16677764e-02
 -8.22285339e-02 -1.73895899e-02  1.74729694e-02  7.17975944e-02
  7.98062235e-02  1.10046819e-01 -9.35475156e-03 -1.62761137e-02
 -7.11612552e-02  1.99809242e-02  4.17231172e-02 -4.11879048e-02
  2.01234203e-02  2.09718943e-02  2.00705212e-02 -8.49558040e-03
 -3.74346860e-02 -6.32780641e-02  2.37317011e-02 -4.82631549e-02
 -2.20846422e-02  2.27375515e-02 -4.49395701e-02  4.61197086e-02
 -2.39960756e-02 -1.47547172e-02  2.56144674e-03  5.83440103e-02
 -5.51024973e-02  1.59490835e-02 -1.15149403e-02 -4.97513339e-02
  1.13478601e-02  1.67762861e-02 -9.54966396e-02  6.50710380e-03
  5.07501960e-02 -6.44114800e-03 -5.20991571e-02  1.38747573e-01
 -5.11461236e-02  1.50865316e-01  8.39202255e-02 -3.13345641e-02
 -1.18820565e-02 -1.19256461e-02  4.90357205e-02 -6.29511103e-02
 -1.09680612e-02 -8.70345384e-02 -5.47127165e-02 -1.06929968e-32
  2.23756917e-02 -1.07024521e-01 -4.72091883e-02 -1.72446072e-02
  4.83305641e-02 -8.03027004e-02  2.88137347e-02  7.47192558e-03
 -9.77803487e-03 -9.58600640e-03  6.27655536e-02 -1.25498073e-02
  4.30459753e-02 -2.06147470e-02  5.16003221e-02  2.01457236e-02
  2.33593732e-02 -2.18548104e-02  2.75750388e-03 -7.44169727e-02
  1.55982524e-02  7.69536495e-02  2.08552312e-02 -1.04289934e-01
 -2.48155408e-02 -6.13641255e-02 -7.95163680e-03  8.60325992e-02
  1.68869514e-02 -3.81445438e-02  8.31557363e-02  2.63103042e-02
 -6.86070696e-02  5.79090714e-02 -6.39037713e-02 -6.98794350e-02
  9.32232291e-02  5.15836030e-02 -1.45406127e-02  4.21168022e-02
  5.79077937e-02  1.17464438e-02 -6.56162724e-02  1.57198180e-02
  2.88600996e-02 -6.22481517e-02  7.09855184e-02  1.16493516e-02
  1.14608975e-02  2.97472700e-02  1.37021035e-01 -6.18482567e-02
 -7.43227871e-03 -1.35892369e-02 -2.24216543e-02  2.98597645e-02
  8.42381939e-02 -8.79292116e-02  3.30658332e-02 -8.86855498e-02
  5.56204654e-03 -6.54818565e-02 -2.37940922e-02  1.46015659e-01
  6.00571893e-02 -5.51869236e-02 -5.07869199e-02 -1.71135142e-02
  1.00817084e-02 -3.15800495e-02 -1.68778785e-02 -8.70837048e-02
 -1.68835223e-02  6.92870766e-02  1.74838956e-02  2.17177477e-02
 -1.58435673e-01  7.74683757e-03  4.32897024e-02  6.00104146e-02
 -5.02424724e-02 -9.32005327e-03  5.87599650e-02  8.28840286e-02
  2.73959134e-02 -1.12242401e-01  6.15716092e-02  1.65466480e-02
 -8.39702114e-02  1.25531340e-02 -7.92768411e-03 -3.77736911e-02
 -2.96246056e-02  2.78857946e-02  5.69190364e-03 -6.55228760e-08
 -6.52409047e-02  1.43478699e-02 -7.89035764e-03  5.73907867e-02
  7.64198303e-02  5.85231744e-02 -1.93616450e-02 -5.13759404e-02
  3.01095434e-02 -3.75762545e-02 -8.35549384e-02  4.20599915e-02
 -3.18416841e-02 -3.28046232e-02  2.15108283e-02  8.77095107e-03
  6.81406930e-02  4.90401201e-02 -2.19866354e-02 -5.39608859e-02
 -1.57325864e-02 -8.02822318e-03 -3.44806500e-02 -6.04483411e-02
 -1.25667145e-02  5.69015406e-02  5.09482250e-02  1.33657351e-01
  1.46371629e-02 -8.57188553e-02 -2.16190424e-03 -6.14162311e-02
  1.27520218e-01 -1.71319619e-02 -3.84679437e-02  2.67763976e-02
 -1.71511841e-03 -5.40477689e-03  1.47269545e-02  6.56636804e-02
 -4.14730012e-02  3.23201083e-02 -3.73541899e-02  6.30415529e-02
 -1.26878708e-03  3.52128893e-02 -2.41158605e-02  7.36958757e-02
  6.12814687e-02  1.55915003e-02 -1.39627606e-02 -4.25487645e-02
  4.99342009e-02  1.67960934e-02 -6.30085692e-02  1.75014995e-02
 -4.09294441e-02  4.58198190e-02 -3.65855359e-02  2.87004896e-02
  2.01191027e-02  4.86488789e-02 -4.20913994e-02 -2.96728127e-03]"
"Library
 * for convenience of dynamic property setting
 * @extends {Struct} Solana JS Struct class
 */

class Primitive extends Struct {
  constructor(properties) {
    super(properties);
  }
}

/**
 * Entry point for script *
 */
async function entry() {
  // Emulate BTreeMap
  let map = new Map();
  map.set(""cookbook"", ""recipe"");
  map.set(""recipe"", ""ingredient"");

  // Setup a Primitive for all basic and a few
  // compound types
  const value = new Primitive({
    U8: 255,
    U16: 65535,
    U32: 4294967295,
    FIXED_STRING_ARRAY: [""hello"", ""world""],
    FIXED_U8_ARRAY: [1, 2, 3, 4, 5],
    MAP_STRING_STRING: map,
  });
  // Define our schema
  const schema = new Map([
    [
      Primitive,
      {
        kind: ""struct"",
        fields: [
          [""U8"", ""u8""],
          [""U16"", ""u16""],
          [""U32"", ""u32""],
          [""FIXED_STRING_ARRAY"", [""string"", 2]],
          [""FIXED_U8_ARRAY"", [""u8"", 5]],
          [
            ""MAP_STRING_STRING"",
            { kind: ""map"", key: ""string"", value: ""string"" },
          ],
        ],
      },
    ],
  ]);
  console.log(""Value = "", value);
  // Serialize then deserialize
  const dser = Buffer.from(serialize(schema, value));
  console.log(dser);
  const newValue = deserialize(schema, Primitive, dser);
  // Viola!
  console.log(""New value = "", newValue);
  console.log(""Fixed string array = "", newValue[""FIXED_STRING_ARRAY""]);
  console.log(""Fixed u8 array = "", newValue[""FIXED_U8_ARRAY""]);
  console.log(""Map = "", newValue[""MAP_STRING_STRING""]);
}

entry();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071from borsh_construct import U8, U16, U32, String, HashMap

# Schema to deserialize various types
primitive_schema = CStruct(
        ""U8"" / U8,
        ""U16"" / U16,
        ""U32"" / U32,
        ""FIXED_STRING_ARRAY"" / String[2],
        ""FIXED_U8_ARRAY"" / U8[5],
        ""MAP_STRING_STRING"" / HashMap(String, String)
)


def common():
    mapping = {""cookbook"": ""recipe"", ""recipe"": ""ingredient""}

    # Serialize
    dser = primitive_schema.build({
        'U8': 255,
        'U16': 65535,
        'U32': 4294967295,
        ""FIXED_STRING_ARRAY"": ['hello', 'world'],
        ""FIXED_U8_ARRAY"": [1, 2, 3, 4, 5],
        ""MAP_STRING_STRING"": mapping})
    print(dser)
    # => b'\xff\xff\xff\xff\xff\xff\xff\x05\x00\x00\x00hello\x05\x00\x00\x00world\x01\x02\x03\x04\x05\x02\x00\x00\x00\x08\x00\x00\x00cookbook\x06\x00\x00\x00recipe\x06\x00\x00\x00recipe\n\x00\x00\x00ingredient'
    # Deserialize
   ","[ 2.66037993e-02  7.52862990e-02 -1.22895828e-02  4.88250777e-02
 -8.63473639e-02  9.24005266e-03 -4.41417173e-02  3.74356583e-02
 -1.02726497e-01 -9.00517479e-02  3.13266087e-03 -5.58614843e-02
 -1.07699558e-01 -1.27656274e-02  8.49494636e-02  6.39176890e-02
 -3.38210166e-02 -7.03731105e-02 -7.05451816e-02 -4.94958609e-02
  5.86404912e-02  2.89084781e-02  1.02731418e-02  3.61515619e-02
 -8.77121743e-03  3.81709151e-02 -3.74857965e-03 -1.32873412e-02
  3.24276090e-03  1.65034551e-02  3.54331434e-02  3.87950614e-02
  4.18362208e-02 -1.20601552e-02  1.22645441e-02  1.48080075e-02
 -5.86162088e-03  1.78825371e-02  6.02852963e-02 -1.07898191e-02
 -4.21782807e-02  6.92260489e-02 -3.03714629e-02 -3.44994366e-02
  3.92733738e-02 -5.83179966e-02 -4.05908450e-02  1.29714776e-02
 -4.80256509e-03  2.33682953e-02 -4.94571924e-02  5.55225722e-02
 -2.49214862e-02 -2.49157019e-05  9.67284665e-03  7.46831670e-02
 -4.26624604e-02 -1.20944120e-02  6.16751462e-02 -5.47866337e-03
  1.71158975e-03 -2.32202373e-02  9.14184153e-02 -3.51600870e-02
  2.21789442e-02 -1.55750848e-02 -4.71967412e-03  8.03771690e-02
  1.74932778e-02  1.97331421e-02  1.03146225e-01 -2.55806427e-02
  8.17908645e-02  3.71371172e-02 -4.01202776e-03 -1.51576065e-02
  2.79466109e-03 -6.66177347e-02 -3.83183733e-02  1.86678767e-02
 -7.79653117e-02 -2.46005282e-02 -2.81560607e-02  2.22128630e-02
 -4.29069847e-02  2.43123490e-02 -1.89221967e-02 -2.29362175e-02
  6.68777376e-02  3.06386016e-02 -2.85019446e-02 -1.23977371e-01
 -6.42492399e-02  1.73407141e-02 -6.15309738e-03  9.43446998e-03
  4.69723716e-02 -8.41944590e-02 -2.41067577e-02  5.02089486e-02
 -6.38700975e-03 -1.58764515e-02 -1.54544401e-03 -4.39014956e-02
 -2.39041951e-02 -2.64793169e-02  3.11666727e-02 -4.68957312e-02
 -7.58925974e-02  5.12550026e-02 -4.48422087e-03  3.59184593e-02
 -2.73166317e-02  1.26233390e-02 -6.97962791e-02 -6.83788583e-02
  5.26065938e-03 -5.88984713e-02  5.47074527e-02  2.99840737e-02
  1.47845685e-01  5.55433780e-02  4.71065193e-02  1.07606268e-02
 -1.94014125e-02 -3.84535678e-02 -5.12916669e-02  3.67444253e-33
  8.06200355e-02 -9.58324596e-03  4.06881087e-02  1.21460155e-01
  5.37611693e-02 -3.87624428e-02 -3.73988179e-03  1.87253486e-02
 -1.22728266e-01 -6.78045349e-03 -3.41708437e-02  4.22034189e-02
 -6.67579398e-02 -1.99192390e-02  4.56046239e-02 -2.03533750e-02
  3.24429572e-03 -1.55685274e-02  3.33387814e-02  4.73026559e-03
 -5.04019968e-02  6.55760020e-02 -5.30833043e-02 -3.97772267e-02
  4.37767915e-02  1.70364585e-02  1.46440538e-02  7.24250674e-02
 -5.19385450e-02 -2.78785732e-03  1.07176006e-01  2.56144349e-02
 -6.11909144e-02  2.82775741e-02  5.54066375e-02 -1.22464597e-02
 -1.22996025e-01  7.10038980e-03 -7.36996830e-02 -5.54224700e-02
  5.43704554e-02 -2.82575842e-02 -3.28224078e-02 -7.76923355e-03
 -7.37558585e-03  1.17818601e-02 -1.37890745e-02  1.47431135e-01
 -1.93908438e-02 -3.93047482e-02 -4.07646485e-02  4.93756160e-02
 -5.91672771e-02 -6.59623509e-03  5.77028431e-02  4.17320877e-02
 -2.22127861e-03 -4.06925101e-03  4.01538052e-02  6.12380542e-02
 -1.62325818e-02  7.17636496e-02  2.28072749e-03  3.09690516e-02
 -7.79999420e-02  1.23016061e-02 -4.05700319e-02 -6.01294562e-02
  1.28517384e-02 -2.82910559e-02  3.61606777e-02  1.83642295e-03
 -4.17905003e-02  4.00118865e-02  1.53680425e-02 -2.41986737e-02
 -8.17783363e-03 -1.48010580e-02 -5.24884462e-02 -5.50412349e-02
 -2.86525767e-02 -8.99175406e-02 -3.63454223e-02  1.18367627e-01
 -3.77842635e-02 -3.57933417e-02 -1.05405562e-02  2.55222619e-03
  4.38136086e-02  2.51931921e-02 -1.51914880e-02 -5.21798357e-02
 -2.32351311e-02 -1.29965514e-01  2.23163422e-02 -3.93124800e-33
  6.83266856e-03 -1.04837239e-01  1.06712496e-02  9.14023519e-02
  7.20447600e-02 -1.05798937e-01  1.42958295e-02 -2.71774214e-02
 -2.63961556e-04  5.54281659e-02 -3.68708484e-02  3.44301686e-02
 -8.59592110e-03 -6.16090000e-02  2.67181974e-02  8.59332606e-02
 -2.37043877e-03 -4.00329009e-02  1.03652015e-01  2.45668157e-03
  7.47469440e-03  1.05077043e-01 -1.77896465e-03  5.90740098e-03
  1.62187894e-03 -1.66474264e-02 -3.82596627e-02  8.21657777e-02
 -5.57960458e-02 -5.99434227e-02 -2.39326637e-02 -6.41423091e-02
 -2.31281184e-02  4.43643890e-02  3.88571946e-03 -3.19139734e-02
  4.69979830e-02 -3.06814387e-02  2.76551880e-02  1.55185740e-02
 -6.65810779e-02  2.00117230e-02 -5.69468625e-02  4.98058535e-02
 -2.19238512e-02  1.25665665e-02  2.62807887e-02  6.12305254e-02
  1.63141061e-02 -3.07993870e-02  8.69930387e-02 -1.10832669e-01
 -5.62440939e-02 -6.92318529e-02  4.29486204e-03 -4.31162752e-02
 -2.22817659e-02 -7.06085190e-02  7.24458694e-02  7.17356727e-02
 -1.76467616e-02 -7.51653984e-02  7.72046298e-02  6.55714646e-02
  5.46419993e-02 -1.35243177e-01 -6.10021949e-02 -8.71338919e-02
  1.23365959e-02 -2.61664912e-02 -8.00580904e-03 -1.07368967e-02
  3.84615697e-02  3.43545787e-02 -8.86992202e-05 -4.40820716e-02
 -1.39084517e-03 -5.78300133e-02  6.09724298e-02 -3.41685563e-02
 -4.61153165e-02 -2.69303396e-02  4.46939804e-02  9.51156169e-02
  1.51052540e-02  6.50539156e-03  3.61398868e-02  4.72078137e-02
 -2.82759574e-04  8.92032385e-02 -1.08327018e-02  9.20508653e-02
 -5.20228297e-02  8.79733786e-02  9.45490785e-03 -5.96597758e-08
 -7.78562278e-02 -8.61049592e-02 -5.78957647e-02  5.65099530e-02
  3.29862460e-02 -5.17567098e-02  6.13841712e-02 -4.17780830e-03
  8.97346362e-02 -3.43982056e-02 -2.38880999e-02  8.00703019e-02
  4.32688706e-02 -1.16340453e-02  8.30300618e-04 -7.92272687e-02
 -1.57396719e-02  1.80740915e-02 -6.74242154e-02  6.56821653e-02
  1.48091182e-01  2.56783385e-02 -3.54734138e-02  9.02018789e-03
  6.93009719e-02 -5.21704890e-02  2.13962700e-03 -3.15596797e-02
  7.35941157e-02  4.11180407e-02  2.31515989e-02 -4.05903114e-03
  1.20821215e-01  9.75867286e-02 -5.13604544e-02 -4.69054319e-02
 -3.50640081e-02  1.08606433e-02 -2.03106478e-02  6.42360821e-02
  4.06606607e-02  3.54445353e-02 -1.02859966e-01 -7.88188912e-03
 -6.95238961e-03 -6.53475150e-02 -4.46359515e-02  9.11991447e-02
  3.81103717e-02  9.83482376e-02 -2.22519152e-02  5.67695536e-02
  5.62274978e-02 -1.80367436e-02  1.03739360e-02 -3.27892900e-02
  2.54687220e-02  1.71877388e-02  2.62183286e-02  1.70097891e-02
 -3.83249596e-02 -2.49500126e-02  1.29968841e-02 -1.65385883e-02]"
"new_value = primitive_schema.parse(dser)
    # Viola
    print(new_value)
    # => Container:
    # =>    U8 = 255
    # =>    U16 = 65535
    # =>    U32 = 4294967295
    # =>    FIXED_STRING_ARRAY = ListContainer:
    # =>        hello
    # =>        world
    # =>    FIXED_U8_ARRAY = ListContainer:
    # =>        1
    # =>        2
    # =>        3
    # =>        4
    # =>        5
    # =>    MAP_STRING_STRING = {'cookbook': 'recipe', 'recipe': 'ingredient'}
1234567891011121314151617181920212223242526272829303132333435363738394041424344fn main() {}

#[cfg(test)]
mod tests {
    use borsh::{BorshDeserialize, BorshSerialize};
    use std::collections::BTreeMap;

    #[test]
    fn primitives() {
        let prim = [
            255u8, 255, 255, 255, 255, 255, 255, 5, 0, 0, 0, 104, 101, 108, 108, 111, 5, 0, 0, 0,
            119, 111, 114, 108, 100, 1, 2, 3, 4, 5, 2, 0, 0, 0, 8, 0, 0, 0, 99, 111, 111, 107, 98,
            111, 111, 107, 6, 0, 0, 0, 114, 101, 99, 105, 112, 101, 6, 0, 0, 0, 114, 101, 99, 105,
            112, 101, 10, 0, 0, 0, 105, 110, 103, 114, 101, 100, 105, 101, 110, 116,
        ];
        #[derive(BorshDeserialize, BorshSerialize, Debug)]
        struct Primitive(
            u8,
            u16,
            u32,
            String,
            String,
            [u8; 5],
            BTreeMap<String, String>,
        );
        let x = Primitive::try_from_slice(&prim).unwrap();
        println!(""{:?}"", x);
    }
}
1234567891011121314151617181920212223242526272829# Advanced ConstructsWe've shown how to create simple Payloads in previous examples. Sometimes Solana throws a fastball with certain types. This section will demonstrate proper mapping between TS/JS and Rust","[ 4.64194119e-02  7.85711035e-02 -8.19712703e-04 -9.78734996e-03
 -2.37353928e-02 -1.76724792e-02  5.71504841e-03  4.95334156e-02
 -7.39050508e-02 -5.10217622e-02  9.04783681e-02 -8.44902173e-02
 -1.09051645e-01 -7.19281211e-02  2.84379292e-02 -1.50188226e-02
 -2.32406687e-02 -6.01824783e-02 -9.41905156e-02 -1.02358811e-01
  2.55676429e-03  7.29370117e-02 -4.88177165e-02  6.43560663e-02
 -2.74553336e-03  5.42043149e-02  1.94805320e-02  4.82063890e-02
  5.38163334e-02  3.30046639e-02  6.86534345e-02  5.13945892e-02
  5.38081266e-02  3.90174799e-02  1.04087085e-01  3.91348600e-02
  4.07697409e-02 -3.61474119e-02  4.91972733e-03 -4.87909839e-03
 -2.00540014e-02 -1.11727305e-02 -4.39441130e-02 -1.20829605e-02
 -8.40066932e-03  9.84977279e-03  2.10004821e-02  6.39397353e-02
 -8.53031967e-03 -1.33618787e-02 -6.16013538e-03  8.71639475e-02
 -3.61969098e-02 -2.77620181e-02  2.80257035e-02 -1.47521505e-02
  9.94380470e-03 -9.26335603e-02 -1.56759974e-02 -1.46552026e-02
 -3.27135064e-02 -3.42380404e-02  5.50934784e-02 -7.78401643e-02
 -9.13875527e-04 -4.63193767e-02  1.12527031e-02  2.01873090e-02
  5.74328192e-03 -3.57562564e-02  9.45500657e-03  2.65739430e-02
  1.58008058e-02  2.84780115e-02  1.29115339e-02  5.30558601e-02
 -1.40196749e-03 -1.56916097e-01  3.54519822e-02 -3.15174945e-02
 -1.06520988e-02 -3.54994349e-02  2.21520811e-02 -9.58046596e-03
 -5.65191321e-02 -4.08284180e-02 -4.20628265e-02  1.21270083e-02
  8.09470285e-03  3.01244035e-02  6.28921494e-04 -6.11510165e-02
 -6.08493425e-02 -5.49655687e-03  1.14895580e-02  7.21811354e-02
  5.58387227e-02 -5.18797599e-02  9.75915231e-03  7.54798651e-02
 -6.65304884e-02  3.38287614e-02  5.07310852e-02 -4.71377671e-02
 -1.03124902e-01  6.26259623e-03  5.13428524e-02  1.53405694e-02
 -1.95929278e-02 -2.30913199e-02 -1.24143632e-02  8.52613002e-02
  2.67107058e-02 -4.69990969e-02 -5.79209812e-02 -9.39969867e-02
 -4.76772785e-02 -5.03356680e-02 -1.10964803e-03 -2.52367882e-03
  5.47172725e-02  2.28650086e-02 -4.15078774e-02  9.06187519e-02
 -5.19707873e-02  7.54953967e-03 -4.75751348e-02  9.77820502e-33
  1.61575992e-02 -3.77578884e-02  5.30925095e-02  2.57625058e-02
  1.72559917e-02  1.84967816e-02 -1.88985563e-04  5.06553911e-02
 -4.98870835e-02  6.28612339e-02 -2.90733930e-02 -8.36371928e-02
 -5.11691906e-02 -1.32902553e-02  6.61295429e-02 -3.25298123e-02
 -1.86279472e-02  2.59873103e-02 -2.04298925e-02 -1.32462438e-02
  2.98968200e-02  1.30559308e-02 -2.05041971e-02 -6.11597560e-02
  3.22271548e-02 -7.90771004e-03 -4.04413678e-02 -1.50546692e-02
 -1.82622503e-02  1.17547624e-02  1.89715698e-02  9.67228319e-03
 -1.07738152e-02  2.30140565e-03  2.87140738e-02 -2.40624771e-02
  1.19791487e-02 -2.68636122e-02 -1.36374384e-01 -6.10306971e-02
  7.34107383e-03  6.09485386e-03  2.85227206e-02  3.44296768e-02
  3.13382037e-02 -4.00033295e-02 -8.79887789e-02  1.01493157e-01
  1.45630175e-02  9.79453907e-04  7.71203218e-03  4.93457578e-02
 -6.60064891e-02  4.64478694e-03  1.26233790e-02 -2.09315922e-02
 -4.61305305e-03 -3.87274139e-02  2.66919862e-02  6.92550391e-02
 -4.80108783e-02  1.32273644e-01 -5.29702865e-02  6.33906499e-02
  3.87512743e-02 -1.65691469e-02  5.49442954e-02  2.38199178e-02
  3.29882931e-03  3.94957662e-02 -7.22216144e-02  2.45553479e-02
 -3.33433412e-02  1.78150367e-02 -3.42188627e-02 -7.78721049e-02
  1.52965849e-02 -9.09674764e-02 -1.56778935e-02 -1.00689135e-01
  1.24486145e-02 -5.93687966e-02 -4.81593460e-02  5.61523736e-02
 -1.18548326e-01 -7.73920259e-03 -6.11842647e-02 -2.99306996e-02
  7.43276477e-02 -5.59644625e-02 -5.27851582e-02 -2.47543771e-02
 -1.01797106e-02 -1.22148760e-01 -3.32511216e-02 -1.21671519e-32
 -9.76780336e-03 -6.85377195e-02 -1.38776759e-02  4.25649509e-02
  6.64357468e-02 -8.42180774e-02  9.52538028e-02 -2.76024882e-02
 -1.56620843e-03 -3.43451789e-03 -1.30806770e-02 -3.09322160e-02
 -1.80179272e-02 -8.32929369e-03  2.15397514e-02  5.20507731e-02
 -9.55622196e-02  3.28091234e-02  5.68611063e-02  1.20711951e-02
  1.06257657e-02  1.52026206e-01  7.14543685e-02  5.64576946e-02
 -4.56082970e-02 -4.13398519e-02 -2.07313076e-02  5.23541458e-02
  3.13367089e-03  4.17118892e-02  3.81519385e-02  3.01496289e-03
  5.66201396e-02  7.16318861e-02 -4.46125977e-02 -3.15285698e-02
  5.48711047e-02  2.90356707e-02 -2.27870792e-02  2.88928561e-02
 -1.83449015e-02  5.73627017e-02 -1.28500089e-01  2.39308067e-02
 -1.70651879e-02  4.31579091e-02  4.44711000e-02 -7.10351206e-03
  3.52839082e-02 -6.00701943e-03  6.55181557e-02 -5.79656400e-02
 -6.76514283e-02 -4.15032096e-02  2.89880130e-02 -1.45346830e-02
 -5.57481535e-02 -1.12323187e-01 -2.26468593e-02 -1.80393849e-02
 -2.01694388e-02  3.96156684e-02  8.53086337e-02  6.19509742e-02
  1.62823096e-01 -6.01386875e-02 -7.52577111e-02 -2.44498495e-02
  1.12765376e-02 -7.55112097e-02 -1.51618188e-02 -1.52144907e-02
 -2.21120995e-02  3.84417363e-02  4.70152907e-02 -9.11743008e-03
 -6.60157278e-02  2.69036256e-02  4.91301119e-02  2.41614655e-02
 -4.39567231e-02 -5.18629663e-02  1.67809837e-02  9.01476145e-02
 -4.03377116e-02 -4.41681221e-02  6.09261319e-02  9.19851884e-02
 -6.91351593e-02  3.99251170e-02 -8.25187191e-03  4.35411893e-02
  3.46424356e-02  5.40864728e-02  6.90630451e-02 -6.20050571e-08
 -8.31000432e-02 -1.07415758e-01 -1.13998547e-01  3.97112668e-02
  9.71315987e-03 -4.17138599e-02 -8.42760131e-03 -9.17912051e-02
  1.91627722e-02 -4.26595137e-02 -6.07635006e-02  4.50650975e-02
 -4.63141128e-02 -7.98074603e-02  3.77911963e-02 -6.50457889e-02
 -1.79159883e-02 -4.87386473e-02 -6.24129251e-02 -2.38378998e-02
  4.81199734e-02  3.02686337e-02 -4.02589813e-02 -4.50140648e-02
  3.45003456e-02 -8.95976834e-03 -7.74314767e-03  3.77418287e-02
  1.07093886e-01  6.82349801e-02  1.23167403e-01 -3.65527458e-02
  9.47684702e-03  2.64460612e-02 -3.18849310e-02  1.40512176e-02
 -8.55707079e-02  1.30054718e-02 -7.57415371e-04  8.51980504e-03
 -4.51859049e-02  1.09445266e-02 -1.05853245e-01 -1.15505140e-02
 -8.80654715e-03 -1.28584534e-01 -4.42440389e-03  7.32466429e-02
  4.90824059e-02  2.02208478e-02 -5.62369600e-02  1.72739234e-02
  6.89485669e-02 -1.34170046e-02  3.56184281e-02 -6.66627437e-02
  1.34386607e-02  2.26013605e-02  2.51445249e-02 -2.59987880e-02
  8.85204747e-02 -6.14187717e-02  2.49089655e-02 -3.10904291e-02]"
"to handle those# COptionTSRust#!/usr/bin/env node

import { serialize, deserialize, deserializeUnchecked } from ""borsh"";
import { Buffer } from ""buffer"";
import { PublicKey, Struct } from ""@solana/web3.js"";

/**
 * COption is meant to mirror the
 * `solana_program::options::COption`
 *
 * This type stores a u32 flag (0 | 1) indicating
 * the presence or not of a underlying PublicKey
 *
 * Similar to a Rust Option
 * @extends {Struct} Solana JS Struct class
 * @implements {encode}
 */
class COption extends Struct {
  constructor(properties) {
    super(properties);
  }

  /**
   * Creates a COption from a PublicKey
   * @param {PublicKey?} akey
   * @returns {COption} COption
   */
  static fromPublicKey(akey?: PublicKey): COption {
    if (akey == undefined) {
      return new COption({
        noneOrSome: 0,
        pubKeyBuffer: new Uint8Array(32),
      });
    } else {
      return new COption({
        noneOrSome: 1,
        pubKeyBuffer: akey.toBytes(),
      });
    }
  }
  /**
   * @returns {Buffer} Serialized COption (this)
   */
  encode(): Buffer {
    return Buffer.from(serialize(COPTIONSCHEMA, this));
  }
  /**
   * Safe deserializes a borsh serialized buffer to a COption
   * @param {Buffer} data - Buffer containing borsh serialized data
   * @returns {COption} COption object
   */
  static decode(data): COption {
    return deserialize(COPTIONSCHEMA, this, data);
  }

  /**
   * Unsafe deserializes a borsh serialized buffer to a COption
   * @param {Buffer} data - Buffer containing borsh serialized data
   * @returns {COption} COption object
   */
  static decodeUnchecked(data): COption {
    return deserializeUnchecked(COPTIONSCHEMA, this, data);
  }
}

/**
 * Defines the layout of the COption object
 * for serializing/deserializing
 * @type {Map}
 */
const COPTIONSCHEMA = new Map([
  [
    COption,
    {
      kind: ""struct"",
      fields: [
        [""noneOrSome"", ""u32""],
        [""pubKeyBuffer"", [32]],
      ],
    },
  ],
]);

/**
 * Entry point for script *
 */
async function entry(indata?: PublicKey) {
  // If we get a PublicKey
  if (indata) {
    // Construct COption instance
    const coption = COption.fromPublicKey(indata);
    console.log(""Testing COption with "" + indata.toBase58());
    // Serialize it
    let copt_ser = coption.encode();
    console.log(""copt_ser "", copt_ser);
    // Deserialize it
    const tdone = COption.decode(copt_ser);
    console.log(tdone);
    // Validate contains PublicKey
    if (tdone[""noneOrSome""] == 1) {
      console.log(""pubkey: "" + new PublicKey(tdone[""pubKeyBuffer""]).toBase58());
    }
   ","[-1.11536846e-01 -1.06004411e-02 -1.27329722e-01 -2.05851421e-02
 -2.34891009e-02 -7.99844861e-02  5.49652800e-02 -2.93705706e-03
 -3.13450284e-02 -5.03985658e-02  2.76325103e-02 -7.09429160e-02
 -6.00582287e-02 -4.60009789e-03  8.96046758e-02 -1.39181875e-02
 -3.31073441e-02  1.13267498e-02 -3.48203070e-02  3.14135253e-02
  9.52035859e-02 -2.71265488e-02 -5.55598959e-02 -3.88818048e-02
 -8.48082080e-02  6.71093352e-03  4.49273475e-02 -7.59964958e-02
 -1.63697544e-02  6.06559403e-03  2.49344087e-03  3.37230973e-02
 -7.15313386e-03 -1.90892024e-03  1.28350696e-02  9.26321223e-02
  6.86590299e-02 -7.29482323e-02 -2.62370389e-02 -3.45548578e-02
 -2.28742063e-02  1.21362075e-01 -8.13012645e-02 -3.41869798e-03
  1.29631087e-02 -1.08423658e-01 -2.50428542e-02  2.58001313e-03
 -7.20022321e-02 -7.94005096e-02 -2.13353224e-02  5.47090024e-02
 -2.71866284e-02  7.18512153e-03 -3.57328402e-03 -5.91844022e-02
  1.40125549e-03 -1.03137679e-02  2.45026052e-02 -2.38938481e-02
  1.92477135e-03  2.30393708e-02  5.03712445e-02 -6.11004494e-02
  6.49022823e-03 -3.56771587e-03  1.80604383e-02 -2.15521194e-02
  4.86665070e-02 -7.92942755e-03  1.65263508e-02 -9.03360248e-02
 -4.32737917e-02  1.02364406e-01 -4.88011688e-02  4.67092954e-02
  5.66355139e-02  4.77933121e-04 -5.08538075e-02  8.66738614e-03
  3.94902974e-02 -6.49053752e-02 -1.39505314e-02  7.36066326e-02
  1.05039682e-02  5.65859824e-02 -1.09625891e-01 -5.87531403e-02
  3.67697142e-02  9.96987298e-02 -7.25041851e-02 -1.00460574e-01
 -7.84152225e-02  7.08648935e-03  2.23088041e-02  1.05338953e-02
  2.60755587e-02  1.06651932e-02 -1.22819829e-03  1.06958486e-01
  2.43123565e-02 -1.65232830e-02 -1.32449782e-02 -7.44463801e-02
 -5.24233244e-02 -1.09139122e-02  4.39159051e-02 -1.23518649e-02
 -5.68136349e-02  6.63704351e-02 -1.28093036e-03  5.20936772e-02
  1.13697089e-02 -5.14367037e-02 -2.64322348e-02  2.80807614e-02
  3.18994112e-02  4.71405126e-03  7.64401183e-02 -2.61266436e-02
  9.96012017e-02  9.43706185e-02  1.06102088e-02 -2.44086944e-02
  4.87382375e-02 -4.31247838e-02 -4.40989137e-02  7.99596531e-33
  5.45151830e-02 -3.09753604e-02  7.64666637e-03  3.44465412e-02
  2.12983843e-02 -5.09426855e-02  5.09462915e-02  1.56217562e-02
 -3.90608758e-02 -3.64269428e-02 -4.70586531e-02 -4.03189100e-02
 -1.39721492e-02 -7.45942071e-02  2.85801440e-02  1.48964766e-02
  4.93199145e-03 -2.96666659e-02  4.65638377e-02  5.46407234e-03
  5.38723730e-02  2.87315492e-02 -5.81821986e-02 -3.01555637e-03
  3.86486612e-02 -7.50736594e-02 -2.78388560e-02 -2.63167303e-02
 -2.46880017e-03  1.52179720e-02  1.83059927e-02  7.68242683e-03
 -7.80326268e-03  5.96715957e-02  3.58541384e-02  1.95655264e-02
 -4.31036502e-02 -7.94333406e-03 -1.09563202e-01 -1.27466083e-01
  6.46332279e-02 -4.08406649e-03 -6.72982559e-02  9.87253711e-02
  5.74470647e-02 -6.76578954e-02 -2.78566051e-02  5.11010028e-02
 -2.58106999e-02 -1.14578754e-02 -8.17849673e-03  6.70361295e-02
 -1.33266365e-02  2.40639877e-02  2.29646172e-02 -5.60793234e-03
  5.54268286e-02  1.54582048e-02  6.98209926e-03  7.34117255e-02
 -5.75208012e-03  3.52625512e-02  2.22467035e-02 -2.75301374e-03
 -6.72162091e-03  4.47930358e-02 -1.19545810e-01 -1.01356031e-02
  3.58557664e-02 -3.67618427e-02 -1.56429838e-02  6.46311641e-02
 -6.28394037e-02  6.38621598e-02  1.31494291e-02 -5.51746637e-02
  2.29990692e-03  4.54412512e-02  2.19160516e-04 -9.61972252e-02
  2.27620848e-03 -2.35010311e-02 -2.21640747e-02  1.53859928e-01
 -6.80355802e-02  2.80638430e-02 -9.70129017e-03  4.07278305e-03
 -2.70445179e-02 -4.49951692e-03  8.75669494e-02  3.62898526e-03
 -1.91284977e-02 -9.11740586e-02  8.85766745e-03 -1.01233074e-32
  5.47396056e-02 -1.53022353e-02 -5.77342510e-02  2.48844344e-02
 -8.99581537e-02 -3.30210030e-02 -5.01119457e-02 -3.40202674e-02
 -8.24391097e-02 -6.32865280e-02 -3.68772112e-02  1.28941946e-02
  1.13639995e-01 -1.75695047e-02 -2.84198229e-03  4.73209657e-02
 -1.87121425e-02 -1.00950614e-01 -1.38993757e-02  2.56715696e-02
  2.58452743e-02  1.13909971e-02  5.49269700e-03 -4.64745723e-02
 -1.33055840e-02 -3.98764238e-02 -6.01208806e-02  7.73253217e-02
  3.18756253e-02  6.02146983e-03  4.51251492e-02  2.73771565e-02
 -4.56146598e-02 -7.79075548e-02 -5.41554354e-02 -5.03939241e-02
  5.66150360e-02  9.65763479e-02  1.31171420e-02  7.24492148e-02
 -1.78219937e-02 -3.58477086e-02 -2.93741282e-02  9.99538004e-02
  4.99933772e-03  7.95374531e-03  4.19914834e-02 -3.42420377e-02
  6.77447906e-03 -1.90218687e-02  5.24633266e-02 -4.54338826e-02
 -2.92853992e-02 -4.57992628e-02  2.72805057e-02  1.41321784e-02
  5.31192794e-02 -4.62938249e-02 -1.48340035e-02  1.12294868e-01
  6.54411912e-02 -6.84370697e-02 -7.15954276e-03  4.96589430e-02
  5.97698428e-02 -1.56813562e-01 -4.16125916e-02 -3.86978164e-02
  4.86191958e-02 -5.13399392e-02  5.27773164e-02  2.63254307e-02
 -3.25550847e-02  2.78344695e-02  6.40515834e-02 -3.20231132e-02
  3.52988858e-03  4.97932220e-03  4.92599048e-02  5.51262423e-02
 -8.43649358e-02 -7.34249130e-03  2.71372721e-02  5.89443892e-02
  5.13737090e-02 -8.18116590e-02  1.70357116e-02  1.78812016e-02
 -8.30677375e-02  2.32211016e-02 -1.90155469e-02  4.28228043e-02
 -5.56547269e-02 -1.09171327e-02  3.45320394e-03 -6.01124412e-08
 -8.30134004e-02 -5.32350056e-02 -1.12596557e-01  1.03748403e-01
 -1.39197316e-02  7.76064247e-02 -6.77736253e-02 -3.80192548e-02
  5.86388558e-02 -8.00242424e-02 -5.26715927e-02  1.92205310e-02
  1.76433697e-02 -2.21150462e-02  5.10653369e-02 -2.48171017e-02
  3.47242430e-02  1.52804255e-02 -5.91510087e-02  2.35311911e-02
  4.79064919e-02 -3.37824225e-02 -1.07944705e-01  3.70834395e-02
  3.12942527e-02  3.92330636e-04  4.16894369e-02  6.45335615e-02
  3.24319005e-02  1.34372748e-02 -4.08611223e-02 -1.93961442e-03
  4.06650454e-02 -5.13091264e-03 -2.61298977e-02  5.25726238e-04
 -2.96042059e-02 -2.58224877e-03  3.11822649e-02  1.86239220e-02
  9.24171600e-03  2.22359821e-02 -1.94529146e-01  6.63683936e-02
  2.97806542e-02  5.20251645e-03 -7.49908295e-03  3.89541276e-02
 -3.19209844e-02  3.10866125e-02  4.06835303e-02 -3.83308865e-02
  1.01375028e-01  9.98141393e-02  2.71565672e-02  5.96732236e-02
 -4.74416837e-03  2.05907188e-02  1.97492465e-02  7.37832189e-02
  1.56666171e-02 -3.66341998e-03 -2.24509183e-02  5.52913360e-02]"
"/*
            Output:
            Testing COption with A94wMjV54C8f8wn7zL8TxNCdNiGoq7XSN7vWGrtd4vwU
            copt_ser  Buffer(36) [1, 0, 0, 0, 135, 202, 71, 214, 68, 105, 98, 176, 211, 130, 105, 2, 55, 187, 86, 186, 109, 176, 80, 208, 77, 100, 221, 101, 20, 203, 149, 166, 96, 171, 119, 35, buffer: ArrayBuffer(8192), byteLength: 36, byteOffset: 1064, length: 36]
            COption {noneOrSome: 1, pubKeyBuffer: Uint8Array(32)}
            pubkey: A94wMjV54C8f8wn7zL8TxNCdNiGoq7XSN7vWGrtd4vwU
        */
  } else {
    console.log(""Testing COption with null"");
    // Construct COption instance
    const coption = COption.fromPublicKey();
    // Serialize it
    const copt_ser = coption.encode();
    console.log(copt_ser);
    // Deserialize it
    const tdone1 = COption.decode(copt_ser);
    console.log(tdone1);
    // Validate does NOT contains PublicKey
    if (tdone1[""noneOrSome""] == 1) {
      throw Error(""Expected no public key"");
    } else console.log(""pubkey: null"");
    /*
            Output:
            Testing COption with null
            Buffer(36)[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, buffer: ArrayBuffer(8192), byteLength: 36, byteOffset: 2272, length: 36]
            COption { noneOrSome: 0, pubKeyBuffer: Uint8Array(32) }
            pubkey: null
        */
  }
}

// Test with PublicKey
entry(new PublicKey(""A94wMjV54C8f8wn7zL8TxNCdNiGoq7XSN7vWGrtd4vwU""));
console.log("""");
// Test without PublicKey
entry();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138fn main() {}

#[cfg(test)]
mod tests {
    use arrayref::{array_ref, array_refs};
    use solana_program::{program_option::COption, pubkey::Pubkey};

    /// Emulate how COption is 'unpacked'
    fn deser_option(data: &[u8]) -> COption<Pubkey> {
        // Map the data block
        let ain = array_ref![data, 0, 36];
        let (base, key) = array_refs![ain, 4, 32];
        // Get the SOME or NONE u32
        let nos = u32::from_le_bytes(*base);
        // Construct the COption accordingly
        let opt: COption<Pubkey> = if nos == 0 {
            COption::None
        } else {
            COption::Some(Pubkey::new_from_array(*key))
  ","[ 2.54110917e-02 -4.07582484e-02 -1.34486258e-01 -7.38055781e-02
 -7.67929181e-02 -3.27795856e-02  1.13760151e-01  1.39379250e-02
 -1.43558998e-02  3.22731468e-03  2.79588308e-02 -3.84837091e-02
 -1.66085828e-02 -6.46803435e-03 -5.93092432e-03 -4.04331088e-02
 -4.19797339e-02 -4.95970510e-02  5.46725048e-03 -6.34404272e-02
  6.17158897e-02 -1.81243401e-02 -5.47644645e-02 -6.39955550e-02
 -1.26470644e-02  3.43990028e-02 -2.90127695e-02 -2.20277347e-02
  1.93866119e-02 -2.41992101e-02  5.29495478e-02  1.23460665e-02
 -3.57047515e-03  4.07267474e-02  5.37715107e-02  2.81669982e-02
  7.03984350e-02 -3.36160958e-02  1.92481037e-02  3.77158485e-02
 -1.43842753e-02  4.52847779e-02 -3.21676955e-02  3.67940664e-02
  6.99012587e-03 -1.96289122e-02 -1.18279085e-01  1.97122786e-02
 -4.74560708e-02 -4.24661227e-02 -3.00654713e-02  1.09284788e-01
  7.98985548e-03 -6.27884194e-02  3.49320620e-02 -9.88865867e-02
 -1.96552277e-02 -2.90410798e-02  5.18452488e-02  1.55147109e-02
 -4.67075445e-02 -3.09655964e-02  1.03796888e-02 -2.19174195e-02
  4.44594882e-02 -3.50392163e-02  1.08899787e-01 -1.72368288e-02
  3.72248590e-02 -1.75472703e-02 -1.48145407e-01  3.35534848e-02
  1.04001453e-02  1.15228772e-01 -2.95693241e-02  2.92232167e-02
  6.01292215e-03 -2.00611483e-02 -2.48636883e-02 -5.14168516e-02
 -7.63433892e-03 -1.25580244e-02 -1.67245080e-03  7.88130760e-02
  3.86797972e-02  6.09157868e-02 -6.70478940e-02 -3.96520458e-03
  3.18194943e-05  3.13358717e-02 -6.43147305e-02  6.36780635e-02
 -1.12961240e-01  8.90832245e-02  3.49447019e-02 -2.17741821e-02
  5.77773303e-02  3.83173744e-03 -2.81457193e-02  8.42268243e-02
 -1.51203061e-02  3.05493083e-02  1.18094040e-02 -6.06021658e-02
 -2.45871600e-02 -2.71634338e-03  2.73390859e-03 -2.61608530e-02
 -1.18187154e-02  9.21967439e-03  3.45554552e-04  7.49310032e-02
  3.89106125e-02  8.94936919e-03  7.91656822e-02  1.70808602e-02
 -7.43061900e-02  2.15472803e-02  4.18399610e-02 -1.32180788e-02
  8.77909288e-02  4.35134843e-02 -7.35349506e-02  7.61027932e-02
 -2.53369454e-02  2.17835214e-02  2.90960874e-02  8.57512623e-33
  2.05637999e-02 -6.48191646e-02  2.85210870e-02 -7.49684684e-03
  2.46760491e-02  5.00921905e-02  3.27485129e-02  1.01982169e-01
  7.23311864e-03 -2.85666829e-05 -6.01070821e-02 -1.11106895e-01
  2.05738675e-02 -3.64170820e-02  4.22495902e-02 -1.97159443e-02
  2.61168554e-02  5.89187592e-02 -5.29693924e-02 -1.67398888e-04
  2.52995901e-02  8.66764933e-02 -2.23592408e-02 -6.57339767e-02
 -1.59706529e-02 -2.13284306e-02 -3.84931043e-02 -3.62591408e-02
 -1.97159331e-02  4.59088124e-02 -1.88642126e-02  6.77636117e-02
 -9.26108733e-02  1.81657784e-02  3.13288271e-02 -8.50819424e-02
 -2.19485424e-02 -4.86913836e-03 -2.52857469e-02 -1.50923254e-02
 -4.61511351e-02 -5.67174703e-02 -5.22023579e-03 -3.47389653e-02
 -1.55733991e-02 -1.32408738e-01 -8.52120444e-02 -4.19645524e-03
 -4.29327935e-02  2.80062705e-02 -3.36096026e-02  9.01327059e-02
 -5.61686186e-03 -2.00889036e-02 -1.90169103e-02 -5.97824119e-02
  4.62666415e-02  1.99740026e-02  1.00813834e-02  1.10113673e-01
 -7.83127621e-02  7.15437084e-02 -5.94437122e-02  1.03575336e-02
 -2.91139428e-02  1.35507928e-02 -9.94158210e-04 -4.20806557e-02
 -7.39856344e-03  2.36576013e-02  1.69902518e-02  3.60225625e-02
  4.70601358e-02 -5.25968298e-02 -3.63903912e-03 -2.75419001e-02
 -2.33009681e-02  7.23130954e-03 -4.84591313e-02 -1.42931312e-01
  4.84698862e-02  8.91105160e-02 -3.76864858e-02 -7.09244162e-02
 -2.37987731e-02  2.03741286e-02  3.87228414e-04 -5.62735600e-03
  4.92548198e-02 -4.66905236e-02 -6.77113906e-02 -4.22782637e-02
 -1.82833765e-02 -1.01849742e-01  1.87411290e-02 -1.04097592e-32
  5.91824166e-02  6.67194054e-02 -7.67459571e-02  6.62652701e-02
 -6.14609160e-02 -6.37657894e-03  9.15048122e-02 -6.81257397e-02
 -9.22174156e-02 -6.04449660e-02  2.35523134e-02  3.02245002e-02
 -1.36658475e-02  2.85823196e-02  4.25188355e-02  1.69139169e-02
 -5.07091247e-02  1.30440798e-02  1.44787394e-02 -1.35547842e-03
  5.21438196e-02  5.11787459e-02  6.52266666e-02  7.98390135e-02
 -3.84768168e-03 -5.15422001e-02 -3.14944275e-02  6.66545779e-02
  1.05362743e-01  3.29222456e-02  3.09594814e-02  7.92309046e-02
 -7.38002434e-02 -1.38659461e-03  9.87654179e-03 -5.30647412e-02
  9.12295431e-02  7.98456520e-02  2.45785527e-02  1.12526804e-01
  6.10447191e-02 -5.25621697e-02  4.75291163e-02  8.39089416e-03
  6.22726977e-02  5.75910285e-02  8.46596584e-02  1.71545483e-02
  1.26642939e-02 -2.25434396e-02  8.23886413e-03 -2.83953920e-02
  3.13468911e-02  6.92317039e-02  2.09398270e-02  4.37315926e-02
 -2.36342624e-02 -3.90102118e-02  4.81116474e-02 -1.26708706e-03
 -6.61537610e-03 -5.14048003e-02 -1.42144249e-03 -7.09742540e-03
  7.53051415e-02 -8.50715041e-02 -7.27148205e-02  1.30511280e-02
  1.17132375e-02 -4.00902964e-02 -2.75688674e-02  4.69025038e-03
 -1.05632851e-02 -1.91502292e-02  5.26311696e-02  1.93172656e-02
 -1.93851348e-02 -7.12743476e-02  1.72186922e-02  1.13027900e-01
 -3.47424485e-02  5.64032532e-02  8.39283966e-05  4.70338715e-03
  3.90700772e-02  1.80044658e-02  3.69042568e-02  3.70272733e-02
 -7.50943273e-02 -3.96909341e-02 -9.86531004e-03  1.06307611e-01
 -2.39536427e-02 -3.69551033e-02  1.50448354e-02 -6.76201424e-08
 -3.29381302e-02 -8.40111747e-02 -9.77492891e-03  7.28047490e-02
  5.85917756e-02 -6.41490221e-02 -2.72014905e-02 -4.61744033e-02
  1.80808771e-02 -1.37432635e-01  4.49090963e-03 -6.55123312e-03
  1.47585282e-02 -4.67444165e-03  4.13447060e-02 -6.12004623e-02
 -8.82352814e-02 -1.34318292e-01 -6.57424051e-03  5.75493462e-03
 -2.14049742e-02 -7.46768638e-02 -5.08631859e-03  2.84005124e-02
 -7.01991618e-02 -2.09164936e-02  4.22438607e-02  5.20383455e-02
  2.96634566e-02  1.10640554e-02  1.39312604e-02  4.04383577e-02
  2.82062143e-02 -7.74611756e-02 -3.26842889e-02  5.09521645e-03
  3.51362564e-02  4.39873412e-02  4.62388322e-02 -2.26841774e-03
 -2.33886708e-02 -1.50815621e-02 -8.39034840e-02  2.75733583e-02
  9.13438573e-02 -3.47771496e-02 -4.47957180e-02  1.35999601e-02
 -1.79900825e-02 -6.34816214e-02 -5.80631010e-02  4.98869531e-02
  5.06872982e-02  5.18947877e-02 -2.28881240e-02 -8.25894028e-02
 -5.61376214e-02 -6.34111017e-02  5.36061302e-02  1.72214672e-01
  1.56037789e-03  6.10747281e-03  4.33971360e-02 -3.57224084e-02]"
"     };
        opt
    }
    #[test]
    fn btest() {
        // From Typescript with borsh'ing
        let copt = [
            1u8, 0, 0, 0, 135, 202, 71, 214, 68, 105, 98, 176, 211, 130, 105, 2, 55, 187, 86, 186,
            109, 176, 80, 208, 77, 100, 221, 101, 20, 203, 149, 166, 96, 171, 119, 35,
        ];
        // Emulate COption deserialization
        let coption = deser_option(&copt);
        if coption.is_some() {
            println!(""{:?}"", coption.expect(""Uh-oh""));
        }
        // As a Borsh Struct
        #[derive(BorshDeserialize, BorshSerialize, Debug)]
        struct TOption(u32, [u8; 32]);
        let toption = TOption::try_from_slice(&copt).unwrap();
        let pkey = Pubkey::new_from_array(toption.1);
        println!(""Some = {:?} Pubkey = {:?}"", toption.0, pkey);
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142# ResourcesBorsh Specificationopen in new windowRust Borshopen in new windowTS/JS Borshopen in new windowPython Borshopen in new windowPython Borsh Documentationopen in new windowSolana CLI Program Template2open in new window #
Debugging Solana Programs

There are a number of options and supporting tools for testing and debugging a Solana program.

#
Facts

Fact Sheet

The crate solana-program-test enables use of bare bones local runtime where you can test and debug your program interactively (e.g. in vscode).
The crate solana-validator enables use of the solana-test-validator implementation for more robust testing that occurs on a local validator node. You can run from the editor but breakpoints in the program are ignored.
The CLI tool solana-test-validator runs and loads your program and processes transaction execution from command line Rust applications or Javascript/Typescript applications using web3.
For all the above, liberal use of msg! macro in your program is recommended at the start and then removing them as you test and ensure rock solid behavior. Remember that msg! consumes Compute Units which can eventually fail your program by hitting the Compute Unit budget caps.

The steps in the following sections use the solana-program-bpf-template. Clone that to your machine:

git clone git@github.com:mvines/solana-bpf-program-template.git
cd solana-bpf-program-template
code .

1
2
3

#
Runtime Testing and Debugging in editor

Open the file src/lib.rs

You'll see that the program is a pretty simple and basically just logs the content received by the program entrypoint function: process_instruction

Go to the #[cfg(test)] section and click Run Tests. This will build the program and then execute the async fn test_transaction() test. You will see the log messages (simplified) in the vscode terminal below the source.
running 1 test
""bpf_program_template"" program loaded as native code
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke [1]
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: 1 accounts, data=[1, 2, 3]
Program","[-9.66094807e-02  3.47865038e-02 -1.70107223e-02 -3.03427894e-02
  2.56436076e-02 -4.91087623e-02  7.52319247e-02  9.26222503e-02
 -7.04603270e-02 -4.98736873e-02  2.57776305e-02 -7.15221688e-02
 -9.47627202e-02  4.15393226e-02  7.00817630e-02 -1.65608376e-02
 -4.66182753e-02 -6.78713843e-02 -2.12250892e-02 -2.21057627e-02
  5.13280891e-02  9.33321491e-02  5.09145390e-03  7.15040863e-02
 -3.72917987e-02 -3.80853489e-02  2.00418048e-02 -1.29286675e-02
  5.09159714e-02 -4.34210710e-02  1.09247370e-02  4.08210717e-02
  7.26135001e-02  7.94185232e-03  3.45691219e-02  3.36048380e-02
  1.27316471e-02 -2.78751161e-02  4.00904231e-02  1.62838977e-02
 -5.97497970e-02  1.17733693e-02 -7.24940076e-02  2.50265915e-02
  3.84356156e-02 -3.01152598e-02  1.56160407e-02  5.18093668e-02
 -5.25796935e-02  5.20871952e-02  5.06708771e-02  1.28098696e-01
 -1.34176656e-03 -2.49280035e-03  4.47171479e-02 -3.83901410e-02
 -4.61228788e-02 -6.24569319e-02  4.82945517e-02  6.06230693e-03
 -8.20276812e-02  1.81029947e-03 -1.03676971e-02 -4.12261486e-02
  7.17011839e-02  4.62766588e-02  3.32048051e-02  5.32855056e-02
 -8.98567215e-03  6.46213517e-02  6.46664053e-02 -7.18495846e-02
 -1.72265563e-02  1.27504453e-01 -2.33389612e-04  5.72325103e-02
  2.82219369e-02 -2.00972650e-02 -2.02471465e-02 -9.16389469e-03
 -2.61734296e-02 -8.59832838e-02 -2.01292075e-02  7.97628686e-02
 -3.23792361e-02  6.66504428e-02 -6.63597882e-02 -2.61779949e-02
  2.72807636e-04  2.94911047e-03 -5.33022881e-02 -5.62297702e-02
 -1.34590924e-01  3.91633250e-02  1.68468878e-02  3.07229161e-02
 -1.24371303e-02 -3.25709507e-02  3.66258658e-02  1.06554873e-01
 -3.01008299e-02 -3.23081315e-02  5.57271615e-02 -9.83180553e-02
 -1.32328451e-01 -6.46375790e-02  7.34003633e-02 -3.34464498e-02
  2.31594257e-02 -5.56984358e-03  9.76380706e-03  4.93402220e-02
  7.65923709e-02 -2.54216418e-02 -5.54535910e-02 -6.73938775e-03
 -4.42571305e-02 -1.34876985e-02  3.00347488e-02 -6.50497675e-02
  8.71952698e-02  5.21930680e-02 -2.43076887e-02  4.07620147e-02
 -2.56401151e-02 -5.64692169e-02  1.39641147e-02  1.09099082e-33
  3.50062996e-02 -3.72627452e-02  4.34045633e-03 -3.51660401e-02
  1.45890228e-02  1.83251183e-02  6.94147544e-03  2.53969966e-03
 -1.02930591e-01  2.58335564e-02 -1.10414401e-02 -5.07288724e-02
 -2.56073475e-03 -5.45670912e-02  7.74649978e-02 -4.14700806e-02
  5.75752817e-02  1.65238101e-02 -1.62207112e-02  5.47284856e-02
  9.02055129e-02  8.06113556e-02 -7.51688033e-02 -4.71758507e-02
 -2.44058128e-02 -1.32045448e-02 -3.00413761e-02 -6.96831895e-03
 -2.10526381e-02  1.03846891e-02 -4.11621854e-03  5.31307384e-02
 -2.87541170e-02 -1.37235178e-02  3.93117070e-02 -7.82623515e-02
 -6.57667369e-02  1.64099075e-02 -9.50452089e-02 -8.66081342e-02
  6.49947375e-02  1.77565608e-02 -7.87957460e-02  8.72312114e-02
  5.79924807e-02 -9.19098780e-02 -1.23719964e-02 -3.67695093e-02
  8.72948859e-03  1.35800440e-03  5.24905287e-02  3.70655656e-02
 -5.68329617e-02 -1.18943667e-02  8.73338133e-02  5.11779590e-03
  5.84673062e-02  6.76585883e-02  6.70169964e-02  5.89944310e-02
  3.88708226e-02  7.02495128e-02  4.52390453e-03  5.92888158e-04
 -2.90434230e-02 -8.01995955e-03 -6.55195192e-02 -3.04428115e-02
  1.28645310e-02 -5.55026457e-02 -1.87821202e-02  4.52278517e-02
 -3.69898938e-02  7.66641460e-04 -3.66294533e-02 -3.76712009e-02
  5.53029869e-03  1.64697617e-02  7.49194771e-02 -1.55962259e-01
  7.77327828e-03  1.66411735e-02 -2.74216589e-02  8.25891346e-02
 -3.46826762e-02  3.84048447e-02 -4.48911190e-02 -4.66634557e-02
  1.98529917e-04 -9.04148538e-03 -2.18368378e-02 -9.35772583e-02
 -2.01630015e-02 -1.13406844e-01 -2.51472797e-02 -2.12681881e-33
  3.19227502e-02  5.24668070e-03  1.76094919e-02  6.70179278e-02
 -1.19535170e-01 -3.15162055e-02  9.88721400e-02  8.12202320e-03
  7.14545092e-03 -3.86448018e-02  3.64223868e-02  3.17997672e-02
  3.71594653e-02 -3.14546674e-02  6.78811818e-02  5.49649354e-03
 -9.14279222e-02 -3.85870077e-02 -1.31240459e-02  7.38676870e-03
  4.04806621e-02  8.98172520e-03  3.28990072e-02  2.23051645e-02
 -5.57817109e-02  7.63000250e-02 -3.39168310e-02  9.95796621e-02
  8.11444297e-02 -1.12548750e-02 -4.27872576e-02  4.23809476e-02
 -3.49591561e-02  4.67366837e-02  1.90446246e-02 -1.88485049e-02
  8.88622403e-02  1.13584772e-01  3.03738527e-02  1.56892892e-02
 -1.87680740e-02 -1.17163612e-02 -2.47124881e-02 -4.38872911e-03
 -7.38611538e-03  5.83436750e-02  5.67312725e-02  3.10840062e-03
  2.78668106e-02 -1.93050373e-02  5.59008569e-02  1.28413388e-03
 -3.02860308e-02 -2.63367165e-02 -2.74260286e-02 -5.87543547e-02
 -2.41032783e-02 -1.29343510e-01  5.57656446e-03  2.55639050e-02
  2.16031503e-02 -6.84760585e-02  5.72795123e-02  3.03961374e-02
  4.35274057e-02 -1.11257836e-01 -9.89311934e-02 -3.02793682e-02
  5.64150773e-02 -8.94204993e-03 -1.68262832e-02  2.30852235e-03
 -1.64007172e-02  1.12354364e-02  8.51969793e-02 -2.31821369e-02
  9.39975143e-04 -5.57797514e-02  7.39842579e-02  5.53451665e-02
 -1.10166818e-01  1.53125133e-02 -3.43349949e-02  5.07605076e-02
  5.82092777e-02  4.18900652e-03 -9.62843560e-03  8.46602768e-03
  1.57887787e-02 -4.62859403e-03 -1.14111863e-02  1.74749848e-02
  7.02074021e-02  1.72248241e-02  6.72983006e-03 -5.98710486e-08
 -9.34814587e-02 -1.09223232e-01 -5.50681688e-02  3.51426117e-02
  1.17021082e-02 -3.73235755e-02 -5.51387072e-02 -8.67714211e-02
  2.38261353e-02 -1.42341420e-01 -3.49774882e-02  5.53080849e-02
 -1.60506871e-02 -7.98656940e-02  6.23820201e-02 -3.32148001e-02
  3.64818834e-02 -4.44561318e-02 -4.15609293e-02  5.82803227e-03
  3.27522308e-02 -1.32543445e-02 -3.98835242e-02  9.08499677e-03
 -4.26110215e-02  3.12358830e-02  1.43416850e-02  7.25679249e-02
  5.30298948e-02  1.64401699e-02  8.40056092e-02  1.75665598e-02
  3.07000522e-02  3.75329591e-02 -4.91487933e-03 -3.50067485e-03
  3.57140787e-03  6.79758564e-02  6.41932478e-03  1.70610156e-02
  3.17125209e-02 -3.15105841e-02 -1.58558980e-01  3.92277576e-02
  7.35734729e-03 -7.33670443e-02  1.46833407e-02  5.67090437e-02
  3.19417752e-02 -3.80295664e-02  1.18212597e-02 -2.00658739e-02
  1.58688631e-02  5.44665009e-02 -3.83678377e-02 -4.74868901e-02
 -2.81791389e-03 -2.66222041e-02 -2.38429848e-02  5.97816519e-02
  7.30568767e-02 -4.40735109e-02  1.54905450e-02  2.90795462e-03]"
"4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success
test test::test_transaction ... ok
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 33.41s

1
2
3
4
5
6
7

Set a breakpoint on the programs msg! line (11)
Back in the test module, click Debug and within seconds the debugger will stop on the breakpoint and now you can examine data, step through functions, etc., etc..

These tests are also run from the command line with: cargo test or cargo test-bpf. Of course any breakpoints will be ignored.

How groovy can you get!

Note

Keep in mind you are not using a validator node so default programs, blockhashes, etc. are not represented or will not behave as they would when running in validator node. This is why the gang at Solana gave us Local Validator Node testing!

#
Local Validator Node Testing in editor

Integration testing using programmatic loading of a local validator node is defined in the tests/integration.rs file.

By default, the template repo integration tests will only be runnable from the command line using cargo test-bpf. The following steps will enable you to run within the editor as well as displaying program validator logs and msg! outputs from your program:

In the repo directory run cargo build-bpf to build the sample program
In the editor, open tests/integration.rs
Comment out line 1 -> // #![cfg(feature = ""test-bpf"")]
On line 19 change it to read: .add_program(""target/deploy/bpf_program_template"", program_id)
Insert the following at line 22 solana_logger::setup_with_default(""solana_runtime::message=debug"");
Click Run Test above the test_validator_transaction() function

This will load the validator node then allowing you to construct a transaction (the Rust way) and submit to the node using the RcpClient.

The program's output will also print out in the editor terminal. For example (simplified):

running 1 test
Waiting for fees to stabilize 1...
Waiting for fees to stabilize 2...
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke [1]
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: 1 accounts, data=[1, 2, 3]
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM consumed 13027 of 200000 compute units
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success

test test_validator_transaction ... ok
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 6.40s

1
2
3
4
5
6
7
8
9
10


Debugging here will allow you to debug the functions and methods used in the test body but will not breakpoint in your program.

The bee's knees eh?

#
Local Validator Node Testing from Client Apps

Lastly, you can start a local validating node and load your program and any accounts using the solana-test-validator from the command line.

In this approach, you will need a client application either using Rust RcpClient or in JavaScript or Typescript clients

See solana-test-validator --help for more details and options. For the example program here is vanilla setup:

Open a terminal in the repo folder
Run solana config set -ul to set the configuration to point to local
Run solana-test-validator --bpf-program target/deploy/bpf_program_template-keypair.json target/deploy/bpf_program_template.so
Open another terminal and run solana logs to start the log streamer
You can then run your client program and observe program output in the terminal where you started the log streamer

Now that is the cat's pajamas YO!

#
Resources

solana-program-bpf-template
open in new window

RcpClient
open in new window

JavaScript/Typescript Library
open in new window # Account MapsMaps are data structures we frequently use in programming to associate a key with a value of some kind. The key and value could be any arbitrary type and the key acts as an identifier for a given value that is being saved.","[-2.64683086e-02  1.10055991e-02 -4.32427898e-02  1.22611960e-02
  1.36648426e-02 -7.04287365e-02 -3.72582935e-02  1.79420728e-02
 -6.68495521e-02 -1.13126580e-02  1.88942589e-02 -8.61485973e-02
 -2.12744367e-03 -5.57110719e-02  2.81061716e-02 -7.16740787e-02
  2.27346644e-02 -5.25689684e-03 -3.19794156e-02 -2.04188935e-02
  1.56276617e-02 -5.27339727e-02 -4.36770655e-02  3.32424371e-03
 -3.62524539e-02  1.91213470e-02 -7.74260163e-02  2.60385498e-03
  3.54321278e-03 -5.69358133e-02  5.34700230e-02  2.11820137e-02
 -6.22856244e-02  1.11722060e-01  1.18269816e-01  9.84802842e-02
  8.09874609e-02  4.27708495e-03 -3.53279263e-02 -1.87694989e-02
  1.29385153e-03 -1.70277874e-03 -3.36290225e-02 -3.17651108e-02
  7.51970783e-02 -1.04940876e-01 -5.60673848e-02 -6.88750623e-03
 -8.07272196e-02 -5.92482695e-03 -4.81591895e-02  2.16535609e-02
  3.09444238e-02  6.09346963e-02  8.17549080e-02  2.24158657e-03
  4.04552035e-02 -2.28145625e-02 -8.25366750e-03  2.06055138e-02
  1.82596762e-02  1.22110602e-02 -1.30838910e-02 -3.67602669e-02
 -5.17397523e-02  3.40217352e-02  4.66498248e-02 -3.91928069e-02
  5.43564856e-02 -1.49012869e-02 -1.10216491e-01 -2.98831277e-02
 -8.93678442e-02  2.83528306e-02 -2.60097702e-04  8.54536667e-02
 -4.13687900e-02 -7.10708601e-03  3.44553054e-03 -9.60637704e-02
 -5.23495339e-02 -4.28180844e-02  4.26824670e-03 -7.45587982e-03
 -5.08437790e-02  9.69361216e-02  5.60967177e-02  2.96971556e-02
  5.06464243e-02  7.51743466e-02  7.74605572e-02 -7.80790672e-03
 -9.76919830e-02 -8.22032616e-03  9.21349600e-02  4.79042120e-02
 -1.90726295e-02 -2.65280176e-02  6.62600920e-02  2.84214895e-02
  3.73416357e-02 -1.12274718e-02  5.40851243e-02 -8.06614384e-03
  3.69978398e-02 -5.85819315e-03  7.09825307e-02 -5.22775203e-02
 -4.24661115e-02 -1.54579924e-02  1.23274634e-02  6.40530065e-02
  5.31261265e-02 -3.21107768e-02  4.22898605e-02  9.82054323e-03
  6.88669924e-03  5.87238632e-02 -8.93436149e-02  5.73873818e-02
  3.10946684e-02  5.93588762e-02  2.34709736e-02  3.30160446e-02
  1.73387975e-02  7.65501261e-02  1.49732698e-02  1.32464357e-32
 -9.65736061e-03 -1.01483308e-01  4.92751002e-02  2.37056911e-02
  1.38239535e-02  1.52141834e-02 -5.86144626e-03  8.52126032e-02
  2.05397829e-02  4.12658788e-02 -6.13349006e-02 -2.18777899e-02
 -3.51631865e-02 -6.81136325e-02  3.45742144e-02  4.53911349e-02
 -8.42749253e-02 -7.68734813e-02 -1.21491831e-02  3.23990360e-02
  6.42258972e-02 -2.00403541e-01 -3.58516462e-02 -2.10486259e-02
  6.64997613e-03  5.40766977e-02 -6.11000583e-02  2.91780615e-03
  2.20553372e-02  3.63939442e-02 -1.32911339e-01 -6.00972436e-02
  6.62377011e-03  1.07901752e-01 -2.30154605e-03 -1.19374907e-02
 -4.17694747e-02 -2.90445182e-02 -9.17492807e-02 -4.57858481e-02
 -7.44371638e-02 -6.60544261e-02 -4.64172587e-02  2.13281512e-02
 -1.61221400e-02 -8.90151411e-02 -6.01928495e-02  1.78677626e-02
  1.30204439e-01  2.15087608e-02  5.39017469e-03  4.05488983e-02
  2.96350215e-02 -9.30049866e-02 -5.63548319e-02  7.51508623e-02
  7.24501163e-02 -1.07755484e-02 -1.45463962e-02  5.25132678e-02
 -6.62717223e-02  3.68376523e-02 -3.23511735e-02 -2.53020246e-02
  9.04203579e-03  2.24328577e-03 -8.57797191e-02 -9.34642926e-02
  1.60273965e-02  4.94379960e-02 -1.53670544e-02 -2.05636043e-02
  2.35918127e-02  6.99839965e-02  7.75784850e-02 -3.93749960e-02
 -1.76963207e-04  6.71625584e-02  1.52282640e-02 -5.78374751e-02
  3.97212356e-02 -5.02785929e-02 -3.87072237e-03 -4.42063138e-02
  4.40945029e-02 -9.59378947e-03 -1.03499638e-02 -6.47651032e-02
  1.71007533e-02 -1.12155557e-01  3.51203829e-02  2.37290561e-02
  1.03155412e-02 -5.10257371e-02  6.38014302e-02 -1.22859202e-32
  8.04026723e-02  5.28929830e-02 -1.05581349e-02  7.13560581e-02
 -1.19700348e-02 -5.25562949e-02 -2.26007253e-02 -4.16808352e-02
 -7.98421353e-03  1.22397961e-02 -2.59994064e-03 -5.09060882e-02
 -1.88444220e-02  1.90398879e-02 -7.85165131e-02 -8.50261189e-03
  1.33394152e-02 -8.49691555e-02  3.55176739e-02 -6.82389084e-03
  7.53684528e-03  4.92523499e-02 -6.58301171e-04  5.23637934e-03
 -7.55766854e-02 -3.41703519e-02  2.77485084e-02 -5.41380467e-03
 -3.50033119e-02 -2.49283593e-02  7.90207535e-02  4.97866943e-02
 -1.44508267e-02  6.60196766e-02  3.87731940e-02 -9.53321010e-02
  6.21910729e-02  7.47577772e-02  9.58617590e-03  1.58025417e-02
  5.38009629e-02  8.84022862e-02 -5.94895817e-02  8.23642761e-02
  1.62936421e-03  7.93241784e-02  3.53027717e-03  2.28063148e-02
 -3.08451019e-02 -3.13154683e-02 -2.68016122e-02  1.12879267e-02
  1.40509671e-02  5.65167516e-02 -2.11679395e-02  3.11926790e-02
  3.70171778e-02  1.02791255e-02 -1.28962189e-01  3.03022899e-02
 -6.16339706e-02  2.85010114e-02  4.09389809e-02  7.50216618e-02
  3.13211046e-02 -3.19395959e-02 -7.93313980e-03  3.27915773e-02
 -2.99796127e-02 -4.38133739e-02  6.06964948e-03 -3.17522027e-02
 -5.48647493e-02 -1.94572611e-03  6.48360699e-02  4.64921333e-02
 -8.32449049e-02 -9.39301550e-02  5.86457402e-02  2.17749155e-03
  2.97858343e-02  2.44698650e-03 -7.27917850e-02  6.86612502e-02
 -2.64854673e-02 -1.11809382e-02 -1.65884644e-02  1.17477909e-01
  4.10895273e-02  1.37306424e-02 -3.19264606e-02  7.53321126e-02
 -6.84770942e-02 -2.59401035e-02  1.43978111e-02 -6.67232740e-08
 -5.82000278e-02 -8.55037645e-02 -9.07107294e-02  1.21365665e-02
 -7.21894996e-03  7.87926838e-02 -4.75969985e-02  1.06336018e-02
 -2.71683955e-03 -3.39997821e-02 -2.33335737e-02  3.88140581e-03
 -8.87882113e-02  2.43731756e-02 -6.07064087e-03 -3.70678529e-02
  7.31969848e-02  3.51669528e-02 -4.02249657e-02 -3.94961685e-02
 -3.81550156e-02  1.93677284e-02  1.92426909e-02  7.63390511e-02
 -6.96156779e-03  8.15060828e-03  4.56848517e-02  8.06423500e-02
  8.37601628e-03 -4.85107899e-02  4.20896858e-02 -6.27593499e-06
  3.66136767e-02  1.71860810e-02 -2.26087552e-02  1.21323951e-01
  4.62419949e-02  1.11431234e-01  8.12555030e-02  1.10759772e-01
 -3.98527831e-02  4.75181229e-02 -5.03682867e-02 -5.38952053e-02
 -7.03259110e-02 -1.92078315e-02 -9.32243839e-02  3.84661667e-02
  2.84501649e-02 -1.75703000e-02  1.01552019e-02 -1.41653866e-02
 -3.02106421e-02  4.70714383e-02 -4.35211062e-02  8.13002978e-03
 -2.33650189e-02 -2.52997521e-02  1.39406761e-02  1.99221559e-02
  1.00916605e-02 -1.10434433e-02  5.66536859e-02 -1.46674905e-02]"
"It then, given its key, allows us to efficiently insert, retrieve and update these values efficiently.Solana's Account model, as we know, requires program data and its relevant state data to be stored in different accounts. These accounts have an address associated with them. This, in itself, acts as a map! Learn more about Solana's Account mode hereopen in new window.So, it would make sense to store your values in separate accounts, with its address being the key required to retrieve the value. But this brings up a few issues, such as,The addresses mentioned above are most probably not going to be ideal keys, which you could remember and retrieve the required value.The addresses mentioned above, referred to public keys of different Keypairs, where each public key (or address) would have a private key associated with it as well. This private key would be required to sign different instructions if and when needed, requiring us to store the private key somewhere, which is most definitely not recommended!This presents a problem many Solana developers face, which is implementing a Map-like logic into their programs. Let's look at a couple of way how we would go about this problem,# Deriving PDAsPDA stands for Program Derived Addressopen in new window, and are in short, addresses derived from a set of seeds, and a program id (or address).The unique thing about PDAs is that, these addresses are not associated with any private key. This is because these addresses do not lie on the ED25519 curve. Hence, only the program, from which this address was derived, can sign an instruction with the key, provided the seeds as well. Learn more about this hereopen in new window.Now that we have an idea about what PDAs are, let's use them to map some accounts! We'll take an example of a Blog program to demonstrate how this would be implemented.In this Blog program, we would like each User to have a single Blog. This blog could have any number of Posts. That would mean that we are mapping each user to a blog, and each post is mapped to a certain blog.In short, there is a 1:1 mapping between a user and his/her blog, whereas a 1:N mapping between a blog and its posts.For the 1:1 mapping, we would want a blog's address to be derived only from its user, which would allow us to retrieve a blog, given its authority (or user). Hence, the seeds for a blog would consist of its authority's key, and possibly a prefix of ""blog"", to act as a type identifier.For the 1:N mapping, we would want each post's address to be derived not only from the blog which it is associated with, but also another identifier, allowing us to differentiate between the N number of posts in the blog. In the example below, each post's address is derived from the blog's key, a slug to identify each post, and a prefix of ""post"", to act as a type identifier.The code is as shown below,AnchorRustPress </> button to view full sourceuse anchor_lang::prelude::*;

declare_id!(""2vD2HBhLnkcYcKxnxLjFYXokHdcsgJnyEXGnSpAX376e"");

#[program]
pub mod mapping_pda {
","[-3.77287716e-02 -2.50675809e-02 -1.22006588e-01 -1.77587699e-02
 -8.34927633e-02 -5.34497835e-02 -7.36016221e-03  7.06442690e-04
  9.02376603e-03 -2.51950286e-02  2.83609349e-02 -6.93630287e-03
  4.91575561e-02 -6.93389475e-02  8.46245661e-02  4.94362935e-02
 -1.08820543e-01  1.33291036e-02 -6.26000091e-02  2.64017768e-02
  3.56087908e-02 -3.10280975e-02 -5.81976250e-02 -5.70098357e-03
 -2.58479360e-02  5.46186157e-02  8.24984834e-02  6.50462583e-02
 -3.17409262e-02 -1.65564399e-02  1.15914568e-01  1.28486529e-02
 -2.19401494e-02  3.99283580e-02 -4.19393107e-02  3.25123146e-02
 -4.90732901e-02  4.76889759e-02 -1.17174909e-02 -5.97124882e-02
 -3.90965752e-02 -1.11235268e-02 -2.78262757e-02  4.04180810e-02
  9.10027977e-03  1.26891304e-03 -2.02519372e-02  4.64115925e-02
  2.25626156e-02 -2.06110273e-02 -5.95160155e-03  1.58976670e-02
 -9.16548073e-02  4.35071774e-02 -1.19131515e-02  7.37545267e-02
  3.02234292e-02 -5.93893565e-02 -1.77257676e-02  3.95384766e-02
 -1.46723995e-02  5.32703847e-02  4.79415096e-02 -2.06715018e-02
  1.85439233e-02 -6.32329807e-02 -5.51561825e-02 -1.26736686e-02
  2.99840979e-02 -3.27201858e-02 -7.63084879e-03 -2.30914857e-02
 -9.76967253e-03 -5.20099625e-02 -6.43091574e-02 -4.75591496e-02
 -4.57752310e-02 -3.80712301e-02 -2.80052945e-02  2.89700832e-02
  5.29824756e-02  1.03084454e-02 -1.06024984e-02  5.13612367e-02
 -1.95792262e-02 -2.68661566e-02 -3.69714908e-02 -5.69240674e-02
  4.70000468e-02  3.22464071e-02  2.50064675e-02 -6.06916957e-02
  6.55591339e-02 -1.83731839e-02  1.15905702e-01  5.93248159e-02
  7.20680133e-02 -7.70742400e-03 -3.49928886e-02  3.32572944e-02
  6.70906752e-02 -2.13760305e-02 -5.61023224e-03 -3.22477520e-02
  4.38255630e-02 -5.02106659e-02  1.14271142e-01 -3.73899601e-02
 -7.77097046e-02  3.88624072e-02  4.74652322e-03  7.95386452e-03
 -1.57585032e-02  3.48761491e-02 -5.78678697e-02  4.71517667e-02
 -1.52177028e-02  9.07795876e-02  4.05798992e-03 -2.47553438e-02
 -6.89054430e-02  2.58744732e-02  5.67399748e-02 -7.43427724e-02
 -1.35175176e-02 -1.19205546e-02 -9.42066759e-02  3.51763966e-33
  1.64747015e-02  4.80216704e-02  3.22060473e-03 -1.64631731e-03
 -1.60844624e-02 -3.69494669e-02 -4.89181094e-02  2.49993522e-03
 -4.32122797e-02 -2.85658203e-02 -7.68396119e-03  1.04519933e-01
  1.46777537e-02 -5.81198791e-03 -1.45119904e-02  7.01213405e-02
 -9.37591679e-03  7.15292394e-02 -1.03007276e-02 -8.83805566e-03
  3.85812786e-03 -5.03249280e-02  1.84395642e-03  7.73840304e-03
  1.17141709e-01  5.43507226e-02 -4.41761874e-02  8.47298279e-02
 -1.22007150e-02 -3.61818820e-02  1.87439425e-03  3.15959677e-02
 -1.87365562e-02  1.33074066e-02  1.33552700e-01  6.49334639e-02
  2.09256541e-02 -1.00868553e-01 -2.50258110e-02 -7.03964382e-02
  7.26770908e-02  1.58400275e-02  3.08899097e-02  2.44050529e-02
 -5.18452227e-02  2.46238764e-02 -2.95626353e-02  1.52100801e-01
  6.05484769e-02  5.07979058e-02 -1.87966302e-02  3.04246135e-02
 -1.21600769e-01  1.76357701e-02 -4.88356762e-02 -1.48970382e-02
 -3.88717912e-02 -4.43188995e-02  2.99520344e-02  4.55703214e-02
 -8.69999081e-02 -4.63133231e-02  4.53835465e-02  7.84243494e-02
  6.76594116e-03  1.37995733e-02 -2.79308576e-02  8.11145306e-02
  5.22616096e-02 -5.08845299e-02 -9.74249188e-03  2.13217805e-03
 -8.12013075e-02  2.08920408e-02 -2.90176068e-02 -9.48121585e-03
  4.31069024e-02  3.44220027e-02 -8.84546787e-02 -1.51005862e-02
  6.27911016e-02 -1.36023434e-02 -7.21669272e-02  1.44001871e-01
  1.16417538e-02  1.87002383e-02 -1.41702015e-02 -4.96302173e-02
 -5.97302243e-02 -5.97348204e-03  6.86314106e-02  3.60373780e-02
 -3.38270590e-02 -4.66005802e-02  1.51150189e-02 -5.56521711e-33
  6.92650303e-03 -8.98130536e-02 -7.24641383e-02 -5.48540801e-02
  3.70549634e-02 -4.23714444e-02  6.62507191e-02 -1.06433555e-01
 -5.19859158e-02 -5.34219034e-02 -1.67368948e-01 -2.50139507e-03
  6.26182631e-02 -7.28644356e-02 -3.64048108e-02  3.33957784e-02
  3.74719426e-02 -1.12040807e-02  1.14601078e-02 -6.28734455e-02
 -1.05896732e-02  8.26188847e-02  1.30955875e-02 -2.23597046e-02
  1.03484653e-02 -3.75427902e-02 -6.14656247e-02  1.76116806e-02
 -8.32804143e-02  4.85404134e-02  8.63873810e-02 -6.74447343e-02
 -1.51508190e-02 -3.42777073e-02 -5.98330274e-02 -6.71851262e-02
  1.06465966e-02 -7.20168557e-03 -4.66063764e-04  1.17944784e-01
  2.76175532e-02 -1.82381552e-02  2.81999335e-02  3.31684239e-02
  2.10080799e-02  4.15493622e-02 -4.60569467e-03 -3.41631286e-03
 -9.00882706e-02  5.15110884e-03  6.83700666e-02 -8.07421133e-02
 -9.21720192e-02 -5.47530800e-02  1.57560091e-02  5.13573624e-02
  6.07884629e-03  6.90025315e-02  6.16323948e-02 -4.80137467e-02
  2.84325127e-02 -5.67193478e-02  3.09427176e-02  1.64368793e-01
 -1.89312771e-02 -8.89009833e-02  6.06711023e-02 -8.14613476e-02
 -5.75409532e-02 -4.65899110e-02  2.15421394e-02 -1.37967333e-01
  2.40915194e-02  3.14513743e-02 -4.08701189e-02 -1.68622332e-03
 -1.44922594e-02  5.08036651e-02 -2.38237139e-02 -1.78499650e-02
 -3.36651281e-02 -7.71877309e-03  3.01599372e-02  5.03021926e-02
 -1.90023147e-02 -3.00232004e-02  9.21323597e-02 -3.69891934e-02
 -3.97011489e-02  4.23193723e-02 -3.72793432e-03  8.73507932e-02
 -8.67460147e-02  4.03374061e-02 -6.29995391e-02 -5.68611007e-08
 -2.98672989e-02  1.63704138e-02 -3.22999507e-02  7.82571882e-02
 -8.36932138e-02 -7.77080143e-03  4.64064293e-02 -1.26054930e-03
  2.42647529e-02  4.22800407e-02 -1.32660456e-02  2.70347726e-02
 -4.76228632e-02 -5.64647578e-02  2.08566412e-02  4.48810719e-02
  9.26083699e-02 -2.50048339e-02 -4.12370376e-02 -2.89096255e-02
  3.70855033e-02 -1.83207914e-02  1.54203847e-02  7.97072947e-02
  3.83891389e-02  3.03602335e-03  3.36436704e-02  5.28544076e-02
  4.12087888e-02 -4.45848852e-02  3.09913699e-02 -1.82500556e-02
  1.00355752e-01  5.48311509e-02 -1.35027580e-02  1.44818081e-02
 -3.48230153e-02 -2.98071168e-02  1.06604733e-02  3.86448652e-02
  4.24241647e-04 -1.07901748e-02 -4.03505042e-02 -1.14820211e-03
 -2.43068766e-02  2.18222421e-02 -1.22849178e-02  1.19222626e-02
  9.11621004e-02 -1.08962962e-02 -6.95512593e-02  7.48558389e-03
  5.49399182e-02  4.37698252e-02  4.38146666e-02  2.52592582e-02
 -5.53209856e-02  1.11960508e-01  4.71987426e-02  6.10919250e-03
 -1.47829065e-02  3.42269018e-02 -9.87368599e-02 -8.73609853e-04]"
"   use super::*;
    pub fn initialize_blog(ctx: Context<InitializeBlog>, _blog_account_bump: u8, blog: Blog) -> ProgramResult {
        ctx.accounts.blog_account.set_inner(blog);
        Ok(())
    }

    pub fn create_post(ctx: Context<CreatePost>, _post_account_bump: u8, post: Post) -> ProgramResult {
        if (post.title.len() > 20) || (post.content.len() > 50) {
            return Err(ErrorCode::InvalidContentOrTitle.into());
        }

        ctx.accounts.post_account.set_inner(post);
        ctx.accounts.blog_account.post_count += 1;

        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(blog_account_bump: u8)]
pub struct InitializeBlog<'info> {
    #[account(
        init,
        seeds = [
            b""blog"".as_ref(),
            authority.key().as_ref()
        ],
        bump = blog_account_bump,
        payer = authority,
        space = Blog::LEN
    )]
    pub blog_account: Account<'info, Blog>,

    #[account(mut)]
    pub authority: Signer<'info>,

    pub system_program: Program<'info, System>
}

#[derive(Accounts)]
#[instruction(post_account_bump: u8, post: Post)]
pub struct CreatePost<'info> {
    #[account(mut, has_one = authority)]
    pub blog_account: Account<'info, Blog>,

    #[account(
        init,
        seeds = [
            b""post"".as_ref(),
            blog_account.key().as_ref(),
            post.slug.as_ref(),
        ],
        bump = post_account_bump,
        payer = authority,
        space = Post::LEN
    )]
    pub post_account: Account<'info, Post>,

    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub system_program: Program<'info, System>
}

#[account]
pub struct Blog {
    pub authority: Pubkey,
    pub bump: u8,
    pub post_count: u8,
}

#[account]
pub struct Post {
    pub author: Pubkey,
    pub slug: String, // 10 characters max
    pub title: String, // 20 characters max
    pub content: String // 50 characters max
}

impl Blog {
    const LEN: usize = 8 + 32 + 1 + (4 + (10 * 32));
}

impl Post {
    const LEN: usize = 8 + 32 + 32 + (4 + 10) + (4 + 20) + (4 + 50); 
}

#[error]
pub enum ErrorCode {
    #[msg(""Invalid Content or Title."")]
    InvalidContentOrTitle,
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#[derive(Accounts)]
#[instruction(blog_account_bump: u8)]
pub struct InitializeBlog<'info> {
   ","[-1.15143796e-02 -2.23586825e-03 -8.11831802e-02  3.16677019e-02
 -2.35626642e-02 -2.48772558e-02  4.57650498e-02  5.14618121e-02
 -4.24347892e-02  3.28406394e-02  1.57679003e-02 -5.24067245e-02
  7.27747008e-02 -4.97165602e-03  1.76699776e-02 -5.52387442e-03
 -9.46940482e-02 -3.03699840e-02 -1.24984281e-02  6.13971278e-02
  6.93902969e-02  5.37221059e-02  2.74709072e-02  7.61889145e-02
  3.26701775e-02 -8.31033140e-02 -1.18301839e-01 -2.07998008e-02
  8.52645487e-02 -3.75326611e-02  1.19398221e-01 -1.13923782e-02
  1.75780224e-04  4.38794121e-02  9.52346995e-02  8.69312361e-02
  2.01916858e-03 -1.08296730e-01  1.10612288e-02  4.76277852e-03
 -6.97178766e-03 -2.81023122e-02 -6.90824166e-02  2.47326978e-02
  3.27201560e-02  1.50477393e-02  2.65849326e-02  3.01979799e-02
  1.24195116e-02  7.81384762e-03 -3.04719955e-02 -1.07776849e-02
 -1.83560569e-02 -7.40834400e-02 -1.28068412e-02  1.11573763e-01
 -6.97715655e-02  1.26244640e-02 -6.05134945e-03 -5.47721684e-02
 -1.35033792e-02 -3.68311182e-02 -1.39138550e-02 -4.84477058e-02
 -1.90118533e-02  5.88812865e-03 -2.21222248e-02  4.08404954e-02
  2.17844937e-02  4.21299562e-02 -1.93863586e-02  6.58846870e-02
 -6.81225210e-02  7.74732381e-02 -3.56790163e-02  3.90361100e-02
 -2.86732689e-02  5.39897680e-02 -7.45122135e-02 -9.41122323e-02
  8.12267736e-02  4.41023931e-02  1.62964724e-02  1.31229553e-02
  1.11839166e-02  6.30691834e-03  8.95627961e-02  7.97857647e-04
  1.24380123e-02  7.75539055e-02 -3.80643853e-03  2.80425855e-04
 -1.21685385e-03  2.75325347e-02  4.54655625e-02  3.01148444e-02
  1.52011113e-02 -2.11207923e-02 -1.60351656e-02  1.19898304e-01
  7.38090277e-03  4.28364202e-02  1.44482600e-02  5.51147684e-02
  3.48168127e-02 -3.75784822e-02 -3.56584638e-02  3.44827846e-02
 -5.65984286e-02 -2.06693970e-02  3.87400575e-02  7.80487359e-02
 -5.15231863e-02 -5.19941710e-02  8.71243253e-02  3.44688036e-02
  5.73869236e-02 -9.51934084e-02  1.40738869e-02 -3.41159292e-02
  1.06166273e-01  2.14249436e-02 -1.50180841e-02  1.77016556e-02
 -1.08379573e-01 -5.15149422e-02 -9.29951202e-03  2.03563902e-33
  5.14238290e-02  4.61497493e-02 -4.04212810e-02  1.15211524e-01
  3.17463949e-02  4.76045646e-02 -1.51242707e-02  5.41111687e-03
 -1.32367477e-01 -6.21148618e-03 -2.72922516e-02 -8.54128376e-02
  4.78668287e-02 -4.88827191e-02  3.45478766e-02 -8.07518885e-02
  2.45027058e-02  5.49113974e-02  9.53200236e-02 -6.23972900e-03
  5.22350259e-02 -2.37608235e-02 -3.75499390e-02 -4.91521768e-02
 -2.01793835e-02  4.16015983e-02 -1.01152826e-02  1.74912531e-02
 -1.10321432e-01 -1.39767937e-02 -5.05357124e-02 -3.66957486e-02
 -1.78419761e-02  1.40122196e-03  7.89916813e-02 -8.02702606e-02
  9.93346609e-03 -2.61918493e-02 -6.19235225e-02 -4.29784805e-02
  3.46136540e-02  5.88381756e-03  6.63990504e-05 -2.41723731e-02
  2.47322558e-03  3.15490328e-02 -8.52616504e-02  5.34910373e-02
 -3.60623449e-02  6.69793878e-03  3.72643173e-02  7.04615191e-02
 -1.86561178e-02 -5.25349639e-02 -1.25672724e-02 -7.96734821e-03
 -3.56679708e-02 -2.71085426e-02  5.54877333e-02  3.18340771e-03
  7.03323036e-02  2.91253794e-02 -4.55009826e-02  1.78879704e-02
 -1.47262774e-02  5.00865653e-02 -3.52022424e-02  4.91793156e-02
  1.31733924e-01 -3.14466134e-02 -4.70901560e-03 -7.81054469e-03
 -1.14217646e-01 -2.52969153e-02 -3.05119287e-02 -2.89478153e-03
 -4.65801805e-02 -3.92007120e-02 -7.66019896e-02  3.57885510e-02
  4.75593023e-02 -7.77549052e-04 -8.53350461e-02 -3.16533400e-03
 -3.71173806e-02 -3.22122015e-02  7.64012858e-02  1.64956525e-02
 -5.63785657e-02 -1.37752481e-02  3.17586306e-03 -2.72189640e-02
  8.77123624e-02 -9.04191285e-02 -6.84831350e-04 -3.49028921e-33
  2.27210820e-02  9.09259636e-03 -7.25511983e-02 -2.02511344e-02
 -2.71198396e-02 -1.92971714e-02  4.86306585e-02  2.85832360e-02
 -2.23273374e-02  1.16053773e-02 -1.38137061e-02  2.31560916e-02
  7.23714158e-02  3.81389670e-02  4.07561325e-02 -1.19172607e-03
 -5.14627807e-02 -5.20465188e-02 -5.06644286e-02  6.14438206e-02
 -8.86814855e-03  5.39895110e-02 -5.04758582e-02  6.47326931e-02
  7.54658356e-02  2.03151442e-02  3.15967686e-02  8.87348279e-02
  1.52472325e-03 -7.49971867e-02  4.65870239e-02  2.12251320e-02
 -6.53547123e-02  7.76741058e-02 -7.50709930e-03 -8.22624713e-02
  7.46932253e-03  3.16918455e-02  5.17856888e-02 -8.51156469e-03
  1.31952211e-01  5.80431474e-03 -5.58873825e-03 -7.36035081e-03
 -5.45177646e-02 -1.07467817e-02  5.07320128e-02 -2.09606364e-02
  2.06844490e-02  4.13588248e-02 -1.75726749e-02 -1.13599427e-01
  1.19820340e-02 -4.06803191e-02 -5.54031401e-04 -6.24427050e-02
  9.25489739e-02 -1.09281233e-02  6.43137544e-02 -3.03726010e-02
 -2.20703147e-03 -7.96076283e-03 -5.86853735e-02  2.52855569e-02
  7.07971081e-02 -1.51941434e-01 -5.65785058e-02 -1.33123435e-02
 -3.64115275e-02 -2.34949496e-02  2.77372226e-02  8.72927159e-02
  8.45748559e-03 -6.08082116e-02  7.28108212e-02  6.63630515e-02
  2.94154696e-02 -4.00166959e-03  5.87444007e-03  2.43301187e-02
 -7.73098469e-02  1.20194424e-02  5.56733608e-02 -4.24135430e-03
 -2.82269213e-02 -1.11483499e-01  4.82580811e-02  3.06404643e-02
 -4.86948341e-02 -2.64934693e-02 -1.75955072e-02 -1.88484993e-02
  3.49401906e-02  3.34245935e-02 -4.01130058e-02 -5.82390562e-08
 -1.63579717e-01 -8.30621794e-02 -5.29581942e-02  1.09594822e-01
  1.13293752e-01  3.69696990e-02  2.48709810e-03 -9.02651772e-02
 -1.26543045e-02 -9.71869379e-02 -9.97415110e-02  1.88559592e-02
 -6.29850524e-03 -5.34135848e-03 -3.35605927e-02 -1.05049543e-01
 -4.27492969e-02 -4.77392338e-02 -1.99714955e-02 -5.16838953e-02
 -3.43724638e-02 -1.87680926e-02  2.05149911e-02 -6.55123964e-02
  3.64448465e-02 -8.62558782e-02  8.13925080e-03  5.75653836e-02
  4.66104001e-02  1.08743524e-02  6.73794821e-02 -5.04151161e-04
 -6.69057518e-02  1.23709450e-02 -2.99501028e-02  3.53375152e-02
  6.28452599e-02  3.82834710e-02  6.21519226e-04 -3.06813121e-02
  1.26388874e-02 -1.53049352e-02  4.49546129e-02 -4.32019457e-02
 -6.11313209e-02 -1.56135038e-02 -5.01064435e-02 -1.61684416e-02
  7.65817091e-02 -3.46085615e-02 -3.89561504e-02  2.47602444e-02
  4.83935289e-02  2.40645055e-02 -5.57629764e-02 -4.95801382e-02
  1.66437495e-02  2.53516948e-04 -1.06673762e-02  2.74236090e-02
  1.12956455e-02  6.13704287e-02  6.67188093e-02 -6.10327860e-03]"
"#[account(
        init,
        seeds = [
            b""blog"".as_ref(),
            authority.key().as_ref()
        ],
        bump = blog_account_bump,
        payer = authority,
        space = Blog::LEN
    )]
    pub blog_account: Account<'info, Blog>,

    #[account(mut)]
    pub authority: Signer<'info>,

    pub system_program: Program<'info, System>
}

#[derive(Accounts)]
#[instruction(post_account_bump: u8, post: Post)]
pub struct CreatePost<'info> {
    #[account(mut, has_one = authority)]
    pub blog_account: Account<'info, Blog>,

    #[account(
        init,
        seeds = [
            b""post"".as_ref(),
            blog_account.key().as_ref(),
            post.slug.as_ref(),
        ],
        bump = post_account_bump,
        payer = authority,
        space = Post::LEN
    )]
    pub post_account: Account<'info, Post>,

    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub system_program: Program<'info, System>
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445use std::convert::TryInto;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    sysvar::{rent::Rent, Sysvar},
    borsh::try_from_slice_unchecked,
    account_info::{AccountInfo, next_account_info},
    entrypoint,
    entrypoint::ProgramResult, 
    pubkey::Pubkey, 
    msg,
    program_error::ProgramError, system_instruction, program::invoke_signed,
};
use thiserror::Error;


entrypoint!(process_instruction);
fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    Processor::process(program_id, accounts, instruction_data)
}

pub enum BlogInstruction {

    /// Accounts expected:
    /// 
    /// 0. `[signer]` User account who is creating the blog
    /// 1. `[writable]` Blog account derived from PDA
    /// 2. `[]` The System Program
    InitBlog {},

    /// Accounts expected:
    /// 
    /// 0. `[signer]` User account who is creating the post
    /// 1. `[writable]` Blog account for which post is being created
    /// 2. `[writable]` Post account derived from PDA
    /// 3. `[]` System Program
    CreatePost {
        slug: String,
        title: String,
        content: String,
    }
}

pub struct Processor;
impl Processor {
    pub fn process(program_id: &Pubkey, accounts: &[AccountInfo], instruction_data: &[u8]) -> ProgramResult {
        
        let instruction = BlogInstruction::unpack(instruction_data)?;

     ","[-5.17032705e-02  5.58813140e-02 -6.63006306e-02 -4.88077011e-03
  1.10020582e-02 -5.49351610e-02  6.83776215e-02 -9.48216952e-03
 -6.14139885e-02  3.14735621e-02  5.41759506e-02 -5.40963113e-02
  9.17756632e-02 -4.68484424e-02  4.00247835e-02  8.29464197e-02
 -9.88413170e-02 -1.34495730e-02  1.01099387e-02 -1.40229585e-02
  3.71615812e-02  5.71131222e-02 -4.60902927e-03  5.62879033e-02
  2.83474494e-02 -7.53151178e-02 -4.75113615e-02  3.96735184e-02
  2.73166075e-02 -8.63775983e-02  8.92456472e-02 -1.14991078e-02
 -2.30209883e-02  6.38506934e-02  8.67280215e-02  4.43482138e-02
  6.91583082e-02 -4.81862910e-02  8.26565363e-03  3.09501383e-02
  4.60925698e-02 -3.16047929e-02 -4.07425985e-02  5.18648280e-03
 -3.04758381e-02  6.52967468e-02  3.00058257e-02  8.56926516e-02
 -1.42220557e-02 -5.32395542e-02 -8.63284394e-02 -5.70767000e-02
 -2.11324934e-02 -3.08522731e-02 -1.42020648e-02  1.85524803e-02
 -3.02471928e-02 -4.58711982e-02 -1.65050924e-02 -1.51042402e-01
 -3.71502223e-03 -7.90440012e-03  2.20108917e-03 -5.39095886e-02
 -4.39110361e-02  1.77565659e-03 -2.27907039e-02  6.50795028e-02
  4.07155640e-02  1.37889832e-02 -5.68804145e-03  2.84493119e-02
 -9.30521563e-02  1.67015940e-02 -5.33506609e-02  5.15174754e-02
 -5.03268167e-02  4.57984954e-02 -3.77551131e-02 -6.08170554e-02
 -2.87341420e-02  4.26134374e-03 -2.91737616e-02  3.82229500e-02
  1.79211050e-03 -8.27774256e-02  6.72797635e-02 -6.16179556e-02
  5.63110821e-02  2.79296003e-02  4.24358062e-03 -2.21316386e-02
  8.63602012e-02 -2.55046599e-02  5.83928302e-02  4.61179428e-02
  8.42453837e-02 -1.73883438e-02  1.72639675e-02  1.17443725e-01
 -3.97800505e-02  4.51745242e-02 -6.23466726e-03 -1.55553257e-03
  3.24939750e-02  1.08268522e-02 -5.16938530e-02 -3.53225996e-03
  2.21443065e-02 -6.37758374e-02 -2.21354216e-02  4.58326973e-02
 -4.72325310e-02 -2.38536322e-03  8.36546645e-02  4.40609865e-02
  3.48570496e-02 -2.62712035e-03  1.22182360e-02 -5.77884540e-02
  8.99412781e-02  3.97472270e-02  6.14091242e-03 -1.10557834e-02
 -7.19953328e-02 -3.88781540e-02 -5.29829971e-02  3.07756103e-33
  3.96166518e-02  2.53881775e-02 -4.94580455e-02  4.75815870e-02
  1.96457021e-02  5.11628203e-02  2.15922645e-03 -2.30863933e-02
 -1.21746160e-01 -3.07348766e-03 -6.56718463e-02 -3.44074257e-02
  4.43080328e-02 -4.37860116e-02 -5.33667998e-03 -5.34982681e-02
  3.04894540e-02  6.74955249e-02  8.66498202e-02  1.65076051e-02
  8.26991349e-02 -2.65753968e-03 -6.38855770e-02 -3.02572697e-02
 -4.37650345e-02  6.80281594e-03 -2.65298877e-02 -3.58508565e-02
 -4.67962548e-02 -2.28880160e-02 -7.81367719e-03  2.61789914e-02
  2.14479472e-02  2.34860554e-03  3.01563162e-02 -5.65942600e-02
  1.74032077e-02 -5.87511994e-02 -2.62243059e-02 -7.28416741e-02
 -2.79042404e-03  4.40326752e-03  2.18649246e-02 -4.10651043e-03
 -4.05881070e-02  3.17581482e-02 -6.74859509e-02  6.63146377e-02
 -6.35415548e-03  4.58407849e-02  1.08729042e-02 -7.02846050e-03
  1.00557981e-02 -4.11771424e-03 -5.40777817e-02 -3.80511284e-02
 -1.61597226e-02  3.14229839e-02  3.37313414e-02  1.88199582e-03
  2.26738080e-02  3.09430379e-02 -2.17872094e-02  1.83680356e-02
 -1.79234557e-02  8.01536068e-03 -2.70913709e-02  5.96727803e-02
  1.62393510e-01  5.57758473e-02  2.20402889e-02  4.38571572e-02
 -1.04800977e-01 -1.26273232e-02 -8.03225189e-02 -3.47861648e-02
 -7.26875514e-02 -2.40930915e-02 -6.66661039e-02  2.42859554e-02
  1.42052835e-02  5.09357490e-02 -1.06685445e-01  1.02965441e-02
 -1.85751226e-02 -7.45025724e-02  6.61446005e-02 -1.14634875e-02
 -7.00348467e-02 -7.93539286e-02 -5.98498248e-02  5.23528270e-03
  9.08167511e-02 -6.89914227e-02 -1.87534373e-03 -4.24503593e-33
 -6.45493390e-03 -6.55002818e-02  3.25163901e-02 -9.71300542e-05
  4.10887832e-03 -4.33504544e-02  7.85913840e-02 -6.85253441e-02
  5.85036911e-03  2.40690857e-02 -9.26174000e-02 -1.57483034e-02
  1.07903868e-01  2.36738734e-02  1.44280925e-01  9.09087656e-04
 -4.80706953e-02 -6.32443652e-02 -4.11404185e-02  4.74145785e-02
 -6.02008477e-02  8.51620808e-02 -5.07607013e-02  8.67749900e-02
  4.87715714e-02  1.96854454e-02  1.40824011e-02  5.18960245e-02
 -2.01226268e-02 -6.54873103e-02  1.26912873e-02  2.80275196e-02
 -7.01724887e-02  6.07460961e-02 -5.47607057e-02 -3.86222526e-02
 -8.46329238e-03  7.57578909e-02  5.55184670e-03  5.81550412e-03
  1.22564174e-01  4.03977484e-02 -2.39627697e-02  1.28201470e-02
 -1.48239154e-02 -1.81178246e-02  5.34258932e-02  2.66125724e-02
  1.09832184e-02  2.46936474e-02  3.46604642e-03 -8.02025795e-02
  5.59664294e-02 -3.40900496e-02 -1.28203062e-02 -6.97754696e-02
  3.42545174e-02 -1.16881561e-02  2.61872821e-02 -3.63104567e-02
 -1.84996966e-02 -5.00859134e-03 -3.88686731e-02  1.04564488e-01
  4.62473780e-02 -1.63241878e-01 -6.88886046e-02 -9.90238711e-02
 -5.73215522e-02 -5.38477413e-02  2.81489193e-02  4.37648632e-02
  2.86023766e-02 -6.22323379e-02  1.25822216e-01  3.94043513e-02
 -8.65642820e-03  3.36401351e-02 -3.43417306e-03  2.75033712e-02
 -1.22246407e-01  7.55789410e-03  8.04798976e-02  2.36263890e-02
 -6.17334098e-02 -1.04924917e-01  5.99281192e-02  6.12930246e-02
  3.13937515e-02 -2.54725050e-02  1.46162016e-02 -8.52788799e-03
  3.91314812e-02  5.98200411e-02 -1.09844590e-02 -4.28921112e-08
 -8.76441672e-02 -1.62166990e-02 -9.27900337e-03  1.63748160e-01
  5.71427681e-02 -2.66774967e-02  2.77526490e-02 -5.45685478e-02
 -1.07798260e-02 -4.69728261e-02 -4.62322086e-02  1.09779052e-02
  1.22500742e-02 -1.92465503e-02  3.40320282e-02 -5.38321771e-02
 -5.68374917e-02 -6.23969994e-02 -4.73583825e-02 -1.75727084e-02
 -3.45460959e-02 -4.42349426e-02 -2.45494535e-03  1.05818817e-02
  4.05794419e-02 -5.16830981e-02  2.72022057e-02  2.86621489e-02
  8.99718925e-02  6.41457662e-02  8.06809142e-02 -4.35944051e-02
 -1.98853798e-02 -6.80571888e-03  2.33752150e-02 -1.50178848e-02
  5.28745912e-02  4.66981195e-02  1.55776506e-02  6.76422641e-02
 -4.93686087e-02 -3.70868742e-02 -1.64216850e-02 -2.92210542e-02
  4.29887965e-04 -1.64304338e-02 -1.26383424e-01 -5.76923881e-03
  5.00394069e-02 -3.17508494e-03 -7.93827605e-03 -1.72924735e-02
  6.69009015e-02  3.45584378e-02 -5.15838191e-02 -5.66012338e-02
  2.27084905e-02  4.03117537e-02  2.93762349e-02 -1.49844587e-02
  7.57251456e-02  5.45240846e-03  5.75994626e-02  3.71616706e-03]"
"  match instruction {
            BlogInstruction::InitBlog {} => {
                msg!(""Instruction: InitBlog"");
                Self::process_init_blog(accounts, program_id)
            },
            BlogInstruction::CreatePost { slug, title, content} => {
                msg!(""Instruction: CreatePost"");
                Self::process_create_post(accounts, slug, title, content, program_id)
            }
        }
    }

    fn process_create_post(
        accounts: &[AccountInfo],
        slug: String,
        title: String,
        content: String,
        program_id: &Pubkey
    ) -> ProgramResult {
        if slug.len() > 10 || content.len() > 20 || title.len() > 50 {
            return Err(BlogError::InvalidPostData.into())
        }

        let account_info_iter = &mut accounts.iter();

        let authority_account = next_account_info(account_info_iter)?;
        let blog_account = next_account_info(account_info_iter)?;
        let post_account = next_account_info(account_info_iter)?;
        let system_program = next_account_info(account_info_iter)?;

        if !authority_account.is_signer {
            return Err(ProgramError::MissingRequiredSignature);
        }

        let (blog_pda, _blog_bump) = Pubkey::find_program_address(
            &[b""blog"".as_ref(), authority_account.key.as_ref()],
            program_id
        );
        if blog_pda != *blog_account.key || !blog_account.is_writable || blog_account.data_is_empty() {
            return Err(BlogError::InvalidBlogAccount.into())
        }

        let (post_pda, post_bump) = Pubkey::find_program_address(
            &[b""post"".as_ref(), slug.as_ref(), authority_account.key.as_ref()],
            program_id
        );
        if post_pda != *post_account.key {
            return Err(BlogError::InvalidPostAccount.into())
        }

        let post_len: usize = 32 + 32 + 1 + (4 + slug.len()) +","[-1.53713552e-02  2.25427747e-02 -5.24271987e-02 -3.64719927e-02
 -2.10347343e-02 -2.66583618e-02  2.74216738e-02  4.86652814e-02
 -2.20437702e-02  2.92850435e-02  2.20469013e-03 -4.29495871e-02
  5.65190017e-02 -1.50491633e-02  1.71083920e-02  2.53691021e-02
 -5.93780279e-02 -6.31587654e-02 -4.22025397e-02 -2.62063779e-02
  1.35069177e-01  5.48300557e-02  2.81898640e-02  8.77769962e-02
 -4.90554310e-02 -9.25930887e-02 -7.46994168e-02 -1.53005105e-02
  1.77000538e-02 -4.18614484e-02  1.47115275e-01 -4.85519916e-02
 -2.84068435e-02  7.33610541e-02  8.97824317e-02  3.78792770e-02
  8.34761187e-03 -1.20470643e-01  4.92280796e-02 -7.91638494e-02
 -5.24383336e-02  2.02915259e-02 -7.30987638e-02  1.13081634e-02
  5.61884642e-02 -1.21352030e-02 -6.36468306e-02 -3.48742455e-02
 -1.27045885e-02  2.48195082e-02 -8.92001018e-02 -7.05993399e-02
 -3.84696350e-02 -7.95268044e-02 -6.92817010e-03  1.03711240e-01
 -3.50914113e-02 -1.56403296e-02  1.27207134e-02 -1.28766540e-02
  4.75089997e-02 -3.15220691e-02 -1.60500370e-02 -1.48941344e-02
 -3.69251668e-02 -2.49275174e-02 -6.89167902e-02  8.99399351e-03
  1.03091206e-02 -3.94535484e-03 -1.21408151e-02  4.28070016e-02
 -4.93534841e-02  7.20330551e-02 -8.40211809e-02 -6.23620814e-03
 -5.28545752e-02  3.09177544e-02 -9.07425731e-02 -8.30578953e-02
  2.30632909e-02  2.43343115e-02 -5.62114269e-03  6.30987883e-02
  2.73057185e-02  1.49368809e-03  4.78195064e-02 -2.25989670e-02
  3.76768745e-02  6.64110035e-02 -3.06226052e-02 -1.37056820e-02
  1.19236782e-02  2.03329585e-02  7.12715313e-02  4.80726548e-02
 -3.21260467e-02  7.51645723e-03 -3.35500911e-02  6.25592843e-02
 -2.68305205e-02  1.01113981e-02  1.47669949e-02 -1.27529902e-02
  2.12847386e-02 -1.19124651e-02  4.52384390e-02  5.51873771e-03
 -4.13831659e-02 -9.91645548e-03  6.15759008e-03  7.12814331e-02
 -4.31575179e-02  2.44044326e-02  6.59296960e-02  5.44218048e-02
  5.11567444e-02 -7.82883633e-03  2.89330371e-02  2.95924433e-02
  9.15886983e-02  5.26685752e-02 -6.77579939e-02 -8.04141536e-03
 -5.64539917e-02 -7.89029673e-02  1.78457256e-02  5.58216590e-33
  7.25583732e-02  2.19112821e-02 -3.62509638e-02  7.54951835e-02
  3.43709327e-02  3.91058810e-02  1.57732144e-02  4.13636118e-02
 -1.15328252e-01  2.20347941e-02 -1.89835150e-02 -1.15491867e-01
  6.01359503e-03 -5.50711676e-02  1.93531606e-02 -9.10351798e-02
  1.40383840e-02  6.25132397e-02  7.03179017e-02  2.61819810e-02
  7.20532015e-02 -1.13104470e-03 -8.77880752e-02 -5.50189093e-02
  4.22425978e-02  3.33104841e-02 -6.29450083e-02 -2.63019861e-03
 -5.95875792e-02 -1.34798829e-02  1.36597790e-02 -2.31782217e-02
 -4.59370352e-02 -3.50706372e-03  9.40690190e-02 -8.50519761e-02
  7.23939994e-03  1.19442390e-02 -4.38735820e-02 -2.02247445e-02
  4.37006764e-02 -1.59620196e-02 -3.50445546e-02  9.65102110e-03
  3.81017895e-03  3.55794802e-02 -7.52608106e-02  1.53816408e-02
  1.93015207e-03  1.32062798e-02  2.29653288e-02  5.29478788e-02
 -2.18478218e-02 -7.55770355e-02  3.77912931e-02 -2.47184522e-02
 -5.29161729e-02 -1.22855576e-02  5.14145084e-02  2.02981140e-02
  2.17721350e-02  5.65055013e-02 -7.34880120e-02  4.16896567e-02
  1.92817897e-02  4.16821660e-03  3.62539943e-03  1.99523903e-02
  1.53294504e-01 -3.93537395e-02 -4.55823988e-02 -5.53870797e-02
 -6.65269122e-02 -7.26070069e-03 -9.44162067e-03 -5.97767830e-02
 -6.40272051e-02 -7.77673647e-02 -7.67333210e-02 -1.77826304e-02
  3.12271416e-02 -7.46531487e-02 -1.26481518e-01 -1.35816392e-02
 -9.15375538e-03  1.09201856e-05  9.87088773e-03  1.11202579e-02
 -2.13991813e-02  3.67305018e-02  1.54933045e-02 -1.81735661e-02
 -5.53830620e-03 -4.10449691e-02  1.05667475e-03 -7.79339604e-33
  5.38953505e-02 -2.02015527e-02 -2.72666514e-02 -2.23702732e-02
  1.67310685e-02 -3.15575948e-04  9.46964994e-02 -3.14533105e-03
  1.18134823e-02  7.52104446e-03 -7.66410157e-02 -1.34760165e-03
  3.71026658e-02  3.17110345e-02 -9.65625222e-04  2.48878188e-02
 -8.55002701e-02 -2.53783166e-02  3.56541801e-04  2.51185670e-02
 -1.64228771e-02  1.26618132e-01 -2.00925744e-03  4.41263281e-02
  4.28935997e-02 -4.32324922e-03  7.52254054e-02  8.85835290e-02
  4.04464314e-04 -1.74811035e-02  7.58993030e-02 -1.38213141e-02
 -4.77521457e-02  6.49244040e-02 -1.66309234e-02 -1.03652917e-01
 -2.66934221e-04  6.02543615e-02 -1.36393576e-03  2.93981303e-02
  1.39771864e-01 -3.52946036e-02 -1.66916344e-02  1.28171798e-02
 -6.19388930e-02 -1.52894482e-02  7.64203295e-02 -2.33409498e-02
  1.12930126e-02  4.51262854e-02 -2.41845436e-02 -1.34572625e-01
 -1.76619820e-03 -5.09351268e-02  2.39524152e-02 -7.41507858e-02
  1.18157759e-01 -4.43973728e-02  1.57744996e-02 -3.20503041e-02
  4.80347872e-02  1.34916315e-02  8.81483965e-03  3.82281132e-02
  1.12143308e-01 -1.21257991e-01 -3.74917500e-02  2.57995985e-02
  1.74115284e-03  2.45854016e-02  2.21952121e-03 -7.23050980e-05
  4.68024313e-02 -5.51923327e-02  5.94394095e-02  5.58911525e-02
  4.68075201e-02 -2.40757992e-03 -3.50760482e-02  6.34868816e-02
 -5.50915897e-02  4.09223586e-02  2.96932645e-02  2.49301288e-02
 -2.38659047e-02 -6.41958192e-02  3.62279266e-02  5.65682054e-02
 -8.91379490e-02  3.61637352e-03  1.27219055e-02  6.56010257e-03
  5.26783131e-02 -5.35683967e-02 -9.30129811e-02 -5.81548356e-08
 -1.13634057e-01 -6.21800944e-02  1.09033822e-03  1.30599380e-01
  5.02147079e-02 -1.71677209e-02  4.38408181e-02 -6.18804544e-02
 -1.83290914e-02 -7.07899183e-02 -9.46298465e-02  6.75690845e-02
 -1.52454264e-02  1.12291891e-02  3.89641803e-03 -1.22426569e-01
 -2.36409288e-02 -3.93908247e-02 -8.17661057e-04 -5.91193475e-02
 -4.60410491e-02 -6.28676191e-02 -1.64810084e-02 -1.50944507e-02
 -1.73338724e-03  1.45383156e-03 -2.94319149e-02  2.31950562e-02
  5.02379760e-02  1.10350177e-01  9.51735452e-02 -2.40001973e-04
 -2.21204907e-02  2.88456766e-04 -1.72079578e-02 -2.06835903e-02
  3.52217741e-02  9.99762863e-03  3.35800387e-02 -9.06266123e-02
  1.94856953e-02  1.45938192e-02  9.68636200e-02 -2.94272508e-02
 -3.97641072e-03 -6.67665014e-03 -7.95683358e-03 -7.93288797e-02
  5.92855625e-02  1.80436093e-02 -7.40578473e-02 -3.64646427e-02
  3.51440273e-02  3.60112786e-02 -3.33644226e-02 -3.88604891e-03
  7.18714371e-02 -4.10895720e-02 -4.71086800e-02  3.74549441e-02
  6.88363239e-02  4.07737195e-02  1.01816192e-01 -1.06681874e-02]"
"(4 + title.len()) + (4 + content.len());

        let rent = Rent::get()?;
        let rent_lamports = rent.minimum_balance(post_len);

        let create_post_pda_ix = &system_instruction::create_account(
            authority_account.key,
            post_account.key,
            rent_lamports,
            post_len.try_into().unwrap(),
            program_id
        );
        msg!(""Creating post account!"");
        invoke_signed(
            create_post_pda_ix, 
            &[
                authority_account.clone(),
                post_account.clone(),
                system_program.clone()
            ],
            &[&[
                b""post"".as_ref(),
                slug.as_ref(),
                authority_account.key.as_ref(),
                &[post_bump]
            ]]
        )?;

        let mut post_account_state = try_from_slice_unchecked::<Post>(&post_account.data.borrow()).unwrap();
        post_account_state.author = *authority_account.key;
        post_account_state.blog = *blog_account.key;
        post_account_state.bump = post_bump;
        post_account_state.slug = slug;
        post_account_state.title = title;
        post_account_state.content = content;

        msg!(""Serializing Post data"");
        post_account_state.serialize(&mut &mut post_account.data.borrow_mut()[..])?;


        let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;
        blog_account_state.post_count += 1;

        msg!(""Serializing Blog data"");
        blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;

        Ok(())
    }

    fn process_init_blog(
        accounts: &[AccountInfo],
        program_id: &Pubkey
    ) -> ProgramResult {
        let account_info_iter = &mut accounts.iter();
        
        let authority_account","[-6.38075843e-02  5.66101633e-02 -8.97791535e-02 -3.19305509e-02
 -7.20609352e-02 -4.23741341e-02  2.75968830e-03  4.96898480e-02
 -1.91842578e-02  3.33846174e-02  1.01665638e-01 -9.95380133e-02
  6.93730786e-02 -6.72699362e-02 -8.90925294e-04  9.75440368e-02
 -7.64353499e-02 -3.20710354e-02  9.41203441e-03  2.87600618e-04
  1.02258466e-01 -3.32031287e-02  2.22181417e-02  4.52313796e-02
  3.10343765e-02 -2.28088405e-02 -2.07870975e-02  3.92301828e-02
  3.73034962e-02 -7.17133582e-02  7.82955289e-02 -1.93627514e-02
  1.72820855e-02 -9.98119731e-03  1.14859983e-01  1.08361043e-01
  1.64672639e-02 -8.97271857e-02  3.03590298e-02 -2.98243091e-02
 -3.35930176e-02  4.93520387e-02 -1.15234368e-02  2.95813158e-02
 -6.95914477e-02  4.76135537e-02 -1.26180183e-02  3.88420001e-02
  3.64509225e-02 -6.42375648e-02 -2.20917743e-02 -1.89274829e-02
 -6.51524514e-02  1.40486658e-02  1.97663996e-02  1.66274868e-02
  2.49932334e-03 -1.81293059e-02  3.15109268e-02 -2.26809513e-02
  3.09669934e-02  7.16432482e-02  3.40873562e-02 -9.06591676e-03
  2.76786648e-02 -7.00694602e-03 -7.33958408e-02  2.79902155e-03
 -8.33990201e-02 -4.62480634e-03 -1.38558019e-02  5.45705296e-03
 -7.43763968e-02  5.28875664e-02 -4.11240980e-02  3.80565897e-02
 -4.50838841e-02  1.88376252e-02 -2.27689873e-02 -5.90077490e-02
 -7.86588266e-02  1.63579695e-02  3.34145909e-04  8.74328166e-02
  8.88656545e-03  1.14479763e-02 -1.17700407e-02 -7.39805326e-02
  6.23512976e-02  4.38853987e-02  6.97501469e-03  3.36653274e-03
  3.66045646e-02  1.82900336e-02  1.74956080e-02  4.37136032e-02
  5.04733436e-03 -3.11691631e-02 -7.42766038e-02  1.05977602e-01
  4.69003711e-03  1.55616524e-02 -6.25477871e-03  4.11914429e-03
  2.66279280e-03 -4.94763479e-02  5.78079484e-02 -5.41544408e-02
 -4.12371755e-02  3.37566920e-02  2.17391402e-02  7.18610659e-02
 -3.50945853e-02 -6.65471656e-03  2.71759573e-02  4.08000313e-02
 -6.28641322e-02 -1.05173169e-02  1.99022852e-02  7.14544719e-03
  1.06618941e-01  1.29356002e-02 -6.26939312e-02 -2.75270473e-02
 -3.51655670e-02 -9.07256827e-03  5.83107919e-02 -3.21994608e-33
  4.23860177e-02 -3.48825194e-02 -9.66937002e-03  1.00114264e-01
 -1.19378073e-02  2.38381028e-02  4.12369147e-03  9.21646655e-02
 -1.26232982e-01  2.58908197e-02  3.13300826e-02 -1.01556301e-01
  1.88058673e-03 -3.20745632e-02 -2.23560669e-02 -1.15311123e-01
  7.89517984e-02  5.44087365e-02  7.12588057e-02  1.94776244e-02
  2.91446075e-02  1.29625499e-02  3.23419273e-03 -9.01543275e-02
  2.27223225e-02  6.12327876e-03 -8.79628286e-02  2.78559048e-03
 -3.22837532e-02  1.52217075e-02 -6.02080189e-02 -1.43115949e-02
 -3.36321592e-02 -1.05552776e-02  5.27006052e-02 -4.82258052e-02
  5.33040566e-03 -1.40846642e-02 -1.13950528e-01 -1.57947373e-02
  5.01115918e-02  7.20174853e-07  1.22843115e-02 -2.39109136e-02
 -1.98524445e-02  3.01257297e-02  1.95470359e-02 -4.60075215e-03
 -4.88012657e-03  6.89262673e-02 -1.07708266e-02  2.97703072e-02
 -8.87679085e-02 -1.40307043e-02 -4.79249842e-02 -4.48497981e-02
 -2.57634260e-02 -7.12013170e-02  3.63919176e-02 -3.02100442e-02
 -1.10317031e-02  6.91620782e-02 -3.95434983e-02  2.12244336e-02
  3.19316573e-02 -7.61624798e-03 -3.91267054e-02  8.74492154e-03
  9.36899185e-02 -3.32240760e-02 -3.60903256e-02 -5.60592078e-02
 -9.34857726e-02  2.92381383e-02 -4.98219952e-02 -1.06289558e-01
  2.60664499e-03 -4.05176682e-03 -6.42692149e-02 -4.55808342e-02
  2.78094765e-02 -6.79033948e-03 -7.22839609e-02 -5.87179651e-03
 -4.23362525e-03 -4.53561544e-03  6.33369535e-02  9.46068950e-03
 -6.95874244e-02 -1.25915203e-02 -2.01015584e-02 -7.58313611e-02
  3.84016410e-02 -8.48907307e-02 -1.02530830e-02 -4.02911479e-34
  7.08609680e-03 -1.10688686e-01  7.58727314e-03 -7.78839812e-02
  2.44566724e-02 -2.23944765e-02  3.96308228e-02  1.50082540e-02
 -5.21565862e-02  1.79558191e-02 -1.25008434e-01  2.29313574e-03
  1.08703151e-02  5.42184822e-02  7.19844624e-02  1.36001790e-02
 -9.62059423e-02 -2.28410959e-02 -5.77759277e-03  7.60439485e-02
 -1.68331508e-02  1.39894962e-01  1.38173634e-02  1.31417990e-01
  2.41007074e-03  2.67743450e-02  1.12407864e-03  6.57454133e-02
  8.30731727e-03 -8.86179600e-03  1.64145287e-02 -2.32892111e-02
 -9.41737220e-02  1.29691780e-01 -8.43566805e-02 -9.81244445e-02
  1.84428282e-02  8.81883129e-02 -3.37297656e-02  7.66420215e-02
  1.23328388e-01 -5.32158986e-02 -1.23564405e-02 -1.01995775e-02
  7.69696897e-03  1.63260952e-03  7.25466236e-02  2.75242645e-02
 -2.86783408e-02  9.02751908e-02 -3.60476598e-02 -6.58266693e-02
 -4.48237024e-02 -1.90575365e-02 -5.71296923e-03 -4.92233559e-02
  1.01320609e-01  2.20371652e-02  1.19849972e-01 -7.12021664e-02
  1.24022597e-02 -1.04428446e-02  7.03706685e-03  3.26598175e-02
  6.68295920e-02 -9.07121673e-02 -1.12156020e-02 -3.15760262e-02
 -2.19911002e-02  7.75672914e-03 -5.22987284e-02  3.50327715e-02
  1.01322052e-03 -1.09200418e-01  4.50773053e-02  1.09269554e-02
  3.49726994e-03 -6.20175665e-03  2.16800366e-02 -1.35888923e-02
 -1.11328535e-01  1.51677346e-02  5.49759082e-02  4.38025668e-02
  2.89402762e-03 -5.82168140e-02  4.38866504e-02 -6.06661998e-02
 -4.96172421e-02  4.19363379e-02 -6.47041053e-02  4.11426947e-02
  2.54673660e-02  1.41518740e-02 -4.45535257e-02 -5.47076127e-08
 -6.42488897e-02 -4.17059883e-02 -2.50880606e-02  9.61214155e-02
  2.12718230e-02 -7.78598711e-02  3.89261357e-03 -3.31892446e-02
 -2.51196884e-03 -7.88364485e-02  2.46652123e-02  6.75515383e-02
 -8.93796608e-03  1.39739143e-03 -5.04360422e-02 -7.33957812e-02
 -1.75951440e-02 -3.28818187e-02 -3.72134149e-02 -5.58503531e-02
 -4.88581024e-02 -3.76821794e-02 -1.23266992e-03 -2.17774627e-03
  2.65333261e-02 -4.74859355e-03 -6.41275058e-03  9.61042419e-02
  1.20971575e-01  5.85811809e-02  1.11943282e-01  1.83735788e-02
  1.29302619e-02 -1.69232097e-02 -1.11566372e-02 -1.89829338e-02
  4.47428972e-02  2.34918613e-02  4.87091392e-02  3.48808952e-02
  4.00775904e-03  7.32801631e-02  9.72426205e-04 -1.06915319e-02
 -1.63678243e-03  1.40406340e-02 -4.20246907e-02 -1.57694723e-02
  9.21393037e-02 -2.07367353e-02 -6.48555160e-02 -4.83697169e-02
  1.98085476e-02  7.70638809e-02  1.36151016e-02 -7.14074522e-02
  6.08381517e-02  1.49266496e-02 -4.70815934e-02  5.08875735e-02
  6.42790645e-02  2.45862007e-02  1.87075157e-02 -4.92334925e-02]"
"= next_account_info(account_info_iter)?;
        let blog_account = next_account_info(account_info_iter)?;
        let system_program = next_account_info(account_info_iter)?;

        if !authority_account.is_signer {
            return Err(ProgramError::MissingRequiredSignature);
        }

        let (blog_pda, blog_bump) = Pubkey::find_program_address(
            &[b""blog"".as_ref(), authority_account.key.as_ref()],
            program_id 
        );
        if blog_pda != *blog_account.key {
            return Err(BlogError::InvalidBlogAccount.into())
        }

        let rent = Rent::get()?;
        let rent_lamports = rent.minimum_balance(Blog::LEN);
        
        let create_blog_pda_ix = &system_instruction::create_account(
            authority_account.key,
            blog_account.key,
            rent_lamports,
            Blog::LEN.try_into().unwrap(),
            program_id
        );
        msg!(""Creating blog account!"");
        invoke_signed(
            create_blog_pda_ix, 
            &[
                authority_account.clone(),
                blog_account.clone(),
                system_program.clone()
            ],
            &[&[
                b""blog"".as_ref(),
                authority_account.key.as_ref(),
                &[blog_bump]
            ]]
        )?;

        let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;
        blog_account_state.authority = *authority_account.key;
        blog_account_state.bump = blog_bump;
        blog_account_state.post_count = 0;
        blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;
        

        Ok(())
    }
}



#[derive(BorshDeserialize, Debug)]
struct PostIxPayload {
    slug: String,
    title: String,
 ","[-2.54373476e-02  2.55546793e-02 -6.05555736e-02  2.17184331e-03
 -3.17891547e-03 -1.66048463e-02  4.52652946e-02 -1.23209134e-02
  1.06043248e-02  4.26436998e-02  8.10528174e-02 -6.98780045e-02
  3.12331412e-02 -1.19129112e-02  6.38393313e-02  5.56831211e-02
 -9.30708349e-02  6.56620905e-05  2.23604087e-02  1.44305062e-02
  6.44358099e-02  1.12740891e-02  6.44251285e-03  3.68592218e-02
 -2.35159401e-04 -8.06935728e-02 -3.20499465e-02  6.81429496e-03
  2.06367131e-02 -3.70430201e-02  6.84551969e-02 -1.25565175e-02
 -4.09890488e-02  5.68198552e-03  1.41045257e-01  5.23064546e-02
  1.34309393e-03 -7.72279799e-02  2.64552478e-02  1.62563159e-03
 -3.53063680e-02  2.81826220e-02 -3.48340813e-03  7.58504728e-03
 -2.79238392e-02  5.69875017e-02 -3.15809213e-02  7.55503699e-02
  3.52929123e-02 -6.19816929e-02 -1.05265435e-02 -4.29523252e-02
 -5.54454438e-02 -5.19191809e-02 -8.12715199e-03  8.05148408e-02
  2.97996774e-02 -6.40961379e-02  1.32216262e-02 -1.81884300e-02
  7.00094998e-02  1.22733349e-02  2.24403720e-02 -1.89089868e-02
 -4.53214539e-04  9.47603374e-04 -5.54067791e-02  3.31244096e-02
 -1.62127204e-02 -3.62411403e-04 -5.38656767e-03 -1.14114564e-02
 -5.92288226e-02  1.91240350e-03 -1.96386930e-02 -6.92030834e-03
 -2.43708044e-02  4.48455401e-02  7.60132726e-03 -9.44339707e-02
 -7.20063299e-02  2.91975252e-02  1.29059767e-02  9.61235687e-02
 -9.83179361e-03 -2.35380400e-02 -5.45110786e-03 -8.35534707e-02
  7.60512948e-02  6.51602447e-02  5.75301833e-02 -1.62578747e-02
  4.90790159e-02 -1.72009375e-02  6.76634759e-02  5.35415038e-02
  1.05059734e-02 -6.56782016e-02 -1.52685838e-02  7.36950934e-02
 -7.04329088e-02  1.46921072e-02  3.43299545e-02 -7.40701985e-03
  3.46256942e-02 -1.50675410e-02  7.41184205e-02 -6.30605891e-02
 -4.02817801e-02  3.78986001e-02  7.41319545e-03  6.18213937e-02
  2.51199771e-02 -1.81281567e-02  6.19294755e-02  1.37420967e-02
  1.65303517e-02 -1.65165570e-02 -9.43274330e-03 -1.05717378e-02
  8.29906464e-02  7.34309712e-03  1.78124674e-03 -1.49462540e-02
 -6.98978305e-02  6.14293106e-03  3.41858603e-02  1.90465405e-33
  7.53957732e-03  1.44180926e-02 -7.01644123e-02  6.19189814e-02
 -4.54378873e-02  4.95477729e-02 -9.76772793e-03  7.41179734e-02
 -1.65075347e-01  1.19527981e-01  1.66901574e-02 -4.05101404e-02
 -7.10508274e-03 -2.88155526e-02 -7.98578653e-03 -2.38533430e-02
  9.96310338e-02  3.05632539e-02  8.17884952e-02  1.26907201e-02
  7.56800547e-02  4.64974158e-03  4.05054260e-03 -7.69090131e-02
  5.31489253e-02  1.83075462e-02 -3.97421159e-02  1.71445198e-02
 -1.10918144e-02 -3.00798975e-02  2.44515967e-02 -4.30738293e-02
 -1.79367792e-02 -1.30773736e-02  7.18928576e-02 -7.55633041e-02
  2.47910265e-02  5.29084774e-03 -8.63556638e-02 -1.00606475e-02
  3.76340970e-02  1.83501206e-02 -2.60095149e-02 -4.85016480e-02
  2.59655844e-02  2.78339982e-02  2.68586706e-02 -4.05948667e-05
  2.50747073e-02  5.98546453e-02 -8.22610967e-03  2.66269483e-02
 -1.59723312e-01  2.11476441e-02 -6.00978844e-02 -4.94207069e-02
 -3.00905928e-02 -4.89560552e-02  2.92424504e-02 -7.00966939e-02
  7.21530523e-03  2.04583537e-02 -3.59821902e-03 -1.54556502e-02
 -2.20683813e-02 -4.91155721e-02 -2.52166800e-02 -6.67019328e-03
  1.11751884e-01 -3.60901356e-02  1.07878186e-02 -4.83371019e-02
 -4.51945104e-02  3.31392232e-03 -5.69103137e-02 -9.24551785e-02
 -9.30057839e-02  4.65324335e-03 -5.11784256e-02 -1.53736100e-02
  2.40361970e-02 -1.99181419e-02 -7.20299110e-02  9.37286392e-02
 -5.12836799e-02  2.08996516e-02  6.61759302e-02 -7.57197523e-03
 -7.04532936e-02  5.62682487e-02  6.30289549e-04 -2.53040474e-02
  1.17166564e-02 -4.20998670e-02 -1.80729851e-02 -4.49015516e-33
 -6.45657117e-03 -9.14603770e-02 -3.21078300e-03 -1.42838731e-01
 -4.39132266e-02 -2.21560411e-02  6.46554530e-02 -2.71078814e-02
  8.56089965e-03  3.08286604e-02 -6.75025880e-02  1.39213344e-02
  6.05001859e-02  4.10071947e-02  8.18780586e-02  8.45293328e-02
 -9.21918601e-02 -9.88859236e-02 -7.38317054e-03  7.71528333e-02
 -3.65005247e-02  9.98869911e-02 -3.13323997e-02  7.54507631e-02
  3.01894471e-02  4.77241538e-02  4.85305628e-03  7.87556991e-02
 -9.80704278e-03 -4.98709604e-02  4.01172899e-02 -4.56884466e-02
 -7.86208659e-02  1.00138828e-01 -3.60204764e-02 -1.21539406e-01
  1.48446194e-03  6.30620047e-02 -1.06865235e-01  5.15498519e-02
  1.81850031e-01 -1.08500673e-02 -2.94133648e-02 -3.94874141e-02
 -3.10883243e-02  3.24515142e-02  5.18267564e-02  1.64355561e-02
 -3.35618504e-03  2.68509667e-02  2.97604091e-02 -1.20454840e-01
 -2.40661632e-02  5.43095917e-03 -1.08428625e-02  2.42129844e-02
  1.30378634e-01 -1.51631003e-02  9.83536318e-02 -2.60141324e-02
  5.56080528e-02 -3.72551568e-02 -1.32354097e-02  8.58340785e-02
 -8.64458329e-04 -1.04200758e-01 -6.10290095e-02 -3.81501205e-02
  2.68129148e-02  3.84550616e-02 -4.86281177e-04  3.36975865e-02
  3.51956487e-02 -9.30566788e-02  3.95121723e-02  6.25381172e-02
  5.65216243e-02 -1.99259613e-02  1.98949147e-02 -5.66970669e-02
 -8.97001922e-02  6.60454854e-02  3.71159203e-02 -2.11005006e-02
 -1.77709069e-02 -6.82403520e-02  5.32712303e-02 -2.98841801e-02
 -6.75137788e-02  3.52329053e-02 -4.53189723e-02 -3.24347392e-02
  1.25023921e-03 -4.88943607e-02 -3.16975787e-02 -5.25780983e-08
 -9.37964171e-02 -3.11756283e-02  9.69797093e-03  3.65178101e-02
  1.86436716e-02 -1.14800334e-01  7.09824488e-02 -1.77614391e-02
 -6.03697635e-02 -5.26390038e-03  3.09912581e-02  5.52881844e-02
 -1.55721400e-02  2.44645551e-02 -2.31107175e-02 -4.80939411e-02
  1.23165781e-02 -7.76516870e-02 -3.10994852e-02 -2.28155702e-02
 -4.20241989e-02 -2.84689963e-02 -6.56175148e-03 -3.52120474e-02
  1.70041237e-03 -5.41569814e-02 -3.00050359e-02  5.23011796e-02
  7.13871270e-02  2.60229409e-02  7.77815729e-02  2.27593090e-02
 -1.46449795e-02 -1.97942760e-02  9.05050337e-03  5.01664318e-02
  1.03447633e-02  1.30202509e-02  3.51285115e-02 -7.18088029e-03
 -2.63799783e-02  1.39535060e-02  2.04108767e-02 -1.68753061e-02
  2.07688287e-03 -1.48062008e-02 -8.97602178e-03 -8.09199736e-02
  1.39496610e-01 -2.68034749e-02 -9.56822336e-02 -7.42688030e-02
  4.18326370e-02  6.22108467e-02 -6.75599277e-02 -7.08895549e-02
  1.17808590e-02  3.02169677e-02 -7.11941198e-02  9.38218459e-03
  4.93025109e-02 -7.72056589e-03 -3.59716713e-02 -5.74489944e-02]"
"  content: String
}


impl BlogInstruction {
    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {
        let (variant, rest) = input.split_first().ok_or(BlogError::InvalidInstruction)?;
        let payload = PostIxPayload::try_from_slice(rest).unwrap();

        Ok(match variant {
            0 => Self::InitBlog {},
            1 => Self::CreatePost {
                slug: payload.slug,
                title: payload.title,
                content: payload.content
            },
            _ => return Err(BlogError::InvalidInstruction.into()),
        })
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug, Clone)]
pub struct Blog {
    pub authority: Pubkey,
    pub bump: u8,
    pub post_count: u8 // 10 posts max
}

#[derive(BorshSerialize, BorshDeserialize, Debug, Clone)]
pub struct Post {
    pub author: Pubkey,
    pub blog: Pubkey,
    pub bump: u8,
    pub slug: String, // 10 chars max
    pub title: String, // 20 chars max
    pub content: String, // 50 chars max
}

impl Blog {
    pub const LEN: usize = 32 + 1 + 1;
}

#[derive(Error, Debug, Copy, Clone)]
pub enum BlogError {
    #[error(""Invalid Instruction"")]
    InvalidInstruction,

    #[error(""Invalid Blog Account"")]
    InvalidBlogAccount,

    #[error(""Invalid Post Account"")]
    InvalidPostAccount,

    #[error(""Invalid Post Data"")]
    InvalidPostData,

    #[error(""Account not Writable"")]
    AccountNotWritable,
}

impl From<BlogError> for ProgramError {
    fn from(e: BlogError) -> Self {
        return ProgramError::Custom(e as u32);
    }
}
fn process_create_post(
    accounts: &[AccountInfo],
    slug: String,
    title: String,
    content: String,
    program_id: &Pubkey
) -> ProgramResult {
    if slug.len() > 10 || content.len() > 20 || title.len() > 50 {
        return Err(BlogError::InvalidPostData.into())
    }

    let account_info_iter = &mut accounts.iter();

    let authority_account = next_account_info(account_info_iter)?;
    let blog_account = next_account_info(account_info_iter)?;
    let post_account = next_account_info(account_info_iter)?;
    let system_program = next_account_info(account_info_iter)?;

    if !authority_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature);
    }

    let (blog_pda, _blog_bump) = Pubkey::find_program_address(
        &[b""blog"".as_ref(), authority_account.key.as_ref()],
        program_id
    );
    if blog_pda != *blog_account.key || !blog_account.is_writable || blog_account.data_is_empty() {
        return","[-7.46969581e-02  2.81414632e-02  4.99662617e-03 -1.88681725e-02
 -1.17684454e-02 -6.52985945e-02 -1.85444709e-02  2.45443806e-02
 -2.33174418e-03 -2.79628001e-02 -4.25700360e-04 -5.11988960e-02
 -2.62334086e-02  5.73501103e-02  8.39149803e-02  1.85592156e-02
 -4.79346886e-02 -3.47665958e-02 -3.28380093e-02  2.23487318e-02
  9.99492332e-02  9.59883928e-02 -1.28140524e-02  1.22577533e-01
  2.17731502e-02 -4.13415954e-02 -7.09128231e-02 -6.29470171e-03
  4.67592776e-02 -9.02404413e-02  1.25129014e-01 -3.45697254e-02
 -1.49761783e-02  2.52173748e-02  9.77363810e-02  8.41104835e-02
  3.48790623e-02 -1.29028544e-01  4.73412313e-02 -4.35703173e-02
 -3.47086834e-03  1.41138984e-02 -1.05737090e-01  2.41756327e-02
  5.31455642e-03 -6.85553066e-03  3.45907407e-03  2.68431250e-02
 -1.27866305e-02  2.65594088e-02 -3.93917412e-02  1.07653141e-02
 -3.79077531e-02  4.64822128e-02  7.66322911e-02  4.79582734e-02
 -1.00451715e-01  2.57777851e-02  4.77726832e-02 -5.41296713e-02
  1.01814819e-02 -1.31384227e-02  2.84664948e-02 -3.89350876e-02
  4.26082574e-02 -2.62800716e-02  3.18510720e-04  1.52061926e-02
  5.79796359e-03  4.53457572e-02  7.56334290e-02 -2.36196816e-02
 -1.24473022e-02  7.37048090e-02  3.89848952e-03  8.14208090e-02
 -4.21879366e-02 -7.85630289e-03 -4.35044356e-02 -2.34524626e-02
 -1.15326745e-02 -1.10087935e-02 -1.70194823e-03  1.18245982e-01
 -1.35447457e-02  3.32918987e-02  7.51597481e-03 -1.80391949e-02
  2.40859054e-02  2.48291995e-02 -5.81759997e-02 -5.17537892e-02
  3.03250104e-02  5.68975136e-02  3.59857939e-02 -8.87325127e-03
 -4.28946642e-03  1.13474550e-02  1.49309821e-02  1.08881302e-01
 -2.84873899e-02  3.89725305e-02  4.19920571e-02 -5.07450786e-05
 -1.70621797e-02 -8.99737328e-02 -5.14205219e-03 -1.35773942e-02
 -4.69952747e-02  3.67073901e-02  5.26223071e-02  5.74433357e-02
 -6.90907752e-03 -8.34645517e-03  2.65245456e-02  2.65374184e-02
  4.45548492e-03 -3.69854011e-02  1.76856890e-02  9.19886027e-03
  8.20752829e-02  4.97557037e-03  3.06255259e-02  6.48427084e-02
 -4.06265445e-02 -4.33576554e-02  3.16251442e-02  7.99174602e-33
  3.21054570e-02  4.09883261e-02 -2.81045623e-02  7.55909607e-02
  1.44544775e-02 -3.11348122e-02  3.60844843e-03  2.91865673e-02
 -1.23572975e-01 -5.56789003e-02 -9.54718739e-02 -4.25889976e-02
  9.43282805e-03 -1.88477896e-03  8.10649619e-02 -4.47920710e-02
  2.42588948e-02  6.60794750e-02  5.86684756e-02  6.87479600e-02
  1.19895749e-01  4.46157483e-03 -5.05758151e-02 -4.96812388e-02
 -3.38974409e-02 -1.78503047e-04 -1.69581119e-02 -5.41900545e-02
 -4.88949716e-02  1.45089170e-02  9.35476366e-03 -3.72538972e-03
  3.29910740e-02  2.17613000e-02  7.42189139e-02 -6.40400425e-02
 -9.06418730e-03  1.97568582e-03 -1.64648607e-01 -4.55450229e-02
  1.94918755e-02  3.86937559e-02 -6.44132197e-02  3.59331965e-02
  5.56315668e-02 -5.26760332e-02 -4.78101224e-02 -4.19140011e-02
 -2.15924699e-02 -4.61713225e-02  3.45132910e-02  5.71942851e-02
  9.40933824e-03 -4.32093740e-02 -8.87158886e-03 -6.11506775e-02
  6.35503605e-02 -3.28368247e-02  6.99732602e-02  2.16628350e-02
  2.76979022e-02  6.48492798e-02  2.01431978e-02  8.74515716e-03
  4.54020165e-02  3.16767171e-02 -3.64798270e-02  3.27423774e-02
  5.42851575e-02 -3.74917537e-02 -1.27746621e-02  2.29872931e-02
 -1.07664630e-01 -3.62774879e-02 -4.16680463e-02 -5.15788943e-02
 -4.78300489e-02 -5.82061335e-02  8.75611044e-03 -1.06975660e-01
 -4.05701296e-03 -4.74321693e-02 -5.52227348e-02  1.06575480e-02
 -6.43992573e-02 -5.44294156e-03  1.89002883e-02 -4.33204360e-02
 -1.83776077e-02  1.91113763e-02  1.24175157e-02 -7.85077214e-02
 -1.88205894e-02 -1.42956704e-01 -2.75548305e-02 -7.50221286e-33
 -2.39766994e-03 -3.03934682e-02 -2.56520379e-02  5.36088226e-03
 -6.84899762e-02 -3.27727236e-02  2.12265849e-02  8.43142867e-02
  2.92812213e-02  2.27929689e-02 -5.06163575e-02 -3.07209534e-03
  6.14173934e-02  1.55686317e-02 -2.14536916e-02  4.78151580e-03
 -8.63851309e-02 -1.31019354e-01 -2.17573270e-02  1.65298376e-02
 -3.82506568e-03  2.36250516e-02 -2.60440428e-02  5.83160780e-02
  1.93499923e-02  9.72290039e-02  5.93532994e-02  3.78265716e-02
  8.44544023e-02 -3.64298597e-02  3.34100723e-02  1.81261506e-02
 -3.54213789e-02  2.50468887e-02 -5.86446375e-02  3.43432203e-02
  3.57410614e-03  9.67201740e-02  3.66545469e-02 -5.82532138e-02
  2.31814831e-02  1.95009783e-02 -7.90335760e-02  1.27462493e-02
 -5.30148633e-02 -2.59110946e-02  4.20040265e-02  7.44045526e-02
  8.73732269e-02  1.84964854e-02  6.79274648e-02 -2.98462268e-02
 -1.43795954e-02 -1.27119413e-02 -2.80658826e-02 -8.51976350e-02
  2.53999364e-02 -5.45721576e-02 -2.92071775e-02 -3.40765081e-02
 -8.43462348e-03 -1.13154082e-02 -2.28450652e-02  5.68993501e-02
  8.93672556e-02 -1.47084132e-01 -9.28006321e-02 -5.16090244e-02
 -1.21988021e-02 -1.45564666e-02  1.21219344e-02  2.68829372e-02
  4.24570637e-03 -3.68149765e-02  1.34282514e-01  2.44282633e-02
 -3.50345373e-02 -2.01402754e-02  4.87056524e-02  3.72273363e-02
 -1.53644547e-01  1.04065309e-03  3.77402119e-02  1.11253664e-01
  7.50814602e-02 -6.86470717e-02  5.57009280e-02  6.53937683e-02
 -4.82837968e-02 -7.89667945e-03  3.69863734e-02 -2.47196550e-03
 -2.66319811e-02  1.45040769e-02  1.97039507e-02 -5.35013882e-08
 -1.21490560e-01 -4.74213660e-02 -1.02419786e-01  1.04070984e-01
  4.49457839e-02 -2.04142313e-02 -1.11680590e-02 -7.16482028e-02
  7.39708841e-02 -7.08554015e-02 -8.60391110e-02  5.27513549e-02
 -6.24931231e-02 -3.83233391e-02 -2.48018932e-03 -4.02752049e-02
  2.85627097e-02 -1.72217228e-02 -5.83246127e-02 -9.94171873e-02
 -3.13167050e-02 -5.98510094e-02 -1.66291427e-02 -7.81235248e-02
  4.10379022e-02 -1.73968989e-02 -3.07226162e-02  5.13326228e-02
  3.41621712e-02 -1.40212514e-02  6.50531352e-02 -2.01278888e-02
  2.11165380e-03  2.06471793e-03  3.15252952e-02  4.81713563e-02
  4.61230278e-02  3.62039059e-02  2.04505008e-02 -1.60129704e-02
  2.17822846e-02 -1.46480286e-02 -3.55851315e-02  5.42717567e-03
 -2.93553062e-02 -9.93659813e-03 -3.97202931e-02  4.83705141e-02
  7.39025138e-03  8.75411183e-03  7.30047747e-03 -7.33117163e-02
 -3.29174940e-03  3.99215706e-02 -5.77023588e-02 -3.64037566e-02
  1.58947296e-02 -5.28698452e-02  1.81797240e-02  2.80282535e-02
  1.29505396e-01 -1.40110729e-03  9.38706398e-02  1.49954418e-02]"
"Err(BlogError::InvalidBlogAccount.into())
    }

    let (post_pda, post_bump) = Pubkey::find_program_address(
        &[b""post"".as_ref(), slug.as_ref(), authority_account.key.as_ref()],
        program_id
    );
    if post_pda != *post_account.key {
        return Err(BlogError::InvalidPostAccount.into())
    }

    let post_len: usize = 32 + 32 + 1 + (4 + slug.len()) + (4 + title.len()) + (4 + content.len());

    let rent = Rent::get()?;
    let rent_lamports = rent.minimum_balance(post_len);

    let create_post_pda_ix = &system_instruction::create_account(
        authority_account.key,
        post_account.key,
        rent_lamports,
        post_len.try_into().unwrap(),
        program_id
    );
    msg!(""Creating post account!"");
    invoke_signed(
        create_post_pda_ix, 
        &[
            authority_account.clone(),
            post_account.clone(),
            system_program.clone()
        ],
        &[&[
            b""post"".as_ref(),
            slug.as_ref(),
            authority_account.key.as_ref(),
            &[post_bump]
        ]]
    )?;

    let mut post_account_state = try_from_slice_unchecked::<Post>(&post_account.data.borrow()).unwrap();
    post_account_state.author = *authority_account.key;
    post_account_state.blog = *blog_account.key;
    post_account_state.bump = post_bump;
    post_account_state.slug = slug;
    post_account_state.title = title;
    post_account_state.content = content;

    msg!(""Serializing Post data"");
    post_account_state.serialize(&mut &mut post_account.data.borrow_mut()[..])?;


    let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;
    blog_account_state.post_count += 1;

    msg!(""Serializing Blog data"");
    blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;

    Ok(())
}

fn process_init_blog(
    accounts: &[AccountInfo],
    program_id: &Pubkey
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();
    
    let authority_account = next_account_info(account_info_iter)?;
    let blog_account = next_account_info(account_info_iter)?;
    let system_program = next_account_info(account_info_iter)?;

    if !authority_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature);
    }

    let (blog_pda, blog_bump) = Pubkey::find_program_address(
        &[b""blog"".as_ref(), authority_account.key.as_ref()],
        program_id 
    );
    if blog_pda != *blog_account.key {
        return Err(BlogError::InvalidBlogAccount.into())
    }

    let rent = Rent::get()?;
    let rent_lamports = rent.minimum_balance(Blog::LEN);
    
    let create_blog_pda_ix = &system_instruction::create_account(
","[-5.64522482e-02  3.25907283e-02 -8.54706913e-02  1.30830696e-02
 -9.06088352e-02 -1.50873698e-02  2.47774296e-04  3.09152771e-02
  1.89441573e-02  3.80476266e-02  8.71352628e-02 -8.16098228e-02
  5.40199839e-02 -4.47417982e-02  1.46596152e-02  8.27757940e-02
 -7.70648345e-02 -4.36831601e-02 -4.86873277e-03  9.77019593e-03
  7.59618208e-02 -7.85766076e-03 -4.44494747e-03  5.10960035e-02
  1.86020173e-02 -5.95819876e-02 -5.92150353e-02  4.28390279e-02
  2.16730479e-02 -5.36724851e-02  8.40406567e-02 -1.42769916e-02
  2.77840979e-02  1.00511347e-03  1.70129016e-01  9.09524038e-02
 -4.79097152e-03 -1.16371080e-01  2.23089606e-02 -2.65274793e-02
 -4.94485497e-02  3.33149210e-02  3.61954328e-04  2.61986069e-02
 -3.97856459e-02  2.62541454e-02 -3.78066190e-02  4.91673313e-02
  6.34789690e-02 -6.88912719e-02 -1.14414906e-02  2.66047753e-02
 -6.84108362e-02 -3.65964160e-03 -1.32930335e-02  4.63977791e-02
 -9.25363041e-03  5.98878041e-03  3.92890386e-02 -5.13254143e-02
  7.11542964e-02  1.75511986e-02  4.57892902e-02 -4.10610624e-02
  5.91786578e-03 -5.48821725e-02 -8.24441165e-02 -1.54171828e-02
 -4.09099795e-02  1.19054508e-04  4.09016572e-03  2.10759174e-02
 -7.07547665e-02  9.20082331e-02 -5.72678037e-02  1.37674678e-02
 -4.52930443e-02  2.76988316e-02  1.70944855e-02 -2.63514575e-02
 -2.94669326e-02  2.30226927e-02 -3.71535309e-03  7.23817945e-02
  8.22741073e-03  3.01676504e-02  4.96147340e-03 -4.84730229e-02
  4.76572625e-02  5.62492833e-02  2.41347868e-02  4.45061713e-04
  2.74138004e-02  4.93302755e-02  4.52607274e-02  1.48826633e-02
  3.52977440e-02 -5.75805306e-02 -5.07139079e-02  1.08316801e-01
 -2.81829358e-04  2.61977389e-02 -4.28959392e-02 -2.64221523e-03
  5.28157037e-03 -2.14694720e-02  7.33388215e-02 -3.17782499e-02
 -2.90401690e-02  3.42312716e-02  1.69043075e-02  1.70095377e-02
 -6.75307820e-03 -5.17415907e-03  2.16845535e-02  3.80626135e-02
  5.23886085e-03 -3.24641168e-02  1.90830138e-02  1.21141709e-02
  9.38764662e-02  1.10448766e-02 -3.96617576e-02 -4.34771888e-02
 -6.15740903e-02 -3.24879773e-02  6.00384548e-02  8.37897998e-35
  2.13623568e-02 -1.15409810e-02 -3.25053930e-02  7.70472214e-02
 -1.95641946e-02  7.46397581e-03 -1.26765408e-02  1.54793888e-01
 -1.25868246e-01  3.84684801e-02  4.55611898e-03 -7.73509368e-02
  2.06271280e-02 -2.99810804e-02  4.52992022e-02 -4.25666012e-02
  9.68044326e-02  7.95885697e-02  7.34283701e-02 -1.28866322e-02
  3.58040556e-02 -2.71360260e-02  2.91310642e-02 -7.78384283e-02
  3.77296917e-02  2.41306219e-02 -5.68406656e-02  9.18147562e-05
 -3.39191966e-02  9.88732185e-03 -2.04563048e-02 -1.68664427e-03
 -6.49557859e-02 -1.88864693e-02  8.72449428e-02 -6.12043180e-02
  3.43397609e-03 -7.46301934e-03 -1.56335980e-01 -5.77053893e-03
  9.34323762e-03  6.86619757e-03 -2.69370973e-02 -7.61661353e-03
  8.38874187e-03  4.52791341e-02  2.66683381e-02 -1.59979407e-02
 -2.21676491e-02  6.15166910e-02 -3.49972770e-02  5.52840270e-02
 -1.00396514e-01  2.17628609e-02 -6.31841645e-02 -2.08388343e-02
  5.62840607e-03 -7.54600763e-02  4.11541462e-02 -4.37774919e-02
  2.88824849e-02  5.77770099e-02 -2.01530289e-02 -1.77218728e-02
  2.90431045e-02 -4.18647006e-02 -3.78260128e-02  5.52423634e-02
  8.54345784e-02 -4.47390489e-02  2.10786033e-02 -7.26960003e-02
 -6.68441430e-02  3.79119478e-02 -6.01507016e-02 -1.09947681e-01
 -2.28713136e-02 -4.33701510e-03 -6.08102754e-02 -7.43658692e-02
  4.67247739e-02 -7.20295385e-02 -3.71867791e-02  4.54852777e-03
 -7.18978196e-02  3.58787403e-02  5.94036579e-02  1.81179531e-02
 -3.40330377e-02  4.83336858e-02  6.17695646e-03 -4.87560108e-02
  2.89974082e-03 -7.06226826e-02 -2.41952911e-02 -3.23890277e-33
 -3.02269887e-02 -7.49301240e-02 -7.96707273e-02 -1.35875538e-01
  1.38300853e-02 -3.25977951e-02  7.78230419e-03 -2.50162371e-03
  3.97322094e-03  1.88464932e-02 -1.17433935e-01  4.11180630e-02
  6.41438663e-02  4.65466343e-02  6.02689795e-02  1.31453294e-02
 -9.07377228e-02 -7.69853964e-02 -5.06641492e-02  1.11111306e-01
 -3.78785990e-02  8.88663307e-02 -2.13583913e-02  9.45768133e-02
 -8.78692605e-03  5.92701882e-02  2.09521633e-02  5.97374178e-02
 -2.93902829e-02  1.96639448e-02  3.16662677e-02  7.23744044e-03
 -1.08803034e-01  1.24519892e-01 -4.99795228e-02 -1.11880407e-01
  1.58298109e-02  2.58772206e-02 -2.08608843e-02  5.08890077e-02
  1.54112816e-01 -1.75889321e-02  2.43329932e-03 -4.68822196e-02
  2.41276044e-02 -3.73063311e-02  3.13481428e-02  1.85924117e-02
  2.65766308e-02  5.41188605e-02  1.00806095e-02 -5.96256740e-02
 -4.97111753e-02  3.64962104e-03 -3.05491686e-03 -1.04881469e-02
  8.81647840e-02  6.68100547e-04  1.09181479e-01 -1.75692514e-02
 -6.86248485e-03  1.99792776e-02 -3.93348299e-02  9.46396440e-02
  3.97358984e-02 -1.22068718e-01 -5.15621267e-02 -3.92041132e-02
  1.28586181e-02  1.65430224e-03 -3.06389704e-02  3.88606936e-02
  2.38396954e-02 -5.96218929e-02  4.86066914e-04  1.83083955e-02
  5.13014421e-02  1.02546699e-02  2.94934679e-02 -2.26301495e-02
 -9.04642567e-02  4.08315547e-02  9.70968306e-02 -6.30359259e-03
 -1.22770704e-02 -6.26723021e-02  5.09213470e-02 -5.24873920e-02
 -1.15984939e-01  4.04004045e-02 -2.82232184e-02 -8.78682185e-04
 -1.73974801e-02 -4.92641050e-03 -3.96071635e-02 -5.44928511e-08
 -7.27099329e-02  3.45212291e-03 -1.86380204e-02  8.14669579e-02
  4.01083380e-02 -9.01247412e-02  3.70366797e-02 -3.31045091e-02
  2.26868000e-02 -3.70527580e-02 -6.28607755e-04  5.50301969e-02
 -1.16234189e-02  1.77627970e-02 -6.77843466e-02 -5.67502230e-02
 -2.61917524e-02 -6.04466796e-02 -4.02448066e-02 -4.52919826e-02
 -2.72824615e-02 -4.76366952e-02  1.63644888e-02 -6.14943840e-02
  3.61447930e-02 -3.88410129e-02 -2.45072208e-02  1.15473554e-01
  7.85153508e-02  3.96297015e-02  8.09174478e-02  4.56033461e-02
 -2.43876707e-02 -1.55363595e-02  1.59821305e-02  2.33051702e-02
  6.84946775e-02  1.02959890e-02  2.57624220e-02  1.47867333e-02
 -3.58044100e-03  3.67713496e-02  2.25100070e-02 -4.05684523e-02
 -2.12527346e-02  1.10104633e-02 -1.60956215e-02 -2.68354267e-02
  9.76833776e-02 -1.05609605e-02 -6.24854378e-02 -5.81514426e-02
 -1.37232738e-02  5.50686829e-02  1.11918468e-02 -5.09025268e-02
  8.66706856e-03 -2.14629862e-02 -8.86642635e-02  3.25402915e-02
  6.98149428e-02  1.00908466e-02  5.66497656e-05 -2.40247119e-02]"
"       authority_account.key,
        blog_account.key,
        rent_lamports,
        Blog::LEN.try_into().unwrap(),
        program_id
    );
    msg!(""Creating blog account!"");
    invoke_signed(
        create_blog_pda_ix, 
        &[
            authority_account.clone(),
            blog_account.clone(),
            system_program.clone()
        ],
        &[&[
            b""blog"".as_ref(),
            authority_account.key.as_ref(),
            &[blog_bump]
        ]]
    )?;

    let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;
    blog_account_state.authority = *authority_account.key;
    blog_account_state.bump = blog_bump;
    blog_account_state.post_count = 0;
    blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;
    

    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143On the client-side, you can use PublicKey.findProgramAddress() to obtain the required Blog and Post account address, which you can pass into connection.getAccountInfo() to fetch the account data. An example is shown below,TSPress </> button to view full sourceimport * as borsh from ""@project-serum/borsh"";
import { PublicKey } from ""@solana/web3.js"";

export const BLOG_ACCOUNT_DATA_LAYOUT = borsh.struct([
  borsh.publicKey(""authorityPubkey""),
  borsh.u8(""bump""),
  borsh.u8(""postCount""),
]);

export const POST_ACCOUNT_DATA_LAYOUT = borsh.struct([
  borsh.publicKey(""author""),
  borsh.publicKey(""blog""),
  borsh.u8(""bump""),
  borsh.str(""slug""),
  borsh.str(""title""),
  borsh.str(""content""),
]);

async () => {
  const connection = new Connection(""http://localhost:8899"", ""confirmed"");

  const [blogAccount] = await PublicKey.findProgramAddress(
    [Buffer.from(""blog""), user.publicKey.toBuffer()],
    MY_PROGRAM_ID
  );

  const [postAccount] = await PublicKey.findProgramAddress(
    [Buffer.from(""post""), Buffer.from(""slug-1""), user.publicKey.toBuffer()],
    MY_PROGRAM_ID
  );

  const blogAccountInfo = await connection.getAccountInfo(blogAccount);
  const blogAccountState = BLOG_ACCOUNT_DATA_LAYOUT.decode(
    blogAccountInfo.data
  );
  console.log(""Blog account state: "", blogAccountState);

  const postAccountInfo = await connection.getAccountInfo(postAccount);
  const postAccountState = POST_ACCOUNT_DATA_LAYOUT.decode(
    postAccountInfo.data
  );
  console.log(""Post account state: "", postAccountState);
};
12345678910111213141516171819202122232425262728293031323334353637383940414243async () => {
  const connection = new Connection(""http://localhost:8899"", ""confirmed"");

  const [blogAccount] = await PublicKey.findProgramAddress(
    [Buffer.from(""blog""), user.publicKey.toBuffer()],
    MY_PROGRAM_ID
  );

  const [postAccount] = await PublicKey.findProgramAddress(
    [Buffer.from(""post""), Buffer.from(""slug-1""), user.publicKey.toBuffer()],
    MY_PROGRAM_ID
  );

  const blogAccountInfo = await connection.getAccountInfo(blogAccount);
  const blogAccountState = BLOG_ACCOUNT_DATA_LAYOUT.decode(
    blogAccountInfo.data
  );
  console.log(""Blog account state: "", blogAccountState);

  const postAccountInfo = await connection.getAccountInfo(postAccount);
  const postAccountState = POST_ACCOUNT_DATA_LAYOUT.decode(
    postAccountInfo.data
  );
  console.log(""Post account state: "", postAccountState);
};
12345678910111213141516171819202122232425# Single Map AccountAnother way to implement mapping would be to have a BTreeMap data structure explicitly stored in a single account. This account's address itself could be a PDA, or the public key of a generated Keypair.This method of mapping accounts is not ideal because of","[-6.06713668e-02  2.63335984e-02 -6.08167909e-02  4.10713349e-03
 -4.54686247e-02 -5.13740331e-02  2.27857716e-02  2.46022455e-02
 -4.73825708e-02  5.56807071e-02  7.45283440e-02 -7.93368220e-02
  6.07389659e-02 -4.07811999e-02  7.50647932e-02  8.20547566e-02
 -6.39308617e-02  2.04548314e-02  4.88199666e-03  6.86360523e-02
  1.02099888e-01 -8.93272087e-03 -8.94594006e-03  4.03611325e-02
  4.43424359e-02 -9.66635570e-02 -5.32771572e-02 -2.70935670e-02
  5.42563573e-02 -2.50915065e-02  8.62343460e-02 -2.02812385e-02
 -1.07435666e-01  1.58475749e-02  1.11617140e-01  8.49346071e-02
  6.80273995e-02 -5.44562563e-02  2.76964307e-02  1.29702091e-02
  8.53982568e-02  2.42511146e-02 -6.24866746e-02 -3.22128758e-02
 -5.48945107e-02 -2.27708928e-02  2.52376962e-02  5.80465347e-02
  2.82391044e-03 -6.86810836e-02 -7.12759048e-02  2.34000641e-03
 -6.98347464e-02  2.52718991e-03 -1.94763788e-03  2.06436794e-02
  1.19469818e-02 -2.13708170e-02  7.66895339e-03 -3.49001512e-02
  1.21491672e-02  1.79193094e-02 -9.66779981e-03 -1.56900138e-02
 -4.76750592e-03 -3.90893519e-02 -1.87112596e-02  7.41792545e-02
  3.48035176e-03 -2.62804739e-02 -1.05005167e-02 -2.10590884e-02
 -8.65582153e-02  9.91251133e-03 -1.40632186e-02  1.23684946e-02
 -2.72327773e-02  6.24538995e-02 -9.61583331e-02 -1.15220465e-01
 -7.28229657e-02  3.50054279e-02  1.19563146e-02  8.84938687e-02
 -1.51497324e-03 -8.51826929e-03  2.38065124e-02 -2.02616882e-02
  4.35950756e-02  5.16829565e-02  1.58099700e-02 -8.04875791e-03
  5.10474630e-02 -1.48711046e-02  5.35400622e-02  5.07068858e-02
  4.61824276e-02 -3.22886482e-02  2.34038215e-02  9.68837664e-02
 -6.95980489e-02  4.77867527e-03 -3.35602439e-03  1.18412459e-02
  1.65706053e-02 -5.02617992e-02 -2.21661967e-03 -7.33638033e-02
 -3.31338532e-02  3.43349837e-02  1.93998516e-02  1.09214991e-01
 -1.39899533e-02 -1.52073838e-02  8.04889128e-02  1.20986328e-02
 -8.41521006e-03 -3.08661126e-02  3.01673240e-03 -1.22619933e-02
  6.94853514e-02  2.14585802e-03  1.64674595e-02  5.26933186e-02
 -1.80543941e-02  2.57016905e-02  7.36486912e-02 -3.00411669e-33
  7.13231117e-02  7.85910152e-03 -3.45128737e-02  7.57043511e-02
 -2.21549459e-02  9.33307111e-02  5.44180647e-02  4.50348342e-03
 -1.55358046e-01  3.81887108e-02 -1.74817815e-02 -5.51138707e-02
  9.79175698e-03 -2.43322104e-02 -5.37987910e-02 -5.13484664e-02
  5.04588634e-02  2.38287263e-02  1.08219855e-01  1.91542432e-02
  9.40982923e-02  6.06478006e-02  1.65284320e-03 -3.72723490e-02
 -2.89440956e-02 -4.40590419e-02 -8.58311951e-02  2.16284301e-02
 -2.76114400e-02  4.91589727e-03  1.64719783e-02 -1.62847061e-02
 -1.94606017e-02  2.40474455e-02  3.10849864e-02 -4.76770736e-02
  6.73301611e-03 -2.83788405e-02 -6.99080378e-02 -4.63982485e-02
  2.03675348e-02  2.83831749e-02 -1.35749718e-02 -1.19438553e-02
 -1.41525650e-02  2.46445443e-02 -5.34287877e-02  2.17632446e-02
  2.35438943e-02  3.22272889e-02 -7.88666494e-03  1.96273886e-02
 -2.66720150e-02 -1.60857607e-02 -6.78910762e-02 -3.85604911e-02
  7.71850022e-03 -7.25640729e-02  6.37038574e-02 -7.58314133e-02
 -2.21883822e-02  2.39248443e-02 -1.91475470e-02  1.58819612e-02
  3.18074822e-02  1.69247780e-02  1.72475614e-02  2.94138547e-02
  1.12397246e-01 -3.46042179e-02  1.30261406e-02  7.28106592e-03
 -1.37565240e-01 -2.52930224e-02 -3.53285708e-02 -7.16537461e-02
 -6.69359863e-02 -2.96389349e-02 -7.35560209e-02  1.25104357e-02
  1.88209526e-02  1.95100214e-02 -1.22397341e-01 -9.22492240e-03
 -3.41622494e-02  3.01006231e-02  3.71735469e-02  9.80588049e-03
 -4.64486480e-02 -1.13547193e-02  1.14265981e-03 -1.50264604e-02
  6.29083291e-02 -9.86665189e-02 -1.79879591e-02  1.15380997e-33
  1.54094109e-02 -7.97588676e-02  6.14277683e-02 -2.53289733e-02
 -2.84710806e-02 -2.40562521e-02  4.30953875e-02  7.10728671e-03
 -9.81387645e-02  4.32927720e-02 -4.82904911e-02 -5.94064184e-02
  3.28258723e-02  5.92329986e-02  1.01741791e-01 -4.85149585e-03
 -6.78736046e-02 -7.01906160e-02  1.22165717e-02  2.38781422e-02
 -4.24890816e-02  8.11563358e-02 -3.94189395e-02  1.39148429e-01
  2.06460841e-02  1.23354383e-02 -5.55788986e-02  9.70788822e-02
  1.28722051e-02 -1.40320554e-01  6.02848046e-02  4.40229662e-03
 -9.31231976e-02  7.28080869e-02 -7.01590478e-02 -2.92088185e-02
 -6.24794373e-03  8.63040164e-02 -5.32195978e-02  1.44505873e-02
  1.08267590e-01 -5.04810214e-02 -3.84711288e-02  2.44605727e-03
 -3.57077159e-02 -1.00636054e-02  3.99935804e-02  5.96349128e-02
 -2.06130426e-02  5.76455556e-02  7.17863906e-03 -6.39824718e-02
  1.06526027e-02  5.12229686e-04  2.12925207e-02 -5.03061116e-02
  1.28234789e-01  1.09968623e-02  3.93530056e-02 -5.70168570e-02
  4.08956036e-02 -3.30883004e-02  4.84792003e-03  3.87921408e-02
  7.79677974e-03 -9.23380703e-02  3.35454531e-02 -5.95557913e-02
 -4.16340446e-03  1.58328060e-02  2.40795617e-03  6.81090057e-02
  4.49303314e-02 -1.05611645e-01  9.24634486e-02  2.93153562e-02
  7.09135085e-04 -9.80924070e-03  2.05784421e-02 -2.08629575e-02
 -9.25137177e-02  2.73786765e-02  5.61106950e-02  1.62918065e-02
 -3.08096339e-03 -9.48846042e-02  6.25982732e-02 -3.05836014e-02
 -2.59447340e-02 -1.27918543e-02 -4.84422557e-02 -3.94139849e-02
  8.20001960e-03  1.80086941e-02  4.38305438e-02 -5.31035234e-08
 -7.10442141e-02 -2.63057463e-02 -6.18068129e-02  1.20684840e-01
  5.90560352e-03 -7.58308917e-02 -1.30632790e-02 -6.56642765e-02
 -1.66494399e-02 -1.55422390e-02  2.69436166e-02  1.53006259e-02
  2.47042570e-02  3.66412885e-02 -3.09932418e-02 -9.51468274e-02
  7.66181275e-02 -7.78696612e-02 -1.49701145e-02 -1.07321115e-02
 -5.20487688e-02 -4.93610129e-02 -1.22299045e-02 -6.95172744e-03
  5.59917316e-02 -3.26041169e-02 -3.01875565e-02  8.54036808e-02
  8.21011141e-02  3.40947248e-02  6.51496053e-02 -9.43913218e-03
  5.92204928e-03  3.61704640e-02 -5.77469310e-03  1.08400360e-02
  7.97667541e-03  6.60419762e-02  4.71388735e-02 -4.62861657e-02
  3.84172611e-02  2.49505099e-02  1.97204109e-02 -1.95451584e-02
 -2.23260820e-02 -4.16652672e-02 -6.45330176e-02 -1.19932713e-02
  1.30973920e-01  4.21977416e-02 -5.64438142e-02 -4.37931940e-02
  8.39024261e-02  6.62332252e-02 -9.19243246e-02 -5.72511777e-02
  1.05169388e-02  2.49177404e-02  8.45549162e-03  4.60856967e-02
  8.53083879e-02 -2.23861709e-02 -1.32667487e-02 -2.63439361e-02]"
"the following reasons,You will have to first initialize the account storing the BTreeMap, before you can insert the necessary key-value pairs to it. Then, you will also have to store the address of this account somewhere, so as to update it every time.There are memory limitations to an account, where an account can have a maximum size of 10 megabytes, which restricts the BTreeMap from storing a large number of key-value pairs.Hence, after considering your use-case, you can implement this method as shown below,RustPress </> button to view full sourceuse std::{collections::BTreeMap};
use thiserror::Error;
use borsh::{BorshSerialize, BorshDeserialize};
use num_traits::FromPrimitive;
use solana_program::{sysvar::{rent::Rent, Sysvar}, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey, account_info::{AccountInfo, next_account_info}, program_error::ProgramError, system_instruction, msg, program::{invoke_signed}, borsh::try_from_slice_unchecked};

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!(""instruction_data: {:?}"", instruction_data);
    Processor::process(program_id, accounts, instruction_data)
}

pub struct Processor;

impl Processor {
    pub fn process(
        program_id: &Pubkey,
        accounts: &[AccountInfo],
        instruction_data: &[u8]
    ) -> ProgramResult {
        let instruction = FromPrimitive::from_u8(instruction_data[0]).ok_or(ProgramError::InvalidInstructionData)?;

        match instruction {
            0 => {
                msg!(""Initializing map!"");
                Self::process_init_map(accounts, program_id)?;
            },
            1 => {
                msg!(""Inserting entry!"");
                Self::process_insert_entry(accounts, program_id)?;
            },
            _ => {
                return Err(ProgramError::InvalidInstructionData)
            }
        }
        Ok(())
    }

    fn process_init_map(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {
        let account_info_iter = &mut accounts.iter();

        let authority_account = next_account_info(account_info_iter)?;
        let map_account = next_account_info(account_info_iter)?;
        let system_program = next_account_info(account_info_iter)?;

        if !authority_account.is_signer {
            return Err(ProgramError::MissingRequiredSignature)
        }

        let (map_pda, map_bump) = Pubkey::find_program_address(
            &[b""map"".as_ref()],
            program_id
   ","[-5.76699115e-02  4.09232266e-02 -1.35356784e-01  1.09333685e-02
 -4.89562117e-02 -1.99709367e-03 -1.12457825e-02  3.89746688e-02
 -5.39418310e-02 -1.72654372e-02 -1.10831764e-03 -8.16131681e-02
  1.33644110e-02 -8.29200894e-02  8.59714597e-02  1.15290120e-01
 -1.24620542e-01  6.68152096e-03  4.02054051e-03  2.84095891e-02
  3.67061794e-03  3.14840004e-02  2.31055059e-02  5.72708882e-02
 -6.06730394e-03 -1.65430233e-02  6.71953484e-02 -6.55786740e-03
  1.05031310e-02  1.29438713e-02  5.49543984e-02  6.51920289e-02
  3.14005278e-02  9.37618781e-03  4.41049710e-02  1.17032185e-01
  3.64955738e-02  3.47298644e-02 -5.67221865e-02 -8.84875935e-03
 -1.15605863e-02  8.08739439e-02 -1.00140445e-01 -5.70013979e-03
  5.06905131e-02 -6.42264038e-02  3.66094746e-02  2.51367316e-02
 -3.07178777e-03 -1.33048277e-02 -4.26047258e-02  5.16750999e-02
 -4.03385386e-02  4.28372622e-02  4.06247273e-04  7.69190714e-02
  1.64996032e-02 -7.21322298e-02  1.40636535e-02  5.61457966e-03
 -1.46635063e-03  2.75167879e-02  5.18162176e-02 -9.90063474e-02
 -9.70660988e-03  1.06923003e-02  1.24435937e-02  3.86897624e-02
  1.98373720e-02  2.52807103e-02  5.84893562e-02 -8.03366154e-02
 -1.06850937e-01 -1.93812344e-02 -6.38972446e-02  1.00415749e-02
  2.65149456e-02 -6.27586171e-02  8.61049164e-03 -7.43581308e-03
 -1.54197440e-02 -3.09360791e-02  2.66650449e-02  4.19406919e-03
 -1.13384612e-02 -2.02279985e-02 -1.91124082e-02 -5.45576513e-02
  2.60307211e-02  6.62433654e-02  2.95884144e-02 -6.17667846e-02
 -3.70587446e-02 -4.93094958e-02  9.22030732e-02  5.64722009e-02
  1.74710155e-02  1.16341515e-02  3.03544383e-02  7.47491345e-02
  1.78104583e-02 -1.38144912e-02 -2.83276141e-02 -2.36873627e-02
 -2.56089550e-02 -4.26685587e-02  1.11863077e-01  7.27688195e-03
 -1.74966753e-02  6.52714968e-02  9.36631560e-02  2.19254829e-02
  1.00300470e-02  2.75598303e-03  1.94411003e-03  9.39073320e-03
 -5.03566265e-02  2.02970114e-02  2.92546581e-02  1.95943061e-02
  7.85321742e-02  1.57721713e-02  2.76778787e-02  1.14549063e-02
 -3.98431122e-02 -4.27211151e-02 -5.91846444e-02  6.88056370e-33
  9.11360681e-02 -1.25040067e-02 -1.22857671e-02  2.19277311e-02
 -4.45854589e-02  2.25857440e-02 -3.98556963e-02  1.01688076e-02
 -9.97448489e-02 -3.78011130e-02 -7.53571764e-02 -6.27930462e-02
 -4.08206247e-02 -6.49812967e-02 -4.52459902e-02 -2.84271482e-02
 -2.21230257e-02  6.37772456e-02 -2.55341176e-02 -3.53715606e-02
  4.05341946e-02  2.25753523e-02 -5.78200296e-02 -7.08001573e-03
  4.45094928e-02  1.32462624e-02 -3.12245842e-02  8.49598274e-03
  8.54852144e-03 -1.32988216e-02  7.70222545e-02  1.02988109e-02
 -2.45608892e-02 -9.75787546e-03  6.13680109e-02 -2.83531677e-02
 -3.66416276e-02 -2.68259365e-02 -1.08421057e-01 -1.42450377e-01
  3.74045148e-02  4.26954441e-02 -2.04885919e-02  6.90072915e-03
 -1.00096576e-02 -3.41406614e-02  6.10979367e-03  7.05085769e-02
 -3.59576158e-02 -1.89978890e-02 -3.74029875e-02  6.13015890e-02
 -1.65093616e-01  3.22968252e-02  1.28542287e-02  4.52453876e-03
  1.77907571e-03 -2.48503443e-02  6.66027740e-02  8.66823420e-02
 -1.01261111e-02 -4.09345143e-04  6.51070029e-02  1.98032055e-02
  5.22750244e-02  1.00003751e-02 -2.90978383e-02  6.09442107e-02
 -4.43257615e-02 -5.62885851e-02 -1.46365957e-03  2.52131689e-02
 -6.89217001e-02  2.27046777e-02 -3.06057371e-02 -9.95456800e-02
  6.96767196e-02  3.33404131e-02 -1.25905305e-01 -5.02041169e-03
 -3.20950449e-02 -6.05769344e-02  1.72172545e-03  9.18038115e-02
 -2.79742721e-02  1.06133316e-02  1.86555963e-02 -6.70513064e-02
 -1.38633614e-02  2.47815042e-03  6.70892447e-02 -9.85075999e-03
 -4.41004038e-02 -1.25305235e-01 -6.74709380e-02 -7.80873918e-33
  1.10286623e-02 -1.23264313e-01  2.12713610e-02 -5.56711704e-02
 -6.97585894e-03 -5.24645932e-02  7.40645127e-03 -2.87352521e-02
 -6.89600185e-02 -2.56549679e-02 -7.95471817e-02  1.75040303e-04
  2.69537177e-02 -7.08369091e-02  4.78498936e-02  5.12864394e-03
  3.38123925e-02 -1.20445443e-02 -7.06695989e-02  1.33532016e-02
 -3.61756720e-02  7.82935917e-02  4.33176979e-02 -5.15483553e-03
  7.65028829e-03 -4.31945622e-02 -4.94981110e-02  5.70533536e-02
 -8.55330564e-03  2.43250150e-02  3.28577235e-02  2.90931109e-02
 -9.74766240e-02 -8.63575004e-03 -2.58126743e-02 -9.91728064e-03
  7.15681538e-03  4.84100124e-03 -3.24422903e-02  1.25462458e-01
  2.97817998e-02  2.18653604e-02 -1.04352131e-01 -2.43553314e-02
  3.19729522e-02  9.80239268e-03  1.75175294e-02 -2.13199742e-02
 -4.82978486e-03  3.14346068e-02  9.49909166e-02 -4.31397669e-02
 -5.14928512e-02 -7.10478276e-02  3.43887061e-02 -8.77528191e-02
  1.97339132e-02 -2.75238417e-02  4.30877544e-02 -8.26783478e-02
  9.68952104e-03 -8.81712139e-02  5.75824343e-02  4.24944907e-02
  3.27651985e-02 -5.02639748e-02  2.06310321e-02 -9.19132028e-03
  7.48459203e-03 -3.74419540e-02  4.82344441e-02 -1.81512646e-02
  3.93459834e-02  1.08028822e-01 -1.53636895e-02 -4.71539870e-02
  2.87420512e-03  2.98111513e-02  3.88332717e-02 -3.47747169e-02
 -8.34467858e-02  3.52031253e-02  7.79647455e-02  8.66573900e-02
  1.69867147e-02 -5.73348887e-02  8.44734684e-02  4.61338907e-02
 -4.53578793e-02 -5.15337009e-03 -6.55451715e-02  1.77853890e-02
 -1.84289292e-02  7.53947869e-02 -8.77019018e-03 -6.28956016e-08
 -1.34146616e-01 -3.28737311e-02 -4.49543111e-02  1.14704631e-01
  3.30233853e-03  1.02033000e-02 -3.02056409e-03 -3.64921801e-02
 -3.38500075e-04 -2.33068457e-03 -5.38409688e-02  8.77971277e-02
 -2.50170100e-02 -8.53575394e-02  2.73940787e-02 -5.64358458e-02
  3.12195476e-02 -6.73636124e-02 -3.48915569e-02 -1.88957434e-02
  7.02055171e-02  1.36808278e-02 -5.12817800e-02  8.29873085e-02
  3.81648205e-02 -1.39732525e-04  4.57905643e-02  5.24357744e-02
  1.27616093e-01 -6.22292496e-02  7.30761886e-02 -1.49081438e-03
  4.92145605e-02  1.00409061e-01  1.02170482e-02 -1.56772044e-02
 -4.95405309e-02  1.06124312e-01 -5.04340418e-02  5.07200435e-02
 -5.90491332e-02 -1.51785072e-02 -4.05776985e-02  1.49650937e-02
 -5.90911359e-02 -1.26032485e-02 -7.97764063e-02  8.04737508e-02
  6.13589697e-02  5.22897579e-02 -1.55888582e-02 -3.84882689e-02
  9.19724703e-02  8.83059502e-02  4.28763479e-02 -2.82638483e-02
  2.95045339e-02 -1.00853639e-02  3.57961059e-02  1.66627448e-02
 -2.92677805e-03 -2.36801002e-02 -6.03702180e-02  1.06855528e-02]"
"    );

        if map_pda != *map_account.key || !map_account.is_writable || !map_account.data_is_empty() {
            return Err(BlogError::InvalidMapAccount.into())
        }

        let rent = Rent::get()?;
        let rent_lamports = rent.minimum_balance(MapAccount::LEN);

        let create_map_ix = &system_instruction::create_account(
            authority_account.key, 
            map_account.key, 
            rent_lamports, 
            MapAccount::LEN.try_into().unwrap(), 
            program_id
        );

        msg!(""Creating MapAccount account"");
        invoke_signed(
            create_map_ix, 
            &[
                authority_account.clone(),
                map_account.clone(),
                system_program.clone()
            ],
            &[&[
                b""map"".as_ref(),
                &[map_bump]
            ]]
        )?;

        msg!(""Deserializing MapAccount account"");
        let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow()).unwrap();
        let empty_map: BTreeMap<Pubkey, Pubkey> = BTreeMap::new();

        map_state.is_initialized = 1;
        map_state.map = empty_map;

        msg!(""Serializing MapAccount account"");
        map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;

        Ok(())
    }

    fn process_insert_entry(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {
        
        let account_info_iter = &mut accounts.iter();

        let a_account = next_account_info(account_info_iter)?;
        let b_account = next_account_info(account_info_iter)?;
        let map_account = next_account_info(account_info_iter)?;

        if !a_account.is_signer {
            return Err(ProgramError::MissingRequiredSignature)
        }

        if map_account.data.borrow()[0] == 0 || *map_account.owner != *program_id {
","[ 1.71487108e-02  2.41674501e-02 -3.00770849e-02 -1.70257948e-02
 -5.25794886e-02 -4.36967425e-02 -8.71310662e-03  4.29143831e-02
 -4.93390821e-02  4.29115444e-02  1.26124308e-01 -1.02053449e-01
  2.53278669e-02 -3.95968035e-02  2.44550519e-02  8.36453438e-02
 -5.48240542e-02  6.24041120e-03  3.81409563e-02  1.54148275e-02
  8.31766129e-02 -1.05685303e-02 -1.57707615e-03  1.30957887e-02
  2.74998788e-02  5.32246334e-03 -3.24099064e-02  5.47855021e-03
  1.59806362e-03 -3.98034342e-02  3.61601450e-02  3.25681339e-03
 -1.49116628e-02  1.01913391e-02  1.68297872e-01  1.35674819e-01
  9.36916750e-03 -1.02439784e-01  3.06269922e-03 -5.06218709e-02
 -4.43103947e-02  4.56820987e-02 -3.85100134e-02  2.77737696e-02
 -5.38726635e-02  4.42603230e-02  4.93321195e-03  2.68927645e-02
 -3.20504094e-03  2.54971273e-02 -1.03100669e-02  5.68872280e-02
 -7.38951340e-02 -1.57803055e-02  5.46309166e-03  2.85373442e-02
  2.17227004e-02 -5.14293872e-02  4.58177440e-02 -3.21940556e-02
 -1.11098355e-02  3.65784168e-02  7.26864561e-02 -5.00458330e-02
  1.23635167e-02  1.97612271e-02 -4.89211008e-02 -6.56956201e-03
 -1.42888753e-02 -8.91351700e-03  4.02146690e-02 -3.27096805e-02
 -4.77754213e-02 -2.35681119e-03 -3.12821977e-02  2.41668988e-02
 -7.07766190e-02  3.53057310e-02  1.68897808e-02 -7.24180713e-02
 -6.86073676e-02 -1.41525827e-02  1.59441512e-02  5.34555539e-02
 -2.12370083e-02 -3.04145366e-03 -2.01912187e-02 -8.07093084e-02
  8.13601986e-02  6.53134510e-02  4.18345295e-02 -3.88018717e-03
  2.81364620e-02  6.36360869e-02  8.15669596e-02  3.87798151e-04
 -1.23495143e-02 -1.99326798e-02 -3.87507677e-02  5.23920879e-02
 -4.19800878e-02  1.06184767e-03  4.01797285e-03 -6.41094223e-02
 -2.37854291e-02 -5.60674705e-02  6.82275072e-02 -1.41032353e-01
 -1.25295371e-01  3.75334248e-02  2.04202719e-02  2.79824212e-02
 -1.43250683e-03  3.96709852e-02 -7.61961192e-03  4.30797518e-04
 -5.09079732e-02  2.16353070e-02 -7.92325102e-03  9.25092995e-02
  9.19177756e-02 -1.20287044e-02 -2.77802255e-02 -5.53306304e-02
 -8.38120207e-02 -1.19887311e-02  2.07534637e-02  1.60685578e-33
  2.48644296e-02 -4.55151163e-02 -3.87524776e-02  1.18204720e-01
  2.45616771e-02  4.22793766e-03  1.09489560e-02  5.62027059e-02
 -1.63322479e-01  3.91645506e-02  4.27352488e-02  1.33727060e-03
 -4.92869616e-02  2.93201171e-02 -2.52812654e-02  5.97769581e-03
  1.05247751e-01 -1.63146555e-02  3.43838967e-02 -2.60575991e-02
  3.17877494e-02  1.96631663e-02 -3.60623794e-03 -8.97506848e-02
  2.37380341e-02  3.01049389e-02 -1.21201620e-01  3.26548703e-02
  1.29487161e-02  1.44103542e-02  1.38373468e-02 -2.61845738e-02
 -7.87690654e-03 -1.04026671e-03  8.58250707e-02 -3.36646959e-02
 -2.54966808e-03  2.40411852e-02 -1.31501526e-01 -1.46098454e-02
  3.54969837e-02 -4.06866074e-02 -1.51851242e-02 -4.29048277e-02
  1.10486299e-02 -3.49244811e-02  5.75267375e-02  2.65991911e-02
  4.59508784e-02  8.69518891e-02  3.12937722e-02 -8.99441354e-03
 -1.52910575e-01  1.06318099e-02 -5.63015454e-02 -7.41635039e-02
 -5.60781546e-02 -5.69389462e-02  2.03323867e-02 -2.07674187e-02
 -5.53663820e-02  3.99398059e-02  1.60085410e-02  1.48238381e-03
  3.05974297e-02 -2.97852028e-02 -3.10951304e-02  1.33935492e-02
  1.10695967e-02 -6.89684153e-02  1.47917364e-02 -3.78454924e-02
 -6.47751391e-02  7.02070594e-02 -7.44113773e-02 -1.18761837e-01
 -5.04998863e-03 -1.61574632e-02 -1.02746457e-01 -2.65789405e-02
 -2.19538119e-02 -3.18022892e-02 -6.09457158e-02  4.58158553e-02
 -5.19672334e-02  3.07402574e-02  6.53265836e-03  4.16137464e-02
 -1.30760772e-02  5.02642393e-02 -8.61460809e-03 -5.06477393e-02
 -3.41484882e-02 -5.81603944e-02 -3.75007652e-02 -4.00026752e-33
 -4.38100984e-03 -1.04497917e-01  1.62348263e-02 -5.04390225e-02
 -1.45834954e-02 -3.81350592e-02  1.09847330e-01 -1.39685217e-02
 -2.80300714e-02  5.18021137e-02 -1.17714494e-01 -1.97199527e-02
  2.81480402e-02  3.84540707e-02  5.66623807e-02  2.47923229e-02
 -6.61446154e-02 -3.64817195e-02  2.87440270e-02  7.72967562e-02
  2.17776839e-02  1.00603074e-01  3.21899354e-02  1.05816193e-01
 -3.81255103e-03  5.10394238e-02 -4.64299619e-02  4.97766547e-02
  2.05363724e-02  4.17923322e-03  2.95792576e-02 -1.27226096e-02
 -5.67094423e-02  5.25526218e-02 -1.00130374e-02 -9.52909961e-02
  8.21585283e-02  9.16117653e-02 -1.04895763e-01  5.22606969e-02
  5.91670088e-02 -2.28633787e-02 -5.87919056e-02 -7.05810860e-02
  3.55750136e-02  4.89077754e-02  1.27288744e-01 -9.14922042e-04
 -1.33392997e-02  5.24974130e-02  4.74542305e-02 -7.47997314e-02
  1.30874626e-02  3.28442035e-03  1.96874384e-02  2.09613610e-02
  1.08445644e-01  8.64092784e-04  8.63407180e-02 -5.88737279e-02
  3.65773924e-02 -9.43336263e-02  3.24393138e-02  6.10912889e-02
  4.50465977e-02 -5.32758795e-02 -3.43922675e-02 -2.16684137e-02
  1.39506245e-02  2.59236619e-02 -3.91580127e-02  1.73191186e-02
 -1.07124960e-02 -7.34288171e-02  9.87013429e-03  3.92613560e-02
 -4.80272248e-03 -1.04517173e-02  5.68377152e-02 -4.22170386e-02
 -6.85500056e-02  3.31006870e-02  4.90872702e-03  5.78374676e-02
  1.17963133e-02  3.49410635e-04  9.35361311e-02 -5.18851429e-02
 -5.94158024e-02  4.69698124e-02 -5.94219146e-03 -9.59893782e-03
 -6.94886222e-02  1.49996197e-02 -3.11436597e-02 -5.02948652e-08
 -6.35685101e-02 -2.43323259e-02 -1.41757093e-02  4.72632982e-02
  7.78994802e-03 -1.31634668e-01  8.16268921e-02 -7.34434579e-05
 -4.20258660e-03 -1.06599573e-02  2.01212633e-02  6.20431006e-02
 -2.35921815e-02 -2.84735486e-02 -9.89057869e-03 -5.12971617e-02
 -1.23495404e-02 -1.14871105e-02 -1.92098357e-02 -7.66401831e-03
 -5.22317886e-02 -1.52717438e-02 -1.09069590e-02 -4.71804943e-03
  2.70167906e-02  2.16774340e-03  5.01372963e-02  3.84367369e-02
  5.22240587e-02 -2.40303054e-02  8.80615041e-02 -5.10198437e-03
  5.42827733e-02 -2.93767033e-03 -8.31898525e-02 -2.76602078e-02
  7.03804046e-02 -1.34024145e-02  1.28646744e-02  3.50575969e-02
 -6.44875970e-03  1.10986315e-01  2.07800549e-02 -3.46918888e-02
 -3.61571722e-02  8.17046128e-03 -1.65410470e-02  3.54024060e-02
  8.46351534e-02  1.94991529e-02 -8.85522962e-02  9.19765094e-04
 -2.13213842e-02  7.58387893e-02 -3.75563167e-02 -6.07802980e-02
  3.98343578e-02  1.52742974e-02 -7.18264058e-02  2.72540841e-02
  6.70989677e-02  1.67369638e-02 -3.82342339e-02 -1.08291328e-01]"
"           return Err(BlogError::InvalidMapAccount.into())
        }

        msg!(""Deserializing MapAccount account"");
        let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow())?;

        if map_state.map.contains_key(a_account.key) {
            return Err(BlogError::AccountAlreadyHasEntry.into())
        }

        map_state.map.insert(*a_account.key, *b_account.key);
        
        msg!(""Serializing MapAccount account"");
        map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;

        Ok(())
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug)]
pub struct MapAccount {
    pub is_initialized: u8,
    pub map: BTreeMap<Pubkey, Pubkey> // 100
}

impl MapAccount {
    const LEN: usize = 1 + (4 + (10 * 64)); // 10 user -> blog
}

#[derive(Error, Debug, Copy, Clone)]
pub enum BlogError {
    #[error(""Invalid MapAccount account"")]
    InvalidMapAccount,

    #[error(""Invalid Blog account"")]
    InvalidBlogAccount,

    #[error(""Account already has entry in Map"")]
    AccountAlreadyHasEntry,
}

impl From<BlogError> for ProgramError {
    fn from(e: BlogError) -> Self {
        return ProgramError::Custom(e as u32);
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160fn process_init_map(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();

    let authority_account = next_account_info(account_info_iter)?;
    let map_account = next_account_info(account_info_iter)?;
    let system_program = next_account_info(account_info_iter)?;

    if !authority_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature)
    }

    let (map_pda, map_bump) = Pubkey::find_program_address(
        &[b""map"".as_ref()],
        program_id
    );

    if map_pda != *map_account.key || !map_account.is_writable || !map_account.data_is_empty() {
        return Err(BlogError::InvalidMapAccount.into())
    }

    let rent = Rent::get()?;
    let rent_lamports = rent.minimum_balance(MapAccount::LEN);

    let create_map_ix = &system_instruction::create_account(
        authority_account.key, 
        map_account.key, 
        rent_lamports, 
        MapAccount::LEN.try_into().unwrap(), 
        program_id
    );

    msg!(""Creating MapAccount account"");
    invoke_signed(
        create_map_ix, 
        &[
            authority_account.clone(),
            map_account.clone(),
            system_program.clone()
        ],
        &[&[
            b""map"".as_ref(),
            &[map_bump]
","[-1.24069387e-02  2.82626338e-02  2.80685723e-02 -5.34183942e-02
 -4.12268154e-02 -3.95600498e-02  2.37122606e-02  2.27406621e-02
 -6.35724217e-02  8.23702011e-03  7.21920580e-02 -1.08091816e-01
  1.63534656e-02 -3.84279266e-02  5.81605658e-02  4.94702868e-02
 -7.23587722e-02  2.32230332e-02  4.13879054e-03  3.49256620e-02
  6.31336495e-02  3.01817637e-02 -1.00387363e-02  6.74206614e-02
  2.65658386e-02  1.94485374e-02  2.55752425e-03 -2.52755359e-02
 -2.20612455e-02 -2.62121949e-02  3.54421278e-03  5.69352275e-03
 -2.48895381e-02  1.85923446e-02  1.03797987e-01  6.75837994e-02
 -2.74070742e-04 -5.57563677e-02  3.18615548e-02 -4.97903638e-02
 -1.59432460e-02  4.44730334e-02 -5.92593551e-02  3.41643579e-02
  1.34736951e-03  6.84896298e-03  4.00927328e-02  4.11254168e-02
 -3.76938209e-02  6.80700094e-02 -4.39377539e-02  1.04560181e-01
 -3.79814766e-02  1.47327380e-02  3.55435275e-02  4.57360297e-02
 -3.68381739e-02 -5.00680059e-02  3.43577117e-02 -2.39608120e-02
 -6.98207617e-02 -2.05074828e-02  5.08881062e-02 -7.35071748e-02
  2.85812411e-02  3.56598385e-02 -3.28463018e-02  1.00807901e-02
  3.06806322e-02  1.91407744e-02  8.30080956e-02 -8.21654499e-02
 -4.55189571e-02  2.40993034e-02 -9.06237960e-03  4.98480760e-02
 -3.33211049e-02 -5.20473570e-02 -3.53990197e-02 -2.88906135e-02
 -6.90730065e-02 -6.86034560e-02  7.71960570e-03  2.61633154e-02
 -1.09507674e-02 -2.49811020e-02 -2.22573634e-02 -1.00321397e-01
  1.26212016e-02  5.06833941e-02  2.20365915e-02 -3.21943834e-02
  1.35849072e-02  1.70734245e-02  1.33385912e-01 -1.85814165e-02
 -3.37693654e-02  1.00421114e-02  5.60627729e-02  6.58291876e-02
 -3.41752544e-02  2.16702092e-02  4.04409170e-02 -2.23543551e-02
 -3.73251811e-02 -6.76507801e-02  6.24051206e-02 -1.13319218e-01
 -9.16995183e-02  1.17303319e-02  7.78764784e-02  6.05682284e-02
  6.17499575e-02  4.26966138e-02 -3.21198106e-02  8.14677030e-03
 -1.74065754e-02  1.38122933e-02  4.15195385e-03  3.19325402e-02
  8.59834850e-02 -1.48891173e-02  3.81493941e-02 -1.14914626e-02
 -9.89509299e-02 -5.25635667e-02 -1.61441211e-02  3.83156792e-33
  2.34891661e-02 -2.16833018e-02 -6.58431090e-03  5.99268079e-02
  8.18010885e-03 -2.94316141e-03  1.68205251e-03 -3.78873688e-03
 -1.50170520e-01 -2.58071348e-02 -2.74247602e-02  1.84229226e-03
 -2.66002640e-02  4.02369164e-02  2.16247253e-02  2.19992772e-02
  5.92843927e-02  4.74030618e-03  2.60870270e-02  2.83886530e-02
  6.00802451e-02  5.71447983e-03 -2.43302602e-02 -5.46546392e-02
 -1.65768173e-02  3.86208780e-02 -1.03051811e-01  1.24068884e-02
 -7.81383272e-03  2.43048612e-02  5.99975958e-02  8.58636666e-03
  7.53807230e-03  1.95663720e-02  1.05202280e-01 -4.12098132e-02
 -8.06799810e-03 -8.22657719e-03 -1.17791407e-01 -1.27654314e-01
  2.04205699e-02 -1.20931081e-02 -5.38837910e-02  1.30972806e-02
 -2.44059041e-02 -1.10460505e-01  4.32938337e-02  3.39405425e-03
  6.40129149e-02  7.09594637e-02  7.76375309e-02 -2.09212080e-02
 -1.14259288e-01 -1.87289547e-02 -4.01941240e-02 -3.10827978e-02
  5.48458891e-04  3.79244506e-04  5.51354215e-02  7.25575536e-02
 -1.65140796e-02 -2.03851480e-02  5.09677827e-03  2.14933269e-02
  5.08827157e-02 -6.82201516e-03 -2.71263700e-02  2.85576135e-02
 -3.25829946e-02 -8.57162178e-02  2.42999233e-02  3.89102474e-03
 -9.06460360e-02  2.61915009e-02 -5.77997826e-02 -5.10854237e-02
  1.19010210e-02 -1.86565686e-02 -7.26699382e-02 -8.01233202e-02
 -3.48598734e-02 -1.90133078e-03 -7.16612339e-02  4.78647053e-02
 -9.53699797e-02  1.01029471e-01 -1.38682937e-02 -7.18723703e-03
  4.13578898e-02  6.44415990e-02 -1.14197573e-02 -7.74310976e-02
 -6.47310689e-02 -5.89576289e-02 -5.95906936e-02 -4.88779477e-33
  5.55308070e-03 -1.09759480e-01  4.78664674e-02  1.56335335e-03
 -4.81181480e-02 -6.99093267e-02  1.30803436e-01 -2.45156027e-02
 -1.72023848e-02  1.21612260e-02 -6.08268715e-02  5.68932574e-03
  7.77940676e-02  1.39999241e-02  7.75999129e-02 -1.72911063e-02
 -1.08134151e-02 -3.94535549e-02 -3.17420997e-02  2.67036017e-02
  4.90614288e-02  6.32929578e-02  5.53277396e-02  3.92552316e-02
 -3.99145335e-02  9.09091160e-02 -6.43496364e-02  4.80370931e-02
  3.46234366e-02 -3.06141656e-02  1.34164011e-02  6.63109496e-02
  1.99449318e-03  9.86684300e-03  1.37744630e-02 -1.93796176e-02
  1.12253644e-01  6.32525831e-02 -5.67069128e-02  3.18159200e-02
 -4.28389721e-02  1.43461982e-02 -6.48974031e-02 -9.60914120e-02
  4.44688983e-02  1.60398111e-02  1.14367925e-01  7.72804096e-02
  3.34641933e-02  3.70535888e-02  9.90169868e-02 -3.45819518e-02
  6.69915322e-03 -1.23588508e-02 -6.15942525e-03 -1.52576547e-02
  4.00169641e-02 -7.74613842e-02  4.70598266e-02 -9.89103615e-02
 -3.05479690e-02 -1.04231246e-01  2.10703760e-02  8.54513347e-02
  7.43389949e-02 -3.58942039e-02 -3.07531878e-02 -3.21368501e-02
  6.08187877e-02 -2.12184563e-02 -3.75823155e-02  3.27421129e-02
 -1.78395361e-02 -2.03653127e-02  4.88586128e-02  2.55697663e-03
 -6.83122873e-02 -2.73680817e-02  6.30656406e-02 -1.94009170e-02
 -1.37015685e-01  3.50039639e-03  1.45496838e-02  6.96290210e-02
  3.60328853e-02 -4.53297570e-02  9.80465412e-02 -1.68928911e-03
 -6.23143874e-02 -1.60857160e-02 -1.74710043e-02 -3.63023058e-02
 -8.14568922e-02  4.14578468e-02 -9.37687233e-03 -5.07309359e-08
 -8.43371525e-02 -5.70019800e-03 -1.67671628e-02  9.38848257e-02
  3.54008041e-02 -5.04317731e-02  1.01603940e-02 -4.01909165e-02
  4.08593677e-02 -6.96079060e-02 -2.54285801e-02  6.22927547e-02
 -2.48219408e-02 -9.88586023e-02  3.02088819e-02 -7.93431625e-02
 -3.35313380e-02 -6.69480627e-03 -5.08765727e-02 -7.83656817e-03
  1.50856934e-02  1.71751454e-02 -2.71001831e-02  2.92901658e-02
 -4.80286451e-03  4.71389927e-02  5.95182851e-02  5.76198772e-02
  8.04522261e-02 -6.05264790e-02  8.05138573e-02 -3.93245509e-03
  4.95574400e-02  1.69581156e-02 -6.84746280e-02 -3.18700597e-02
  8.10784921e-02  3.01233884e-02 -1.97195653e-02  3.96166444e-02
  1.38790170e-02  2.85022091e-02 -4.90102395e-02  2.30051130e-02
 -6.99218661e-02  2.22014636e-02 -5.89497201e-02  1.06170617e-01
  6.36341050e-02  1.69079434e-02 -4.48328517e-02  2.85828346e-03
  4.50641289e-03  7.46992156e-02 -8.59533250e-02 -5.68604916e-02
  4.59718145e-02 -2.18684468e-02 -2.01852303e-02  3.21330130e-02
  1.19551025e-01 -2.15182975e-02 -2.61382591e-02 -5.98881803e-02]"
"       ]]
    )?;

    msg!(""Deserializing MapAccount account"");
    let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow()).unwrap();
    let empty_map: BTreeMap<Pubkey, Pubkey> = BTreeMap::new();

    map_state.is_initialized = 1;
    map_state.map = empty_map;

    msg!(""Serializing MapAccount account"");
    map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;

    Ok(())
}

fn process_insert_entry(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {
    
    let account_info_iter = &mut accounts.iter();

    let a_account = next_account_info(account_info_iter)?;
    let b_account = next_account_info(account_info_iter)?;
    let map_account = next_account_info(account_info_iter)?;

    if !a_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature)
    }

    if map_account.data.borrow()[0] == 0 || *map_account.owner != *program_id {
        return Err(BlogError::InvalidMapAccount.into())
    }

    msg!(""Deserializing MapAccount account"");
    let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow())?;

    if map_state.map.contains_key(a_account.key) {
        return Err(BlogError::AccountAlreadyHasEntry.into())
    }

    map_state.map.insert(*a_account.key, *b_account.key);
    
    msg!(""Serializing MapAccount account"");
    map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788The client-side code to test the above program would look like something as shown below,TSPress </> button to view full sourceimport {
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";

import * as borsh from ""@project-serum/borsh"";

const MY_PROGRAM_ID = new PublicKey(
  ""FwcG3yKuAkCfX68q9GPykNWDaaPjdZFaR1Tgr8qSxaEa""
);

const MAP_DATA_LAYOUT = borsh.struct([
  borsh.u8(""is_initialized""),
  borsh.map(borsh.publicKey(""user_a""), borsh.publicKey(""user_b""), ""blogs""),
]);

async () => {
  const connection = new Connection(""http://localhost:8899"", ""confirmed"");

  const userA = Keypair.generate();
  const userB = Keypair.generate();
  const userC = Keypair.generate();

  const [mapKey] = await PublicKey.findProgramAddress(
    [Buffer.from(""map"")],
    MY_PROGRAM_ID
  );

  const airdropASig = await connection.requestAirdrop(
    userA.publicKey,
    5 * LAMPORTS_PER_SOL
  );
  const airdropBSig = await connection.requestAirdrop(
    userB.publicKey,
    5 * LAMPORTS_PER_SOL
  );
  const airdropCSig = await connection.requestAirdrop(
    userC.publicKey,
    5 * LAMPORTS_PER_SOL
  );
  const promiseA = connection.confirmTransaction(airdropASig);
  const promiseB = connection.confirmTransaction(airdropBSig);
  const promiseC = connection.confirmTransaction(airdropCSig);

  await Promise.all([promiseA, promiseB, promiseC]);

  const initMapIx = new TransactionInstruction({
    programId: MY_PROGRAM_ID,
    keys: [
      {
        pubkey: userA.publicKey,
        isSigner: true,
        isWritable: true,
      },
      {
        pubkey: mapKey,
        isSigner: false,
        isWritable: true,
      },
      {
        pubkey: SystemProgram.programId,
        isSigner: false,
        isWritable: false,
      },
  ","[ 1.61455162e-02  3.66050526e-02 -1.68524124e-03 -4.88507301e-02
 -8.94458443e-02  5.83894690e-03  2.94745602e-02  4.95390855e-02
 -8.25194791e-02  9.84470127e-04  5.89388870e-02 -1.12903684e-01
  6.70972792e-03 -4.45467941e-02  6.42541051e-02  5.60863800e-02
 -5.23297526e-02 -4.04877821e-03 -2.95843463e-02 -1.19827525e-03
  6.06566072e-02  2.65781470e-02 -1.16817215e-02  2.27979422e-02
 -9.21612419e-03 -1.20366048e-02  1.24658346e-02 -7.15987012e-03
 -1.24642868e-02 -2.15749089e-02  2.85097342e-02 -2.03184728e-02
 -5.02633117e-02  4.94883507e-02  1.01830699e-01  2.54761185e-02
  1.78611614e-02 -7.67925382e-02  1.62767004e-02 -4.80326638e-02
 -2.36491393e-03  3.16450633e-02 -8.47089291e-02  3.23172323e-02
  2.02850103e-02 -1.34888226e-02 -1.97058730e-02  4.30388004e-02
 -3.89806964e-02  4.83703949e-02 -6.87168986e-02  6.21235110e-02
 -2.57831272e-02  4.03619036e-02 -1.44145433e-02  6.07680529e-02
  1.26254428e-02 -9.61174369e-02  1.87909305e-02  3.83125134e-02
 -3.74845900e-02 -1.16953161e-02  2.76246164e-02 -2.85498071e-02
 -1.12392986e-02  4.74845134e-02 -4.96653356e-02  2.44229157e-02
  5.90179674e-02 -2.78993207e-03  6.58691153e-02 -6.37507662e-02
 -6.28224686e-02  1.24568341e-03  7.43487244e-03 -3.63031439e-02
 -7.39045963e-02 -2.56211534e-02 -8.10627937e-02 -2.44027115e-02
 -3.33378688e-02 -1.73598789e-02  1.42637976e-02  3.01020555e-02
 -2.63757855e-02  8.32801288e-06 -5.14972806e-02 -6.16412647e-02
  2.30354187e-03  1.83645356e-02 -2.15181205e-02  6.26868336e-03
 -2.93366350e-02  3.19958292e-02  9.03704464e-02 -1.47329265e-04
 -1.87042467e-02 -1.80168375e-02  4.35084570e-03  4.97608706e-02
 -2.62579191e-02  5.77368774e-03  5.31313941e-03 -9.00429487e-03
 -3.51244435e-02 -7.43858218e-02  7.42867813e-02 -8.63219500e-02
 -9.91720483e-02  9.61631164e-03  3.64845395e-02  9.07078162e-02
  2.02321801e-02  6.80345818e-02 -7.90716633e-02  2.79100612e-02
 -6.20404966e-02  4.68488410e-02  6.29179738e-03  7.68605322e-02
  7.25509375e-02 -3.06203328e-02 -2.90815588e-02  7.20410747e-03
 -1.08057335e-01 -7.57592469e-02 -2.82693305e-03  3.84810308e-33
  1.33096687e-02 -6.69976249e-02 -1.09667154e-02  7.07944185e-02
  1.06415180e-02 -3.38019477e-03 -2.20302381e-02 -5.15643833e-03
 -1.14808224e-01 -6.97380770e-03 -1.68896690e-02 -5.85712604e-02
 -4.60570715e-02  3.60910520e-02 -2.05875859e-02 -4.68246117e-02
  6.11410215e-02  4.14789990e-02  2.48740856e-02  2.51513254e-02
  8.08979571e-02  7.51115382e-02 -3.00154611e-02 -9.01821777e-02
  3.60562690e-02  8.64174813e-02 -1.16688415e-01  1.62537191e-02
  7.08010048e-03  3.01569421e-02  7.79151618e-02  1.79636404e-02
  9.70631838e-03 -1.34546298e-03  1.08161375e-01 -2.40800679e-02
 -2.11802814e-02  1.78236968e-03 -9.74505246e-02 -7.73620456e-02
  6.62081167e-02 -1.37523012e-02 -3.68333869e-02 -9.38464422e-03
 -4.90430929e-02 -9.76378098e-02  2.80230343e-02 -9.28935129e-03
  2.63737161e-02  3.86056490e-02  8.61346796e-02  1.29654333e-02
 -1.40274838e-01 -1.62410922e-02 -3.75493355e-02 -6.04336299e-02
 -1.94724500e-02 -4.24745902e-02 -6.59192726e-03  3.28080505e-02
 -5.18572666e-02  2.06123036e-03 -1.26409885e-02  2.05800273e-02
  3.67774963e-02 -1.79488752e-02  2.14155414e-04 -5.77148283e-03
 -2.07823096e-03 -9.41561162e-02 -3.45541425e-02  3.40877585e-02
 -6.46492243e-02  2.93927807e-02 -4.85233776e-02 -2.27574576e-02
  8.11375957e-03 -1.23042390e-02 -9.57277864e-02 -4.35497724e-02
  1.32990545e-02 -1.95082184e-02 -1.12671979e-01  3.80947515e-02
 -3.54229324e-02  7.72530809e-02 -1.73085686e-02 -1.10276300e-03
  3.57024148e-02  5.97770587e-02  1.44012328e-02 -5.14276437e-02
 -6.11860752e-02 -4.47267555e-02 -1.34308012e-02 -6.78676880e-33
  1.47699919e-02 -1.19180568e-01  1.66195221e-02 -1.64556634e-02
 -2.35075485e-02 -5.74546643e-02  1.61305547e-01  1.96556351e-03
 -3.71711031e-02  6.53663576e-02 -7.40791783e-02  1.72588241e-03
  3.69027704e-02  1.69336218e-02  6.09068274e-02 -1.48586207e-03
  1.99861042e-02  1.73317303e-03 -1.02031473e-02  1.52605185e-02
  2.83610933e-02  7.56136850e-02  7.44750574e-02  1.43871941e-02
 -8.59199930e-03  5.53577282e-02 -2.20619161e-02  8.85389969e-02
  3.33817373e-03 -5.45132682e-02  3.39910239e-02  1.34851327e-02
  2.36361530e-02  1.50784524e-02  2.37849019e-02 -5.26557080e-02
  8.22026655e-02  7.11041093e-02 -3.69883478e-02  5.89075759e-02
  2.54399832e-02  2.04792805e-03 -6.36195391e-02 -5.43477423e-02
  2.04588454e-02  1.37463743e-02  7.27710649e-02  3.75275984e-02
  1.17372079e-02  5.71288392e-02  4.54702638e-02 -1.42338006e-02
 -5.70284063e-03 -2.88095940e-02  2.72549000e-02 -2.24849656e-02
  9.52375084e-02 -1.00208916e-01  7.31999874e-02 -1.03000276e-01
 -1.83445346e-02 -1.00644059e-01  2.89752260e-02  5.81049137e-02
  1.18316628e-01 -6.03048317e-02 -3.78283225e-02 -6.00285530e-02
  4.25033867e-02 -1.68234613e-02 -2.10087113e-02  3.01988907e-02
 -1.95374712e-04 -4.09340784e-02  4.06018496e-02 -3.07914633e-02
 -5.40878586e-02 -4.13410403e-02  5.32809963e-06  3.74940154e-03
 -9.87661779e-02  2.00949796e-02  3.56511236e-03  7.85745829e-02
  4.54274341e-02 -2.22091097e-02  1.10580444e-01 -1.59466192e-02
 -5.48296943e-02 -2.10571121e-02 -1.43840825e-02 -9.57736932e-03
 -6.63515255e-02  2.65772007e-02 -5.99367842e-02 -5.71744359e-08
 -7.96415135e-02 -1.94312260e-02 -1.24256564e-02  1.29624367e-01
  2.46686656e-02 -5.22476807e-02 -7.06944335e-03 -1.98799185e-02
  6.54800655e-03 -1.05904505e-01 -5.10287061e-02  9.06853154e-02
 -2.96410620e-02 -5.90605661e-02  2.74325423e-02 -8.96903574e-02
  1.67161729e-02 -8.40216354e-02 -1.27712917e-02  1.85045227e-02
 -2.07880028e-02  2.18170024e-02 -2.60731373e-02  5.47219999e-02
 -3.92496921e-02  8.10818523e-02  8.19621235e-02  7.18701631e-02
  1.06756188e-01 -3.68471704e-02  7.84397349e-02  7.26234401e-03
  4.18693982e-02  7.67094940e-02 -1.28593251e-01 -2.20093671e-02
  4.64488342e-02  3.69273387e-02 -1.28804659e-02 -1.35666393e-02
  7.79578164e-02  4.76836376e-02 -2.64943615e-02  2.67065577e-02
 -3.52200717e-02  7.79782236e-03 -1.28657278e-02  4.45226990e-02
  1.16914734e-01  2.57596727e-02 -1.04275092e-01 -2.84045581e-02
  2.09222063e-02  8.65100548e-02 -5.11448979e-02 -6.19341321e-02
  3.24557461e-02 -3.75443883e-02 -1.04091885e-02  7.79504776e-02
  6.12717532e-02 -3.09109502e-02 -5.06164879e-02 -3.09198238e-02]"
" ],
    data: Buffer.from(Uint8Array.of(0)),
  });

  const insertABIx = new TransactionInstruction({
    programId: MY_PROGRAM_ID,
    keys: [
      {
        pubkey: userA.publicKey,
        isSigner: true,
        isWritable: true,
      },
      {
        pubkey: userB.publicKey,
        isSigner: false,
        isWritable: false,
      },
      {
        pubkey: mapKey,
        isSigner: false,
        isWritable: true,
      },
    ],
    data: Buffer.from(Uint8Array.of(1)),
  });

  const insertBCIx = new TransactionInstruction({
    programId: MY_PROGRAM_ID,
    keys: [
      {
        pubkey: userB.publicKey,
        isSigner: true,
        isWritable: true,
      },
      {
        pubkey: userC.publicKey,
        isSigner: false,
        isWritable: false,
      },
      {
        pubkey: mapKey,
        isSigner: false,
        isWritable: true,
      },
    ],
    data: Buffer.from(Uint8Array.of(1)),
  });

  const insertCAIx = new TransactionInstruction({
    programId: MY_PROGRAM_ID,
    keys: [
      {
        pubkey: userC.publicKey,
        isSigner: true,
        isWritable: true,
      },
      {
        pubkey: userA.publicKey,
        isSigner: false,
        isWritable: false,
      },
      {
        pubkey: mapKey,
        isSigner: false,
        isWritable: true,
      },
    ],
    data: Buffer.from(Uint8Array.of(1)),
  });

  const tx = new Transaction();
  tx.add(initMapIx);
  tx.add(insertABIx);
  tx.add(insertBCIx);
  tx.add(insertCAIx);

  const sig = await connection.sendTransaction(tx, [userA, userB, userC], {
    skipPreflight: false,
    preflightCommitment: ""confirmed"",
  });
  await connection.confirmTransaction(sig);

  const mapAccount = await connection.getAccountInfo(mapKey);
  const mapData = MAP_DATA_LAYOUT.decode(mapAccount.data);
  console.log(""MapData: "", mapData);
};
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155const insertABIx = new TransactionInstruction({
  programId: MY_PROGRAM_ID,
  keys: [
    {
   ","[ 3.42676677e-02  4.42275740e-02 -7.54767135e-02  2.50868429e-03
 -1.48901135e-01 -1.72797013e-02  9.81002674e-02  2.70109754e-02
  1.82854943e-03 -6.24084799e-03 -9.01893526e-03  5.19188074e-03
 -1.27419103e-02 -3.39237414e-02  1.30541073e-02 -3.67431268e-02
 -2.20828578e-02 -1.62307248e-02 -3.03533860e-02  1.14462767e-02
  4.90598753e-03 -3.97825204e-02  2.95091304e-03 -1.98802501e-02
  4.53505479e-03  1.77948456e-02  2.17151903e-02 -3.38770077e-02
 -8.22269265e-03  2.16201623e-03  3.16541865e-02 -2.29049716e-02
 -6.22558258e-02  2.81473827e-02 -8.62162467e-03  5.27129434e-02
  1.39865242e-02 -4.99134697e-02  2.12691873e-02 -5.16401641e-02
  2.79434118e-02  8.01515803e-02 -1.07069910e-01  7.76149035e-02
  4.58263867e-02 -3.20594124e-02 -7.81004801e-02 -7.13739404e-03
  9.67128947e-03  4.23795767e-02 -9.91846323e-02  6.86136112e-02
 -1.98244806e-02  1.03367776e-01  3.01162321e-02  4.24774624e-02
  2.82417447e-03 -3.18309069e-02  4.49919812e-02  3.28395180e-02
  4.82144952e-02  1.19041663e-03  9.41279009e-02 -1.24872997e-02
  3.96229327e-03  4.03628796e-02  5.43970354e-02  4.40537930e-02
  3.43049690e-02  1.60800368e-02  1.57363638e-02  1.53003996e-02
 -1.20657086e-01  1.00220996e-03 -4.26378027e-02 -7.81578347e-02
 -2.78378651e-02  4.05003577e-02 -1.04274511e-01  2.30112957e-04
 -2.75639780e-02 -7.52190873e-02  6.19457327e-02 -1.88758858e-02
 -8.98993667e-03  6.84118941e-02 -2.44165827e-02 -8.12139139e-02
 -5.28445914e-02  2.46690270e-02 -1.54183414e-02  6.80338815e-02
  1.50381373e-02 -4.05864753e-02  1.30752489e-01 -6.32453710e-03
  3.35005820e-02 -2.60764509e-02  2.66733449e-02  2.35996321e-02
 -1.75453059e-03 -5.72187593e-04 -5.30881137e-02  3.28419171e-02
  3.27036381e-02 -1.59066487e-02  5.46207465e-02 -7.36908168e-02
 -1.81662425e-01  4.02087793e-02  2.17789765e-02  1.31770626e-01
  4.86218929e-02  4.26598862e-02 -5.93678281e-02  5.49644083e-02
 -9.50071737e-02  4.22051623e-02  1.43077224e-02  3.30440775e-02
  3.54338102e-02 -8.48735962e-03 -2.13375241e-02  7.04742819e-02
 -8.78254846e-02 -6.53527305e-02 -4.36860044e-03  3.02451390e-33
 -8.64633825e-03 -6.89914525e-02 -4.79027592e-02  1.63930859e-02
 -1.04204174e-02  9.97885689e-03  7.79037457e-03 -1.84357949e-02
 -6.60948977e-02 -4.16110083e-02 -5.50221503e-02 -3.55865695e-02
 -2.74560191e-02  1.90136898e-02  1.49456309e-02  1.23143988e-02
 -3.95485908e-02  5.51937856e-02  5.73899932e-02  2.67425994e-03
  2.74760723e-02  2.10346710e-02 -2.79361587e-02 -3.93384658e-02
 -1.54318903e-02 -1.21793812e-02 -1.11717083e-01 -2.33991574e-02
 -3.49169075e-02 -5.25663933e-03  2.25985236e-02  3.66626009e-02
 -4.59915958e-03  4.18548249e-02  7.78512955e-02 -2.10337285e-02
  5.48233453e-04 -2.70711649e-02 -4.72353660e-02 -6.57764375e-02
  4.02946770e-02 -1.31736288e-03 -1.36923287e-02  9.01367050e-03
 -8.10552239e-02 -3.22238766e-02 -3.19147445e-02 -1.72517579e-02
  3.62504795e-02 -3.29530127e-02 -2.45624762e-02  6.81451410e-02
 -4.35839109e-02 -5.84762879e-02 -8.60121995e-02 -6.54433519e-02
  2.00450197e-02 -5.78479748e-03  9.32489708e-03  8.63341093e-02
 -8.91131014e-02  5.29427901e-02 -1.57882292e-02  3.22321691e-02
 -2.70508789e-02  1.95467342e-02 -3.38605084e-02 -1.04019698e-02
  2.80742571e-02 -6.79680556e-02 -4.22072709e-02  1.52936764e-02
 -3.35232578e-02  2.84935925e-02 -3.48811224e-02 -4.37645540e-02
 -6.39295578e-02 -9.74632148e-03 -3.18871401e-02 -1.18255943e-01
  2.74045989e-02 -4.27697115e-02 -5.74791729e-02  4.00041379e-02
 -2.87138075e-02  5.01162373e-02 -5.11972159e-02 -2.94197653e-03
  2.43705604e-02  4.67075706e-02 -3.79817514e-03 -1.59151927e-02
  5.05405851e-02 -5.88943288e-02  3.32690179e-02 -6.61599812e-33
  5.44555448e-02 -3.13212089e-02  1.01502724e-02  1.73321888e-02
 -4.21245061e-02  2.71553732e-02  6.02652393e-02 -6.06389064e-03
 -2.58348733e-02 -1.35138538e-02 -1.87969506e-02  4.11468670e-02
  6.57633245e-02  6.29149470e-03 -3.38941738e-02 -4.29626107e-02
 -3.52972448e-02 -2.28004996e-02  1.37581239e-02 -1.12472311e-01
  4.91436012e-02 -1.20878601e-02  5.49878180e-02  1.01716220e-01
 -4.66708988e-02 -7.83563498e-03 -3.96005623e-02  6.05420023e-02
 -2.79326662e-02 -6.97690398e-02  2.10525524e-02  4.33569448e-03
 -2.26736665e-02  6.93515455e-03  5.24909273e-02 -7.65932724e-02
  6.55099750e-02  9.24601257e-02 -3.48639786e-02  4.37551364e-02
  5.47551587e-02 -1.36660002e-02 -7.11229444e-02  1.94295086e-02
  3.58148515e-02  1.79510377e-02 -4.67917463e-03  3.88984345e-02
  3.12115867e-02  4.55274172e-02  3.20572220e-02 -1.22178327e-02
  1.64084956e-02 -3.61284390e-02  3.14428285e-02  1.97357722e-02
  1.39378682e-01 -1.23981886e-01  9.68411192e-02  4.47626552e-03
 -4.17997967e-03 -5.92375547e-02  1.22207351e-01  1.85657907e-02
  8.33687484e-02 -9.71718058e-02 -3.34413275e-02 -2.68046111e-02
 -1.20668244e-02  1.22002382e-02  1.92761701e-02  9.86791123e-03
  2.71815853e-03 -2.79571256e-03  1.01890780e-01 -2.44655497e-02
 -1.93479806e-02 -8.41469765e-02  3.71878892e-02  2.97377426e-02
 -2.95687653e-02  4.76304963e-02  5.39510064e-02  6.29513785e-02
 -1.36109451e-02 -2.45957635e-02  4.88988161e-02  6.18845690e-03
 -4.37593572e-02 -1.02313161e-02 -4.46964279e-02  2.37650541e-03
 -1.18092105e-01 -1.38269171e-01 -8.13828595e-03 -5.21389296e-08
 -6.14587888e-02 -3.84955667e-02 -7.22640455e-02  1.24235086e-01
  2.92176418e-02 -9.10776854e-02 -2.07332652e-02 -3.70653942e-02
  2.91249808e-02 -1.55029550e-01 -5.11594787e-02  6.41455054e-02
 -1.66638140e-02 -6.57230318e-02  1.86318215e-02 -7.87387490e-02
 -2.59604282e-03 -1.21009715e-01 -1.43905096e-02 -6.37833914e-03
  2.58596428e-02 -2.05648560e-02  5.02314009e-02  2.90354528e-02
  7.31474310e-02 -4.69543302e-04  9.24597457e-02  9.35998708e-02
  8.66741985e-02  1.76390149e-02 -2.12210882e-03 -5.54326773e-02
  1.09862328e-01  4.86930497e-02 -3.82362530e-02 -1.48567429e-03
  9.46802720e-02  5.41264527e-02  4.82619973e-03 -2.35737618e-02
  6.14867173e-03 -3.10450979e-02 -2.80649327e-02  2.38560922e-02
  8.21887399e-04  2.10186243e-02 -4.28037122e-02  9.29639563e-02
  6.91766143e-02  3.20988037e-02 -2.94619668e-02 -3.24680097e-02
  5.33073694e-02  3.06455567e-02 -4.64486815e-02 -3.96964066e-02
 -5.15565053e-02 -1.26903700e-02  8.93483683e-02  3.49242752e-03
  9.50641260e-02  3.71501246e-03 -3.23236571e-03 -4.68936712e-02]"
"  pubkey: userA.publicKey,
      isSigner: true,
      isWritable: true,
    },
    {
      pubkey: userB.publicKey,
      isSigner: false,
      isWritable: false,
    },
    {
      pubkey: mapKey,
      isSigner: false,
      isWritable: true,
    },
  ],
  data: Buffer.from(Uint8Array.of(1)),
});

const insertBCIx = new TransactionInstruction({
  programId: MY_PROGRAM_ID,
  keys: [
    {
      pubkey: userB.publicKey,
      isSigner: true,
      isWritable: true,
    },
    {
      pubkey: userC.publicKey,
      isSigner: false,
      isWritable: false,
    },
    {
      pubkey: mapKey,
      isSigner: false,
      isWritable: true,
    },
  ],
  data: Buffer.from(Uint8Array.of(1)),
});

const insertCAIx = new TransactionInstruction({
  programId: MY_PROGRAM_ID,
  keys: [
    {
      pubkey: userC.publicKey,
      isSigner: true,
      isWritable: true,
    },
    {
      pubkey: userA.publicKey,
      isSigner: false,
      isWritable: false,
    },
    {
      pubkey: mapKey,
      isSigner: false,
      isWritable: true,
    },
  ],
  data: Buffer.from(Uint8Array.of(1)),
});

const tx = new Transaction();
tx.add(initMapIx);
tx.add(insertABIx);
tx.add(insertBCIx);
tx.add(insertCAIx);
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071 # Retrying TransactionsOn some occasions, a seemingly valid transaction may be dropped before it is included in a block. This most often occurs during periods of network congestion, when an RPC node fails to rebroadcast the transaction to the leaderopen in new window. To an end-user, it may appear as if their transaction disappears entirely. While RPC nodes are equipped with a generic rebroadcasting algorithm, application developers are also capable of developing their own custom rebroadcasting logic.# FactsFact SheetRPC nodes will attempt to rebroadcast transactions using a generic algorithmApplication developers can implement their own custom rebroadcasting logicDevelopers should take advantage of the maxRetries parameter on the sendTransaction JSON-RPC methodDevelopers should enable preflight checks to raise errors before transactions are submittedBefore re-signing any transaction, it is very important to ensure that the initial transaction’s blockhash has expired# The Journey of a Transaction# How Clients Submit TransactionsIn Solana, there is no concept of a mempool. All transactions, whether they are initiated programmatically or by an end-user, are efficiently routed to leaders so that they can be processed into a block. There are two main ways in which a transaction can be sent to leaders:By proxy via an RPC server and the sendTransactionopen in new window JSON-RPC methodDirectly to leaders via a TPU Clientopen in new windowThe vast majority of end-users will","[ 1.03553468e-02  6.41438589e-02 -9.47116911e-02 -1.79230201e-03
 -1.17148839e-01 -2.44179852e-02  1.01050407e-01  1.80394631e-02
 -9.67312977e-03  2.58240178e-02  9.29727219e-03 -9.24775377e-03
  6.17021089e-03 -3.95686552e-02  3.65499556e-02 -7.28169782e-03
 -4.66442406e-02 -1.84441898e-02 -1.96391214e-02  1.56626310e-02
  5.27145620e-03 -3.76524813e-02  7.18873832e-03 -3.35069024e-03
 -7.33072171e-03 -1.99593678e-02  1.12382453e-02 -2.95237731e-02
 -2.14758646e-02 -6.06649183e-03  4.41030562e-02 -1.49981389e-02
 -4.96365242e-02  4.53577079e-02  1.58728845e-02  8.95558074e-02
  2.73672696e-02 -7.08865225e-02  9.35284328e-03 -5.59695996e-02
  2.61414656e-03  7.77674019e-02 -1.16253972e-01  6.64008260e-02
  2.99617928e-02 -2.80910451e-02 -8.09679106e-02 -2.17096247e-02
 -3.80936079e-03  5.70949763e-02 -9.67768207e-02  6.91876635e-02
 -3.73207182e-02  8.67401063e-02  3.82066332e-02  5.92585541e-02
  1.49143231e-03 -2.26750001e-02  4.10133488e-02  8.43950640e-03
  3.70450094e-02 -7.66179152e-03  6.33689612e-02 -2.70206854e-02
  1.32405227e-02  4.97831851e-02  4.24039811e-02 -2.03208858e-03
  4.63479273e-02  1.27589954e-02  2.86272056e-02 -1.15216326e-03
 -1.23788729e-01 -6.55685924e-03 -5.62681556e-02 -7.53287226e-02
 -3.52547541e-02  3.77529636e-02 -8.38332474e-02 -6.19199709e-04
 -4.17883247e-02 -6.87550232e-02  4.24355268e-02 -2.95402650e-02
 -1.98085234e-02  6.18994683e-02 -2.91282497e-02 -1.14034325e-01
 -3.61837745e-02  6.27445728e-02 -7.97142368e-03  3.71549316e-02
  5.43830469e-02 -3.21417190e-02  1.37530789e-01  1.20902536e-02
  4.72928360e-02 -1.75345670e-02  2.40769307e-03  2.85540130e-02
 -1.53681217e-02  5.94358135e-04 -2.87750922e-02  1.13612204e-03
  5.84746599e-02 -3.04748770e-03  5.29649146e-02 -9.30028260e-02
 -1.65169224e-01  1.11494493e-02  3.35648982e-03  1.23788133e-01
  2.52407193e-02  3.39632668e-02 -5.55747747e-02  6.50650635e-02
 -8.97823945e-02  3.61730494e-02  1.52924436e-03  3.89246680e-02
  4.41351272e-02 -1.00215767e-02 -9.42913815e-03  5.24597205e-02
 -1.24623895e-01 -6.90748319e-02 -7.30802864e-03  3.76135637e-33
  7.73195177e-03 -5.14349826e-02 -7.28797019e-02  2.65203603e-02
  1.22521156e-02  2.38133632e-02  2.64217835e-02 -9.21134604e-04
 -8.35508481e-02 -4.81743366e-02 -4.47583199e-02 -1.04932413e-02
 -2.08800379e-02  2.50334144e-02  3.26039195e-02  1.47345671e-02
 -2.77101565e-02  6.45454600e-02  4.88051847e-02 -1.58936139e-02
  3.82471979e-02  2.07341742e-02 -2.55661439e-02 -1.92651972e-02
  1.24155162e-02 -1.78506337e-02 -9.82084945e-02  2.75341142e-03
 -2.49961372e-02  1.73799857e-03  1.75906904e-02  4.06810492e-02
  5.58270793e-03  5.23859076e-02  7.30598792e-02 -1.11169415e-02
  1.13859614e-02 -2.21067704e-02 -6.08151369e-02 -8.76244605e-02
  5.99282831e-02 -1.02732191e-02 -2.08337866e-02  7.57403811e-03
 -8.83685499e-02 -5.49319312e-02 -2.89779548e-02 -7.90217146e-03
  3.49597000e-02 -5.51975053e-03 -3.57627571e-02  7.60078728e-02
 -5.36218584e-02 -6.60547763e-02 -6.36490732e-02 -9.45118591e-02
  1.20995045e-02  3.50833451e-03  1.11948885e-02  5.27521186e-02
 -6.47696629e-02  4.42003682e-02  6.42908690e-03  2.05920227e-02
 -3.58178839e-02 -1.26579124e-03 -5.52042723e-02 -1.68919992e-02
  3.43336128e-02 -5.14945835e-02 -4.16977108e-02  2.07006168e-02
 -3.71264741e-02  2.54283138e-02 -5.39415814e-02 -6.47813082e-02
 -4.99805622e-02 -6.73277257e-03 -4.41606082e-02 -1.02066949e-01
  2.58663483e-02 -1.80332437e-02 -7.46226460e-02  6.34097755e-02
 -6.45837486e-02  6.09724522e-02 -5.16462512e-02 -4.22853191e-05
  2.04728842e-02  4.77025919e-02 -6.95381139e-04 -1.26946541e-02
  4.75443676e-02 -5.40167838e-02  2.84553110e-03 -7.50755769e-33
  4.04963829e-02 -3.85338962e-02 -1.84590779e-02 -9.92340065e-05
 -4.87707593e-02  1.44890733e-02  4.33528833e-02 -1.72465313e-02
 -3.21815275e-02 -1.49393100e-02 -1.18056079e-02  1.80630814e-02
  7.93968886e-02 -4.90094163e-03 -2.81606545e-03 -3.83950435e-02
 -4.62911986e-02 -3.86728272e-02  4.45731031e-03 -9.22380686e-02
  2.30820645e-02 -2.49192264e-04  4.27890345e-02  1.11142479e-01
 -3.66225801e-02 -1.15698501e-02 -6.53792396e-02  3.26303057e-02
 -1.29789412e-02 -4.94875610e-02  3.46889794e-02  1.40719349e-02
 -5.19902930e-02 -7.57845212e-03  3.54741365e-02 -8.78155977e-02
  5.06594889e-02  1.18133418e-01 -1.74097959e-02  6.22001253e-02
  8.15962330e-02  2.43750037e-04 -5.37153743e-02  2.02881061e-02
  4.94820364e-02  1.32002053e-03  1.97143313e-02  1.49078192e-02
  3.86850648e-02  3.71636152e-02  5.20255864e-02 -2.58573219e-02
  3.68324593e-02 -5.20021282e-02 -6.52918406e-03  1.30787278e-02
  1.25885382e-01 -1.27480254e-01  8.30697939e-02  7.53095187e-03
  7.09232362e-03 -6.55735210e-02  1.07308619e-01  6.14273213e-02
  5.50277382e-02 -1.14884190e-01 -4.66973260e-02 -1.48626482e-02
  1.29796509e-02 -1.25025783e-03  2.76648495e-02 -9.14862566e-03
  3.36733460e-03 -1.17648756e-02  1.14470072e-01 -3.84139083e-02
 -2.10956745e-02 -6.64012879e-02  4.64509875e-02  1.51112704e-02
 -8.89237877e-03  5.98209538e-02  5.11683226e-02  4.75408547e-02
 -2.93625537e-02 -6.22771084e-02  5.09615578e-02  2.09991131e-02
 -6.99937120e-02  2.74742655e-02 -3.58699411e-02 -5.41254738e-03
 -1.26954868e-01 -1.07871599e-01  3.78719973e-03 -4.89183414e-08
 -8.38783309e-02 -5.20435069e-03 -6.27008528e-02  1.33817658e-01
  3.41729783e-02 -8.11666623e-02  2.95256032e-03 -3.14498059e-02
  2.82532182e-02 -1.45892501e-01 -6.66120797e-02  6.14689216e-02
 -2.90192999e-02 -5.93859740e-02  2.73937155e-02 -6.74074888e-02
 -3.33900675e-02 -6.65392578e-02 -2.58667059e-02  1.94275770e-02
  1.67376120e-02 -2.10233461e-02  4.10937257e-02  3.48427966e-02
  5.24626672e-02  1.52999945e-02  1.11058600e-01  1.09562404e-01
  7.66310468e-02  4.26392034e-02 -1.75911933e-02 -3.41347009e-02
  1.09632038e-01  2.73482259e-02 -3.45980190e-02  2.09379457e-02
  8.00721198e-02  4.58114035e-02 -2.20657121e-02 -1.79700330e-02
 -3.28325829e-03 -3.13594937e-02 -5.27981706e-02  3.99267673e-02
 -2.98732091e-02  1.05335284e-02 -8.20757076e-03  9.97485965e-02
  5.38389087e-02  4.51069809e-02 -3.16906869e-02 -3.36632766e-02
  4.65638675e-02  4.37654480e-02 -6.79955408e-02 -1.93022434e-02
 -2.22134106e-02 -6.11194316e-03  8.22731256e-02 -2.86357384e-02
  1.07218169e-01  6.89020427e-03 -7.91343953e-03 -2.87909992e-02]"
"submit transactions via an RPC server. When a client submits a transaction, the receiving RPC node will in turn attempt to broadcast the transaction to both the current and next leaders. Until the transaction is processed by a leader, there is no record of the transaction outside of what the client and the relaying RPC nodes are aware of. In the case of a TPU client, rebroadcast and leader forwarding is handled entirely by the client software.# How RPC Nodes Broadcast TransactionsAfter an RPC node receives a transaction via sendTransaction, it will convert the transaction into a UDPopen in new window packet before forwarding it to the relevant leaders. UDP allows validators to quickly communicate with one another, but does not provide any guarantees regarding transaction delivery.Because Solana’s leader schedule is known in advance of every epochopen in new window (~2 days), an RPC node will broadcast its transaction directly to the current and next leaders. This is in contrast to other gossip protocols such as Ethereum that propagate transactions randomly and broadly across the entire network. By default, RPC nodes will try to forward transactions to leaders every two seconds until either the transaction is finalized or the transaction’s blockhash expires (150 blocks or ~1 minute 19 seconds as of the time of this writing). If the outstanding rebroadcast queue size is greater than 10,000 transactionsopen in new window, newly submitted transactions are dropped. There are command-line argumentsopen in new window that RPC operators can adjust to change the default behavior of this retry logic.When an RPC node broadcasts a transaction, it will attempt to forward the transaction to a leader’s Transaction Processing Unit (TPU)open in new window. The TPU processes transactions in five distinct phases:Fetch Stageopen in new windowSigVerify Stageopen in new windowBanking Stageopen in new windowProof of History Serviceopen in new windowBroadcast Stageopen in new windowImage Courtesy of Jito LabsOf these five phases, the Fetch Stage is responsible for receiving transactions. Within the Fetch Stage, validators will categorize incoming transactions according to three ports:tpuopen in new window handles regular transactions such as token transfers, NFT mints, and program instructionstpu_voteopen in new window focuses exclusively on voting transactionstpu_forwardsopen in new window forwards unprocessed packets to the next leader if the current leader is unable to process all transactionsFor more information on the TPU, please refer to this excellent writeup by Jito Labsopen in new window.# How Transactions Get DroppedThroughout a transaction’s journey, there are a few scenarios in which the transaction can be unintentionally dropped from the network.# Before a transaction is processedIf the network drops a transaction, it will most likely do so before the transaction is processed by a leader. UDP packet lossopen in new window is the simplest reason why this might occur. During times of intense network load, it’s also possible for validators to become overwhelmed by the sheer number of transactions required for processing. While validators are equipped to forward surplus transactions via tpu_forwards, there is a limit to the amount of data that can be forwardedopen in new window. Furthermore, each forward is limited","[-4.34206463e-02 -5.28923683e-02 -7.20126787e-03  1.64491741e-03
  1.21258991e-02 -3.66700999e-02 -8.81115627e-03 -1.60422288e-02
  8.78961906e-02  7.58460537e-02  1.11087440e-02  4.75528240e-02
  1.33661670e-03  3.79240252e-02 -3.31239775e-02 -1.22017808e-01
  7.20221326e-02 -1.54413264e-02 -1.83586273e-02 -5.13039120e-02
 -7.47128353e-02 -5.50342314e-02 -5.04743345e-02  9.39950254e-03
 -2.92396881e-02 -4.41779122e-02  5.77104045e-03 -4.17339765e-02
 -5.23782894e-03 -9.47064627e-03 -2.12197062e-02 -5.52211367e-02
 -2.17885263e-02  4.38752323e-02 -1.00595437e-01  7.70303756e-02
  1.81860626e-02  3.87110263e-02 -5.91955334e-02 -2.83614062e-02
  8.79195407e-02 -6.40059039e-02 -4.59703952e-02  5.15581034e-02
  4.99593616e-02 -5.93268424e-02 -2.71586776e-02  3.60895805e-02
 -8.42740312e-02 -2.35292260e-02 -4.75437492e-02 -1.47650475e-02
 -9.62722860e-03  1.75030872e-01  5.83233275e-02  8.42058659e-02
  2.28217281e-02 -8.42048693e-03  3.10197473e-02  3.28824334e-02
 -8.64404067e-03 -2.64849421e-02 -1.29923550e-02 -3.56053002e-02
  6.53392868e-03 -2.93272268e-02  2.74906214e-02  4.67523634e-02
  2.48316396e-02 -5.39828883e-03  4.77043018e-02 -5.10062848e-04
 -2.35025305e-02  2.66136453e-02 -2.77008917e-02 -5.16001657e-02
  2.56753955e-02  2.41133329e-02 -3.81097943e-02  1.52361877e-02
  7.72040263e-02 -1.51879936e-02 -3.27862166e-02  2.18909942e-02
  5.57053369e-03 -4.98563312e-02 -2.56603062e-02  4.49008774e-03
 -1.44378310e-02  2.62326989e-02 -2.23441496e-02  8.27274993e-02
 -7.33128041e-02  4.97092260e-03 -7.92750046e-02  2.81528458e-02
 -3.03112399e-02  4.54262942e-02  5.05006127e-03  3.44054811e-02
  5.21772690e-02  7.73847289e-03 -1.32254243e-01 -6.20204769e-02
 -2.26369444e-02 -6.93266541e-02 -4.65890393e-03 -1.00353770e-02
  1.20435713e-03  7.12848082e-02 -5.52748218e-02  3.40293273e-02
 -3.17137409e-03  5.77277457e-03 -2.08356921e-02  3.74383740e-02
 -2.96938512e-02  9.44678262e-02 -4.66415398e-02 -5.88556901e-02
 -3.17477679e-04  1.75985079e-02  1.05505578e-01 -7.01906756e-02
  5.40654287e-02 -3.04475483e-02  2.28462648e-02  6.41111901e-33
  1.94290392e-02 -3.99233885e-02 -9.67714414e-02 -2.52704825e-02
  6.35067653e-03  2.38242354e-02  1.11972336e-02 -4.69990773e-03
 -1.54735185e-02 -5.58318570e-02 -5.58185056e-02  7.78491283e-03
  4.28581908e-02 -2.26008501e-02 -5.38266525e-02 -4.96149547e-02
  3.70160118e-02  4.78376634e-02 -4.78415601e-02 -2.13712696e-02
  2.47668624e-02 -3.90774570e-03  5.67493401e-03 -1.23754470e-02
  2.73990277e-02 -1.94065850e-02 -1.09644115e-01 -7.94299021e-02
  7.50510991e-02  3.13244760e-02 -4.11100276e-02  3.18473466e-02
 -6.54306486e-02  1.10510305e-01  3.22438069e-02  3.15258652e-02
 -4.87042107e-02 -1.35601476e-01  2.13220511e-02 -7.41869062e-02
 -3.67192402e-02 -5.29748574e-03 -1.09145708e-01  1.48128429e-02
 -3.55390869e-02  2.80607548e-02 -3.88435200e-02  2.29457039e-02
 -3.12421974e-02 -1.30827567e-02  7.35541135e-02  2.65341140e-02
  6.15805387e-02 -1.13763735e-02  3.01715359e-02  2.43732221e-02
  8.11095759e-02 -1.53021412e-02 -1.62678678e-02  1.05745964e-01
  4.49689887e-02 -6.28014514e-03 -8.69788975e-02 -3.66073325e-02
 -1.22090662e-02  5.54709211e-02 -5.16750626e-02 -2.73667034e-02
  8.41393843e-02 -4.91796359e-02  7.38892034e-02  1.03271857e-01
  3.64014460e-03  2.85454486e-02  1.87045261e-02 -9.77484323e-03
  1.62396580e-02  3.39565054e-02 -1.98805798e-02 -5.64739527e-03
 -7.00593442e-02 -5.24472371e-02  6.13845093e-03  4.96185571e-02
  6.21916540e-02 -1.55036636e-02  6.61279168e-03  6.20976537e-02
  1.40011613e-03  1.59553681e-02  4.03387286e-02  1.59491152e-02
  2.99576726e-02  8.49325433e-02  6.30953163e-02 -5.61270194e-33
 -3.10784150e-02  2.09694393e-02 -1.39397383e-01  7.62318149e-02
  2.14156285e-02 -9.72158238e-02 -9.91816297e-02 -8.52133241e-03
  2.83616185e-02 -5.66630848e-02 -5.29077649e-02 -9.67983827e-02
  5.98692941e-03  2.82204878e-02 -9.28467792e-03 -8.72268230e-02
  8.57730582e-02 -1.79114584e-02 -3.52365412e-02 -1.22291811e-01
 -2.41982006e-02  2.06021629e-02 -4.63071419e-03  9.81519185e-03
  5.25699295e-02 -2.03982666e-02  5.14624864e-02  8.47993344e-02
 -4.72548716e-02 -4.78914194e-02  1.09937407e-01 -6.14771023e-02
 -4.47229436e-03 -1.65479854e-02  3.15067209e-02  9.80638862e-02
  7.06445193e-03  5.56557626e-03  4.03409265e-02  6.86525106e-02
  8.30634907e-02 -9.81903169e-03 -3.34780924e-02  2.21525114e-02
 -7.68815801e-02  3.01366877e-02 -6.79637119e-02  3.74993421e-02
  3.32490541e-03  3.20852622e-02  6.48745522e-02  5.16486168e-03
  5.47074601e-02  4.51218570e-03  1.54164322e-02  9.39107686e-02
  3.46839987e-02  3.57011408e-02  4.07499149e-02  1.36185903e-03
  6.87094778e-02 -7.94757456e-02 -2.90708477e-03  5.24269864e-02
  4.30462994e-02  3.89953936e-03  9.29677486e-02 -4.11860980e-02
  2.60183793e-02  1.39622362e-02  6.74662516e-02 -2.49523781e-02
 -3.78348716e-02  1.03996759e-02  3.21689472e-02  1.24245146e-02
 -5.41411191e-02 -5.03875352e-02 -1.84338856e-02 -4.57975157e-02
 -9.66998488e-02  2.80442387e-02  2.77555697e-02  1.21690976e-02
 -2.58256104e-02 -2.50612125e-02  1.09606154e-01 -2.40456071e-02
  2.32026950e-02 -6.43813564e-03  6.06776848e-02 -1.21672638e-03
 -4.94252294e-02  1.61290746e-02 -1.23948501e-02 -5.84431277e-08
 -7.09650517e-02 -1.18527291e-02 -3.17579545e-02  3.95893194e-02
  1.00845627e-01  1.06146008e-01  7.85557926e-02 -4.94517609e-02
  4.62862626e-02  1.65366791e-02  1.07567955e-03 -6.58588186e-02
 -9.93900932e-04 -9.09914821e-02  1.18735328e-01  2.97197942e-02
  3.74208204e-02 -9.30344388e-02 -6.57963902e-02 -1.03153363e-01
 -1.03533994e-02 -1.56913530e-02 -6.58838898e-02  1.46309622e-02
 -7.99530447e-02 -2.92669553e-02  6.10922612e-02  9.49260816e-02
 -2.11014878e-02 -5.25880828e-02 -7.57387951e-02 -4.29055169e-02
  6.08551316e-02  8.42687786e-02 -7.90324807e-02  9.40041691e-02
 -3.09138838e-02 -2.36536227e-02  2.92444276e-03  4.08253483e-02
 -3.50692011e-02  6.63026795e-03 -3.14662308e-02  4.28530648e-02
 -2.41440386e-02  3.04632038e-02 -5.65114096e-02  2.17796098e-02
  3.98318842e-03 -1.77482590e-02  3.57368998e-02 -5.56283966e-02
  3.15977819e-02 -8.92088097e-03  7.93273300e-02  2.04549991e-02
  1.74006838e-02 -1.43696275e-03  1.18052699e-01  3.46082030e-03
 -4.87209857e-02  5.84360808e-02  1.33706033e-02  5.91408345e-04]"
"to a single hop between validators. That is, transactions received on the tpu_forwards port are not forwarded on to other validators.There are also two lesser known reasons why a transaction may be dropped before it is processed. The first scenario involves transactions that are submitted via an RPC pool. Occasionally, part of the RPC pool can be sufficiently ahead of the rest of the pool. This can cause issues when nodes within the pool are required to work together. In this example, the transaction’s recentBlockhashopen in new window is queried from the advanced part of the pool (Backend A). When the transaction is submitted to the lagging part of the pool (Backend B), the nodes will not recognize the advanced blockhash and will drop the transaction. This can be detected upon transaction submission if developers enable preflight checksopen in new window on sendTransaction.Temporarily network forks can also result in dropped transactions. If a validator is slow to replay its blocks within the Banking Stage, it may end up creating a minority fork. When a client builds a transaction, it’s possible for the transaction to reference a recentBlockhash that only exists on the minority fork. After the transaction is submitted, the cluster can then switch away from its minority fork before the transaction is processed. In this scenario, the transaction is dropped due to the blockhash not being found.# After a transaction is processed and before it is finalizedIn the event a transaction references a recentBlockhash from a minority fork, it’s still possible for the transaction to be processed. In this case, however, it would be processed by the leader on the minority fork. When this leader attempts to share its processed transactions with the rest of the network, it would fail to reach consensus with the majority of validators that do not recognize the minority fork. At this time, the transaction would be dropped before it could be finalized.# Handling Dropped TransactionsWhile RPC nodes will attempt to rebroadcast transactions, the algorithm they employ is generic and often ill-suited for the needs of specific applications. To prepare for times of network congestion, application developers should customize their own rebroadcasting logic.# An In-Depth Look at sendTransactionWhen it comes to submitting transactions, the sendTransaction RPC method is the primary tool available to developers. sendTransaction is only responsible for relaying a transaction from a client to an RPC node. If the node receives the transaction, sendTransaction will return the transaction id that can be used to track the transaction. A successful response does not indicate whether the transaction will be processed or finalized by the cluster.TIP# Request Parameterstransaction: string - fully-signed Transaction, as encoded string(optional) configuration object: objectskipPreflight: boolean - if true, skip the preflight transaction checks (default: false)(optional) preflightCommitment: string - Commitmentopen in new window level to use for preflight simulations against the bank slot (default: ""finalized"").(optional) encoding: string - Encoding used for the transaction data. Either ""base58"" (slow), or ""base64"". (default: ""base58"").(optional) maxRetries: usize - Maximum number of times for the RPC node to retry sending the transaction to the leader. If this parameter","[-2.33691721e-03 -3.10328417e-02  5.57025746e-02 -2.08066851e-02
  5.70494905e-02 -4.25819941e-02 -2.00892091e-02 -1.20405527e-02
  1.20101973e-01  3.40114981e-02  4.85327691e-02  2.88448739e-03
 -8.84136930e-03 -3.16579565e-02 -9.46386252e-03 -1.96321849e-02
  4.40256819e-02 -3.92701253e-02 -3.53230201e-02 -4.77144681e-02
 -1.10746525e-01 -6.79402202e-02 -4.92729619e-02  7.58577436e-02
 -3.66762057e-02 -1.46458554e-03 -1.22412995e-01 -3.15861069e-02
  2.67584026e-02 -2.38709264e-02 -4.20445874e-02  3.37512009e-02
 -1.65989935e-01 -6.70801569e-03 -4.09611799e-02  6.69347495e-02
  2.21321695e-02  9.14147422e-02 -2.28935741e-02 -6.09961227e-02
  6.67421818e-02 -2.50446778e-02 -5.56773022e-02  2.22456232e-02
 -1.56529192e-02  1.22961961e-02  3.36964279e-02  1.87818129e-02
 -8.32956955e-02 -5.60519360e-02 -2.42753960e-02  6.28483072e-02
  3.82374264e-02  4.66018356e-02 -5.16446494e-02  3.47272232e-02
  4.30869162e-02 -2.25532968e-02 -3.34362313e-02  6.11005239e-02
 -1.42363515e-02 -8.11317042e-02  3.37738469e-02 -6.45388737e-02
  8.47191513e-02 -1.96421985e-02  5.33286892e-02 -1.88420452e-02
 -2.10605538e-03  4.53683920e-03  7.73106962e-02 -7.82548543e-03
 -7.58445710e-02  3.10949534e-02  7.00232433e-03  9.18352511e-03
 -2.00194661e-02  8.48062243e-03 -5.26624992e-02 -7.03043342e-02
  4.83129434e-02  2.87973485e-03 -4.50544953e-02 -8.37259218e-02
 -1.12890648e-02 -4.94761914e-02 -6.51660785e-02 -4.92713489e-02
  2.64937170e-02  3.29690017e-02  9.47033092e-02  4.36226986e-02
  8.72425735e-03  3.52497920e-02  1.12704232e-01 -3.71618345e-02
 -1.73234846e-02  1.87945403e-02  5.59345447e-02  4.18359563e-02
  3.35441269e-02  5.42224199e-02 -4.36680317e-02  6.68249279e-02
  2.23882999e-02 -1.20389089e-02  2.37375982e-02 -9.50834528e-03
  2.35709995e-02  2.26855557e-02  5.06368242e-02  2.56788731e-02
  8.03513974e-02 -5.19040599e-03 -7.43322745e-02  5.93144409e-02
  8.35031085e-03 -8.54013115e-03  8.86408333e-03 -2.48735752e-02
 -8.29344243e-02  1.11934613e-03  2.60494836e-02 -6.42851144e-02
  6.17230460e-02 -7.84714594e-02 -2.04411186e-02  4.86919331e-33
  2.90399771e-02 -6.57166168e-02 -3.62362266e-02 -2.40897126e-02
  5.52944606e-03  3.57308611e-02 -1.80990808e-02 -1.35392472e-02
  2.55269557e-02 -3.73390876e-02 -8.14026594e-02 -8.24254751e-02
  1.57778636e-02 -5.53092249e-02 -3.65859382e-02 -8.85833278e-02
  2.70506702e-02  3.76702920e-02  4.01680358e-03  2.42210794e-02
  1.07246535e-02 -7.75880888e-02 -3.47798392e-02  1.57903451e-02
 -8.34510848e-02  2.31710766e-02 -8.41686800e-02 -3.95516381e-02
 -1.66531280e-02  5.20029254e-02 -8.83856565e-02  5.71348108e-02
  1.34083340e-02  5.26521839e-02  5.01570962e-02  6.33431152e-02
 -1.03711886e-02 -2.76353881e-02  6.40031546e-02 -9.11579281e-02
 -9.09667835e-02  3.85979675e-02 -8.27850550e-02  5.41994274e-02
 -7.64381960e-02 -1.38513282e-01 -1.23549718e-03  3.48830186e-02
 -6.58976212e-02  6.93372786e-02  3.78962830e-02 -1.27734954e-03
  1.40921222e-02 -3.92285176e-02 -2.49529425e-02 -4.41763690e-03
  4.15125899e-02 -4.53052856e-03 -3.52601968e-02  1.30284801e-01
  1.02598988e-01  1.16973640e-02 -1.93058953e-01 -2.52992399e-02
  7.04587772e-02  6.12835251e-02  1.11419354e-02 -3.34356613e-02
 -2.58819833e-02 -3.88329551e-02  1.08792121e-02  7.20596910e-02
  1.38302799e-02  4.57406007e-02  9.28569958e-02 -4.96560670e-02
 -3.11171729e-02  3.63852717e-02  9.02364030e-03 -6.22735359e-02
 -1.37453927e-02 -7.77094066e-03 -3.49905752e-02  1.08687868e-02
 -2.62330063e-02  2.20205244e-02  3.58234830e-02 -4.33825143e-02
 -2.51312908e-02 -2.35129893e-03  4.02102014e-03 -1.88723914e-02
  1.03657357e-01  6.92017674e-02  6.70788586e-02 -4.92217174e-33
 -2.28080601e-02 -5.25410250e-02 -7.79785439e-02  6.33779839e-02
  3.19983885e-02 -3.43393646e-02 -6.58890232e-03  4.52435277e-02
 -4.37463298e-02 -6.37109578e-02 -2.77138837e-02 -1.85717698e-02
 -4.17754874e-02  7.02364966e-02  2.04234608e-02 -6.80071935e-02
  1.14514485e-01 -1.20913247e-02  5.11598736e-02  2.50348402e-03
  1.04134858e-01  5.01903612e-03  1.80971797e-03  5.40399998e-02
 -3.92822996e-02  1.91251412e-02  4.36996156e-03  2.85035148e-02
  4.06853436e-03 -1.87904444e-02 -1.63979921e-02 -2.41271798e-02
  4.76348102e-02  4.33401763e-02  3.40899937e-02 -1.04173338e-02
 -1.10152431e-01  2.96097193e-02  7.95551091e-02  3.16662043e-02
  6.14501350e-02  1.17145563e-02 -1.43939462e-02 -1.39157958e-02
 -6.33598641e-02  6.67631924e-02 -7.48276263e-02  4.99001257e-02
 -2.02552937e-02  2.50049308e-02  4.70397510e-02  5.83949611e-02
  7.57015422e-02  3.56032923e-02  1.48653788e-02  3.99984792e-02
  5.61729968e-02  2.71218289e-02 -3.38636935e-02  3.53198051e-02
  3.08587914e-03 -4.10892908e-03  1.74584650e-02  2.16555316e-02
  9.12716016e-02  5.07455915e-02  5.54227852e-04 -3.80412303e-02
  1.10706121e-01 -6.31738640e-03  1.42755834e-02  1.26140350e-02
 -5.81378005e-02 -5.74968308e-02  6.62480891e-02 -4.40326752e-03
 -5.46674207e-02 -6.65520728e-02  3.66237201e-02 -3.48009132e-02
 -1.22406401e-01  7.33671486e-02  1.00360857e-02  9.97460913e-03
  1.65628716e-02 -4.66940552e-03 -8.80676415e-03 -1.97734889e-02
  4.40071784e-02 -1.32019827e-02  8.69411230e-02 -3.99576761e-02
 -4.50492688e-02  2.35939231e-02 -3.88476066e-02 -5.73702081e-08
  6.79230271e-03 -1.57327447e-02 -6.61716014e-02  6.90513551e-02
  1.10322259e-01  4.28451709e-02  4.60354984e-02 -6.57704696e-02
  1.73978042e-02 -5.49494252e-02  3.90007123e-02 -3.62380594e-02
 -6.63233921e-03 -1.14382386e-01  7.70396814e-02 -4.31314018e-03
 -5.29495738e-02 -7.18328282e-02 -7.92056099e-02 -6.97524473e-02
 -4.23957631e-02 -1.04521057e-02 -4.97104414e-03  1.31115168e-02
 -9.44811180e-02  4.18178514e-02  5.26619516e-02  1.22586479e-02
  2.62687970e-02 -6.62765056e-02 -1.09349145e-03  2.20989212e-02
  2.50955988e-02  3.21615301e-02 -5.16014546e-02  9.05208662e-02
 -2.98126172e-02 -3.72532289e-03  6.38958439e-03  6.05892614e-02
 -6.13391139e-02  4.07961458e-02 -3.83547097e-02 -1.14402911e-02
  1.21339690e-03  3.01906597e-02 -9.56705809e-02  6.28841147e-02
 -1.17900269e-02 -2.09543929e-02  3.69022647e-03 -1.72436645e-03
 -3.99819529e-03  7.82824159e-02  5.98400794e-02 -6.06573820e-02
  3.45474668e-02 -6.01998717e-02  8.55599642e-02 -1.19664827e-02
  4.89914417e-02 -1.29561219e-02  3.17659900e-02 -1.58002675e-02]"
"is not provided, the RPC node will retry the transaction until it is finalized or until the blockhash expires.# Responsetransaction id: string - First transaction signature embedded in the transaction, as base-58 encoded string. This transaction id can be used with getSignatureStatusesopen in new window to poll for status updates.# Customizing Rebroadcast LogicIn order to develop their own rebroadcasting logic, developers should take advantage of sendTransaction’s maxRetries parameter. If provided, maxRetries will override an RPC node’s default retry logic, allowing developers to manually control the retry process within reasonable boundsopen in new window.A common pattern for manually retrying transactions involves temporarily storing the lastValidBlockHeight that comes from getLatestBlockhashopen in new window. Once stashed, an application can then poll the cluster’s blockheightopen in new window and manually retry the transaction at an appropriate interval. In times of network congestion, it’s advantageous to set maxRetries to 0 and manually rebroadcast via a custom algorithm. While some applications may employ an exponential backoffopen in new window algorithm, others such as Mangoopen in new window opt to continuously resubmitopen in new window transactions at a constant interval until some timeout has occurred.TSPress </> button to view full sourceimport {
  Keypair,
  Connection,
  LAMPORTS_PER_SOL,
  SystemProgram,
  Transaction,
} from ""@solana/web3.js"";
import * as nacl from ""tweetnacl"";

const sleep = async (ms: number) => {
  return new Promise((r) => setTimeout(r, ms));
};

(async () => {
  const payer = Keypair.generate();
  const toAccount = Keypair.generate().publicKey;

  const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");

  const airdropSignature = await connection.requestAirdrop(
    payer.publicKey,
    LAMPORTS_PER_SOL
  );

  await connection.confirmTransaction(airdropSignature);

  const blockhashResponse = await connection.getLatestBlockhashAndContext();
  const lastValidBlockHeight = blockhashResponse.context.slot + 150;

  const transaction = new Transaction({
    feePayer: payer.publicKey,
    blockhash: blockhashResponse.value.blockhash,
    lastValidBlockHeight: lastValidBlockHeight,
  }).add(
    SystemProgram.transfer({
      fromPubkey: payer.publicKey,
      toPubkey: toAccount,
      lamports: 1000000,
    })
  );
  const message = transaction.serializeMessage();
  const signature = nacl.sign.detached(message, payer.secretKey);
  transaction.addSignature(payer.publicKey, Buffer.from(signature));
  const rawTransaction = transaction.serialize();
  let blockheight = await connection.getBlockHeight();

  while (blockheight < lastValidBlockHeight) {
    connection.sendRawTransaction(rawTransaction, {
      skipPreflight: true,
    });
    await sleep(500);
    blockheight = await connection.getBlockHeight();
  }
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354while (blockheight < lastValidBlockHeight) {
  connection.sendRawTransaction(rawTransaction, {
    skipPreflight: true,
  });
  await sleep(500);
  blockheight = await connection.getBlockHeight();
}
1234567When polling via getLatestBlockhash, applications should specify their intended commitmentopen in new window level. By setting its commitment to confirmed (voted on) or finalized (~30 blocks after confirmed), an application can avoid polling a blockhash from a minority fork.If an application has access to RPC nodes behind a load balancer, it can also choose to divide its workload amongst specific nodes. RPC nodes that serve data-intensive requests such as getProgramAccounts may be prone to falling behind and can be ill-suited for also forwarding transactions. For applications that handle time-sensitive transactions, it may be prudent to have dedicated nodes","[ 1.34574343e-03 -6.00118674e-02 -5.59172500e-03  3.21136415e-02
 -5.46042472e-02  1.46938330e-02 -2.29659695e-02  1.57284327e-02
  2.59632189e-02  6.11851886e-02 -6.18278282e-03  6.85026795e-02
 -2.90537532e-02 -1.31149488e-02 -4.56864759e-02 -9.37387720e-02
  9.54602808e-02  5.31979240e-02 -3.20213847e-02 -6.01609796e-02
 -6.32935613e-02 -1.85412471e-03 -3.08031794e-02  2.09034458e-02
 -6.09751791e-02 -4.16685529e-02 -7.47571662e-02 -1.93256456e-02
  5.48300275e-04  1.92087777e-02 -1.46852825e-02  1.46014709e-02
 -6.02978505e-02 -1.35962535e-02  1.18318142e-03  1.02112159e-01
  1.87131355e-03 -2.54724007e-02 -9.42318738e-02 -5.66848405e-02
  8.83319788e-03 -1.26523878e-02 -5.74954078e-02  8.29164460e-02
  5.49260192e-02 -5.44574186e-02 -5.39766885e-02  6.68470338e-02
 -2.28009392e-02 -3.66700292e-02  2.74207927e-02  2.18627751e-02
  2.15282198e-02  1.38506338e-01  8.28641057e-02  5.49587831e-02
 -2.22135298e-02 -4.88292240e-03  3.19750123e-02  4.88739945e-02
  4.23938967e-02 -9.08575207e-02  4.66320030e-02 -3.04444358e-02
  4.64316308e-02  3.83639820e-02  4.42769155e-02 -1.72739625e-02
  6.29992709e-02  5.07975705e-02  2.89130062e-02 -1.57998689e-02
 -9.28906426e-02 -9.84418206e-03 -2.11074613e-02  5.82485460e-03
 -3.00024375e-02 -7.93032441e-03 -6.18737340e-02  3.35794166e-02
 -3.77568137e-03 -5.10808006e-02 -4.33653453e-03 -2.50450540e-02
 -2.08341461e-02 -3.47387716e-02 -5.61172739e-02  6.98548630e-02
  8.17658305e-02  4.81135957e-03 -2.41451655e-02  9.74397510e-02
 -1.27774142e-02 -5.23831882e-02 -4.19713371e-02 -5.15345624e-03
 -7.57529363e-02  2.13732850e-02  2.05297000e-03  1.37150176e-02
  4.24737409e-02 -4.78392583e-04 -7.44952410e-02 -3.58648226e-02
 -1.13445045e-02 -9.29758996e-02 -3.54061015e-02  6.61691725e-02
 -1.61933079e-02 -1.68633077e-03 -2.02395208e-02  4.46355678e-02
  7.89881572e-02 -2.87642311e-02 -3.06976610e-03  8.15560594e-02
  1.03821093e-02  2.87146438e-02 -1.50584271e-02 -1.71559919e-02
  3.87528054e-02  2.98635550e-02  4.25576903e-02 -9.37750936e-02
  7.50069320e-02 -5.52796647e-02  5.60804736e-04  9.98859647e-33
  4.38933261e-03  2.32218318e-02 -2.36479808e-02 -1.07935267e-02
  1.86881833e-02 -2.58837454e-02  1.43034775e-02 -1.13795511e-02
  4.63616140e-02 -6.87675029e-02  1.99877284e-02  6.30452950e-03
  2.16267034e-02 -8.05405527e-02 -2.05899794e-02 -4.55104411e-02
  2.07197666e-02  8.50764662e-02  3.13313387e-04  1.78102627e-02
 -5.48954271e-02 -3.21690515e-02  3.67988721e-02 -1.39421700e-02
 -1.00530572e-02 -3.16681005e-02 -1.57794803e-02 -6.17396384e-02
 -2.23626569e-03  4.51422576e-03  3.92227583e-02  6.71555176e-02
 -4.87621054e-02  8.49137902e-02 -7.07621034e-03 -1.62505452e-02
 -4.55111451e-02 -7.51413330e-02  1.68200564e-02 -3.28692049e-02
 -6.07887506e-02  4.93402667e-02 -9.81222913e-02  8.57717078e-03
 -1.95950473e-04 -1.25828817e-01  2.61638016e-02  4.68984887e-04
 -2.51423754e-02  1.68326963e-02  1.41114399e-01  4.25503142e-02
  7.77818635e-02 -5.84809966e-02 -8.22654143e-02 -7.72884395e-03
  2.54409108e-03  2.28976351e-04 -2.36390661e-02  1.18960008e-01
  4.74999007e-03 -8.02724957e-02 -3.58170532e-02 -3.32767777e-02
  4.21062224e-02  1.08234055e-01 -3.48285865e-03 -5.58256283e-02
 -3.19737494e-02  1.23968562e-02  6.89672157e-02  3.29509564e-02
  4.90213931e-02  9.88243613e-04  1.58296376e-02  5.19157806e-03
  6.24814583e-03 -3.23300832e-03  1.71336103e-02 -8.30993243e-03
  2.38956660e-02 -5.39412722e-03 -5.17760217e-02  1.66757610e-02
  3.27946991e-02 -6.74570585e-03  2.69978773e-02 -8.17594957e-03
 -2.28978042e-02 -5.33960462e-02 -1.00864191e-02 -5.54139763e-02
  4.34225947e-02  2.26811655e-02  7.88875967e-02 -7.99700562e-33
  1.48628680e-02 -8.53689536e-02 -1.04570895e-01  5.05157523e-02
 -3.29403840e-02 -4.64072749e-02 -3.71586122e-02  9.62536633e-02
  6.64329296e-03 -1.16660804e-01  6.70729801e-02 -9.76912528e-02
  9.91655793e-03  7.50410631e-02 -2.09367648e-02 -8.06328654e-02
 -2.33293325e-03 -6.65134788e-02  1.60458088e-02  1.15965563e-03
  4.06981632e-02 -1.01838447e-01 -2.47718357e-02  7.07331449e-02
 -4.88746958e-03  5.09045385e-02 -1.45723335e-02  1.39696256e-03
  3.25798895e-03 -1.51264116e-01  3.69402654e-02 -1.11531235e-01
 -4.31995615e-02  5.68593964e-02  9.13560465e-02  1.15491059e-02
  2.05276515e-02  3.91181782e-02  1.56968553e-02  3.00427973e-02
  1.07350074e-01  6.46373034e-02 -5.91180548e-02  5.90158254e-02
  1.73706617e-02  1.48872212e-02 -3.98958847e-02  5.29101416e-02
  2.49215886e-02 -2.36852933e-03  6.78632548e-03 -2.96170767e-02
  4.00459208e-02  7.42553100e-02  4.69806716e-02  6.65416718e-02
  2.91594379e-02  1.82601821e-03 -2.63647549e-02  1.33300889e-02
  1.12156915e-02 -8.25870782e-02  5.70823485e-03  9.37346593e-02
  6.35936707e-02  2.91014872e-02  3.90720703e-02 -6.06886335e-02
 -2.86031552e-02 -7.45686889e-03  2.67599057e-02  3.48746963e-02
 -3.35241691e-03 -1.95803400e-03  5.47225662e-02 -2.02211328e-02
  2.30673123e-02 -1.31327271e-01  8.19613133e-03  6.26041554e-03
 -7.61206970e-02  6.28912747e-02 -3.58736962e-02  6.94074184e-02
  1.22507334e-01 -5.39567880e-02  4.67335526e-03  2.40448061e-02
  8.69455859e-02 -2.90576834e-02 -7.29620010e-02 -2.79932488e-02
 -3.05406917e-02 -3.37614268e-02 -6.14935756e-02 -5.46488224e-08
 -8.14707577e-02  1.30013318e-03 -1.75921023e-02  2.72852592e-02
  1.34882078e-01  6.79949746e-02  4.44282331e-02 -1.22795608e-02
 -1.10334158e-02  2.54859123e-03  4.08324637e-02 -4.80552800e-02
  2.77647879e-02 -1.08851582e-01 -1.59764737e-02 -1.63524784e-02
  7.26182833e-02 -7.07347989e-02 -2.33882964e-02 -6.01026602e-02
 -2.78673917e-02 -3.29563580e-02  1.63885802e-02  5.23457602e-02
 -6.27686828e-02  2.40899380e-02  1.34244695e-01  9.90174860e-02
 -2.10109781e-02 -6.53265715e-02 -6.81777671e-02 -5.94000742e-02
  1.44795150e-01  7.49556124e-02 -7.27415085e-02  2.38718521e-02
 -3.43782902e-02  7.82172903e-02  4.98997234e-02 -5.59436390e-03
 -2.70530097e-02  3.46178673e-02  1.92036089e-02  4.08700965e-02
  2.21173856e-02 -2.22769305e-02 -1.00877881e-01  6.23868480e-02
 -2.16478538e-02 -1.94060877e-02 -2.04644445e-03 -5.42211235e-02
  1.09409606e-02 -1.50071108e-03  5.55068860e-03 -8.99172202e-03
  4.54522111e-02 -3.22276875e-02  6.51323795e-02  4.69786748e-02
  2.59421673e-02  9.42672789e-03 -6.04013205e-02 -3.74331437e-02]"
"that only handle sendTransaction.# The Cost of Skipping PreflightBy default, sendTransaction will perform three preflight checks prior to submitting a transaction. Specifically, sendTransaction will:Verify that all signatures are validCheck that the referenced blockhash is within the last 150 blocksSimulate the transaction against the bank slot specified by the preflightCommitmentIn the event that any of these three preflight checks fail, sendTransaction will raise an error prior to submitting the transaction. Preflight checks can often be the difference between losing a transaction and allowing a client to gracefully handle an error. To ensure that these common errors are accounted for, it is recommended that developers keep skipPreflight set to false.# When to Re-Sign TransactionsDespite all attempts to rebroadcast, there may be times in which a client is required to re-sign a transaction. Before re-signing any transaction, it is very important to ensure that the initial transaction’s blockhash has expired. If the initial blockhash is still valid, it is possible for both transactions to be accepted by the network. To an end-user, this would appear as if they unintentionally sent the same transaction twice.In Solana, a dropped transaction can be safely discarded once the blockhash it references is older than the lastValidBlockHeight received from getLatestBlockhash. Developers should keep track of this lastValidBlockHeight by querying getEpochInfoopen in new window and comparing with blockHeight in the response. Once a blockhash is invalidated, clients may re-sign with a newly-queried blockhash.# AcknowledgementsMany thanks to Trent Nelson, Jacob Creechopen in new window, White Tiger, Le Yafo, Buffaluopen in new window, and Jito Labsopen in new window for their review and feedback. # Local Development# Starting a Local ValidatorTesting your program code locally can be a lot more reliable than testing on devnet, and can help you test before trying it out on devnet.You can setup your local-test-validator by installing the solana tool suite and runningsolana-test-validator
1Benefits of using local-test-validator include:No RPC rate-limitsNo airdrop limitsDirect on-chain program deployment (--bpf-program ...)Clone accounts from a public cluster, including programs (--clone ...)Configurable transaction history retention (--limit-ledger-size ...)Configurable epoch length (--slots-per-epoch ...)Jump to an arbitrary slot (--warp-slot ...)# Connecting to EnvironmentsWhen you are working on Solana development, you will need to connect to a specific RPC API endpoint. Solana has 3 public development environments:mainnet-beta https://api.mainnet-beta.solana.comdevnet https://api.devnet.solana.comtestnet https://api.testnet.solana.comTSPythonC++RustCLIPress </> button to view full sourceimport { clusterApiUrl, Connection } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
})();
12345const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
1from solana.rpc.api import Client

client = Client(""https://api.mainnet-beta.solana.com"")
123client = Client(""https://api.mainnet-beta.solana.com"")
1#include ""solana.hpp""

using namespace many::solana;

int main() {
    Connection connection(""https://api.mainnet-beta.solana.com"");
    return 0;
}
12345678Connection connection(""https://api.mainnet-beta.solana.com"");
1use solana_client::rpc_client::RpcClient;
use solana_sdk::commitment_config::CommitmentConfig;

fn main() {
    let rpc_url = String::from(""https://api.mainnet-beta.solana.com"");
    let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
}
1234567let rpc_url = String::from(""https://api.mainnet-beta.solana.com"");
let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
12solana config set --url https://api.mainnet-beta.solana.com
1solana config set --url https://api.mainnet-beta.solana.com
1Finally, you can also connect to a private cluster, either one local or running remotely with the following:TSPythonC++RustCLIPress </> button to view full sourceimport { Connection } from ""@solana/web3.js"";

(async () => {
  // This will connect you to your local validator
  const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");
})();
123456const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");
1from solana.rpc.api import","[ 1.46029014e-02  3.46167502e-03  2.39384230e-02 -4.71554883e-02
 -4.48349752e-02  1.71696339e-02  3.99726257e-02 -2.02500890e-03
  1.10254429e-01  7.64262900e-02  1.65613648e-02  3.08473762e-02
 -4.33746167e-02  2.35109795e-02 -2.33126059e-03 -6.33595884e-02
  4.56669033e-02 -1.34006441e-02 -3.48229893e-02 -1.87207817e-03
 -4.74445485e-02 -3.56757045e-02 -4.03118357e-02  8.37957785e-02
 -3.52981384e-03 -1.13526091e-01 -6.19235449e-02  3.10200988e-03
 -4.50545503e-03  2.31838990e-02 -3.24719003e-03  3.97008732e-02
 -8.04058835e-02  8.55977461e-03 -3.59197930e-02 -1.15702637e-02
 -4.49482016e-02  4.07903977e-02 -3.68475914e-02 -9.99613926e-02
 -5.40286442e-03 -1.90382525e-02 -6.48895204e-02  5.45714945e-02
 -2.40659788e-02 -3.81649770e-02  1.20874364e-02  5.83857782e-02
 -8.43793154e-03  1.11331753e-02  5.81447631e-02 -1.81286559e-02
  8.33096914e-03  3.63055728e-02  4.75315228e-02  3.49347922e-03
 -1.72567535e-02  2.34562103e-02  2.50619370e-02  3.43893468e-02
  1.80237051e-02 -2.01927889e-02 -2.97722947e-02 -3.43777463e-02
  4.96199578e-02  8.70767236e-02  4.70776260e-02 -8.74221325e-02
  4.44608042e-03  9.67928544e-02  8.88816919e-03 -1.34649519e-02
 -4.39764969e-02  2.41710506e-02 -1.90935954e-02  3.21631208e-02
  4.40671388e-03  2.90548857e-02 -8.62605274e-02 -3.45959999e-02
 -1.73152126e-02 -7.67689049e-02 -6.10123463e-02 -4.25492413e-02
  3.89353745e-02 -3.51567790e-02 -6.46704361e-02  3.36853811e-03
  8.10945779e-02 -2.49756835e-02 -1.25661667e-03 -1.21896276e-02
  1.01273492e-01 -1.81259327e-02  1.71513148e-02  2.15016417e-02
 -5.38678840e-02 -1.34885672e-03  3.72661538e-02  2.16504317e-02
  9.08690691e-02  7.90452026e-03 -2.93025132e-02  1.89901367e-02
  2.14611012e-02 -5.93747981e-02  7.73397535e-02 -4.74686958e-02
 -1.80075411e-02  4.68398295e-02 -2.52936874e-02  1.21622263e-02
  7.48798251e-02 -7.79939443e-03 -2.79073305e-02  9.28807259e-02
  8.63409974e-03  2.97118016e-02  5.63813671e-02 -5.67742698e-02
 -6.34090453e-02  5.42289577e-02  1.73684359e-01 -6.07074499e-02
 -1.27660332e-03 -1.11781754e-01  1.70115661e-02  7.15787089e-33
 -1.77684948e-02 -6.39906107e-03 -6.29480183e-02 -9.24991257e-03
 -7.50219226e-02 -1.90772563e-02 -1.91631224e-02  5.81378303e-03
  3.21644843e-02 -2.26590037e-02 -3.63461450e-02 -4.06388007e-02
  3.74289937e-02  2.48279274e-02 -2.83861887e-02 -6.12599356e-03
  5.37454411e-02  9.45326220e-03  7.71513060e-02  7.22495317e-02
 -2.50951648e-02 -1.19949684e-01  2.79159173e-02  2.61782687e-02
 -1.70092075e-03 -2.53868140e-02 -7.10603595e-02 -5.95853925e-02
 -1.86675843e-02  1.49124097e-02 -1.89968273e-02  9.81401559e-03
  1.46819903e-02  8.93137529e-02 -4.65845136e-04  5.19683063e-02
 -7.36672729e-02 -4.10129875e-02  9.80913732e-03 -4.28352691e-02
 -3.92321758e-02  6.21205829e-02 -1.26343653e-01  1.49393994e-02
  7.46676000e-03 -5.51459342e-02  2.12682821e-02 -3.41032632e-02
  4.68096659e-02  3.99356559e-02  5.81912100e-02  8.67065713e-02
  4.45270678e-03 -2.80252323e-02 -8.29924867e-02 -2.88170055e-02
  5.39651290e-02 -6.85221478e-02  1.00995479e-02  4.89910729e-02
 -1.29263960e-02 -1.06184863e-01 -1.04303300e-01 -9.48804617e-03
 -8.52080900e-03  8.03679451e-02 -4.77831159e-03 -2.80762743e-02
 -9.16180313e-02 -1.24988653e-01 -1.55849345e-02 -1.43421488e-02
  4.69447039e-02  3.20189334e-02  1.21860066e-02  2.09273621e-02
  1.29732015e-02  2.35111676e-02  4.60906476e-02 -1.40514001e-02
 -1.53589959e-03  4.70229331e-03 -4.19746600e-02  2.67991191e-03
 -1.49715254e-02 -1.21178702e-02  1.78207029e-02 -7.02381730e-02
 -5.97056746e-02  1.26166502e-02  1.23020988e-02 -2.21746620e-02
 -1.51445940e-02  9.81681868e-02  1.06041886e-01 -8.28857156e-33
 -1.78921111e-02 -5.33543825e-02 -7.94341713e-02  6.64840564e-02
 -8.03189501e-02  1.05619784e-02  3.71130183e-02  1.10792127e-02
  1.66109540e-02 -8.33427235e-02 -2.17497088e-02 -5.96061908e-02
  1.27442973e-02  3.62082347e-02 -4.37551029e-02 -8.41866955e-02
  3.54750939e-02 -5.97240105e-02  6.32065088e-02 -3.65280174e-02
  1.18937902e-01 -5.31518366e-03 -3.53114121e-02  4.38872948e-02
 -6.61217123e-02  4.81044501e-02 -4.36369814e-02  1.44842090e-02
 -6.31428957e-02 -4.02872115e-02  5.00413813e-02  3.42150778e-02
  3.65816988e-02  5.07666357e-03  1.51124094e-02 -5.10268360e-02
  4.02289443e-03  1.57313183e-01 -1.36304734e-04  2.46992405e-03
  9.29607302e-02  7.54602328e-02 -9.37101245e-03  9.66381747e-03
 -1.96963269e-02  4.16541770e-02 -4.55293022e-02 -8.79147928e-03
 -1.08290846e-02  5.14895841e-02  1.00385007e-02  5.97920828e-03
  4.41693515e-02 -3.03570041e-03  5.46511598e-02  1.08546264e-01
  7.07419440e-02 -5.34806028e-02  5.09607457e-02  3.13089564e-02
 -2.68305093e-02 -7.27998838e-02  6.57660887e-02 -1.28305051e-02
  4.87570427e-02  2.23842766e-02  5.29094115e-02  1.47677474e-02
  1.01567872e-01  1.54567966e-02 -1.12895174e-02 -1.90201439e-02
 -6.78514466e-02 -7.84610137e-02  3.87715213e-02 -5.20187393e-02
  1.37270498e-03 -1.20265886e-01  4.53516096e-02 -3.25738378e-02
 -5.07363528e-02  8.56690109e-03  4.21976298e-03  3.08931712e-02
  3.43917944e-02 -4.10403013e-02 -6.26958499e-04 -3.73342112e-02
  3.53327766e-02 -5.31650567e-03 -4.99208318e-03  3.60905863e-02
  4.14384808e-03 -1.06727391e-01 -1.13947421e-01 -6.32864499e-08
 -4.29433025e-02 -6.10492937e-03 -6.96501986e-04  2.34038513e-02
  5.19796610e-02  4.07576608e-03  3.80237438e-02  2.73304079e-02
 -2.60958150e-02 -6.01129457e-02  2.07823869e-02 -1.44027015e-02
 -5.47515824e-02 -5.44950664e-02 -4.22729887e-02 -1.16822599e-02
  3.86178419e-02 -1.04022548e-01 -1.08096406e-01 -3.10608838e-02
 -4.49456386e-02  2.21461710e-02 -4.84674424e-02 -4.56458665e-02
  1.21268593e-02 -2.83974037e-02  1.07636869e-01  1.50104463e-01
  3.25969085e-02 -2.38763895e-02 -1.11830756e-01  1.41553357e-02
  6.80737570e-02  5.21757174e-03 -7.84754083e-02  3.69538367e-02
  4.78286371e-02  9.39851918e-04 -8.24086275e-03  3.17520574e-02
  3.43849906e-03 -3.43429134e-03  4.04749438e-02 -3.76568316e-03
 -2.42607184e-02  1.45199494e-02 -1.50342360e-01  6.62519336e-02
 -1.10780308e-02 -5.66655397e-02 -6.80998154e-03  2.78951675e-02
 -3.57000710e-04  1.51758790e-01  2.29613762e-02 -2.09915098e-02
  2.57197339e-02 -1.95227154e-02  1.23854004e-01  6.89851260e-03
  9.46333930e-02 -1.60960760e-02 -1.21424475e-03 -3.96970510e-02]"
"Client

client = Client(""http://127.0.0.1:8899"")
123client = Client(""http://127.0.0.1:8899"")
1#include ""solana.hpp""

using namespace many::solana;

int main() {
    Connection connection(""http://127.0.0.1:8899"");
    return 0;
}
12345678Connection connection(""http://127.0.0.1:8899"");
1use solana_client::rpc_client::RpcClient;
use solana_sdk::commitment_config::CommitmentConfig;

fn main() {
    let rpc_url = String::from(""http://127.0.0.1:8899"");
    let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
}
1234567let rpc_url = String::from(""http://127.0.0.1:8899"");
let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
12solana config set --url http://privaterpc.com
1solana config set --url http://privaterpc.com
1# Subscribing to EventsWebsockets provide a pub/sub interface where you can listen for certain events. Instead of pinging a typical HTTP endpoint at an interval to get frequent updates, you can instead receive those updates only when they happen.Solana's web3 Connectionopen in new window under the hood generates a websocket endpoint and registers a websocket client when you create a new Connection instance (see source code hereopen in new window).The Connection class exposes pub/sub methods - they all start with on, like event emitters. When you call these listener methods, it registers a new subscription to the websocket client of that Connection instance. The example pub/sub method we use below is onAccountChangeopen in new window. The callback will provide the updated state data through arguments (see AccountChangeCallbackopen in new window as an example).TSPythonC++RustPress </> button to view full sourceimport { clusterApiUrl, Connection, Keypair } from ""@solana/web3.js"";

(async () => {
  // Establish new connect to devnet - websocket client connected to devnet will also be registered here
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // Create a test wallet to listen to
  const wallet = Keypair.generate();

  // Register a callback to listen to the wallet (ws subscription)
  connection.onAccountChange(
    wallet.publicKey(),
    (updatedAccountInfo, context) =>
      console.log(""Updated account info: "", updatedAccountInfo),
    ""confirmed""
  );
})();
1234567891011121314151617// Establish new connect to devnet - websocket client connected to devnet will also be registered here
const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

// Create a test wallet to listen to
const wallet = Keypair.generate();

// Register a callback to listen to the wallet (ws subscription)
connection.onAccountChange(
  wallet.publicKey(),
  (updatedAccountInfo, context) =>
    console.log(""Updated account info: "", updatedAccountInfo),
  ""confirmed""
);
12345678910111213import asyncio
from solders.keypair import Keypair
from solana.rpc.websocket_api import connect

async def main():
    async with connect(""wss://api.devnet.solana.com"") as websocket:
        # Create a Test Wallet
        wallet = Keypair()
        # Subscribe to the Test wallet to listen for events
        await websocket.account_subscribe(wallet.pubkey())
        # Capture response from account subscription 
        first_resp = await websocket.recv()
        print(""Subscription successful with id {}, listening for events \n"".format(first_resp.result))
        updated_account_info = await websocket.recv()
        print(updated_account_info)
        
asyncio.run(main())
1234567891011121314151617async with connect(""wss://api.devnet.solana.com"") as websocket:
    # Create a Test Wallet
    wallet = Keypair()
    # Subscribe to the Test wallet to listen for events
    await websocket.account_subscribe(wallet.pubkey())
    #","[-9.04377550e-02  3.84185277e-03 -1.13467589e-01 -3.32110375e-02
 -9.66134071e-02 -3.66699286e-02 -6.44246936e-02  8.01462773e-03
 -1.20309684e-02 -3.08469050e-02  2.97166202e-02 -9.99994352e-02
 -4.42966335e-02  6.75986707e-03  5.63947596e-02  4.06706072e-02
 -9.73900482e-02 -3.20054665e-02 -3.69889177e-02  3.43639813e-02
  9.48934071e-03  1.74389388e-02 -1.62246004e-02 -4.32081819e-02
 -1.54266031e-02 -5.17091006e-02  5.22170961e-02  1.38124730e-02
  7.01248227e-03  5.54415323e-02  1.15982458e-01  8.10885876e-02
 -6.53581619e-02  7.57674873e-02 -2.32349969e-02  6.16101883e-02
 -3.56059745e-02  1.69822294e-02 -5.08621857e-02 -2.33979579e-02
  8.49091560e-02  4.45075445e-02 -3.42283621e-02  2.95065753e-02
  4.31750864e-02 -8.44678134e-02 -8.53612125e-02  3.40347290e-02
  5.22636063e-02 -4.61804010e-02 -6.02559783e-02 -9.76445246e-03
 -8.08512568e-02  6.07933439e-02  2.32865252e-02 -1.18343951e-02
 -4.59317751e-02  4.09875773e-02  1.49631826e-02 -6.97978819e-03
  2.42373832e-02  1.36034181e-02  3.38770710e-02 -7.57301748e-02
 -7.44317397e-02 -7.68703520e-02 -3.22898924e-02  4.10601906e-02
 -3.56138078e-03  2.57562213e-02  3.02743912e-02 -9.74802021e-03
 -6.52065128e-02 -4.58220690e-02 -6.00138679e-02 -2.26614866e-02
 -1.55095998e-02  5.75229637e-02 -1.49626872e-02 -1.92737933e-02
  5.49211577e-02 -4.97502759e-02 -2.56158393e-02  6.03468232e-02
  2.74865218e-02 -2.32824013e-02 -4.40781787e-02 -4.68965508e-02
  3.14753428e-02 -4.69390228e-02  2.36849971e-02  2.61292467e-03
 -9.09242183e-02 -1.09607438e-02 -2.04140693e-03  3.93538550e-02
 -5.45165362e-03  3.11388224e-02 -1.04196951e-01  8.70324969e-02
 -1.69452559e-02 -2.61575971e-02 -8.79832357e-02 -3.34819332e-02
 -5.65549321e-02 -4.59908545e-02  1.06914587e-01  4.88492809e-02
  4.39519249e-03  5.17533720e-02 -3.96722220e-02 -3.62837762e-02
 -7.26081133e-02 -9.71814059e-03 -6.19173050e-02  2.06342805e-02
  2.88414322e-02  7.25613460e-02  4.66911010e-02  2.85459626e-02
 -4.78536934e-02  4.56515513e-02  1.74477622e-02 -6.43019378e-02
 -4.38774042e-02 -2.24789623e-02  4.19665920e-03  6.64295000e-33
  1.02081299e-01  1.58018165e-03 -2.05872506e-02 -3.60648744e-02
  2.71205883e-03 -2.54238658e-02  1.84914526e-02  3.05238850e-02
 -3.83054279e-02 -6.40163645e-02 -6.41097352e-02  6.85118604e-03
 -1.20685184e-02 -1.36720836e-01 -7.49230161e-02  1.05009768e-02
  3.16977650e-02  2.40622256e-02  7.93922171e-02  2.68550236e-02
 -2.51440909e-02 -2.74407212e-02  1.74775627e-02 -7.49722570e-02
  2.60924175e-02 -4.33991924e-02 -2.96821799e-02 -8.37386586e-03
 -2.19763611e-02 -2.42145415e-02  4.68670018e-02  5.06648384e-02
 -3.66664715e-02  7.02602491e-02  4.08831201e-02  5.43432422e-02
 -2.43126750e-02 -3.19930576e-02 -1.01522066e-01 -4.55795862e-02
 -3.80254462e-02 -1.64926536e-02 -3.26348320e-02  9.61426832e-03
  2.11397111e-02  3.11132446e-02 -2.38187928e-02  4.31390554e-02
  1.03060417e-02  6.77575320e-02 -1.00728393e-01  3.65999853e-03
 -3.57318968e-02  1.33940931e-02  4.02618013e-02 -4.45572287e-02
 -2.46767085e-02  7.03240186e-02 -1.44601744e-02 -3.47404517e-02
 -4.60728928e-02 -3.93511774e-03 -6.28055679e-03 -1.66731086e-02
  9.61769465e-03  9.07798111e-02 -9.29986835e-02  5.63859642e-02
  2.65232520e-03 -2.35690419e-02 -2.93273591e-02  4.00899462e-02
 -3.58060859e-02  3.74967307e-02  1.38245150e-02 -1.13004781e-02
  2.74926294e-02  8.04127306e-02 -7.72313774e-02 -2.33682357e-02
  3.64144780e-02 -4.93097045e-02 -3.84811163e-02  1.47309154e-01
  4.16033119e-02  7.25730956e-02  5.26692718e-02  1.09629501e-02
 -1.04333824e-02  4.06227931e-02  8.97071362e-02  4.49690968e-02
  6.53606802e-02 -9.03800279e-02  2.88384408e-02 -6.20170763e-33
 -1.24115516e-02  2.17189640e-02 -9.23591629e-02 -1.06108421e-02
  7.22593814e-02 -3.30729224e-02  2.84165163e-02 -3.23590413e-02
 -4.29988764e-02  4.60790955e-02  4.22265492e-02 -6.28259480e-02
  9.57932025e-02 -6.45188838e-02 -5.93800433e-02  5.38939647e-02
  4.55113500e-02  2.92259268e-02  2.01333463e-02 -6.43742234e-02
 -2.99965199e-02  9.73558724e-02 -1.47204648e-03 -8.54510590e-02
  1.88156031e-02 -5.72769344e-02 -1.10502308e-02  6.53800294e-02
 -7.29209855e-02 -5.46801575e-02  9.66527313e-02 -2.94265477e-03
 -9.29884836e-02  2.53919140e-02  1.84198283e-02  2.25224849e-02
  4.65176851e-02  1.04951650e-01  2.65584141e-02  3.27141248e-02
  1.14078298e-01 -7.12468401e-02 -7.96573907e-02  7.39073828e-02
 -4.58490662e-02 -5.81874363e-02  8.25406164e-02 -8.07880387e-02
 -8.83578286e-02  1.56423002e-02  7.69906193e-02 -5.68445474e-02
 -2.85778884e-02  6.43007411e-03  6.80897683e-02  8.70218799e-02
  8.38136896e-02  4.11136933e-02 -1.06232669e-02 -1.53155550e-02
  3.22748385e-02 -9.64896604e-02 -1.09145800e-02  8.95909369e-02
  1.13986611e-01 -5.86487278e-02  2.87103150e-02  4.32749204e-02
  2.48617791e-02 -5.28501719e-02 -4.49828012e-03 -1.43503625e-04
  2.78261304e-02  8.99557322e-02  2.77029872e-02 -1.89719517e-02
  1.96715035e-02  1.76108107e-02  5.00500724e-02  8.53078216e-02
 -2.31024660e-02  2.43076514e-02  2.88914219e-02  9.02138371e-03
  3.81904133e-02 -5.39084375e-02  4.40311618e-02  4.68161181e-02
 -1.01962216e-01  2.81570274e-02  1.60781275e-02  8.44104141e-02
 -3.22531760e-02  4.37114052e-02  2.31420007e-02 -5.39296714e-08
 -6.47404417e-02 -1.09281996e-02 -9.71514285e-02 -1.79837514e-02
  6.24357611e-02  5.66918515e-02  1.34034846e-02 -4.78830710e-02
 -2.51675304e-02  6.46515787e-02 -7.82243907e-02  4.73760329e-02
 -1.38312755e-02 -1.21682817e-02 -4.13182098e-03 -7.46738762e-02
  1.04770795e-01 -6.80727419e-03  4.06974228e-03  1.13470433e-02
 -1.66925024e-02 -6.68971539e-02 -1.76718947e-03 -1.32644568e-02
  8.09639972e-03 -3.39826606e-02  2.09386051e-02  4.00838889e-02
 -1.33430045e-02 -1.15020741e-02 -3.29693817e-02 -5.22181876e-02
  7.18056113e-02 -3.04899141e-02 -8.10701624e-02  3.85369584e-02
 -3.69707085e-02  7.57459924e-03  5.10690734e-02  5.74790463e-02
  1.86826903e-02  3.01983766e-02 -4.53362912e-02  3.58753502e-02
  4.18650694e-02 -7.70652154e-03  2.53740102e-02  4.14931774e-03
  2.40158681e-02  4.63091768e-02  5.71937161e-03 -2.44780183e-02
  1.35283962e-01 -4.66685779e-02  1.16074067e-02  1.38143841e-02
 -5.13303801e-02  5.68461940e-02  1.19345356e-02  3.20312679e-02
 -2.37030573e-02  4.51953597e-02 -3.69135849e-02  7.59600699e-02]"
"Capture response from account subscription 
    first_resp = await websocket.recv()
    print(""Subscription successful with id {}, listening for events \n"".format(first_resp.result))
    updated_account_info = await websocket.recv()
    print(updated_account_info)    
12345678910// clang++ on_account_change.cpp -o on_account_change -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  Connection connection(""https://api.devnet.solana.com"");

  auto key_pair = Keypair::generate();

  int subscriptionId = connection.on_account_change(key_pair.public_key, [&](Result<Account> result) {
    Account account = result.unwrap();
    std::cout << ""owner = "" << account.owner.to_base58() << std::endl;
    std::cout << ""lamports = "" << account.lamports << std::endl;
    std::cout << ""data = "" << account.data << std::endl;
    std::cout << ""executable = "" << (account.executable ? ""true"" : ""false"") << std::endl;
  });

  sleep(1);

  std::string tx_hash = connection.request_airdrop(key_pair.public_key).unwrap();
  std::cout << ""tx hash = "" << tx_hash << std::endl;

  for (int i = 0; i < 10; i++) {
    connection.poll();
    sleep(1);
  }

  connection.remove_account_listener(subscriptionId);

  return 0;
}
123456789101112131415161718192021222324252627282930313233auto key_pair = Keypair::generate();

int subscriptionId = connection.on_account_change(key_pair.public_key, [&](Result<Account> result) {
    Account account = result.unwrap();
    std::cout << ""owner = "" << account.owner.to_base58() << std::endl;
    std::cout << ""lamports = "" << account.lamports << std::endl;
    std::cout << ""data = "" << account.data << std::endl;
    std::cout << ""executable = "" << (account.executable ? ""true"" : ""false"") << std::endl;
});

for (int i = 0; i < 10; i++) {
    connection.poll();
    sleep(1);
}

connection.remove_account_listener(subscriptionId);
12345678910111213141516use solana_client::pubsub_client::PubsubClient;
use solana_client::rpc_config::RpcAccountInfoConfig;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let wallet = Keypair::new();
    let pubkey = Signer::pubkey(&wallet);
    let ws_url = String::from(""wss://api.devnet.solana.com/"");
    println!(""{}"", ws_url);
    if let Ok(subscription) = PubsubClient::account_subscribe(
        &ws_url,
        &pubkey,
        Some(RpcAccountInfoConfig {
            encoding: None,
            data_slice: None,
            commitment: Some(CommitmentConfig::confirmed()),
        }),
    ) {
        let (mut ws_client, receiver) = subscription;
        println!(""Subscription successful, listening for events"");
        let handle = std::thread::spawn(move || loop {
            println!(""Waiting for a message"");
            match receiver.recv() {
                Ok(message) => println!(""{:?}"", message),
                Err(err) => {
                    println!(""Connection broke with {:}"", err);
      ","[-9.44688022e-02  3.51543054e-02 -5.97194545e-02 -3.75786908e-02
 -2.81298757e-02 -2.39537600e-02  1.32251985e-03  2.31414270e-02
  1.61546301e-02 -5.20781279e-02  5.99385835e-02 -9.00782347e-02
 -6.31902218e-02 -9.70469117e-02  3.23499031e-02  9.40696395e-04
 -7.32988194e-02 -2.61169802e-02  3.19998823e-02 -2.81549003e-02
 -1.39039904e-02 -2.94265840e-02 -6.16342351e-02 -2.99659576e-02
  8.15953221e-03 -4.00124118e-02  3.77172492e-02  4.38309507e-03
 -1.05119525e-02  2.66056620e-02  1.14347875e-01 -3.80984843e-02
 -5.00800386e-02  2.28592511e-02 -3.11266854e-02  5.77598326e-02
  7.64487917e-03 -2.37794779e-02 -4.28224951e-02 -7.90541992e-03
  9.32091624e-02  1.56827886e-02 -8.81371424e-02  1.43960984e-02
  5.41843586e-02 -2.29667220e-02 -9.35115814e-02  8.29335526e-02
 -3.67353521e-02  1.67326609e-04 -4.79747839e-02 -1.03403442e-03
 -5.16670831e-02  4.11950983e-02 -1.21300993e-02 -1.53955519e-02
  5.90130910e-02  2.12523732e-02  2.25878675e-02 -9.33214128e-02
  3.45569924e-02  7.69295357e-03  2.03361791e-02 -3.15567628e-02
 -1.20688424e-01 -1.96682084e-02  1.11567900e-02  6.03088960e-02
  8.51207506e-03  3.74587509e-03 -1.95757784e-02 -2.88403826e-03
 -6.34454638e-02 -1.98014062e-02 -1.61447003e-02 -5.19263111e-02
 -4.64408770e-02 -1.23391114e-02 -3.64714451e-02  3.77060585e-02
  2.07378380e-02  1.34437671e-02 -1.66922919e-02  7.53248408e-02
  4.69576381e-02  1.02051590e-02 -6.04639128e-02 -5.00469767e-02
  1.54571971e-02 -2.98613477e-02 -1.21313110e-02  1.12735657e-02
 -5.26391901e-02  4.40787971e-02 -4.12148336e-04  1.24599002e-01
  6.72472566e-02  6.27863333e-02 -6.04908215e-03  1.05305612e-01
 -1.27863814e-03  1.89566351e-02 -6.28958941e-02 -2.29347833e-02
 -5.96427023e-02 -2.96132397e-02  5.90285100e-02  4.65782396e-02
 -3.57113406e-02 -9.04409587e-03 -5.85766435e-02 -2.23466046e-02
 -7.29375146e-03 -1.07368166e-02  1.88975222e-02  5.94198890e-02
 -4.31021973e-02  1.21044777e-01 -6.26840815e-02  3.92311960e-02
  1.16192922e-01  4.61880639e-02 -1.02630109e-02  3.47959693e-03
 -2.85857711e-02 -4.73941863e-03  1.59116443e-02  7.05695617e-33
  7.07339048e-02 -3.14948447e-02 -7.01192692e-02 -2.01240052e-02
  4.06160876e-02 -2.26681381e-02  3.19133559e-03  3.00733955e-03
 -5.75496443e-02  1.06414435e-02 -2.90893745e-02 -2.92581022e-02
  1.12610040e-02 -9.97247994e-02 -5.10316640e-02  1.19732246e-02
 -4.63143364e-03  5.91675416e-02  6.20152876e-02  2.87380647e-02
 -3.93537953e-02 -6.32526651e-02  4.49021980e-02 -3.92794274e-02
  5.54010943e-02  4.61304039e-02 -4.82629798e-02  8.96176472e-02
 -9.95582156e-03 -1.50149250e-02  4.45124432e-02 -2.60899421e-02
 -2.09914353e-02 -6.86791027e-03  4.58892845e-02 -4.48849611e-02
 -2.26068925e-02 -8.66190121e-02 -1.44144952e-01 -9.92170200e-02
  3.87026332e-02  8.99975467e-03 -5.72616905e-02 -1.50835449e-02
 -1.28456941e-02  1.18145803e-02 -7.61362463e-02  6.44046292e-02
  5.27388826e-02 -4.62392606e-02 -3.47116143e-02  2.39321180e-02
 -5.40554859e-02  1.69441365e-02  1.88297033e-02 -1.13202790e-02
 -1.97438849e-03  6.18235245e-02 -3.61212790e-02 -4.75689135e-02
  1.11665856e-02  6.24594884e-03  8.34695026e-02 -3.17655988e-02
  2.57460829e-02  3.98014113e-02 -6.27938583e-02  2.82857995e-02
  1.64700244e-02 -2.19410267e-02  1.40191913e-02  5.14048152e-02
 -5.66565767e-02  3.38481590e-02 -3.73189803e-03 -2.48362739e-02
  5.96626475e-02  5.43168001e-02 -8.20452943e-02  2.71661170e-02
  6.50255233e-02 -2.91191489e-02 -4.69547510e-02  6.55039698e-02
  2.86436174e-02  7.96844289e-02  4.66817655e-02 -6.28105402e-02
 -4.71216552e-02  8.54585320e-02  3.06934677e-02  3.47386561e-02
  6.44447505e-02 -7.53804222e-02 -3.56829353e-02 -7.09000814e-33
 -5.95415942e-02 -1.94752160e-02 -4.93439175e-02 -8.15986246e-02
  2.98409741e-02 -2.08714046e-02  3.14072333e-02  1.14989225e-02
 -2.95876283e-02  3.79107222e-02  2.66571436e-02 -5.65263107e-02
  1.93856116e-02  2.38610394e-02  5.38221747e-02  6.67745322e-02
  7.89962858e-02 -4.23313566e-02  5.23299165e-03 -2.76728403e-02
 -6.57761246e-02  8.74036252e-02  6.26290813e-02 -4.55005243e-02
 -5.54830534e-03  2.62984657e-03 -2.83848494e-03  6.74506798e-02
 -7.88303316e-02 -6.35360777e-02  1.12283394e-01  2.52647921e-02
 -8.59470591e-02  8.44617710e-02  5.98676270e-03 -1.10187577e-02
  5.99156804e-02  1.88379735e-02  2.18418483e-02  5.98995946e-02
  1.77184805e-01 -5.81111573e-02  9.23289359e-03 -1.03140911e-02
  2.38026306e-02 -3.84653620e-02  3.72884944e-02 -2.79840808e-02
 -2.58464478e-02  1.84615608e-02  6.65092021e-02 -5.19307926e-02
 -1.52587052e-02 -9.50742234e-03  3.28081734e-02  1.10537350e-01
  1.00560300e-01  2.34392080e-02  4.50359331e-03 -9.28880200e-02
 -2.07823468e-03 -1.12842970e-01 -4.64681461e-02  1.18111901e-01
  9.10781398e-02 -5.92665607e-03  2.64371410e-02 -8.45067762e-03
  6.80617690e-02 -6.47040382e-02  1.56396944e-02  7.47014070e-03
 -3.64157334e-02  1.71195455e-02 -2.20203365e-04 -1.83144968e-03
 -8.71315971e-02  1.80195831e-02 -8.58184509e-03  1.75816976e-02
 -8.73308554e-02  3.51134525e-03  4.48170938e-02 -3.28486152e-02
  2.34818906e-02 -8.31705257e-02  2.82295570e-02  5.15970513e-02
 -5.44741713e-02 -3.46419401e-02  2.12371275e-02  2.18933709e-02
 -2.33155787e-02  2.13936269e-02  6.40374348e-02 -5.74071919e-08
 -3.99246030e-02 -3.69094461e-02 -2.87823267e-02  4.83499803e-02
  5.29065244e-02  3.02133877e-02 -2.80686673e-02 -1.44083068e-01
 -5.50508276e-02  4.28630523e-02 -9.51451808e-02  3.83714736e-02
  4.38181832e-02 -1.17352987e-02  8.93813446e-02 -1.09031245e-01
  1.34827255e-03 -4.04462814e-02 -2.74580233e-02 -1.08112589e-01
  6.47049099e-02  6.68060849e-04 -3.48514807e-03  2.19565779e-02
 -1.11265723e-02 -7.55288005e-02  7.55958483e-02  5.14896214e-02
 -3.35622858e-03 -1.16233803e-01 -2.56517380e-02 -2.45753489e-02
  5.80560677e-02 -1.90453678e-02  3.87120880e-02  1.64849497e-02
 -1.93108749e-02 -4.40013502e-03  6.22347109e-02  1.03475325e-01
 -2.07713945e-03  7.73128346e-02 -3.53477448e-02  8.09106231e-02
 -7.40664676e-02  1.07046757e-02  4.30144928e-02  6.60394086e-03
  1.01037644e-01  3.29915248e-02 -2.32474711e-02 -6.42388090e-02
  1.12805873e-01 -3.21976021e-02 -4.38965447e-02 -3.52336280e-02
  7.95688853e-03  3.98432510e-03 -2.71771774e-02  1.97291728e-02
  9.33412556e-03  3.49625014e-02 -3.79936360e-02  2.42278422e-03]"
"             break;
                }
            }
        });
        handle.join().unwrap();
        ws_client.shutdown().unwrap()
    } else {
        println!(""Errooooor"");
    }
}
12345678910111213141516171819202122232425262728293031323334353637let ws_url = String::from(""wss://api.devnet.solana.com/"");
let (mut client, receiver) = PubsubClient::account_subscribe(
    &ws_url,
    &pubkey,
    Some(RpcAccountInfoConfig {
        encoding: None,
        data_slice: None,
        commitment: Some(CommitmentConfig::confirmed()),
    }),
).unwrap();
let message = match receiver.recv().unwrap();
println!(""{:?}"", message)
123456789101112# Getting Test SOLWhen you're working locally, you need some SOL in order to send transactions. In non-mainnet environments you can receive SOL by airdropping it to your addressTSPythonC++RustCLIPress </> button to view full sourceimport { Connection, Keypair, LAMPORTS_PER_SOL } from ""@solana/web3.js"";

(async () => {
  const keypair = Keypair.generate();

  const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");

  const signature = await connection.requestAirdrop(
    keypair.publicKey,
    LAMPORTS_PER_SOL
  );
  const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();
  await connection.confirmTransaction({
      blockhash,
      lastValidBlockHeight,
      signature
    });
})();
123456789101112131415161718const airdropSignature = await connection.requestAirdrop(
  keypair.publicKey,
  LAMPORTS_PER_SOL
);

await connection.confirmTransaction(airdropSignature);
123456from solders.keypair import Keypair
from solana.rpc.api import Client

wallet = Keypair()

client = Client(""https://api.devnet.solana.com"")

#Input Airdrop amount in LAMPORTS
client.request_airdrop(wallet.pubkey(), 1000000000)

#Airdrops 1 SOL
1234567891011#Input Airdrop amount in LAMPORTS
client.request_airdrop(wallet.pubkey(), 1000000000)

#Airdrops 1 SOL
1234// clang++ request_airdrop.cpp -o request_airdrop -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  Connection connection(""https://api.devnet.solana.com"");

  auto key_pair = Keypair::generate();

  std::string tx_hash = connection.request_airdrop(key_pair.public_key).unwrap();

  std::cout << ""tx hash = "" << tx_hash << std::endl;

  return 0;
}
1234567891011121314151617connection.request_airdrop(key_pair.public_key).unwrap();
1use solana_client::rpc_client::RpcClient;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::native_token::LAMPORTS_PER_SOL;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let wallet = Keypair::new();
    let pubkey = Signer::pubkey(&wallet);
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
    match client.request_airdrop(&pubkey, LAMPORTS_PER_SOL) {
        Ok(sig) => loop {
            if let Ok(confirmed) = client.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error requesting airdrop""),
    };
}
12345678910111213141516171819202122match client.request_airdrop(&pubkey, LAMPORTS_PER_SOL) {
   ","[-7.36069009e-02  5.38028069e-02 -5.14370538e-02  4.13039476e-02
  1.50249423e-02 -7.01566637e-02  2.88776737e-02 -1.23287691e-02
  8.15718155e-03 -6.55549113e-03 -1.38697075e-02 -4.63746339e-02
  1.28831780e-02  3.91135626e-02  2.82241423e-02  1.93962399e-02
 -6.66109398e-02 -2.01181993e-02 -3.09694204e-02 -3.40788849e-02
  2.69975532e-02  8.72367248e-02  4.05810364e-02 -1.76761597e-02
  4.84523959e-02 -3.39405797e-02  2.13025212e-02 -3.02201007e-02
 -3.86498757e-02  4.45696078e-02  1.25631928e-01  1.33674499e-02
 -3.71407121e-02  4.75309193e-02  7.48102553e-03  1.04204968e-01
 -2.13873833e-02 -1.35434205e-02  3.74145843e-02 -2.04399824e-02
  2.80738920e-02  2.70081088e-02 -4.82824333e-02  3.89066003e-02
  4.98550385e-02 -3.77412103e-02 -1.07015729e-01  5.27382642e-02
 -1.39383003e-02  2.37626936e-02 -2.30725706e-02 -1.77233275e-02
 -7.34060258e-02  7.83060864e-02  8.91149342e-02  1.41435908e-02
 -4.61352877e-02 -4.05635573e-02  3.76899615e-02 -6.72567487e-02
  5.26476540e-02 -7.25022405e-02  5.65875275e-03 -6.89604729e-02
 -6.70908168e-02 -4.65801582e-02 -2.30883341e-02  4.91271615e-02
  2.23230030e-02  8.87803733e-03  4.20505321e-03  3.82755417e-03
 -3.28194536e-02 -8.95314664e-03 -1.90169979e-02  3.26602384e-02
 -1.54414186e-02  6.55267294e-03 -1.63710359e-02  3.93432938e-02
 -1.52090928e-02 -9.83285531e-02 -9.39028058e-03  1.07791036e-01
 -5.73216332e-03  8.87119621e-02 -2.93390993e-02 -8.20939839e-02
 -2.44835746e-02 -3.92638184e-02 -6.62483508e-03 -2.63776165e-02
 -6.58015609e-02  2.65347883e-02  9.28515289e-03  5.59362657e-02
 -3.90499011e-02  1.93936247e-02 -8.52143839e-02  1.26199603e-01
  1.45335514e-02  1.71339344e-02 -2.21331548e-02 -8.73657912e-02
 -5.74024469e-02 -8.98334458e-02  6.94134831e-02  4.77368422e-02
 -1.11093549e-02  2.73431316e-02 -5.77600934e-02 -2.29974254e-03
 -1.97943654e-02  8.39188173e-02  3.75463553e-02  3.44695561e-02
  6.39102161e-02  9.10893902e-02 -2.18235943e-02  3.75876687e-02
  7.23886341e-02  4.24125716e-02 -2.30190717e-02 -5.07665835e-02
 -7.34770596e-02  5.37219411e-03  9.46328193e-02  8.37928005e-33
  7.47797638e-02 -1.90482028e-02 -6.67612776e-02  1.85526256e-02
  8.26172382e-02 -1.03884246e-02 -9.07728542e-03 -3.18234577e-03
 -5.93775027e-02 -6.87223114e-03 -9.75062177e-02  3.81130651e-02
  2.13167705e-02 -1.19181596e-01 -6.09920807e-02 -3.59813273e-02
  4.37020250e-02  4.85785268e-02  8.05142708e-03  4.62615639e-02
  3.50878648e-02 -4.87241521e-02  2.25135684e-02 -6.35088980e-02
 -5.13247307e-03 -5.90402633e-02 -4.80910391e-02  8.78980209e-04
 -1.92456902e-03 -5.24010416e-03 -2.31885910e-02  3.36613879e-02
 -3.47498022e-02  5.72507828e-02  2.63735577e-02 -4.50984836e-02
 -1.06169842e-03 -2.05235500e-02 -1.59431651e-01 -6.39590994e-02
 -6.08842894e-02 -6.24687877e-03 -4.66379449e-02  7.33337104e-02
  2.10386813e-02 -5.73021062e-02 -3.21888737e-02  1.18607851e-02
  6.23608157e-02  4.51675244e-02 -3.86154391e-02  3.19168828e-02
 -3.52681079e-03 -4.45783474e-02  2.36178748e-02 -1.51934074e-02
  7.14131892e-02  2.35966220e-02 -4.76610027e-02 -2.01075692e-02
 -1.03203587e-01 -6.29830640e-03  4.94482778e-02 -6.65154755e-02
  3.07798684e-02  4.34470065e-02 -7.34750777e-02  2.05695536e-02
 -2.92069260e-02 -1.00926068e-02  1.59850512e-02  3.72214913e-02
 -3.69631536e-02  4.38652411e-02 -7.88441375e-02 -6.86974153e-02
  2.89549250e-02  7.18445480e-02 -5.18282726e-02 -3.50761078e-02
  1.04342476e-01 -1.07805133e-02 -5.54868653e-02  1.25045970e-01
  3.78980115e-02  6.37804121e-02 -2.40125298e-03 -8.13461244e-02
 -2.72937920e-02 -2.66452343e-03 -4.21359064e-03  6.29743487e-02
 -2.38110733e-04 -1.35551333e-01  3.35820541e-02 -7.63139528e-33
  4.23327871e-02 -2.26282720e-02 -8.03647116e-02 -4.38206829e-02
 -2.76550389e-04 -8.00595805e-02  3.83335240e-02  3.15367766e-02
  9.19624511e-03  3.00815292e-02  3.34402695e-02 -5.51742390e-02
 -7.76048144e-03 -2.27837879e-02 -3.44275758e-02 -4.06760760e-02
  7.58197457e-02 -2.02862080e-04  1.70536637e-02 -3.54047008e-02
 -8.09410959e-03  7.68757164e-02 -1.98984947e-02 -2.22280156e-02
 -2.02176888e-02  1.34014441e-02  4.67394553e-02  6.90119714e-02
 -5.91539554e-02 -7.67970756e-02  8.66693631e-02 -3.51695605e-02
 -2.78835203e-02  3.90029550e-02 -1.36101656e-02 -2.99782194e-02
  1.92374866e-02  9.93105695e-02 -3.39019136e-03  4.10280004e-03
  1.67271435e-01  8.75605363e-03 -1.33486509e-01  4.97475192e-02
  1.63728986e-02  4.26354585e-03  5.77151105e-02 -3.75931188e-02
 -3.46448533e-02 -3.60339321e-03  7.74799436e-02 -6.75546080e-02
  1.08718434e-02  5.57162128e-02  3.01401410e-02  5.43021746e-02
  3.33495773e-02 -1.45511862e-04  4.04950371e-03 -5.40173315e-02
  1.45603931e-02 -6.14223555e-02  3.91962491e-02  1.24461927e-01
  8.82981420e-02 -1.00995906e-01  9.60147940e-03  4.08418551e-02
  1.80666428e-02 -3.38473618e-02 -1.18063902e-02 -4.82370816e-02
 -3.24341133e-02  3.08813285e-02  1.13991290e-01 -2.74307504e-02
 -8.06965828e-02  1.07573392e-03 -8.20754282e-03  5.89530617e-02
 -5.21889888e-02  3.18772644e-02 -3.63028720e-02  3.43924761e-02
  9.17786881e-02 -6.57648742e-02  3.03041469e-02  8.44472498e-02
 -4.90659699e-02  1.90005754e-03  3.29501145e-02  1.68776643e-02
 -3.55587788e-02  1.28313806e-02  2.83646882e-02 -6.40412949e-08
 -9.33931023e-02 -2.46104337e-02 -7.02731758e-02 -8.50113342e-04
  2.12035179e-02  4.67162095e-02  2.37627700e-03 -8.66662189e-02
 -5.12872562e-02  1.42391529e-02 -1.07544422e-01 -7.07128737e-03
 -5.91595694e-02 -3.60871591e-02  1.71097531e-03 -4.46750931e-02
  5.74657097e-02  1.71525329e-02 -1.64406635e-02 -3.08672171e-02
 -3.51406867e-03 -1.21946055e-02 -2.32111942e-02 -6.30652474e-04
 -8.02391092e-04  3.23258005e-02  6.52946904e-02  7.59932250e-02
 -4.72256308e-03 -6.12485185e-02  1.21058474e-04 -5.35905324e-02
  2.89994534e-02 -3.02169938e-02 -1.20929189e-01  6.31112382e-02
 -1.75691501e-03 -3.18360329e-02  3.67587693e-02  1.01109050e-01
 -1.04774879e-02  7.11056516e-02 -1.03182085e-02  4.93419170e-02
 -3.89648192e-02 -4.53783460e-02  1.57686919e-02  1.26321716e-02
  1.12116657e-01  2.02850513e-02  4.79006767e-03 -7.44392648e-02
  3.69890518e-02 -3.02407648e-02 -5.07681295e-02 -2.34920010e-02
 -2.44356096e-02 -4.04656641e-02 -4.58723828e-02  9.77145806e-02
  3.45778316e-02  1.46170445e-02 -2.96916738e-02  1.93921532e-02]"
"Ok(sig) => loop {
        if let Ok(confirmed) = client.confirm_transaction(&sig) {
            if confirmed {
                println!(""Transaction: {} Status: {}"", sig, confirmed);
                break;
            }
        }
    },
    Err(_) => println!(""Error requesting airdrop""),
};
1234567891011solana airdrop 1

# Return
# ""1 SOL""
1234solana airdrop 1
1# Using Mainnet Accounts and ProgramsOftentimes, local tests rely on programs and accounts available only on mainnet. The Solana CLI allows to both:Download Programs and AccountsLoad Programs and Accounts to a local validator# How to load accounts from mainnetIt is possible to download the SRM token mint account to file:CLIPress </> button to view full source# solana account -u <source cluster> --output <output format> --output-file <destination file name/path> <address of account to fetch>
solana account -u m --output json-compact --output-file SRM_token.json SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt
12solana account -u m --output json-compact --output-file SRM_token.json SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt
1Loading it to your localnet is then done by passing the account's file and destination address (on the local cluster) when starting the validator:CLIPress </> button to view full source# solana-test-validator --account <address to load the account to> <path to account file> --reset
solana-test-validator --account SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt SRM_token.json --reset
12solana-test-validator --account SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt SRM_token.json --reset
1# How to load programs from mainnetSimilarly, it is possible to download the Serum Dex v3 program:CLIPress </> button to view full source# solana program dump -u <source cluster> <address of account to fetch> <destination file name/path>
solana program dump -u m 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin serum_dex_v3.so
12solana program dump -u m 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin serum_dex_v3.so
1Loading it to your localnet is then done by passing the program's file and destination address (on the local cluster) when starting the validator:CLIPress </> button to view full source# solana-test-validator --bpf-program <address to load the program to> <path to program file> --reset
solana-test-validator --bpf-program 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin serum_dex_v3.so --reset
12solana-test-validator --bpf-program 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin serum_dex_v3.so --reset
1 # Feature Parity TestingWhen testing your program, assurances that it will run the same in various clusters is essential to both quality and producing expected outcomes.# FactsFact SheetFeatures are capabilities that are introduced to Solana validators and require activation to be used.Features may be activated in one cluster (e.g. testnet) but not so in another (e.g. mainnet-beta).However; when running default solana-test-validator locally, all available features in your Solana version are automagically activated. The result is that when testing locally, the capabilities and results of your testing may not be the same when deploying and running in a different cluster!# ScenarioAssume you have a Transaction that contained three (3) instructions and each instruction consumes approximately 100_000 Compute Units (CU). When running in a Solana 1.8.x version, you would observe your instruction CU consumption similar to:InstructionStarting CUExecutionRemaining CU1200_000-100_000100_0002200_000-100_000100_0003200_000-100_000100_000In Solana 1.9.2 a feature called 'transaction wide compute cap' was introduced where a Transaction, by default, has a 200_000 CU budget and the encapsulated instructions draw down from that Transaction budget. Running the","[-9.96772498e-02 -5.88140339e-02 -7.26280138e-02  1.14703970e-02
  5.39509580e-02 -1.02373354e-01  6.77375793e-02  4.80791293e-02
 -3.72813419e-02  1.03871552e-02  7.85888433e-02 -2.07300931e-02
 -4.49761972e-02 -1.51885897e-02  2.63750311e-02  3.01871784e-02
 -8.47975835e-02 -7.56332949e-02 -2.20160186e-02 -2.85744481e-02
  1.72413923e-02 -3.66678722e-02 -4.41684276e-02 -3.13355327e-02
 -2.33486500e-02 -3.93905826e-02 -7.45670777e-03 -4.86333203e-03
 -3.12061664e-02  2.04307549e-02  1.04488470e-01  1.34015396e-01
 -5.63792186e-03  1.88733060e-02  2.98943687e-02  4.90894802e-02
  2.32942682e-02  1.98235568e-02  4.60213162e-02 -1.03707500e-01
 -5.78561192e-03  3.31631838e-03 -7.94255361e-02  6.93835225e-03
 -4.75116819e-03 -8.78592059e-02 -1.25222849e-02  5.70649840e-02
 -1.99124552e-02  2.03205533e-02 -7.05266371e-03  2.67891698e-02
 -3.85592096e-02  7.44522810e-02 -2.02968232e-02  1.93340853e-02
  5.07565914e-03 -1.04143182e-02  3.92817371e-02 -1.18036233e-02
 -9.99222416e-03  1.79846659e-02 -4.93301824e-02 -4.17390130e-02
  7.07595842e-04 -2.20136866e-02 -4.92178909e-02  4.66286147e-04
 -1.50685664e-04 -4.47600149e-02  3.11217792e-02 -1.73624102e-02
 -9.74551886e-02  6.52362406e-02 -6.15852810e-02 -1.35237109e-02
  1.04277879e-01  1.71637107e-02 -3.19648832e-02  4.78419363e-02
  3.14344838e-02 -4.07141354e-03  8.86420254e-03  3.66847105e-02
 -6.21236190e-02  5.62610403e-02 -1.82148609e-02 -1.73627790e-02
  3.26224193e-02 -3.39832567e-02  3.92472781e-02 -5.57882572e-03
 -3.41828763e-02 -3.76771316e-02  7.71077424e-02  4.09216955e-02
  4.08477522e-03 -2.97525413e-02 -4.96083014e-02  9.84453037e-02
  3.90897244e-02 -2.59493981e-02  4.89108777e-03 -3.81069258e-02
 -1.88468024e-02 -2.30456349e-02  1.58558324e-01 -7.46098384e-02
  2.96647176e-02  6.33368120e-02 -3.20987143e-02 -9.62191448e-03
  1.36866365e-02 -4.50308174e-02 -1.60561595e-02  5.68555556e-02
 -4.02905308e-02  1.37223631e-01 -5.89445755e-02  3.28458138e-02
 -4.31960300e-02  1.14524148e-01  4.88728434e-02 -5.96630797e-02
  2.97180228e-02  3.27838659e-02 -5.66075742e-02  8.21539998e-33
 -2.24297661e-02 -3.91450673e-02 -5.03976829e-02 -2.58231144e-02
 -8.76869913e-03 -9.37074870e-02  7.60904998e-02 -7.79471314e-03
 -6.38347715e-02 -6.99659297e-03 -7.59469941e-02 -1.75343286e-02
 -1.20846527e-02 -8.58759657e-02  1.59146748e-02  2.49202240e-05
  1.30269667e-02 -2.00647139e-03  7.63492659e-02  5.86240366e-02
 -7.45447678e-03 -1.40705153e-01 -9.69255157e-03 -3.62782832e-03
  6.56967908e-02 -5.45247905e-02 -1.98741201e-02  1.73855871e-02
  1.18814111e-01  7.51476921e-03 -1.55551061e-02 -7.99826998e-03
  6.60222908e-03  3.74601111e-02  9.71059036e-03  3.52459997e-02
 -5.18267788e-02 -4.66567092e-02 -9.96251032e-02 -5.47092967e-02
  1.12466542e-02  3.68624995e-03 -6.92434758e-02  4.67742458e-02
 -1.31945536e-02 -3.06119602e-02 -3.79822962e-02  5.15362769e-02
  7.51269311e-02  2.76627187e-02 -1.21631160e-01 -1.79428775e-02
 -2.15149652e-02 -3.58205512e-02  7.71703348e-02  4.96993251e-02
  2.74745934e-02  1.98324379e-02  7.13385791e-02 -1.12290792e-02
 -1.62904721e-03 -3.41701545e-02 -3.01486403e-02 -2.53439751e-02
 -2.06956882e-02  2.32487395e-02 -9.36483517e-02  2.33933907e-02
  2.99253990e-03  3.50511074e-02 -9.84224677e-02  7.06752464e-02
 -3.15151513e-02  6.21961616e-02  1.65260229e-02 -5.33653237e-02
  2.43995711e-02  5.38427979e-02 -7.33725354e-02 -3.37572210e-02
  6.92669526e-02 -6.02413714e-02 -1.75018925e-02  1.03142440e-01
  1.73053276e-02  6.03982843e-02  2.01281849e-02 -2.63850130e-02
 -6.31075129e-02 -1.01369526e-02  5.19358702e-02 -1.16327661e-03
  2.05016304e-02 -7.93865547e-02 -2.80483868e-02 -7.01478458e-33
 -1.46144193e-05 -1.83394086e-02 -7.85670653e-02 -3.51505466e-02
  1.82775669e-02  2.04863362e-02  9.11733415e-03  8.78974795e-04
 -1.02703519e-01 -2.95686945e-02 -1.07493870e-01  1.70606971e-02
 -2.94202892e-03 -3.43334638e-02 -2.47273110e-02  3.86212324e-03
  1.73985753e-02 -3.10433060e-02  8.31687264e-03  1.25452932e-02
 -1.58342719e-02  5.74655198e-02  3.80854271e-02 -4.82466370e-02
 -6.66209683e-02 -4.42784168e-02  1.96431652e-02  1.05951242e-01
 -4.98150811e-02  1.48543091e-02  1.06005929e-01  3.84194334e-03
 -9.88014415e-02  9.27090049e-02 -3.97649019e-05 -8.31805170e-02
  6.07652329e-02  3.54195759e-02  8.88077542e-03  2.94244643e-02
  5.33939227e-02 -1.21804504e-02 -4.04124521e-02  4.89389040e-02
 -1.12837469e-02  1.24217523e-02  4.70597595e-02  9.10860579e-03
 -9.42868367e-02 -8.91173780e-02  3.65588292e-02 -3.91944423e-02
 -1.49490377e-02  5.37070297e-02  3.89618091e-02  9.30656418e-02
  1.66432574e-01 -1.09159900e-02 -7.23178592e-03 -3.69357355e-02
  2.75658499e-02 -1.07393242e-01 -2.05239234e-03  5.67250326e-02
  3.26361060e-02 -7.48247430e-02  6.39063641e-02  8.20732713e-02
 -3.38483742e-03  3.47255543e-02 -3.34083699e-02 -8.23853761e-02
  5.13293296e-02  2.16162447e-02  4.00366113e-02  8.23321044e-02
 -3.43651734e-02 -1.01500861e-02  1.35586979e-02  1.17154662e-02
 -2.87313201e-03 -9.38006770e-03 -9.80104692e-03  4.63504680e-02
  2.27920860e-02 -4.02035601e-02  4.85926643e-02  2.30436902e-02
 -1.85704604e-02  3.68457325e-02 -4.84845936e-02  1.52854435e-03
  7.03089982e-02  1.59620792e-02 -1.95667353e-02 -5.87166795e-08
 -2.46633366e-02 -5.69723062e-02 -2.03157384e-02  6.74256906e-02
  7.29601411e-03  1.61055624e-01 -3.32883485e-02 -1.07643366e-01
  2.24859249e-02 -1.85972210e-02 -1.04445092e-01 -1.27258543e-02
 -9.15300623e-02  4.90022227e-02  2.82235742e-02 -3.56143638e-02
  4.31408323e-02  3.59389894e-02 -2.00537201e-02 -4.88236919e-02
  3.12956050e-02 -2.27592904e-02 -6.65927492e-03  6.04799688e-02
  1.58111807e-02  1.83486566e-03  2.80469842e-02  8.20184872e-02
  1.92351488e-03 -6.39686659e-02 -7.63222352e-02 -6.45684660e-04
  4.47569601e-02 -3.41363847e-02 -3.14428993e-02  6.66438639e-02
  3.40447612e-02 -9.26872133e-04  2.59455461e-02  7.13037252e-02
  3.91150564e-02  6.28590807e-02 -2.71019787e-02 -2.67234668e-02
 -1.94873791e-02  1.07653800e-03 -4.00373861e-02 -1.80649869e-02
  7.59507045e-02  9.12418682e-03  2.94283424e-02 -6.40684813e-02
  3.89484391e-02  1.50901720e-01  4.36318964e-02  1.54552450e-02
 -7.72085339e-02 -8.89387261e-03  9.54222027e-03  2.92238668e-02
  1.98706836e-02  7.34464228e-02 -3.43379378e-02  1.07690534e-02]"
"same transaction as noted above would have very different behavior:InstructionStarting CUExecutionRemaining CU1200_000-100_000100_0002100_000-100_000030FAIL!!!FAIL!!!Yikes! If you were unaware of this you'd likely be frustrated as there was no change to your instruction behavior that would cause this. In devnet it worked fine, but locally it was failing?!?There is the ability to increase the overall Transaction budget, to lets say 300_000 CU, and salvage your sanity but this demonstrates why testing with Feature Parity provides a proactive way to avoid any confusion.# Feature StatusIt is fairly easy to check what features are enabled for a particular cluster with the solana feature status command.solana feature status -ud   // Displays by feature status for devnet
solana feature status -ut   // Displays for testnet
solana feature status -um   // Displays for mainnet-beta
solana feature status -ul   // Displays for local, requires running solana-test-validator
1234Alternatively, you could use a tool like scfsd to observe all feature state across clusters which would display, partial screen shown here, and does not require solana-test-validator to be running:# Parity TestingAs noted above, the solana-test-validator activates all features automagically. So to answer the question ""How can I test locally in an environment that has parity with devnet, testnet or even mainnet-beta?"".Solution: PRs were added to Solana 1.9.6 to allow deactivation of features:solana-test-validator --deactivate-feature <FEATURE_PUBKEY> ...
1# Simple DemonstrationSuppose you have a simple program that logs the data it receives in it's entry-point. And you are testing a transaction that adds two (2) instructions for your program.# All features activatedYou start the test validator in one terminal:solana config set -ul
solana-test-validator -l ./ledger --bpf-program ADDRESS target/deploy/PROGNAME.so --reset`
12In another terminal you start the log streamer:solana logs
1You then run your transaction. You would see something similar in the log terminal (edited for clarity):Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[1]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 187157 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success[
12345678Because our feature 'transaction wide compute cap' is automatically activated by default, we observe each instruction drawing down CU from the starting Transaction budget of 200_000 CU.# Selective features deactivatedFor this run, we want to run so that the CU budget behavior is in parity with what is running in devnet. Using the tool(s) described in Feature Status we isolate the transaction wide compute cap public key and use the --deactivate-feature on the test validator startupsolana-test-validator -l ./ledger --deactivate-feature 5ekBxc8itEnPv4NzGJtr8BVVQLNMQuLMNQQj7pHoLNZ9 --bpf-program target/deploy/PROGNAME.so --reset`
1We now see in our logs that our instructions now have their own 200_000 CU budget (edited for clarity) which is currently the state in all upstream clusters:Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
12345678# Full Parity TestingYou can be in full parity with a specific cluster by identifying each feature that is not yet activated and add a --deactivate-feature <FEATURE_PUBKEY> for each when invoking solana-test-validator:solana-test-validator --deactivate-feature PUBKEY_1 --deactivate-feature PUBKEY_2 ...
1Alternatively, scfsd provides a command switch","[ 4.66784053e-02 -1.03903636e-01 -1.67917442e-02  1.42903924e-02
  4.93091010e-02 -7.95860663e-02 -4.42068204e-02  1.12245921e-02
 -8.96952301e-02  1.46557055e-02  6.81170374e-02 -6.13539815e-02
 -5.19259647e-02 -7.53034418e-03  5.26456721e-03 -9.55338627e-02
  5.73696531e-02 -7.89842233e-02 -6.80950582e-02  4.89985337e-03
 -1.47362566e-02 -3.78197543e-02 -4.55460846e-02  2.08985414e-02
 -1.41151026e-02  4.09631617e-02 -4.33428679e-03 -3.85678038e-02
  2.09721848e-02 -2.23177839e-02  1.56065756e-02  1.20438725e-01
 -6.36240607e-03  6.76957518e-02  1.25994042e-01  5.15699126e-02
  1.33359293e-02 -1.65668298e-02 -5.98388910e-02 -8.93098414e-02
  1.41354371e-02 -3.61228958e-02 -5.37188724e-02  1.22371148e-02
  6.64949864e-02 -6.53854460e-02 -2.25154459e-02  4.41233031e-02
 -6.13119937e-02 -5.52678332e-02  3.40648815e-02  7.39986524e-02
 -1.11713782e-02  6.94684535e-02  2.01228857e-02  2.15613078e-02
  6.89903274e-02  1.38978725e-02  4.24088053e-02  1.70019623e-02
  2.23561134e-02 -2.24512424e-02 -3.39704454e-02 -5.76867983e-02
  1.89395845e-02 -3.55079677e-03  5.67490384e-02 -9.65839252e-02
 -1.11690918e-02 -4.94625978e-02  1.77480392e-02 -7.75943464e-03
 -3.27821188e-02  5.99236116e-02 -2.46081892e-02  7.82541633e-02
  1.01631165e-01  6.07587816e-03 -2.47633867e-02 -5.49023375e-02
 -7.04809278e-02 -3.77004407e-02  4.68178838e-02  1.68162920e-02
  6.22284040e-03  9.71058942e-03  4.54892311e-03 -2.06674263e-02
  3.11178025e-02 -2.35780794e-03  5.42358309e-02  2.17260662e-02
 -4.94010448e-02 -1.17268048e-01  2.62877066e-02  6.22747056e-02
 -3.61651033e-02 -1.04607210e-01 -1.64142400e-02  4.72857356e-02
  1.77355558e-02 -4.88820765e-03  1.84737425e-02 -5.28403334e-02
  1.93306059e-02  2.23348979e-02  9.24976841e-02 -4.72948439e-02
 -2.06777174e-02  6.14851713e-02  2.61529516e-02  7.93716833e-02
  3.19281891e-02 -6.53526466e-03 -2.29899981e-03  1.55122643e-02
 -3.93140838e-02  1.06206518e-02  2.03396790e-02  2.33648382e-02
  1.64945761e-03  5.10896184e-02  1.07901720e-02 -4.59260866e-03
  3.89526561e-02  7.38768354e-02 -6.62267357e-02  6.58146357e-33
 -1.48757128e-03 -8.54429081e-02 -5.16706370e-02 -3.02626844e-02
 -4.27900348e-03 -4.35121469e-02  5.27567007e-02  4.19732891e-02
 -2.12822482e-02 -3.09362337e-02 -4.07678150e-02 -8.94083083e-03
  1.09119918e-02 -7.12487102e-02 -1.66544621e-03 -2.35038232e-02
  3.25409546e-02  2.81380545e-02 -5.80667611e-03  5.13517633e-02
  2.12628655e-02 -1.15301840e-01 -1.68372113e-02 -8.58765468e-02
  3.44536267e-02 -1.22410189e-02 -5.16477004e-02  1.98445693e-02
  3.33424732e-02  2.24143714e-02 -5.77895492e-02  2.31710449e-02
  4.17254940e-02  4.16154228e-02  1.05988011e-02 -1.39647620e-02
  1.04643842e-02 -9.66511294e-02 -2.15427391e-02 -2.80289836e-02
 -4.67018634e-02  1.60541479e-02 -6.21235892e-02 -2.08260939e-02
  5.64179616e-03  2.60401554e-02 -1.54216148e-04  4.71163681e-03
 -7.02273147e-03  1.66583247e-02 -3.52068692e-02  2.92879511e-02
  3.18636908e-03 -9.90466848e-02 -1.95643231e-02 -4.18840954e-03
  4.40732539e-02 -8.04462880e-02  6.55504838e-02  5.87529652e-02
 -1.03884144e-02 -3.32070477e-02 -7.56475851e-02 -4.01430726e-02
 -4.32463549e-02  4.97477949e-02  1.68051515e-02  5.16570397e-02
 -8.37868021e-04 -2.44503543e-02 -1.04982719e-01  1.66437980e-02
 -3.58753465e-02 -1.80485919e-02  7.85016567e-02 -7.63085634e-02
  1.04519479e-01  2.07173172e-02 -5.59282787e-02 -5.40221073e-02
  1.13507528e-02 -1.92693621e-02  1.15396017e-02  6.09718077e-02
  4.81585264e-02  1.43085895e-02 -1.00221410e-02  1.86600368e-02
 -5.03402613e-02 -3.96437794e-02  8.99451599e-02  2.37776767e-02
  2.76661869e-02 -5.23112603e-02  3.05531602e-02 -6.47159893e-33
 -7.23763630e-02 -5.07504679e-03 -1.02834709e-01  4.05643806e-02
 -6.37900084e-04 -7.81143308e-02 -6.14822730e-02 -5.13883643e-02
 -3.23558189e-02 -7.24351779e-02  1.67539772e-02 -4.85052690e-02
 -5.36476262e-02 -5.68020567e-02 -1.42525375e-01  5.95010296e-02
  4.78127040e-02 -3.37288380e-02  1.36393368e-01  5.90464361e-02
 -1.24872178e-02  1.00299172e-01 -1.03049949e-02 -5.40801091e-03
 -1.06458500e-01 -2.72459760e-02 -7.62113854e-02  5.44797666e-02
 -2.49975976e-02 -2.32355967e-02  9.47794393e-02  1.56166703e-02
 -6.09157421e-02  1.03540465e-01  1.48583911e-02 -5.84856868e-02
 -1.07292356e-02 -3.48952450e-02 -2.97515038e-02  7.21500665e-02
  9.20972452e-02  2.23108623e-02 -8.32721889e-02  1.28803909e-01
 -4.08136398e-02 -2.77174991e-02  6.47606775e-02 -5.11646867e-02
 -4.94314246e-02 -1.56140290e-02  3.96712758e-02 -8.39306414e-03
  7.96110332e-02  9.25955847e-02 -2.24735551e-02  6.51945695e-02
  8.67975280e-02  1.87364481e-02 -6.79585189e-02  4.50362042e-02
  7.65618496e-03 -1.77461002e-02  3.34215979e-03 -3.36603681e-03
  1.21455811e-01 -2.44891923e-02  4.56065983e-02  4.03197743e-02
  4.52809641e-03 -9.73540545e-03 -7.73412967e-03 -3.56783308e-02
 -3.33064497e-02 -5.91720641e-03 -2.44161915e-02  6.83366582e-02
 -5.87121360e-02 -8.80184174e-02  1.77044980e-02  6.02713414e-02
 -4.75507863e-02  4.32360433e-02 -3.19090933e-02  3.98078747e-02
  7.63575500e-03  3.99857387e-02  1.07932684e-03  1.05917059e-01
 -3.04994490e-02  7.99446777e-02 -5.27219176e-02  3.32148955e-03
 -5.00346497e-02  8.41827914e-02  3.00138164e-02 -5.97487215e-08
 -3.06449067e-02 -1.87113751e-02 -1.07937545e-01  2.51798686e-02
  6.10730425e-02  1.46461409e-02  5.59820235e-03  1.19237658e-02
 -2.82655451e-02 -3.10105756e-02 -7.51525164e-02  2.49998434e-03
 -5.41925468e-02 -2.37017218e-02  1.16693787e-01  2.54477351e-03
  3.83046903e-02  3.21469568e-02 -7.91609213e-02 -3.63686308e-02
  2.57849060e-02 -6.42368197e-03  1.62194185e-02  7.95439910e-03
 -6.85325265e-02 -1.58895068e-02  8.98335427e-02  1.25303000e-01
  9.30026581e-04 -1.91443563e-02 -4.00288636e-03 -5.12691028e-02
  3.71492021e-02 -3.12298536e-02  3.65587845e-02  7.04433173e-02
  2.21521556e-02  3.04505769e-02  1.52218506e-01  3.41513827e-02
 -5.49621880e-03  4.43402007e-02 -5.47240674e-02  3.78756560e-02
 -1.93436425e-02  1.63426567e-02 -9.35893208e-02 -1.54500855e-02
  5.34202196e-02 -6.53868765e-02  2.97497632e-03  1.56499445e-02
 -1.84600260e-02  1.21446870e-01  6.59216717e-02  1.80563843e-03
 -3.68729718e-02  4.80527570e-03  1.10951792e-02  5.12305498e-02
  5.54911867e-02  3.58519144e-02 -1.23276003e-02 -2.31920686e-02]"
"to output the complete deactivated feature set for a cluster to feed directly into the solana-test-validator startup:solana-test-validator -l ./.ledger $(scfsd -c devnet -k -t)
1If you open another terminal, while the validator is running, and solana feature status you will see features deactivated that were found deactivated in devnet# Full Parity Testing ProgrammaticallyFor those who control running the test validator within their test code, modifying the test validator activated/deactivated features is possible using TestValidatorGenesis. With Solana 1.9.6 a function has been added to the validator builder to support this.At the root of your program folder, create a new folder called tests and add a parity_test.rs file. Here is the boiler place functions (boiler-plate if you will) used by each testTest Boiler PlatePress </> button to view full source#[cfg(test)]
mod tests {
    use std::{error, path::PathBuf, str::FromStr};

    // Use gadget-scfs to get interegate feature lists from clusters
    // must have `gadgets-scfs = ""0.2.0"" in Cargo.toml [dev-dependencies] to use
    use gadgets_scfs::{ScfsCriteria, ScfsMatrix, SCFS_DEVNET};
    use solana_client::rpc_client::RpcClient;
    use solana_program::{instruction::Instruction, message::Message, pubkey::Pubkey};
    use solana_sdk::{
        // Added in Solana 1.9.2
        compute_budget::ComputeBudgetInstruction,
        pubkey,
        signature::{Keypair, Signature},
        signer::Signer,
        transaction::Transaction,
    };
    // Extended in Solana 1.9.6
    use solana_test_validator::{TestValidator, TestValidatorGenesis};

    /// Location/Name of ProgramTestGenesis ledger
    const LEDGER_PATH: &str = ""./.ledger"";
    /// Path to BPF program (*.so) change if needed
    const PROG_PATH: &str = ""target/deploy/"";
    /// Program name from program Cargo.toml
    /// FILL IN WITH YOUR PROGRAM_NAME
    const PROG_NAME: &str = ""PROGRAM_NAME"";
    /// Program public key
    /// FILL IN WITH YOUR PROGRAM'S PUBLIC KEY str
    const PROG_KEY: Pubkey = pubkey!(""PROGRAMS_PUBLIC_KEY_BASE58_STRING"");
    /// 'transaction wide compute cap' public key
    const TXWIDE_LIMITS: Pubkey = pubkey!(""5ekBxc8itEnPv4NzGJtr8BVVQLNMQuLMNQQj7pHoLNZ9"");

    /// Setup the test validator passing features
    /// you want to deactivate before running transactions
    pub fn setup_validator(
        invalidate_features: Vec<Pubkey>,
    ) -> Result<(TestValidator, Keypair), Box<dyn error::Error>> {
        // Extend environment variable to include our program location
        std::env::set_var(""BPF_OUT_DIR"", PROG_PATH);
        // Instantiate the test validator
        let mut test_validator = TestValidatorGenesis::default();
        // Once instantiated, TestValidatorGenesis configuration functions follow
        // a builder pattern enabling chaining of settings function calls
        let (test_validator, kp) = test_validator
         ","[-4.26542424e-02 -7.54221752e-02 -7.01862425e-02  7.57222325e-02
  7.84554407e-02 -5.53324893e-02 -5.82361594e-02 -1.78055800e-02
 -9.15105492e-02 -3.64296474e-02  4.23740819e-02 -3.61191370e-02
 -1.44822598e-02  1.15338676e-02  2.65462510e-02 -1.51936999e-02
 -4.08216752e-02 -5.92365749e-02  1.40374014e-02 -4.30066325e-02
 -3.37257907e-02 -7.95173645e-02 -8.56197625e-02  5.21128401e-02
  1.52742155e-02  2.04761643e-02 -2.87794564e-02  5.49680367e-03
 -3.61323282e-02  5.18897176e-02  4.46976982e-02  7.70783722e-02
  3.57247442e-02  3.14727761e-02  9.79418680e-02  3.73403989e-02
  4.19741645e-02  8.26020464e-02 -1.48394816e-02 -6.19252622e-02
  5.92405833e-02 -5.73384985e-02 -7.95447081e-02 -7.88691789e-02
  8.03665221e-02 -3.76135185e-02 -6.95925578e-02 -3.85139957e-02
 -9.80408490e-02 -4.89768051e-02  4.97235470e-02  1.31501378e-02
 -2.76824343e-03  4.68656421e-02  2.90905442e-02  8.66990257e-03
  2.86992863e-02  6.20561745e-03  4.12600376e-02 -2.37492658e-02
  1.63100623e-02 -3.85387451e-03  2.22954637e-04 -4.78993729e-02
  3.68185993e-03  2.19777711e-02  1.56629961e-02 -3.29952277e-02
  1.79543495e-02  1.39138298e-02  2.70020161e-02 -2.23793853e-02
  2.17495207e-02 -3.61641906e-02 -1.26540754e-02  7.51220807e-02
  4.21358272e-02 -2.05406919e-03  1.05120147e-04 -3.77339348e-02
 -1.34757319e-02 -3.02040540e-02  4.25733924e-02  8.35710615e-02
 -6.95640966e-02  7.44474605e-02 -8.52856226e-03 -5.21802008e-02
  7.97203779e-02 -1.58860981e-02  5.13276570e-02  5.48955938e-03
 -3.42024975e-02 -3.48414667e-02  1.84184723e-02 -3.02335322e-02
  2.98373085e-02 -4.11746055e-02  2.35443339e-02  7.32654408e-02
 -2.52746195e-02 -7.16058388e-02 -4.57887948e-02 -8.01569223e-02
 -1.34667745e-02  6.57081306e-02  4.73326743e-02 -4.31511067e-02
  4.26236168e-02  2.27396451e-02  4.87810113e-02  6.85731694e-02
  6.03401102e-02 -1.76051334e-02 -1.85845569e-02  4.79645208e-02
  6.92417705e-03  2.94154715e-02 -5.28179407e-02  3.33332829e-02
 -1.01248184e-02  5.58769852e-02  6.54597282e-02 -4.16684188e-02
  4.04197983e-02  6.68620467e-02 -7.50914440e-02  6.27442518e-33
 -2.79281958e-04 -3.18938382e-02  1.80329252e-02 -2.04584934e-02
  1.15801804e-02 -1.11037102e-02  2.36620083e-02  5.60209714e-02
 -7.48355538e-02 -5.92125878e-02 -2.05590613e-02  4.22682166e-02
 -4.89386916e-02 -1.08970188e-01  6.74964162e-03 -1.45636220e-02
  1.54353743e-02 -1.35948006e-02  2.61627845e-02 -2.81630922e-02
  6.02620766e-02 -7.26453215e-02 -1.78814642e-02 -6.72950596e-02
  1.53659005e-02 -3.13899666e-02  3.81932370e-02 -1.27015729e-02
 -1.54223023e-02  1.54530657e-02 -2.50302423e-02  4.14587595e-02
  2.64840797e-02  6.34791777e-02 -2.29432359e-02  2.35155635e-02
 -1.82723831e-02 -2.65827719e-02 -6.34182692e-02  3.46663524e-03
  4.82679121e-02  1.35334348e-02 -1.20859724e-02  2.95778010e-02
 -1.40223289e-02  5.92997717e-03 -3.23648425e-03  3.84714012e-03
  1.15852371e-01 -7.55256880e-03 -9.69065577e-02  7.26510584e-03
  9.45845153e-03 -4.60988991e-02 -4.33026291e-02  1.66412797e-02
  4.67320792e-02 -4.61289138e-02  6.46514967e-02 -1.53719261e-02
 -3.73121537e-02 -2.50058230e-02 -7.31942058e-02 -6.60605915e-03
 -4.04897071e-02  2.15040855e-02 -8.28716308e-02 -2.08429620e-03
  1.01210205e-02 -4.25684415e-02 -8.04748759e-02 -9.17669851e-03
 -7.35006556e-02  1.67886000e-02  3.24664712e-02 -9.09277722e-02
  6.56955466e-02  9.09591764e-02 -1.41216338e-01 -2.19424032e-02
  2.99209915e-02 -8.32424834e-02 -5.32745905e-02  1.00417346e-01
  9.42536741e-02 -7.21053407e-02 -1.24310078e-02 -6.65232986e-02
 -6.62415698e-02 -6.86883330e-02  5.33419959e-02  1.00406837e-02
  5.29684946e-02 -5.47779948e-02 -1.78465378e-02 -4.42752261e-33
 -1.17484205e-05  1.53839365e-02 -1.13839552e-01  5.00877462e-02
  5.93110174e-02 -7.42872506e-02  1.37190809e-02 -1.18085528e-02
 -5.51776029e-02 -1.90560017e-02  5.59610203e-02 -4.38915044e-02
  3.11437920e-02 -2.12278406e-04 -1.72603846e-01  1.14124320e-01
 -1.86683389e-03 -1.40418457e-02  3.01645175e-02 -3.23036462e-02
  2.74473634e-02  3.35037112e-02  5.21306461e-03 -2.30759401e-02
 -7.76389316e-02  9.37760714e-03 -2.50844564e-02  5.87329529e-02
  4.52534622e-03 -1.86216906e-02  5.72257079e-02  3.84901352e-02
 -3.92939523e-02  2.39027441e-02  6.59968005e-03 -3.99411544e-02
 -1.15450043e-02  9.48180817e-03 -4.04494293e-02  6.88640252e-02
  2.91915014e-02  4.43303026e-02 -8.53982270e-02  1.11598462e-01
 -1.89141501e-02  8.76892060e-02  9.23261791e-02 -5.75970933e-02
 -6.13973774e-02 -1.56305041e-02  3.31033692e-02 -4.09790576e-02
  1.27017219e-02  6.50244579e-02  4.22546081e-03 -1.89668767e-03
  9.86873955e-02  7.24620968e-02 -1.22008868e-01  7.03690425e-02
  7.38525838e-02 -2.97492370e-03  5.65157384e-02  6.73331171e-02
  8.69548842e-02 -7.31281638e-02  3.97357419e-02  9.44118053e-02
 -2.45023798e-03 -4.33580279e-02 -4.26555350e-02  8.24673381e-03
 -1.68469008e-02  6.84413388e-02 -9.78631619e-03  2.50297487e-02
 -5.59172593e-02 -4.13730741e-02  3.44672874e-02 -2.24154312e-02
 -2.33367179e-02 -4.07590829e-02  1.45922089e-02  1.38501618e-02
  3.45071517e-02  3.21764243e-03  3.73697355e-02  9.46206003e-02
  1.07759628e-02  1.24797978e-01 -1.66510213e-02  3.47359441e-02
  1.03543224e-02  4.87831123e-02  6.43400534e-04 -4.98814963e-08
 -7.03592300e-02 -1.01520494e-01 -7.92752579e-02  2.84877829e-02
  8.43447354e-03 -1.37191955e-02  5.29180318e-02  3.29380818e-02
 -4.52281907e-02 -9.29122865e-02 -4.32372652e-02 -8.35032202e-03
 -5.58146574e-02 -2.17360351e-02  7.02280551e-02  2.18398422e-02
  7.98516050e-02  1.09213509e-01 -5.61428890e-02 -1.81546714e-02
  1.63284801e-02 -2.33444516e-02 -2.20275149e-02  2.88054384e-02
  3.28899565e-04 -2.78981011e-02 -1.51446124e-03  1.38592292e-02
  1.68062989e-02 -4.78433743e-02 -4.25202921e-02 -3.01047973e-02
  1.02731243e-01 -3.30809597e-03  5.41387722e-02  1.60441697e-01
 -9.59848091e-02  1.00701805e-02  6.23505339e-02  8.14152434e-02
 -2.06178594e-02  1.13913752e-01 -9.58581641e-02 -2.13222858e-02
 -2.97139566e-02 -2.51390245e-02 -6.00036196e-02  1.28194457e-02
  5.50574362e-02 -2.88174246e-02  2.26896442e-02 -1.05826771e-02
  7.09069800e-03  6.35332987e-02  1.32847521e-02  4.12013493e-02
 -5.32544032e-02  5.90451993e-02  1.88835915e-02 -2.91158129e-02
  8.22010040e-02  3.45978662e-02  4.39070798e-02 -1.09269442e-02]"
"  // Set the ledger path and name
            // maps to `solana-test-validator --ledger <DIR>`
            .ledger_path(LEDGER_PATH)
            // Load our program. Ignored if reusing ledger
            // maps to `solana-test-validator --bpf-program <ADDRESS_OR_PATH BPF_PROGRAM.SO>`
            .add_program(PROG_NAME, PROG_KEY)
            // Identify features to deactivate. Ignored if reusing ledger
            // maps to `solana-test-validator --deactivate-feature <FEATURE_PUBKEY>`
            .deactivate_features(&invalidate_features)
            // Start the test validator
            .start();
        Ok((test_validator, kp))
    }

    /// Convenience function to remove existing ledger before TestValidatorGenesis setup
    /// maps to `solana-test-validator ... --reset`
    pub fn clean_ledger_setup_validator(
        invalidate_features: Vec<Pubkey>,
    ) -> Result<(TestValidator, Keypair), Box<dyn error::Error>> {
        if PathBuf::from_str(LEDGER_PATH).unwrap().exists() {
            std::fs::remove_dir_all(LEDGER_PATH).unwrap();
        }
        setup_validator(invalidate_features)
    }

    /// Submits a transaction with programs instruction
    /// Boiler plate
    fn submit_transaction(
        rpc_client: &RpcClient,
        wallet_signer: &dyn Signer,
        instructions: Vec<Instruction>,
    ) -> Result<Signature, Box<dyn std::error::Error>> {
        let mut transaction =
            Transaction::new_unsigned(Message::new(&instructions, Some(&wallet_signer.pubkey())));
        let recent_blockhash = rpc_client
            .get_latest_blockhash()
            .map_err(|err| format!(""error: unable to get recent blockhash: {}"", err))?;
        transaction
            .try_sign(&vec![wallet_signer], recent_blockhash)
            .map_err(|err| format!(""error: failed to sign transaction: {}"", err))?;
        let signature = rpc_client
            .send_and_confirm_transaction(&transaction)
            .map_err(|err| format!(""error: send transaction: {}"", err))?;
        Ok(signature)
    }
    // UNIT TEST FOLLOWS
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192/// Setup the test validator passing features
/// you want to deactivate before running transactions
pub fn setup_validator(
    invalidate_features: Vec<Pubkey>,
) ->","[-3.77387553e-02  2.24699751e-02 -9.38069671e-02 -4.90085334e-02
 -1.01996893e-02 -9.68350321e-02 -2.12475229e-02 -1.33187324e-02
 -2.30448488e-02  2.44537415e-03  4.76209894e-02 -6.83355406e-02
 -2.83409376e-02  1.32846395e-02  4.91636917e-02  3.29516940e-02
 -2.76655275e-02  6.89224713e-03  4.12080362e-02  6.56984597e-02
 -1.74877327e-02 -3.76940370e-02 -1.24181202e-02  1.85180716e-02
 -6.51316568e-02 -5.47236279e-02 -6.80178478e-02  6.09215423e-02
 -5.73358983e-02 -2.00623814e-02  9.84873027e-02  6.55153617e-02
 -5.86222708e-02 -2.33880104e-03  1.05362952e-01  1.46352962e-01
  9.81120951e-03  4.42080311e-02 -4.04673740e-02 -6.58527240e-02
  5.12348637e-02 -8.20458680e-03 -5.82388118e-02 -6.71295598e-02
  7.60281086e-02 -6.10456504e-02 -8.05801991e-03 -2.86849290e-02
 -1.99657679e-02 -5.36112413e-02 -2.83833724e-02  3.90510634e-02
 -4.36499938e-02  1.79283004e-02  2.23719291e-02  6.15703948e-02
  1.02826385e-02  3.17346416e-02  6.12952709e-02 -5.69498679e-03
  4.18036543e-02  4.97739427e-02  3.44926044e-02 -3.40228304e-02
 -4.73781712e-02  1.75655577e-02 -1.12224780e-02 -4.05431613e-02
  1.52407289e-02  5.45977391e-02 -4.99202404e-03 -4.04107012e-02
 -5.60222231e-02 -6.92202002e-02 -2.59408890e-03 -3.50986724e-03
 -1.40842944e-02 -1.15761987e-03 -1.01916790e-02 -1.36782214e-01
 -1.00600254e-02 -1.14129083e-02  2.45914049e-02  1.78384017e-02
 -4.07995805e-02  5.55180274e-02 -1.60274971e-02 -1.10781014e-01
  1.44055024e-01 -1.15833841e-02  1.14261895e-01 -2.73083355e-02
 -2.61269603e-02 -1.17311981e-02  7.26690814e-02 -4.75129969e-02
  3.42165828e-02  2.17950400e-02 -5.15778968e-03  1.18646219e-01
  3.41144539e-02 -6.34645894e-02 -2.75530424e-02 -3.13723050e-02
 -5.09484485e-03  4.27385233e-02  2.95213554e-02 -1.62321310e-02
 -5.76283485e-02  3.77982371e-02  3.89804989e-02  3.56817544e-02
  6.18482791e-02  5.44295134e-03 -2.34735012e-02  1.14997238e-01
 -5.50161824e-02  3.14649343e-02 -5.97881489e-02  7.46166334e-02
  1.34632550e-02 -1.06597859e-02  7.38692060e-02 -5.64067774e-02
 -5.71758896e-02  8.25475007e-02 -2.97379028e-02  1.03973091e-33
  1.09308977e-02 -5.60364164e-02  5.11698090e-02 -3.12454067e-03
  1.09283268e-01 -3.04764062e-02  4.37123962e-02  6.38489127e-02
 -8.31412897e-02 -2.19748933e-02  6.32053381e-03 -3.47222649e-02
 -1.08443610e-01 -6.45348579e-02 -3.00068147e-02 -2.92273089e-02
 -5.55314906e-02 -6.85329316e-03  2.99819764e-02 -3.74561064e-02
  8.10455307e-02 -6.97331950e-02 -5.10038063e-02 -8.97566527e-02
  9.37158708e-03  2.24828981e-02 -6.68046484e-03  1.24186659e-02
  2.75603626e-02  2.14665364e-02  2.12914348e-02  1.65136438e-02
  3.81338224e-03  5.90879060e-02  3.07249633e-04  3.31797302e-02
 -4.77365963e-02  1.23460451e-02 -1.03405982e-01 -4.65836339e-02
  5.27567416e-02  3.83150065e-03 -1.03265736e-02  1.46126118e-03
  4.21172082e-02 -2.85677556e-02  3.42718139e-02  7.54424185e-02
  9.22936648e-02  4.81568687e-02 -4.61617224e-02 -3.56978290e-02
 -1.57483537e-02 -6.68226480e-02 -1.09048292e-01 -2.25221384e-02
 -4.43770848e-02 -4.22100946e-02 -7.57940765e-03  1.30005588e-04
 -4.45693024e-02  1.55955357e-02 -3.29407305e-02  2.39161495e-03
 -1.69026554e-02  4.08483446e-02 -3.86996828e-02  3.59347835e-02
 -9.66991484e-03 -7.71761611e-02 -1.12416120e-02 -5.70311658e-02
  3.41316089e-02  3.58413905e-02  4.91829813e-02 -5.16546629e-02
  9.32346936e-03  7.56162554e-02 -1.35383636e-01 -5.47134317e-02
  3.99982650e-03 -8.40394758e-03 -8.41935202e-02  9.09713954e-02
  1.02575189e-02 -1.44705856e-02  4.99822944e-03 -2.92694476e-02
 -2.70579606e-02 -2.23581772e-02  4.49000187e-02  3.24257426e-02
  3.89122479e-02 -1.81391276e-02 -4.81071621e-02 -3.10206714e-33
  7.07450276e-03 -3.06715425e-02 -2.04711184e-02 -2.14520302e-02
  2.50810739e-02 -3.30997556e-02  4.40802351e-02 -2.34914012e-02
 -2.98200734e-02 -2.80800387e-02 -5.13883831e-04 -3.90188619e-02
  6.87952340e-02 -5.50771924e-03 -9.10754651e-02  6.40443712e-02
 -7.21892789e-02  1.88340358e-02 -4.42409329e-02  1.60148721e-02
  2.57458817e-02  7.57382587e-02 -2.07020193e-02  1.15455091e-01
 -5.50797246e-02 -1.79373845e-02 -1.14212930e-03  8.41048062e-02
  1.92145240e-02 -1.90501567e-02  9.70845744e-02  4.35641445e-02
 -7.96761513e-02 -5.64412028e-03  8.24012421e-03 -7.29056969e-02
 -7.53015885e-03 -1.54686603e-03 -5.65109290e-02  8.17209706e-02
  6.27770498e-02  2.18952689e-02 -1.04509316e-01  1.42821553e-03
  1.34740798e-02  6.83943480e-02  1.07218884e-01 -3.84935923e-02
 -2.20725536e-02 -5.67975678e-02  1.56538002e-02 -3.55845280e-02
 -3.52071860e-04 -1.09363785e-02 -9.75676626e-03  1.56429455e-01
  1.17713757e-01  1.20971866e-01 -5.68603612e-02  2.74308398e-02
  1.54759856e-02 -2.41486207e-02  4.23089713e-02  6.39927313e-02
  8.10154155e-02 -8.53794217e-02  6.42982917e-03  7.47011453e-02
  3.79142910e-02 -5.25268614e-02 -5.79233542e-02  7.20745474e-02
 -2.05838662e-02 -3.98650486e-03  2.21150294e-02  2.90416554e-02
 -4.45631035e-02 -8.54786113e-02  8.46632104e-03 -3.62669677e-02
 -3.18688378e-02 -5.33172153e-02  2.20569670e-02 -2.74339411e-02
 -4.69832420e-02 -1.58029404e-02  3.72590162e-02  1.37287832e-03
 -2.73166783e-02  6.52281195e-02  9.87158995e-03  3.85422353e-03
 -3.91942598e-02  3.42847668e-02 -4.67284583e-02 -4.61894523e-08
 -3.51145188e-03 -6.96188435e-02 -6.77217692e-02  1.94322448e-02
 -2.04745922e-02 -2.81597842e-02  8.69485140e-02  2.90866066e-02
 -5.07234223e-02 -9.70835760e-02 -1.87217481e-02  4.42891605e-02
 -8.01765174e-02 -3.58004542e-03 -3.16039324e-02 -7.51605928e-02
  2.35886183e-02  9.00472626e-02 -5.01738079e-02 -4.42041084e-02
  3.88876125e-02 -4.11773808e-02 -4.12961980e-03  1.60675719e-02
  3.33138853e-02 -7.67532662e-02  5.39228655e-02  3.08003761e-02
  4.81466912e-02 -3.32677513e-02 -1.03158457e-02 -3.74873094e-02
  6.98218569e-02  4.31011058e-02 -5.33470931e-03  9.43309441e-02
 -2.48217005e-02 -1.86566208e-02  3.52312662e-02  9.36372355e-02
 -5.88028086e-03  8.50189850e-02 -3.14505808e-02 -4.94824946e-02
 -4.79794703e-02 -4.60746884e-02 -6.07213154e-02  5.02326488e-02
  6.57659620e-02  1.42983953e-02 -8.12157243e-03  3.29471827e-02
  5.20396978e-04  4.48927458e-04  4.11588289e-02  1.10169332e-02
 -6.42660260e-02  7.22744018e-02 -5.10644689e-02 -1.11975800e-02
  1.02372855e-01  9.90940825e-05  5.94402254e-02 -3.29818539e-02]"
"Result<(TestValidator, Keypair), Box<dyn error::Error>> {
    // Extend environment variable to include our program location
    std::env::set_var(""BPF_OUT_DIR"", PROG_PATH);
    // Instantiate the test validator
    let mut test_validator = TestValidatorGenesis::default();
    // Once instantiated, TestValidatorGenesis configuration functions follow
    // a builder pattern enabling chaining of settings function calls
    let (test_validator, kp) = test_validator
        // Set the ledger path and name
        // maps to `solana-test-validator --ledger <DIR>`
        .ledger_path(LEDGER_PATH)
        // Load our program. Ignored if reusing ledger
        // maps to `solana-test-validator --bpf-program <ADDRESS_OR_PATH BPF_PROGRAM.SO>`
        .add_program(PROG_NAME, PROG_KEY)
        // Identify features to deactivate. Ignored if reusing ledger
        // maps to `solana-test-validator --deactivate-feature <FEATURE_PUBKEY>`
        .deactivate_features(&invalidate_features)
        // Start the test validator
        .start();
    Ok((test_validator, kp))
}

/// Convenience function to remove existing ledger before TestValidatorGenesis setup
/// maps to `solana-test-validator ... --reset`
pub fn clean_ledger_setup_validator(
    invalidate_features: Vec<Pubkey>,
) -> Result<(TestValidator, Keypair), Box<dyn error::Error>> {
    if PathBuf::from_str(LEDGER_PATH).unwrap().exists() {
        std::fs::remove_dir_all(LEDGER_PATH).unwrap();
    }
    setup_validator(invalidate_features)
}

/// Submits a transaction with programs instruction
/// Boiler plate
fn submit_transaction(
    rpc_client: &RpcClient,
    wallet_signer: &dyn Signer,
    instructions: Vec<Instruction>,
) -> Result<Signature, Box<dyn std::error::Error>> {
    let mut transaction =
        Transaction::new_unsigned(Message::new(&instructions, Some(&wallet_signer.pubkey())));
    let recent_blockhash = rpc_client
        .get_latest_blockhash()
        .map_err(|err| format!(""error: unable to get recent blockhash: {}"", err))?;
    transaction
        .try_sign(&vec![wallet_signer], recent_blockhash)
        .map_err(|err| format!(""error: failed to sign transaction: {}"", err))?;
    let signature = rpc_client
        .send_and_confirm_transaction(&transaction)
        .map_err(|err| format!(""error: send transaction: {}"", err))?;
    Ok(signature)
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657We can now add test functions in the body of mod test {...} to demonstrate default validator setup (all features enabled) and then disabling the transaction wide compute cap as per previous examples running solana-test-validator from the command line.All Features TestDisable Tx CU Test#[test]
fn test_base_pass() {
    // Run with all features activated (default for TestValidatorGenesis)
    let inv_feat = vec![];
    // Start validator with clean (new) ledger
    let (test_validator, main_payer) = clean_ledger_setup_validator(inv_feat).unwrap();
    // Get the RpcClient
    let connection = test_validator.get_rpc_client();
    // Capture our programs log statements
    solana_logger::setup_with_default(""solana_runtime::message=debug"");

    // This example doesn't require sending any accounts to program
","[-4.13653255e-02  1.98353026e-02 -6.70272186e-02 -8.64417572e-03
 -3.89757380e-02 -8.17665681e-02 -8.03443603e-03  4.31341790e-02
 -2.66995095e-02 -1.22277541e-02  5.48364744e-02 -8.66970420e-02
 -4.17145640e-02 -2.10833326e-02  6.43718541e-02  5.34334108e-02
 -2.64023934e-02 -4.72373702e-03 -1.03989830e-02  4.38842922e-02
  5.05593158e-02 -3.69467176e-02  2.38321219e-02  1.34066427e-02
 -8.11530799e-02 -6.65814728e-02 -6.20409735e-02  3.57281193e-02
 -1.04452427e-02 -8.18302855e-03  1.10214539e-01  6.58274740e-02
 -8.45137313e-02  2.73157079e-02  1.14278466e-01  1.76825717e-01
  5.01709916e-02  1.59125980e-02 -6.72802702e-02 -3.41477282e-02
  2.24642251e-02  1.69277061e-02 -4.69629243e-02 -4.29742336e-02
  3.01776417e-02 -6.69715032e-02  8.19556788e-03 -3.45162973e-02
 -5.91503009e-02 -9.67383236e-02 -3.59524116e-02  4.26218212e-02
 -1.47323506e-02 -3.48534342e-03  3.45657468e-02  6.03452548e-02
  2.49760002e-02 -6.86009228e-03  8.45371708e-02 -2.76809838e-02
  3.52355167e-02  2.99136005e-02  5.66329695e-02 -4.76466194e-02
 -2.92227957e-02 -2.07168586e-03 -1.00006666e-02  5.75386873e-03
 -1.18246640e-03 -5.10670803e-03  3.09540913e-03 -5.04460856e-02
 -2.43760794e-02 -2.83024814e-02  2.28597480e-03  2.98010447e-04
 -3.69960703e-02 -2.79022008e-02  1.58796348e-02 -1.29863918e-01
 -2.86062006e-02  2.19931570e-03  3.43440869e-03  2.84319166e-02
  4.83987760e-03  5.74835241e-02  1.86435282e-02 -7.98365548e-02
  1.38709217e-01 -1.82477257e-03  9.99437198e-02 -7.48228356e-02
 -6.42208681e-02 -8.33886396e-03  7.56914318e-02 -5.63004101e-03
  1.55005995e-02 -2.47567426e-02  2.10970510e-02  7.71207809e-02
 -1.36878192e-02 -3.97430845e-02 -1.65416580e-02 -3.26726623e-02
 -1.03471242e-02  2.05443054e-03  2.75734197e-02 -2.90806405e-02
 -7.91061074e-02  2.54004821e-02  3.81434932e-02  6.73876703e-02
  8.26168284e-02  2.39879806e-02  1.11254081e-02  8.91214237e-02
 -5.81179187e-02  2.97956890e-03 -3.38822836e-03  8.72321576e-02
  3.17995735e-02 -2.57034134e-02  4.40318882e-02  1.09573361e-02
 -3.73358391e-02  4.79033664e-02 -5.05755143e-03  3.31129779e-33
  4.42333333e-03 -1.12480126e-01  3.26963514e-02  1.71076097e-02
  6.24067001e-02 -1.98281184e-03  4.04060744e-02  7.78125674e-02
 -1.08960249e-01 -2.82291509e-02 -1.99306058e-03 -5.85281588e-02
 -1.16822630e-01 -2.94932071e-02 -2.07703467e-02 -2.85472441e-02
 -6.14813119e-02  9.87176783e-04  2.66573802e-02 -2.77439281e-02
  6.50267676e-02 -5.96914999e-02 -5.50591275e-02 -5.29992320e-02
  3.21084494e-03 -1.92981288e-02  1.28228972e-02  2.05064267e-02
  4.48466465e-02  5.69380261e-03  3.78144979e-02 -2.55050305e-02
  1.73046030e-02  8.99212584e-02 -5.26210433e-03  6.16528429e-02
 -4.77746092e-02  5.89404367e-02 -1.33566737e-01 -1.30758379e-02
  4.51164320e-02 -7.40088848e-03  4.47947765e-03  1.31794885e-02
  2.36629602e-02 -4.29608114e-02  3.57340872e-02  5.84203228e-02
  9.23810974e-02  1.93381421e-02 -6.55386522e-02  1.24893421e-02
 -2.03703288e-02 -5.02973013e-02 -5.73112965e-02 -1.22375637e-02
 -3.34656648e-02 -6.89324141e-02 -1.23665696e-02  1.31346211e-02
 -8.83780047e-02  5.00273854e-02 -3.95323597e-02  1.26331402e-02
 -2.15828419e-03  8.50772951e-03 -5.43351471e-02 -2.07724422e-02
  1.44108282e-02 -2.70373411e-02 -9.57425218e-03 -3.72006223e-02
 -8.82534962e-03  5.24903834e-02  5.85661568e-02 -5.17347194e-02
 -3.72074619e-02  6.53311536e-02 -1.40926868e-01 -9.78103057e-02
 -1.40560493e-02  2.05381457e-02 -1.20289721e-01  1.38082415e-01
  4.16428484e-02 -3.15754563e-02 -3.67179178e-02 -4.87667993e-02
 -4.42925841e-02 -1.34157119e-02  3.52861807e-02 -3.81835774e-02
  2.56525557e-02 -3.66403349e-02 -8.24702680e-02 -4.85582390e-33
  2.16479897e-02 -4.13835347e-02  3.18814293e-02 -2.08418723e-02
  3.34560610e-02  5.50360791e-03  3.90828140e-02 -4.76424731e-02
 -3.06212660e-02 -2.26305183e-02 -5.11989407e-02  2.91577308e-03
  5.80592304e-02  2.71514058e-02 -1.07876144e-01  7.57819042e-02
 -8.36848095e-02 -2.01938357e-02 -1.75948683e-02  2.45536305e-02
  1.83398053e-02  8.48873705e-02  8.70297104e-03  1.07863106e-01
 -7.65265226e-02  2.45828964e-02 -8.50185868e-04  8.63786042e-02
  2.83748135e-02 -5.85367531e-03  6.00063801e-02  6.10167198e-02
 -9.60187316e-02  3.27385925e-02 -9.59810615e-03 -8.28722939e-02
  2.28032656e-02 -2.47298889e-02 -5.33405356e-02  6.98803291e-02
  4.47582006e-02  5.47931492e-02 -9.08881500e-02  2.69579906e-02
  2.26701540e-03  1.06523253e-01  9.89391953e-02 -4.73246574e-02
 -2.66812998e-03 -5.76281622e-02  1.46223931e-02 -3.90937924e-02
 -3.10155395e-02 -4.05950472e-03 -5.08182356e-03  1.32575929e-01
  4.53434624e-02  7.60715082e-02 -5.67151867e-02  3.99678834e-02
 -5.93502168e-03 -3.29300798e-02  9.69046652e-02  2.19954569e-02
  2.90470086e-02 -7.34063387e-02 -3.73675232e-03  3.29144821e-02
  6.85594976e-02 -4.52958718e-02 -4.59301546e-02  5.72405830e-02
 -1.72739625e-02 -3.17893401e-02  1.67009812e-02  3.03421058e-02
 -4.60104421e-02 -1.04433157e-01  7.14862868e-02 -9.78650805e-03
 -5.47638647e-02 -2.38299090e-02 -6.27192378e-04 -3.09783872e-02
 -3.21600214e-02 -1.78877395e-02  5.90054393e-02  2.77565680e-02
 -9.88321099e-03  5.79737090e-02  2.52807587e-02  2.85595246e-02
 -6.66564107e-02  5.51530626e-03 -4.84760478e-02 -5.51980293e-08
 -1.32199051e-02 -6.99481368e-02 -7.47066811e-02  1.97545346e-02
 -5.13160713e-02 -5.50353788e-02  1.16436698e-01 -2.42062211e-02
 -3.83612216e-02 -5.63469045e-02 -6.86334120e-03  2.89413054e-02
 -7.18573555e-02  6.58233941e-04 -2.53453217e-02 -8.27627033e-02
  1.03557277e-02  8.18187520e-02 -5.54466471e-02 -2.84782480e-02
  7.95439258e-02 -2.51948182e-02 -1.22480569e-02  5.52207604e-02
  3.36999446e-02 -5.10997921e-02  5.09803928e-02  1.84122622e-02
  6.99593127e-02 -1.70379765e-02  5.78206293e-02 -8.70289095e-03
  6.13085590e-02  6.66793957e-02 -1.31072253e-02  7.24761263e-02
 -2.61354987e-02 -1.02152256e-02  7.95189068e-02  1.03678346e-01
 -1.23307928e-02  5.51388450e-02 -2.86176223e-02 -2.28123032e-02
 -1.72877945e-02 -5.28800525e-02 -8.09475034e-02  5.45987785e-02
  4.48460393e-02  3.04484591e-02 -1.99532527e-02  8.27820739e-04
 -1.01133585e-02  8.83791782e-03  1.87460110e-02 -9.24310065e-04
 -3.28452140e-02  2.10503377e-02 -4.74582501e-02 -9.54451691e-03
  6.35503158e-02 -1.90250482e-02  4.21975963e-02 -5.86762233e-03]"
"   let accounts = &[];
    // Build instruction array and submit transaction
    let txn = submit_transaction(
        &connection,
        &main_payer,
        // Add two (2) instructions to transaction to demonstrate
        // that each instruction CU draws down from default Transaction CU (200_000)
        // Replace with instructions that make sense for your program
        [
            Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
            Instruction::new_with_borsh(PROG_KEY, &1u8, accounts.to_vec()),
        ]
        .to_vec(),
    );
    assert!(txn.is_ok());
}
12345678910111213141516171819202122232425262728#[test]
fn test_deactivate_tx_cu_pass() {
    // Run with all features activated except 'transaction wide compute cap'
    let inv_feat = vec![TXWIDE_LIMITS];
    // Start validator with clean (new) ledger
    let (test_validator, main_payer) = clean_ledger_setup_validator(inv_feat).unwrap();
    // Get the RpcClient
    let connection = test_validator.get_rpc_client();
    // Capture our programs log statements
    solana_logger::setup_with_default(""solana_runtime::message=debug"");

    // This example doesn't require sending any accounts to program
    let accounts = &[];
    // Build instruction array and submit transaction
    let txn = submit_transaction(
        &connection,
        &main_payer,
        [
            // This instruction adds CU to transaction budget (1.9.2) but does nothing
            // when we deactivate the 'transaction wide compute cap' feature
            ComputeBudgetInstruction::request_units(400_000u32),
            // Add two (2) instructions to transaction
            // Replace with instructions that make sense for your program
            // You will see that each instruction has the 1.8.x 200_000 CU per budget
            Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
            Instruction::new_with_borsh(PROG_KEY, &1u8, accounts.to_vec()),
        ]
        .to_vec(),
    );
    assert!(txn.is_ok());
}
12345678910111213141516171819202122232425262728293031Alternatively, the scfs engine gadget can produce a full vector of deactivated features for a cluster. The following demonstrates using that engine to get a list of all deactivated features for devnet.Devnet Parity#[test]
fn test_devnet_parity_pass() {
    // Use gadget-scfs to get all deactivated features from devnet
    // must have `gadgets-scfs = ""0.2.0"" in Cargo.toml to","[-3.89893390e-02  1.39190946e-02 -8.24257582e-02 -1.25554185e-02
 -3.65211554e-02 -7.45395571e-02  3.65556367e-02  2.51569245e-02
 -6.32159039e-02  1.65784974e-02  6.56360388e-02 -1.84111539e-02
  2.09846860e-03 -3.82318981e-02 -2.10396238e-02 -3.67655456e-02
 -1.51165770e-02 -1.96984373e-02  1.55457587e-03 -2.14487482e-02
  1.64588224e-02 -1.04126148e-02  2.22001038e-02  9.33145508e-02
 -6.76474497e-02 -2.03752387e-02  4.88808053e-03  5.27130626e-02
  1.53048793e-02 -1.03528939e-01  8.86236355e-02  3.40408944e-02
 -2.08824389e-02  4.44360115e-02  3.75684835e-02  4.49304394e-02
  4.59733512e-03  1.05555272e-02 -3.51703875e-02 -6.76816478e-02
 -4.86879200e-02 -2.60295980e-02 -4.25751582e-02  5.45895584e-02
  6.13622144e-02  1.24279717e-02  2.72090230e-02  1.65628381e-02
  5.83383301e-03 -3.02219857e-02  1.51384203e-02  1.72713064e-02
 -5.28769940e-03 -3.03411065e-03 -2.89539490e-02 -4.13070656e-02
  3.80343869e-02 -9.30454731e-02  5.94350547e-02  3.46766002e-02
 -8.07974394e-03  3.10561806e-02  5.49709145e-03 -7.16705108e-03
 -3.30665410e-02  5.45853972e-02  3.69456932e-02  1.55959921e-02
 -3.93225551e-02  6.22642599e-02  2.22746911e-03 -7.21201394e-03
 -1.24847159e-01  4.35048975e-02 -6.23276010e-02  4.52822186e-02
 -1.79259479e-02 -2.83882916e-02 -3.69262882e-03 -4.45156135e-02
 -4.49155308e-02 -3.39731015e-02  3.99057269e-02 -2.91860346e-02
 -2.20891368e-02  5.00564650e-03 -7.02794222e-03 -2.70932131e-02
  7.55554810e-02 -2.40073930e-02  9.24616158e-02  7.59877041e-02
 -4.46167514e-02 -7.57520199e-02  6.23361580e-02  2.97706574e-03
  3.71990092e-02 -3.72830704e-02  2.44410262e-02  5.11018597e-02
  1.07151857e-02  4.89077717e-03  1.94962230e-02 -4.19294350e-02
  2.90052649e-02  3.31050903e-02  1.24256395e-01  6.53320458e-03
 -3.43280435e-02 -6.11326136e-02  8.77273679e-02  9.03771445e-02
  6.45120069e-02  2.13842001e-02  6.31531281e-03  1.04348861e-01
 -5.41201569e-02  1.46285202e-02 -1.03778951e-02  1.49239004e-02
  2.25174278e-02  8.86598453e-02 -7.05953911e-02  2.73955744e-02
 -8.61027241e-02 -5.37437736e-04 -2.47811694e-02  5.11737286e-33
 -5.18282950e-02 -2.15639770e-02 -1.13964118e-02  7.84795918e-03
  3.29802861e-03  3.29476856e-02  4.15190607e-02  6.68072999e-02
 -1.00905217e-01  8.97892490e-02 -4.06745635e-02 -1.22729748e-01
  1.79107729e-02  1.09002255e-02  4.78699617e-02 -8.73445123e-02
 -8.57574306e-03  2.53738109e-02  7.93053508e-02  4.51188982e-02
  7.83645287e-02 -6.25118315e-02 -2.05897670e-02 -5.81829436e-02
 -5.25469240e-03  1.57897715e-02 -7.35718235e-02 -1.33569008e-02
 -1.41597996e-02 -1.87809896e-02 -5.86718367e-03  1.29493149e-02
  1.01294769e-02  4.94039431e-02  2.58640423e-02 -6.16518669e-02
  2.23883102e-03 -1.72891337e-02  1.63236205e-02 -1.68842375e-02
  3.88016179e-02  2.28247643e-02 -3.67260873e-02  7.09480792e-03
 -1.54336896e-02  7.42099620e-03 -8.86614376e-04  4.62402850e-02
  5.80087602e-02  4.40082401e-02 -5.27214538e-03  1.40088657e-02
 -3.05568278e-02 -9.93275642e-02  4.81956080e-03  6.48676045e-03
  2.39867717e-02 -2.99911797e-02  7.17111072e-03  1.12312466e-01
 -8.77155922e-03  2.06984226e-02 -1.08016036e-01  4.63805720e-03
 -8.18104893e-02 -2.31765267e-02 -5.79969734e-02  1.72229409e-02
 -2.45132972e-03 -1.26492288e-02 -5.89667559e-02  1.53076537e-02
  1.72323212e-02 -2.87221577e-02 -8.21616501e-03 -3.63332592e-02
  2.08976455e-02 -1.56673752e-02 -3.93780693e-02 -7.19940066e-02
  2.31783595e-02  4.95169908e-02 -3.97388935e-02  6.39649406e-02
  2.03056075e-02  5.38108908e-02 -4.91997674e-02 -2.63782474e-03
  4.21858946e-04  1.32254055e-02 -2.68455744e-02 -4.63656746e-02
  5.63028306e-02 -9.16640982e-02  2.52298806e-02 -5.65219340e-33
  2.54030805e-02 -1.67392008e-03 -2.28246711e-02  7.57054836e-02
 -2.67226220e-04 -9.35734017e-04  9.76822972e-02 -1.52814947e-02
 -3.45841807e-04 -5.67094162e-02 -2.48264167e-02 -5.50877303e-03
 -1.84327196e-02  1.00422138e-02  4.55552004e-02 -8.98173451e-02
 -1.19460374e-01  6.05324283e-02 -7.48152379e-03  4.24361378e-02
  1.18582165e-02  8.29384178e-02  4.72353324e-02  3.81009169e-02
 -6.50164345e-03  1.23486398e-02 -6.56276941e-02  1.27799124e-01
  4.33719531e-02  8.14029202e-02 -3.92787042e-04 -1.68348160e-02
  1.31747983e-02  1.23044848e-01  1.48808723e-02 -1.29066512e-01
  9.76065323e-02  7.37427101e-02  2.78522018e-02  5.55592403e-02
  1.02300890e-01 -3.61248665e-03 -9.23689231e-02  3.67990956e-02
  1.56580529e-03  8.20140615e-02  2.54275324e-03 -3.82847153e-02
 -1.57717653e-02 -1.95434708e-02 -4.06018570e-02 -6.27281964e-02
 -3.53195518e-03  5.07085286e-02 -4.41850983e-02  1.08987316e-02
  1.16831616e-01 -1.01759374e-01  2.36689653e-02 -3.37335281e-02
 -5.90485288e-03 -3.34046036e-02  1.18376523e-01  5.39632402e-02
  1.03942506e-01 -6.04337342e-02 -5.34113422e-02  6.07305393e-02
 -1.62233878e-03  4.43667232e-04 -5.81248812e-02 -4.63446639e-02
 -4.78517301e-02 -6.78272266e-03  7.74446502e-02  4.37830202e-02
 -5.43308184e-02 -9.22707915e-02 -7.36197829e-03  3.73202153e-02
 -3.66289392e-02  3.72189805e-02 -1.49615044e-02  4.01832908e-02
 -6.22826070e-03  7.29055628e-02 -5.24419453e-03  5.81739517e-03
 -2.97731385e-02  1.84977390e-02 -5.19712120e-02 -3.96116786e-02
  3.97436582e-02 -6.58618063e-02 -7.28648081e-02 -5.90365694e-08
 -3.38690691e-02 -1.03305794e-01  1.73718892e-02  4.54966314e-02
  3.12329289e-02 -2.59644575e-02  1.47791468e-02 -1.02235675e-01
 -5.49045429e-02 -7.51018971e-02 -4.37815487e-02  5.27487546e-02
 -3.12940441e-02 -5.80485351e-02  3.19494493e-03 -6.12679264e-03
 -2.51327734e-02 -7.39706829e-02 -4.50553037e-02 -7.31611699e-02
 -3.80250365e-02  2.19154954e-02 -1.92612465e-02  3.45055163e-02
 -3.56570296e-02  8.44689086e-03  5.83339967e-02  1.97910994e-01
  8.17037597e-02 -4.17684801e-02  7.46024922e-02 -9.67020988e-02
  3.07867071e-03  1.93419531e-02  1.32505205e-02 -1.12119177e-02
  4.63100756e-03  4.61253226e-02  5.06184474e-02  9.31286998e-03
 -1.00076452e-01  3.17648239e-02 -3.52518484e-02 -2.43389178e-02
 -1.82371531e-02 -3.97284925e-02 -1.44223675e-01 -9.19104088e-03
  4.87405583e-02 -2.85733957e-03 -3.01047992e-02 -3.56287998e-03
  2.18465016e-03  9.27838758e-02  4.21802327e-03 -6.77712411e-02
 -3.21182236e-02 -6.22731782e-02 -5.68613857e-02  6.06855862e-02
  1.00080326e-01  2.48480737e-02  6.50830641e-02 -1.08940221e-01]"
"use
    // Here we setup for a run that samples features only
    // from devnet
    let mut my_matrix = ScfsMatrix::new(Some(ScfsCriteria {
        clusters: Some(vec![SCFS_DEVNET.to_string()]),
        ..Default::default()
    }))
    .unwrap();
    // Run the sampler matrix
    assert!(my_matrix.run().is_ok());
    // Get all deactivated features
    let deactivated = my_matrix
        .get_features(Some(&ScfsMatrix::any_inactive))
        .unwrap();
    // Confirm we have them
    assert_ne!(deactivated.len(), 0);
    // Setup test validator and logging while deactivating all
    // features that are deactivated in devnet
    let (test_validator, main_payer) = clean_ledger_setup_validator(deactivated).unwrap();
    let connection = test_validator.get_rpc_client();
    solana_logger::setup_with_default(""solana_runtime::message=debug"");

    let accounts = &[];
    let txn = submit_transaction(
        &connection,
        &main_payer,
        [
            // Add two (2) instructions to transaction
            // Replace with instructions that make sense for your program
            Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
            Instruction::new_with_borsh(PROG_KEY, &1u8, accounts.to_vec()),
        ]
        .to_vec(),
    );
    assert!(txn.is_ok());
}
123456789101112131415161718192021222324252627282930313233343536373839Happy Testing!# Resourcesscfsdopen in new windowgadget-scfsopen in new window # Keypairs and Wallets# How to generate a new KeypairMany of the different actions you can take with the various Solana libraries require a Keypair or Wallet. If you are connecting to a wallet, you do not have to worry. However, if you are in need of a keypair, you will need to generate one.TSPythonC++RustCLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";

(async () => {
  let keypair = Keypair.generate();
})();
12345let keypair = Keypair.generate();
1from solders.keypair import Keypair

keypair = Keypair()
123keypair = Keypair()
1// clang++ generate_keypair.cpp -o generate_keypair -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  auto key_pair = Keypair::generate();

  auto public_key = key_pair.public_key;
  std::cout << ""public_key = "" << public_key.to_base58() << std::endl;

  return 0;
}
1234567891011121314auto key_pair = Keypair::generate();
1use solana_sdk::signature::{Keypair};

fn main() {
    let wallet = Keypair::new();
}
12345let wallet = Keypair::new();
1$ solana-keygen new

# pubkey: 9ZNTfG4NyQgxy2SWjSiQoUyBPEvXT2xo7fKc5hPYYJ7b
123solana-keygen new
1# How to restore a Keypair from a secretIf you already have your secret, you can get your Keypair from the secret to test out your dApp.From BytesTSPythonC++RustCLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";

(async () => {
  const keypair = Keypair.fromSecretKey(
    Uint8Array.from([
      174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
      222, 53, 138, 189, 224, 216,","[ 7.90202711e-03 -5.91747686e-02 -9.17277709e-02  6.15273193e-02
  1.43858209e-01 -2.92430986e-02 -2.72423308e-02 -4.92179319e-02
 -1.06564239e-01  2.70634354e-03  1.08830050e-01 -2.97422358e-03
 -1.78523082e-02  3.00479326e-02  1.33914277e-02  1.38577502e-02
 -5.70608582e-03 -1.75810046e-02  5.25757410e-02 -8.45152140e-03
  5.32853510e-03 -5.04505858e-02  5.79636078e-03  5.30519485e-02
  1.54961562e-02 -2.50251126e-02  2.07959153e-02 -8.49947147e-03
 -2.84233559e-02  2.98154261e-02  1.62394822e-03  1.08345866e-01
 -4.76221927e-02 -8.01337045e-03  1.38447866e-01  4.07108180e-02
 -5.35100000e-03  4.12229858e-02 -1.60175897e-02 -7.49752223e-02
  6.09286129e-02 -1.24076381e-02 -5.99994287e-02  1.84690896e-02
  2.64464915e-02 -4.10113484e-02 -7.73527771e-02 -2.76608095e-02
 -1.96069330e-02 -2.07653400e-02 -2.09091865e-02  1.33848973e-02
 -3.32938023e-02 -3.33147612e-03  5.54957166e-02 -1.89643130e-02
 -4.90526110e-03 -4.76397462e-02  7.57928118e-02 -5.05078621e-02
  3.49290073e-02 -8.96306783e-02  3.68376635e-02 -2.53270846e-02
  1.81260891e-02  9.60244890e-03  4.16098051e-02 -1.48112923e-02
 -3.13639845e-04  3.48558761e-02 -2.49699522e-02  1.28698843e-02
  4.74361796e-03 -1.22371651e-02 -2.73107998e-02  4.03795466e-02
  1.84718855e-02  9.33221541e-03  1.90436505e-02 -4.72732894e-02
 -6.51253983e-02  3.39620411e-02 -1.26840463e-02  8.58453885e-02
 -2.84000933e-02  8.23049471e-02 -1.85256191e-02 -1.96532980e-02
  6.60250410e-02 -3.83674353e-02  5.15268855e-02  2.39118394e-02
 -5.01721278e-02 -5.55513687e-02 -1.64593998e-02 -3.91972475e-02
 -2.14349013e-02  1.14692366e-02 -1.05413133e-02  8.74926075e-02
 -2.71567516e-02 -6.00319989e-02  1.76439919e-02  1.02500366e-02
 -4.24936786e-02  3.90205085e-02  3.53331864e-02 -2.50759628e-02
 -3.49126756e-02  5.76045476e-02  3.75169292e-02  9.44431648e-02
  9.53458156e-03  3.63719985e-02 -1.08066818e-03  8.98082405e-02
  1.48989947e-03  2.38531381e-02 -3.91674750e-02  6.89026564e-02
  5.93507849e-02  2.46647242e-02  5.61717749e-02 -4.59576808e-02
 -2.61657871e-02  7.40960836e-02 -4.94576171e-02  3.54637940e-33
  1.79859214e-02 -8.06732103e-02  9.67647322e-03  3.17352377e-02
  9.19041224e-03 -3.34371328e-02  6.84220940e-02  6.73822537e-02
 -6.59086481e-02 -1.05844054e-03 -6.77151904e-02  3.24406065e-02
 -3.59667502e-02 -4.81467582e-02 -7.41154468e-03 -6.35687709e-02
  7.32098296e-02  8.29738379e-03  4.88919504e-02  2.86885537e-02
  4.56564948e-02 -4.18446772e-02 -3.98970470e-02 -7.51245171e-02
 -1.34573691e-02 -1.22838259e-01 -3.11079659e-02 -3.05029824e-02
  9.22870543e-03  3.62644047e-02  2.99115386e-03  7.35540092e-02
 -1.31288562e-02  9.25873965e-02 -2.57615950e-02 -4.13408950e-02
 -3.88371646e-02 -1.35432109e-02 -3.28164399e-02 -4.90114726e-02
  2.72455383e-02  5.91459358e-03  2.87444741e-02  5.57863060e-03
 -1.52571602e-02 -3.20174987e-03 -1.24144517e-02 -3.03322971e-02
  5.78391589e-02 -3.83636937e-03  1.03754140e-02  3.12229134e-02
 -3.43102440e-02 -1.00166731e-01 -3.11199166e-02 -1.07949262e-03
  2.52292510e-02 -7.99017996e-02  3.09080258e-02  7.86381289e-02
 -1.03772037e-01 -1.75551011e-03 -7.75988773e-02 -6.82724714e-02
 -3.15252170e-02  6.08580783e-02 -5.76955341e-02 -5.66693284e-02
 -2.38538235e-02 -7.70857409e-02 -8.03027675e-03  2.22885367e-02
 -4.06910926e-02 -2.94280145e-03 -2.83196401e-02 -8.19837302e-02
  4.61892691e-03  6.22537918e-02 -1.31071270e-01 -2.42473781e-02
  5.12856729e-02 -1.07105607e-02 -1.40361264e-01  1.22430898e-01
  4.70605232e-02 -3.24405693e-02 -1.98816732e-02 -8.95809978e-02
 -2.31328607e-02 -1.18415272e-02 -9.78985894e-03 -4.58625816e-02
  4.81013730e-02 -9.57281366e-02 -3.35245579e-02 -2.89001274e-33
  2.97176745e-03 -9.85007733e-04 -4.64796601e-03  2.42077652e-02
 -3.73715349e-03 -6.44507781e-02  3.77175659e-02  4.00833599e-02
 -2.87006702e-02 -3.94369066e-02  3.92535813e-02 -3.88998538e-02
 -1.82969291e-02 -2.26826686e-02 -5.91727570e-02  5.48233353e-02
 -9.42569450e-02 -4.72697578e-02  5.46113104e-02  4.83239666e-02
  8.69241264e-03  1.22826584e-01  2.87995022e-02  7.53130065e-04
 -2.11343560e-02  4.11947630e-02 -2.70379968e-02  8.39330256e-02
  2.59739376e-04 -3.21531855e-02  5.73580572e-03 -6.48222715e-02
 -1.25909656e-01  4.47653607e-02  3.95377241e-02 -4.29658070e-02
 -2.83157770e-02  4.66872044e-02 -2.17036866e-02  6.60860389e-02
  5.61697558e-02  2.68251486e-02 -1.48253486e-01  6.55673966e-02
  7.87722226e-03  4.80102412e-02  9.91752818e-02  2.79619135e-02
 -3.89488339e-02 -3.15577500e-02 -4.59986692e-03 -1.18684229e-02
  2.55061202e-02  7.22550079e-02 -9.81913909e-05  7.20528588e-02
  9.98991355e-02  6.94135809e-03 -1.42567102e-02  3.10029555e-02
  7.38149956e-02 -3.63710783e-02 -2.52389181e-02  3.22356969e-02
  9.50289294e-02 -1.10390790e-01 -3.41592729e-02  7.28097036e-02
 -6.08681422e-03  3.69602628e-02 -1.12106070e-01  9.50542744e-03
 -3.07051912e-02  2.14535999e-03  3.69609036e-02 -1.14235338e-02
 -1.02966197e-01 -1.05709091e-01  1.70124881e-02  1.74739659e-02
 -6.96545318e-02  1.06223505e-02  1.05270732e-03  5.33475876e-02
  7.77622312e-02  4.79406528e-02  3.19938548e-02 -1.43247861e-02
  5.94274662e-02  2.35910844e-02 -1.31875258e-02 -2.51786485e-02
 -4.82779316e-04  9.71636474e-02 -2.63943169e-02 -5.02784161e-08
 -7.09973127e-02 -1.83696654e-02 -2.12348383e-02 -1.08489580e-02
  7.71913975e-02 -8.69995654e-02  6.56885728e-02  2.95614395e-02
  1.02143325e-02 -5.48763834e-02 -3.18821371e-02 -4.51745419e-03
 -8.46667588e-02 -3.49463113e-02  2.26360913e-02 -3.04628047e-03
  3.64286304e-02  5.63790239e-02 -4.54793051e-02 -5.85832819e-02
 -1.24523798e-02 -3.49284858e-02 -3.00716683e-02  7.87856951e-02
 -5.09637147e-02 -1.28258709e-02  1.21440411e-01  7.26856664e-02
  6.69426396e-02  2.59975139e-02 -3.09147723e-02 -7.21148774e-02
  9.18373689e-02  6.75310194e-02 -1.58577915e-02  8.26452896e-02
 -4.45544533e-02 -1.93862920e-03  9.62858573e-02  4.20201831e-02
 -3.36537771e-02  8.91358778e-02 -2.65074819e-02  2.56402581e-03
  7.98992068e-03 -3.07277367e-02 -5.12143150e-02  2.56914403e-02
  6.68274313e-02  9.47523117e-03 -5.16194031e-02 -2.70851608e-02
 -6.41426817e-02  1.08294666e-01  2.44717970e-02 -7.24369287e-02
 -2.16788193e-03  2.87742484e-02  8.01095460e-03  6.59181625e-02
  7.68420473e-02  4.92869690e-02  2.16327468e-03 -4.54152636e-02]"
"117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
      15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
      121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
    ])
  );
})();
123456789101112const keypair = Keypair.fromSecretKey(
  Uint8Array.from([
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
    222, 53, 138, 189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
    15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
    121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
  ])
);
12345678from solders.keypair import Keypair

secret_key= [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
        63, 176, 109, 168, 89, 238, 135,
    ]
    
keypair = Keypair.from_bytes(secret_key)
print(""Created Keypair with Public Key: {}"".format(keypair.pubkey()))
1234567891011secret_key= [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
        63, 176, 109, 168, 89, 238, 135,
    ]
    
keypair = Keypair.from_bytes(secret_key)
12345678// clang++ keypair_from_seed.cpp -o keypair_from_seed -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  const uint8_t bytes[] = {
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
    189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
    148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
    63, 176, 109, 168, 89, 238, 135,
  };
  Keypair key_pair = Keypair::from_seed(bytes);
  std::cout << ""Created Keypair with Public Key: "" << key_pair.public_key.to_base58() << std::endl;
}
12345678910111213141516const uint8_t secret_key[] = {
174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
148, 69, 241,","[-1.40982575e-03  7.64719024e-03 -9.38624591e-02 -5.40243536e-02
 -9.28966105e-02 -3.96357253e-02  3.67717817e-02  8.13158378e-02
 -3.80937718e-02 -3.31835193e-03  2.24328376e-02  1.50034279e-02
  9.65644196e-02 -6.31417632e-02 -8.00063759e-02 -4.79007028e-02
 -1.26739115e-01 -2.81157754e-02  2.42223348e-02 -9.70012918e-02
  6.29077777e-02  6.46200180e-02 -1.62825175e-02 -5.51590770e-02
  4.37407792e-02  7.46268928e-02  4.47812350e-03  4.54809368e-02
  1.18660601e-02 -4.16218601e-02 -6.51822239e-03  1.69466361e-02
  7.41778165e-02  8.94066766e-02 -6.69009387e-02 -2.65463032e-02
 -3.24866287e-02  6.37238175e-02  4.14953269e-02  3.40039991e-02
 -3.50279361e-03  1.60985254e-02  1.96329579e-02  8.08209926e-02
 -5.00073610e-03  2.10652739e-04 -1.16270378e-01  1.00988988e-02
  2.16151681e-03  2.67535374e-02 -6.21306486e-02  1.45805568e-01
 -7.93135166e-03  2.96477973e-02  6.25740811e-02 -9.04533565e-02
 -1.24546262e-02 -1.51088387e-01  9.67913494e-02 -1.25277700e-04
  3.58081870e-02  6.49913773e-02 -3.18842977e-02 -4.70774770e-02
  6.04045615e-02  3.09095941e-02  8.28610640e-03 -7.76678622e-02
  5.94436340e-02 -3.26458253e-02 -5.51920850e-03  8.18943139e-03
 -2.72869822e-02  3.62403481e-03 -3.98570001e-02  1.98351443e-02
 -5.71725219e-02 -4.90277633e-02 -3.52326110e-02 -7.01090670e-04
 -2.80950647e-02  5.70831485e-02  1.10448845e-01  9.80735347e-02
  1.39260693e-02  2.17378978e-02 -4.76433858e-02  5.42445965e-02
 -2.88962177e-03  4.43240106e-02 -1.78420283e-02 -2.26122178e-02
  2.27827802e-02  1.72223840e-02 -2.62812409e-03  5.55748604e-02
  1.13853641e-01 -7.08511621e-02 -3.92585695e-02  6.41533956e-02
 -2.76752026e-03  2.31698826e-02 -9.69049186e-02 -7.14807287e-02
 -3.01543176e-02  3.76417413e-02  7.80410469e-02 -4.46242206e-02
 -3.11914291e-02 -6.93161692e-03 -3.71943950e-03  3.33133638e-02
  3.64487991e-02  9.47595295e-03  2.28421912e-02  4.18915488e-02
 -4.67055552e-02  7.94014931e-02  3.08213849e-02  7.54151121e-02
  1.64394304e-02 -2.48278901e-02 -7.95606375e-02  1.20237879e-01
 -5.82829714e-02  9.69785266e-03 -6.11865483e-02 -6.32593828e-33
 -2.10747924e-02  1.23907709e-02  1.76821407e-02 -4.56941426e-02
 -4.65065464e-02  3.28690037e-02 -4.16454747e-02 -2.60163434e-02
 -2.53858380e-02  6.47189701e-03 -7.86863863e-02 -2.58173458e-02
 -1.08047035e-02 -1.81218088e-02 -2.35358216e-02  9.71918646e-03
  4.10184339e-02  8.73808339e-02 -8.73678029e-02 -8.30829218e-02
 -1.97453313e-02  4.03340012e-02  2.55686659e-02 -6.23248182e-02
  4.11331095e-02  6.65012002e-02 -4.53618951e-02 -5.80448993e-02
  2.49720830e-02  3.66264470e-02 -4.09299023e-02  9.23097059e-02
 -8.73539820e-02 -2.86575537e-02  5.24302535e-02 -1.01569809e-01
  6.95617348e-02 -1.22332620e-02 -5.06711453e-02  6.54809922e-03
 -4.08485495e-02  3.46749127e-02  2.59872004e-02 -6.07908294e-02
  2.27393694e-02 -2.61282781e-03  2.18947120e-02  4.86396439e-02
  3.63123044e-02  6.88377321e-02 -8.69143233e-02  1.93730295e-02
 -1.87296551e-02 -2.52645239e-02 -5.68706095e-02 -7.54400194e-02
  8.04050714e-02  3.00639439e-02  6.06528390e-03  7.66916499e-02
 -6.08430570e-03  1.79247838e-02  6.10218979e-02  1.06885508e-02
  2.85044722e-02 -1.14437682e-03 -3.23064104e-02 -2.66820043e-02
 -4.03204449e-02  1.04037158e-01 -5.31917922e-02 -5.35952020e-03
  6.46300381e-03 -1.05451057e-02 -4.87643890e-02 -2.12246347e-02
  4.59274203e-02  1.21263796e-02 -1.92498006e-02 -9.28824469e-02
 -6.49737008e-03  3.99411693e-02 -2.28581000e-02 -7.94196278e-02
  1.07293846e-02 -1.97380111e-02 -2.62031313e-02 -4.34689195e-04
 -1.22248046e-02 -7.11300820e-02 -2.79631335e-02 -3.31122056e-02
 -5.07857129e-02 -6.26013353e-02 -1.06026553e-01  4.84214041e-33
 -5.08332578e-03  4.46543470e-02 -3.44743952e-02  2.52335984e-03
 -7.25164963e-03 -7.43996771e-03  5.89434765e-02  2.26648040e-02
 -2.49991636e-03  2.22179275e-02  5.54335825e-02 -1.15904410e-03
  8.11365023e-02 -7.28489682e-02  1.09246537e-01 -1.04610166e-02
  1.44830570e-02  1.32061973e-01 -6.36909753e-02 -6.35698214e-02
 -4.62993458e-02  5.42704889e-04 -8.92580971e-02  6.98978379e-02
 -1.34181539e-02  5.01471907e-02  2.58443737e-03 -3.78705538e-03
 -3.14771160e-02  6.10954734e-03 -4.37750407e-02  9.88515466e-03
 -5.61772957e-02  1.95453558e-02 -3.25029194e-02 -2.93790083e-02
  7.14351684e-02 -5.93107753e-03 -7.96956420e-02 -6.75143069e-03
  5.76026514e-02  1.25614330e-02  7.37736523e-02  4.11300473e-02
  1.96058508e-02  5.94754331e-02  8.69910419e-02  4.53837030e-02
 -1.11641036e-02  3.00094448e-02  1.45161271e-01 -4.06168960e-03
  4.04055184e-03  2.60966439e-02 -4.56678262e-03  4.50486615e-02
 -4.31671664e-02  5.73108979e-02  6.91207871e-03 -7.82559365e-02
 -1.29628554e-02 -9.87472199e-03  7.94104934e-02  2.32105050e-02
  9.26855057e-02 -9.01851431e-02 -3.24088857e-02 -2.56074034e-02
 -8.51877183e-02  3.98789048e-02  4.79236841e-02 -2.62318421e-02
 -1.49810789e-02  1.44065619e-02  3.60312983e-02  2.14514765e-03
 -3.67648108e-03  3.96602154e-02 -3.15151922e-02  1.16541823e-02
  1.91473204e-03  2.38664597e-02  7.03620762e-02  1.00881802e-02
  2.64115389e-02  6.76993951e-02  6.37093112e-02  7.07573071e-02
 -3.82637717e-02  2.88566556e-02 -4.57719192e-02  6.91803768e-02
 -2.54462417e-02 -2.25052722e-02  1.23935744e-01 -5.09624982e-08
  2.63738306e-03  3.78662609e-02 -1.04370221e-01  1.82859022e-02
  1.87871046e-02 -4.15090062e-02  2.08615605e-02  4.99929264e-02
 -3.38187106e-02 -5.50903641e-02  9.24890339e-02 -5.94909340e-02
  1.94440770e-03 -2.98553635e-03  4.40400615e-02  3.65067914e-04
 -1.18679199e-02 -3.33675221e-02 -7.20820995e-03 -3.56800742e-02
  5.95266791e-03 -1.13563845e-02  2.92788371e-02 -7.21114082e-03
 -8.80711079e-02  6.90129236e-05 -5.75763024e-02  7.89099857e-02
  3.88673320e-02 -2.46785581e-02  4.09413651e-02 -4.43305932e-02
  3.79284732e-02 -9.16344896e-02 -8.30526203e-02  5.79964481e-02
 -1.09276036e-02  1.93751138e-02  2.91913804e-02  1.63162723e-02
 -5.20049408e-02 -4.71686944e-02 -1.29122078e-01  1.21207219e-02
 -2.70799287e-02 -4.03046794e-03  2.89865267e-02  6.05800040e-02
  1.64261404e-02 -2.92061642e-02 -5.77472225e-02 -4.90929261e-02
  5.33616766e-02 -9.30885822e-02 -2.60349043e-04 -1.99380815e-02
 -3.87555882e-02  3.73814092e-03  5.59443980e-02  3.21344053e-03
  6.18417338e-02 -1.34244775e-02 -3.98808271e-02 -1.46949803e-02]"
"227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
63, 176, 109, 168, 89, 238, 135,
};
Keypair key_pair = Keypair::from_seed(secret_key);
1234567use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let secret_key: [u8; 64] = [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
        63, 176, 109, 168, 89, 238, 135,
    ];

    if let Ok(wallet) = Keypair::from_bytes(&secret_key) {
        let pubkey = Signer::pubkey(&wallet);
        println!(""Created keypair: {}"", pubkey)
    }
}
123456789101112131415let secret_key: [u8; 64] = [
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
    189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
    148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
    63, 176, 109, 168, 89, 238, 135,
];

let wallet = Keypair::from_bytes(&secret_key)?;
12345678# input your secret into the Keypath listed under solana config get
1# input your secret into the Keypath listed under solana config get
1From Base58 StringTSPythonRustPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  const keypair = Keypair.fromSecretKey(
    bs58.decode(
      ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG""
    )
  );
})();
12345678910const keypair = Keypair.fromSecretKey(
  bs58.decode(
    ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG""
  )
);
12345from solders.keypair import Keypair

b58_string = ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG""
keypair = Keypair.from_string(b58_string)
print(""Created Keypair with Public Key: {}"".format(keypair.pubkey()))
12345b58_string = ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG""
keypair = Keypair.from_string(b58_string)
12use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let wallet = Keypair::from_base58_string(
        ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG"",
    );
    let pubkey = Signer::pubkey(&wallet);
    println!(""Created keypair: {}"", pubkey)
}
123456789let wallet = Keypair::from_base58_string(
    ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG"",
);
123# How to verify a KeypairIf you are given a keypair, you can verify whether or not the secret matches the given public keyTSPythonC++CLIPress </> button to view full sourceimport { Keypair, PublicKey } from ""@solana/web3.js"";

(async () => {
  const publicKey = new PublicKey(
    ""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p""
  );
  const keypair = Keypair.fromSecretKey(
    Uint8Array.from([
      174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
      222, 53, 138, 189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
      15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
  ","[-3.19770612e-02  7.72820935e-02 -3.93704250e-02 -2.71410942e-02
 -6.88293437e-03 -8.46443251e-02  4.43848744e-02  2.11951621e-02
  3.79161388e-02 -2.74853241e-02  1.72952861e-02  2.22956855e-02
  7.03236554e-03 -6.67080954e-02  1.06908949e-02 -3.67068276e-02
 -1.29933268e-01 -5.35877869e-02 -8.50961655e-02 -4.72227186e-02
  1.53131261e-02 -2.28452384e-02  3.62396166e-02 -4.32212129e-02
 -1.79270413e-02  1.83885116e-02  4.09094393e-02  6.52260780e-02
  4.26688790e-02 -7.36648738e-02  4.97210547e-02  4.49669063e-02
  5.31246103e-02  9.81887877e-02 -4.36321646e-02  2.54033282e-02
 -9.95087530e-03  1.05505781e-02  2.54170299e-02 -2.13193055e-02
 -4.56003621e-02 -5.59757799e-02 -1.37299318e-02  5.55426553e-02
  2.19773948e-02  3.49620520e-03 -1.15863688e-01  8.30819085e-02
  1.61683690e-02  3.89065780e-02 -4.14446183e-02  1.06652670e-01
 -9.55176130e-02  1.06593678e-02  8.91833901e-02 -2.12849788e-02
 -3.78673933e-02 -1.08841598e-01  4.78214957e-02 -8.54995940e-03
  2.25720350e-02  6.19785637e-02  2.09003966e-03 -5.34186400e-02
  4.32749167e-02 -4.41275258e-03 -1.47790210e-02 -7.11495206e-02
  1.19890561e-02  1.30618615e-02  5.78581430e-02 -2.50611175e-02
 -2.17318889e-02  3.44915092e-02 -8.92660301e-03 -1.93254754e-03
 -2.90183816e-02 -1.33276153e-02 -4.86869477e-02 -2.51267403e-02
 -2.68189888e-02 -3.14181000e-02  1.17245354e-02  6.80393428e-02
 -5.53647103e-03 -1.15890265e-03 -7.86111429e-02 -6.37202412e-02
  3.18144001e-02  8.00029337e-02 -1.69962347e-02  7.76424771e-03
  4.24834015e-03  8.65505543e-03  4.31678221e-02  8.39061141e-02
  7.84523040e-02  7.53938314e-03 -9.07168835e-02  1.31055579e-01
 -3.86921316e-02  3.11539154e-02 -6.27371296e-02 -8.97805840e-02
  2.93231774e-02  2.17796713e-02  9.47671384e-02 -4.29970771e-02
 -5.76199517e-02 -1.47766862e-02  4.62720776e-03 -4.63253120e-03
  2.49137226e-02  3.73591892e-02 -3.94659899e-02  3.39761153e-02
 -3.76742296e-02  7.30773136e-02 -3.26534584e-02  6.39538169e-02
  6.42005727e-02  4.75916155e-02 -3.82724777e-02  8.46531838e-02
 -1.02563158e-01 -2.01164130e-02 -3.17020006e-02 -3.45448439e-33
 -1.57944241e-03 -3.15208100e-02 -2.21165661e-02 -6.85993135e-02
 -1.31870732e-02 -1.22917946e-02  3.45093459e-02 -2.60733813e-02
 -1.19511358e-01 -9.08510853e-03 -5.43876067e-02  1.34077352e-02
 -2.28764527e-02 -9.58642270e-03  2.74546668e-02 -1.44080436e-02
  5.30626699e-02  5.35997935e-02 -4.95186821e-02 -2.32897624e-02
  7.73907900e-02 -8.55432823e-02  3.10618605e-04 -1.14229873e-01
  4.27406132e-02  4.38257083e-02 -7.03496039e-02 -1.23098158e-04
  5.41805476e-02  1.42145203e-02 -7.31874779e-02  5.06089814e-02
  1.78203136e-02  3.02469358e-02  5.48076816e-02 -5.57311550e-02
  2.27612983e-02  2.47592758e-02 -1.08149789e-01 -2.16121655e-02
 -4.48214682e-03  4.48844060e-02 -4.85320091e-02 -3.20195593e-02
  2.51955576e-02  2.30570305e-02  3.52543816e-02  1.08320460e-01
  1.05545344e-02  5.28770238e-02 -4.59401421e-02 -1.82824151e-04
 -5.18641248e-02 -6.29262254e-03 -1.16572604e-02 -1.10676855e-01
  2.89559364e-02  3.27729136e-02 -5.80901206e-02  1.06064398e-02
  2.24879086e-02 -3.27980774e-03  2.61858888e-02  3.01461760e-02
 -2.11105403e-02  4.23822403e-02 -6.85074329e-02  5.58283888e-02
 -1.89694520e-02  7.25437328e-02 -2.23691817e-02  6.30099103e-02
 -8.55583884e-03  2.91077793e-02 -3.04081328e-02 -3.90093662e-02
  5.30713750e-03  2.98974346e-02 -4.17515971e-02 -9.25280377e-02
  5.48139389e-04  4.94682463e-04 -4.91848737e-02  5.78911118e-02
 -3.33327912e-02  2.47306656e-02 -3.13557684e-02 -2.10575517e-02
 -4.20900024e-02 -4.63503823e-02  3.67767201e-03 -3.02639697e-02
  3.42673883e-02 -9.04165357e-02 -5.28156618e-03  7.24213299e-34
  3.60191800e-02  5.41912839e-02 -3.04712132e-02  4.99821305e-02
  1.77418645e-02 -1.72852296e-02  6.41168132e-02 -1.75722339e-03
  7.16938730e-03  4.06157523e-02  4.72017378e-02 -2.15373840e-02
  6.11877218e-02 -7.11876079e-02  6.07019626e-02  1.40507787e-03
  6.07411657e-03  8.97685140e-02  6.34086458e-03 -5.61771393e-02
 -5.56397140e-02  5.80300502e-02 -5.69328889e-02  7.79810697e-02
  1.82742551e-02  5.72839938e-02 -3.70835289e-02  8.96221865e-03
 -6.88149035e-02  3.03669926e-03  6.27781898e-02 -3.97052104e-03
 -1.10467695e-01  4.08345535e-02 -6.98772492e-05 -9.29979384e-02
  3.67343985e-02  4.66357805e-02 -3.03491205e-02  2.24076360e-02
  9.05608758e-02 -2.90336031e-02  1.06805479e-02  4.23504002e-02
 -2.45631132e-02  5.68811484e-02  1.24417998e-01  2.24798732e-02
 -3.53990234e-02 -4.94968221e-02  1.50234625e-01 -3.57230529e-02
 -4.03784439e-02  2.34975573e-03 -6.72763810e-02  1.30806908e-01
  2.07549706e-02  7.28809461e-02  5.47153093e-02 -8.24891590e-03
  7.94016756e-03 -9.45195109e-02  4.81644273e-02  6.18956313e-02
  7.13454410e-02 -1.26257643e-01 -1.27299950e-02  6.82613626e-02
  1.88580696e-02  1.82957295e-02  6.58025518e-02 -3.27278823e-02
 -2.56441049e-02  3.69298607e-02  4.63882834e-02  7.66664967e-02
  4.27435199e-03 -3.84535864e-02 -3.14661907e-03  5.12433425e-02
 -7.65319243e-02 -8.84025544e-03 -2.77062301e-02  5.28532565e-02
 -3.74527788e-03  3.09457667e-02  5.03251553e-02  2.35023573e-02
 -9.48520675e-02  3.83393839e-02 -1.03645660e-02  5.43363132e-02
 -1.87357739e-02  1.31397985e-03  3.14244628e-02 -4.76265143e-08
 -3.97797711e-02 -5.37895262e-02 -1.35273933e-01  5.20171970e-02
  2.59789731e-02 -2.57509295e-02  4.22416739e-02 -3.64976116e-02
 -6.09740578e-02 -7.55066946e-02  1.12593984e-02  1.28347697e-02
 -6.29288107e-02 -3.49031277e-02  4.42797057e-02 -8.28702897e-02
 -5.64678758e-03  8.00204463e-03 -5.31530306e-02 -5.52244522e-02
 -6.68643368e-03 -1.66123658e-02 -3.38909985e-03 -3.09090558e-02
 -6.84043318e-02 -2.96079461e-03 -1.85498558e-02  8.35825875e-02
  5.53686395e-02  1.77619420e-02  6.10934608e-02 -4.74416167e-02
  1.05000325e-01 -3.40902805e-02 -8.83186907e-02  6.30103499e-02
 -8.60657450e-03 -1.59721561e-02  1.83168445e-02  2.72972696e-02
 -1.20556336e-02 -3.98403220e-02 -1.15704313e-01 -8.71823169e-03
 -7.95607045e-02 -6.40948489e-02  9.56769809e-02  4.83118333e-02
 -3.47430259e-03 -3.99780348e-02 -1.26654143e-02 -4.00677249e-02
  4.99347374e-02 -6.58755451e-02  4.38090116e-02 -3.54656465e-02
 -2.83615682e-02  4.67048995e-02  6.32315874e-02  3.72971268e-03
  8.73187035e-02 -2.31163632e-02 -6.14353158e-02  2.69726440e-02]"
"   121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
    ])
  );
  console.log(keypair.publicKey.toBase58() === publicKey.toBase58());
  // true
})();
1234567891011121314151617const publicKey = new PublicKey(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"");
const keypair = Keypair.fromSecretKey(
  Uint8Array.from([
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
    222, 53, 138, 189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
    15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
    121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
  ])
);
console.log(keypair.publicKey.toBase58() === publicKey.toBase58());
// true
1234567891011from solders.keypair import Keypair
from solders.pubkey import Pubkey

public_key = Pubkey.from_string(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"")

keys = [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
        63, 176, 109, 168, 89, 238, 135,
    ]
keypair = Keypair.from_bytes(keys)

print(keypair.pubkey() == public_key)
# True
123456789101112131415public_key = Pubkey.from_string(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"")

keys = [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
        63, 176, 109, 168, 89, 238, 135,
    ]
keypair = Keypair.from_bytes(keys)

print(keypair.pubkey() == public_key)
# True
123456789101112// clang++ verify_keypair.cpp -o verify_keypair -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  PublicKey public_key = PublicKey(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"");

  const uint8_t bytes[] = {
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
    189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
    148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
    63, 176, 109, 168, 89, 238, 135,
  };
  Keypair key_pair = Keypair::from_seed(bytes);

  std::cout << (public_key.to_base58() == key_pair.public_key.to_base58()) << std::endl;
}
12345678910111213141516171819PublicKey public_key = PublicKey(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"");

const uint8_t bytes[] = {
174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226,","[ 5.29208444e-02  9.27937217e-03 -6.35597706e-02 -5.88252731e-02
 -6.58848658e-02 -3.69756334e-02  6.20773174e-02  7.80125782e-02
 -2.06356216e-02  1.96486432e-02 -3.39813977e-02  2.19987612e-02
  6.01305813e-02 -7.47351572e-02 -3.46389338e-02 -3.89072523e-02
 -1.21803291e-01 -3.88497300e-02 -1.70317618e-03 -8.80606100e-02
  4.44406308e-02  5.19993454e-02 -6.55489787e-02 -2.24201158e-02
  4.77824993e-02  9.29225981e-02 -3.22034629e-03  2.81409845e-02
  7.71560892e-03 -6.59885909e-03 -1.64369699e-02 -1.04722520e-02
  4.37294617e-02  8.20414573e-02 -8.83602276e-02 -1.61797721e-02
 -3.36660706e-02  3.66473794e-02  7.72253498e-02  5.27489930e-02
 -3.46460864e-02  4.58979234e-02 -6.15312671e-03  8.58722851e-02
  1.14829987e-02 -1.33842807e-02 -1.56267613e-01  6.83321524e-03
  2.67686546e-02  3.41593400e-02 -3.69502120e-02  1.65080726e-01
 -3.07885185e-03  1.47132063e-03  4.27197181e-02 -6.89302459e-02
 -1.88623052e-02 -1.46009028e-01  1.15913473e-01 -1.14635713e-02
  1.51547855e-02  4.92484756e-02 -3.03917658e-02 -5.99115454e-02
  6.59486800e-02 -1.20302569e-02  2.73856577e-02 -3.82606536e-02
  9.61196646e-02 -5.37518151e-02  2.71854061e-03  5.40449731e-02
 -6.08692924e-03  2.58799233e-02 -3.08155194e-02  3.30788270e-02
 -5.10732420e-02 -1.01748714e-02 -1.75522566e-02 -1.68351140e-02
  2.15418078e-02  3.62586267e-02  1.04325585e-01  9.66730267e-02
  5.11100739e-02  1.74158625e-02 -5.08233495e-02  6.85141459e-02
 -8.08311161e-03  4.53869514e-02 -1.46119520e-02 -1.01237567e-02
  3.17747667e-02  4.79826927e-02  5.81156015e-02  4.02338356e-02
  8.78895298e-02 -8.24621543e-02 -4.22727466e-02  9.30170268e-02
 -1.82034113e-02  2.99467389e-02 -9.48940292e-02 -8.52688625e-02
 -3.01341377e-02  3.56541798e-02  8.94313008e-02 -3.96216847e-02
 -2.35506482e-02  1.87720340e-02 -1.26686953e-02  3.40791643e-02
  4.74934205e-02  3.01645156e-02  3.73255350e-02  5.15137427e-02
 -2.15924215e-02  7.88403079e-02 -1.58344954e-02  2.72232555e-02
  1.00530749e-02  3.45679224e-02 -5.24382293e-02  1.05970755e-01
 -2.73430217e-02  8.19486752e-03 -5.75903468e-02  5.94744489e-34
 -2.32136045e-02 -1.74736083e-02  5.38758859e-02 -1.67841390e-02
 -4.98738624e-02  4.20119204e-02 -5.49725108e-02  2.08642464e-02
 -1.88236905e-03  3.86982486e-02 -8.93440768e-02 -2.16662381e-02
  8.66746996e-03 -7.40781948e-02  2.74498854e-02  1.01049030e-02
  2.98062544e-02  7.36480728e-02 -6.78812489e-02 -6.75079748e-02
 -3.51361930e-02  2.06688326e-02  1.46203665e-02 -4.04967144e-02
  2.89902394e-03  4.74976078e-02 -6.92029595e-02 -2.64658220e-02
  5.62576577e-03  4.04213406e-02 -4.46592197e-02  7.08559752e-02
 -1.06471352e-01 -2.26979740e-02  6.37750775e-02 -1.29306003e-01
  9.99973938e-02 -1.20977862e-02 -5.27084135e-02  3.06169279e-02
 -7.09097311e-02  2.90470757e-02  3.77402976e-02 -5.60173132e-02
  1.12521751e-02  1.59837417e-02  8.93739052e-03  2.89700739e-02
  4.64522280e-02  1.00257978e-01 -9.35395509e-02  3.01247630e-02
 -2.49231141e-02 -4.31887060e-02 -7.82961622e-02 -7.49680325e-02
  9.69299302e-02  3.57287414e-02  2.12763436e-02  6.21770769e-02
  1.13014337e-02 -3.22723016e-03  5.84189035e-02  2.30330266e-02
  4.86445986e-02  1.38766803e-02 -2.93225050e-02 -3.02636586e-02
 -3.40323150e-02  8.58872607e-02 -3.25993150e-02  2.89605022e-03
 -5.78548573e-03 -2.30775438e-02 -6.01540618e-02 -4.34423536e-02
 -1.21340817e-02  2.36996450e-02 -3.01182661e-02 -9.41706970e-02
  3.30213197e-02  4.65181768e-02 -2.89712716e-02 -4.52384688e-02
  1.84206909e-03  3.34998965e-03 -3.94314453e-02  1.32646644e-03
  3.25093828e-02 -3.39686312e-02 -5.37424386e-02 -4.71858084e-02
 -5.97761124e-02 -6.77298009e-02 -9.10722688e-02  1.98184353e-34
 -1.76563840e-02  5.41375391e-02 -3.35216634e-02 -2.36880407e-02
  3.48134944e-03 -7.57813128e-03  7.59280622e-02 -1.37140905e-03
 -3.67222610e-03  4.78356704e-03  1.01246290e-01 -1.35405045e-02
  5.91540113e-02 -9.89931449e-03  1.39822170e-01 -2.44671628e-02
 -1.06714917e-02  1.25207990e-01 -4.98585030e-02 -1.04385473e-01
  7.73456413e-04 -1.55270640e-02 -8.92819613e-02  6.24738373e-02
 -3.02395634e-02  5.94860576e-02 -2.12310385e-02 -3.17986123e-03
 -4.29064706e-02 -5.12754917e-03  4.34060494e-04  4.03505303e-02
 -5.43779247e-02  3.37310880e-02 -5.85765094e-02 -4.30669934e-02
  5.30581698e-02  1.73519738e-02 -8.48833025e-02 -2.06159931e-02
  4.11815532e-02 -6.95565902e-03  7.01955631e-02  2.22803410e-02
  5.41136460e-03  6.79353029e-02  9.45813730e-02  5.22894561e-02
  7.57378014e-03  8.69387109e-03  1.17425650e-01 -2.72698011e-02
 -2.38718484e-02  3.44937742e-02  1.91783905e-02  4.58145328e-02
 -3.06350961e-02  2.27185320e-02  2.47112233e-02 -4.96358350e-02
 -7.38064386e-03 -3.89695819e-03  1.79159809e-02 -3.38285277e-03
  6.97222278e-02 -7.47142881e-02 -3.01782582e-02 -1.79516245e-02
 -4.90406081e-02  1.44550214e-02 -2.79078144e-03 -2.88223866e-02
 -1.44835608e-02  4.28332575e-02  3.88355814e-02  2.65130401e-03
  1.29531706e-02  4.01132405e-02  5.79485996e-03  2.08437685e-02
  5.79532422e-03 -5.02601126e-03  3.19499187e-02  1.74014047e-02
  2.40327772e-02  4.77094650e-02  6.53088242e-02  7.78096961e-03
 -5.14579080e-02  2.38527600e-02 -3.33172493e-02  9.74870697e-02
 -8.32824223e-03  5.14639914e-03  1.10932298e-01 -5.38962119e-08
  1.10429730e-02  5.29114939e-02 -8.48377496e-02  4.52536903e-02
  2.65500080e-02 -1.45852491e-02  3.67962127e-03  3.65583077e-02
 -2.78601646e-02 -6.20511025e-02  7.08596334e-02 -4.41355258e-02
  2.88082790e-02  2.30566747e-02  3.15373614e-02 -6.41655549e-02
 -5.31274341e-02 -6.03110045e-02  1.33603709e-02 -1.33577948e-02
  1.37103656e-02 -3.01613864e-02  4.00331505e-02 -1.03409206e-02
 -5.81058078e-02 -2.49596052e-02 -2.00463552e-02  9.70867947e-02
  3.69016156e-02  2.52730716e-02  2.48448867e-02 -2.30866466e-02
  3.51135880e-02 -4.57814634e-02 -7.30813220e-02  4.10880223e-02
 -1.70175098e-02  2.36232858e-02  2.58479249e-02 -1.09838666e-02
 -2.41125785e-02 -6.76996186e-02 -1.32935598e-01  5.51933236e-03
 -1.22453347e-02 -1.25421369e-02  1.96062736e-02  6.82171211e-02
  7.65143111e-02 -6.72707558e-02 -9.01088119e-02 -2.57920418e-02
  7.13475943e-02 -5.10820746e-02  1.80458818e-02 -6.11062050e-02
 -7.34986514e-02 -1.54955890e-02  8.08394179e-02  3.39586958e-02
  5.42121232e-02 -3.35586257e-02 -5.68765290e-02 -4.15783711e-02]"
"218, 48,
63, 176, 109, 168, 89, 238, 135,
};
Keypair key_pair = Keypair::from_seed(bytes);

std::cout << (public_key.to_base58() == key_pair.public_key.to_base58()) << std::endl;
// 1
123456789101112solana-keygen verify <PUBKEY> prompt://
1solana-keygen verify <PUBKEY> prompt://
1# How to check if a public key has an associated private keyIn certain special cases (e.g. a Program Derived Address), public keys may not have a private key associated with them. You can check this by looking to see if the public key lies on the ed25519 curve. Only public keys that lie on the curve can be controlled by users with wallets.TSPythonC++RustPress </> button to view full sourceimport { PublicKey } from ""@solana/web3.js"";

(async function () {
  // Note that Keypair.generate() will always give a public key that is valid for users
  const key = new PublicKey(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY""); // Valid public key
  console.log(PublicKey.isOnCurve(key.toBytes())); // Lies on the ed25519 curve and is suitable for users

  const offCurveAddress = new PublicKey(
    ""4BJXYkfvg37zEmBbsacZjeQDpTNx91KppxFJxRqrz48e""
  ); // Valid public key
  console.log(PublicKey.isOnCurve(offCurveAddress.toBytes())); // Not on the ed25519 curve, therefore not suitable for users

  const errorPubkey = new PublicKey(""testPubkey""); // Is not a valid public key
})();
1234567891011121314const key = new PublicKey(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY"");
console.log(PublicKey.isOnCurve(key.toBytes()));
12from solders.pubkey import Pubkey

# Note that Keypair() will always give a public key that is valid for users
key = Pubkey.from_string('5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY') # Valid public key
print(key.is_on_curve()) # Lies on the ed25519 curve and is suitable for users

off_curve_address = Pubkey.from_string('4BJXYkfvg37zEmBbsacZjeQDpTNx91KppxFJxRqrz48e') # Valid public key
print(off_curve_address.is_on_curve()) # Not on the ed25519 curve, therefore not suitable for users

error_pubkey = Pubkey.from_string(""testPubkey""); # Is not a valid public key
12345678910key = Pubkey.from_string('5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY')
print(key.is_on_curve())
12#include <iostream>
#include <solana_sdk.h>

int main()
{
    auto public_key = PublicKey(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY"");

    std::cout << public_key.is_on_curve() << std::endl;

    return 0;
}
1234567891011auto public_key = PublicKey(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY"");
std::cout << public_key.is_on_curve() << std::endl;
12use solana_sdk::pubkey::{Pubkey};
use std::str::FromStr;

fn main() {
    // Note that Keypair::new() will always give a public key that is valid for users
    let pubkey = Pubkey::from_str(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY"").unwrap(); // Valid public key
    println!(""{:?}"", pubkey.is_on_curve()); // Lies on the ed25519 curve and is suitable for users

    let off_curve_address = Pubkey::from_str(""4BJXYkfvg37zEmBbsacZjeQDpTNx91KppxFJxRqrz48e"").unwrap(); // Valid public key
    println!(""{:?}"", off_curve_address.is_on_curve()); // Not on the ed25519 curve, therefore not suitable for users

    let error_pubkey = Pubkey::from_str(""testPubkey"").unwrap(); // Is not a valid public key
}
12345678910111213let pubkey = Pubkey::from_str(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY"").unwrap();
println!(""{:?}"", pubkey.is_on_curve())
12# How to generate a mnemonic phraseIf you're creating a wallet, you will need to generate a mnemonic phrase so that the user can save it as a backup.TSPythonCLIPress </> button to view full sourceimport * as bip39 from ""bip39"";

const mnemonic = bip39.generateMnemonic();
123const mnemonic = bip39.generateMnemonic();
1from mnemonic import Mnemonic

mnemo = Mnemonic(""english"")
words = mnemo.generate(strength=256)
1234mnemo = Mnemonic(""english"")
words = mnemo.generate(strength=256)
12solana-keygen new
1solana-keygen new
1# How to restore a Keypair from a mnemonic phraseMany wallet extensions use mnemonics to represent their secret keys. You can convert the mnemonic to Keypairs for local testing.BIP39 - creating a single walletTSPythonCLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";
import * as bip39 from ""bip39"";

(async () => {
  const mnemonic =
    ""pill tomorrow foster begin walnut borrow virtual kick shift mutual shoe scatter"";
  const seed = bip39.mnemonicToSeedSync(mnemonic, """"); // (mnemonic, password)
  const","[-5.38805947e-02 -3.26559134e-02 -8.32049847e-02 -2.96114720e-02
 -2.25306302e-03 -5.00486381e-02  7.79835135e-03 -1.40538076e-02
 -2.76409201e-02 -1.89805385e-02  7.84886628e-03  3.66868414e-02
  5.75090796e-02 -1.00967802e-01  4.89262901e-02 -8.12793225e-02
 -1.90797195e-01 -1.48859909e-02 -1.53057547e-02  1.64650064e-02
  2.67915577e-02 -6.41244650e-02 -8.85779876e-03 -6.36554509e-02
 -7.06170546e-03 -4.81331302e-03  1.00204229e-01  5.59986494e-02
 -2.36663874e-02 -1.21529847e-02  9.61343050e-02 -2.65320633e-02
 -2.73960009e-02  7.03289583e-02  7.87881315e-02  4.15878929e-02
  1.79829504e-02  1.65904276e-02  3.18934172e-02 -8.87583243e-04
 -2.30902471e-02 -1.26134288e-02  5.84440939e-02  3.21229137e-02
  1.04408965e-01 -4.84069847e-02 -1.23368107e-01  3.04642580e-02
 -6.43535852e-02 -3.03725880e-02 -2.32777689e-02  3.96500342e-02
 -7.79961282e-03  3.51593979e-02 -2.73465528e-03 -7.06311315e-02
 -1.25798555e-02 -4.79381382e-02 -1.77508052e-02 -2.31747013e-02
  5.96473292e-02 -2.15804540e-02  3.57793421e-02 -1.07104786e-01
 -4.14480716e-02  1.04826249e-01  3.26219834e-02 -1.07841887e-01
  8.17264095e-02 -5.85490726e-02  3.24006267e-02  9.04139690e-03
 -6.53010458e-02  5.13041727e-02 -6.93802461e-02 -3.04388199e-02
 -1.90363396e-02 -1.65439546e-02 -4.46658172e-02 -6.93201378e-04
 -4.69092615e-02 -5.57658933e-02  5.05470112e-02  9.17665511e-02
  2.85015125e-02  6.30024150e-02  1.97230605e-03  2.35917018e-04
  4.84423377e-02  9.25899446e-02 -6.00043498e-03 -8.56772251e-03
 -2.56484989e-02  5.05930372e-02  8.68341103e-02  5.46884537e-02
  1.23739764e-01 -6.13711849e-02 -6.45873398e-02  1.04262903e-01
 -3.92309353e-02  2.94857309e-03 -3.96939144e-02 -8.43750760e-02
  6.31026700e-02  1.33783534e-01  9.38851312e-02 -5.79340011e-02
 -4.16510291e-02 -1.04597313e-02 -2.44220663e-02 -5.18273674e-02
  2.88290624e-02  6.53866157e-02  3.12669352e-02 -3.62778753e-02
 -3.48661058e-02  5.83989434e-02 -1.12030329e-02 -1.49477227e-03
  3.10822204e-02  6.39527962e-02 -2.85972673e-02  3.03981919e-02
 -6.98158592e-02  1.24991983e-02 -6.68707490e-02  9.80863784e-33
 -2.80235261e-02  3.18917520e-02  3.36749218e-02  3.45759541e-02
 -3.61029617e-02  5.63521124e-02 -1.52302831e-02  4.92563248e-02
 -5.48750646e-02  1.37038585e-02 -6.76197708e-02  3.52809057e-02
  1.89863369e-02 -2.39971112e-02  5.11428006e-02 -2.85950638e-02
  1.08680772e-02  7.98047781e-02  4.74718884e-02  6.27106114e-04
  1.59220304e-02 -2.63511669e-02 -3.27301957e-02 -7.51890708e-04
  4.13911641e-02 -9.61596612e-03 -7.13190064e-02  3.02875564e-02
  4.71137427e-02  3.81232947e-02 -5.62293734e-03 -1.52925327e-02
 -3.52033712e-02  2.40836926e-02  9.46082771e-02 -5.72531857e-02
 -1.23380404e-02 -1.35816447e-02 -9.64040235e-02 -3.40133160e-02
  5.14848195e-02  3.30549804e-03 -4.53507230e-02  2.43954994e-02
 -6.94144666e-02  2.24613808e-02  4.92907315e-02  5.97271398e-02
  2.70936619e-02  1.04387403e-02 -1.17513828e-01  1.10489592e-01
 -1.11403205e-01 -2.83227884e-03 -3.27731669e-02 -8.55892897e-02
  2.85527147e-02  6.79442808e-02  4.75345813e-02 -7.17928400e-03
  1.49166975e-02  4.76705767e-02  2.04318725e-02  3.85355880e-03
 -6.52594538e-03 -4.09744419e-02 -1.97179206e-02 -2.49144211e-02
  9.02905967e-03  4.62584868e-02  2.52708909e-03  3.64004448e-02
 -5.89815564e-02  3.90375853e-02 -2.26654001e-02 -7.22396895e-02
 -3.19953123e-03  9.74299163e-02  7.86028616e-03 -3.42017561e-02
  1.33393994e-02 -4.48821625e-03 -5.57847656e-02  2.26264074e-02
 -9.75678302e-03  1.76404901e-02 -4.18125913e-02 -1.79364905e-02
 -2.09642518e-02  1.51417358e-03  7.76443556e-02 -2.80633233e-02
 -5.55971414e-02 -6.82587624e-02 -2.85190530e-02 -1.02299108e-32
 -3.59326648e-03  1.63493177e-03 -7.39148213e-03 -1.98281016e-02
 -8.80661681e-02 -1.35129580e-04 -4.16597985e-02 -6.13167062e-02
  2.57993639e-02 -3.31181809e-02  1.05857603e-01 -2.44544391e-02
  9.53651667e-02 -2.29954682e-02  4.27736901e-02  1.54335406e-02
 -3.38796489e-02  4.55572866e-02  1.63057316e-02 -1.71565842e-02
 -4.17573266e-02 -2.20324961e-03 -3.25280204e-02  5.81077524e-02
  2.04821248e-02  6.75240606e-02 -7.52054974e-02  2.83007249e-02
 -5.18062748e-02 -7.50870749e-05  2.41093095e-02  7.68074021e-02
 -8.34142715e-02 -1.60169862e-02 -7.73832053e-02 -2.93967836e-02
  2.20843013e-02  5.04836626e-02  3.46073732e-02  4.16562296e-02
  9.14939865e-02 -1.56757794e-03  4.15472463e-02  1.54803712e-02
 -1.49971328e-03  2.28796946e-03  4.35993373e-02  7.68236071e-02
 -4.43047099e-02 -4.63915756e-03  6.86600804e-02  9.00922925e-04
  3.00445165e-02 -4.24515046e-02  4.33925800e-02  6.66509271e-02
 -1.20740207e-02  3.13355625e-02 -1.78861711e-02 -1.54113630e-02
  4.71666604e-02 -4.78605218e-02  2.69085215e-03  1.23286612e-01
  8.03178234e-04 -1.23643145e-01 -4.37571518e-02  2.58854702e-02
  1.35644432e-02 -2.68421769e-02  4.44655232e-02 -4.24549095e-02
  5.59281707e-02 -4.06807475e-03 -1.93392336e-02  2.94032227e-02
 -3.34288478e-02  6.66606426e-02  3.11650634e-02 -4.56475914e-02
  2.99114659e-02  3.45711783e-02  2.07946245e-02 -4.92128208e-02
 -2.64924280e-02 -1.69984414e-03  8.00001398e-02  2.21435931e-02
 -6.11961372e-02 -2.40685698e-03 -1.95730012e-02  4.30158004e-02
 -8.99055675e-02  3.16598117e-02  1.01221584e-01 -6.51348202e-08
  2.32623983e-02  1.58563722e-02 -6.88454211e-02 -3.45926918e-02
 -1.80334747e-02 -1.18481517e-02  5.22491485e-02 -5.13852872e-02
 -2.92738285e-02 -6.09862134e-02  2.61920709e-02  4.63869683e-02
 -5.60166389e-02  2.50483141e-03  1.17142666e-02 -1.67379677e-02
 -7.60155097e-02 -2.74724420e-02 -3.53582092e-02  4.89396648e-03
 -2.42603710e-04 -1.32414490e-01  3.30991275e-03  7.00610504e-02
 -7.92192444e-02  1.34596545e-02  9.69780907e-02  5.08963428e-02
  6.77773133e-02 -3.25835049e-02  3.30317998e-03 -7.90477991e-02
 -5.43602854e-02 -6.03613295e-02 -2.28672810e-02  1.13554381e-01
 -1.35398535e-02 -7.41026737e-03  1.53896967e-02  8.88980925e-02
 -6.56705536e-03 -5.86037897e-02 -1.20646857e-01  7.79288728e-03
 -4.54168469e-02 -6.87049236e-03  2.70126648e-02  3.37791741e-02
 -2.99882162e-02 -7.83085898e-02 -6.81550875e-02 -3.26430015e-02
 -7.61458126e-04  2.52415501e-02 -9.89533290e-02  9.24463272e-02
 -7.64336810e-02  6.64013177e-02 -4.21897555e-03  2.50816252e-02
  2.42626742e-02  4.30666283e-02 -4.79042716e-02  1.51365222e-02]"
"keypair = Keypair.fromSeed(seed.slice(0, 32));
  console.log(`${keypair.publicKey.toBase58()}`); // 5ZWj7a1f8tWkjBESHKgrLmXshuXxqeY9SYcfbshpAqPG
})();
12345678910const mnemonic =
  ""pill tomorrow foster begin walnut borrow virtual kick shift mutual shoe scatter"";
const seed = bip39.mnemonicToSeedSync(mnemonic, """"); // (mnemonic, password)
const keypair = Keypair.fromSeed(seed.slice(0, 32));
1234from solders.keypair import Keypair
from mnemonic import Mnemonic

mnemo = Mnemonic(""english"")
seed = mnemo.to_seed(""pill tomorrow foster begin walnut borrow virtual kick shift mutual shoe scatter"")
keypair = Keypair.from_bytes(seed)
print(""Created Keypair with Public Key: {}"".format(keypair.pubkey()))
1234567mnemo = Mnemonic(""english"")
seed = mnemo.to_seed(""pill tomorrow foster begin walnut borrow virtual kick shift mutual shoe scatter"")
keypair = Keypair.from_bytes(seed)
123solana-keygen recover
1solana-keygen recover
1BIP44 (multiple wallets, also known HD wallets)You can make multiple wallets from a single seed - also known as 'Hierarchical Deterministic wallets' or HD wallets:TSCLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";
import { HDKey } from ""micro-ed25519-hdkey"";
import * as bip39 from ""bip39"";

(async () => {
  const mnemonic =
    ""neither lonely flavor argue grass remind eye tag avocado spot unusual intact"";
  const seed = bip39.mnemonicToSeedSync(mnemonic, """"); // (mnemonic, password)
  const hd = HDKey.fromMasterSeed(seed.toString(""hex""));
  for (let i = 0; i < 10; i++) {
    const path = `m/44'/501'/${i}'/0'`;
    const keypair = Keypair.fromSeed(hd.derive(path).privateKey);
    console.log(`${path} => ${keypair.publicKey.toBase58()}`);
  }
})();
123456789101112131415const mnemonic =
  ""neither lonely flavor argue grass remind eye tag avocado spot unusual intact"";
const seed = bip39.mnemonicToSeedSync(mnemonic, """"); // (mnemonic, password)
for (let i = 0; i < 10; i++) {
  const path = `m/44'/501'/${i}'/0'`;
  const keypair = Keypair.fromSeed(derivePath(path, seed.toString(""hex"")).key);
  console.log(`${path} => ${keypair.publicKey.toBase58()}`);
}
12345678solana-keygen recover 'prompt:?key=0/0'
1solana-keygen recover 'prompt:?key=0/0'
1# How to generate a vanity addressVanity publickeys, or custom addresses are keys that have start with specific characters. For example, a person may want a publickey to start with ""elv1s"", or maybe even ""cook"". These can help other people remember who the key belongs to, making the key more easily identifiable.Note: The more characters in your vanity address, the longer it will take.WARNINGYou should just use the CLI for this task. The Python and TypeScript examples are for illustrative purposes and are much slower than the CLI.TSPythonC++CLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";

(async () => {
  let keypair = Keypair.generate();
  while (!keypair.publicKey.toBase58().startsWith(""elv1s"")) {
    keypair = Keypair.generate();
  }
})();
12345678let keypair = Keypair.generate();
while (!keypair.publicKey.toBase58().startsWith(""elv1s"")) {
  keypair = Keypair.generate();
}
1234from solders.keypair import Keypair

keypair = Keypair()
while(str(keypair.pubkey())[:5]!=""elv1s"") :
    keypair = Keypair()
    
print(""Created Keypair with Public Key: {}"".format(keypair.pubkey()))
1234567keypair = Keypair()
while(str(keypair.pubkey())[:5]!=""elv1s"") :
    keypair = Keypair()
123// clang++ vanity_keypair.cpp -o vanity_keypair -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  auto key_pair = Keypair::generate();

  while (key_pair.public_key.to_base58().substr(0, 5) != ""elv1s"") {
    key_pair = Keypair::generate();
  }

  std::cout << ""Created Keypair with Public Key: "" << key_pair.public_key.to_base58() << std::endl;
}
123456789101112131415auto key_pair = Keypair::generate();
while (key_pair.public_key.to_base58().substr(0, 5) != ""elv1s"") {
    key_pair = Keypair::generate();
}
1234solana-keygen grind --starts-with e1v1s:1
1solana-keygen grind --starts-with e1v1s:1
1# How to sign and verify messages with walletsThe primary function of a keypair is to sign messages and enable verification of the signature. Verification of a signature allows the recipient to be sure that the data was signed by the owner of a specific","[-2.08250117e-02 -2.93708444e-02 -1.22355344e-02 -2.92934533e-02
 -6.78913817e-02  2.03360356e-02  2.32260283e-02  4.37151343e-02
 -3.52752069e-03  1.44284284e-02  8.34842473e-02  2.46489234e-02
  5.16748466e-02 -9.36857462e-02  5.30674160e-02 -5.79555426e-03
 -1.13935240e-01  1.22827170e-02 -5.29040396e-02 -2.34917235e-02
  1.16907008e-01 -1.10547125e-01  5.45736104e-02 -2.39017513e-02
  7.23811425e-03  5.45928925e-02  4.63117361e-02  2.39683092e-02
 -1.90452095e-02 -3.71901989e-02  8.02748576e-02  4.39253971e-02
  6.15712143e-02  5.38520217e-02 -1.55569986e-02  8.74729529e-02
 -4.38338555e-02  2.41010304e-04 -8.16506334e-03  2.70327702e-02
 -2.76853330e-02 -3.62706296e-02 -5.08693978e-02  2.22547650e-02
 -1.33412378e-03  3.34324762e-02 -5.50222062e-02  3.97409359e-03
  2.58812606e-02  9.29211676e-02 -9.59579721e-02  1.19973570e-02
  1.75596047e-02 -4.32272907e-03  2.95995525e-03  3.12128086e-02
  1.70826055e-02  2.20343601e-02  4.44191806e-02 -6.06409423e-02
  2.90668458e-02 -1.17774662e-02 -1.44170532e-02 -4.17070352e-02
 -3.19613405e-02 -2.06358600e-02  9.92166717e-03 -2.84625497e-02
  5.17256185e-02 -2.79368181e-02  1.22372694e-02  1.91112533e-02
 -2.29495540e-02  4.65804525e-02 -3.71435508e-02  1.43564362e-02
 -5.90429222e-03 -5.34861870e-02  1.36494515e-02 -1.31558878e-02
 -1.25971824e-01 -4.64967489e-02  2.15653256e-02  6.81922585e-02
  6.44114092e-02  4.64407168e-02  2.44581122e-02  2.79938150e-02
 -1.53508298e-02  1.97004783e-03 -6.22040145e-02 -3.39132994e-02
  1.78959197e-03 -2.44682375e-02  5.53228930e-02  3.45855318e-02
  2.87390146e-02 -5.30219525e-02 -1.00837156e-01  5.83586954e-02
  2.41362937e-02  5.95765039e-02 -5.09197116e-02 -5.42686619e-02
  1.03965521e-01 -5.44117056e-02  4.34449315e-02 -7.27438368e-03
 -1.56417079e-02  1.72372088e-02 -1.45857958e-02  7.58587345e-02
  1.95013490e-02  5.27572781e-02 -4.39869519e-03  9.96734649e-02
 -3.35572921e-02  2.81406082e-02  1.59768797e-02  4.64263223e-02
  5.61507307e-02 -3.46872886e-03 -5.71247265e-02  2.69001126e-02
 -1.16143681e-01 -2.93352269e-02  4.28740717e-02  8.97451439e-33
 -4.71065640e-02  4.96883271e-03 -8.25669803e-03 -5.51806018e-02
  2.46537346e-02 -2.66606007e-02  3.42218503e-02 -7.13695493e-03
 -9.22507495e-02 -2.92449538e-02 -1.08470254e-01 -5.07860407e-02
  1.23067461e-02  4.82930802e-02 -2.45517120e-02 -9.02683139e-02
 -2.99790241e-02  6.01209253e-02  6.95160404e-02  1.29906964e-02
  1.79754198e-02  1.64574217e-02  2.34704185e-02 -5.62886223e-02
 -7.35748485e-02  2.76199747e-02 -1.19905071e-02  4.03569527e-02
  9.77852941e-02  2.10390743e-02  2.55540013e-02 -3.79750803e-02
 -1.03063740e-01 -8.59861299e-02 -1.85315241e-03 -3.57828587e-02
  1.51639199e-02 -4.35033217e-02 -1.13558680e-01 -6.63944930e-02
  5.45178615e-02 -2.93076877e-02  1.18073802e-02 -2.58657206e-02
 -6.36185473e-03  1.54446764e-02  2.59645917e-02  8.65200087e-02
  1.36812879e-02  3.09047792e-02 -4.04773168e-02  4.30394523e-02
  8.29568692e-03  5.53145353e-03 -5.40365763e-02 -4.73753326e-02
  6.94641471e-02  2.51001655e-03 -4.38902639e-02  1.58739346e-03
  6.53108805e-02  7.01359659e-02  1.28743336e-01  6.41664863e-02
  5.15954047e-02 -5.39176948e-02  9.65111889e-03 -7.47789592e-02
  5.92671940e-03  9.66206100e-03 -2.89681032e-02 -2.24629864e-02
 -6.89334944e-02 -1.77448872e-03 -9.02691185e-02 -3.03355530e-02
  1.74288787e-02 -8.53341538e-04 -4.80615124e-02 -8.69329572e-02
  7.48394355e-02  1.69357955e-02 -8.20643753e-02 -1.07999658e-02
 -7.48927221e-02  6.25347346e-02  3.14396247e-02 -8.46949667e-02
 -1.95088377e-03 -5.60756288e-02 -6.60996214e-02 -7.90029019e-02
 -2.86515355e-02 -2.70389915e-02 -2.74953549e-03 -9.74455356e-33
 -1.35062914e-02  1.07135046e-02  7.29487613e-02  7.34841004e-02
 -4.23339568e-02  2.56402269e-02  3.55489701e-02 -4.25894000e-02
 -3.27525064e-02 -1.92795857e-03 -8.13387334e-03  1.89526305e-02
  6.83552921e-02 -5.45620322e-02  8.86101201e-02  1.16865654e-02
  3.44838649e-02  1.15935363e-01  7.47946873e-02 -1.77106466e-02
 -9.94143933e-02  4.74825352e-02 -4.46342975e-02  1.20943733e-01
 -4.12383564e-02  8.28684866e-02  3.72595079e-02  6.56296015e-02
 -1.24220200e-01 -2.80655771e-02  6.53804615e-02  2.90211141e-02
 -7.81587139e-02  1.82281863e-02 -4.27091457e-02 -3.82568315e-02
 -3.91931739e-03 -3.71697471e-02  2.05368884e-02 -5.38792834e-03
  6.41903132e-02 -2.71535236e-02 -1.91693043e-03  3.90677946e-03
 -2.52249409e-02 -9.35234874e-02 -1.99785028e-02  5.04274257e-02
  2.73774322e-02  6.18106015e-02  9.02594775e-02  8.07451550e-03
 -4.54349518e-02 -5.35062440e-02 -2.42493656e-02  8.02822858e-02
 -9.59365293e-02  3.83333787e-02  2.89278403e-02 -6.56604394e-02
 -1.11279801e-01  1.67834535e-02  3.75460684e-02  1.35656707e-02
  5.77236265e-02 -6.58308491e-02 -2.77292859e-02  3.41751217e-03
 -4.12381403e-02 -3.28116901e-02 -1.32956193e-04  1.10787146e-01
  9.15102139e-02  2.94735841e-02  7.38161132e-02 -3.22246179e-02
 -5.40701412e-02  1.83126871e-02 -2.70369817e-02 -3.26122195e-02
  2.74053146e-03 -3.61501127e-02  2.40484159e-02  6.58979267e-02
 -3.96468863e-02 -2.72707362e-02  4.51177768e-02  8.26598853e-02
 -6.64950442e-03 -4.35108468e-02  2.58366987e-02 -1.21444436e-02
 -9.28689074e-03  7.64904693e-02  6.60430416e-02 -5.73732670e-08
  5.77533282e-02  2.32184827e-02  3.99689795e-03  3.52111794e-02
 -2.06887047e-03 -1.22643439e-02 -4.40398194e-02 -8.92503038e-02
 -3.14735435e-02 -4.11404260e-02  9.77097824e-03  8.21428299e-02
 -8.13785419e-02  4.28862609e-02 -5.64707164e-03  1.63939744e-02
 -5.69472276e-02  2.25433856e-02 -3.14262286e-02  1.29703032e-02
  4.07019369e-02 -9.53025222e-02  3.32431383e-02  1.52416816e-02
  1.66891683e-02  1.46524850e-02  2.91550886e-02  4.91568260e-02
  9.38973427e-02  2.65569221e-02  7.21387565e-02 -1.82265248e-02
  3.84634212e-02 -2.74293572e-02 -4.02746908e-02  2.33394988e-02
 -6.89515322e-02  6.55063689e-02  4.30137701e-02  7.10175633e-02
 -5.76236956e-02 -6.54927567e-02 -1.06782548e-01 -2.51091365e-02
 -1.23004846e-01 -5.07626198e-02 -7.15896711e-02  5.40950894e-02
 -3.58530991e-02  6.20485581e-02 -9.22990367e-02  2.58622468e-02
  4.62945439e-02 -4.76450361e-02 -3.63159068e-02 -1.31700758e-03
 -4.97942790e-02 -4.29042988e-02  5.00518791e-02  1.77089702e-02
  2.15039845e-03  1.76125560e-02 -7.88730755e-02 -4.97882478e-02]"
"private key.To do so we will import the TweetNaClopen in new window crypto library.TSPythonPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";
import nacl from ""tweetnacl"";
import { decodeUTF8 } from ""tweetnacl-util"";

(async () => {
  const keypair = Keypair.fromSecretKey(
    Uint8Array.from([
      174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
      222, 53, 138, 189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
      15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
      121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
    ])
  );

  const message = ""The quick brown fox jumps over the lazy dog"";
  const messageBytes = decodeUTF8(message);

  const signature = nacl.sign.detached(messageBytes, keypair.secretKey);
  const result = nacl.sign.detached.verify(
    messageBytes,
    signature,
    keypair.publicKey.toBytes()
  );

  console.log(result);
})();
1234567891011121314151617181920212223242526const message = ""The quick brown fox jumps over the lazy dog"";
const messageBytes = decodeUTF8(message);

const signature = nacl.sign.detached(messageBytes, keypair.secretKey);
const result = nacl.sign.detached.verify(
  messageBytes,
  signature,
  keypair.publicKey.toBytes()
);

console.log(result);
1234567891011from solders.keypair import Keypair

secret_key =  [
      174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138, 189, 224, 216, 117,
      173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240,
      121, 121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
    ] 
keypair = Keypair.from_bytes(secret_key)
message = b""The quick brown fox jumps over the lazy dog""
signature = keypair.sign_message(message)
verify_sign = signature.verify(keypair.pubkey(), message)

print(verify_sign) # bool
12345678910111213message = b""The quick brown fox jumps over the lazy dog""
signature = keypair.sign_message(message)
verify_sign = signature.verify(keypair.pubkey(), message)

print(verify_sign) # bool
12345# How to connect to a walletSolana's wallet-adapteropen in new window libraries make it easy to manage wallet connections client-side.# ReactRun the following command to install the required dependencies:yarn add @solana/wallet-adapter-react @solana/wallet-adapter-react-ui @solana/wallet-adapter-base @solana/wallet-adapter-wallets
1The React wallet-adapter libraries allow us to persist and access wallet connection states through hooks and Context providers, namely, useWallet, WalletProvider, useConnection, and ConnectionProvider. The React App must be wrapped with WalletProvider and ConnectionProvider.Additionally, we can prompt users to connect by using useWalletModal to toggle visibility of the connection modal and wrapping the App with WalletModalProvider from @solana/wallet-adapter-react-ui, as well. The connection modal will handle that connection flow for us, so we can just listen for when a wallet has connected. We know a wallet is connected when the useWallet response has a non-null wallet property. Vice versa, if that property is null, we know the wallet is disconnected.TSPress </> button to view full sourceimport React, { useMemo, FC, PropsWithChildren } from ""react"";
import {
  ConnectionProvider,
  WalletProvider,
} from ""@solana/wallet-adapter-react"";
import { WalletModalProvider } from ""@solana/wallet-adapter-react-ui"";
import { WalletAdapterNetwork } from ""@solana/wallet-adapter-base"";
import {
  LedgerWalletAdapter,
  PhantomWalletAdapter,
  SlopeWalletAdapter,
","[-8.56761858e-02  1.82441827e-02 -1.18163735e-01  1.06187901e-02
 -2.88676247e-02 -2.22613197e-02  4.38597687e-02  4.76074554e-02
  5.89117408e-02  3.94552983e-02 -3.44135538e-02 -7.17957923e-03
  5.13108410e-02  9.77125391e-03  1.48735372e-02 -5.81800416e-02
 -1.74582601e-01 -6.97882939e-03  9.43211839e-03 -1.54221088e-01
  7.17594922e-02  1.17082312e-03  3.34355012e-02  1.67130306e-02
  3.07676215e-02  4.75207198e-04  6.67180819e-03  3.24152708e-02
  7.88985344e-04  3.43334302e-02 -4.45146859e-03 -2.51119286e-02
 -9.30353440e-03 -1.66615937e-02 -1.00679502e-01  4.59543318e-02
 -7.54094943e-02  6.83028549e-02  6.57940283e-02  1.44089432e-02
  3.35254264e-03  5.12164133e-03 -1.08502485e-01  3.45328711e-02
 -2.35678479e-02 -2.69679055e-02 -1.61906742e-02 -1.58038996e-02
 -3.00500318e-02  8.16833004e-02 -4.26729433e-02  4.70348373e-02
 -5.64178601e-02  1.15649784e-02 -3.65406387e-02 -2.88768578e-02
 -7.02820197e-02 -5.90091199e-02  1.23575963e-01  3.07320934e-02
  5.06818667e-02  4.26688865e-02  5.70779666e-02  7.68788857e-03
  6.81098402e-02  4.94242907e-02 -4.77465726e-02  1.59267224e-02
  6.66183513e-03 -4.23253588e-02  9.03034408e-04 -4.08899784e-02
  6.25177845e-02  2.07530167e-02 -8.56750533e-02 -5.01853935e-02
  7.26832030e-03 -6.24500774e-02 -1.10897958e-01  9.49525386e-02
  5.17353714e-02 -3.98566350e-02  6.32314458e-02  1.24099813e-01
  5.69955632e-02  4.76520509e-02 -2.09111124e-02  1.89507324e-02
  9.14047938e-03  7.20677301e-02 -1.26686404e-02  5.14978403e-03
  5.18509783e-02  2.08637919e-02  1.37299569e-02  4.48828489e-02
  2.49178731e-03 -4.92436141e-02 -1.02867998e-01  7.03201592e-02
 -3.94619517e-02 -2.48755869e-02 -3.93741131e-02 -4.64426875e-02
  5.16876876e-02  5.37699535e-02  6.14181310e-02 -8.76985937e-02
  1.54349236e-02  5.08541465e-02 -2.77630775e-03  1.16471909e-01
  2.12522577e-02 -3.49479243e-02  1.59021504e-02  4.64081429e-02
 -3.64380963e-02  4.62121665e-02  1.24002568e-01  5.27778305e-02
  5.86976968e-02  3.28644477e-02 -6.18688576e-02  5.20341732e-02
  4.07050103e-02  2.11233087e-02  2.73745786e-02 -1.90836457e-35
  4.17685919e-02  6.66865334e-02  3.54289985e-03  1.10567184e-02
 -2.86996439e-02  1.13992533e-02  2.78511569e-02  9.01874097e-04
 -1.10447079e-01 -5.28808497e-03 -7.58771896e-02 -1.48471752e-02
 -1.52084231e-02 -6.23993725e-02 -5.61284758e-02 -3.51061337e-02
 -3.66320647e-02  3.16889808e-02  8.45922914e-04 -5.71219474e-02
 -5.81409968e-02  6.07266799e-02  2.81828977e-02  1.37174791e-02
  1.51891215e-02  5.92301413e-02  1.87275223e-02 -2.62973774e-02
 -1.50495656e-02  2.88427733e-02 -9.01227759e-04  5.36434911e-02
 -1.09599784e-01 -3.61767821e-02  1.13576174e-01 -8.61042589e-02
  4.40649595e-03 -3.58788739e-03 -5.12013286e-02 -4.64994572e-02
  1.91188343e-02 -9.81281046e-04 -2.99234241e-02 -4.27025184e-02
 -1.00142099e-01  3.83026190e-02  3.58960195e-03  3.92604880e-02
  4.54057083e-02  4.77673821e-02 -5.57880923e-02  3.70429531e-02
 -1.02035291e-01 -6.34036437e-02 -2.72087064e-02 -5.49591333e-02
  9.80336405e-03  7.57366791e-03  1.21955447e-01  2.82846466e-02
  2.24767514e-02 -2.05947906e-02  3.59754786e-02 -2.18485370e-02
  3.80790490e-03  5.08441813e-02 -8.52807239e-02 -3.72610055e-02
 -4.68780063e-02 -5.38715236e-02 -3.50501537e-02  2.78987829e-02
  1.75669976e-02  1.94883235e-02  2.26684962e-03  1.37129910e-02
  3.77948000e-03  1.91855486e-02  2.24196333e-02 -8.66183564e-02
  2.98794359e-02 -7.17578977e-02  1.97580326e-02 -1.30718620e-02
  5.78571595e-02  1.08932611e-02 -1.56981393e-03 -4.88329083e-02
 -2.22089216e-02 -2.15177573e-02 -4.27390002e-02 -3.04052755e-02
 -8.67664739e-02 -9.13658589e-02 -1.02114446e-01 -3.87812897e-34
  6.63814892e-04 -1.85794961e-02 -7.44538680e-02  1.12295058e-02
 -1.97232775e-02 -2.30906792e-02 -9.48007870e-03  5.51746925e-03
  2.84832716e-02  7.67449886e-02  5.99953905e-02 -2.03167144e-02
  3.26567702e-02 -7.22408742e-02  8.85397792e-02 -1.57843195e-02
  8.17558318e-02  5.77471294e-02 -4.52716500e-02 -8.73456001e-02
 -6.56678379e-02 -3.45276073e-02 -9.42840576e-02  5.56923784e-02
  2.64948308e-02  3.28442119e-02  5.43771349e-02  6.21133000e-02
 -1.31577824e-03  5.22522908e-03 -2.65887175e-02  3.55488732e-02
 -3.78943197e-02  4.48718257e-02 -6.79178461e-02  9.31499060e-03
  4.66008158e-03 -1.43544539e-03 -1.27346171e-02  2.41235103e-02
  1.01729751e-01 -6.48717284e-02  2.66135503e-02  2.21789461e-02
 -5.81906773e-02  4.56244424e-02 -2.00382695e-02  6.00974783e-02
 -1.84309762e-02  2.85581965e-02  1.62275910e-01  1.92658545e-03
 -3.37828472e-02 -6.88750073e-02 -1.21195556e-03  6.74220920e-03
  1.26555981e-02 -8.98608379e-03 -2.11336538e-02 -7.73799121e-02
  5.62973469e-02 -6.10773712e-02  4.52957079e-02 -3.41130830e-02
  7.01922402e-02 -1.02746636e-01 -5.29741906e-02  2.51723398e-02
 -2.65776482e-03  4.55741584e-02  7.52225146e-02 -6.76807091e-02
  6.62577897e-02 -3.24821547e-02  7.28642941e-02 -3.60798426e-02
  4.58838344e-02  3.86345610e-02  4.60284911e-02 -2.44016107e-02
  1.67689528e-02  1.02583272e-02  1.10618889e-01 -4.95085642e-02
  4.88040783e-02  2.59091202e-02  5.15386462e-02  1.51187181e-02
 -1.54459653e-02  1.10727120e-02 -5.51167130e-03  8.34501386e-02
  4.59455769e-04  4.50162105e-02  1.79124907e-01 -5.37078186e-08
 -5.83133027e-02 -1.54480115e-02 -8.95209610e-02  5.07122874e-02
 -7.66142691e-03  4.68124151e-02  2.15949006e-02 -4.51642409e-04
 -4.42412170e-03 -4.05813307e-02  5.07326387e-02 -4.13081609e-03
  1.41940685e-02  1.83269903e-02 -4.61312048e-02  4.44949046e-02
 -1.00816607e-01 -1.58735774e-02  1.21431155e-02 -1.10081770e-02
  9.01967939e-03 -1.24176918e-02  6.39067171e-03 -3.65992710e-02
  1.66296642e-02  2.57491171e-02 -9.51487049e-02  2.36633103e-02
  2.19515190e-02 -3.69531028e-02 -3.22334692e-02 -6.98393807e-02
  5.47234144e-04 -3.74093689e-02 -8.05466771e-02  3.71365286e-02
 -7.42511451e-02 -3.11934538e-02 -4.02168371e-02  5.59209324e-02
  9.27363802e-03 -1.52832726e-02 -9.70522985e-02  2.74378899e-02
 -1.04327604e-01  5.04985973e-02 -1.21481158e-02  5.25776744e-02
  2.78194193e-02  3.08961666e-04  1.06231170e-02 -1.22877704e-02
  1.13706309e-02 -8.67879775e-04 -1.24826981e-02 -1.28793744e-02
  6.45040418e-04  1.13358919e-03 -7.06775859e-03 -5.78872627e-03
  5.19578867e-02  1.70961656e-02 -2.79223677e-02 -2.02407446e-02]"
" TorusWalletAdapter,
} from ""@solana/wallet-adapter-wallets"";
import { clusterApiUrl } from ""@solana/web3.js"";
import { useWallet } from ""@solana/wallet-adapter-react"";
import { useWalletModal } from ""@solana/wallet-adapter-react-ui"";
import { MouseEventHandler } from ""react"";

export const Web3Provider: FC<PropsWithChildren<{}>> = ({ children }) => {
  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'
  const endpoint = useMemo(
    () => clusterApiUrl(WalletAdapterNetwork.Devnet),
    []
  );

  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --
  // Only the wallets you configure here will be compiled into your application
  const wallets = useMemo(
    () => [
      new PhantomWalletAdapter(),
      new SlopeWalletAdapter(),
      new TorusWalletAdapter(),
      new LedgerWalletAdapter(),
    ],
    []
  );

  return (
    <ConnectionProvider endpoint={endpoint}>
      <WalletModalProvider>
        <WalletProvider wallets={wallets}>{children}</WalletProvider>
      </WalletModalProvider>
    </ConnectionProvider>
  );
};

/**
 * Make sure to wrap the App with
 * ConnectionProvider, WalletProvider, and WalletModalProvider.
 *
 * If you have a lot of Providers already, you can combine them
 * into a single wrapper (i.e. Web3Provider) instead.
 */
export const App = () => {
  return (
    <Web3Provider>
      <AppChild />
    </Web3Provider>
  );
};

const AppChild = () => {
  const { wallet } = useWallet();
  const { setVisible } = useWalletModal();

  // Display the connection modal
  const onRequestConnectWallet = () => {
    setVisible(true);
  };

  // Prompt user to connect wallet
  if (!wallet) {
    return <button onClick={onRequestConnectWallet}>Connect Wallet</button>;
  }

  return (
    <main>
      <p>Wallet successfully connected!</p>
      <p>{wallet.publicKey.toString()}</p>
    </main>
  );
};
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182const { wallet } = useWallet();
const { setVisible } = useWalletModal();

const onRequestConnectWallet = () => {
  setVisible(true);
};

// Prompt the user to connect their wallet
if (!wallet) {
  return <button onClick={onRequestConnectWallet}>Connect Wallet</button>;
}

// Displays the connected wallet address
return (
  <main>
    <p>Wallet successfully connected!</p>
    <p>{wallet.publicKey.toBase58()}</p>
  </main>
);
12345678910111213141516171819# VueRun the following command to install the required dependencies:npm install solana-wallets-vue @solana/wallet-adapter-wallets
1The Solana Wallets Vueopen in new window plugin allows us to initialise a wallet store and create a new $wallet global property that can be accessed inside any component. All the properties and methods you can get from useWallet() are displayed hereopen in new window. We also import and render the WalletMultiButton component to allow users to select a wallet et connect to it.VuePress </> button to view full source<script setup>
import { WalletMultiButton } from ""solana-wallets-vue"";
import {
  LedgerWalletAdapter,
  PhantomWalletAdapter,
  SlopeWalletAdapter,
  TorusWalletAdapter,
} from ""@solana/wallet-adapter-wallets"";
import { initWallet, useWallet } from ""solana-wallets-vue"";

const wallets = {
  wallets: [
    new PhantomWalletAdapter(),
    new SlopeWalletAdapter(),
    new TorusWalletAdapter(),
    new LedgerWalletAdapter(),
  ],
};
initWallet(wallets);

const { connected, wallet } = useWallet();
</script>

<template>
  <div>
    <p","[-5.81035465e-02 -3.20273377e-02 -6.87394813e-02  1.22528579e-02
  9.54887196e-02 -6.95864037e-02 -2.56784074e-02  1.54984426e-02
 -3.20605300e-02 -1.04152877e-03  4.05740999e-02 -5.83668128e-02
 -1.53542273e-02  9.16871242e-03  5.66471070e-02  3.91948558e-02
 -9.31054950e-02 -1.22292116e-02  8.53595436e-02  1.86595973e-02
 -2.37874202e-02 -6.04163781e-02  5.92396334e-02 -2.54800152e-02
 -2.03065015e-02  7.18044266e-02  1.00543294e-02 -6.01033010e-02
 -1.84029918e-02 -2.01539341e-02  1.69989057e-02  5.69421165e-02
 -6.47483319e-02  1.34347118e-02 -3.44409794e-02  7.50363544e-02
  1.20206252e-02  3.12058125e-02 -4.51898724e-02 -2.90132947e-02
  6.83572888e-02  1.26388401e-01  8.65484029e-03 -5.51331900e-02
 -2.91735167e-03 -6.65938929e-02 -6.05084971e-02  1.83348246e-02
 -4.69822623e-03 -1.74076315e-02 -3.31174247e-02 -4.37147319e-02
 -2.84018312e-02  2.19438002e-02  1.81245257e-03  7.24730864e-02
  8.33766535e-02 -3.90531059e-04  8.65666643e-02 -9.00844261e-02
  1.24292433e-01  1.74720082e-02  3.24334390e-02 -2.77138017e-02
 -1.20183788e-02  2.23217569e-02  2.94793025e-02  3.59840132e-02
  5.15160076e-02 -6.07927442e-02 -2.46511567e-02  3.01686488e-03
 -1.40182197e-03 -2.26732399e-02 -1.61886308e-02  1.54894013e-02
  8.22317079e-02  3.62319425e-02  2.79873982e-02  2.73643192e-02
 -5.92121594e-02 -4.04314213e-02  2.98415516e-02 -1.08789292e-03
  1.25073167e-02  6.72247037e-02 -7.62738287e-02 -1.96345206e-02
  3.33961993e-02 -3.89760397e-02 -4.50972430e-02 -1.07889529e-02
 -6.09961748e-02 -7.69661181e-03  7.25989416e-03 -2.05227453e-02
 -1.58833712e-02  5.32915303e-03 -1.10096328e-01  6.88840747e-02
  4.64791879e-02 -5.21984883e-02  2.55683810e-02  2.78755929e-02
 -3.44106331e-02 -2.74709631e-02  9.92982462e-03 -1.09687954e-01
 -5.80358803e-02  1.17046505e-01 -5.50565012e-02  6.90948144e-02
  4.99748327e-02  7.78578315e-03 -8.35868493e-02  6.62633730e-03
  2.19551194e-02  6.25392376e-03  4.81427722e-02  9.79603976e-02
  7.61928931e-02  6.84203207e-02  1.39628956e-02 -2.26783026e-02
  5.90800904e-02  4.44543138e-02 -8.18441063e-02  6.02292449e-33
  2.05838792e-02 -6.60997033e-02  2.09464394e-02  4.83079031e-02
  1.05070755e-01 -5.14789447e-02  2.66755708e-02 -5.54769225e-02
 -7.22428188e-02 -5.48048988e-02 -9.38434005e-02  2.08724476e-02
  7.10102683e-03 -8.18853825e-03 -1.99741181e-02 -7.27747753e-02
  4.69911005e-03 -7.18795089e-03  7.27679506e-02 -2.53163557e-02
 -8.98270458e-02 -8.10906664e-02  4.23945673e-03 -7.72968382e-02
  7.16552511e-02 -1.72131173e-02 -1.86932005e-03  1.18929788e-01
  6.75029010e-02 -1.05436742e-02  5.14715351e-02 -1.77191235e-02
 -5.71687184e-02  9.35371593e-03 -4.16799523e-02  3.47258733e-03
  5.21795545e-03 -7.69691318e-02 -9.82287601e-02 -6.55768346e-03
 -2.68275030e-02 -3.77687952e-03 -1.48260174e-02  2.84907892e-02
  5.42604811e-02  7.48886075e-03  6.60798773e-02  2.69650891e-02
  2.82718353e-02  3.51799875e-02 -1.03995331e-01 -3.06719244e-02
 -5.17015904e-02 -8.42137337e-02 -2.76557952e-02 -2.53244136e-02
  5.68228029e-02  1.61063261e-02  2.28197388e-02  2.04676185e-02
 -3.18239182e-02 -5.11797145e-02 -9.44409519e-04 -4.66543697e-02
  3.76474597e-02  1.28093049e-01 -6.07054792e-02  5.19888438e-02
 -5.33468509e-03 -4.51557152e-02 -2.55978259e-04  3.98883969e-02
 -8.47951975e-03  9.94996876e-02 -5.21365516e-02  2.78514475e-02
 -7.59252999e-03  6.14694655e-02 -1.11163475e-01 -5.97315393e-02
 -2.44163815e-02 -2.31401878e-03  2.10250616e-02  1.20072432e-01
  3.93749774e-02 -8.05316716e-02  3.46686803e-02 -1.10606346e-02
  9.08936467e-03  5.01041999e-03  3.04467361e-02  2.22499762e-02
  4.75407615e-02 -7.24250674e-02 -4.51492779e-02 -6.74331224e-33
 -6.36336282e-02 -4.42129076e-02 -2.26087179e-02 -1.76062956e-02
  1.84500795e-02  4.09080461e-03 -3.51832062e-02 -8.56677070e-03
 -1.81913120e-03 -8.50098804e-02 -7.72975059e-03  1.38989100e-02
  7.31911287e-02 -8.03644881e-02 -4.23477665e-02  1.11544915e-01
  3.28069068e-02 -2.23950762e-02  7.03347698e-02 -7.51038194e-02
  4.39297631e-02  2.85320170e-02  2.14396184e-03 -1.37280338e-02
 -2.73381174e-02 -3.45812999e-02  2.56490428e-02  9.24890512e-04
 -4.51504774e-02 -4.09262478e-02  6.43458888e-02 -1.21260416e-02
 -5.31431586e-02  3.28104496e-02  2.55832598e-02  7.60998530e-03
 -3.26026790e-02 -1.33351451e-02 -1.24152647e-02 -1.42643659e-03
  3.76873538e-02  2.25990359e-02 -4.44361418e-02  3.50747071e-02
 -1.56682208e-02 -5.63526750e-02 -7.80166709e-04 -6.46599904e-02
 -5.69401830e-02  5.40297478e-02  1.35687944e-02 -8.33868235e-02
 -8.18270445e-03 -4.84660454e-03 -9.28647816e-03  1.08896673e-01
  8.22150111e-02  6.91125542e-02  4.61640991e-02 -4.19063270e-02
  4.86413725e-02 -1.25232890e-01 -1.21479459e-01  1.06681781e-02
  5.98582663e-02 -7.72087276e-02 -8.97086412e-02  1.07488211e-03
  1.43376281e-02  6.74953610e-02  8.72245058e-03  8.24433938e-02
  7.45270699e-02  1.09153530e-02  2.33016741e-02 -6.22205343e-03
  6.58511296e-02 -1.32671208e-04  5.06755672e-02 -2.43822597e-02
 -7.30799884e-02  2.74580754e-02  2.59007402e-02 -1.89703722e-02
  3.68766487e-02 -5.25340587e-02  3.55330892e-02  7.48015270e-02
  3.97916026e-02  2.83605065e-02 -4.16792780e-02 -2.53232904e-02
 -9.78333224e-03  8.83283541e-02  5.47456816e-02 -5.60131852e-08
 -3.63843428e-04  1.11204674e-02 -1.22888274e-01  3.45655921e-04
 -5.23090474e-02  5.38351461e-02  6.03896268e-02 -5.77359945e-02
 -3.84241045e-02  3.82607020e-02 -3.68047841e-02  9.40473452e-02
 -1.83327477e-02  3.56236175e-02  2.56942995e-02  4.50398289e-02
 -2.77828835e-02  7.72927180e-02 -4.40572202e-02 -4.47203256e-02
  5.24500981e-02  4.97207977e-03 -1.92445926e-02  8.13720897e-02
  7.63808340e-02 -2.73115542e-02  2.27653962e-02  1.03099998e-02
 -3.85245942e-02 -8.62205103e-02 -1.05273895e-01 -3.17230001e-02
  1.23778144e-02 -6.44448698e-02 -6.14645258e-02  2.54959930e-02
 -6.60827532e-02  4.45762053e-02  1.01356573e-01  1.33674085e-01
 -2.24637836e-02 -3.30995172e-02 -8.99854228e-02 -2.00458709e-02
 -6.37859777e-02 -3.32096755e-03 -6.53038695e-02  6.81007579e-02
  4.79989871e-02  1.80179998e-02  2.25982741e-02 -1.40006952e-02
  1.87698957e-02 -3.03628738e-03  2.77704932e-02  6.10931544e-03
 -5.84607385e-02  3.96817401e-02  4.99529615e-02  7.29502062e-04
  1.75503343e-02  7.73938512e-03  1.03029246e-02 -1.35563314e-02]"
"v-if=""connected"">
      Wallet with public key {{ wallet.publicKey }} successfully connected!
    </p>
    <div v-else>
      <wallet-multi-button></wallet-multi-button>
    </div>
  </div>
</template>
123456789101112131415161718192021222324252627282930313233<script setup>
import { WalletMultiButton } from ""solana-wallets-vue"";
</script>

<template>
  <wallet-multi-button></wallet-multi-button>
</template>
1234567# SvelteRun the following command to install the required dependencies:npm install @svelte-on-solana/wallet-adapter-core @svelte-on-solana/wallet-adapter-ui @solana/wallet-adapter-base @solana/wallet-adapter-wallets @solana/web3.js
1The Svelte Wallet Adapteropen in new window package allows to add a Svelte Store ($walletStore) accessible among all the JS, TS or/and Svelte files inside a project done with Svelte Template or SvelteKit. Using the repo reference hereopen in new window you can be able to use the adapter for SSR or SPA. The UI package contains a <WalletMultiButton /> component to allow users to select a wallet to connect to it.SveltePress </> button to view full source<script>
  import { walletStore } from ""@svelte-on-solana/wallet-adapter-core"";
  import {
    WalletProvider,
    WalletMultiButton,
    ConnectionProvider,
  } from ""@svelte-on-solana/wallet-adapter-ui"";
  import { clusterApiUrl } from ""@solana/web3.js"";
  import {
    PhantomWalletAdapter,
    SolflareWalletAdapter,
    TorusWalletAdapter,
    LedgerWalletAdapter,
  } from ""@solana/wallet-adapter-wallets"";

  const localStorageKey = ""walletAdapter"";
  const network = clusterApiUrl(""devnet""); // localhost or mainnet

  let wallets = [
    new PhantomWalletAdapter(),
    new SolflareWalletAdapter(),
    new TorusWalletAdapter(),
    new LedgerWalletAdapter(),
  ];
</script>

<WalletProvider {localStorageKey} {wallets} autoConnect />
<ConnectionProvider {network} />

{#if $walletStore?.connected} Wallet with public key {$walletStore.publicKey}
successfully connected! {:else}
<WalletMultiButton />
{/if}
123456789101112131415161718192021222324252627282930313233<script>
  import { walletStore } from ""@svelte-on-solana/wallet-adapter-core"";
  import { WalletMultiButton } from ""@svelte-on-solana/wallet-adapter-ui"";
</script>

{#if $walletStore?.connected} Wallet with public key {$walletStore.publicKey}
successfully connected! {:else}
<WalletMultiButton />
{/if}
123456789 # Sending Transactions# How to send SOLTo send SOL, you will need to interact with the SystemProgramopen in new window.TSPythonWallet-AdapterRustCLIPress </> button to view full sourceimport {
  Connection,
  Keypair,
  SystemProgram,
  LAMPORTS_PER_SOL,
  Transaction,
  sendAndConfirmTransaction,
} from ""@solana/web3.js"";

(async () => {
  const fromKeypair = Keypair.generate();
  const toKeypair = Keypair.generate();

  const connection = new Connection(
    ""https://api.devnet.solana.com"",
    ""confirmed""
  );

  const airdropSignature = await connection.requestAirdrop(
    fromKeypair.publicKey,
    LAMPORTS_PER_SOL
  );

  await connection.confirmTransaction(airdropSignature);

  const lamportsToSend = 1_000_000;

  const transferTransaction = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: fromKeypair.publicKey,
      toPubkey: toKeypair.publicKey,
      lamports: lamportsToSend,
    })
  );

  await sendAndConfirmTransaction(connection, transferTransaction, [
    fromKeypair,
  ]);
})();
123456789101112131415161718192021222324252627282930313233343536373839const transferTransaction = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: fromKeypair.publicKey,
    toPubkey: toKeypair.publicKey,
    lamports: lamportsToSend,
  })
);

await sendAndConfirmTransaction(connection, transferTransaction, [fromKeypair]);
123456789from solana.rpc.api import Client
from solders.keypair import Keypair
from solana.transaction import Transaction
from solders.system_program import TransferParams, transfer

LAMPORT_PER_SOL = 1000000000

client: Client = Client(""https://api.devnet.solana.com"")

sender = Keypair()
receiver = Keypair()

airdrop = client.request_airdrop(sender.pubkey(), 1 * LAMPORT_PER_SOL)
airdrop_signature = airdrop.value
client.confirm_transaction(airdrop_signature)

transaction = Transaction().add(transfer(TransferParams(
    from_pubkey=sender.pubkey(),
    to_pubkey=receiver.pubkey(),
    lamports=1_000_000)
))

client.send_transaction(transaction, sender)
1234567891011121314151617181920212223transaction = Transaction().add(transfer(TransferParams(
    from_pubkey=sender.pubkey(),
    to_pubkey=receiver.pubkey(),
    lamports=1_000_000)
))

client.send_transaction(transaction, sender)

12345678import { WalletNotConnectedError } from ""@solana/wallet-adapter-base"";
import { useConnection, useWallet } from ""@solana/wallet-adapter-react"";
import { Keypair, SystemProgram,","[-1.70469675e-02 -4.25515920e-02 -1.15245320e-01 -9.04329494e-03
 -3.13839726e-02 -2.23421655e-03 -8.06331411e-02  4.14794590e-03
  2.98750233e-02 -7.11536827e-03  1.27313603e-02 -5.10384701e-02
 -7.98308924e-02  2.45585367e-02  1.13623783e-01  1.23966690e-02
 -1.07675172e-01 -2.94015575e-02  1.83072593e-02  7.72417337e-02
  1.26096010e-02 -8.34099501e-02  3.71184200e-02 -1.23849466e-01
 -3.49449925e-02  1.84528786e-03 -1.91223994e-03 -5.07718101e-02
 -5.76812811e-02  3.79851321e-03  1.06860481e-01  3.74860992e-03
  1.59662217e-02  1.50456717e-02 -1.47605943e-03  8.57682824e-02
  2.11028308e-02  6.53746054e-02 -4.82236482e-02 -6.91867853e-03
 -2.54841447e-02  5.29840812e-02 -5.75032085e-02 -4.82974946e-02
 -1.97752882e-02 -4.77498770e-02 -8.26853439e-02 -9.92532168e-03
 -2.98123956e-02 -1.55847594e-02 -4.28405702e-02 -8.89624134e-02
 -2.07724907e-02 -1.19334292e-02 -5.78256920e-02  2.38446482e-02
  7.05989897e-02  1.91517584e-02 -1.21065592e-02 -4.89216708e-02
  1.12551555e-01 -2.44798250e-02  3.34072374e-02 -4.51629646e-02
 -6.28674850e-02  1.31599167e-02  2.85124779e-02 -1.68533847e-02
 -2.91453730e-02 -5.40508963e-02 -3.02043594e-02 -3.83282639e-02
 -2.78963801e-02 -3.68776135e-02 -9.37046185e-02 -6.18872233e-02
  7.01502860e-02  2.00313423e-02  6.58826008e-02  2.66026915e-03
 -1.60909742e-02 -2.93445331e-03 -3.85293067e-02  5.05649559e-02
  5.82208335e-02  9.98256728e-02 -9.42992121e-02 -4.29473482e-02
  4.18148860e-02 -4.86655813e-03 -1.95145216e-02 -6.12866599e-03
 -8.37930571e-03 -2.00794525e-02  6.29742667e-02  1.85100399e-02
  2.63336636e-02  1.17340758e-01 -8.37220922e-02  9.07778274e-03
  3.81039642e-02 -9.82527528e-03 -1.25261554e-02 -4.33064587e-02
  1.09172881e-01 -3.56448144e-02  9.05382410e-02 -3.65771204e-02
 -2.50360612e-02  1.72329620e-02 -1.07703703e-02  5.87091409e-02
  8.08089301e-02 -5.26938140e-02 -5.25153019e-02  7.59041086e-02
  5.03870659e-02  1.03421405e-01  5.60380593e-02  7.15620890e-02
  2.71302033e-02  3.90739068e-02  1.05572967e-02 -8.17656368e-02
 -2.62876451e-02 -1.96788888e-02 -2.17216220e-02  6.01833345e-33
  1.28771532e-02  3.54679152e-02 -2.93572620e-02  2.75522540e-03
  1.53739396e-02 -5.10653704e-02  4.24585752e-02  8.68609454e-03
 -1.16210826e-01 -5.77291325e-02  1.28661394e-02 -4.04046290e-03
 -1.27906781e-02  1.84760690e-02 -8.22121873e-02  3.73351723e-02
 -1.14847452e-03  3.23856692e-03  1.50830615e-02 -7.65829235e-02
  3.34352739e-02 -1.02587499e-01  1.56719293e-02  2.87833698e-02
  2.00321563e-02  3.86789953e-03  1.07678724e-02  2.43196301e-02
  2.08638441e-02 -4.08188067e-02  2.23974083e-02  1.36216674e-02
 -4.38591056e-02  4.10701931e-02  4.72773910e-02 -4.99876961e-02
  1.07300812e-02 -2.23581959e-03 -1.09131970e-01  1.21203195e-02
  5.33643514e-02 -4.88588363e-02  1.73866060e-02 -3.33394594e-02
  4.76947948e-02  3.38030234e-02 -8.75976868e-03  8.61013532e-02
  8.01554620e-02  9.44050401e-03 -1.54266208e-01 -3.12325153e-02
 -6.28386140e-02  6.66879490e-03  6.07599644e-03 -2.53450032e-02
  2.90940842e-03  1.92271881e-02 -2.45727375e-02 -9.42917168e-02
 -3.07541192e-02  5.36151789e-03  5.33168204e-02  2.85353009e-02
  3.31660844e-02  2.00684951e-03 -2.76074670e-02  5.08491835e-03
 -1.12742735e-02 -3.80337215e-03  2.81161424e-02  7.61578698e-03
 -5.66231236e-02  2.62892786e-02  7.77371600e-03 -5.06013408e-02
  3.34918424e-02  6.52934164e-02  1.19355666e-02  3.05544082e-02
  9.87253338e-03 -6.39099441e-03  1.69543028e-02  3.07093635e-02
  4.25307527e-02  4.27166335e-02  3.80808413e-02 -3.39057446e-02
 -2.49240268e-02 -5.16814105e-02  5.32606095e-02 -1.24739334e-02
  6.54802099e-03 -1.39415860e-01 -5.04832491e-02 -5.80409887e-33
  2.91683059e-02  1.69774555e-02 -1.18903648e-02 -9.98637080e-03
  7.38340989e-03  8.98879543e-02 -2.55214591e-02 -1.50350528e-02
 -6.06063120e-02 -1.00684367e-01 -2.51299217e-02 -9.58633143e-03
  1.08667783e-01  4.13655974e-02 -3.81042110e-03  1.75587401e-01
  3.34043764e-02 -2.90767476e-03  3.88345309e-02 -8.45671818e-02
  4.76623438e-02  1.27661144e-02 -2.14131251e-02  6.56252056e-02
 -1.59138087e-02 -1.17235951e-01  4.20245826e-02 -1.17411977e-02
 -1.24434561e-01 -9.86433774e-03  7.99626112e-02 -2.27510687e-02
 -2.07938943e-02  6.11775443e-02  2.04468109e-02  3.45597751e-02
  2.42387340e-03 -9.15548764e-03 -2.90623512e-02  9.06559974e-02
 -7.12887794e-02 -5.93330413e-02 -6.70415536e-02 -6.58208597e-03
 -2.58329660e-02 -5.05274795e-02  2.45864820e-02  3.91570106e-03
 -2.05458719e-02  3.70366802e-03  3.72502878e-02 -7.90030509e-02
 -7.52817690e-02 -5.17286267e-03 -1.96816772e-02  6.71953484e-02
  1.49171138e-02  5.79226837e-02 -5.89994490e-02 -6.28887713e-02
  4.14217152e-02 -8.93082917e-02  4.47778404e-02  5.35131879e-02
  4.79539782e-02 -7.45476261e-02 -3.90229225e-02  3.86885256e-02
  3.53812575e-02 -4.07798514e-02 -2.10020766e-02  2.96430103e-02
  9.99644995e-02 -5.65219251e-03  1.78643316e-02  1.59943905e-02
  4.17175740e-02 -5.14475163e-03  6.99224249e-02 -1.97377410e-02
 -1.25958035e-02 -2.36230250e-02  7.70904198e-02  1.44776807e-03
  8.88941158e-03 -2.44842321e-02  5.73814586e-02  4.56613488e-03
 -5.45318350e-02  2.86362879e-02 -3.22855674e-02  8.13423097e-02
 -1.49375051e-02  6.81597218e-02  8.70952830e-02 -4.62592347e-08
  7.18479380e-02  2.45540217e-02 -1.14192627e-01 -1.25812860e-02
 -5.83943212e-03  3.72246802e-02  2.65937224e-02 -5.30322343e-02
 -4.68839258e-02  6.70451373e-02 -8.16050991e-02  9.02244449e-02
 -3.76933441e-02  8.57586414e-02 -1.62733570e-02 -7.50155479e-04
  1.59217622e-02  7.82762319e-02 -4.31302469e-03 -1.32061690e-02
  1.33589208e-01 -1.63196083e-02  3.93198878e-02  5.37715442e-02
  8.21089745e-02  3.48609872e-02 -6.98455498e-02 -3.42710391e-02
  3.39558162e-02 -6.54254854e-02  2.47884411e-02 -3.50199677e-02
  4.66103405e-02 -6.38568923e-02 -3.65284868e-02  3.04769352e-02
 -7.96245690e-03  4.16737497e-02  1.52653726e-02  7.65416771e-02
  4.69306111e-02 -6.48617819e-02 -6.88269734e-02  6.85804989e-04
 -6.38536364e-02  3.87109295e-02 -4.94497307e-02  9.77528933e-03
 -2.28040456e-03  1.73216332e-02  2.87961792e-02  2.37640589e-02
  1.23784184e-01  4.46694605e-02 -6.50171703e-03  2.57587563e-02
 -2.13970356e-02  1.27033710e-01  5.59105612e-02 -3.73902172e-03
  2.78863013e-02  3.72159039e-03 -1.50254536e-02 -2.16169022e-02]"
"Transaction } from ""@solana/web3.js"";
import React, { FC, useCallback } from ""react"";

export const SendTenLamportToRandomAddress: FC = () => {
  const { connection } = useConnection();
  const { publicKey, sendTransaction } = useWallet();

  const onClick = useCallback(async () => {
    if (!publicKey) throw new WalletNotConnectedError();

    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: publicKey,
        toPubkey: Keypair.generate().publicKey,
        lamports: 1_000_000,
      })
    );

    const signature = await sendTransaction(transaction, connection);

    await connection.confirmTransaction(signature, ""processed"");
  }, [publicKey, sendTransaction, connection]);

  return (
    <button onClick={onClick} disabled={!publicKey}>
      Send 1 lamport to a random address!
    </button>
  );
};
12345678910111213141516171819202122232425262728293031const transaction = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: publicKey,
    toPubkey: Keypair.generate().publicKey,
    lamports: 1_000_000,
  })
);

const signature = await sendTransaction(transaction, connection);

await connection.confirmTransaction(signature, ""processed"");
1234567891011use solana_client::rpc_client::RpcClient;
use solana_program::system_instruction;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::native_token::LAMPORTS_PER_SOL;
use solana_sdk::signature::{Keypair, Signer};
use solana_sdk::transaction::Transaction;

fn main() {
    let from = Keypair::new();
    let frompubkey = Signer::pubkey(&from);

    let to = Keypair::new();
    let topubkey = Signer::pubkey(&to);

    let lamports_to_send = 1_000_000;

    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    ///Airdropping some Sol to the 'from' account
    match connection.request_airdrop(&frompubkey, LAMPORTS_PER_SOL) {
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error requesting airdrop""),
    };

    ///Creating the transfer sol instruction
    let ix = system_instruction::transfer(&frompubkey, &topubkey, lamports_to_send);

    ///Putting the transfer sol instruction into a transaction
    let recent_blockhash = connection.get_latest_blockhash().expect(""Failed to get latest blockhash."");
    let txn = Transaction::new_signed_with_payer(&[ix], Some(&frompubkey), &[&from], recent_blockhash);

    ///Sending the transfer sol transaction
    match connection.send_and_confirm_transaction(&txn){
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
        ","[-5.32775372e-02 -2.02505961e-02 -9.50209945e-02  1.69441290e-02
 -4.32615429e-02 -3.15013528e-02  3.87023278e-02  2.26000827e-02
  7.51758739e-02 -1.92506763e-03  1.39218559e-02 -1.14703095e-02
  5.24205714e-03 -3.55948769e-02 -3.03623062e-02 -9.04759299e-03
 -4.85826433e-02 -9.86495465e-02 -1.42564001e-02  2.77862921e-02
  9.05134343e-03 -1.11614756e-01  6.41840175e-02 -3.81765813e-02
  1.47720920e-02 -6.84798583e-02  2.74701696e-02 -7.17381611e-02
 -5.54167219e-02  1.85783543e-02  5.75395487e-02  2.69670133e-02
 -8.05316195e-02 -1.07108332e-01 -5.33056892e-02  9.08523425e-02
 -4.28273790e-02 -4.72276472e-04 -5.25541184e-03 -2.91430820e-02
  4.63475939e-03  1.01817530e-02 -5.01556061e-02  5.74172884e-02
  5.92534319e-02 -5.56487255e-02 -1.31028900e-02  3.76424799e-03
 -2.48699002e-02  2.91012414e-03 -7.12918341e-02  7.39387423e-02
 -4.92114127e-02  4.34014350e-02  5.67597663e-03  3.70482057e-02
  8.90583247e-02  1.04266945e-02  6.49025838e-04 -6.58548251e-02
  1.35606200e-01 -2.37686876e-02  2.78156414e-03 -6.94660470e-02
 -2.85968352e-02  5.73996417e-02  1.52546102e-02 -2.86510922e-02
  2.89674848e-02 -1.47929462e-02  1.28987785e-02 -1.04650334e-02
 -7.17921108e-02  1.88883524e-02 -1.50769949e-02 -5.58009297e-02
  3.25869173e-02  4.92236651e-02 -5.74716590e-02  8.75508040e-02
 -2.14398578e-02 -1.26867995e-01  2.75541432e-02  9.00181755e-03
  7.88653363e-03  3.87892127e-02 -5.22018373e-02  8.31487402e-03
 -3.84325348e-02 -4.90614660e-02  3.10252700e-03  5.32686785e-02
 -1.90939642e-02 -2.13911664e-02  1.67264156e-02  7.14459165e-04
 -1.30043449e-02  5.57798892e-02 -1.44329257e-02  5.74326068e-02
  1.19023100e-01 -1.73942968e-02 -8.18390772e-02  1.04864687e-02
  3.10867541e-02 -5.51757310e-03  6.71755970e-02 -6.58569708e-02
 -4.11885865e-02  1.44313276e-02 -4.51125316e-02  4.88137379e-02
  1.57062914e-02  6.12569153e-02 -9.68213826e-02  1.09626733e-01
  1.49953617e-02  3.05708759e-02  2.77086459e-02  1.35169933e-02
  6.12305067e-02  5.98474704e-02 -3.24778110e-02 -6.25539795e-02
 -4.83179577e-02 -3.01123448e-02  6.50479943e-02  1.09533732e-32
  8.23861454e-03 -2.50955652e-02 -8.58608913e-03 -1.12562394e-02
  1.97165608e-02 -6.30853756e-05  6.10467978e-02 -5.54647744e-02
 -4.57269847e-02 -4.07008715e-02 -1.40825789e-02 -8.64337757e-02
  5.14130741e-02 -2.88744513e-02 -8.58104676e-02 -2.26085093e-02
  1.85092892e-02 -3.52188796e-02  1.13100633e-01 -2.28271913e-03
 -8.57151346e-04 -6.37222528e-02  3.82240377e-02 -1.22424988e-02
  3.79470140e-02 -3.94789316e-03 -1.02805264e-01  6.94898292e-02
 -7.26140104e-03 -8.86973459e-03  3.77389900e-02  5.24615264e-03
 -4.23288010e-02  7.69370049e-02  3.58888619e-02 -3.97023186e-02
 -4.33472171e-02 -4.55260724e-02 -9.98664796e-02 -5.88625893e-02
  1.35005508e-02 -1.15344943e-02 -9.17693973e-02  7.86966980e-02
 -2.17918996e-02  4.28638533e-02  1.31224431e-02  3.37952673e-02
  9.36884731e-02  2.21059211e-02 -1.04231969e-01  2.10271496e-03
  2.46602390e-02 -6.70156255e-02 -2.06691753e-02 -2.34275567e-03
  1.93082157e-03 -7.76143186e-03 -3.02332770e-02 -1.31804589e-02
 -3.72914299e-02 -6.56070039e-02  5.46359923e-04 -3.54817286e-02
  2.46142205e-02  3.28344218e-02 -8.76654238e-02  2.69116219e-02
 -9.64816567e-03 -5.33622392e-02  5.94005280e-04  5.38805798e-02
 -7.39398925e-03  7.49694705e-02 -1.58387031e-02 -5.74030634e-03
 -7.13180285e-03  1.14910332e-02 -6.34904057e-02 -3.43692675e-02
  2.73904577e-02 -2.92497948e-02 -2.33857310e-03  6.95643723e-02
  5.73285185e-02  1.10377491e-01 -2.67639812e-02 -2.82446221e-02
 -4.41646725e-02  6.72511533e-02  4.94727865e-02  6.57406216e-03
  4.46778983e-02 -3.57838906e-02 -3.32179293e-03 -1.17566722e-32
  1.04007479e-02 -2.64110938e-02 -6.18816018e-02  2.40702741e-02
 -1.07897457e-03  8.58225971e-02 -1.21326256e-03 -1.01930574e-02
 -3.52631286e-02 -3.48738842e-02 -2.70029134e-03  3.25373933e-02
  7.64017850e-02 -4.47469242e-02 -1.19028678e-02  4.55555459e-03
  6.50545657e-02 -2.86030862e-02 -3.64837942e-05 -5.46776168e-02
  6.46988451e-02  2.45140083e-02 -4.08270173e-02  3.08402404e-02
 -1.30112395e-01  5.38942683e-03 -2.04455052e-02  7.21805096e-02
 -7.52586126e-02 -3.52085866e-02  7.09048733e-02  3.20372246e-02
 -2.05998849e-02  6.92736134e-02 -1.38147536e-03 -3.80594693e-02
  4.27969098e-02  5.90613745e-02  2.86201704e-02  8.61232281e-02
  1.47452513e-02 -2.62840539e-02  2.08984595e-02  2.02122834e-02
 -1.44469477e-02 -4.95100766e-02 -5.25827520e-02 -3.20319049e-02
 -4.17452771e-03  7.55741969e-02  3.65133137e-02 -7.89789483e-03
 -4.34810035e-02 -5.06925993e-02  2.43312004e-03  1.32886246e-01
  6.26754016e-02 -4.76822294e-02  7.20048100e-02 -1.48565983e-02
  3.63277420e-02 -1.09946996e-01  3.54155824e-02  4.51944657e-02
  1.22855857e-01 -1.21435681e-02 -3.23718563e-02  8.06335434e-02
  8.91060904e-02  8.43623951e-02  1.95356831e-02  7.22342953e-02
  3.25221047e-02  1.29849860e-03  1.08135320e-01 -3.11271586e-02
 -3.98314297e-02 -4.19182591e-02  4.39149141e-02 -3.11816484e-03
  2.89914943e-02  2.82798130e-02  4.80072200e-02 -5.33279777e-02
 -4.13385499e-03 -5.35887182e-02  9.20873508e-03 -1.17627410e-02
 -3.48388515e-02 -6.07185401e-02 -3.66800092e-02 -1.95745602e-02
 -4.34824117e-02 -2.28409115e-02  3.34213860e-02 -6.73264395e-08
  2.03310959e-02  1.21925063e-02 -4.96109165e-02  3.77269424e-02
  1.93880647e-02  5.56756891e-02 -1.32049425e-02 -8.39574039e-02
 -4.76105399e-02 -2.08727010e-02 -1.14114709e-01  5.81501313e-02
 -7.92013202e-03 -4.29387391e-02 -3.84608074e-03 -5.79530299e-02
  1.43780988e-02 -5.99419549e-02 -6.34370446e-02 -8.39755386e-02
  4.81367558e-02 -6.91574216e-02 -1.94477942e-02  2.87870131e-02
  6.74498305e-02 -1.51103083e-02  8.48918781e-02  1.43812284e-01
  7.78479353e-02 -7.44221881e-02 -1.09445967e-01 -9.61912498e-02
  4.95687313e-02 -2.06290819e-02 -7.10746720e-02  4.27965708e-02
  6.96522146e-02 -7.82770067e-02  4.72834706e-02  1.68686043e-02
  5.96228875e-02 -2.19321417e-04 -3.38362530e-02  4.46000211e-02
 -1.04771011e-01  4.25223485e-02 -8.24100450e-02  7.39327818e-02
  4.38748114e-02  5.58825321e-02  2.45158356e-02 -4.90621887e-02
  3.42496559e-02  4.42279615e-02 -7.53888453e-04 -2.58383024e-02
 -1.24216415e-02  2.51181535e-02  8.26186687e-02  2.93137152e-02
  7.72862807e-02  3.11602335e-02 -2.92669218e-02 -9.34403017e-02]"
"           println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(e) => println!(""Error transferring Sol:, {}"", e),
    }

}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253system_instruction::transfer(&from, &to, lamports_to_send);
1solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.001 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR>
1solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.001 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR>
1# How to send SPL-TokensUse the Token Programopen in new window to transfer SPL Tokens. In order to send a SPL token, you need to know its SPL token account address. You can both get the address and send tokens with the following example.TSWallet-AdapterCLIPress </> button to view full sourceconst web3 = require(""@solana/web3.js"");
const splToken = require(""@solana/spl-token"");

(async () => {
  // Connect to cluster
  const connection = new web3.Connection(
    web3.clusterApiUrl(""devnet""),
    ""confirmed""
  );

  // Generate a new wallet keypair and airdrop SOL
  const fromWallet = web3.Keypair.generate();
  const fromAirdropSignature = await connection.requestAirdrop(
    fromWallet.publicKey,
    web3.LAMPORTS_PER_SOL
  );
  // Wait for airdrop confirmation
  await connection.confirmTransaction(fromAirdropSignature);

  // Generate a new wallet to receive newly minted token
  const toWallet = web3.Keypair.generate();

  // Create new token mint
  const mint = await splToken.createMint(
    connection,
    fromWallet,
    fromWallet.publicKey,
    null,
    9,
    splToken.TOKEN_PROGRAM_ID
  );

  // Get the token account of the fromWallet Solana address, if it does not exist, create it
  const fromTokenAccount = await mint.getOrCreateAssociatedAccountInfo(
    fromWallet.publicKey
  );

  //get the token account of the toWallet Solana address, if it does not exist, create it
  const toTokenAccount = await mint.getOrCreateAssociatedAccountInfo(
    toWallet.publicKey
  );

  // Minting 1 new token to the ""fromTokenAccount"" account we just returned/created
  await mint.mintTo(
    fromTokenAccount.address,
    fromWallet.publicKey,
    [],
    1000000000 // it's 1 token, but in lamports
  );

  // Add token transfer instructions to transaction
  const transaction = new web3.Transaction().add(
    splToken.createTransferInstruction(
      splToken.TOKEN_PROGRAM_ID,
      fromTokenAccount.address,
      toTokenAccount.address,
      fromWallet.publicKey,
      [],
      1
    )
  );

  // Sign transaction, broadcast, and confirm
  await web3.sendAndConfirmTransaction(connection, transaction, [fromWallet]);
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// Add token transfer instructions to transaction
const transaction = new web3.Transaction().add(
  splToken.Token.createTransferInstruction(
    splToken.TOKEN_PROGRAM_ID,
    fromTokenAccount.address,
    toTokenAccount.address,
    fromWallet.publicKey,
    [],
    1
  )
);

// Sign transaction, broadcast, and confirm
await web3.sendAndConfirmTransaction(connection, transaction, [fromWallet]);
1234567891011121314import { WalletNotConnectedError } from ""@solana/wallet-adapter-base"";
import { useConnection, useWallet","[-8.87007266e-02 -1.05974656e-02 -6.29446283e-02  4.89466339e-02
  9.66266170e-03 -4.41669077e-02  5.47275469e-02  4.44782563e-02
 -2.96223275e-02  2.78524309e-02  2.62080971e-02 -6.93382472e-02
 -2.15169275e-03 -1.39732379e-02  4.12105545e-02  1.61433499e-02
 -1.16382681e-01 -1.14801256e-02 -7.59978592e-02 -1.09324930e-02
  1.04463086e-01 -1.02612898e-02 -6.08118698e-02  2.38560271e-02
 -4.04895004e-03 -6.81480616e-02  4.75532934e-02 -2.11546607e-02
 -5.54413907e-02  4.34141085e-02  1.66983921e-02  2.55114436e-02
 -8.48511830e-02  5.00432355e-03 -2.11510677e-02  6.90664202e-02
 -2.47542630e-03  2.36459207e-02  5.31140305e-02 -1.07273504e-01
 -7.13739777e-03 -1.43957864e-02 -1.32101983e-01 -7.37285987e-02
  1.54698137e-02 -8.22587237e-02 -2.50284709e-02  2.09115837e-02
 -2.20541824e-02  5.47546311e-04 -7.56497532e-02 -3.26582305e-02
 -2.54877899e-02  4.04241942e-02 -1.21822879e-02 -1.08816819e-02
 -1.99769586e-02  1.97407138e-03  6.16025999e-02 -7.45771080e-02
  6.40413910e-03  1.38432179e-02  4.23933892e-03 -7.53466412e-02
 -7.78748989e-02 -8.22236985e-02  2.19717529e-03  6.38302928e-03
 -1.66360475e-02 -3.35751614e-03 -6.07955689e-03 -6.12298399e-02
 -7.93340579e-02  1.63565688e-02 -6.05539186e-03 -4.21160422e-02
  6.35550842e-02  9.64069441e-02 -5.78595847e-02  7.25471675e-02
  6.06457219e-02 -4.64905761e-02  4.63634916e-02  8.82238373e-02
 -3.70808542e-02  3.14876325e-02 -3.23411897e-02  1.97269246e-02
  8.82805884e-02 -1.87704973e-02  3.33393626e-02  3.97946686e-02
 -2.47784294e-02 -1.42418267e-02  7.08048716e-02  4.47102785e-02
 -4.43214998e-02 -2.97488794e-02 -6.34569973e-02  1.06878720e-01
  6.78371489e-02 -4.84378822e-02 -3.22392434e-02 -3.10293194e-02
  1.38775529e-02 -1.09953946e-02  1.08000785e-01 -1.72565598e-02
  1.47304721e-02  3.24987024e-02  3.13639268e-02  4.82044406e-02
 -2.43401304e-02  1.17670503e-02 -4.54879552e-02  6.05579652e-02
 -5.82198352e-02  1.03224643e-01  5.80180958e-02 -2.28499882e-02
  2.20943596e-02  5.59759438e-02 -3.95244174e-02 -5.07913679e-02
  5.91973262e-03 -7.53899440e-02  2.81501245e-02  2.36798470e-33
 -2.62731314e-03  3.39144431e-02  6.50404161e-03  1.32320607e-02
 -4.71880697e-02 -1.73477624e-02  6.42065108e-02 -3.48188425e-03
  1.18525873e-03 -6.30661771e-02 -1.09242387e-01 -5.50343953e-02
  2.99906209e-02 -6.60217330e-02 -1.31178916e-01  2.55277986e-03
  1.91000905e-02  2.62289699e-02  2.28846855e-02  4.83616106e-02
 -3.11795343e-03 -8.40357319e-02  1.47748888e-02 -2.16624066e-02
  2.90239416e-02  1.87413115e-02 -3.55407745e-02 -4.13037576e-02
  3.02712824e-02 -9.26120766e-03  5.92889823e-02  7.91575201e-03
  2.43205745e-02  6.85574636e-02  2.62893531e-02  1.01909386e-02
 -7.17385160e-03 -6.74062932e-04 -6.66076615e-02 -2.72417124e-02
 -3.26981209e-02  3.24500375e-03 -4.45383228e-02  1.12302311e-01
  4.85838624e-03  5.78291900e-02 -2.29475722e-02  4.03724462e-02
  1.09805837e-01  4.23922278e-02 -1.45389110e-01 -2.28213537e-02
 -2.17197835e-02  1.13491789e-02  7.39603415e-02  1.61648151e-02
 -4.71202983e-03  3.31203640e-02 -1.27002280e-02 -6.07111678e-02
 -4.09536809e-02 -3.96541320e-02  5.13379984e-02 -5.79632372e-02
  3.74843031e-02  2.07549613e-02 -1.27780318e-01  5.47139579e-03
  1.26382690e-02 -7.94221237e-02 -7.50803500e-02  1.04644775e-01
  1.90976299e-02  1.22195572e-01 -6.03932925e-02 -3.59315276e-02
  8.76008272e-02  1.48978522e-02 -5.72711304e-02  2.25164201e-02
 -1.64781120e-02 -5.42356260e-02 -5.96954077e-02  4.76407148e-02
  2.54156440e-02  2.97049507e-02 -7.94492196e-03  1.95079092e-02
 -3.12919617e-02 -2.55886707e-02  6.49018362e-02  7.56954355e-03
 -2.17993055e-02 -4.48255539e-02 -9.68627632e-03 -2.73639950e-33
  3.52209434e-02  3.37141417e-02 -6.69945702e-02 -8.78026336e-03
 -4.05619629e-02 -2.25721281e-02  4.50140499e-02 -3.95804159e-02
 -1.84289068e-02  3.26721855e-02 -7.61227310e-02  3.50350738e-02
  1.09244687e-02 -9.74956807e-03 -7.19117820e-02  3.87698822e-02
  4.25732061e-02  1.30143007e-02 -3.22711058e-02 -2.02630181e-02
 -1.60031933e-02  9.08744782e-02 -5.46635464e-02  9.75021254e-03
 -4.07500528e-02  3.07423575e-03  2.59998497e-02  9.91965756e-02
 -9.79925022e-02  2.91540828e-02  1.66074753e-01  6.36093144e-04
 -4.87176096e-03  6.52430430e-02 -1.52752260e-02 -9.82585996e-02
  5.20099849e-02  4.49338555e-02  3.44163813e-02  8.67266804e-02
  4.92415279e-02 -2.80800252e-03  6.66644983e-03  5.71952090e-02
  1.17993429e-02 -1.91119164e-02  6.21890761e-02 -6.77570775e-02
 -2.37206891e-02 -1.99633501e-02  7.51025900e-02 -1.23438444e-02
 -3.59722376e-02 -4.39862609e-02  6.27120063e-02  2.01446973e-02
  9.50567722e-02  3.00762821e-02 -4.04054932e-02 -3.26153263e-02
  1.81197096e-02 -4.86389920e-02  8.42866227e-02  3.99040654e-02
  5.96801266e-02 -3.24965976e-02  3.39158140e-02  3.95519659e-02
  4.95024435e-02 -7.87916966e-03 -1.99205708e-02 -3.23089734e-02
 -1.16215367e-02  2.47096848e-02  5.66167049e-02  4.21692096e-02
 -2.18876600e-02  1.26035213e-02  3.96906659e-02 -4.91358060e-03
  3.55330631e-02 -8.14772844e-02  1.58752576e-02  3.05559877e-02
  9.13631928e-04  1.74167790e-02  5.71478456e-02  5.76244714e-03
 -3.20616961e-02 -3.58946845e-02 -3.35044153e-02 -2.92202644e-02
  6.95369095e-02  1.37082348e-02  2.36132424e-02 -5.53429835e-08
  4.04229807e-03 -2.29990222e-02 -8.34762752e-02  1.51450159e-02
 -1.29392529e-02  8.76501575e-02 -1.79138910e-02 -6.42293543e-02
 -4.26728688e-02 -3.56416800e-04 -1.89372391e-01  2.38495320e-02
 -3.21305133e-02  1.02997394e-02  3.99055257e-02 -3.98602802e-03
  3.71333659e-02  2.72519160e-02 -9.57398396e-03 -1.25527844e-01
  3.88983823e-03 -6.38671070e-02 -2.65176091e-02 -4.46279049e-02
  4.06012349e-02 -2.92345919e-02  5.10059781e-02  8.67940113e-02
  2.56728809e-02 -1.02621011e-01 -6.65801838e-02 -4.62752506e-02
  7.62961656e-02 -2.24375091e-02  1.43303005e-02  5.05379103e-02
  1.80753265e-02 -1.50603522e-02  3.34488340e-02  9.62901637e-02
  8.81257653e-03  8.23138282e-02 -4.96942876e-03 -3.12773921e-02
 -4.68254574e-02  6.44557998e-02  2.02795174e-02  1.85512025e-02
  4.65115905e-02  2.55329758e-02  2.11542267e-02 -1.26968278e-02
  3.46901156e-02  8.61936286e-02 -7.61745274e-02  3.38133089e-02
 -9.19229761e-02  6.58183098e-02 -4.90383664e-03  2.72800531e-02
  7.16818720e-02  7.87390918e-02 -8.31405818e-02 -6.41370798e-03]"
"} from ""@solana/wallet-adapter-react"";
import { Keypair, SystemProgram, Transaction } from ""@solana/web3.js"";
import { TOKEN_PROGRAM_ID, createTransferInstruction } from ""@solana/spl-token"";
import React, { FC, useCallback } from ""react"";

export const SendSPLTokenToAddress: FC = (
  fromTokenAccount,
  toTokenAccount,
  fromWallet
) => {
  const { connection } = useConnection();
  const { publicKey, sendTransaction } = useWallet();

  const onClick = useCallback(async () => {
    if (!publicKey) throw new WalletNotConnectedError();

    const transaction = new Transaction().add(
      createTransferInstruction(
        fromTokenAccount.address,
        toTokenAccount.address,
        fromWallet.publicKey,
        1,
        [],
        TOKEN_PROGRAM_ID
      )
    );

    const signature = await sendTransaction(transaction, connection);

    await connection.confirmTransaction(signature, ""processed"");
  }, [publicKey, sendTransaction, connection]);

  return (
    <button onClick={onClick} disabled={!publicKey}>
      Send 1 lamport to a random address!
    </button>
  );
};
123456789101112131415161718192021222324252627282930313233343536373839const transaction = new Transaction().add(
  Token.createTransferInstruction(
    TOKEN_PROGRAM_ID,
    fromTokenAccount.address,
    toTokenAccount.address,
    fromWallet.publicKey,
    [],
    1
  )
);

const signature = await sendTransaction(transaction, connection);

await connection.confirmTransaction(signature, ""processed"");
1234567891011121314$ spl-token transfer AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg
Transfer 50 tokens
  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi
  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg
  Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks

Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd
1234567$ spl-token transfer AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg
Transfer 50 tokens
  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi
  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg
  Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks

Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd
1234567# How to calculate transaction costThe number of signatures a transaction requires are used to calculate the transaction cost. As long as you are not creating an account, this will be the final transaction cost. To find out more about costs to create an account, check out calculating rent exemptionThe two examples below show the two ways currently available to calculate estimated transaction cost.The first example uses getEstimatedFee, which is a new method on the Transaction class, while the second example uses getFeeForMessage which replaces getFeeCalculatorForBlockhash on the Connection class.# getEstimatedFeeTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  SystemProgram,
  Transaction,
} from ""@solana/web3.js"";

(async () => {
  // Connect to cluster
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const payer = Keypair.generate();
  const payee = Keypair.generate();

  const recentBlockhash = await connection.getLatestBlockhash();

  const transaction = new Transaction({
    recentBlockhash: recentBlockhash.blockhash, 
    feePayer: payer.publicKey
  }).add(
    SystemProgram.transfer({
      fromPubkey: payer.publicKey,
      toPubkey: payee.publicKey,
      lamports: 10,
    })
  );

  const fees = await transaction.getEstimatedFee(connection);
  console.log(`Estimated SOL transfer cost: ${fees} lamports`);
  // Estimated SOL transfer cost: 5000 lamports
})();
1234567891011121314151617181920212223242526272829303132const recentBlockhash = await connection.getLatestBlockhash();

const transaction = new Transaction({
  recentBlockhash: recentBlockhash.blockhash,
}).add(
  SystemProgram.transfer({
    fromPubkey: payer.publicKey,
    toPubkey: payee.publicKey,
    lamports: 10,
  })
);

const fees = await transaction.getEstimatedFee(connection);
console.log(`Estimated SOL transfer","[-9.32405815e-02 -4.96345647e-02 -1.05565310e-01  1.59860179e-02
 -6.49503246e-02 -2.25489847e-02 -6.88246079e-03  6.79535791e-02
  9.40098315e-02 -1.07137896e-02 -1.15466993e-02 -5.99734001e-02
 -3.27381259e-03 -3.28153670e-02  3.17955613e-02  3.10272817e-02
 -7.87481964e-02 -3.10057905e-02 -1.66291464e-02  2.56190971e-02
  5.14259227e-02 -7.10649267e-02  2.49617966e-03 -1.14524094e-02
  6.73391391e-03 -3.27463336e-02  3.40002142e-02 -8.16882029e-02
 -7.80898184e-02  7.56213218e-02  6.35029227e-02  6.01462014e-02
 -1.20799029e-02 -5.90411797e-02 -3.41576636e-02  1.02821492e-01
 -1.23437652e-02  6.11353405e-02  4.09296863e-02 -5.31859957e-02
  1.28077297e-02  4.75046635e-02 -6.07614890e-02 -8.34178587e-04
  8.72181579e-02 -5.93092702e-02 -4.53922004e-02  2.21480988e-03
 -2.47439779e-02 -2.21884507e-03 -5.17785549e-02  7.57776946e-02
 -3.99827734e-02  2.67887041e-02 -4.82335873e-02  1.29617506e-03
  3.70111950e-02  2.55503561e-02  8.06370005e-02 -3.96449603e-02
  9.27957371e-02 -2.40434594e-02  4.83179986e-02 -6.77820817e-02
 -3.79025973e-02 -2.73680091e-02  5.56676602e-03 -3.52347530e-02
  3.82565707e-02  9.31084529e-03 -1.26570165e-02 -1.06385769e-02
 -3.35235000e-02 -4.91146892e-02 -5.61373569e-02 -4.82066274e-02
  7.74200410e-02  6.41216114e-02 -4.94477861e-02  7.59448186e-02
  6.07767776e-02 -7.20562711e-02  4.62055504e-02  3.27874497e-02
  4.46098251e-03  2.91264355e-02 -6.82998151e-02 -2.94945929e-02
 -2.33639870e-02 -2.40255874e-02 -4.67194431e-02  1.20681189e-02
 -3.36139426e-02 -1.54679809e-02  3.76772545e-02  6.29979884e-03
 -4.40139063e-02  5.44161759e-02 -5.73513098e-02  6.86468408e-02
  9.45858657e-02 -1.91078167e-02 -8.51110891e-02 -2.81387623e-02
  5.52317239e-02 -8.99897981e-03  6.64812252e-02 -5.54326735e-02
 -9.15879291e-03  8.09351504e-02  3.90866073e-03  8.25377181e-02
  2.17274297e-02  4.52771671e-02 -8.40923414e-02  1.12853125e-01
  2.42382754e-02  2.99484022e-02  1.04822300e-01  4.77594882e-02
  6.14123493e-02  3.02130077e-02 -1.70165766e-02 -4.68489267e-02
 -6.42152354e-02 -1.26235904e-02  1.44807426e-02  7.54222816e-33
 -3.43048871e-02 -2.71994788e-02  2.66483445e-02  2.85967086e-02
 -6.18146267e-04 -7.44477957e-02  5.02318069e-02 -6.03381582e-02
 -6.02614544e-02 -8.59540552e-02 -4.88744192e-02 -1.54460398e-02
  1.95884556e-02  8.82425462e-04 -1.08915918e-01 -1.05518429e-02
 -4.11108173e-02 -4.42576185e-02  9.65628177e-02 -3.19216140e-02
 -4.71700877e-02 -1.27034709e-01  3.95872965e-02 -1.72729660e-02
  8.01346600e-02 -4.03219610e-02 -5.13592698e-02  4.29265052e-02
 -1.63258407e-02 -2.67079566e-02  4.72347625e-02  3.52573319e-04
 -7.36450031e-02  6.42275885e-02  4.62047458e-02 -1.58093330e-02
 -1.39897373e-02 -1.51865166e-02 -1.08166806e-01 -3.26107815e-02
  3.66536342e-02 -2.10842174e-02 -3.52472924e-02  8.47658291e-02
 -1.05810650e-02  3.40888128e-02  1.27504803e-02  7.27787390e-02
  1.03617541e-01  5.80794252e-02 -1.02243498e-01 -1.26516232e-02
  1.02858990e-02 -8.33371207e-02  7.06393365e-03 -8.60611536e-03
 -1.35439364e-02 -1.39876120e-02  1.08286760e-04 -1.73336826e-02
 -9.78053510e-02 -3.83552797e-02  4.00737338e-02  6.42272271e-03
  1.29525224e-02  3.80815007e-02 -9.50111970e-02  4.00544889e-02
 -1.56191103e-02 -7.30656236e-02 -1.07241829e-03  8.13645422e-02
 -1.23131787e-02  7.52414912e-02 -2.20207516e-02  1.54296951e-02
  5.00857048e-02  4.86279987e-02 -7.00907856e-02 -2.67262124e-02
  3.80472392e-02 -4.26184535e-02 -2.28506513e-02  8.82157534e-02
  1.53289791e-02  8.11744779e-02 -5.58816344e-02 -3.38120982e-02
 -1.81292593e-02  9.46911797e-03  6.47077337e-02 -3.55115272e-02
 -1.42393261e-02 -4.08426113e-02 -1.27602126e-02 -8.98812735e-33
  1.33570014e-02 -2.32207645e-02 -6.62547648e-02 -3.54341753e-02
 -2.45415233e-02  5.22811040e-02 -3.42279226e-02 -1.10539021e-02
 -3.95654924e-02 -1.44882791e-03 -4.70960736e-02  2.91183125e-02
  7.79286698e-02 -1.35191018e-02 -3.41418162e-02  7.89007246e-02
  5.92772402e-02 -1.56020941e-02 -2.81942799e-03 -8.99550989e-02
  5.47468700e-02  4.83300015e-02 -2.69043278e-02 -4.47427621e-03
 -8.16200897e-02 -1.28581841e-02 -1.63147766e-02  6.46462590e-02
 -7.27218911e-02 -3.43287550e-02  9.43698287e-02 -8.03506584e-04
 -2.57105567e-02  8.81487802e-02 -6.32341718e-03 -6.68093264e-02
 -3.39664286e-04  1.74502172e-02  2.66132560e-02  4.15373370e-02
  8.37492663e-03 -3.93979624e-02  5.18220058e-03  4.82052304e-02
 -1.35747320e-03 -4.34859730e-02  1.93185639e-02 -5.54408766e-02
 -9.39147919e-03  4.86830175e-02  4.00529914e-02 -4.66883183e-02
 -4.50589396e-02 -5.28264493e-02 -1.56717189e-02  8.34410191e-02
  1.09633952e-01 -1.45733254e-02  4.90850257e-03 -4.67911698e-02
  5.76785766e-02 -1.17366582e-01  2.22383440e-02  3.11634336e-02
  1.11368671e-01 -5.16418777e-02 -2.52072029e-02  7.52469897e-02
  4.33530882e-02  7.37821758e-02  4.35411781e-02  3.35768238e-02
  1.01670502e-02  2.33930796e-02  6.54286221e-02  2.97021940e-02
 -1.97873972e-02 -4.01242487e-02 -2.42698612e-03  9.34326462e-03
  4.55122767e-03 -5.40373176e-02  6.46839440e-02 -1.48645164e-02
 -2.03004405e-02 -3.49401645e-02  5.33377714e-02  2.88189538e-02
 -3.86275351e-02 -2.08803564e-02 -2.01585647e-02 -1.22388331e-02
 -6.21016957e-02 -2.58130766e-02  1.38916131e-02 -5.92755782e-08
  1.80926621e-02  1.97873134e-02 -8.81169960e-02  1.13368137e-02
 -3.14755216e-02  8.64452347e-02 -4.35201786e-02 -7.79085383e-02
 -5.57405241e-02 -3.94088253e-02 -1.67049959e-01  3.13514620e-02
 -2.22414955e-02 -1.72593500e-02  1.26144132e-02 -3.90310399e-02
  3.88939455e-02 -1.35219460e-02 -2.23212913e-02 -7.20836073e-02
  5.04077375e-02 -3.77185568e-02  6.89101312e-03  4.57859505e-03
  6.59146532e-02 -6.76349783e-03  7.63359293e-02  1.01643786e-01
  4.68422920e-02 -1.09242104e-01 -7.60387406e-02 -4.58334982e-02
  3.36330980e-02 -3.62048447e-02 -6.86614141e-02  2.19784547e-02
  6.60848245e-02 -8.47550407e-02  3.04229148e-02  8.10970515e-02
 -1.49851283e-02  1.95041317e-02 -6.53294176e-02  2.24482343e-02
 -1.15805313e-01  7.66700953e-02 -3.98511626e-02  6.20086156e-02
  5.16774543e-02  4.98700179e-02  3.45482603e-02 -3.24671827e-02
  7.34419888e-03  4.93410118e-02 -8.37802701e-03  3.46143171e-02
 -4.65437733e-02  5.12708500e-02  8.62229839e-02  2.26994585e-02
  9.59976390e-03  6.15187176e-02 -6.26435429e-02 -2.98260022e-02]"
"cost: ${fees} lamports`);
// Estimated SOL transfer cost: 5000 lamports
123456789101112131415# getFeeForMessageTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Message,
  SystemProgram,
  SYSTEM_INSTRUCTION_LAYOUTS,
  Transaction,
} from ""@solana/web3.js"";
import bs58 from ""bs58"";

(async () => {
  // Connect to cluster
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const payer = Keypair.generate();
  const payee = Keypair.generate();

  const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;
  const data = Buffer.alloc(type.layout.span);
  const layoutFields = Object.assign({ instruction: type.index });
  type.layout.encode(layoutFields, data);

  const recentBlockhash = await connection.getLatestBlockhash();

  const messageParams = {
    accountKeys: [
      payer.publicKey.toString(),
      payee.publicKey.toString(),
      SystemProgram.programId.toString(),
    ],
    header: {
      numReadonlySignedAccounts: 0,
      numReadonlyUnsignedAccounts: 1,
      numRequiredSignatures: 1,
    },
    instructions: [
      {
        accounts: [0, 1],
        data: bs58.encode(data),
        programIdIndex: 2,
      },
    ],
    recentBlockhash: recentBlockhash.blockhash,
  };

  const message = new Message(messageParams);

  const fees = await connection.getFeeForMessage(message);
  console.log(`Estimated SOL transfer cost: ${fees.value} lamports`);
  // Estimated SOL transfer cost: 5000 lamports
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152const message = new Message(messageParams);

const fees = await connection.getFeeForMessage(message);
console.log(`Estimated SOL transfer cost: ${fees.value} lamports`);
// Estimated SOL transfer cost: 5000 lamports
12345# How to add a memo to a transactionAny transaction can add a message making use of the memo programopen in new window. Currently the programID from the Memo Program has to be added manually MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr.TSWallet-AdapterCLIPress </> button to view full sourceimport {
  Connection,
  Keypair,
  SystemProgram,
  LAMPORTS_PER_SOL,
  PublicKey,
  Transaction,
  TransactionInstruction,
  sendAndConfirmTransaction,
} from ""@solana/web3.js"";

(async () => {
  const fromKeypair = Keypair.generate();
  const toKeypair = Keypair.generate();

  const connection = new Connection(
    ""https://api.devnet.solana.com"",
    ""confirmed""
  );

  const airdropSignature = await connection.requestAirdrop(
    fromKeypair.publicKey,
    LAMPORTS_PER_SOL
  );

  await connection.confirmTransaction(airdropSignature);

  const lamportsToSend = 10;

  const transferTransaction = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: fromKeypair.publicKey,
      toPubkey: toKeypair.publicKey,
      lamports: lamportsToSend,
    })
  );

  await transferTransaction.add(
    new TransactionInstruction({
      keys: [
        { pubkey: fromKeypair.publicKey, isSigner: true, isWritable: true },
      ],
      data: Buffer.from(""Data to send in transaction"", ""utf-8""),
      programId: new PublicKey(""MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr""),
    })
  );

  await sendAndConfirmTransaction(connection, transferTransaction, [
    fromKeypair,
  ]);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051const transferTransaction = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: fromKeypair.publicKey,
    toPubkey: toKeypair.publicKey,
    lamports: lamportsToSend,
  })
);

await transferTransaction.add(
  new TransactionInstruction({
    keys: [{ pubkey: fromKeypair.publicKey, isSigner: true, isWritable:","[-5.67119867e-02 -3.53803672e-02 -1.16156064e-01  4.25885096e-02
  6.92917872e-03 -3.48747782e-02 -7.98329804e-03  1.35292811e-02
  4.30433732e-03  3.40094753e-02  2.75091100e-02 -4.19307463e-02
 -1.40577294e-02 -1.02257892e-01 -2.35999543e-02 -2.63725109e-02
 -3.72009687e-02 -1.03653662e-01 -1.57733876e-02 -5.14024273e-02
  2.47797407e-02 -8.02138746e-02  3.89758162e-02 -3.35155800e-02
  5.63365407e-02  6.03186106e-03  1.75505746e-02 -2.64043938e-02
 -4.92318347e-03 -9.03935079e-03  9.13329702e-03  6.28254935e-02
 -3.59289609e-02  4.39670449e-03 -8.98368564e-03  1.40051365e-01
 -1.63395386e-02 -2.36397125e-02 -6.38113767e-02 -2.75979079e-02
 -1.83141548e-02  5.34935519e-02 -1.00408286e-01 -1.05455564e-02
  2.36859452e-02 -5.89142889e-02 -7.62518048e-02  5.83567880e-02
 -2.30264594e-03 -6.75757676e-02 -9.96608287e-02  4.90606297e-03
 -3.83989736e-02  4.71370555e-02 -9.50734466e-02  5.36504686e-02
  4.96724546e-02 -1.55295944e-04  6.76871240e-02 -1.64139066e-02
  3.96099985e-02 -2.12908536e-02  7.93080181e-02 -5.14814220e-02
  6.55038236e-03 -1.81749929e-03  4.16352376e-02  1.24957087e-02
 -2.53085792e-02 -6.81068450e-02 -2.75725219e-02 -8.11728369e-03
 -6.07725680e-02  2.91756745e-02 -3.17411870e-02 -1.14815421e-02
  4.98650894e-02  7.16271922e-02 -4.34502847e-02  4.07860912e-02
 -4.72355112e-02 -1.01752453e-01 -2.87387576e-02  1.01115413e-01
  9.23397113e-03  2.32128557e-02 -2.81747039e-02 -1.85513624e-03
  3.29323597e-02 -7.20734298e-02 -6.47647828e-02  2.40603220e-02
 -9.39147696e-02 -2.47864872e-02  3.72462049e-02  6.52170777e-02
 -2.10932940e-02  2.23030634e-02 -1.61588900e-02  8.47753435e-02
  6.39628470e-02 -3.42562459e-02 -1.59888193e-02 -5.04556932e-02
 -6.31536692e-02 -5.87031990e-03  9.19800475e-02  5.27560897e-02
 -3.39732729e-02  2.88487952e-02 -6.53004134e-03  1.08907565e-01
 -3.55615132e-02 -6.57227822e-03 -8.41630623e-02  6.47458881e-02
  3.08702197e-02 -1.66322701e-02  5.74321300e-02  5.80963902e-02
  1.16642609e-01  5.14991917e-02 -5.11584878e-02  5.02923271e-03
 -3.20629068e-02 -4.69083674e-02 -1.47436056e-02  7.25742057e-33
 -5.69462217e-03  4.62819496e-03 -1.66548919e-02 -3.73698696e-02
  2.12123781e-03  3.75147187e-03  8.14485326e-02  5.70073314e-02
 -6.44683167e-02 -6.39030412e-02 -1.13621585e-01 -6.27906621e-02
  5.64704351e-02 -9.50169638e-02 -5.06239533e-02 -6.75002486e-02
  2.79631894e-02  9.93630961e-02  8.13837126e-02  2.78879120e-03
  3.46543714e-02 -5.14368676e-02 -1.76203605e-02 -1.17464997e-02
 -2.68470030e-02  5.58499023e-02 -3.71858105e-02  1.01446686e-02
  3.09438650e-02 -1.59778949e-02  6.43442348e-02  1.15912165e-02
 -3.25312093e-03  3.92167382e-02  1.90366935e-02  9.45777260e-03
  1.45589886e-02 -7.67583475e-02 -1.03256755e-01 -5.20275161e-02
 -3.75011982e-03  1.51048684e-02 -2.75573693e-03 -4.43784595e-02
  1.14090387e-02  1.95206627e-02  1.78915448e-02 -1.02239391e-02
  8.34903866e-02  1.37060964e-02 -1.14610694e-01 -1.62682571e-02
  3.96739207e-02  7.24335946e-03  7.11192191e-02 -2.29271911e-02
  5.91550134e-02  3.45184319e-02  2.49070842e-02  5.09174503e-02
 -4.91045937e-02 -4.13660854e-02 -2.25893203e-02 -2.08602846e-02
  3.42076644e-02  2.01524459e-02 -5.25685437e-02  5.45171499e-02
  3.19612911e-03 -1.99061334e-02 -5.53796403e-02  8.05252194e-02
  5.09697050e-02  1.44269377e-01 -1.54608060e-02 -1.29532535e-02
 -6.26521632e-02  1.87219530e-02 -8.13718289e-02 -2.94836555e-02
  1.11914398e-02 -1.56211602e-02 -5.37503287e-02  8.03535953e-02
  7.67238811e-02  6.49073347e-02  1.68364514e-02  8.39745440e-03
 -2.57686637e-02  5.76081835e-02  4.08247672e-02  2.13695075e-02
 -3.63946408e-02 -6.42059147e-02 -2.21807486e-03 -7.23409950e-33
 -1.70632992e-02  3.52880824e-03 -7.15303421e-02  1.74481180e-02
  5.27771860e-02  1.44762713e-02  8.03538773e-04  2.16260161e-02
 -1.75813381e-02  6.69048503e-02 -3.66915599e-03  7.40880240e-03
  4.38281856e-02 -6.36769161e-02 -3.53915244e-02  1.47018107e-02
  5.18529788e-02 -4.96207587e-02  9.14843157e-02 -2.51859091e-02
 -1.97172072e-02  1.21370614e-01 -1.17980381e-02 -1.47408713e-02
 -8.03670585e-02  2.04974841e-02 -1.49792917e-02  1.07009262e-01
 -9.63013098e-02  2.40219198e-02  5.97612746e-02 -4.05987799e-02
 -1.03924528e-01  7.61017427e-02 -1.53631275e-03 -2.64871195e-02
  1.54724540e-02  3.53838615e-02  2.92377993e-02  5.40672168e-02
  3.92163098e-02 -5.66095188e-02 -5.09886146e-02 -1.57136086e-03
  2.96477042e-02 -4.86574471e-02 -3.95740941e-03 -4.42890190e-02
 -2.47053988e-02  2.56913248e-02  3.13276127e-02 -3.03477719e-02
 -2.00240240e-02 -3.01443376e-02 -8.22857860e-03  6.71084747e-02
  4.11001146e-02  3.62087339e-02  3.65861543e-02 -1.62119046e-02
  7.17782378e-02 -9.12408605e-02  5.59063070e-02  1.73069015e-02
  9.42965820e-02 -2.33157054e-02  3.38079920e-03  3.84454541e-02
  3.88638228e-02  5.99246509e-02 -8.40662941e-02  7.47649297e-02
  4.41276543e-02  6.39141202e-02  9.12374184e-02  3.93834822e-02
 -1.67163797e-02  1.34057403e-02  5.14332131e-02  1.24279447e-02
  4.62689484e-03  2.92939804e-02  4.96824346e-02 -2.27254778e-02
  5.95493056e-02 -4.54676226e-02  3.30774859e-02  4.25695740e-02
 -9.43120643e-02 -5.25208376e-02 -1.13027692e-01 -3.83109301e-02
 -2.89781106e-04  8.12016707e-03  8.92835110e-03 -6.11581754e-08
 -2.53595430e-02  4.93941382e-02 -8.84357169e-02  3.12059615e-02
  2.30366420e-02  1.33987255e-02 -3.66980806e-02  4.38293489e-03
 -1.83357894e-02 -7.25670205e-03 -6.75707161e-02  8.96867947e-04
  1.04623502e-02  3.69141437e-02  1.97096169e-02 -2.52977815e-02
 -1.42644839e-02 -5.03162406e-02 -5.12576215e-02 -1.09459698e-01
  8.85805488e-02 -6.44330010e-02 -1.85489245e-02  1.68305095e-02
  7.31090754e-02 -3.53955999e-02  8.21993053e-02  1.48669332e-01
  1.38815017e-02 -9.39389914e-02 -1.07489616e-01 -3.94003093e-02
  5.01111634e-02 -4.32057772e-03 -4.12320122e-02  1.01497713e-02
 -5.62011749e-02  1.33092208e-02  8.53674263e-02  7.99693912e-02
  2.72857361e-02  5.89019731e-02 -1.03786282e-01  9.91877355e-03
  4.30633202e-02  5.10070883e-02 -8.58047679e-02  3.77990864e-02
  2.64733704e-03  2.97073126e-02  1.47430701e-02 -6.09615073e-02
  5.37521252e-03  4.68094610e-02  6.28398173e-03 -7.13224560e-02
 -4.21030931e-02 -3.53750028e-03  1.79432761e-02  6.47339076e-02
  3.88923362e-02  3.12858038e-02 -6.32387921e-02 -7.13716075e-02]"
"true }],
    data: Buffer.from(""Data to send in transaction"", ""utf-8""),
    programId: new PublicKey(""MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr""),
  })
);

await sendAndConfirmTransaction(connection, transferTransaction, [fromKeypair]);
1234567891011121314151617import { WalletNotConnectedError } from ""@solana/wallet-adapter-base"";
import { useConnection, useWallet } from ""@solana/wallet-adapter-react"";
import {
  Keypair,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";
import React, { FC, useCallback } from ""react"";

export const SendTenLamportToRandomAddress: FC = () => {
  const { connection } = useConnection();
  const { publicKey, sendTransaction } = useWallet();

  const onClick = useCallback(async () => {
    if (!publicKey) throw new WalletNotConnectedError();

    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: publicKey,
        toPubkey: Keypair.generate().publicKey,
        lamports: 10,
      })
    );

    await transaction.add(
      new TransactionInstruction({
        keys: [{ pubkey: publicKey, isSigner: true, isWritable: true }],
        data: Buffer.from(""Data to send in transaction"", ""utf-8""),
        programId: new PublicKey(""MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr""),
      })
    );

    const signature = await sendTransaction(transaction, connection);

    await connection.confirmTransaction(signature, ""processed"");
  }, [publicKey, sendTransaction, connection]);

  return (
    <button onClick={onClick} disabled={!publicKey}>
      Send 1 lamport to a random address!
    </button>
  );
};
123456789101112131415161718192021222324252627282930313233343536373839404142434445const transaction = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: publicKey,
    toPubkey: Keypair.generate().publicKey,
    lamports: 10,
  })
);

await transaction.add(
  new TransactionInstruction({
    keys: [{ pubkey: publicKey, isSigner: true, isWritable: true }],
    data: Buffer.from(""Data to send in transaction"", ""utf-8""),
    programId: new PublicKey(""MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr""),
  })
);

const signature = await sendTransaction(transaction, connection);

await connection.confirmTransaction(signature, ""processed"");
12345678910111213141516171819solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR> --with-memo <MEMO>
1solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR> --with-memo <MEMO>
1# How to change compute budget, fee, & priority for a transactionTransaction (TX) priority is achieved by paying a Prioritization Fee in addition to the Base Fee. By default the compute budget is the product of 200,000 Compute Units (CU) * number of instructions, with a max of 1.4M CU. The Base Fee is 5,000 Lamports. A microLamport is 0.000001 Lamports.The total compute budget or Prioritization Fee for a single TX can be changed by adding instructions from the ComputeBudgetProgram.ComputeBudgetProgram.setComputeUnitPrice({ microLamports: number }) will add a Prioritization Fee above the Base Fee (5,000 Lamports). The value provided in microLamports will be multiplied by the CU budget to determine the Prioritization Fee in Lamports. For example, if your CU budget is 1M CU, and you add 1 microLamport/CU, the Prioritization Fee will be 1 Lamport (1M * 0.000001). The total fee will then be 5001 Lamports.Use ComputeBudgetProgram.setComputeUnitLimit({ units: number }) to set the new compute budget. The value provided will replace the default value. Transactions should request the minimum amount of CU required for","[-4.27536778e-02  3.96252284e-03 -1.21054664e-01 -2.09281333e-02
 -8.83776695e-02 -4.13217023e-02  1.56494863e-02  1.78210195e-02
  5.84282540e-02 -2.77187806e-02  2.31059343e-02 -2.21099937e-03
  1.21369371e-02 -1.54192338e-03  2.14118976e-02  3.01396158e-02
 -6.71111271e-02 -5.85095510e-02 -8.40952992e-03  5.83260097e-02
  2.31307000e-02 -4.66376171e-02  4.39484604e-02 -3.90666723e-02
  1.75130107e-02 -7.77188223e-03  3.40281464e-02 -7.04101622e-02
 -5.28446361e-02  3.29692177e-02  8.09952840e-02  8.47388357e-02
 -7.75625259e-02 -3.72213349e-02 -1.31653128e-02  5.45952804e-02
 -8.46090075e-03  1.58898588e-02 -4.30884957e-02 -3.09041664e-02
  1.05389012e-02  4.42922823e-02 -4.24312763e-02  3.52894254e-02
  5.98611496e-02 -3.62900943e-02 -4.41223197e-02 -6.99472660e-03
 -4.45235223e-02  1.09049026e-02 -9.24200192e-02  9.57420021e-02
 -4.85237874e-02  1.20624952e-01 -1.36061115e-02  2.05802992e-02
  3.62675712e-02  2.94658355e-02  1.76586565e-02 -5.21738827e-03
  9.99255031e-02 -1.92473605e-02  5.80561683e-02 -7.69037381e-02
 -4.43706661e-02 -4.80124280e-02  2.03414448e-02 -1.31653640e-02
 -1.52980071e-02 -4.08833660e-02 -1.21134780e-02 -2.76508201e-02
 -8.06818604e-02 -4.45968397e-02 -3.35230418e-02 -1.72062255e-02
  5.14977872e-02  5.42118475e-02 -3.25847641e-02  3.39251347e-02
  2.25736257e-02 -9.16553587e-02  4.50697206e-02  4.21367735e-02
  1.51252905e-02  4.55599502e-02 -8.89111012e-02 -3.96735817e-02
 -7.67531022e-02 -6.61724480e-04  8.71869619e-04  8.11766833e-03
 -5.00726104e-02  1.33390278e-02  5.24369814e-03  3.52557190e-02
 -2.06956621e-02  6.25416487e-02 -5.48151806e-02  6.63906783e-02
  1.18883573e-01  2.15303283e-02 -9.94333476e-02  3.61862755e-03
  2.29924340e-02 -3.75208445e-02  1.23990208e-01 -3.72637808e-02
 -4.48394641e-02  3.72561701e-02 -5.89423906e-03  4.29517068e-02
  2.49503497e-02  3.02742440e-02 -4.23452742e-02  3.97296920e-02
 -2.36974540e-03  6.07079938e-02  2.83072218e-02  4.20121625e-02
  1.08240368e-02  5.68094403e-02 -1.56042138e-02 -2.07033604e-02
 -2.95713060e-02 -3.15953195e-02  1.53643154e-02  9.66698416e-33
  3.51327993e-02 -2.41986960e-02  1.37103321e-02  1.60136931e-02
  4.56216000e-03 -6.54555187e-02  3.19394283e-02 -3.95351313e-02
 -3.48233730e-02 -6.65912107e-02 -8.97310674e-02 -3.82928997e-02
  1.25126680e-02 -6.01109155e-02 -9.89711806e-02  1.63821671e-02
 -5.43690734e-02 -1.45751256e-02  8.31854269e-02 -1.48539888e-02
 -1.84664354e-02 -6.17796704e-02  8.46903697e-02 -4.18011695e-02
  6.61181509e-02 -2.03635897e-02 -8.94269943e-02  3.86076234e-02
  2.10706741e-02 -1.44822132e-02 -5.91027318e-03  1.78649966e-02
 -4.37983610e-02  3.37433144e-02  6.10542111e-02 -2.90998607e-03
 -6.97356695e-03 -3.09630353e-02 -1.42275244e-01 -3.00473776e-02
  4.21630591e-03 -1.10092871e-02 -8.11813474e-02  6.63206726e-02
 -3.21270488e-02 -2.87427325e-02  7.70776719e-02  5.69979288e-02
  1.13447964e-01  2.28328872e-02 -1.32816866e-01 -1.36944326e-02
 -4.63736884e-04 -8.93633738e-02  2.69185882e-02 -3.18752714e-02
  1.22496458e-02  3.65977287e-02 -2.11954564e-02 -1.69919338e-02
 -7.59829506e-02 -2.94096302e-02  8.30696337e-03 -2.28135958e-02
  1.97752919e-02  3.22607271e-02 -1.00545712e-01  3.46254148e-02
 -1.04254903e-02 -5.43029271e-02 -1.09289428e-02  2.43494418e-02
 -1.57524236e-02  7.41285458e-02  2.97924932e-02 -3.44729833e-02
  2.62954384e-02  4.02018726e-02 -4.32085358e-02 -3.81203815e-02
  1.01706564e-01 -6.65109009e-02 -1.54834501e-02  6.99772090e-02
 -1.50303598e-02  1.04226395e-01 -4.65924852e-03 -5.43572828e-02
 -1.81948044e-03  8.68785381e-02  4.34719361e-02  3.13815325e-02
  3.72460745e-02 -5.31683639e-02  1.02688139e-02 -1.02834619e-32
 -1.36173097e-03  1.58140734e-02 -9.98927876e-02  1.35901133e-02
  1.27190137e-02  2.39748955e-02  1.19288052e-02  2.78064013e-02
 -2.95686238e-02 -5.88692613e-02  2.74966899e-02 -8.50423239e-03
  6.86205626e-02 -6.18411675e-02 -4.36803699e-02  2.54210941e-02
  7.40740001e-02 -8.29808507e-03 -8.39062408e-03 -8.63796398e-02
  1.88235205e-03  3.08529288e-02 -4.95933509e-03 -6.24457002e-03
 -9.52167585e-02 -3.76384184e-02 -1.32341199e-02  4.33708280e-02
 -8.12617764e-02 -5.84470592e-02  1.14061169e-01  1.74836311e-02
 -6.18870705e-02  7.13596120e-02 -5.17351441e-02 -8.89687315e-02
  2.79657766e-02  1.51732871e-02  2.37594731e-02  5.44971749e-02
  6.61792159e-02 -1.12804631e-02 -3.59920785e-02  7.72349834e-02
 -7.28839217e-03 -7.84816220e-02 -3.67166810e-02 -6.99689463e-02
 -3.66411097e-02  3.09252124e-02  7.08341151e-02 -5.62145486e-02
 -1.10810176e-02 -2.84535233e-02  3.77109163e-02  1.27204731e-01
  1.05971977e-01  2.49475474e-03  3.00015118e-02 -2.50183828e-02
  2.32094023e-02 -5.59264496e-02  9.56909359e-03  1.20150540e-02
  1.47361562e-01 -2.91673038e-02 -5.16361557e-03  7.35780895e-02
  6.94467351e-02  4.71717417e-02  6.23677373e-02  6.68204436e-03
  7.77958287e-03  2.74966545e-02  7.16191977e-02  1.89184733e-02
 -5.82038388e-02 -3.10891438e-02  7.02422019e-03  1.91967823e-02
  3.74507159e-02 -1.22164236e-02  3.51256244e-02  2.74987537e-02
  2.23057605e-02 -2.45187618e-02  5.06270491e-02  3.10807396e-02
 -9.96619388e-02 -9.26221348e-03  7.28601543e-03 -3.45923081e-02
 -9.34621543e-02 -2.58422457e-02  1.84439905e-02 -6.09381132e-08
 -4.79035005e-02 -2.81256456e-02 -9.42114517e-02 -7.79870152e-03
  1.64170079e-02  7.68916979e-02 -3.11324131e-02 -5.25011383e-02
 -9.88980941e-03  1.94912136e-04 -7.73299113e-02  3.97234969e-02
 -3.19067650e-02 -5.76116443e-02  4.70476672e-02 -6.26358017e-02
  6.35672808e-02 -4.32508923e-02 -3.35478075e-02 -6.13437034e-02
  7.14042410e-02 -3.67881916e-02 -4.24136631e-02  3.25741470e-02
  8.13795403e-02 -2.13646442e-02  6.91900253e-02  1.31492987e-01
  1.78540200e-02 -1.19911537e-01 -6.97532445e-02 -7.38267750e-02
  7.09793121e-02 -4.85931672e-02 -6.19982183e-02  3.59960832e-02
  9.45934728e-02 -5.03296852e-02  2.63229311e-02  4.59518805e-02
  2.49140598e-02  2.40647956e-03 -6.71612546e-02  1.53033836e-02
 -8.81444439e-02  5.31756878e-02 -4.92720865e-02  8.34080651e-02
 -8.20322242e-03  3.84896621e-02  3.13553102e-02 -1.71840955e-02
  4.87515964e-02  6.85709640e-02  8.93866830e-03 -3.76276230e-03
 -3.01325507e-02  5.82643338e-02  1.72244348e-02 -4.51687956e-03
  7.08566457e-02  7.03161582e-02 -3.73583399e-02 -3.90548185e-02]"
"execution to maximize throughput, or minimize fees.TSRustPress </> button to view full sourceimport { BN } from ""@project-serum/anchor"";
import {
  Keypair,
  Connection,
  LAMPORTS_PER_SOL,
  sendAndConfirmTransaction,
  ComputeBudgetProgram,
  SystemProgram,
  Transaction,
} from ""@solana/web3.js"";

(async () => {
  const payer = Keypair.generate();
  const toAccount = Keypair.generate().publicKey;

  const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");

  const airdropSignature = await connection.requestAirdrop(
    payer.publicKey,
    LAMPORTS_PER_SOL
  );

  await connection.confirmTransaction(airdropSignature);

  const modifyComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({ 
    units: 1000000 
  });

  const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({ 
    microLamports: 1 
  });

  // Total fee will be 5,001 Lamports for 1M CU
  const transaction = new Transaction()
    .add(modifyComputeUnits)
    .add(addPriorityFee)
    .add(
      SystemProgram.transfer({
        fromPubkey: payer.publicKey,
        toPubkey: toAccount,
        lamports: 10000000,
      })
    );

  const signature = await sendAndConfirmTransaction(connection, transaction, [
    payer,
  ]);
  console.log(signature);
  const result = await connection.getParsedTransaction(signature);
  console.log(result);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051const modifyComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({ 
  units: 1000000 
});

const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({ 
  microLamports: 1 
});

const transaction = new Transaction()
.add(modifyComputeUnits)
.add(addPriorityFee)
.add(
    SystemProgram.transfer({
      fromPubkey: payer.publicKey,
      toPubkey: toAccount,
      lamports: 10000000,
    })
  );
123456789101112131415161718//! @brief Example Budget Management

use solana_client::rpc_client::RpcClient;
use solana_program::{instruction::Instruction, message::Message, pubkey::Pubkey};
use solana_sdk::{
    compute_budget::ComputeBudgetInstruction,
    pubkey,
    signature::{Keypair, Signature},
    signer::Signer,
    transaction::Transaction,
};

/// Submits the program instruction as per the instruction definition
fn submit_transaction(
    rpc_client: &RpcClient,
    wallet_signer: &dyn Signer,
    instructions: Vec<Instruction>,
) -> Result<Signature, Box<dyn std::error::Error>> {
    let mut transaction =
        Transaction::new_unsigned(Message::new(&instructions, Some(&wallet_signer.pubkey())));
    let recent_blockhash = rpc_client
        .get_latest_blockhash()
        .map_err(|err| format!(""error: unable to get recent blockhash: {}"", err))?;
    transaction
        .try_sign(&vec![wallet_signer], recent_blockhash)
        .map_err(|err| format!(""error: failed to sign transaction: {}"", err))?;
    let signature = rpc_client
        .send_and_confirm_transaction(&transaction)
        .map_err(|err| format!(""error: send transaction: {}"", err))?;
    Ok(signature)
}

const PROG_KEY: Pubkey = pubkey!(""PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc"");

/// Increase the Transaction Budget and call normal instruction(s)
/// Here we send redundant transactions to witness Compute Budget drawdown
fn send_instructions_demo(
    rpc_client: &RpcClient,
    wallet_signer: &dyn Signer,
) -> Result<(), Box<dyn std::error::Error>> {{
    let accounts = &[];
    let txn = submit_transaction(
        &connection,
        &wallet_signer,
        // Array of instructions: 0: Set Compute Unit Limt, 1: Set Prioritization Fee, 
     ","[-1.07461534e-01 -1.63414627e-02 -1.10069133e-01  3.08368932e-02
 -8.53643566e-03 -5.58433905e-02  7.67000988e-02  5.39048240e-02
  6.58632675e-03  7.35361427e-02  1.11809950e-02 -2.61917785e-02
 -2.08263509e-02 -4.74283509e-02 -1.44195100e-02 -5.30846976e-03
  8.48656800e-03 -1.21899739e-01 -5.21575436e-02 -5.29142693e-02
  2.61652116e-02 -1.06693789e-01  3.76519263e-02 -3.25750001e-02
  4.72895801e-02 -9.56335142e-02 -1.20251561e-02 -4.30930704e-02
  9.01244860e-03 -2.23889798e-02  4.84802835e-02  1.83252301e-02
 -5.03029227e-02  8.85706759e-05 -5.06688319e-02  7.73638487e-02
 -2.54361760e-02  6.21051760e-03 -6.98098987e-02  2.02204622e-02
 -2.56754085e-02  1.70152895e-02 -1.31813601e-01  4.00901586e-02
  6.27374128e-02 -8.87001529e-02 -1.61245205e-02  8.51183310e-02
  3.95650603e-02  5.81480898e-02 -1.12555854e-01  1.26563851e-02
  9.52381175e-04  2.83330008e-02 -8.39625895e-02 -7.13813817e-03
 -2.76986305e-02  6.77295867e-03  2.45264042e-02 -3.35797407e-02
  1.75521579e-02  1.16860180e-03  2.84814294e-02 -5.22716083e-02
  6.38544038e-02 -5.46266185e-03  1.16399617e-03 -3.29138886e-04
 -4.09687012e-02  6.25142828e-03  7.43720774e-03 -1.82834119e-02
 -3.53317298e-02  4.25259061e-02 -4.62239198e-02 -5.68354204e-02
  9.29316226e-03  5.62512502e-03 -4.11010943e-02  1.23359337e-01
  6.55371472e-02 -8.24156478e-02 -4.44019772e-02  1.04058892e-01
  7.36633688e-03  1.85422704e-03 -4.28793312e-04 -1.56406332e-02
  2.27072630e-02 -7.44845942e-02  2.35523470e-02  4.06916253e-02
 -7.30762333e-02 -1.68967119e-03  1.58247650e-02  4.17479016e-02
 -3.14155445e-02 -1.95998792e-02 -1.63000580e-02  8.48205611e-02
  4.82395180e-02 -8.80239084e-02 -1.46360826e-02 -1.07444730e-03
 -3.90530936e-02 -8.26080889e-02  1.00896329e-01  1.63012724e-02
  2.72970870e-02  3.88876013e-02  7.61893205e-03  7.24820644e-02
  1.19021609e-02  4.66718711e-03 -3.93010601e-02  1.22727647e-01
 -3.61445895e-03 -2.86783162e-03  8.09678361e-02  7.24292547e-02
  4.39868197e-02  9.79897082e-02 -1.36361262e-02 -1.99088939e-02
 -5.75189479e-03  6.66485215e-03  3.58733870e-02  1.22976494e-32
 -1.18823601e-02  3.28013897e-02 -4.19655349e-03 -5.86147830e-02
 -2.23008022e-02  2.51371320e-02  6.85994178e-02  2.73895524e-02
 -9.86144841e-02 -7.79975485e-03 -1.03046648e-01 -1.81919783e-02
  4.72628251e-02 -6.19077310e-02 -5.83282784e-02 -8.81258622e-02
  1.01594049e-02  8.46658349e-02  3.85293812e-02 -3.56221944e-02
  3.04829199e-02 -1.33516312e-01 -2.15781964e-02  4.36595567e-02
  4.66969796e-02  3.07415053e-02 -1.71204507e-02  9.38006863e-02
 -2.30634306e-03  2.46979645e-04  8.68093669e-02  9.38026980e-03
 -2.80726962e-02  6.48691207e-02 -1.56122018e-02 -2.22784095e-02
 -1.14857452e-02 -4.61352654e-02 -5.38260527e-02 -1.24424789e-02
 -3.30086835e-02  2.28501786e-03 -4.62813638e-02  2.13206150e-02
 -1.18732288e-01  4.67076665e-03 -1.04531366e-02  5.04374225e-03
  6.24892674e-02  7.46175414e-03 -1.15910918e-01  2.50874776e-02
 -1.19555369e-02 -2.19154917e-02  6.87797889e-02 -3.09881242e-03
 -1.14629036e-02  2.17330065e-02  5.67511320e-02  2.28697993e-02
 -4.84961309e-02 -8.86398554e-02 -7.68041611e-03 -5.67267239e-02
 -1.91054940e-02 -9.18532605e-04 -1.01794973e-01  3.49886231e-02
  4.76130508e-02 -1.29109416e-02 -5.88704348e-02  6.55194819e-02
  1.08162671e-01  2.94567104e-02  4.80758771e-02  1.65416989e-02
 -2.71137580e-02  3.91987339e-02 -7.09344968e-02 -9.80377942e-02
 -1.47885485e-02  2.06719134e-02  2.07980443e-02  7.71999434e-02
  8.38012546e-02  6.80556940e-03 -3.17270271e-02  2.48340592e-02
 -9.07752961e-02  1.13723297e-02 -1.36763956e-02  3.57274413e-02
 -2.95313299e-02 -1.08452983e-01 -1.35202296e-02 -1.03642551e-32
 -2.01306883e-02 -8.29503406e-03 -1.23483621e-01  2.98248213e-02
  5.96511811e-02  4.10846062e-02  7.48164728e-02  2.37963796e-02
 -1.61771253e-02  5.36201857e-02  2.32352484e-02  5.42956106e-02
  1.38088083e-02 -4.59524579e-02 -6.38724654e-04  3.58693041e-02
  5.60334362e-02 -4.64370213e-02  4.06581536e-02 -7.37472996e-02
 -4.62006070e-02  3.54030095e-02 -8.18937179e-03 -1.47827771e-02
 -9.22467113e-02  1.70282423e-02  5.33062667e-02  7.00153559e-02
 -4.57838364e-02  1.97425783e-02  4.14538532e-02  5.34464233e-02
 -1.23350799e-01  9.51436386e-02 -5.40506542e-02 -2.43950952e-02
  4.86454591e-02  3.98357734e-02  9.89335775e-03  9.93044004e-02
  7.70826191e-02 -4.84045632e-02 -8.67156871e-03 -1.30069675e-02
  2.32249312e-02 -3.53639424e-02 -2.99256518e-02 -7.19643235e-02
  5.23186149e-03 -3.70887183e-02  5.86795732e-02 -2.52967477e-02
 -6.25909364e-04  3.06818206e-02  1.09862052e-02  4.81206328e-02
  3.74630243e-02 -4.49760556e-02  1.01007400e-02 -5.39223198e-03
  6.75768554e-02 -9.65046734e-02  6.48356602e-02  3.42623293e-02
  8.82034749e-02 -3.24965380e-02  5.09481318e-02  8.54818970e-02
  1.05308540e-01  5.50330095e-02 -5.11625595e-02  4.41353358e-02
  1.00055024e-01  3.93904410e-02  3.69173810e-02  4.87854481e-02
  2.13785172e-02  1.79576911e-02  7.12012574e-02  1.26116527e-02
  2.75794752e-02  2.05187549e-04  4.72144820e-02 -8.81896466e-02
  1.48928985e-02  2.78847432e-03 -1.65135171e-02  3.76147069e-02
 -4.14807424e-02 -8.38436652e-03 -8.51782262e-02 -5.72520606e-02
 -1.82588454e-02 -1.57530103e-02  2.52960976e-02 -6.54804211e-08
 -3.50222178e-02  3.76039967e-02 -2.48277653e-02  5.20955510e-02
 -1.81755815e-02  2.99809687e-02  5.87925570e-05  2.12195329e-02
  8.18943698e-03 -7.05864057e-02 -4.09399718e-02  1.42387291e-02
  3.90123911e-02  5.27386665e-02  5.47076091e-02 -7.71056935e-02
 -3.33181061e-02 -1.77225154e-02 -3.84187363e-02 -8.72306898e-02
  5.54816090e-02  1.25316791e-02 -4.13848087e-02 -1.42138526e-02
  7.11179748e-02 -4.84838476e-03  4.77254130e-02  1.00255102e-01
  1.00151803e-02 -5.95673099e-02 -1.40963554e-01 -1.15694264e-02
 -4.33651544e-03 -5.61580770e-02 -9.07421634e-02  1.73498914e-02
 -3.85888852e-02 -1.06699783e-02  4.16319584e-03  9.49225649e-02
  2.18711533e-02  1.26888994e-02 -8.59909207e-02 -3.39284330e-03
  4.04808205e-03  2.53788885e-02 -4.20497395e-02  3.99389081e-02
  3.00421473e-02  1.41602177e-02  2.10756827e-02 -2.53912285e-02
  5.48231881e-03  3.37645262e-02  5.02953352e-03 -5.24389669e-02
 -1.15560153e-02 -4.16889749e-02 -6.86403364e-02  4.01417278e-02
  4.05956097e-02  1.49590559e-02 -6.27525151e-02 -1.23608503e-02]"
"  // 2: Do something, 3: Do something else
        [ComputeBudgetInstruction::set_compute_unit_limit(1_000_000u32),
        ComputeBudgetInstruction::set_compute_unit_price(1u32),
        Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
        Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec())].to_vec(),
    )?;
    println!(""{:?}"", txn);
    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354let txn = submit_transaction(
  &connection,
  &wallet_signer,
  // Array of instructions: 0: Set Compute Unit Limt, 1: Set Prioritization Fee, 
  // 2: Do something, 3: Do something else
  [ComputeBudgetInstruction::set_compute_unit_limit(1_000_000u32),
  ComputeBudgetInstruction::set_compute_unit_price(1u32),
  Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
  Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec())].to_vec(),
)?;
12345678910Program Logs Example ( Exploreropen in new window ):Log Output[ 1] Program ComputeBudget111111111111111111111111111111 invoke [1]
[ 2] Program ComputeBudget111111111111111111111111111111 success
[ 3]
[ 4] Program ComputeBudget111111111111111111111111111111 invoke [1]
[ 5] Program ComputeBudget111111111111111111111111111111 success
12345 # Accounts# How to create a system accountCreate an account that the System Programopen in new window owns. The Solana runtime will grant the owner of an account, access to write to its data or transfer lamports. When creating an account, we have to preallocate a fixed storage space in bytes (space) and enough lamports to cover the rent. Rentopen in new window is a cost incurred to keep accounts alive on Solana.TSRustPress </> button to view full sourceimport {
  SystemProgram,
  Keypair,
  Transaction,
  sendAndConfirmTransaction,
  Connection,
  clusterApiUrl,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const fromPubkey = Keypair.generate();

  // Airdrop SOL for transferring lamports to the created account
  const airdropSignature = await connection.requestAirdrop(
    fromPubkey.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // amount of space to reserve for the account
  const space = 0;

  // Seed the created account with lamports for rent exemption
  const rentExemptionAmount =
    await connection.getMinimumBalanceForRentExemption(space);

  const newAccountPubkey = Keypair.generate();
  const createAccountParams = {
    fromPubkey: fromPubkey.publicKey,
    newAccountPubkey: newAccountPubkey.publicKey,
    lamports: rentExemptionAmount,
    space,
    programId: SystemProgram.programId,
  };

  const createAccountTransaction = new Transaction().add(
    SystemProgram.createAccount(createAccountParams)
  );

  await sendAndConfirmTransaction(connection, createAccountTransaction, [
    fromPubkey,
    newAccountPubkey,
  ]);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546const createAccountParams = {
  fromPubkey: fromPubkey.publicKey,
  newAccountPubkey: newAccountPubkey.publicKey,
  lamports: rentExemptionAmount,
  space,
  programId: SystemProgram.programId,
};

const createAccountTransaction = new Transaction().add(
  SystemProgram.createAccount(createAccountParams)
);

await sendAndConfirmTransaction(connection, createAccountTransaction, [
  fromPubkey,
  newAccountPubkey,
]);
12345678910111213141516use solana_client::rpc_client::RpcClient;
use solana_program::system_instruction;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::native_token::LAMPORTS_PER_SOL;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let from_keypair = Keypair::new();
    let from_pubkey = Signer::pubkey(&from_keypair);

    match connection.request_airdrop(&from_pubkey, LAMPORTS_PER_SOL) {
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"",","[-7.26645440e-02  7.19066635e-02 -1.01812176e-01 -4.71038669e-02
 -1.10825658e-01 -9.50988010e-02  4.50461656e-02  9.60892718e-03
 -1.13495970e-02  3.01559698e-02  4.38592918e-02 -6.36171848e-02
  6.86221719e-02 -8.98578465e-02 -2.91086338e-03 -3.03314999e-02
 -1.66457854e-02 -1.32181002e-02 -5.81883267e-02 -4.94301952e-02
  8.11661594e-03  5.43629862e-02  4.25220579e-02  7.65119269e-02
  3.40268053e-02 -8.66022035e-02  5.47058880e-02  7.66582713e-02
  1.79417673e-02  5.29193552e-03  5.64279072e-02  3.72685865e-02
 -1.68127175e-02  1.88440848e-02  3.96651551e-02  1.44529894e-01
  1.90811530e-02 -5.07093444e-02 -6.57507926e-02  6.74387906e-03
 -2.07990818e-02 -2.93911509e-02 -1.80402532e-01  5.36881275e-02
  2.38650721e-02  3.03133167e-02 -2.52077021e-02  1.58706680e-02
  3.42829451e-02 -2.49482808e-03 -1.34340907e-02  6.91928789e-02
 -2.55045053e-02 -3.42935808e-02 -5.58467954e-02  6.15567854e-03
  3.41119617e-02 -1.72161423e-02  3.07740550e-02 -2.73801852e-02
 -4.49745990e-02  1.96248367e-02  9.38778836e-03 -1.68576986e-02
 -1.94864608e-02  3.70999076e-03  2.38656811e-02  1.79072786e-02
 -2.29706056e-02  8.45286474e-02  4.50670766e-03 -5.01918942e-02
 -1.37896985e-01 -3.68407043e-03 -8.03408846e-02  8.82715511e-04
  2.67681479e-02 -4.61045839e-03 -1.44922538e-02 -6.56581596e-02
 -2.89016385e-02 -5.08347340e-02  3.81565839e-02 -1.63375400e-02
 -1.74640622e-02  4.89199534e-04  2.13775272e-03  3.46252136e-02
  8.63919482e-02 -2.91310064e-02  5.75582534e-02  2.21479628e-02
 -5.46387993e-02 -6.96945637e-02  7.58941472e-02  2.75693424e-02
  4.28564660e-02 -1.80184077e-02 -3.33980285e-02  5.70374206e-02
  2.75572315e-02  2.65901838e-03  4.53149006e-02 -6.53933920e-03
  3.06907669e-02  1.86594222e-02  4.21304181e-02  6.22466020e-02
 -1.57137793e-02 -9.63911042e-02  3.50292586e-02  3.82263847e-02
  2.20409911e-02 -1.69702135e-02  9.72796523e-04  1.07608065e-01
 -4.21184376e-02  2.75463536e-02  4.21358645e-03  1.57742463e-02
  3.63026969e-02  5.10600321e-02 -3.99881117e-02  2.08813008e-02
 -1.15788937e-01 -7.38931298e-02 -5.37219830e-02  3.74964882e-33
 -2.83713061e-02 -2.06579808e-02 -2.06101909e-02 -2.42575370e-02
 -4.76357676e-02  8.17442760e-02 -9.42901336e-03  6.72289282e-02
 -8.87003094e-02  6.11934625e-02 -6.83188736e-02 -6.48778751e-02
  4.61648852e-02  2.19916110e-03 -4.55618044e-03 -1.07272267e-01
  5.67168184e-03  3.42446193e-02  9.90665704e-02 -6.78986078e-03
  1.04680285e-01 -5.77674098e-02 -4.24193703e-02  1.88962196e-03
 -1.46441758e-02  5.04463650e-02 -2.01580189e-02 -3.52724604e-02
 -1.13022691e-02 -1.93714141e-03  1.07064145e-02 -4.73102108e-02
 -2.25349665e-02 -1.41102942e-02 -2.18721796e-02 -4.31852639e-02
 -2.07382925e-02 -5.70116714e-02  2.15574410e-02 -8.48331079e-02
 -6.79782033e-03 -2.58029960e-02 -2.14843955e-02  7.43490353e-04
 -3.67597006e-02  2.01448388e-02 -1.92740951e-02  5.99731356e-02
  6.54721856e-02  2.37500668e-02 -2.90135425e-02 -7.61360722e-03
  9.98700690e-03 -4.14749011e-02 -4.59188335e-02 -8.66961479e-02
  3.06299366e-02 -5.95149770e-03 -1.12711368e-02  5.94770275e-02
 -5.77110462e-02  4.29427549e-02 -6.26281500e-02  2.57666018e-02
 -6.82507008e-02  2.95453914e-03 -8.21801648e-02  3.21973078e-02
  7.30546704e-03 -2.39190403e-02 -6.57140240e-02  8.66228715e-02
  2.05442868e-02 -8.89860094e-04  1.23278322e-02 -2.44133510e-02
  5.58171310e-02 -7.57201612e-02 -6.47318512e-02 -7.70882592e-02
 -2.43209172e-02  5.40155359e-02 -4.81261015e-02  4.45126444e-02
  1.24969380e-02  9.93207563e-03  3.84227969e-02 -1.32703744e-02
 -4.88423593e-02  8.81025568e-04 -2.80528776e-02 -4.11201902e-02
  2.02106647e-02 -7.60421753e-02  1.23641370e-02 -5.63338917e-33
  6.35319576e-03  7.50879245e-03 -3.93532775e-02  4.27467003e-02
  1.04907602e-02  2.27118609e-03  8.66447166e-02 -5.24504855e-02
 -4.02564332e-02 -4.62905988e-02 -8.87153521e-02  3.72973233e-02
  1.04583874e-02 -3.08171511e-02  8.55267346e-02 -4.12155688e-02
 -8.65456983e-02  1.48960473e-02  2.89902110e-02  3.93764116e-03
 -6.34956658e-02  7.00161830e-02  5.98092377e-02  3.75061147e-02
 -3.03292181e-02  2.62179505e-02 -1.00336429e-02  1.00784890e-01
  3.18689905e-02  5.70574664e-02  3.60610485e-02 -2.57067326e-02
 -2.97288597e-02  1.56143472e-01  1.10256374e-02 -5.14080636e-02
  1.05624869e-01  6.96583018e-02 -1.95382889e-02  4.94926870e-02
  1.13500573e-01 -2.35606749e-02 -5.66972718e-02  6.45709485e-02
  5.04186414e-02  2.21079979e-02  7.05456082e-03 -3.13209444e-02
 -2.64479034e-03 -3.94934937e-02 -1.70855988e-02 -2.81195119e-02
 -1.59814022e-02  3.84539776e-02 -6.03593737e-02  4.50747274e-02
  9.49453115e-02 -4.79600914e-02  1.90900695e-02 -6.31983131e-02
  1.90054812e-02 -1.42062372e-02  1.24316588e-01  6.08689152e-02
  2.69267075e-02 -3.22716348e-02  3.14937793e-02  4.48769256e-02
  5.60432300e-02 -4.74300459e-02  1.90588534e-02 -6.97548594e-03
 -1.40032703e-02 -7.04913214e-03  3.62486616e-02  7.87779167e-02
 -2.89756730e-02 -6.78276196e-02 -9.93116014e-03  5.57155572e-02
  3.91776720e-03  3.10832281e-02  8.29252973e-03  4.89203781e-02
 -3.43070738e-02 -5.65584302e-02  4.62693162e-02  6.87236190e-02
 -2.89247911e-02 -1.84259564e-02 -7.93672130e-02  2.89985817e-02
  2.39368733e-02  4.24717665e-02 -5.42438217e-02 -5.46465166e-08
 -1.48830349e-02 -6.56689256e-02  4.05596644e-02  5.66626377e-02
  4.03654352e-02 -2.74240784e-02  2.95210294e-02 -8.04351494e-02
 -3.51782143e-02 -4.89794128e-02 -3.45712118e-02 -2.79089175e-02
 -8.69777799e-02 -4.22209837e-02  2.10156683e-02 -1.34134637e-02
 -6.87100226e-03 -9.02344361e-02 -3.90233994e-02 -1.28392443e-01
 -7.40134018e-03  2.32568681e-02 -1.03869718e-02 -9.84266587e-03
 -4.29757908e-02 -2.09040642e-02  3.60466838e-02  1.60722494e-01
  6.64698854e-02 -5.07059693e-02  8.81151110e-02 -7.29702413e-02
  4.22458276e-02  4.16468419e-02 -1.68379340e-02 -4.73346300e-02
 -2.82803457e-02  1.02803163e-01  7.38502294e-02  1.02135248e-01
 -9.95090753e-02 -2.13899631e-02 -3.87933888e-02  3.50049101e-02
  3.32360528e-02  9.50327050e-03 -1.17019616e-01 -1.22998524e-02
  7.35622719e-02  2.78793797e-02  2.65445886e-03  5.29297907e-03
 -1.16296951e-02  8.53474066e-02 -3.14853191e-02 -4.13189195e-02
 -7.12910220e-02 -5.41800894e-02  1.33897690e-02  6.56000450e-02
  3.18581425e-03  1.90203711e-02 -8.40604678e-03 -7.21325502e-02]"
"sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error requesting airdrop""),
    };

    let space = 0;
    let rent_exemption_amount = connection
        .get_minimum_balance_for_rent_exemption(space)
        .unwrap();

    let new_account_keypair = Keypair::new();
    let new_account_pubkey = Signer::pubkey(&new_account_keypair);

    let create_account_ix = system_instruction::create_account(
        &from_pubkey,
        &new_account_pubkey,
        rent_exemption_amount,
        space as u64,
        &from_pubkey,
    );

    let (recent_blockhash, _) = connection.get_recent_blockhash().unwrap();

    let create_account_tx = solana_sdk::transaction::Transaction::new_signed_with_payer(
        &[create_account_ix],
        Some(&from_pubkey),
        &[&from_keypair, &new_account_keypair],
        recent_blockhash,
    );

    match connection.send_and_confirm_transaction(&create_account_tx) {
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error creating system account""),
    };
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162let create_account_ix = system_instruction::create_account(
    &from_pubkey,
    &new_account_pubkey,
    rent_exemption_amount,
    space as u64,
    &from_pubkey,
);

let (recent_blockhash, _) = connection.get_recent_blockhash().unwrap();

let create_account_tx = solana_sdk::transaction::Transaction::new_signed_with_payer(
    &[create_account_ix],
    Some(&from_pubkey),
    &[&from_keypair, &new_account_keypair],
    recent_blockhash,
);

match connection.send_and_confirm_transaction(&create_account_tx) {
    Ok(sig) => loop {
        if let Ok(confirmed) = connection.confirm_transaction(&sig) {
            if confirmed {
                println!(""Transaction: {} Status: {}"", sig, confirmed);
                break;
            }
     ","[-8.69963169e-02  1.18412189e-02 -7.84611478e-02  4.21692319e-02
  4.27116174e-04 -6.95503056e-02  8.85301307e-02  1.53584946e-02
  1.07475347e-03  2.14744247e-02  1.18340842e-01 -6.09057061e-02
 -4.78844717e-02 -2.01248676e-02  4.05914150e-03  6.82638511e-02
 -1.25302747e-01 -1.51402308e-02 -5.21903299e-02  3.76189360e-03
  4.85635735e-02 -5.53818680e-02 -4.43825527e-04 -9.56666283e-03
  7.28936791e-02 -6.96811676e-02  1.81586631e-02  4.73533943e-02
 -8.98526516e-03 -1.22428527e-02  1.17650740e-01  9.21220332e-02
 -1.17079196e-02  2.28908658e-02  7.49303848e-02  3.52625363e-02
  2.48404499e-02  3.69609799e-03  9.78112686e-03 -9.80216861e-02
 -3.64726782e-02  2.91045588e-02 -5.44566624e-02  5.06655797e-02
 -7.17475042e-02  1.93420257e-02 -6.69969339e-03  9.09679234e-02
  4.22624461e-02  2.31843982e-02 -9.33440123e-03  7.09988177e-02
 -4.87737618e-02  6.47686049e-02 -1.34803643e-02  1.38831828e-02
 -6.86320569e-03 -3.27500664e-02  1.79710425e-02 -5.48632331e-02
  8.57695565e-03  2.12710928e-02  1.75174028e-02 -4.39960286e-02
 -3.45862880e-02  1.14449747e-02 -6.71455264e-02 -8.23313312e-04
 -2.19605453e-02  4.34477665e-02  1.91857386e-02 -3.49661969e-02
 -8.20365176e-02  1.54954111e-02 -4.54737507e-02 -3.58314789e-03
  8.14433955e-03  7.91174639e-03 -3.85359339e-02 -1.31775076e-02
 -2.97935829e-02 -5.84777892e-02 -3.35507914e-02  4.02249135e-02
 -5.32963760e-02 -2.44830083e-03 -5.02722859e-02 -8.14067423e-02
  5.49935363e-02 -7.05998344e-03  5.42364307e-02  2.06954591e-02
 -2.33680643e-02  6.82415674e-03  8.06327090e-02  1.23042020e-03
 -1.34360548e-02 -1.61919685e-03 -1.06155917e-01  9.52078179e-02
  2.81401109e-02 -6.20905921e-05 -5.92507422e-02 -3.64644104e-03
  3.63497250e-02 -7.01868609e-02  1.74099520e-01 -1.09193228e-01
 -6.61757216e-02  5.76012544e-02  1.59417484e-02  5.53918257e-02
 -5.91900200e-03 -7.67344562e-03 -2.33909804e-02  8.91688094e-02
 -2.65430659e-02  4.81822900e-02  8.46051238e-03  1.54198678e-02
  2.02859510e-02  1.17078438e-01 -5.31186052e-02 -6.68094903e-02
 -4.71092612e-02 -2.84355637e-02  9.50708985e-03  7.31230633e-34
 -3.19277286e-03 -1.11404164e-02 -3.41255628e-02 -9.10386443e-03
 -6.94815908e-03 -2.54236571e-02  4.38893475e-02  3.49634811e-02
 -5.06562442e-02  4.35132198e-02 -4.46362793e-02 -8.60901177e-02
 -4.59844572e-03 -9.26283970e-02  3.42332385e-03 -9.02504940e-03
 -8.64791125e-03  6.00699987e-03  1.01125717e-01  7.03221932e-02
  8.44817609e-03 -1.15593791e-01 -4.58924985e-03 -2.57651359e-02
  1.29666282e-02 -5.02220280e-02 -5.16541600e-02 -4.60763313e-02
  5.94793856e-02  3.14329416e-02 -1.42515926e-02  2.12984346e-02
  2.00857762e-02  3.44191790e-02  5.47462553e-02  1.64431110e-02
 -8.64289794e-03  1.13683194e-02 -9.89477336e-02 -2.46684421e-02
  4.31645699e-02 -4.67803739e-02 -6.56951144e-02  4.88842512e-03
 -6.12322465e-02  2.62377393e-02  5.11246473e-02  4.26647961e-02
  4.84148003e-02  4.60355170e-02 -6.96136802e-02 -1.09741418e-02
 -9.70435366e-02 -5.27195632e-02  4.11929302e-02 -4.58489135e-02
 -7.07713887e-03 -1.78873800e-02  3.56265940e-02 -3.26161273e-02
 -2.68348977e-02 -1.84262940e-03  3.88524011e-02 -2.47965734e-02
 -2.23351340e-03  9.77723673e-03 -5.65791875e-02  2.50393711e-02
 -1.32876141e-02 -5.04522547e-02 -7.19476789e-02  4.66417484e-02
 -4.42688614e-02  5.78426868e-02 -2.86341161e-02 -6.90859780e-02
  5.34420600e-03  3.69974338e-02 -3.47058140e-02 -8.24309215e-02
  5.96107878e-02 -6.83422536e-02 -1.44664720e-02  7.01152384e-02
 -5.68356104e-02  6.62815571e-02  6.34432957e-02  1.46033000e-02
 -7.19946846e-02  1.31915836e-02  7.45672919e-03 -5.47704063e-02
  2.64482275e-02 -1.46272957e-01  6.51720585e-03 -3.44644989e-33
 -4.33571637e-02 -5.30075245e-02 -8.94842446e-02 -3.77563573e-02
  2.05786191e-02  3.44348736e-02  7.17470273e-02  3.17626446e-02
 -4.30752002e-02  2.86007933e-02 -1.09460741e-01  5.02098761e-02
  2.52490062e-02 -1.97060760e-02  1.53715694e-02  1.86203606e-02
 -3.07255667e-02 -3.89250517e-02  2.46087108e-02  4.17674799e-03
 -2.96719205e-02  8.32984969e-02  3.90064828e-02  4.82088141e-02
 -4.65521514e-02  5.87548176e-03 -2.03806087e-02  1.35307893e-01
 -3.17619666e-02  4.72759875e-03  4.74408902e-02  7.29965745e-03
 -8.02849010e-02  9.15118679e-02  1.79887051e-03 -1.31784782e-01
  4.59765382e-02  7.38000572e-02 -3.05401571e-02  5.80610260e-02
  4.41388451e-02 -5.48780486e-02 -3.50137949e-02 -1.55898910e-02
 -1.50099013e-03  9.50478483e-03  5.81881814e-02 -2.16597412e-02
 -2.63278782e-02 -3.03133782e-02  6.63546920e-02 -2.75041405e-02
 -4.53509353e-02  4.77282554e-02  1.56594273e-02  1.05444729e-01
  1.31644532e-01 -3.26103941e-02  8.20803270e-02 -3.61064263e-02
  2.24105269e-02 -7.33649135e-02  1.08317025e-02  2.34494377e-02
  9.04283002e-02 -9.47632566e-02  3.73817794e-02  8.08655343e-04
  4.00913246e-02  6.24249168e-02 -5.41978925e-02 -3.90470847e-02
  5.58526181e-02 -1.35949801e-03  6.57601207e-02  8.66298378e-02
  4.14671265e-02  2.22626328e-03  5.85050788e-03 -1.10678915e-02
 -5.93211204e-02  2.22291774e-03  1.46280490e-02  3.83611508e-02
  4.11601849e-02 -8.45732540e-02 -1.29609825e-02  7.14436918e-03
 -6.53582662e-02  7.42205679e-02 -6.42358512e-02 -1.49018131e-02
 -4.10862230e-02  1.90804824e-02 -3.27503830e-02 -5.75958055e-08
 -3.30378264e-02 -4.08071443e-04 -8.50218628e-03  7.29971677e-02
  3.23826000e-02  2.84924451e-02  5.95933199e-02 -8.89146328e-03
 -3.45544592e-02 -1.00180842e-01 -4.22098301e-02  3.86083722e-02
 -2.38744449e-02  4.52443883e-02  1.07629877e-02 -1.12046972e-01
 -1.95179619e-02 -3.89236659e-02 -5.72684370e-02 -9.81775299e-02
  1.43802511e-02 -1.60568394e-02 -2.25752611e-02 -8.19582585e-03
 -1.49784042e-02  2.09636390e-02  5.03763631e-02  6.07804582e-02
  1.14221931e-01 -4.76479270e-02  3.39502958e-03  6.02247426e-03
  2.30927672e-02 -4.74134199e-02 -1.09657370e-01  5.61187007e-02
 -2.43274253e-02 -3.06197964e-02  4.91437083e-03  1.14859648e-01
 -9.50491894e-03  4.65708561e-02 -5.70561104e-02 -7.08577642e-03
 -3.32342647e-02 -3.65435226e-05 -1.56104956e-02 -1.07984319e-02
  5.56646995e-02  5.40981703e-02 -2.80335490e-02 -2.00775024e-02
  4.81141135e-02  1.24789923e-01  1.29344994e-02 -4.07597162e-02
 -2.95451060e-02 -7.48957414e-03 -2.23347135e-02  2.21156119e-03
  3.67396250e-02  3.29323597e-02 -9.71734524e-02  3.81639302e-02]"
"  }
    },
    Err(_) => println!(""Error creating system account""),
};
12345678910111213141516171819202122232425262728# How to calculate account costKeeping accounts alive on Solana incurs a storage cost called rentopen in new window. An account can be made entirely exempt from rent collection by depositing at least two years worth of rent. For the calculation, you need to consider the amount of data you intend to store in the account.TSRustCLIimport { Connection, clusterApiUrl } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // length of data in the account to calculate rent for
  const dataLength = 1500;
  const rentExemptionAmount =
    await connection.getMinimumBalanceForRentExemption(dataLength);
  console.log({
    rentExemptionAmount,
  });
})();
12345678910111213use solana_client::rpc_client::RpcClient;
use solana_sdk::commitment_config::CommitmentConfig;

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
    let data_length = 1500;

    let rent_exemption_amount = connection
        .get_minimum_balance_for_rent_exemption(data_length)
        .unwrap();

    println!(""rent exemption amount: {}"", rent_exemption_amount);
}
1234567891011121314solana rent 1500
1# How to create accounts with seedsYou can use createAccountWithSeed to manage your accounts instead of creating a bunch of different keypair.# GenerateTSRustPress </> button to view full sourceimport { PublicKey, SystemProgram } from ""@solana/web3.js"";

(async () => {
  let basePubkey = new PublicKey(
    ""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY""
  );
  let seed = ""robot001"";
  let programId = SystemProgram.programId;

  console.log(
    `${(
      await PublicKey.createWithSeed(basePubkey, seed, programId)
    ).toBase58()}`
  );
})();
123456789101112131415PublicKey.createWithSeed(basePubkey, seed, programId);
1use solana_program::pubkey::Pubkey;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let base_pubkey = Keypair::new().pubkey();
    let seed = ""robot001"";
    let program_id = solana_program::system_program::id();

    let derived_pubkey = Pubkey::create_with_seed(&base_pubkey, seed, &program_id).unwrap();

    println!(""account pubkey: {:?}"", derived_pubkey);
}
123456789101112use solana_program::pubkey::Pubkey;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let base_pubkey = Keypair::new().pubkey();
    let seed = ""robot001"";
    let program_id = solana_program::system_program::id();

    let derived_pubkey = Pubkey::create_with_seed(&base_pubkey, seed, &program_id).unwrap();

    println!(""account pubkey: {:?}"", derived_pubkey);
}
123456789101112# CreateTSRustPress </> button to view full sourceimport {
  PublicKey,
  SystemProgram,
  Connection,
  clusterApiUrl,
  Transaction,
  Keypair,
  sendAndConfirmTransaction,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const base = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  let basePubkey = base.publicKey;
  let seed = ""robot001"";
  let programId = SystemProgram.programId;

  let derived = await PublicKey.createWithSeed(basePubkey, seed, programId);

  const tx = new Transaction().add(
    SystemProgram.createAccountWithSeed({
      fromPubkey: feePayer.publicKey, // funder
      newAccountPubkey: derived,
      basePubkey: basePubkey,
      seed: seed,
      lamports: 1e8, // 0.1 SOL
 ","[-4.78868373e-02  5.63639030e-03 -1.32448688e-01  7.01311007e-02
 -4.18941900e-02 -2.64031049e-02 -1.24807516e-02  5.54083064e-02
  2.74158008e-02  8.23190957e-02  3.38262616e-04 -1.15739897e-01
  2.26195697e-02 -1.32734552e-02 -2.42827218e-02 -5.93274599e-03
 -1.13052674e-01 -3.76594365e-02 -4.97268885e-03 -2.54417192e-02
  6.74713328e-02 -6.80751652e-02 -1.64497774e-02 -5.88488244e-02
  7.84432143e-02  5.15002711e-03  2.13009268e-02 -3.53309289e-02
  3.51833701e-02  6.71973526e-02  2.22947616e-02 -2.37143016e-03
  8.62112362e-03 -6.41386434e-02  3.36036272e-02  4.71643917e-02
 -8.13041925e-02 -1.37624070e-02 -2.75784191e-02 -3.00333109e-02
 -9.02245939e-03  9.57048461e-02 -8.61449838e-02 -5.41112237e-02
  1.42630953e-02 -6.42239153e-02 -1.02388129e-01  9.39771757e-02
 -2.15555187e-02  2.03658789e-02  6.15475746e-03  3.71493921e-02
 -3.97503078e-02  5.25770448e-02 -3.96439768e-02  3.08152358e-03
  6.06862716e-02 -3.59613076e-02  1.33033702e-02 -2.97579169e-02
  6.10033162e-02 -3.85700502e-02  5.98111525e-02 -7.99286067e-02
  3.07596996e-02 -1.34213362e-02 -1.61390994e-02  4.23906259e-02
 -1.74090434e-02  1.18010147e-02 -3.66230085e-02  3.16044912e-02
 -5.03749996e-02 -2.69802622e-02 -3.47481221e-02  6.02201850e-04
  1.16067901e-01  7.66875446e-02  2.97556240e-02  4.01935875e-02
  1.23807117e-02 -4.13224325e-02 -1.25096254e-02  5.31690344e-02
 -2.79533267e-02 -1.33716613e-02 -5.06114140e-02 -4.67088446e-02
  6.14322536e-02 -6.47137836e-02  3.47702950e-02  8.76352340e-02
 -6.73170313e-02 -2.38132477e-02  2.95341350e-02  3.03601529e-02
 -6.56629056e-02  6.37169555e-02 -1.06240492e-02  6.19576089e-02
  4.92014214e-02 -2.84385495e-02  2.65378528e-03  1.18570058e-02
 -5.20108864e-02 -6.22342676e-02  1.33722082e-01 -3.19702849e-02
 -2.90670134e-02  5.23936823e-02  2.51852628e-02  5.61960749e-02
 -1.44580659e-02  4.40212563e-02  2.11945660e-02  5.13642877e-02
  2.26744357e-02 -8.51021498e-04  8.90678465e-02  8.81938115e-02
  1.02282658e-01  6.41299188e-02  5.08748228e-03 -6.82676360e-02
  5.32470830e-02 -1.54201025e-02  1.08141303e-02  8.71575870e-33
 -2.26678271e-02 -6.30893931e-02  3.37905250e-02  5.86666958e-03
 -4.59471084e-02 -2.07129642e-02 -1.35745881e-02  8.67680833e-02
 -6.96052760e-02  1.04262549e-02 -1.59361400e-02  1.90922841e-02
 -3.50262746e-02 -1.57003328e-01 -1.99298514e-03 -2.29452997e-02
  3.90390269e-02  6.55744877e-03  9.08569992e-02 -4.31870446e-02
  3.17967013e-02 -7.50155449e-02  7.53273293e-02 -4.55521420e-02
  3.44092101e-02 -5.64092547e-02  8.79070372e-04  3.74594913e-03
 -4.15527746e-02  8.89948010e-03  7.03893900e-02  1.25389528e-02
 -7.00923651e-02  2.77412385e-02  3.68652530e-02  3.30880634e-03
  2.42199320e-02 -2.86368690e-02 -9.10644606e-02  1.81074403e-02
 -1.09146098e-02  2.84208003e-02  4.89136800e-02 -4.70942743e-02
 -6.17968962e-02 -3.32744769e-03  8.78201351e-02  4.49447036e-02
  5.81656210e-02  1.15590185e-01 -1.02925278e-01 -2.34534331e-02
 -1.35682121e-01  2.00590305e-02 -2.52368469e-02  2.71708556e-02
  1.82301085e-02 -3.86898182e-02  3.97926345e-02 -8.46805144e-03
 -3.18783782e-02 -1.05023861e-01  9.50779207e-03 -2.31844503e-02
 -1.74197182e-02  2.90923975e-02 -3.60980779e-02  1.76683068e-02
  6.96693966e-03 -1.25910547e-02  1.03401719e-02 -1.33969355e-03
 -6.67268410e-03  7.35729337e-02 -2.36154837e-03 -6.44105524e-02
  4.81231958e-02  1.07578449e-01 -1.40829906e-01  2.02674996e-02
  5.48637584e-02 -6.06037788e-02 -2.94763017e-02  8.51921663e-02
 -8.83454178e-03  1.01061100e-02  2.26385351e-02  2.11803354e-02
 -5.25646284e-02  1.86264124e-02  7.22627118e-02  2.64665298e-02
 -1.14666456e-02 -8.40696692e-02 -4.93941382e-02 -7.98647466e-33
 -4.79613841e-02 -2.67999358e-02 -6.89134300e-02 -8.73476863e-02
  2.96604242e-02 -1.83351431e-02 -4.45982032e-02 -1.95736140e-02
 -4.08153310e-02  1.19957328e-02 -5.81385829e-02  3.42155769e-02
  1.19416956e-02 -5.79776475e-03 -5.45145757e-02  7.95766935e-02
  4.84735593e-02 -1.16758190e-01  5.48699684e-02 -3.19303758e-02
 -1.37091456e-02  8.56468603e-02  4.09550546e-03 -1.36082228e-02
 -5.66546507e-02 -1.09398719e-02 -1.39546646e-02  6.10558949e-02
 -6.65633678e-02  1.28036155e-03  1.14864903e-03 -9.54520851e-02
 -3.98348123e-02  5.06409071e-02 -1.68194044e-02 -1.12099595e-01
  3.25312428e-02 -2.59221345e-02  2.55072932e-03  6.66638240e-02
  6.55701160e-02 -9.77000780e-03 -5.66018857e-02 -3.67176980e-02
  8.86168331e-02 -5.05627654e-02  3.12833227e-02 -5.09389080e-02
  3.76829542e-02  4.26535681e-03  3.97491269e-02 -8.03091824e-02
 -7.07001686e-02  3.12483627e-02 -1.52115980e-02  5.76339737e-02
  6.96899891e-02  3.59589942e-02  4.36541289e-02 -4.08207290e-02
  4.47530784e-02 -5.75884841e-02 -1.96669605e-02  3.72580886e-02
  1.35317612e-02 -6.03710152e-02  3.33704464e-02 -4.63345610e-02
  4.12760824e-02  3.23329642e-02 -5.66214733e-02  5.00028357e-02
  4.74064089e-02  3.47193740e-02 -6.84170574e-02  2.60850117e-02
  2.73672696e-02 -3.47233303e-02  8.84519070e-02 -1.48378909e-02
 -4.81312908e-02  5.00574596e-02  1.98232923e-02 -5.06211109e-02
  7.00064236e-03 -8.06209818e-02  3.98082472e-02 -8.27465858e-03
 -7.34288990e-02  7.64730796e-02 -1.00625522e-01  6.70524081e-03
 -8.08565319e-02 -7.75619131e-03 -4.20013890e-02 -5.62254208e-08
 -2.17706356e-02 -3.29998345e-03 -5.53784445e-02  7.07885176e-02
  6.39898283e-03 -3.84949669e-02  5.21647520e-02  1.99894328e-02
 -6.33704534e-04  4.53985669e-02  1.08584138e-02  4.38663475e-02
  1.03917951e-02 -1.22032436e-02 -4.66686562e-02  1.26679456e-02
  2.19140425e-02  2.25870591e-02 -3.13489325e-02 -2.19712052e-02
  5.12848943e-02 -1.14929881e-02  3.08746635e-03  3.01172566e-02
  3.60987969e-02 -6.00466058e-02  3.34624015e-02  7.91982263e-02
  3.84460837e-02 -8.60607773e-02 -7.88770542e-02  1.29015185e-02
  5.28818704e-02 -9.92146973e-03 -4.43747900e-02  2.32171882e-02
 -3.55488956e-02  4.75708507e-02  5.61355241e-02  1.43069863e-01
  5.54184010e-03  8.28043818e-02 -2.77856421e-02  6.12500310e-03
  1.59377176e-02  4.99318615e-02 -9.89170745e-02  2.38931198e-02
  5.66243492e-02 -4.11743186e-02  1.27898464e-02 -2.27226876e-02
 -1.05274171e-02  9.46318209e-02  2.12669708e-02 -6.13327213e-02
 -3.82458828e-02  3.75087187e-02 -3.97729129e-02  6.62650391e-02
  1.37267401e-02  2.40667202e-02 -5.60699366e-02 -8.08033943e-02]"
"    space: 0,
      programId: programId,
    })
  );

  console.log(
    `txhash: ${await sendAndConfirmTransaction(connection, tx, [
      feePayer,
      base,
    ])}`
  );
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455const tx = new Transaction().add(
  SystemProgram.createAccountWithSeed({
    fromPubkey: feePayer.publicKey, // funder
    newAccountPubkey: derived,
    basePubkey: basePubkey,
    seed: seed,
    lamports: 1e8, // 0.1 SOL
    space: 0,
    programId: owner,
  })
);

console.log(
  `txhash: ${await sendAndConfirmTransaction(connection, tx, [feePayer, base])}`
);
123456789101112131415use solana_client::rpc_client::RpcClient;
use solana_program::pubkey::Pubkey;
use solana_program::system_instruction;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::native_token::LAMPORTS_PER_SOL;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let fee_payer_keypair = Keypair::new();
    let fee_payer_pubkey = Signer::pubkey(&fee_payer_keypair);

    let base_keypair = Keypair::new();
    let base_pubkey = Signer::pubkey(&base_keypair);

    let seed = ""robot001"";
    let program_id = solana_program::system_program::id();

    let derived_pubkey = Pubkey::create_with_seed(&base_pubkey, seed, &program_id).unwrap();

    match connection.request_airdrop(&fee_payer_pubkey, LAMPORTS_PER_SOL) {
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error requesting airdrop""),
    };

    let ix = system_instruction::create_account_with_seed(
        &fee_payer_pubkey,
        &derived_pubkey,
        &base_pubkey,
        seed,
        LAMPORTS_PER_SOL / 10,
        0,
        &program_id,
    );

    let (recent_blockhash, _) = connection.get_recent_blockhash().unwrap();

    let tx = solana_sdk::transaction::Transaction::new_signed_with_payer(
        &[ix],
        Some(&fee_payer_pubkey),
        &[&fee_payer_keypair, &base_keypair],
        recent_blockhash,
    );

    match connection.send_and_confirm_transaction(&tx) {
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
            ","[-3.25953923e-02  3.86008658e-02 -1.14588127e-01 -5.02582872e-03
 -9.61693078e-02 -2.10935846e-02  7.49838203e-02  7.38037899e-02
  6.34860396e-02  5.24757504e-02  6.88396692e-02 -8.33092332e-02
 -1.11375544e-02 -4.50344533e-02 -1.14304619e-02  2.07907110e-02
 -5.28546795e-02 -7.86997303e-02 -1.63328387e-02  5.71090030e-03
  4.41702940e-02 -4.39964235e-02  1.77997202e-02 -2.09615380e-02
  2.66864989e-02 -7.78826699e-02 -4.57273843e-03  1.85652468e-02
 -2.83805132e-02  5.53665729e-03  9.12200436e-02  4.73939702e-02
  6.93438994e-03 -1.62233133e-02 -2.16336804e-04  1.04027115e-01
  4.05741343e-03 -3.27725932e-02 -1.06202606e-02 -1.09004835e-03
 -1.83737893e-02  3.16791944e-02 -5.22809029e-02  5.29526807e-02
  8.36553052e-02 -1.09322868e-01 -3.77044976e-02  5.67897372e-02
  4.54332829e-02  5.69176860e-03 -3.98646407e-02  4.83480431e-02
 -1.79460011e-02  5.95847331e-02 -1.26957074e-02  6.09192774e-02
 -2.18598284e-02  2.54098997e-02  1.57419350e-02 -2.89595984e-02
  5.54950722e-02  9.90394037e-03  2.10650936e-02 -7.58432597e-02
 -6.58525750e-02  1.60802305e-02 -2.79565211e-02 -2.48797685e-02
 -2.29166076e-02 -4.17955220e-02  2.81897746e-02 -3.77505869e-02
 -1.21378101e-01 -6.66606845e-03 -8.60290527e-02 -3.59606221e-02
  3.32647525e-02  8.12992305e-02 -7.51288384e-02  2.24920874e-03
 -7.28597399e-03 -1.76654868e-02  4.38069217e-02  1.59683730e-02
 -1.23937032e-03  3.88086885e-02 -1.65336560e-02 -3.02046984e-02
  3.43730189e-02  1.46772014e-04  3.36997844e-02  6.36156574e-02
 -8.73644203e-02 -4.81991209e-02  6.39495775e-02  3.80870178e-02
 -4.10122126e-02 -9.57295066e-04 -1.16997764e-01  1.24476075e-01
  4.76496220e-02 -2.64042728e-02 -9.60104540e-02 -3.67131010e-02
  4.16206680e-02  1.59563124e-02  7.17434287e-02 -1.97256207e-02
 -4.79367971e-02 -1.13499863e-02  5.22672012e-03  6.85706213e-02
 -4.37084101e-02  6.08396642e-02 -2.85003446e-02  1.13807052e-01
 -5.49112260e-02  8.76446813e-02  5.44175506e-02 -4.77726292e-03
  5.70682772e-02  7.28521869e-02 -4.93507162e-02 -5.46976626e-02
 -5.29778898e-02 -6.16307929e-02  5.93636967e-02  7.76999194e-33
 -1.40395435e-02 -2.09324900e-02 -2.19102073e-02  6.71764510e-03
  3.48322429e-02  2.00156868e-02  7.54856914e-02  8.03571865e-02
 -1.17887110e-01 -6.79134578e-02 -6.52046651e-02 -9.01553705e-02
  1.59812886e-02 -9.90012214e-02 -5.76887503e-02 -4.37915996e-02
 -3.85087682e-03  3.26446183e-02  8.37431699e-02 -1.38646411e-02
 -1.65992472e-02  1.22184947e-03  4.89174575e-02 -4.58619744e-02
 -3.61638144e-03 -2.44388971e-02 -9.70459580e-02 -2.28904225e-02
 -8.84023774e-03  3.75432731e-03  3.81226204e-02  5.76132685e-02
 -2.00629085e-02  6.55797422e-02  3.86477821e-02  1.64611638e-02
 -1.83231272e-02 -5.58297858e-02 -8.44451934e-02 -5.95081225e-02
 -3.14964540e-02  1.12679210e-02 -2.76739560e-02  1.47307273e-02
 -9.63891670e-02 -3.01364362e-02 -1.30843958e-02  6.61210110e-03
  8.99246633e-02  5.85315116e-02 -8.04993063e-02  3.07173841e-02
  3.18177380e-02 -3.26884761e-02 -1.41886016e-02 -6.09749667e-02
 -2.15405356e-02  1.91972603e-03  2.43204832e-03 -1.71471164e-02
 -2.19747913e-03 -8.00518021e-02  3.33970715e-03 -3.97486836e-02
  3.74414138e-02  1.01701546e-04 -1.34266168e-01  1.74274971e-03
  5.45759052e-02  6.07217522e-03 -4.07892354e-02  3.12502123e-02
  1.30311782e-02  8.90608206e-02  4.97638155e-03 -2.65022758e-02
 -6.53846608e-03  1.26360077e-02 -9.28642750e-02 -3.92512716e-02
  3.91723961e-02 -1.61733329e-02 -3.20468284e-02  5.18865697e-02
  9.30116326e-03  1.35498732e-01  7.78691377e-03  1.40268058e-02
 -1.78696029e-02  3.22894542e-03  1.24406144e-02  1.66832358e-02
 -1.67391058e-02 -3.91361825e-02  6.26364276e-02 -8.78290955e-33
 -1.83441304e-03  1.66338636e-03 -1.17281258e-01 -4.03072312e-02
  5.87238558e-03 -1.09493313e-03  1.43164061e-02 -5.93427643e-02
 -8.58451203e-02  1.99039318e-02  1.02421138e-02  4.39628866e-03
  3.29592526e-02  2.06164867e-02  6.20124955e-03 -2.66006701e-02
  3.52333440e-03 -1.22228516e-02  1.64128467e-02 -6.31021187e-02
 -1.12015866e-02  9.64134634e-02 -3.01281977e-02  1.84119679e-02
 -3.27767879e-02 -3.65814380e-02 -3.56305428e-02  1.18342534e-01
 -7.87343532e-02 -3.94153111e-02  4.58997600e-02 -4.74591398e-05
 -9.63899419e-02  7.14806393e-02  3.78879556e-03 -8.58958811e-02
  3.74632403e-02  7.05092400e-02  1.53808203e-02  9.02307555e-02
  8.15038607e-02 -4.95888628e-02 -1.47933122e-02  1.89460162e-02
  3.43078375e-02 -5.58917969e-02  6.76970705e-02 -1.01109065e-01
  4.24087383e-02 -7.33428169e-03  4.57508303e-02 -3.03113721e-02
 -6.92567183e-03  2.04150639e-02  1.78519133e-02  6.91583604e-02
  1.22232296e-01 -3.98067646e-02  8.41034949e-02 -6.96700811e-02
 -2.78695188e-02  7.97212124e-04  7.64381513e-02  3.14943381e-02
  1.20033756e-01 -5.91770858e-02  9.58174467e-03  2.73841582e-02
  6.35081530e-02 -8.36181641e-03  6.88792672e-03  6.96502067e-03
 -1.45780966e-02  3.74893434e-02  3.21738422e-02  4.10343334e-02
  2.08036304e-02 -5.54483533e-02  6.73387898e-04  5.41234985e-02
  2.08412968e-02 -3.09976265e-02  6.80788085e-02  1.43246995e-02
 -4.45811972e-02 -7.68863037e-02  7.40280747e-02  5.39622828e-03
 -9.78714079e-02  2.10822821e-02 -2.31850129e-02  3.70500572e-02
 -4.95870598e-02 -2.56160703e-02 -1.05973622e-02 -5.63962068e-08
 -1.01314515e-01 -2.31734905e-02 -9.71744806e-02  5.99058494e-02
  1.05612777e-01  4.09823135e-02  2.57921759e-02 -5.87741584e-02
 -8.39179903e-02 -8.93482491e-02 -1.27471775e-01  2.69395560e-02
 -2.72645103e-03 -5.07650115e-02  2.19534934e-02 -5.51509000e-02
 -6.86335331e-03  5.97646274e-03 -2.98991725e-02 -2.51809377e-02
  3.93062904e-02 -3.77997309e-02 -2.05548927e-02 -2.48634182e-02
 -1.57237295e-02 -3.99820730e-02  9.98104885e-02  1.65203929e-01
  1.14817386e-02  7.98436720e-03  4.61002812e-03 -2.03630459e-02
  7.23829642e-02 -1.81478579e-02 -9.16887075e-02  3.35837267e-02
 -2.37253979e-02  1.28570916e-02  5.43313362e-02  2.08015032e-02
 -1.95611380e-02  6.01606034e-02 -2.95361094e-02  2.00943686e-02
 -2.76571922e-02  2.19435655e-02 -3.42637412e-02  2.31337696e-02
  4.44875136e-02 -9.62948985e-03  4.55219224e-02 -8.17702524e-03
  3.57940495e-02  5.40930182e-02 -9.32423770e-03 -1.30863525e-02
 -4.57235239e-03 -2.27469355e-02 -1.94920748e-02  4.14674841e-02
  1.74832661e-02  2.27393918e-02 -1.38114858e-02 -5.75595424e-02]"
"       println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error creating account with seed""),
    };
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465let derived_pubkey = Pubkey::create_with_seed(&base_pubkey, seed, &program_id).unwrap();

let ix = system_instruction::create_account_with_seed(
  &fee_payer_pubkey,
  &derived_pubkey,
  &base_pubkey,
  seed,
  LAMPORTS_PER_SOL / 10,
  0,
  &program_id,
);

let tx = solana_sdk::transaction::Transaction::new_signed_with_payer(
  &[ix],
  Some(&fee_payer_pubkey),
  &[&fee_payer_keypair, &base_keypair],
  recent_blockhash,
);
123456789101112131415161718# TransferTSPress </> button to view full sourceimport {
  PublicKey,
  SystemProgram,
  Connection,
  clusterApiUrl,
  Transaction,
  Keypair,
  sendAndConfirmTransaction,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const base = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  let basePubkey = base.publicKey;
  let seed = ""robot001"";
  let programId = SystemProgram.programId;

  let derived = await PublicKey.createWithSeed(basePubkey, seed, programId);

  const tx = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: derived,
      basePubkey: basePubkey,
      toPubkey: Keypair.generate().publicKey, // create a random receiver
      lamports: 0.01 * LAMPORTS_PER_SOL,
      seed: seed,
      programId: programId,
    })
  );

  console.log(
    `txhash: ${await sendAndConfirmTransaction(connection, tx, [
      feePayer,
      base,
    ])}`
  );
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const tx = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: derived,
    basePubkey: basePubkey,
    toPubkey: Keypair.generate().publicKey, // create a random receiver
    lamports: 0.01 * LAMPORTS_PER_SOL,
    seed: seed,
    programId: programId,
  })
);
console.log(
  `txhash: ${await sendAndConfirmTransaction(connection, tx, [feePayer, base])}`
);
12345678910111213TIPOnly an account owned by system program can transfer via system program.# How to create PDAsProgram derived address(PDA)open in new window is like a normal address with the following differences:Falling off ed25519 curveUsing program to sign instead of private keyNote: PDA accounts can only be created on the program. The address can be created client side.TIPAlthough PDA is derived by a program id, it doesn't means the PDA is owned by the same program. (Take an example, you can initialize your PDA as a token account which is an account owned by token program)# Generate a PDAfindProgramAddress will add a extra byte at the end of your seed. It starts from 255 to 0 and returns the first off-curve public key. You will always get the same result if you","[-7.22031519e-02  7.32001066e-02 -1.38831094e-01  1.98122412e-02
 -1.01390099e-02 -4.46547829e-02  6.11326955e-02  3.98179442e-02
 -9.39954165e-03  3.94168347e-02  9.49469507e-02 -8.11002776e-02
 -3.23887356e-03 -7.58033097e-02  5.24563110e-03  1.74301229e-02
 -1.36177242e-01 -2.40467004e-02 -5.50505798e-03 -2.23412327e-02
  1.91240460e-02 -3.30226198e-02  2.11095512e-02 -1.31989121e-02
  6.47210628e-02 -5.61517924e-02  1.89193841e-02  4.48349677e-02
 -7.81664043e-04 -2.20264979e-02  1.05573162e-01  6.61022812e-02
 -3.04317870e-03  3.49634178e-02  3.65534462e-02  1.02570139e-01
  1.08902380e-02 -3.99544649e-02  2.97327787e-02 -5.55364713e-02
  3.03843208e-02  1.84378419e-02 -7.32575804e-02  2.49042399e-02
  2.72277072e-02 -6.10691272e-02 -6.07489273e-02  4.74208035e-02
  1.06191915e-02 -1.87213235e-02 -7.95366392e-02 -1.04072951e-02
 -9.85606294e-03  3.54465246e-02  4.15184312e-02  5.07956222e-02
  2.25705281e-03 -2.40518674e-02 -6.80984790e-03 -4.04916294e-02
  3.62887233e-02  3.43077034e-02 -1.90534666e-02 -7.62625560e-02
 -6.24356493e-02  1.66882798e-02  3.35694067e-02  1.66901527e-03
  3.28543782e-02 -1.48659479e-02  3.33313942e-02 -4.12891284e-02
 -7.07996339e-02  2.96342140e-03 -6.59531280e-02 -1.98554918e-02
  3.26349624e-02  8.41462091e-02 -6.24448024e-02 -1.04166185e-02
 -7.58890808e-02 -5.98067641e-02  4.86214384e-02  3.60623337e-02
 -3.59167121e-02  3.43644023e-02 -3.54634114e-02 -6.84665442e-02
  8.09290856e-02  2.84941997e-02  4.85653570e-03  6.40263665e-04
 -2.93158349e-02 -5.35009354e-02  1.16238266e-01  7.89425522e-02
  2.75614616e-02 -7.44811632e-03 -3.40493210e-02  8.39810669e-02
  1.55589562e-02  4.61176410e-03 -3.15494351e-02 -6.36548782e-03
  5.76455854e-02  1.35515993e-02  7.86054879e-02 -3.50927636e-02
 -9.49238613e-02  6.54550560e-04  4.30138521e-02  8.30388665e-02
  1.06684128e-02  5.22529855e-02 -9.14513366e-04  9.60473418e-02
 -2.82669291e-02  5.27726747e-02  2.70348247e-02  2.71152351e-02
  9.92087722e-02  6.84130043e-02 -8.95926282e-02 -3.67910638e-02
 -1.09445654e-01 -4.71734963e-02  1.34899803e-02 -1.06593809e-33
  1.50717217e-02 -2.25645695e-02 -1.95895564e-02 -8.89803004e-03
  1.96207478e-03  3.47457714e-02  2.76257321e-02  5.58759132e-03
 -6.50179610e-02 -2.60176826e-02 -8.36930349e-02 -9.50630307e-02
 -3.25759500e-02 -6.80911317e-02 -6.64679185e-02 -2.95803733e-02
 -2.70111728e-02  5.11001274e-02  3.66801657e-02  7.02623278e-02
  2.28369217e-02 -2.11032964e-02 -2.53197271e-02 -7.78106153e-02
 -5.20681217e-02  6.26620427e-02 -3.53635438e-02 -4.52341288e-02
 -1.33258672e-02  2.67253723e-04 -3.36286612e-02  3.73610441e-04
  6.11492954e-02  4.47946191e-02  6.39676750e-02  1.57710761e-02
  2.28569785e-04 -8.83213244e-03 -1.05449796e-01 -3.99874412e-02
  4.06201370e-02  3.38062458e-03 -5.25973067e-02  4.50432003e-02
 -3.11038326e-02  4.01758477e-02 -3.00746672e-02  4.38693017e-02
  8.53086114e-02  1.70995928e-02 -1.13309391e-01  2.53852587e-02
  2.65672687e-03 -5.95440902e-02  2.77764797e-02 -4.08378206e-02
  2.06493642e-02  7.81003805e-03 -3.90075296e-02 -4.35069241e-02
 -4.65343297e-02 -3.13003547e-03 -2.46673003e-02  2.50032060e-02
 -2.04667188e-02  8.02835170e-03 -8.17547515e-02 -7.28195766e-03
  7.61906477e-03  1.00956915e-03 -5.72858639e-02  6.90062195e-02
 -6.58851340e-02  7.90799856e-02 -1.77102908e-02 -8.97635520e-02
  3.82242613e-02  4.40748148e-02 -8.03288221e-02 -3.08127869e-02
  3.59651856e-02 -2.65315380e-02 -1.14879556e-01  6.57005832e-02
  1.09901407e-03  9.00595263e-02 -3.64663801e-03  1.52751021e-02
 -4.83282320e-02 -5.19482754e-02  9.13699716e-03  1.91774853e-02
  3.20170000e-02 -1.28727645e-01  8.89629032e-03 -2.60868774e-33
  1.12872208e-02 -4.23950031e-02 -8.84078965e-02 -1.94994956e-02
 -1.73635576e-02 -3.86234932e-03  5.88960052e-02 -3.73299350e-03
 -6.21574447e-02 -1.88205403e-03 -2.87505183e-02  5.64432563e-03
  4.39326093e-02 -3.29929926e-02  4.40347055e-03 -2.50883307e-02
 -3.80640514e-02 -1.22935055e-02 -1.80066610e-03 -8.04870288e-05
 -6.24317396e-03  1.23836644e-01 -6.89250370e-03  7.47267157e-02
 -1.32151293e-02 -3.78961787e-02  4.92849213e-04  1.43303245e-01
 -1.12866178e-01 -8.44471529e-03  1.29598081e-01 -3.37298401e-02
 -6.07350469e-02  7.82372281e-02 -1.54749840e-03 -8.18404481e-02
  3.20854485e-02  3.69802602e-02  1.36094224e-02  7.05628619e-02
  4.31423523e-02 -3.77242193e-02 -4.65924107e-02  5.92698343e-02
  6.28530513e-03 -3.14036710e-03  8.13950673e-02 -2.03874558e-02
  1.05392234e-02 -3.55224051e-02  4.60473746e-02 -6.67824671e-02
 -2.35219952e-02 -3.70159432e-05 -1.10892076e-02  2.80611143e-02
  9.15403143e-02 -8.20130482e-03  3.27129997e-02 -2.99653802e-02
 -3.02282851e-02 -3.65256630e-02  5.15712127e-02  3.74792032e-02
  8.12057853e-02 -1.06295899e-01  8.51075817e-03  2.83189099e-02
  2.88071651e-02  8.30435008e-03  1.94796156e-02  3.01930844e-03
  5.42952167e-03  5.96210361e-02  5.30029349e-02  4.76938896e-02
 -4.45322841e-02 -2.28789616e-02  2.94233691e-02  2.08398309e-02
 -1.70682967e-02  2.14125570e-02  4.33183201e-02  3.14016417e-02
  1.39075518e-02 -9.02467594e-02  2.91136820e-02  2.37661563e-02
 -5.56042902e-02  4.86984238e-04 -3.10214255e-02 -1.89555231e-02
 -8.15335587e-02  2.70644017e-02  5.18078683e-04 -5.96169301e-08
 -4.35750410e-02 -2.34390292e-02 -8.41525793e-02  4.85583432e-02
  7.21258596e-02 -1.07200155e-02  1.35407550e-02 -4.18666340e-02
 -6.47768304e-02 -9.53047499e-02 -1.06949657e-01  5.76097146e-02
 -7.58281648e-02 -9.51237231e-03  4.22430746e-02 -6.72353730e-02
  1.85484383e-02  6.06102869e-02 -5.40623553e-02 -9.74547938e-02
  1.21661350e-02 -4.65614796e-02 -1.34883709e-02 -3.60843986e-02
 -1.04706828e-02 -5.44857886e-03  1.01311184e-01  1.15838908e-01
  9.21393633e-02 -5.80881871e-02  2.24097483e-02 -2.30178982e-02
  6.15335777e-02 -4.78817103e-03 -6.43995702e-02  5.93220592e-02
  1.36592193e-02  2.95396857e-02  8.44932422e-02  8.30182806e-02
 -3.20062116e-02  7.32664093e-02 -5.83019741e-02  1.21316677e-02
 -1.12011798e-01  8.86991806e-03 -6.64063618e-02  3.49352248e-02
  5.56449890e-02  3.03064734e-02  3.05972695e-02 -7.70437643e-02
  7.04332516e-02  5.07962033e-02 -5.70662469e-02 -2.50702854e-02
 -1.45283528e-02  3.49563733e-02  1.86539125e-02  9.02049802e-03
  8.41758251e-02  6.32012170e-03  2.05186801e-03  2.48306133e-02]"
"pass the same program id and seed.TSRustimport { PublicKey } from ""@solana/web3.js"";

(async () => {
  const programId = new PublicKey(
    ""G1DCNUQTSGHehwdLCAmRyAG8hf51eCHrLNUqkgGKYASj""
  );

  let [pda, bump] = await PublicKey.findProgramAddress(
    [Buffer.from(""test"")],
    programId
  );
  console.log(`bump: ${bump}, pubkey: ${pda.toBase58()}`);
  // you will find the result is different from `createProgramAddress`.
  // It is expected because the real seed we used to calculate is [""test"" + bump]
})();
123456789101112131415use solana_program::pubkey::Pubkey;
use std::str::FromStr;

fn main() {
    let program_id = Pubkey::from_str(""G1DCNUQTSGHehwdLCAmRyAG8hf51eCHrLNUqkgGKYASj"").unwrap();

    let (pda, bump_seed) = Pubkey::find_program_address(&[b""test""], &program_id);
    println!(""pda: {}, bump: {}"", pda, bump_seed);
}
123456789# Create a PDABelow is an example program for creating a PDA account owned by the program and an example for calling the program with the client.# ProgramThe below shows a single instruction system_instruction::create_account that creates an account with allocated data size of space, rent_lamports amount of lamports for the derived PDA. This is signed with the PDA using invoke_signed similar to as discussed above.rustPress </> button to view full sourceuse solana_program::{
    account_info::next_account_info, account_info::AccountInfo, entrypoint,
    entrypoint::ProgramResult, program::invoke_signed, pubkey::Pubkey, system_instruction, sysvar::{rent::Rent, Sysvar}
};

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo], 
    instruction_data: &[u8],
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();

    let payer_account_info = next_account_info(account_info_iter)?;
    let pda_account_info = next_account_info(account_info_iter)?;
    let rent_sysvar_account_info = &Rent::from_account_info(next_account_info(account_info_iter)?)?;

    // find space and minimum rent required for account
    let space = instruction_data[0];
    let bump = instruction_data[1];
    let rent_lamports = rent_sysvar_account_info.minimum_balance(space.into());

    invoke_signed(
        &system_instruction::create_account(
            &payer_account_info.key,
            &pda_account_info.key,
            rent_lamports,
            space.into(),
            program_id
        ),
        &[
            payer_account_info.clone(),
            pda_account_info.clone()
        ],
        &[&[&payer_account_info.key.as_ref(), &[bump]]]
    )?;

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637383940invoke_signed(
    &system_instruction::create_account(
        &payer_account_info.key,
        &pda_account_info.key,
        rent_lamports,
        space.into(),
        program_id
    ),
    &[
        payer_account_info.clone(),
        pda_account_info.clone()
    ],
    &[&[&payer_account_info.key.as_ref(), &[bump]]]
)?;
1234567891011121314# ClientTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
  PublicKey,
  TransactionInstruction,
  LAMPORTS_PER_SOL,
","[-9.36387032e-02 -1.86679140e-02 -7.71647319e-02 -2.50426400e-02
 -2.52915118e-02 -2.21964065e-03 -1.14271007e-02  4.47266176e-02
  6.72852322e-02  6.19550375e-03  9.72739607e-03 -1.01293102e-02
 -3.85758989e-02 -7.19414577e-02  5.27579784e-02  2.59302128e-02
 -1.17654391e-01 -6.36576414e-02 -4.12220694e-02 -7.27734491e-02
  1.21876402e-02 -4.22482751e-03  1.16705131e-02 -2.57267170e-02
 -2.07942352e-03 -3.87309231e-02  2.98369378e-02 -2.29513589e-02
  2.72863861e-02 -8.38243961e-03  1.10277817e-01  3.20505276e-02
 -4.83604558e-02  8.30898341e-03  1.73107199e-02  1.29481211e-01
 -5.91222662e-03 -2.83189714e-02  3.31058726e-02  5.54491356e-02
  5.39495721e-02  8.32808912e-02 -1.83741953e-02  5.15910890e-03
  8.76814649e-02 -7.51555935e-02 -8.82335752e-02  7.83186257e-02
  5.49659086e-03 -2.65343226e-02 -3.20127569e-02 -2.88169249e-03
 -5.95895797e-02  4.01002020e-02 -4.93566990e-02  3.58136594e-02
  2.22385246e-02  4.79591973e-02  3.98616083e-02  3.59940156e-02
 -1.16367368e-02 -4.36999686e-02  6.79013208e-02 -1.18568689e-01
  7.67896846e-02 -5.98527119e-02  1.59058310e-02 -5.51508293e-02
  3.19174603e-02 -1.74454916e-02 -5.44540677e-03  2.77739316e-02
  2.06952393e-02  2.06788797e-02 -7.12863132e-02 -2.00983342e-02
 -4.15047118e-03  9.66399834e-02 -2.04342101e-02 -5.04301675e-02
  7.32054294e-04 -6.53335154e-02  6.94358442e-03  3.01072598e-02
  3.46401595e-02  1.20136686e-01 -5.13344780e-02 -7.69398883e-02
  6.02159090e-02  5.44547513e-02 -8.76290537e-03 -5.17785773e-02
 -1.23068869e-01  6.29321113e-02  1.07584067e-01  8.32153335e-02
  7.58409426e-02 -4.06465344e-02 -3.62034664e-02  1.11419700e-01
 -6.35142699e-02  1.80131756e-02 -3.61771993e-02 -4.03836602e-03
  4.28929105e-02  5.15807271e-02 -1.35898469e-02 -8.83873850e-02
 -9.55750346e-02  2.53091455e-02 -3.42712328e-02  4.41099852e-02
  6.26555905e-02  5.49681485e-02 -7.76815861e-02  3.95297557e-02
 -2.62359995e-03  1.06388750e-02  3.64082791e-02 -1.46499937e-02
  7.62845278e-02  5.21433651e-02  3.69567685e-02  3.31823640e-02
 -7.13847578e-02  2.74822041e-02  2.59681046e-02  7.99653248e-33
  6.73398525e-02 -9.91523731e-03 -2.31955312e-02  2.32283641e-02
 -1.14601487e-02 -9.73935332e-03  6.70982748e-02  7.81043395e-02
 -7.82494321e-02 -2.17510834e-02 -9.58055854e-02 -4.25458066e-02
 -3.98560800e-02 -1.07995011e-01 -2.57251151e-02  6.06619101e-03
  2.62995698e-02  5.19763865e-02 -6.38162568e-02 -1.29607711e-02
 -7.71413790e-03  3.87796201e-02 -2.37377379e-02 -7.86444843e-02
  6.00743294e-02 -6.60944823e-03 -3.21772806e-02  5.91690578e-02
 -2.34827008e-02 -9.12563782e-03  5.22728078e-03  5.92120253e-02
 -8.31518322e-02  2.64201239e-02  7.98732266e-02 -6.50802255e-03
  7.18889583e-04 -4.07607444e-02 -1.37504473e-01 -1.72066744e-02
  3.57378982e-02  4.17640209e-02  4.82717017e-03 -3.37615423e-02
 -6.02349043e-02 -3.86777408e-02 -4.34306562e-02 -3.96010093e-02
  8.13612267e-02  3.25647444e-02 -5.88581972e-02  6.65633753e-02
 -1.81551324e-03 -1.51052726e-02  2.27139855e-04 -8.42892230e-02
  4.58844900e-02 -1.85638461e-02  8.09579268e-02  3.92225049e-02
 -3.45753506e-02  2.14026663e-02  1.52965439e-02  4.58307192e-02
 -1.44405030e-02 -4.48496491e-02 -6.75549731e-02  5.84419779e-02
  1.21288322e-01  2.10385285e-02  5.89819252e-02  2.68969964e-02
 -5.18771224e-02  8.21228847e-02  5.18093221e-02 -5.39316945e-02
 -3.30154933e-02  4.26596627e-02 -5.63510172e-02 -1.19428478e-01
  1.07934967e-01  1.22250719e-02 -4.37432900e-02  4.25684340e-02
 -2.45286226e-02  8.62636939e-02 -5.81983849e-02 -3.15297768e-03
 -3.17422263e-02 -1.01873409e-02  8.63696914e-03  1.73938815e-02
  5.95113728e-03 -1.97622012e-02 -7.69462436e-03 -8.39995480e-33
 -2.95398757e-02 -3.92391533e-03 -8.25511068e-02 -6.05526287e-03
 -3.33144628e-02 -3.86666805e-02  1.08832531e-02 -7.42869005e-02
 -9.58785340e-02  5.54683246e-02  9.54730494e-04  2.11052410e-02
  2.04150360e-02  3.42376605e-02  5.43050840e-02  4.29705009e-02
  3.48605104e-02 -4.12191562e-02 -3.79734254e-03 -2.86550354e-02
  2.21482813e-02  3.66033465e-02 -8.05562362e-02  1.12035638e-02
 -2.22844761e-02 -3.00296042e-02  3.63203511e-02  1.08157396e-01
 -7.43451118e-02 -5.07076606e-02  5.82779534e-02  1.53859099e-02
 -1.70163020e-01  5.34968674e-02 -5.21838479e-02 -8.83831009e-02
  4.22781594e-02  1.13407755e-02 -6.65071327e-03  3.39298062e-02
  7.64192268e-02 -3.08817737e-02 -4.83453162e-02  5.58120571e-02
 -5.35127195e-03  5.63939400e-02  7.19131604e-02  1.14484096e-03
  2.31423173e-02  8.93804338e-03  7.70444125e-02 -1.27459187e-02
 -7.77121400e-03 -3.11215390e-02  3.83048914e-02  2.13356726e-02
  2.97001749e-02 -1.79533996e-02 -8.67263135e-03  5.66478819e-02
  9.36274678e-02 -4.22830246e-02  1.29280044e-02 -5.26829483e-03
  1.00249304e-02 -8.34855437e-02 -4.64588404e-02  5.41997608e-03
  2.74455156e-02  1.03433467e-02  3.08099622e-03  7.14360783e-03
  3.70830819e-02  2.24320050e-02 -4.67720702e-02 -1.40324375e-02
  4.57015187e-02 -1.53805851e-03  7.27503449e-02  2.02801339e-02
 -4.71983813e-02 -1.37124630e-02  3.81353796e-02  9.74296499e-03
 -3.59610319e-02  4.24451195e-02  9.25732777e-02  9.34670307e-03
 -1.03386819e-01  1.32780429e-02  6.23972621e-03  2.41432972e-02
 -1.05286598e-01  9.12354048e-03  3.27223316e-02 -5.89080642e-08
 -2.23554932e-02 -2.42917929e-02 -1.35696962e-01  3.96672226e-02
 -2.05051880e-02 -4.42655236e-02 -7.15174824e-02 -2.14726627e-02
 -4.55826987e-03 -1.28094584e-01 -8.95564109e-02  4.47627306e-02
  1.02996733e-02  8.21845978e-03  2.45441627e-02 -6.88237324e-02
 -3.67775112e-02  2.06840597e-02 -2.87374258e-02 -2.41684597e-02
  4.68551032e-02  3.50067914e-02  2.96118874e-02 -3.78332436e-02
  2.01303847e-02 -4.09747325e-02  7.30142742e-02  1.02877200e-01
  4.97373976e-02 -1.99500825e-02 -1.59125717e-04 -2.35480536e-03
  3.04601081e-02 -8.62812158e-03 -5.64557835e-02  1.62045434e-02
  2.07181014e-02 -9.60392784e-03  8.47931802e-02  1.54957967e-02
  5.01390286e-02  7.70162279e-03 -1.98110733e-02  2.98479083e-03
 -1.11925021e-01  1.06376931e-02  1.72066800e-02 -1.76409055e-02
  1.18627846e-02 -1.90289263e-02 -1.55187324e-02 -3.79636362e-02
  3.32388952e-02  3.48256975e-02  5.52631766e-02 -3.66995973e-03
 -7.27995187e-02 -5.89445047e-02 -2.68183295e-02  1.58527810e-02
 -2.90293247e-02 -8.20654035e-02 -1.77952107e-02  5.42078540e-02]"
" SYSVAR_RENT_PUBKEY,
} from ""@solana/web3.js"";

(async () => {
  // program id
  const programId = new PublicKey(
    ""7ZP42kRwUQ2zgbqXoaXzAFaiQnDyp6swNktTSv8mNQGN""
  );

  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // setup fee payer
  const feePayer = Keypair.generate();
  const feePayerAirdropSignature = await connection.requestAirdrop(
    feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(feePayerAirdropSignature);

  // setup pda
  let [pda, bump] = await PublicKey.findProgramAddress(
    [feePayer.publicKey.toBuffer()],
    programId
  );
  console.log(`bump: ${bump}, pubkey: ${pda.toBase58()}`);

  const data_size = 0;

  let tx = new Transaction().add(
    new TransactionInstruction({
      keys: [
        {
          pubkey: feePayer.publicKey,
          isSigner: true,
          isWritable: true,
        },
        {
          pubkey: pda,
          isSigner: false,
          isWritable: true,
        },
        {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false,
        },
        {
          pubkey: SystemProgram.programId,
          isSigner: false,
          isWritable: false,
        },
      ],
      data: Buffer.from(new Uint8Array([data_size, bump])),
      programId: programId,
    })
  );

  console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869let tx = new Transaction().add(
  new TransactionInstruction({
    keys: [
      {
        pubkey: feePayer.publicKey,
        isSigner: true,
        isWritable: true,
      },
      {
        pubkey: pda,
        isSigner: false,
        isWritable: true,
      },
      {
        pubkey: SYSVAR_RENT_PUBKEY,
        isSigner: false,
        isWritable: false,
      },
      {
        pubkey: SystemProgram.programId,
        isSigner: false,
        isWritable: false,
      },
    ],
","[-7.52942041e-02 -5.26400916e-02 -1.01334460e-01  4.95834567e-04
 -1.61179304e-02 -3.80483083e-02  5.55915609e-02 -5.93569712e-04
  7.21229911e-02  5.26558682e-02  6.34262860e-02 -6.27809316e-02
 -4.53763939e-02 -4.07005809e-02  5.03538251e-02  5.51207662e-02
 -7.48240948e-02 -1.26501039e-01 -9.66893602e-03  2.06759386e-02
 -1.67907355e-03 -8.67949203e-02  1.98510960e-02 -4.16216142e-02
  6.07094541e-02 -6.29288256e-02  6.46124184e-02  1.79976672e-02
 -1.05421897e-02 -1.06474962e-02  8.22730809e-02  4.00815383e-02
 -3.08998190e-02 -2.94483379e-02  5.23225889e-02  1.14363208e-01
  2.74664797e-02 -4.02501263e-02 -3.34452465e-02  3.75710241e-02
  2.54963581e-02  4.92333695e-02 -7.65461996e-02  4.87659033e-03
  2.40155384e-02 -4.85945158e-02 -5.80465421e-02  1.21205464e-01
 -3.80306714e-03  8.83454550e-03 -7.02997856e-03  2.93441024e-02
 -6.91103116e-02  6.48419484e-02 -7.48442337e-02  2.57384405e-02
  9.33950860e-03  7.71733895e-02  6.38444200e-02 -6.34983182e-02
  6.71505928e-02  5.94801130e-03  2.53817886e-02 -5.90038002e-02
 -1.88175719e-02 -1.43444818e-02 -9.20758396e-03 -6.56106919e-02
 -2.14614030e-02 -7.42851719e-02  8.34491383e-03 -2.28593517e-02
 -1.40565457e-02  1.08426958e-02 -4.49343733e-02 -3.05636507e-02
  5.51731810e-02  6.67310134e-02 -1.02284355e-02  2.72603910e-02
  4.62708762e-03 -8.88602436e-03 -6.68352284e-03  8.10127854e-02
  2.38271939e-04  7.75004104e-02 -6.68130443e-02 -6.45109341e-02
  9.82268900e-03 -6.23007640e-02 -1.45844240e-02  1.14406962e-02
 -1.13630913e-01  2.32780799e-02  3.05981208e-02  7.92020708e-02
  3.64188030e-02 -4.03332114e-02 -1.97581556e-02  1.21863365e-01
  6.48274049e-02 -4.84610461e-02 -9.73868072e-02 -3.03408448e-02
 -1.35944197e-02 -6.72592316e-03  5.56221083e-02 -3.09460256e-02
 -1.24827307e-02  7.58467019e-02 -5.36783114e-02  5.21704480e-02
  2.48776749e-02  2.01522373e-02 -9.30782706e-02  8.99712294e-02
 -2.94952597e-02  1.02263074e-02  6.45431951e-02  2.37055332e-03
  2.47587264e-02  4.74637598e-02 -4.76705059e-02 -6.12242110e-02
 -1.37913059e-02 -2.54957713e-02 -2.96525657e-03  8.97351963e-33
  1.94057003e-02 -4.29216288e-02  9.36286338e-03  2.65007815e-03
  6.08896697e-03  5.91513002e-04  7.69573450e-02  5.33741750e-02
 -8.06139857e-02 -1.03340410e-02 -9.87281799e-02 -7.67471567e-02
  2.62436084e-02 -1.11678362e-01 -5.36598563e-02 -5.38115948e-03
  3.23513933e-02  3.52849774e-02  4.26467694e-02  1.28999744e-02
 -1.93475522e-02 -2.46065781e-02  5.36394753e-02 -1.50477728e-02
  5.60497418e-02  5.00865048e-03 -1.93275437e-02  5.14173806e-02
  7.21544847e-02  6.28283340e-03  1.39047764e-02  4.56857495e-02
 -5.35719655e-02  2.62302160e-02  1.15811648e-02 -4.51554486e-04
  4.34678281e-03 -5.32252714e-02 -1.60253063e-01  3.64560430e-04
  3.96278463e-02  4.57928888e-03 -6.28514215e-02 -1.76467262e-02
 -6.76224530e-02 -4.76731826e-03  9.60365031e-03 -2.99883392e-02
  5.52611127e-02  1.08578848e-03 -1.47674620e-01  1.84325199e-03
 -3.30318287e-02 -5.53738279e-03  1.91582143e-02  3.00357980e-03
  1.53933270e-02  3.92171275e-03  1.67763084e-02 -6.23902492e-02
 -1.97779778e-02 -6.01309799e-02  4.18269895e-02 -7.16703087e-02
 -1.65100638e-02 -6.10582419e-02 -8.12070891e-02  9.23445001e-02
  6.07522093e-02 -5.34660257e-02 -1.10571031e-02  3.51721048e-02
  2.72513106e-02  7.86142275e-02  7.45404838e-03 -3.29109952e-02
 -6.04467355e-02  2.86647957e-02 -3.37569490e-02 -5.13533428e-02
  3.83028015e-02 -2.81083921e-04  2.24091834e-03  8.72988850e-02
  1.16766859e-02  8.38758647e-02  5.08748405e-02 -1.00847818e-02
 -3.72660160e-02  2.70917024e-02 -1.89515837e-02  1.42168412e-02
 -3.58586386e-02 -1.16612025e-01 -1.15846144e-03 -1.01193386e-32
 -6.41768873e-02 -7.02334568e-02 -1.48772344e-01 -2.76160669e-02
  5.54811433e-02 -1.25740003e-03 -2.73253508e-02 -1.88730247e-02
 -1.55739887e-02  3.80577296e-02 -1.38692884e-02  1.50549840e-02
  1.85927954e-02 -3.36250886e-02  2.46060900e-02  5.09024411e-02
 -6.92527136e-03 -5.76523058e-02  6.54774979e-02 -1.66686568e-02
 -1.30859856e-02  2.04359889e-02 -1.51742510e-02  2.43699923e-02
 -1.06438853e-01 -3.98501828e-02 -7.18285982e-03  1.02370426e-01
 -8.08705166e-02  8.89042486e-03  4.03507762e-02  2.23181862e-02
 -1.65657014e-01  1.16067715e-01 -8.84683151e-03 -8.01736265e-02
  4.53632101e-02  3.84536795e-02 -3.41635458e-02  2.52401847e-02
  6.39811531e-02 -6.54636025e-02 -1.41860172e-02  2.87869144e-02
  3.33503783e-02 -5.03630042e-02  5.59925959e-02 -6.31117374e-02
  2.23660897e-02  6.75362796e-02  6.39888868e-02 -3.48288976e-02
 -1.43363802e-02  4.01116982e-02 -9.68144555e-03  6.40905499e-02
  1.02484174e-01  1.02577275e-02  5.10323122e-02  5.97882085e-02
  3.42715867e-02 -5.96076436e-02  2.45472249e-02  4.54528257e-02
  7.98540860e-02 -6.56392351e-02  1.34154940e-02  5.50974347e-03
  1.17889918e-01  1.44512616e-02 -6.97039813e-02  8.71562306e-03
  1.75739382e-03  2.09876560e-02  6.40580654e-02 -1.11407507e-02
  5.18032117e-03 -1.69002265e-02  8.03313255e-02 -6.72881026e-03
  1.39284937e-03 -3.30400355e-02  3.55021022e-02 -7.52025191e-03
  4.18691374e-02 -3.96082029e-02  6.31201491e-02  1.40121458e-02
 -1.12425156e-01  2.00849269e-02 -3.63505520e-02 -3.07847429e-02
 -4.09273915e-02  4.47694166e-03 -1.23974169e-02 -6.47929781e-08
 -2.45723240e-02  5.60350567e-02 -9.20092091e-02  7.93857872e-03
  2.66590230e-02 -2.53022686e-02  1.80725418e-02  2.51448397e-02
 -2.74653211e-02 -1.11683376e-01 -1.78229045e-02  1.42864445e-02
  4.05030288e-02  4.88411747e-02  1.39576653e-02 -5.02524562e-02
  2.15030834e-02  1.02236429e-02 -4.79800589e-02 -5.40601574e-02
  4.52838689e-02 -9.72030032e-03 -4.58394103e-02 -2.75768433e-02
  9.09715891e-02 -4.06299904e-02  3.88669707e-02  1.37357384e-01
 -1.85297504e-02 -3.27813141e-02 -1.13245361e-01  1.50788845e-02
  2.70829722e-02 -7.22114220e-02 -4.43983637e-02  4.16318104e-02
  1.09016299e-02 -8.81492533e-03  7.48704895e-02  4.76628207e-02
  7.21780062e-02  3.94920185e-02 -7.23285601e-02 -2.20513977e-02
 -2.23415904e-02  6.83149099e-02  1.59248058e-02  4.79568616e-02
  5.25484085e-02  2.07428131e-02 -5.18810935e-02 -5.64371683e-02
  3.65792923e-02  3.08847390e-02  1.80482659e-02 -4.31713685e-02
 -5.35264164e-02  1.13727273e-02  1.59740131e-02  1.29865473e-02
  8.06987472e-03 -7.15766242e-03 -4.70852405e-02 -5.51370271e-02]"
"   data: Buffer.from(new Uint8Array([data_size, bump])),
    programId: programId,
  })
);

console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
123456789101112131415161718192021222324252627282930# How to sign with a PDAPDAs can only be signed for within the program. Below is a program example of signing with a PDA and calling the program with the client.# ProgramThe below shows a single instruction that transfers SOL from a PDA that was derived by the seed escrow to an account passed. invoke_signed is used to sign with the PDA.RustPress </> button to view full sourceuse solana_program::{
    account_info::next_account_info, account_info::AccountInfo, entrypoint,
    entrypoint::ProgramResult, program::invoke_signed, pubkey::Pubkey, system_instruction,
};

entrypoint!(process_instruction);

fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();

    let pda_account_info = next_account_info(account_info_iter)?;
    let to_account_info = next_account_info(account_info_iter)?;
    let system_program_account_info = next_account_info(account_info_iter)?;

    // pass bump seed for saving compute budget
    let bump_seed = instruction_data[0];

    invoke_signed(
        &system_instruction::transfer(
            &pda_account_info.key,
            &to_account_info.key,
            100_000_000, // 0.1 SOL
        ),
        &[
            pda_account_info.clone(),
            to_account_info.clone(),
            system_program_account_info.clone(),
        ],
        &[&[b""escrow"", &[bump_seed]]],
    )?;

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637invoke_signed(
    &system_instruction::transfer(
        &pda_account_info.key,
        &to_account_info.key,
        100_000_000, // 0.1 SOL
    ),
    &[
        pda_account_info.clone(),
        to_account_info.clone(),
        system_program_account_info.clone(),
    ],
    &[&[b""escrow"", &[bump_seed]]],
)?;
12345678910111213# ClientTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
  PublicKey,
  TransactionInstruction,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  // program id
  const programId = new PublicKey(
    ""4wQC2yuVt4rbcPeYLK8WngqbYLg7UAahVjRFrK3NBjP6""
  );

  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // setup fee payer
  const feePayer = Keypair.generate();
  const feePayerAirdropSignature = await connection.requestAirdrop(
    feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(feePayerAirdropSignature);

  // setup pda
  let [pda, bump] = await PublicKey.findProgramAddress(
    [Buffer.from(""escrow"")],
    programId
  );
  console.log(`bump: ${bump}, pubkey: ${pda.toBase58()}`);

  // require 1 SOL for the transfering in the program
  const pdaAirdropSignature = await connection.requestAirdrop(
    pda,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(pdaAirdropSignature);

  //","[-6.49304911e-02  3.79859693e-02 -1.07108824e-01 -5.51990382e-02
 -3.63503173e-02 -8.59762281e-02  2.70440504e-02  9.76304635e-02
  1.31503260e-02 -3.03585790e-02 -1.40889110e-02 -6.72629699e-02
  2.34688027e-03 -2.64478028e-02  9.79125500e-02  3.09483856e-02
 -7.01204687e-02  6.02496904e-04  4.43602242e-02 -5.47466613e-03
 -3.34901288e-02 -4.84021101e-03 -2.09664553e-02  1.13420933e-02
 -3.71173248e-02 -4.83819172e-02  8.74950886e-02 -3.51358950e-02
  9.45772883e-03  5.44599593e-02  2.45040189e-02  5.76864928e-02
 -2.46313773e-02  1.95597168e-02  3.28434259e-02  1.14965826e-01
  5.99680394e-02  9.40772053e-03 -3.79390195e-02 -4.14945371e-02
  1.73411407e-02  3.15542184e-02 -7.08835423e-02  3.64888050e-02
  8.19529500e-03 -6.71091750e-02  1.27356900e-02  7.46995509e-02
  8.66011996e-03  1.77209526e-02  3.69844809e-02 -6.01277221e-03
 -6.93246573e-02  6.40792772e-02 -4.10478562e-02 -8.72507039e-03
  1.84592344e-02 -9.78927966e-03 -5.16793458e-03  3.45011875e-02
  1.87249519e-02  5.05204573e-02  3.62559484e-04 -8.88232365e-02
  8.07675067e-03  5.63363694e-02  4.88600768e-02 -3.67159285e-02
 -1.34764630e-02 -2.20691487e-02  1.46692153e-02 -5.93517385e-02
 -5.27293608e-02 -4.89097536e-02 -5.60497772e-03 -5.76113053e-02
  4.98743728e-03  6.45126961e-03  2.12520044e-02 -7.83690810e-02
 -3.84858623e-02  1.01435250e-02 -7.75404554e-03 -2.35940702e-02
 -1.13962181e-02  8.52494612e-02 -7.20837116e-02 -3.45856920e-02
  8.46794620e-02  6.71255291e-02  4.32705991e-02 -2.31366791e-02
 -1.08147390e-01 -6.07293732e-02  8.03714395e-02  2.79005673e-02
  6.82026893e-02  2.62390915e-02  3.67659749e-03  8.04245695e-02
 -2.48296559e-02  3.95214669e-02 -9.26047117e-02 -3.56096663e-02
  3.31486948e-02  3.82846631e-02  5.70158511e-02 -1.09875500e-01
 -4.52411473e-02  5.99129982e-02 -2.23957859e-02  2.62041930e-02
  3.51461805e-02  1.57526638e-02  1.52659025e-02  1.33169685e-02
 -1.09425865e-01  2.51663476e-02 -8.69048946e-03 -4.59947847e-02
  1.09606115e-02  4.25941199e-02 -4.47000489e-02  3.03628445e-02
 -3.91769782e-02  1.18616282e-03  4.92746476e-03  5.64663111e-33
  4.29654121e-02  2.10902113e-02 -1.04954680e-02  3.26265059e-02
  2.36677728e-03 -9.58002638e-03  9.30159837e-02 -2.76028737e-02
 -7.87262544e-02  5.78598604e-02 -4.45834361e-02 -3.86142754e-04
  3.55373770e-02 -1.23099722e-02 -4.90174368e-02 -1.81141291e-02
 -3.94514129e-02 -5.83686754e-02  1.55931637e-02  3.35025191e-02
 -1.39247591e-03  6.07579872e-02  5.78776235e-03 -3.95681188e-02
 -2.15935670e-02  3.85259092e-02 -1.16797946e-01  4.43526767e-02
  2.13046409e-02 -2.06109486e-03 -5.21596223e-02 -4.93634455e-02
 -1.61126386e-02  5.15915975e-02  6.73032776e-02 -7.60763437e-02
  6.50215149e-03 -4.71476242e-02 -5.80331907e-02 -5.34446985e-02
  8.55811164e-02  2.87370607e-02 -2.88395863e-02 -2.90925410e-02
 -4.79657836e-02  2.84383800e-02 -3.85471657e-02  2.58498173e-02
  8.81033316e-02 -2.98300423e-02 -4.22553308e-02  1.78356729e-02
 -6.49914145e-02 -2.21818853e-02 -4.96507734e-02 -1.43754914e-01
 -3.24213095e-02 -3.99893560e-02 -3.25885229e-02  4.27391194e-03
 -5.66329099e-02 -2.29143444e-03  6.04987741e-02 -3.18618417e-02
 -2.71853581e-02  2.66615767e-02 -1.04278505e-01  5.77304959e-02
  7.16432482e-02 -3.03275939e-02 -3.50088179e-02  3.90981361e-02
 -7.72408098e-02  6.01524375e-02  1.66098457e-02 -9.17249322e-02
  6.75122589e-02  1.48189500e-01  2.37760437e-03  2.43978538e-02
  1.08752167e-02  2.76794005e-03 -1.50096975e-02  8.79581049e-02
  1.62927676e-02  4.44646291e-02  7.29102688e-03 -5.01869954e-02
 -1.42809898e-01 -8.25488195e-02 -7.21048797e-03  2.46334672e-02
  4.76048663e-02  2.13551912e-02  2.98320130e-02 -8.70705416e-33
  4.60744426e-02 -8.27005506e-02 -3.56028005e-02 -7.31604397e-02
 -2.90076397e-02  1.17460303e-02  2.95134056e-02 -2.95862667e-02
 -7.08331689e-02 -2.27455143e-02 -1.22087998e-02 -1.37021206e-02
  3.15596946e-02  1.39503367e-02 -1.05742989e-02 -5.13347611e-02
  7.95041397e-03  4.94651347e-02 -2.53032185e-02 -3.46530899e-02
 -3.98276933e-02  3.32794301e-02 -6.32542884e-03  4.31696735e-02
 -2.84427777e-02 -1.12407483e-01 -3.36926766e-02  6.13375641e-02
 -2.85060629e-02 -2.16942169e-02  8.44254568e-02  1.06625939e-02
 -5.47932051e-02  6.97315088e-04 -2.53019296e-02 -1.13129616e-01
  9.10756439e-02  1.82594880e-02 -4.08909470e-02  2.28114873e-02
  1.09968975e-01 -3.23734805e-02 -7.36069400e-03  1.04131065e-01
  1.84681565e-02  9.56664160e-02 -1.78087242e-02 -3.16772945e-02
 -7.59752318e-02  9.52662006e-02  1.22072406e-01 -1.89876761e-02
  2.74911951e-02 -6.36874065e-02  1.35846166e-02  4.11609933e-02
  1.49985746e-01 -2.31233537e-02  8.04143026e-02  3.26285996e-02
  5.78360632e-02 -2.54359599e-02  3.55626494e-02 -5.25209587e-03
  5.29390909e-02 -1.30161187e-02  2.74467189e-02  2.31348891e-02
  3.85166332e-02  2.58493535e-02  6.01658486e-02 -8.65040794e-02
 -3.83454673e-02  2.12069452e-02  2.24975720e-02 -2.81521063e-02
  2.64712907e-02 -3.15477066e-02  3.81487571e-02  2.08619982e-03
 -4.50314544e-02 -2.56169513e-02  3.76391746e-02  7.12469220e-02
  3.58375572e-02 -4.39019725e-02  4.17471603e-02 -2.52674650e-02
 -4.76622730e-02  6.09471314e-02 -9.94725898e-03  2.44300086e-02
  6.97373599e-02 -3.65850925e-02 -6.74719037e-03 -6.40133138e-08
 -3.85535620e-02 -3.81193943e-02 -3.82972546e-02 -3.30107622e-02
 -4.54416089e-02  9.29558575e-02 -9.79714189e-03 -6.84498399e-02
 -7.20068067e-02 -3.82143594e-02 -1.88938808e-02  2.22923066e-02
 -7.74507076e-02 -5.19962162e-02 -4.99827452e-02 -4.61602807e-02
  8.37222859e-03 -1.65801141e-02 -4.41984497e-02 -8.59520957e-02
 -3.11356280e-02  1.08517222e-02 -1.08748756e-01 -5.31630069e-02
 -1.43616926e-02 -2.57902462e-02  7.17285350e-02  1.55511111e-01
 -1.75129710e-04 -6.51143640e-02 -1.12449443e-02 -4.12722938e-02
  5.31826355e-02  7.07743515e-04 -4.01599482e-02  4.46893536e-02
  4.90572602e-02 -2.17693783e-02  3.25468776e-04  3.96787189e-02
 -4.52051684e-02  6.93229139e-02 -1.56102711e-02 -4.80239466e-02
 -3.29770036e-02  7.87159950e-02 -5.09985648e-02  1.57507416e-02
  8.24311301e-02  5.11616841e-02  5.15806116e-02 -7.13329315e-02
  9.34409276e-02  4.72847819e-02 -8.73311702e-03 -3.47489230e-02
 -8.69563594e-02 -2.39950716e-02  9.12147537e-02 -1.89692415e-02
  5.56072555e-02  6.52047805e-03  8.83111823e-03  3.51626240e-02]"
"create a random `to`
  const to = Keypair.generate();
  console.log(`receiver: ${to.publicKey.toBase58()}`);

  let tx = new Transaction().add(
    new TransactionInstruction({
      keys: [
        {
          pubkey: pda,
          // Leave `false` here although we need a pda as a signer.
          // It will be escalated on program if we use invoke_signed.
          isSigner: false,
          isWritable: true,
        },
        {
          pubkey: to.publicKey,
          isSigner: false,
          isWritable: true,
        },
        {
          pubkey: SystemProgram.programId,
          isSigner: false,
          isWritable: false,
        },
      ],
      data: Buffer.from(new Uint8Array([bump])),
      programId: programId,
    })
  );

  console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475let tx = new Transaction().add(
  new TransactionInstruction({
    keys: [
      {
        pubkey: pda,
        // Leave `false` here although we need a pda as a signer.
        // It will be escalated on program if we use invoke_signed.
        isSigner: false,
        isWritable: true,
      },
      {
        pubkey: to.publicKey,
        isSigner: false,
        isWritable: true,
      },
      {
        pubkey: SystemProgram.programId,
        isSigner: false,
        isWritable: false,
      },
    ],
    data: Buffer.from(new Uint8Array([bump])),
    programId: programId,
  })
);

console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
123456789101112131415161718192021222324252627# How to get program accountsReturn all accounts owned by a program. Refer to the guides section for more information on getProgramAccounts and its configuration.TSRustCLIimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";

(async () => {
  const MY_PROGRAM_ID = new PublicKey(
    ""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U""
  );
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const accounts = await connection.getProgramAccounts(MY_PROGRAM_ID);

  console.log(`Accounts for program ${MY_PROGRAM_ID}: `);
  console.log(accounts);

  /*
  // Output

  Accounts for program","[-5.27046509e-02  1.96192078e-02 -7.76172727e-02 -3.68860172e-04
 -8.87547657e-02 -3.00665740e-02  5.86298555e-02  2.64033899e-02
  7.32179955e-02  6.54532239e-02  2.40736231e-02 -1.42963929e-02
 -2.01262105e-02 -7.88594224e-03  5.36240041e-02  2.73143556e-02
 -4.39933725e-02 -2.21388396e-02 -1.39718913e-02 -2.85104173e-03
  2.42346060e-03 -3.83200087e-02  4.59575690e-02  3.01791858e-02
 -3.31513658e-02 -1.04006626e-01  9.71382037e-02 -4.64805216e-02
 -1.74863283e-02 -7.02132750e-03  7.27152154e-02  1.92931164e-02
 -7.63857961e-02 -3.05411778e-02 -1.23514850e-02  1.05239727e-01
  3.48977707e-02 -9.31364018e-03  1.86632145e-02 -1.33139472e-02
  3.12797278e-02  3.46555449e-02 -9.02318731e-02  5.30833751e-02
  5.65070957e-02 -3.65750045e-02 -7.81223625e-02  6.48247376e-02
  2.66117975e-02  4.92900759e-02 -1.47964787e-02  2.73550674e-02
 -4.55249809e-02  4.57856730e-02 -4.98463735e-02  1.87065769e-02
 -2.89119518e-04 -3.02340416e-03  2.81295851e-02  1.80938537e-03
  2.26931777e-02 -1.20985066e-03  4.34418805e-02 -8.48240107e-02
  2.85484791e-02  5.38176857e-02  7.36760199e-02 -7.80540612e-03
 -7.12933904e-03  4.87567335e-02  3.46999802e-02 -3.91854532e-02
 -2.03324016e-02 -9.57925152e-03 -2.29731277e-02 -4.95764874e-02
 -5.56424707e-02  2.86583435e-02 -7.00391531e-02 -1.07905753e-02
 -2.71460917e-02 -3.78304459e-02  6.03273250e-02 -1.60920285e-02
 -2.66598118e-03  9.73136425e-02 -6.21859059e-02 -4.01237011e-02
  2.41796188e-02  2.64900457e-02 -4.78958040e-02  2.47468762e-02
  6.41155476e-03 -3.60581055e-02  8.43486488e-02  3.73437777e-02
  6.29424080e-02 -3.98202911e-02  4.03146483e-02  4.83723506e-02
  3.30276671e-03 -3.43977250e-02 -6.12852760e-02 -7.11670425e-03
  4.45318818e-02  2.89635491e-02  5.40894009e-02 -1.14525266e-01
 -6.28171116e-02  5.81106991e-02  7.53881503e-03  1.41218230e-01
  4.75743003e-02  3.94361801e-02 -3.96054760e-02  8.55555907e-02
 -1.04568824e-01  5.61894290e-02 -7.49753183e-03 -2.37460360e-02
  2.59025488e-03  7.48658832e-03 -8.12762678e-02  4.14917953e-02
 -7.87837729e-02 -3.82932201e-02  7.01515377e-02  3.39336934e-33
  5.08969985e-02 -9.00192652e-03 -4.22199667e-02  2.53686141e-02
  1.71722267e-02  1.75352432e-02  1.03240065e-01  6.69987407e-03
 -6.02406189e-02 -3.94504721e-04 -3.44312564e-02 -5.30551113e-02
 -7.03860773e-03  3.28997918e-03 -2.01378111e-02 -2.54736468e-02
 -2.68067773e-02  3.60011943e-02  1.10912316e-01  1.36955604e-02
  1.08983144e-02  2.58510951e-02  8.01609177e-03 -3.90609056e-02
  4.55015386e-03  1.55612258e-02 -9.77002755e-02  5.65858325e-03
 -1.23942057e-02 -2.56793741e-02  5.13172615e-03  5.83275184e-02
  6.03272812e-03  4.94271889e-02  3.89937474e-03 -8.98068994e-02
 -7.34039349e-03  1.13581596e-02 -1.04596980e-01 -3.35048139e-02
  9.81071517e-02  2.38008555e-02 -5.14249355e-02 -1.45760486e-02
 -8.61897767e-02  1.90863796e-02  1.73646472e-02 -6.66516945e-02
  1.19718842e-01 -4.56823744e-02 -5.35754785e-02  2.41309814e-02
 -5.75053021e-02 -6.12768121e-02 -5.21778688e-02 -1.00734621e-01
  1.72971934e-02 -4.40139696e-02  8.63180123e-03  1.23182740e-02
 -6.97161928e-02  4.68166312e-03  5.78752682e-02 -2.50720922e-02
 -4.80682105e-02 -2.26815939e-02 -7.43566155e-02  8.19027517e-03
  1.97551474e-02 -8.18412602e-02 -3.18044946e-02  2.10174024e-02
 -7.44660497e-02  4.96633761e-02 -1.02786133e-02 -4.23038118e-02
 -5.60703222e-03  6.46438077e-02  1.41489571e-02 -7.46709779e-02
 -5.25641954e-03  2.37614810e-02 -2.83204541e-02  1.11396417e-01
  3.48826088e-02  8.18426982e-02 -3.67195942e-02 -7.57257715e-02
 -7.59912804e-02  5.59278019e-03 -3.67756635e-02 -2.31044758e-02
  3.65140811e-02  1.76050086e-02  3.44639383e-02 -7.37296579e-33
  2.14393809e-03 -6.02809675e-02 -3.23948711e-02  3.85414138e-02
 -5.32771572e-02  3.48394108e-03 -2.61284430e-02  1.29653858e-02
 -5.15913479e-02 -3.97896282e-02 -2.11149231e-02  1.93981975e-02
  6.18345849e-02  3.60910296e-02  1.02758398e-02 -5.77723868e-02
 -3.39171588e-02  2.18906980e-02 -5.97678358e-03 -4.21688072e-02
  3.12856808e-02 -8.11146479e-03 -1.01652760e-02  6.78163916e-02
 -3.82730663e-02 -1.09139429e-02 -4.21943963e-02  5.90499341e-02
  7.53834192e-03 -3.60124744e-02  1.84914470e-02  3.83118875e-02
 -3.56256142e-02  1.35115646e-02  6.27771439e-03 -1.17704198e-01
  9.56822485e-02  8.49373117e-02 -1.40313786e-02  6.55489191e-02
  4.13091779e-02 -5.87938875e-02 -3.16144899e-02  4.08355109e-02
  1.92882717e-02  2.10113246e-02  4.12417874e-02 -2.98579037e-03
  1.47129986e-02  1.25072613e-01  9.24533829e-02  2.94257363e-04
 -4.89407331e-02 -4.55343649e-02 -2.87048500e-02  2.31131129e-02
  1.00215361e-01 -1.12675972e-01  9.55133662e-02  3.40476856e-02
  1.24538345e-02 -4.48129065e-02  8.61719847e-02 -1.15986820e-02
  6.81721345e-02 -3.38862985e-02 -1.01783434e-02 -2.31306680e-04
  6.16123043e-02  5.76754175e-02  3.60286571e-02 -2.50700451e-02
 -2.57513486e-02  3.87041233e-02  1.24921069e-01 -1.21661901e-01
 -1.37741966e-02 -1.42858371e-01  6.42258227e-02 -2.59105135e-02
 -2.69376785e-02 -3.50504415e-03  3.91099565e-02 -1.72773842e-02
  2.61201467e-02 -7.69254798e-03  3.36619876e-02 -2.83275060e-02
 -1.29421083e-02  4.95013632e-02 -1.40148625e-02 -1.27376514e-02
 -7.48831360e-03 -7.20824823e-02 -4.24144678e-02 -6.58233930e-08
 -3.01685650e-02  2.21396647e-02 -5.98863848e-02  1.86047535e-02
 -2.85162237e-02 -5.45072518e-02 -1.46376658e-02 -2.39535347e-02
 -1.46594206e-02 -1.55339450e-01 -4.84787486e-02  3.81269120e-02
 -3.73957641e-02 -4.06682342e-02 -4.67303162e-03 -4.74480726e-02
 -1.99039113e-02 -3.17279659e-02 -4.73391600e-02 -3.57333310e-02
 -2.42858808e-02 -2.39284690e-02 -1.07659940e-02 -7.47833103e-02
  1.84294470e-02 -5.77326259e-03  1.28985122e-01  1.78081676e-01
  7.54704922e-02 -6.49328157e-03 -6.55574352e-02 -5.29998802e-02
  3.91324013e-02 -1.73038256e-03 -4.54905033e-02  1.23634497e-02
  4.99166474e-02 -6.73928782e-02  3.49448249e-02  5.23849763e-03
  5.38081080e-02 -1.59062876e-03 -5.22736609e-02  1.52388876e-02
 -7.06887096e-02  3.74787711e-02 -3.20611261e-02  3.55325043e-02
  1.05200581e-01  2.27436461e-02 -2.04190481e-02 -8.66236538e-02
  4.10854295e-02  1.28285801e-02 -2.94322520e-02 -2.98171472e-02
 -1.96317844e-02 -2.66477372e-02  1.18622854e-01 -1.67394374e-02
  1.22270197e-01 -2.91133448e-02 -4.39324528e-02 -6.76931366e-02]"
"6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U:  
  [
    {
      account: {
        data: <Buffer 60 06 66 ca 2c 1d c7 85 04 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 fc>,
        executable: false,
        lamports: 1064880,
        owner: [PublicKey],
        rentEpoch: 228
      },
      pubkey: PublicKey {
        _bn: <BN: 82fc5b91154dc5c840cb464ba6a89212d0fd789367c0a1488fb1941d78f9727a>
      }
    },
    {
      account: {
        data: <Buffer 60 06 66 ca 2c 1d c7 85 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 fd>,
        executable: false,
        lamports: 1064880,
        owner: [PublicKey],
        rentEpoch: 229
      },
      pubkey: PublicKey {
        _bn: <BN: 404dc1fe368cf194f20cf3c681a071c61893ced98f65cda12ba5a147e984e669>
      }
    }
  ]
  */
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445use solana_client::rpc_client::RpcClient;
use solana_program::pubkey::Pubkey;
use solana_sdk::commitment_config::CommitmentConfig;
use std::str::FromStr;

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let program_id = Pubkey::from_str(""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U"").unwrap();
    let accounts = connection.get_program_accounts(&program_id).unwrap();

    println!(""accounts for {}, {:?}"", program_id, accounts);
}
1234567891011121314curl https://api.devnet.solana.com -X POST -H ""Content-Type: application/json"" -d '
 {""jsonrpc"":""2.0"", ""id"":1, ""method"":""getProgramAccounts"", ""params"":[""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U""]}
'

# Output
# {""jsonrpc"":""2.0"",""result"":[{""account"":{""data"":""fe2kiXpgfrjWQjCPX3n5MB339Ayqav75ej"",""executable"":false,""lamports"":1064880,""owner"":""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U"",""rentEpoch"":228},""pubkey"":""9pKBrUtJU9GNmct6T2BQtiKqvubtjS9D2if2bm1P8TQd""},{""account"":{""data"":""fe2kiXpgfrjVs7hiZJNVFsbJUuhXhFx3pQ"",""executable"":false,""lamports"":1064880,""owner"":""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U"",""rentEpoch"":229},""pubkey"":""5L1rztbopmgGMWPKb2efoGyhGnrBJm6K53Hf9S4nxdHr""}],""id"":1}
123456# How to close accountsYou can close an account (erase all stored data) by removing all SOL. (you can refer to rentopen in new window for more information)# ProgramrustPress </> button to view full sourceuse solana_program::{
    account_info::next_account_info, account_info::AccountInfo, entrypoint,
    entrypoint::ProgramResult, pubkey::Pubkey,
};

entrypoint!(process_instruction);

fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();

    let source_account_info = next_account_info(account_info_iter)?;
    let dest_account_info = next_account_info(account_info_iter)?;

    let dest_starting_lamports = dest_account_info.lamports();
    **dest_account_info.lamports.borrow_mut() = dest_starting_lamports
        .checked_add(source_account_info.lamports())
        .unwrap();
    **source_account_info.lamports.borrow_mut() = 0;

    let mut source_data = source_account_info.data.borrow_mut();
    source_data.fill(0);

    Ok(())
}
12345678910111213141516171819202122232425262728let dest_starting_lamports = dest_account_info.lamports();
**dest_account_info.lamports.borrow_mut() = dest_starting_lamports
    .checked_add(source_account_info.lamports())
    .unwrap();
**source_account_info.lamports.borrow_mut() = 0;

let mut source_data = source_account_info.data.borrow_mut();
source_data.fill(0);
12345678# ClientTSPress </> button to view full sourceimport {
  Keypair,
  Connection,
  Transaction,
  SystemProgram,
  TransactionInstruction,
  PublicKey,
  clusterApiUrl,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";

(async function () {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // setup fee payer
  const feePayer = Keypair.generate();
  const feePayerAirdropSignature = await connection.requestAirdrop(
   ","[ 6.22924976e-02  8.29788148e-02 -5.18095084e-02 -6.15970381e-02
 -2.12255325e-02 -3.53678241e-02  7.55048990e-02 -2.29118243e-02
  3.42951044e-02  7.41453543e-02  2.38535274e-02 -5.04861027e-02
  2.27416456e-02 -7.92361796e-02  3.84196639e-02  3.11092809e-02
 -1.67171940e-01 -2.38180328e-02 -5.18397689e-02 -4.84095998e-02
 -2.83786599e-02 -3.53105702e-02 -7.37224594e-02 -7.11542591e-02
 -1.54815512e-02  6.59044981e-02  8.63999967e-03  4.49703857e-02
 -3.71684507e-02 -6.93432391e-02  8.41051787e-02 -3.51966061e-02
 -9.72231477e-03  4.12670076e-02  3.89474370e-02  3.76723893e-02
  1.47861056e-02 -7.74411261e-02  1.27945580e-02 -1.95345352e-03
  1.90801863e-02  1.59066897e-02 -5.12511143e-03 -3.56352851e-02
 -2.26013991e-03  3.38050234e-03 -7.17238709e-02  2.57426016e-02
 -9.48404800e-03 -7.50256926e-02 -4.75026816e-02  5.26165366e-02
 -3.47302966e-02  2.38183439e-02  2.46072393e-02  1.06226131e-02
 -6.45015910e-02 -4.84146476e-02  7.42723048e-02 -2.25095712e-02
  8.90116617e-02  2.12963670e-02 -1.00347921e-02 -4.63271402e-02
 -4.88111144e-03  7.32883345e-03 -5.22415526e-02 -3.02708329e-04
  4.76726294e-02  8.68764613e-03 -4.74306978e-02  2.11949926e-02
 -5.43837585e-02  4.72126016e-03 -1.46091431e-02 -5.83981350e-03
 -4.20748852e-02 -5.78274988e-02 -5.26312329e-02 -5.68283238e-02
 -3.12558711e-02 -7.60961473e-02 -3.45994197e-02  7.03514665e-02
  1.37577569e-02  7.41529614e-02  7.61464983e-03 -7.20473975e-02
 -2.96600461e-02  2.61471532e-02 -6.31264504e-03  6.50299937e-02
  3.40121575e-02  5.79950735e-02  6.17924705e-02  3.58884409e-02
  4.93306741e-02  1.47069443e-03 -1.93331130e-02  1.35180429e-01
 -9.19608399e-03  2.93483748e-03  6.43969688e-04 -2.94362847e-02
  7.48748034e-02 -1.26294047e-02  5.03112115e-02  4.26840857e-02
 -1.38606876e-01 -4.78718057e-02 -4.00683768e-02  5.05675673e-02
 -3.84677537e-02 -3.94746773e-02 -1.29794618e-02  4.13867645e-03
  1.84899662e-02 -6.90198317e-03 -2.88723987e-02  5.10191433e-02
  1.50256872e-01  9.15692747e-03 -8.45816284e-02  4.52429093e-02
 -5.21377176e-02 -6.11191802e-02  3.61868106e-02  2.52467916e-32
  3.56315542e-03 -6.18900880e-02 -2.09936332e-02 -1.05709046e-01
  7.35321343e-02  1.73778664e-02 -7.33536901e-03  4.10268456e-02
 -5.68148866e-02  7.87957311e-02  1.47715965e-02 -9.28329825e-02
 -1.08563863e-02 -3.64229605e-02  2.92261373e-02 -5.75106926e-02
  3.15703712e-02  6.23303093e-02 -1.99640617e-02 -5.33786565e-02
 -2.65737586e-02  5.03996573e-02 -1.74380261e-02 -5.38864955e-02
 -1.94318853e-02 -1.19922506e-02 -5.68728112e-02 -6.79139933e-03
 -2.66595907e-03  1.76437572e-02  3.92425507e-02  5.56321442e-02
 -6.94752261e-02  3.10647860e-02  5.09212129e-02 -6.25973120e-02
  2.85742022e-02 -6.14803359e-02 -4.96393144e-02  3.41937765e-02
 -1.08942678e-02 -1.98372733e-02 -7.64699951e-02 -3.94098349e-02
 -6.33434281e-02 -2.18573865e-02 -2.58853417e-02 -5.25944959e-03
 -2.53679380e-02  4.71950397e-02 -1.32228788e-02  7.09351972e-02
 -8.92992541e-02  4.21616659e-02 -3.31622362e-02 -6.64176643e-02
 -3.85675468e-02  9.95220523e-03  2.31596138e-02  5.81164509e-02
 -4.53528315e-02  6.49880767e-02  4.94924549e-04 -1.11125493e-02
  4.13437225e-02 -7.76853040e-02  9.54174548e-02  3.68426107e-02
  9.42512788e-03 -2.12580040e-02  1.96292885e-02  1.96354873e-02
  1.36410445e-01  1.95006318e-02 -7.39726573e-02 -6.96700066e-02
 -2.22236421e-02  1.42792072e-02 -1.36535857e-02 -4.40190732e-02
  6.09439686e-02 -3.26408520e-02 -1.08022969e-02 -5.16830012e-02
 -7.57216066e-02  5.21904342e-02 -3.25243287e-02 -4.72240858e-02
 -4.11887243e-02 -2.05518808e-02 -1.16617873e-01 -6.69251429e-03
  1.44469254e-02 -1.26904726e-01 -8.06024298e-02 -2.29362311e-32
  7.05264285e-02 -4.14833315e-02 -1.46463905e-02 -3.87047455e-02
  2.18876731e-02  3.43205929e-02  4.69615050e-02 -9.30029079e-02
  9.96946916e-03  1.04902677e-01  2.99765635e-02  1.06969979e-02
  5.62670901e-02 -2.90784854e-02  6.48968369e-02  4.39843275e-02
 -1.87354553e-02 -4.89133969e-02 -2.73740906e-02 -2.83702705e-02
 -4.37042676e-02  5.98216020e-02  1.26685733e-02  1.27323136e-01
 -4.24426161e-02  2.09200475e-02  1.15455557e-02  6.43600598e-02
 -4.99445759e-02  7.96648860e-03 -1.34288454e-02 -5.06531540e-03
 -9.16425437e-02  1.88261606e-02 -2.13727467e-02 -8.08643922e-02
  3.88434865e-02  1.23430438e-01 -3.15290466e-02  8.48627463e-02
  4.65838350e-02  1.31303314e-02 -4.26939083e-03 -5.70933074e-02
  2.80324388e-02  4.98667546e-03  1.04143061e-01  3.97932269e-02
 -5.55802602e-03  1.22274989e-02  8.72374624e-02  1.39795328e-02
  1.41624184e-02  2.97334604e-03  3.11957113e-02 -7.04329601e-03
  6.85924888e-02 -8.01724270e-02  2.41853739e-03  4.39193007e-03
  3.53325084e-02 -5.40030114e-02  1.62131172e-02  7.59754628e-02
  1.20134443e-01 -8.27759430e-02 -8.60397518e-02 -3.16813961e-02
 -2.23645344e-02 -6.57790452e-02  2.51668710e-02 -8.02799221e-03
 -1.51551757e-02 -1.77434385e-02  1.00288585e-01 -1.33377686e-02
  4.99063618e-02  1.72467139e-02  4.37908247e-02  9.91345793e-02
 -2.76479106e-02  3.07718664e-02  2.53024418e-02  8.56054202e-02
 -7.03515187e-02 -7.79958591e-02 -1.62230078e-02  5.58204483e-03
 -6.79162815e-02 -2.93388888e-02 -2.19038278e-02  6.63884217e-03
  1.72059145e-02  3.74979228e-02  1.09300576e-01 -6.98869229e-08
 -6.00511171e-02 -5.73490560e-02 -5.30253462e-02  7.46791959e-02
  3.08857858e-02 -3.32735218e-02 -3.58011797e-02 -5.78873716e-02
 -5.69817983e-03 -8.90347213e-02  8.14572349e-02  2.28720084e-02
 -4.82046641e-02 -1.41309360e-02 -1.84284933e-02 -9.62073877e-02
 -1.05642296e-01 -5.79390116e-02 -4.60164212e-02 -1.70281958e-02
  6.53829426e-03 -4.85545141e-04  2.19391007e-02  9.94554721e-03
  2.81666052e-02  2.03866065e-02  1.75658509e-03  8.74058828e-02
  1.49740567e-02  1.28185079e-01 -3.15798111e-02 -1.45911882e-02
  1.12216491e-02 -4.84364405e-02 -5.84027171e-03 -2.02857926e-02
  1.89649817e-02  5.32461591e-02 -6.92710280e-02 -3.94277088e-03
  1.21509712e-02  1.89706660e-03 -1.46881836e-02  4.48628180e-02
 -5.79412514e-03 -2.05445495e-02  4.50876690e-02  5.94358146e-02
  1.00148097e-01 -6.18990250e-02  7.71744829e-03 -7.21658533e-03
  5.46534732e-02  3.65227833e-02 -5.01519330e-02 -1.82875227e-02
  9.57362540e-03  3.86891663e-02 -3.68128121e-02  6.10840544e-02
  8.61745030e-02  4.48093284e-03 -2.68474035e-02  1.09762966e-03]"
"feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(feePayerAirdropSignature);

  // remember to deploy your program first
  const programId = new PublicKey(
    ""An47uBJ8kY7hzKPzDyRoFSsDHkZFY9vkfUGpTViWqLFz""
  );

  // 1. create an account to your program
  let newAccount = Keypair.generate();
  console.log(`new account: ${newAccount.publicKey.toBase58()}`);

  let createNewAccountTx = new Transaction().add(
    SystemProgram.createAccount({
      fromPubkey: feePayer.publicKey,
      newAccountPubkey: newAccount.publicKey,
      lamports: 1e8, // 0.1 SOL
      space: 10, // a random value
      programId: programId,
    })
  );
  console.log(
    `create account txhash: ${await connection.sendTransaction(
      createNewAccountTx,
      [feePayer, newAccount]
    )}`
  );

  // 2. close your account
  let closeAccountTx = new Transaction().add(
    new TransactionInstruction({
      keys: [
        {
          pubkey: newAccount.publicKey,
          isSigner: false,
          isWritable: true,
        },
        {
          pubkey: feePayer.publicKey,
          isSigner: false,
          isWritable: true,
        },
      ],
      programId: programId,
    })
  );
  console.log(
    `close account txhash: ${await connection.sendTransaction(closeAccountTx, [
      feePayer,
    ])}`
  );
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172// 1. create an account to your program
let createNewAccountTx = new Transaction().add(
  SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    newAccountPubkey: newAccount.publicKey,
    lamports: 1e8, // 0.1 SOL
    space: 10, // a random value
    programId: programId,
  })
);

// 2. close your account
let closeAccountTx = new Transaction().add(
  new TransactionInstruction({
    keys: [
      {
        pubkey: newAccount.publicKey,
        isSigner: false,
        isWritable: true,
      },
      {
        pubkey: feePayer.publicKey,
        isSigner: false,
        isWritable: true,
      },
    ],
    programId: programId,
  })
);
1234567891011121314151617181920212223242526272829# How to get account balanceTSRustPythonC++Press </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  let wallet = new PublicKey(""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY"");
  console.log(
    `${(await connection.getBalance(wallet)) / LAMPORTS_PER_SOL} SOL`
  );
})();
123456789101112131415console.log(`${(await connection.getBalance(wallet)) / LAMPORTS_PER_SOL} SOL`);
1use solana_client::rpc_client::RpcClient;
use solana_program::native_token::LAMPORTS_PER_SOL;
use solana_program::pubkey::Pubkey;
use solana_sdk::commitment_config::CommitmentConfig;
use std::str::FromStr;

fn main() {
","[-2.32918952e-02 -7.56842569e-02 -5.73962443e-02  2.72599664e-02
 -6.07557781e-02  2.43778247e-02  1.16682336e-01  3.53656337e-02
  8.16401392e-02  1.01757661e-01  1.08755365e-01 -8.73476192e-02
 -2.05736440e-02 -4.04571258e-02 -2.27793809e-02  5.27473018e-02
 -4.00904119e-02 -1.34455338e-01 -2.12311409e-02  3.51440012e-02
  4.17827629e-02 -1.37365207e-01  4.78248969e-02 -3.22508663e-02
  7.05230534e-02 -1.05864570e-01 -1.52706336e-02  9.41134337e-03
 -1.68923363e-02 -3.64472307e-02  8.74514431e-02  2.58407667e-02
 -4.81370427e-02 -5.28251715e-02  5.85249402e-02  6.03225194e-02
  1.03224022e-02 -4.39761989e-02 -7.39173125e-03 -1.51992263e-02
 -4.58883792e-02  4.38977368e-02 -5.09596728e-02  8.02044868e-02
  4.07842286e-02 -4.30622473e-02  2.21113296e-04  7.13130385e-02
  1.89986860e-03  4.81663980e-02 -2.06777044e-02  2.12795734e-02
 -4.80480399e-03 -3.35826213e-03 -4.97312099e-02  6.46865666e-02
  3.60870181e-04  3.49771120e-02  2.14770585e-02 -3.95296067e-02
  7.89905190e-02 -2.66553126e-02  6.44525932e-03 -7.42654502e-02
 -8.21786076e-02  6.56751320e-02  1.46344285e-02 -6.88286275e-02
 -2.84311958e-02 -1.02715254e-01 -3.39244376e-04 -4.72978782e-03
 -6.02265410e-02  5.25229387e-02 -6.90589547e-02 -5.77931441e-02
 -8.23012181e-03  5.94934449e-02 -8.09299052e-02  3.03180385e-02
 -1.45411761e-02 -1.37506519e-02  2.62467354e-03  5.00610024e-02
  5.04209399e-02  5.96119799e-02  2.71386988e-02  1.55078880e-02
 -1.06341420e-02 -1.23985973e-03 -3.12266350e-02  5.33698350e-02
 -4.15623523e-02  4.96697903e-04  3.04543059e-02  5.48124760e-02
  1.59578281e-04 -1.66069381e-02 -2.65579931e-02  5.97318336e-02
  3.45929898e-02 -5.11107109e-02 -6.25440925e-02  3.35342772e-02
  6.88832253e-02 -1.92295166e-03  7.53127411e-02 -6.05581030e-02
 -1.18884547e-02  2.18821131e-02  3.00706713e-03  1.07437372e-01
 -2.16459054e-02  7.67775476e-02 -5.22630140e-02  1.41423866e-01
 -6.14517070e-02  2.77200583e-02  4.68429923e-02  1.47154238e-02
  3.65926325e-02  5.07449619e-02 -8.63887519e-02 -4.77075763e-02
 -6.97200224e-02 -3.32729444e-02  6.57278150e-02  1.24015124e-32
 -8.31224862e-03  1.41483536e-02 -4.22553904e-02 -6.57136738e-03
  1.06692640e-02  1.27277998e-02  1.13198809e-01  9.24109370e-02
 -7.86755309e-02 -8.02406110e-03 -4.29574475e-02 -1.07753955e-01
  3.37491408e-02 -6.68625385e-02 -5.26520498e-02 -6.15290478e-02
 -1.15857006e-03  4.73627336e-02  9.89295617e-02 -2.34149341e-02
 -3.50759998e-02 -2.51668990e-02  3.49795483e-02 -1.90194547e-02
  1.86143853e-02  3.44038904e-02 -5.09813242e-02  4.24678251e-02
  3.01899202e-02  1.55656282e-02  5.60721718e-02  3.38168703e-02
 -3.95858748e-04  4.69919555e-02  4.56016995e-02 -9.38552804e-03
 -2.05164272e-02 -9.09060426e-03 -8.48034024e-02  1.77734625e-02
  3.74336690e-02 -1.35523593e-02 -9.31651369e-02  4.13408317e-02
 -8.68943781e-02 -4.44866493e-02  1.43226320e-02  3.74209578e-03
  7.90407807e-02  8.70482717e-03 -1.23890251e-01  2.68388838e-02
 -3.55381817e-02 -3.64550464e-02  1.55665847e-02 -1.72287470e-03
 -1.02886492e-02 -4.51744609e-02 -5.29679796e-03 -8.24951828e-02
 -2.86271353e-03 -4.61045802e-02 -1.82038024e-02 -1.96257886e-02
  3.59935313e-02 -6.26028478e-02 -7.52841085e-02 -5.26430970e-03
  2.40163635e-02 -5.46054579e-02 -3.04718707e-02 -2.14022361e-02
 -2.53885929e-02  4.35780734e-02 -7.73333013e-05 -3.61108780e-02
 -2.75889821e-02 -1.19851343e-03 -2.51935776e-02 -2.65312158e-02
  2.17560530e-02  3.37061882e-02 -1.76668465e-02  6.77995104e-03
  1.48473000e-02  1.37479424e-01  1.69872376e-03  4.19327989e-02
 -2.17763409e-02  2.59732399e-02  2.92848535e-02 -1.33982273e-02
 -1.10556940e-02 -4.58362810e-02  1.67931709e-02 -1.19255415e-32
 -4.19412553e-02 -3.61075588e-02 -1.16929799e-01 -1.95781942e-02
  2.64286865e-02  4.91037704e-02  2.82731541e-02 -1.18707465e-02
 -2.08868403e-02 -3.49497329e-03 -1.81877129e-02  3.13729681e-02
  5.90354204e-03  5.55295125e-03  5.41091561e-02 -3.86763923e-02
 -2.15537287e-02 -2.17326023e-02  6.80679753e-02  2.87368633e-02
  3.74152651e-03  5.50446808e-02 -1.50525123e-02  3.41405123e-02
 -1.16547808e-01  8.70117638e-03 -6.04448433e-04  1.11572072e-01
 -3.87341604e-02 -1.24413343e-02  3.57364193e-02  2.41213832e-02
 -6.27578273e-02  6.09972514e-02 -1.08083310e-02 -1.22323774e-01
  5.36269434e-02  6.66546598e-02 -7.67086539e-03  9.66525525e-02
  3.37791778e-02 -8.47286433e-02  1.62304398e-02 -5.18080294e-02
 -2.04100437e-03 -5.14742434e-02  2.82866471e-02 -4.83169928e-02
  4.78616990e-02  4.98053096e-02  2.16418467e-02 -4.59025847e-04
 -2.84030102e-02  2.75820331e-03 -1.42593123e-02  6.32946715e-02
  1.09258786e-01 -5.77856451e-02  9.81363729e-02 -3.04426868e-02
 -1.96214356e-02 -3.74451913e-02  1.00334823e-01  5.20044453e-02
  1.04922220e-01  4.09435760e-03  8.26624501e-03  1.44840172e-02
  8.59269947e-02  7.02326605e-03 -9.53690037e-02 -2.42833868e-02
 -1.66940782e-03 -4.20497917e-02  6.98658228e-02 -1.93539876e-02
 -1.05230538e-02 -2.32146140e-02  6.04457557e-02 -1.15260659e-02
  4.95750010e-02  1.90466493e-02  2.89765485e-02 -6.20313771e-02
 -2.29326542e-02 -8.91624391e-02  1.76007655e-02 -2.30044946e-02
 -6.33090213e-02 -1.01374323e-03 -4.36544865e-02 -4.05167490e-02
 -3.88413630e-02 -6.47553355e-02 -2.25144744e-04 -7.00864149e-08
 -2.31562704e-02  8.21632743e-02 -3.98078039e-02  6.24136589e-02
  5.07304110e-02 -3.33356112e-02  1.07145831e-02 -9.77359526e-03
 -4.63878624e-02 -1.27871856e-01 -5.79515994e-02  7.49819726e-02
  3.46604921e-02  1.60888582e-02  1.06609883e-02 -9.73187611e-02
 -2.40537664e-03 -4.20399196e-02 -3.07682063e-02 -1.13988053e-02
  7.30236061e-03 -3.72106247e-02  3.97495441e-02 -6.03489839e-02
  2.08444074e-02  1.58327706e-02  7.10585192e-02  1.49384171e-01
  4.80283499e-02  3.10032368e-02 -5.91206849e-02 -1.05121545e-02
  1.80129353e-02 -5.57222515e-02 -7.40222484e-02  2.23266147e-02
 -2.47597937e-02 -2.47126427e-02  6.69833571e-02 -2.09685098e-02
  8.19105282e-02  7.19914362e-02 -1.63567252e-02  1.59668028e-02
 -5.25527261e-02  3.70627493e-02 -3.11382022e-02 -1.03478637e-02
  1.00384764e-01  5.39308786e-02 -4.34624329e-02 -3.93402651e-02
  2.59229150e-02  3.94437648e-02 -5.17978482e-02  1.32376105e-02
  2.55275834e-02 -5.79046793e-02 -4.33953591e-02  2.16979422e-02
  6.66394085e-02 -2.07628608e-02 -2.76965406e-02 -8.99613947e-02]"
"   let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let wallet = Pubkey::from_str(""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY"").unwrap();
    let balance = connection.get_balance(&wallet).unwrap();

    println!(
        ""The account {}, has {} SOL "",
        wallet,
        balance / LAMPORTS_PER_SOL
    );
}
12345678910111213141516171819connection.get_balance(&wallet).unwrap();
1from solders.keypair import Keypair
from solana.rpc.api import Client

client = Client(""https://api.devnet.solana.com"")

key_pair = Keypair()
public_key = key_pair.pubkey()

print(client.get_balance(public_key))
123456789client = Client(""https://api.devnet.solana.com"")

key_pair = Keypair()
public_key = key_pair.pubkey()

client.get_balance(public_key)
123456// clang++ get_balance.cpp -o get_balance -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  Connection connection(""https://api.devnet.solana.com"");

  auto key_pair = Keypair::generate();

  auto public_key = key_pair.public_key;
  std::cout << ""public_key = "" << public_key.to_base58() << std::endl;

  uint64_t balance = connection.get_balance(public_key).unwrap();
  std::cout << ""balance = "" << balance << std::endl;

  return 0;
}
12345678910111213141516171819Connection connection(""https://api.devnet.solana.com"");

auto key_pair = Keypair::generate();
auto public_key = key_pair.public_key;

uint64_t balance = connection.get_balance(public_key).unwrap();
123456TIPIf you want to get a token balance, you will need to know the address of token account. For more information, see Token References # Writing Programs# How to transfer SOL in a programYour Solana Program can transfer lamports from one account to another without 'invoking' the System program. The fundamental rule is that your program can transfer lamports from any account owned by your program to any account at all.The recipient account does not have to be an account owned by your program.Program/// Transfers lamports from one account (must be program owned)
/// to another account. The recipient can by any account
fn transfer_service_fee_lamports(
    from_account: &AccountInfo,
    to_account: &AccountInfo,
    amount_of_lamports: u64,
) -> ProgramResult {
    // Does the from account have enough lamports to transfer?
    if **from_account.try_borrow_lamports()? < amount_of_lamports {
        return Err(CustomError::InsufficientFundsForTransaction.into());
    }
    // Debit from_account and credit to_account
    **from_account.try_borrow_mut_lamports()? -= amount_of_lamports;
    **to_account.try_borrow_mut_lamports()? += amount_of_lamports;
    Ok(())
}

/// Primary function handler associated with instruction sent
/// to your program
fn instruction_handler(accounts: &[AccountInfo]) -> ProgramResult {
    // Get the 'from' and 'to' accounts
    let account_info_iter = &mut accounts.iter();
    let from_account = next_account_info(account_info_iter)?;
    let to_service_account = next_account_info(account_info_iter)?;

    // Extract a service 'fee' of 5 lamports for performing this instruction
    transfer_service_fee_lamports(from_account, to_service_account, 5u64)?;

    // Perform the primary instruction
    // ... etc.

    Ok(())
}
123456789101112131415161718192021222324252627282930313233# How to get clock in a programGetting a clock can be done in two waysPassing SYSVAR_CLOCK_PUBKEY into an instructionAccessing Clock directly inside an instruction.It is nice to know both the methods, because some legacy programs still expect the SYSVAR_CLOCK_PUBKEY as an account.# Passing Clock as an account inside an instructionLet's create an instruction which receives an account for initializing and the sysvar pubkeyRustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    clock::Clock,
    entrypoint,
    entrypoint::ProgramResult,
    msg,
   ","[-7.50812963e-02  5.25142858e-03 -1.16875790e-01  1.13425320e-02
 -4.51417603e-02 -4.67405468e-02 -4.95358091e-03  2.29883473e-02
  1.53490975e-02 -5.96221723e-03  1.70368720e-02 -4.48410735e-02
  2.16660518e-02 -2.77965125e-02  5.62794730e-02 -5.73772751e-03
 -1.20560773e-01 -2.24082731e-03 -6.37952238e-03 -6.09898474e-03
  9.31466278e-03 -1.63965032e-03 -4.94477246e-03 -3.64817381e-02
  6.56896830e-02 -3.16641591e-02  2.06986852e-02  6.90210052e-03
 -5.70902377e-02  6.35163337e-02  1.02749340e-01  5.23646958e-02
 -1.33211249e-02  3.34918611e-02 -7.53606716e-03  7.80691579e-02
 -4.30198312e-02 -2.51815742e-04  2.57157255e-02 -3.85306887e-02
  9.88014694e-03  6.15440728e-03 -3.93512622e-02  3.32208537e-02
  3.78620140e-02 -1.47551419e-02 -1.04600973e-01  6.94573745e-02
  2.46634241e-02 -1.43717621e-02 -5.53785004e-02 -5.00034634e-03
 -9.22800303e-02  4.18736823e-02  1.57018919e-02  4.57350798e-02
 -1.74828116e-02 -1.17940288e-02  3.33565846e-02 -6.27042949e-02
  1.17970444e-01 -3.07980496e-02  2.86349431e-02 -5.59267513e-02
 -6.45501688e-02 -3.93166393e-02  1.35401301e-02  2.69732215e-02
  1.09587610e-02 -3.94233577e-02  7.31125921e-02 -5.67794107e-02
 -5.72084673e-02 -8.74705166e-02 -5.46558276e-02 -2.89270561e-02
 -6.03659730e-03  3.26144956e-02 -9.54308547e-03  5.06928638e-02
 -3.09224352e-02 -5.19422852e-02  2.67538964e-03  1.51411906e-01
 -1.37052424e-02  6.19080961e-02 -1.97656490e-02 -5.03193736e-02
 -4.87413257e-03 -1.53896697e-02  1.99330337e-02  3.83155197e-02
 -4.46317606e-02 -4.28748317e-02 -3.14462581e-03  7.11845756e-02
 -1.08536407e-02 -1.37688359e-02 -1.19932130e-01  1.01183213e-01
  4.79990616e-02 -1.50015559e-02 -4.12969999e-02 -5.53256311e-02
  1.70134138e-02 -2.65709478e-02  9.08601955e-02  2.14632619e-02
 -5.45879733e-03  4.53865677e-02 -3.72481123e-02  4.19578217e-02
 -3.14949825e-02  5.94988652e-02 -1.21956449e-02  8.63625705e-02
  3.25993472e-03  6.39236122e-02  2.55139302e-02  4.39105295e-02
  7.01659173e-02  7.27800503e-02 -2.88442988e-02 -6.27360195e-02
 -1.00386657e-01 -1.19573809e-02  2.53510009e-02  9.71231930e-33
  6.19600201e-03  1.12154400e-02  3.93424481e-02 -4.54456918e-02
  1.79961156e-02  2.93915998e-02  4.16973904e-02  2.91075092e-02
 -7.05481395e-02 -7.83963967e-03 -6.26930371e-02  3.51873413e-02
 -9.95311141e-03 -9.80223417e-02 -1.38886869e-01 -4.07546423e-02
  3.18390573e-03  5.89821711e-02  6.55162558e-02  3.42412032e-02
  4.02887759e-04 -7.73418322e-02  4.30028923e-02 -3.36265564e-02
  1.77484266e-02 -4.65953425e-02 -6.30779862e-02  1.51065076e-02
  3.90937999e-02  3.74002964e-03  1.07656727e-02  1.16893817e-02
 -4.20510508e-02  1.73723251e-02  3.35693359e-02 -5.26402965e-02
  2.18269881e-02 -2.86805928e-02 -1.50596276e-01 -9.79093276e-03
 -3.95383537e-02  1.91766936e-02 -2.81685609e-02  5.93346134e-02
 -1.65857270e-03  5.28369844e-02 -5.18662063e-03  8.10757801e-02
  7.04058111e-02  1.14629015e-01 -1.29345506e-01 -1.02643389e-03
 -3.12413257e-02 -2.66091265e-02  1.15127787e-02 -6.59882128e-02
  3.03315502e-02  3.64005566e-02 -5.74868619e-02 -8.58898163e-02
 -7.13300854e-02 -8.46818183e-03  1.36017902e-02 -4.87853289e-02
  1.96946152e-02  7.99608082e-02 -6.14305064e-02  3.58656570e-02
 -5.56037873e-02 -4.23613470e-03 -8.23009294e-03  8.10822472e-02
 -3.90484370e-02  4.83243391e-02 -3.08272652e-02 -8.24867338e-02
  4.66592498e-02  5.41592166e-02 -4.86571640e-02 -3.03851459e-02
  4.62966673e-02  3.80500630e-02 -3.31582576e-02  1.25762388e-01
  4.66893381e-03  1.09024018e-01  4.89114225e-02 -2.90402733e-02
 -2.68172286e-02  1.28209358e-02  2.44199932e-02 -2.18401253e-02
  5.24411909e-03 -1.07803121e-01  1.43633795e-03 -8.79017631e-33
 -7.46585848e-03 -7.88497031e-02 -5.83258048e-02 -1.96125433e-02
  6.73370361e-02 -6.89593852e-02  2.87452862e-02  2.54364521e-03
  4.49787416e-02 -9.22325635e-05  6.84156939e-02 -1.21950842e-02
  4.02695835e-02 -3.72789204e-02  9.94887296e-03 -6.66534621e-03
  6.82444964e-03  4.71139066e-02  3.12877931e-02 -2.42841225e-02
  1.71851681e-03  4.66222279e-02  1.41494907e-02  1.11471871e-02
 -4.37964424e-02 -2.66564861e-02  3.33425812e-02  6.34689778e-02
 -8.23931620e-02 -4.80816439e-02  1.43394113e-01 -9.40986536e-03
 -1.06144063e-01  6.55170381e-02 -6.05831631e-02 -5.71371615e-02
  1.67181566e-02  9.46857631e-02  1.13438070e-02  5.13628349e-02
  9.62638780e-02 -2.75518186e-02 -5.50115518e-02  2.84647644e-02
 -1.34011013e-02 -7.48745948e-02  7.98610002e-02 -2.73413789e-02
 -9.71124228e-03 -8.33043735e-03  9.64197367e-02 -7.78876469e-02
 -5.90732805e-02  2.56492421e-02 -1.41678043e-02  9.40551385e-02
  7.23431632e-02  6.66975155e-02  2.88522267e-03 -4.88191582e-02
  1.71962865e-02 -4.14051674e-02 -5.68092475e-03  1.00938730e-01
  6.79909959e-02 -6.78055137e-02  5.01329661e-04  7.01882690e-02
  1.05458498e-02 -1.02716219e-02 -2.70685963e-02 -3.88333909e-02
  2.74513233e-02  2.84028240e-02  5.89947999e-02 -2.70283665e-03
 -6.34858683e-02  5.86538669e-03  4.56093997e-02  2.36815177e-02
  1.02680605e-02  5.31981662e-02  4.97335121e-02  1.37235904e-02
  2.87761725e-02 -8.63629878e-02  4.53639254e-02  1.79039706e-02
 -8.28201324e-02  3.41421105e-02 -3.62712853e-02  1.46947969e-02
 -5.91408536e-02  3.14963982e-02  5.13605960e-02 -6.26498107e-08
 -3.76957748e-03  4.75337841e-02 -6.08024783e-02  8.12276173e-03
  6.42823502e-02  4.23901007e-02  4.21209075e-02 -8.23924243e-02
 -5.12302555e-02  3.73274796e-02 -9.41981003e-02  3.17041241e-02
 -5.57639301e-02 -1.60019621e-02 -3.30191776e-02 -3.79722379e-02
  3.44034359e-02  8.02292768e-03 -2.23848764e-02 -5.11863083e-02
  9.80524346e-03 -7.23913983e-02  7.75284832e-03 -8.36851969e-02
 -8.91761016e-03 -4.64358972e-03  6.63638934e-02  8.58191177e-02
  3.05967517e-02 -4.78227325e-02 -1.34059610e-02 -7.83534199e-02
  7.37807751e-02 -7.69184604e-02 -7.46400505e-02  6.39311038e-03
 -4.47736271e-02 -2.09217574e-02  4.77142297e-02  9.70500931e-02
 -4.57803272e-02  4.33546677e-02 -3.39608975e-02  1.64826307e-02
 -4.53593694e-02 -2.24952903e-02  2.46531819e-03  4.87471111e-02
  9.95918512e-02  3.28995921e-02  7.00939354e-03 -8.06229860e-02
  8.13614950e-02 -1.16852745e-02 -5.92533834e-02  3.34603828e-04
 -5.32974005e-02  6.29229248e-02 -5.42321652e-02  1.93859134e-02
  4.63947374e-03  3.07543539e-02 -2.05304120e-02  1.00555224e-02]"
"pubkey::Pubkey,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
/// 1. [signer, writable] Payer
/// 2. [writable] Hello state account
/// 3. [] Clock sys var
pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let _payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;
    // Clock sysvar
    let sysvar_clock_pubkey = next_account_info(accounts_iter)?;

    let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;
    hello_state.is_initialized = true;
    hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;
    msg!(""Account initialized :)"");

    // Type casting [AccountInfo] to [Clock]
    let clock = Clock::from_account_info(&sysvar_clock_pubkey)?;
    // Getting timestamp
    let current_timestamp = clock.unix_timestamp;
    msg!(""Current Timestamp: {}"", current_timestamp);

    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748let clock = Clock::from_account_info(&sysvar_clock_pubkey)?;
let current_timestamp = clock.unix_timestamp;
12Now we pass the clock's sysvar public address via the clientTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  SYSVAR_CLOCK_PUBKEY,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";

(async () => {
  const programId = new PublicKey(
    ""77ezihTV6mTh2Uf3ggwbYF2NyGJJ5HHah1GrdowWJVD3""
  );

  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // Airdropping 1 SOL
  const feePayer = Keypair.generate();
  await connection.confirmTransaction(
    await connection.requestAirdrop(feePayer.publicKey, LAMPORTS_PER_SOL)
  );

  // Hello state account
  const helloAccount = Keypair.generate();

  const accountSpace = 1; // because there exists just one boolean variable
  const rentRequired = await connection.getMinimumBalanceForRentExemption(
    accountSpace
  );

  // Allocating space for hello state account
  const allocateHelloAccountIx = SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    lamports: rentRequired,
    newAccountPubkey: helloAccount.publicKey,
    programId: programId,
    space: accountSpace,
  });

  // Passing Clock Sys Var
  const passClockIx = new TransactionInstruction({
    programId: programId,
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: feePayer.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: helloAccount.publicKey,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: SYSVAR_CLOCK_PUBKEY,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(allocateHelloAccountIx, passClockIx);

  const txHash = await connection.sendTransaction(transaction, [
    feePayer,
    helloAccount,
  ]);

  console.log(`Transaction succeeded. TxHash: ${txHash}`);
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374(async () => {
  const programId = new PublicKey(
 ","[ 8.67797341e-03  2.49218661e-02 -1.03450283e-01 -5.32503538e-02
 -3.76585349e-02 -2.94856597e-02  1.00397669e-01  7.20936283e-02
  6.72396692e-03  1.07980873e-02 -7.98097346e-03 -2.85024736e-02
 -2.13853065e-02  5.00852708e-03  6.77205622e-02 -2.46604923e-02
 -1.01990983e-01 -4.86693755e-02  2.66701486e-02  1.69888344e-02
  2.95027979e-02  9.26515728e-04 -3.55737172e-02  8.56399983e-02
 -2.64806673e-02 -6.18737787e-02  4.20847572e-02  5.86494952e-02
  6.45767152e-03 -5.28612621e-02  6.69432878e-02 -4.71563451e-02
  3.57750314e-03  1.71351731e-02  7.49657303e-02  9.38409269e-02
  9.99993831e-02 -7.45720938e-02 -1.05955387e-02 -5.54536507e-02
 -1.75690260e-02 -8.06703698e-03 -6.88474104e-02  3.43485479e-03
  6.27262667e-02  3.00169680e-02 -8.65766685e-03  5.35072759e-02
 -3.86521816e-02  6.74184635e-02 -3.51414718e-02  7.97116314e-04
 -1.59072727e-02 -7.68527063e-03  9.93723702e-03  1.05112322e-01
  3.05216871e-02  1.90866343e-03 -1.27595139e-03  2.28138752e-02
 -7.63856024e-02  2.79142577e-02 -2.82341223e-02 -3.34017985e-02
  4.30145394e-03  7.98210427e-02 -1.84771675e-03 -1.28129525e-02
  8.51619802e-03 -4.13580313e-02 -2.30877865e-02 -3.24245170e-02
 -5.70407733e-02 -2.25154180e-02 -9.79259908e-02 -3.53454612e-02
 -3.94003652e-02  1.23084476e-02 -9.70833376e-03 -9.46308747e-02
 -4.10225429e-02 -3.10245771e-02 -2.63394080e-02  5.24645634e-02
  2.91831382e-02  8.84293299e-03  2.32452285e-02 -7.33361542e-02
  6.26066476e-02  5.32042310e-02 -2.33215257e-03  3.74222770e-02
 -3.57672088e-02 -5.66907972e-02  1.94993272e-01  4.25479896e-02
  7.56797045e-02  1.51951285e-02  1.01955365e-02  6.97374344e-02
 -7.26439878e-02  5.61772361e-02  2.14164723e-02  1.74758695e-02
  1.00191673e-02  8.74347147e-03  5.83120622e-03 -1.94678251e-02
 -9.52360183e-02 -3.33611257e-02  1.60258301e-02  1.16203852e-01
  8.73998627e-02  8.85156170e-03  3.84188816e-02  6.98286965e-02
 -3.90545391e-02  8.34554620e-03  5.61514497e-02  3.92818451e-03
  7.27659836e-02  3.56941931e-02 -5.41073345e-02  4.95999213e-03
 -7.39891604e-02 -3.30910496e-02  1.93291809e-02  3.08004279e-33
 -1.06223375e-02 -1.11771869e-02 -2.49382351e-02  1.30380709e-02
  2.93788221e-02  1.70730297e-02  1.16430391e-02  1.28318798e-02
 -6.04827255e-02  3.46705243e-02 -3.39963585e-02 -1.31521881e-01
 -4.45486652e-03 -6.52212948e-02  7.03492761e-02 -4.16855998e-02
  4.35185134e-02  6.29298091e-02  4.36688140e-02  7.76980743e-02
  6.94616735e-02  9.14348755e-03 -7.61209950e-02 -4.80497219e-02
  2.01231260e-02  6.40795901e-02 -4.18425500e-02 -6.25184597e-03
 -3.01974379e-02 -1.32787516e-02  7.31677860e-02 -1.44265266e-02
 -3.66129875e-02  2.85203755e-02  9.51306596e-02 -1.12140477e-01
  2.58581247e-02  5.27046900e-03 -2.28626188e-02 -7.92456046e-02
  9.98675898e-02 -1.46530773e-02 -2.06792876e-02  1.79413129e-02
 -3.06345932e-02 -4.50445898e-02 -3.70177850e-02 -1.55654214e-02
  4.42548357e-02  4.39629704e-02  1.89206451e-02  2.16617696e-02
 -9.82354432e-02 -9.14945677e-02  3.75686362e-02 -4.12817597e-02
  8.92141648e-03 -9.19639890e-04 -2.72000264e-02  7.08953291e-02
  3.95788485e-03  4.48519327e-02 -3.49484268e-03 -2.07389761e-02
 -6.63305353e-03 -7.17380941e-02 -6.93462119e-02 -4.57233042e-02
  1.27329454e-01 -3.57426591e-02 -4.76987846e-02  3.31858583e-02
  9.42999776e-03  3.51574197e-02 -1.95104703e-02  2.40852926e-02
  8.24114587e-03 -5.86607354e-03 -5.02851419e-02 -8.78475383e-02
  1.27894776e-02  4.49493490e-02 -8.03039595e-02  6.18475042e-02
  1.09386696e-02  5.43648377e-02  3.13892053e-03 -7.20429979e-03
 -6.36236221e-02  1.45890834e-02  3.39585468e-02 -1.01409435e-01
  1.18560474e-02 -2.30664294e-02 -7.00844601e-02 -4.28439222e-33
  4.57584672e-02 -1.20819129e-01 -3.32566164e-02  1.42872352e-02
 -7.23945498e-02 -2.95376275e-02  2.81294882e-02 -6.68320656e-02
  1.27088688e-02  6.67814314e-02 -1.08122174e-02  2.24413294e-02
  2.92202476e-02  2.03122478e-02  6.53580502e-02  1.15263676e-02
  5.09387488e-03 -3.61048654e-02 -2.86614010e-03  2.10612337e-03
  2.13438179e-02  8.41276944e-02  8.62076059e-02 -2.28631496e-02
  2.96922140e-02  3.41392569e-02 -1.72637273e-02  8.82803947e-02
  1.55861853e-02  3.70172784e-02 -3.28262635e-02 -1.94816887e-02
  3.38617782e-03  7.48586282e-02 -2.37096683e-03 -1.03486672e-01
  4.76749614e-02  1.89210183e-03 -2.60840729e-03 -8.11006036e-03
  1.14107855e-01 -2.81934403e-02 -7.49174580e-02 -4.62823622e-02
  2.91856844e-03  5.62753826e-02  6.53437972e-02  1.20432330e-02
 -3.19824852e-02  2.57825907e-02  4.66191098e-02 -1.05185233e-01
  3.55911963e-02 -2.67953090e-02 -5.44724055e-02 -5.14918938e-02
  1.17622860e-01 -1.40547544e-01  4.55385260e-02 -1.62299890e-02
  6.60508126e-02 -7.71793276e-02  3.58306505e-02  5.46926260e-02
  5.61976470e-02 -7.29310066e-02 -4.55189086e-02 -1.39650926e-02
  8.02243650e-02 -3.57594080e-02  2.50882865e-03 -3.05857398e-02
  2.22992655e-02  3.63470577e-02  6.46613464e-02  7.95098841e-02
 -4.44668606e-02 -2.25376301e-02  1.01236803e-02  2.71715187e-02
 -1.17638402e-01  8.02229717e-03 -4.83939834e-02  6.09371532e-03
 -3.49575467e-02 -4.99445088e-02  8.27589631e-02  4.51863743e-02
 -3.64289843e-02 -6.16873577e-02 -3.08494177e-02  3.87582220e-02
  1.75955705e-02  1.47768380e-02 -1.01931859e-02 -5.41302327e-08
 -6.12090155e-02 -7.12474734e-02  5.67107461e-03  8.63673836e-02
  3.43561321e-02 -5.68178520e-02 -6.10735081e-03 -8.05797055e-02
  1.75377000e-02 -7.31908828e-02 -7.52394497e-02  3.86077613e-02
  4.05321503e-03 -1.00356176e-01  3.24962251e-02 -4.97397445e-02
 -2.83478145e-02 -1.83625128e-02 -6.45818785e-02 -9.90841985e-02
  9.95742902e-03  6.86474843e-03 -3.38878557e-02 -1.33370366e-02
 -4.16830890e-02 -1.40746785e-02  8.09503570e-02  9.44886953e-02
  8.08655024e-02  1.26788346e-02  5.06342500e-02  3.26945260e-02
  2.01622881e-02 -1.89139284e-02 -7.31697828e-02 -2.80952286e-02
  3.07746939e-02  6.86244667e-02  3.95450443e-02  1.73581447e-02
 -5.87045588e-03 -3.29302065e-02 -1.08456798e-01  5.44636231e-03
 -4.10612440e-03  2.09438708e-02 -2.92073600e-02 -8.13500863e-03
  2.99410857e-02 -2.78503709e-02 -3.49353477e-02 -9.21797380e-03
  9.16497111e-02  4.40078080e-02 -8.39515030e-02 -6.34731399e-03
  1.65413246e-02 -6.28501922e-02 -2.95369662e-02  4.67277691e-02
 -5.59220416e-03  7.01279044e-02 -5.65545820e-03 -2.17858497e-02]"
"  ""77ezihTV6mTh2Uf3ggwbYF2NyGJJ5HHah1GrdowWJVD3""
  );

  // Passing Clock Sys Var
  const passClockIx = new TransactionInstruction({
    programId: programId,
    keys: [
      {
        isSigner: false,
        isWritable: true,
        pubkey: helloAccount.publicKey,
      },
      {
        is_signer: false,
        is_writable: false,
        pubkey: SYSVAR_CLOCK_PUBKEY,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(passClockIx);

  const txHash = await connection.sendTransaction(transaction, [
    feePayer,
    helloAccount,
  ]);

  console.log(`Transaction succeeded. TxHash: ${txHash}`);
})();
1234567891011121314151617181920212223242526272829303132# Accessing Clock directly inside an instructionLet's create the same instruction, but without expecting the SYSVAR_CLOCK_PUBKEY from the client side.RustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    clock::Clock,
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    pubkey::Pubkey,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
/// 1. [signer, writable] Payer
/// 2. [writable] Hello state account
pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let _payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;

    // Getting clock directly
    let clock = Clock::get()?;

    let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;
    hello_state.is_initialized = true;
    hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;
    msg!(""Account initialized :)"");

    // Getting timestamp
    let current_timestamp = clock.unix_timestamp;
    msg!(""Current Timestamp: {}"", current_timestamp);

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546let clock = Clock::get()?;
let current_timestamp = clock.unix_timestamp;
12The client side instruction, now only needs to pass the state and payer accounts.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";

(async () => {
  const programId = new PublicKey(
    ""4ZEdbCtb5UyCSiAMHV5eSHfyjq3QwbG3yXb6oHD7RYjk""
  );

  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // Airdropping 1 SOL
  const feePayer = Keypair.generate();
  await connection.confirmTransaction(
    await connection.requestAirdrop(feePayer.publicKey, LAMPORTS_PER_SOL)
  );

  // Hello state account
  const helloAccount = Keypair.generate();

  const accountSpace = 1; // because there exists just one boolean variable
  const rentRequired = await connection.getMinimumBalanceForRentExemption(
    accountSpace
  );

  // Allocating space for hello state account
  const allocateHelloAccountIx = SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    lamports: rentRequired,
    newAccountPubkey: helloAccount.publicKey,
    programId: programId,
    space: accountSpace,
  });

  const initIx = new TransactionInstruction({
    programId: programId,
 ","[ 2.21590754e-02  2.54990679e-04 -5.90752251e-02 -1.00010019e-02
 -5.10220714e-02 -2.23328657e-02  9.34801400e-02  4.33196239e-02
  9.98070836e-02  3.07465121e-02 -9.97995771e-03  2.30499376e-02
 -4.59587090e-02 -4.44696471e-02  7.88099095e-02 -3.42390276e-02
  2.98723020e-03 -6.00685999e-02 -3.85549641e-03  3.12798028e-03
  3.24422047e-02 -3.44881788e-02  8.24296698e-02  7.17002749e-02
  2.83228140e-02 -8.44325870e-02 -8.01289827e-03  5.47870658e-02
  3.85921039e-02  5.05007152e-03  7.77111501e-02  2.01752428e-02
 -7.77265951e-02  3.00819613e-02  3.22256275e-02  1.14383914e-01
  6.41390681e-02 -4.40417454e-02  6.54166145e-03 -2.80876160e-02
 -3.95040996e-02  5.64957447e-02 -7.31795877e-02  7.66489208e-02
  5.76403774e-02 -6.58466155e-03 -2.76460331e-02  1.77373663e-02
 -3.70840281e-02  1.35639799e-03 -2.57888958e-02  4.34315801e-02
 -2.14840751e-03 -5.98058365e-02 -5.92224859e-02  8.16618428e-02
 -4.34100395e-03  8.96066055e-03  5.26078567e-02  1.61400642e-02
 -7.44918957e-02  4.12066653e-02  4.03188169e-02 -7.62272626e-02
 -5.16650192e-02  7.32795820e-02  2.98322849e-02 -4.75281551e-02
  2.32310742e-02 -2.54603494e-02 -5.22087142e-03 -4.90583368e-02
 -6.90845698e-02  5.01183234e-02 -9.11488086e-02 -2.08170656e-02
  1.86097361e-02  1.82414167e-02 -5.04639335e-02 -5.97507954e-02
 -8.34985524e-02 -5.80988601e-02  2.87209656e-02  5.88341383e-03
  3.09118107e-02  9.53693129e-03 -1.48393097e-03  3.36420387e-02
  2.83648223e-02 -5.58583019e-03 -2.05230787e-02  4.09167036e-02
 -8.98269787e-02 -4.61379774e-02  1.87043935e-01  2.32335329e-02
  3.78142521e-02  2.87478063e-02 -7.40852132e-02  3.28298137e-02
 -1.03135305e-02  5.97324893e-02 -6.55617937e-02  7.54437316e-03
  8.44252184e-02  4.56451699e-02  3.76363099e-02 -7.04921037e-02
 -9.28319544e-02 -3.90997455e-02  1.29729332e-02  1.16242431e-01
  4.63160016e-02  4.81549986e-02  2.96370834e-02  9.03175920e-02
 -6.67563230e-02  3.64567712e-02  5.57279997e-02  1.93016678e-02
  6.07109144e-02  2.58498415e-02 -5.46349846e-02  2.82849707e-02
 -5.29649407e-02 -3.25677432e-02  1.22099398e-02  7.00022167e-33
 -6.93575069e-02  1.12181576e-02  3.11150658e-03  4.22792230e-03
  6.21210970e-03  3.52757573e-02 -3.30385938e-02 -2.98690097e-03
 -6.39989525e-02  7.72491544e-02 -9.51086357e-02 -1.87889397e-01
  1.76062323e-02 -3.14704329e-02  5.33788279e-02  3.46379019e-02
  8.80426902e-04  8.15311912e-03  6.79370612e-02  4.25861254e-02
  1.19912587e-02  4.13064584e-02 -9.49196145e-03 -4.99801226e-02
 -7.90525079e-02  4.50860197e-03 -9.64751765e-02 -1.43752974e-02
 -3.36377579e-03 -6.41329773e-03  3.02684158e-02 -1.47401942e-02
 -3.08908448e-02  1.00179844e-01  2.65461318e-02 -9.20723304e-02
 -2.53879279e-02 -6.13706484e-02  4.24602302e-03 -8.21846817e-03
  5.83382100e-02 -2.90177707e-02 -5.97002096e-02 -1.63720269e-02
 -5.48733100e-02 -5.28063364e-02 -5.20264683e-03  8.60012695e-03
  1.11976735e-01  2.93221064e-02 -4.94218580e-02  7.85444453e-02
  4.88920920e-02 -1.45439416e-01  1.48499468e-02 -2.59860046e-02
  8.41508582e-02 -2.44282894e-02 -9.66421887e-03  6.88832924e-02
 -2.87639406e-02 -1.07061286e-02 -3.69620249e-02 -2.86085382e-02
  3.23333554e-02 -5.86037822e-02 -1.83577016e-02 -9.01281601e-04
 -9.51451808e-03 -5.12573309e-02 -4.89170961e-02 -1.10780597e-02
 -1.05726812e-02  6.03324510e-02 -2.45808531e-02  6.78598735e-05
  2.32050661e-02 -6.09024940e-03 -5.45813516e-03 -7.59933665e-02
  5.90602197e-02  2.14736257e-02 -2.07056403e-02  3.87817696e-02
  1.28238956e-02  6.56277612e-02 -4.06192057e-02 -2.22034156e-02
  2.16944348e-02  2.06393078e-02  3.96044180e-02 -9.40653533e-02
 -6.45783022e-02  5.36965439e-03 -2.66048266e-03 -9.55841183e-33
  2.65900064e-02 -2.02508681e-02 -7.53956661e-02  2.72045583e-02
 -8.18823278e-02 -5.64759737e-03 -2.69008297e-02 -9.67229679e-02
 -3.85597385e-02 -6.71771029e-03  8.12337995e-02  1.38946837e-02
 -8.46708342e-02  4.60453425e-03  3.57669741e-02 -3.74733061e-02
  5.08262292e-02 -6.76408736e-03  6.26837984e-02 -2.96493117e-02
  2.93388739e-02  1.08568259e-01 -3.91743844e-04  3.55623551e-02
  2.26420201e-02 -5.14623942e-03 -4.66442257e-02  1.03971422e-01
  1.64456442e-02 -1.18268328e-02 -2.30633486e-02  3.67046110e-02
  7.16742426e-02  4.35179770e-02  2.27262732e-02 -1.22612946e-01
  3.96174379e-02  1.97652029e-03 -4.49138544e-02  3.59382555e-02
  5.44255450e-02 -1.87092666e-02 -3.89806256e-02 -4.85387444e-02
  1.54326493e-02  6.91101179e-02  4.87990398e-03 -5.29888757e-02
  1.78696029e-02  6.35869429e-02  2.72429939e-02 -2.15333737e-02
  4.49266359e-02 -9.26285610e-03  1.89872179e-02 -1.40772974e-02
  4.09576520e-02 -1.42254159e-01  1.08839631e-01 -6.16269670e-02
  4.54016179e-02 -3.89296003e-02  6.68738782e-02 -3.16877849e-02
  7.97273740e-02  2.41372851e-03 -5.27684391e-02  2.22553182e-02
  5.20356819e-02  3.41980718e-02 -2.74815201e-03 -1.40025243e-02
 -2.55463496e-02 -2.41861455e-02  2.40701046e-02  9.19068009e-02
 -5.71781993e-02 -4.92014214e-02 -4.29333448e-02 -2.25877371e-02
 -1.84607990e-02 -5.63117452e-02 -2.17380654e-02  1.41924638e-02
  8.11668579e-03 -6.58295453e-02 -3.44794095e-02  5.98590523e-02
 -5.41973002e-02 -7.27504045e-02  2.94673406e-02 -2.54062489e-02
 -3.96900438e-02  2.84036919e-02 -7.10157445e-03 -6.71253062e-08
 -1.11553622e-02  5.91180148e-03 -4.62419949e-02 -1.86690520e-02
  6.38300702e-02 -3.68191823e-02  5.29886456e-05 -1.26411334e-01
 -3.70058157e-02 -1.27394591e-02 -9.52850208e-02 -3.21911722e-02
  1.01204393e-02 -8.16945508e-02 -6.66568056e-03 -1.80620905e-02
 -9.22724530e-02 -4.43923622e-02 -8.02162383e-03 -6.10995889e-02
  1.24676367e-02 -1.10358382e-02 -7.23462692e-03 -4.00164211e-03
  1.30576706e-02  2.30723117e-02  7.82538652e-02  1.70233727e-01
  6.70093000e-02  2.80210674e-02 -9.94074438e-03 -1.68905593e-02
  2.71644183e-02 -4.67567937e-03 -1.38918355e-01 -1.43798264e-02
  2.03238521e-02  2.47476883e-02  7.74523243e-02 -4.21300530e-02
 -5.20451646e-03 -9.42212809e-03 -8.03771541e-02  2.49943547e-02
 -1.50074353e-02  3.55253145e-02 -2.19241828e-02 -3.92904086e-03
  2.12419545e-03 -2.70661488e-02  9.15447157e-03  1.92490835e-02
  4.82319668e-03  7.20171183e-02  6.86846091e-04  7.11735385e-03
 -2.33396720e-02 -8.13738182e-02  1.89381372e-02  4.65654135e-02
  9.02914442e-03  2.46552881e-02  2.93902420e-02 -1.16622791e-01]"
"  keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: feePayer.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: helloAccount.publicKey,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(allocateHelloAccountIx, initIx);

  const txHash = await connection.sendTransaction(transaction, [
    feePayer,
    helloAccount,
  ]);

  console.log(`Transaction succeeded. TxHash: ${txHash}`);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667(async () => {
  const programId = new PublicKey(
    ""4ZEdbCtb5UyCSiAMHV5eSHfyjq3QwbG3yXb6oHD7RYjk""
  );

  // No more requirement to pass clock sys var key
  const initAccountIx = new TransactionInstruction({
    programId: programId,
    keys: [
      {
        isSigner: false,
        isWritable: true,
        pubkey: helloAccount.publicKey,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(initAccountIx);

  const txHash = await connection.sendTransaction(transaction, [
    feePayer,
    helloAccount,
  ]);

  console.log(`Transaction succeeded. TxHash: ${txHash}`);
})();
123456789101112131415161718192021222324252627# How to change account sizeYou can change a program owned account's size with the use of realloc. realloc can resize an account up to 10KB. When you use realloc to increase the size of an account, you must transfer lamports in order to keep that account rent-exempt.RustPress </> button to view full sourceuse {
  crate::{
      instruction::WhitelistInstruction,
      state::WhiteListData,
  },
  borsh::{BorshDeserialize, BorshSerialize},
  solana_program::{
      account_info::{next_account_info, AccountInfo},
      entrypoint::ProgramResult,
      msg,
      program::invoke_signed,
      program::invoke,
      program_error::ProgramError,
      pubkey::Pubkey,
      sysvar::Sysvar,
      sysvar::rent::Rent,
      system_instruction,
  },
  std::convert::TryInto,
};

pub fn process_instruction(
  _program_id: &Pubkey,
  accounts: &[AccountInfo],
  input: &[u8],
) -> ProgramResult {
  // Length = BOOL + VEC + Pubkey * n (n = number of keys)
  const INITIAL_ACCOUNT_LEN: usize = 1 + 4 + 0 ;
  msg!(""input: {:?}"", input);

  let instruction = WhitelistInstruction::try_from_slice(input)?;

  let accounts_iter = &mut accounts.iter();

  let funding_account = next_account_info(accounts_iter)?;
  let pda_account = next_account_info(accounts_iter)?;
  let system_program = next_account_info(accounts_iter)?;

  match instruction {
    WhitelistInstruction::Initialize => {
      msg!(""Initialize"");

      let (pda, pda_bump) = Pubkey::find_program_address(
          &[
            b""customaddress"",
            &funding_account.key.to_bytes(),
     ","[ 1.89005192e-02  3.65902968e-02 -7.93737620e-02  5.28673045e-02
 -5.80710694e-02  4.39930148e-02  8.68406966e-02  4.62103970e-02
  9.17151123e-02  5.07595837e-02  1.30972844e-02 -5.60120530e-02
 -2.74420343e-02 -1.01843681e-02  4.70962934e-02 -8.07711203e-03
 -4.32122126e-02 -9.89110023e-02 -4.45140079e-02  2.84837876e-02
  2.26582610e-03 -1.28728420e-01  2.35278737e-02  9.71113518e-03
 -5.97411580e-03 -7.20977038e-02 -1.00205850e-03 -6.00907300e-03
 -2.56011542e-02 -1.49061382e-02  4.31172401e-02 -1.33011965e-02
 -3.13125476e-02 -2.40666680e-02  1.68152358e-02  1.11420512e-01
  8.66307467e-02 -3.99585478e-02  1.23549597e-02 -2.07004230e-02
  4.11662459e-03  3.31976637e-02 -7.68978819e-02  4.57873493e-02
  1.21778838e-01 -3.49864811e-02 -6.67763725e-02  1.32743502e-02
 -3.14733498e-02  3.09197102e-02 -2.23944895e-02  8.41411054e-02
 -4.36241589e-02  3.88065353e-02 -2.33753230e-02  1.24694392e-01
 -1.43982675e-02  4.70535606e-02  4.18143831e-02 -2.71930732e-02
  2.41899192e-02 -3.99906598e-02  1.21890102e-02 -4.57896590e-02
 -6.23450391e-02  8.00851434e-02  3.13904248e-02 -6.63227588e-02
 -1.72647592e-02 -4.01804559e-02  1.39121916e-02  1.38082970e-02
 -4.52974029e-02 -8.53814557e-03 -8.90509784e-02 -7.14176968e-02
 -3.64768989e-02  2.19628979e-02 -7.36680776e-02  2.91087944e-02
 -4.92828637e-02 -6.74447119e-02  2.59538032e-02 -3.21206860e-02
  2.85423957e-02  1.08184889e-01 -2.94793006e-02 -2.51309928e-02
 -2.60983743e-02 -1.21064046e-02 -2.01668311e-02  5.93098253e-02
 -4.43983302e-02 -1.55419633e-02  1.38033897e-01  5.36958799e-02
  1.07052084e-02  5.74676655e-02 -4.63123955e-02  3.01399250e-02
  9.77814384e-03  4.26892284e-03 -9.90177169e-02  3.23941112e-02
  8.71782452e-02  2.13250853e-02  4.56383824e-02 -1.03788018e-01
 -6.18464686e-02  2.12797001e-02  5.49193763e-04  1.21615238e-01
  4.29151207e-02  3.40070091e-02 -2.71565933e-02  1.33597046e-01
 -6.74282908e-02  1.97944194e-02  1.12915970e-01  1.04043381e-02
  4.64382917e-02  2.79126130e-02 -6.52464181e-02 -3.85954641e-02
 -7.17721805e-02 -3.27724069e-02  6.76452070e-02  1.12873554e-32
 -2.76013762e-02 -1.01504354e-02  5.10377716e-03 -1.49259921e-02
  4.35942709e-02  1.96329989e-02  4.02685702e-02  7.74842920e-03
 -5.25504462e-02 -3.85950767e-02 -6.57851845e-02 -1.24796040e-01
 -1.34609165e-02 -8.04045275e-02  1.37533834e-02  1.23783918e-02
 -1.31638851e-02  2.01449171e-02  1.04007691e-01 -6.16528559e-03
 -1.37935616e-02 -2.35837325e-02  3.21681462e-02 -1.31475395e-02
 -3.29819471e-02 -5.72781451e-03 -5.84305525e-02 -7.91430287e-03
 -7.65815901e-04 -7.91212253e-04  4.32116278e-02  5.56317493e-02
 -8.54853839e-02  1.06729977e-01  1.54515859e-02 -3.89945395e-02
 -5.66609241e-02 -5.59943495e-03 -9.08248220e-03 -2.91120391e-02
  2.14208383e-02 -2.93310564e-02 -6.33905083e-02  4.32190299e-03
 -1.07746705e-01 -7.90865123e-02  3.96992154e-02 -4.44678664e-02
  8.95312056e-02  4.21481244e-02 -7.17197806e-02  5.17443903e-02
 -5.10691255e-02 -1.18501909e-01  1.07658040e-02 -4.67745773e-02
  6.62593096e-02 -3.44268493e-02 -3.95748988e-02  6.15048744e-02
 -2.37652902e-02 -7.31443018e-02  1.30348448e-02 -1.19025225e-03
  4.16647978e-02 -8.00245032e-02 -9.99509022e-02 -1.33185275e-02
 -4.38972889e-03 -5.30406982e-02  1.14371870e-02 -5.28865345e-02
 -2.07537953e-02  6.69817924e-02 -2.00048983e-02  2.68586781e-02
  1.40521787e-02  3.57503188e-03 -1.36144236e-02 -6.80053607e-02
  5.82260340e-02  3.99138518e-02 -2.08924115e-02  7.94890523e-02
  2.93786209e-02  1.27455771e-01 -2.27842946e-02 -5.03923791e-03
  6.24530055e-02  3.36319208e-02 -1.00672245e-02 -3.40481624e-02
  3.79785220e-03 -6.54949173e-02 -5.81408627e-02 -1.25450800e-32
  5.27602732e-02 -3.26875076e-02 -9.64161605e-02  4.36884314e-02
 -5.16370535e-02  5.02091758e-02 -3.35055068e-02 -3.49488407e-02
 -1.47285210e-02  1.84599683e-02  5.02784699e-02  1.79831982e-02
  7.37347640e-03  2.33691931e-03  2.77697276e-02 -5.24595529e-02
  4.91294973e-02 -4.81547527e-02  4.56801355e-02 -2.70775426e-02
  3.12153287e-02  2.14032345e-02 -3.84426974e-02  4.94455248e-02
 -5.16962409e-02 -5.62405272e-04 -6.28714710e-02  7.58161917e-02
 -1.76518857e-02 -3.19606736e-02 -3.15748379e-02 -2.98150838e-03
 -1.78000778e-02  9.32466015e-02  4.73516025e-02 -9.21536982e-02
  7.32654333e-02  1.99394263e-02 -1.29309958e-02  4.93481494e-02
  4.82091159e-02 -5.22883162e-02 -5.46417497e-02 -5.67860231e-02
  1.54245431e-02  1.87578599e-03 -3.06556206e-02 -3.21645811e-02
  1.57785676e-02  8.43590125e-02  3.01487725e-02 -4.95550483e-02
  4.06178124e-02 -1.02845104e-02 -4.20115888e-02  7.70847779e-03
  4.78694178e-02 -1.17731795e-01  1.35758638e-01 -4.39895354e-02
  1.44513380e-02 -6.36461526e-02  1.10043354e-01  4.68608504e-03
  7.90721253e-02 -4.34946269e-02 -4.87805642e-02 -6.62550470e-03
  7.17481449e-02  1.33067742e-02 -2.25371923e-02  7.89087359e-03
 -2.66940929e-02  2.25685257e-02  3.77784744e-02 -1.45823592e-02
 -4.09680279e-03 -5.04188724e-02  2.93503962e-02  1.07274940e-02
  1.83074642e-02  4.69337450e-03  5.19852433e-03 -5.07323481e-02
 -2.18162197e-03 -2.26300047e-03  6.14860542e-02 -3.94335249e-03
 -3.84240039e-02 -2.52653249e-02 -1.88615397e-02  1.58693911e-05
 -9.61902738e-02  2.48946436e-03  4.99466388e-03 -6.62579467e-08
 -5.82808293e-02  2.56422851e-02 -8.03576782e-02  3.28210485e-03
  9.17167775e-03 -4.52359878e-02  1.87030248e-02 -1.04917094e-01
  3.85484546e-02 -8.10095966e-02 -6.00655451e-02 -3.11917486e-03
  2.90948413e-02 -5.37748560e-02 -4.51708958e-02 -3.97160277e-02
 -5.00804447e-02 -2.11965255e-02  1.88125763e-03 -1.47516737e-02
  3.14253680e-02  2.97683524e-04 -9.14382457e-04  9.18494258e-03
  4.22079153e-02  2.82665733e-02  1.32416636e-01  1.76691413e-01
  4.22421247e-02  4.02818508e-02 -5.07367998e-02 -9.47835948e-03
  5.75442128e-02 -2.79805660e-02 -7.91619793e-02 -5.00043146e-02
  2.07154527e-02  1.53696956e-03  5.49549125e-02  2.28593238e-02
  6.14578016e-02  1.84265953e-02 -8.96435529e-02  4.01537158e-02
 -4.73932289e-02  4.28065993e-02 -2.75346600e-02  3.25300768e-02
  1.62391178e-02  2.39899084e-02  2.32401444e-03  6.55679544e-03
  4.62147258e-02  1.43561680e-02 -8.98333117e-02  4.06912714e-02
  6.45403145e-03 -3.27622518e-02 -1.06463162e-02  2.32625399e-02
  5.80279753e-02 -8.19928292e-03 -5.19431336e-03 -7.92649388e-02]"
"    ],
          _program_id,
      );

      let signers_seeds: &[&[u8]; 3] = &[
          b""customaddress"",
          &funding_account.key.to_bytes(),
          &[pda_bump],
      ];
      
      if pda.ne(&pda_account.key) {
          return Err(ProgramError::InvalidAccountData);
      }

      let lamports_required = Rent::get()?.minimum_balance(INITIAL_ACCOUNT_LEN);
      let create_pda_account_ix = system_instruction::create_account(
          &funding_account.key,
          &pda_account.key,
          lamports_required,
          INITIAL_ACCOUNT_LEN.try_into().unwrap(),
          &_program_id,
      );

      invoke_signed(
          &create_pda_account_ix,
          &[
              funding_account.clone(),
              pda_account.clone(),
              system_program.clone(),
          ],
          &[signers_seeds],
      )?;
      
      let mut pda_account_state = WhiteListData::try_from_slice(&pda_account.data.borrow())?;

      pda_account_state.is_initialized = true;
      pda_account_state.white_list = Vec::new();
      pda_account_state.serialize(&mut &mut pda_account.data.borrow_mut()[..])?;
      Ok(())
    }
    WhitelistInstruction::AddKey { key } => {
      msg!(""AddKey"");

      let mut pda_account_state = WhiteListData::try_from_slice(&pda_account.data.borrow())?;
      
      if !pda_account_state.is_initialized {
          return Err(ProgramError::InvalidAccountData);
      }

      let new_size = pda_account.data.borrow().len() + 32;

      let rent = Rent::get()?;
      let new_minimum_balance = rent.minimum_balance(new_size);
      
      let lamports_diff = new_minimum_balance.saturating_sub(pda_account.lamports());
      invoke(
          &system_instruction::transfer(funding_account.key, pda_account.key, lamports_diff),
          &[
              funding_account.clone(),
              pda_account.clone(),
              system_program.clone(),
          ],
      )?;

      pda_account.realloc(new_size, false)?;

  ","[-4.02727984e-02  5.18881604e-02 -1.02875717e-01 -3.40318009e-02
 -5.91010563e-02 -6.35521114e-02  3.62963602e-02  7.70498514e-02
  1.00529203e-02  2.60477830e-02  8.15274939e-02 -9.10323858e-02
  2.52599642e-02 -5.27130216e-02  2.07814258e-02  4.99999337e-02
 -8.46527815e-02 -5.50930686e-02 -4.89835534e-03  2.90575507e-03
  3.21453884e-02 -2.66942643e-02  4.90939710e-03  1.36245731e-02
  1.66263208e-02 -7.98279792e-02  4.17481512e-02  4.94505987e-02
  1.59424338e-02 -1.91318765e-02  8.29841197e-02  4.35486473e-02
  1.25481337e-02 -1.88939471e-03  1.63596347e-01  1.12327889e-01
 -2.11726800e-02 -6.43538907e-02 -5.09419367e-02  7.89828598e-03
 -1.59406231e-03  9.60827712e-03 -2.25666575e-02  3.33577022e-02
 -7.16760680e-02  6.46924321e-03 -5.33660278e-02  8.12521651e-02
  5.47124185e-02 -6.10865653e-03  1.08694229e-02 -1.49708157e-02
 -7.90123269e-02 -6.84138481e-03 -3.39681730e-02  5.66596463e-02
  5.01359701e-02  1.54132152e-03 -2.22460344e-03 -2.11930349e-02
  1.58508793e-02  5.91277629e-02  1.11577995e-02 -4.42829579e-02
  5.05011808e-03  5.45467064e-02 -3.38325799e-02  1.48449400e-02
 -2.99528558e-02  1.04590030e-02 -1.13370726e-02 -1.73083283e-02
 -4.20906357e-02  5.24706990e-02 -1.60422213e-02  2.18800865e-02
 -5.14137931e-02  6.83233812e-02  2.91090943e-02 -1.33006573e-01
 -1.08214296e-01 -3.58906039e-03  1.53746447e-02  4.64799292e-02
  3.66586335e-02  5.42239770e-02 -6.06610440e-03 -4.94528115e-02
  1.12137176e-01  6.57037050e-02  4.32806984e-02  1.85214654e-02
 -2.32242886e-02 -2.18565669e-02  5.51576875e-02  6.76677823e-02
  7.44268298e-02 -7.69250020e-02 -7.12963641e-02  8.79550949e-02
 -6.69457912e-02 -9.36321821e-03 -2.13560760e-02  2.92307958e-02
  3.87950540e-02  6.01280946e-03  4.88155298e-02 -9.43100527e-02
 -3.48263197e-02  4.57019918e-02 -3.56308697e-03  5.61840534e-02
  5.28905094e-02  9.02599655e-03 -4.78801550e-03  3.44521180e-02
 -6.96678609e-02  1.43206799e-02 -3.54414247e-02 -1.65461395e-02
  6.95173666e-02 -3.60523053e-02 -5.19429781e-02 -6.23573698e-02
 -8.91995206e-02 -4.38917875e-02  5.96776139e-03 -1.91522835e-33
 -1.19942660e-03 -5.22207506e-02 -3.73489708e-02  4.41495366e-02
 -1.87373869e-02  9.23877209e-03  4.13124859e-02  6.43306226e-02
 -1.36786968e-01  2.84492336e-02  9.11878794e-03 -4.27866653e-02
 -3.37886368e-03  2.82523707e-02 -2.87030600e-02 -3.96159291e-02
  6.56337962e-02  5.83987795e-02  5.63752949e-02  3.14790197e-02
  4.40512113e-02 -2.20598653e-03  1.61237307e-02 -8.93542171e-02
  4.50334176e-02  5.52945957e-02 -8.15315545e-02  5.65149598e-02
  2.45273095e-02 -1.00469952e-02  3.00736204e-02 -3.91666107e-02
 -1.06721772e-02  2.24497658e-03  5.16652651e-02 -5.95371984e-02
 -8.08080193e-03 -2.05556508e-02 -9.09470767e-02 -2.28879042e-02
  6.39424399e-02  3.92370373e-02  3.79135273e-02 -3.58408503e-02
 -8.91326368e-03  4.61816750e-02  5.70281073e-02 -4.08186298e-03
  4.15896773e-02  1.93449669e-02 -4.43733148e-02  1.66279860e-02
 -1.16486169e-01 -2.77478108e-03 -7.76931047e-02 -9.75518823e-02
 -2.08081491e-02 -6.16840608e-02 -1.77634526e-02 -7.89670050e-02
  5.08741522e-03  6.80626258e-02  1.37323346e-02 -2.92202346e-02
  6.38600765e-03 -1.36909420e-02 -3.95873226e-02  5.43144345e-03
  6.15671463e-02 -6.15524687e-02 -2.48830975e-03 -2.81300936e-02
 -3.92490774e-02  4.86006811e-02 -8.56424719e-02 -8.98526460e-02
  3.61892879e-02  3.46171036e-02 -6.98751286e-02 -6.71812147e-02
  5.90358749e-02 -2.62906887e-02 -5.61590381e-02  4.54343520e-02
 -2.87685636e-02  5.72281033e-02  4.64942679e-03  1.03440536e-02
 -7.36700073e-02 -1.23229148e-02 -2.23744232e-02 -5.58495261e-02
 -5.18712157e-04 -4.95631099e-02 -3.40815634e-02 -1.78014201e-33
 -8.57245643e-03 -5.70726097e-02  2.18192264e-02 -7.18536973e-02
  2.04922464e-02  1.94881018e-02  6.63061962e-02 -2.53070761e-02
 -4.66803052e-02  2.89607737e-02 -2.91885585e-02  2.26612315e-02
  2.15360019e-02  1.60539970e-02  6.68550134e-02 -7.67771434e-03
 -8.99766833e-02  7.69775407e-03  9.30152647e-03  3.73092368e-02
 -4.64462712e-02  1.54927284e-01 -4.68368363e-03  9.58147421e-02
 -1.95781458e-02  1.24389632e-03 -5.89137711e-02  7.84330368e-02
 -2.38546859e-02 -2.14988030e-02  6.55794442e-02  3.73452604e-02
 -1.48889065e-01  8.15910697e-02 -2.20665075e-02 -1.33129060e-01
  3.96943130e-02  3.72406878e-02 -8.80244374e-02  4.07658815e-02
  1.53367907e-01 -5.05181104e-02 -1.84966922e-02  3.50510539e-03
  5.22331940e-03 -2.70328514e-04  4.56412584e-02  2.12089978e-02
 -5.11010773e-02  4.46653664e-02 -1.18163938e-03 -9.55490768e-02
  4.87379022e-02  2.85134353e-02 -8.74407496e-03  7.11213648e-02
  1.54722676e-01 -1.97152607e-02  1.18438154e-01 -3.19404081e-02
  2.42659692e-02 -6.28507286e-02  2.71104705e-02  4.52570915e-02
 -1.92766842e-02 -4.34971824e-02 -2.78811175e-02  3.99848297e-02
  1.18202791e-02  3.35359909e-02 -2.12328620e-02  2.13466827e-02
  4.50921580e-02 -4.68349792e-02 -6.72277948e-03  4.16161232e-02
  4.11773659e-03 -4.22411859e-02  1.76269151e-02  1.20675974e-02
 -9.12269875e-02  2.86078751e-02  2.85129640e-02  2.28091590e-02
 -1.11752730e-02 -5.75884804e-02  5.77698685e-02 -2.18026992e-02
 -6.44395053e-02  6.18109629e-02 -6.79392517e-02 -1.86907500e-02
  2.39267424e-02  1.56432223e-02  1.69955585e-02 -5.80371946e-08
 -6.71244860e-02 -4.85524349e-02 -1.19627379e-02  1.79813616e-02
  3.24921235e-02 -1.04877822e-01 -1.00805676e-02 -4.15013991e-02
 -1.46200685e-02 -4.42534983e-02 -5.27180033e-04  4.56515923e-02
 -7.28624016e-02  8.69885739e-03 -6.91868514e-02 -2.70309784e-02
 -3.95031087e-02  4.31410875e-03 -2.55793706e-02 -5.67785315e-02
 -3.45164500e-02 -3.52749974e-02 -1.88704189e-02 -4.06384617e-02
  4.01066132e-02 -2.08669901e-03  7.88595304e-02  1.09773904e-01
  5.22099063e-02  3.90389562e-02  7.65798315e-02 -1.64881665e-02
  6.43928573e-02 -3.23447324e-02 -1.96620263e-02  4.15321998e-02
  1.30762290e-02  2.35303864e-02  6.82505965e-02  6.18682522e-03
  1.01109291e-03  1.01047024e-01 -1.91944744e-02 -2.54852008e-02
  4.13209666e-03  2.10451856e-02 -7.81921670e-02  1.46082034e-02
  9.59942788e-02 -1.22018987e-02 -6.61562234e-02 -6.08999617e-02
  2.57244874e-02  1.88148171e-02 -2.86456924e-02 -7.73614123e-02
 -5.15445024e-02  1.74185541e-02  9.75412969e-03  4.85815704e-02
  6.29902557e-02  3.74149851e-04 -1.79905724e-02 -5.96857071e-02]"
"   pda_account_state.white_list.push(key);
      pda_account_state.serialize(&mut &mut pda_account.data.borrow_mut()[..])?;

      Ok(())
    }
  }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119// adding a publickey to the account
let new_size = pda_account.data.borrow().len() + 32;

let rent = Rent::get()?;
let new_minimum_balance = rent.minimum_balance(new_size);

let lamports_diff = new_minimum_balance.saturating_sub(pda_account.lamports());
invoke(
    &system_instruction::transfer(funding_account.key, pda_account.key, lamports_diff),
    &[
        funding_account.clone(),
        pda_account.clone(),
        system_program.clone(),
    ],
)?;

pda_account.realloc(new_size, false)?;
1234567891011121314151617# How to do Cross Program InvocationA cross program invocation, is simply put calling another program's instruction inside our program. One best example to put forth is Uniswap's swap functionality. The UniswapV2Router contract, calls the necessary logic to swap, and calls the ERC20 contract's transfer function to swap from one person to another. The same way, we can call a program's instruction to have multitude of purposes.Lets have a look at our first example which is the SPL Token Program's transfer instruction. The required accounts we would need for a transfer to happen areThe Source Token Account (The account which we are holding our tokens)The Destination Token Account (The account which we would be transferring our tokens to)The Source Token Account's Holder (Our wallet address which we would be signing for)RustPress </> button to view full sourceuse solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program::invoke,
    program_error::ProgramError,
    pubkey::Pubkey,
};
use spl_token::instruction::transfer;

entrypoint!(process_instruction);

// Accounts required
/// 1. [writable] Source Token Account
/// 2. [writable] Destination Token Account
/// 3. [signer] Source Token Account holder's PubKey
/// 4. [] Token Program
pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();

    // Accounts required for token transfer

    // 1. Token account we hold
    let source_token_account = next_account_info(accounts_iter)?;
    // 2. Token account to send to
    let destination_token_account = next_account_info(accounts_iter)?;
    // 3. Our wallet address
    let source_token_account_holder = next_account_info(accounts_iter)?;
    // 4. Token Program
    let token_program = next_account_info(accounts_iter)?;

    // Parsing the token transfer amount from instruction data
    // a. Getting the 0th to 8th index of the u8 byte array
    // b. Converting the obtained non zero u8 to a proper u8 (as little endian integers)
    // c. Converting the little endian integers to a u64 number
    let token_transfer_amount = instruction_data
        .get(..8)
        .and_then(|slice| slice.try_into().ok())
        .map(u64::from_le_bytes)
        .ok_or(ProgramError::InvalidAccountData)?;

    msg!(
        ""Transferring {} tokens from {} to {}"",
        token_transfer_amount,
        source_token_account.key.to_string(),
     ","[-5.90129383e-02  1.72702800e-02 -1.05769232e-01 -5.18126749e-02
 -6.27478883e-02 -4.74300832e-02 -1.93170458e-02  7.03551248e-02
 -4.62096967e-02  7.68715516e-02  1.12584375e-01 -1.22386172e-01
  1.26984355e-03 -1.02791078e-01  3.98433059e-02  6.55542910e-02
 -8.91424492e-02  2.37820894e-02 -1.25098962e-03  2.83488259e-02
  7.97366053e-02 -8.38103369e-02 -3.94732133e-02  9.59871896e-03
  1.58189796e-02 -8.28253198e-03  3.08738034e-02  4.27243486e-03
  3.71120833e-02 -3.37679721e-02  4.94382903e-02  7.19450321e-03
 -1.03334390e-01  2.73417197e-02  3.16070616e-02  9.98482183e-02
  1.57909021e-02 -7.32447878e-02 -1.22403866e-02 -6.74648210e-04
  1.74681675e-02  5.93365580e-02  8.89192149e-03 -2.18932740e-02
 -7.43331164e-02  3.32063325e-02 -4.56103049e-02  8.16214457e-02
  5.79334982e-02 -8.35822672e-02 -4.61791409e-03  3.02138105e-02
 -9.71318334e-02  1.07290752e-01 -2.53370982e-02  5.33676073e-02
  8.30253512e-02 -9.50624887e-03  3.15686949e-02 -1.56134013e-02
 -2.15440826e-03  5.26445732e-02  5.43903485e-02  4.85675922e-03
  3.31884958e-02 -1.61025114e-02 -2.56731324e-02  2.62387283e-02
 -7.19305202e-02 -1.42433643e-02  1.53477453e-02 -4.77529950e-02
 -3.82216237e-02 -2.49734204e-02  8.01696815e-03  3.56723880e-03
  2.08214279e-02  5.13378456e-02 -1.43496203e-03 -9.31360275e-02
 -3.03397123e-02  6.10386580e-02 -6.82886597e-03  5.04430681e-02
  4.34957221e-02  3.91853377e-02 -4.74536493e-02 -7.55916312e-02
  4.41184565e-02  5.98661276e-03  8.48939568e-02  2.75263395e-02
 -5.21731041e-02  3.07243527e-03  3.23761441e-02  2.13794746e-02
  3.80698107e-02 -4.66425344e-02 -2.02816743e-02  6.00117035e-02
  1.04170677e-03  1.82356481e-02  1.47327185e-02  5.30940518e-02
 -2.36641150e-02 -4.07751240e-02  1.05700955e-01 -6.40437901e-02
 -5.96612394e-02  3.52788009e-02  2.01547574e-02  9.21008363e-02
  2.57932507e-02 -2.73332316e-02 -3.97711396e-02  2.56799012e-02
 -8.75348151e-02 -2.90302075e-02 -8.89042486e-03 -4.69405251e-03
  6.34677485e-02  5.62111940e-03 -4.61535752e-02  3.03310412e-03
 -3.21951136e-02 -7.67618464e-03  1.89703647e-02 -3.58891351e-34
 -1.12990791e-03 -6.44511580e-02 -7.01262848e-03 -4.54219468e-02
 -1.03250772e-01  5.17587774e-02  3.07784472e-02  3.17469910e-02
 -8.65588933e-02  4.14797589e-02 -1.71856843e-02 -4.88107698e-03
 -2.94897482e-02 -1.75070576e-02 -6.32054508e-02 -8.54704827e-02
  5.46505190e-02  4.43925895e-02  4.02325876e-02  5.51444851e-02
  6.94242790e-02  8.79185088e-03  4.25926186e-02 -6.93359524e-02
  6.24630190e-02  1.77818052e-02 -9.80988219e-02  2.42019892e-02
  2.24850085e-02  2.03060936e-02 -1.69177558e-02 -3.60491872e-02
 -1.65579189e-02  3.84944142e-03 -1.22453561e-02 -6.17586710e-02
 -8.28078482e-03 -3.75959016e-02 -8.26229528e-02 -2.18185261e-02
  6.27289414e-02  1.23973573e-02  3.78559493e-02 -9.66191851e-03
 -9.40965395e-03  1.40399495e-02  6.24708347e-02 -7.95678794e-03
  1.42199071e-02  9.54036936e-02 -6.08806945e-02 -3.35508212e-02
 -1.55247077e-01 -4.92505766e-02 -4.20941412e-02 -8.08436871e-02
  7.10726343e-03 -5.09258658e-02  2.51305662e-02 -2.92670578e-02
 -3.07222623e-02  2.97605041e-02 -3.04315295e-02  9.12803877e-03
  2.67102942e-03 -1.16129217e-04 -7.21376836e-02  3.76770496e-02
  6.70629740e-02 -4.63141650e-02 -6.90778345e-02  1.24251544e-02
 -8.95368382e-02  1.03344314e-01  6.19933708e-04 -1.15440674e-01
  3.33132921e-03  1.68451928e-02  1.38089387e-02 -7.91877657e-02
  5.25453873e-03  8.56193714e-03 -5.86171336e-02  6.36938289e-02
 -1.74914729e-02  7.42971823e-02  1.38604250e-02 -2.66418569e-02
 -8.77935886e-02 -3.68033461e-02 -5.41616939e-02 -5.40226549e-02
  2.82146484e-02 -3.14361006e-02 -3.89308631e-02 -3.48267936e-33
  8.15559179e-03 -6.38907477e-02  6.50410578e-02 -4.02993560e-02
  4.32408415e-03  6.15905551e-03  3.89337428e-02 -5.06565487e-03
 -3.63686569e-02  8.27647373e-02 -5.93472123e-02 -2.37874649e-02
 -1.27242715e-03 -4.40334249e-03  1.20061986e-01 -1.90550592e-02
 -4.62687090e-02  1.72850918e-02  2.51331236e-02  1.50599778e-02
 -2.61475034e-02  1.10661186e-01  2.10433975e-02  9.29379761e-02
 -5.00447154e-02  1.60057237e-03 -4.60073240e-02  4.24131341e-02
  9.08009242e-03 -4.93764766e-02  2.29833890e-02 -4.19634804e-02
 -1.22463897e-01  1.47851452e-01 -5.56547344e-02 -6.40212595e-02
  5.93889095e-02  5.56541756e-02 -6.14219308e-02  5.16608022e-02
  1.14078678e-01 -5.58632538e-02 -3.37460190e-02 -2.67972462e-02
 -1.40701709e-02  3.30833197e-02 -2.90067736e-02  4.35184985e-02
 -5.40775545e-02  5.96607588e-02  2.41625346e-02 -2.32895780e-02
 -1.20365247e-02  3.48274931e-02 -3.85274030e-02  4.78323661e-02
  1.32864296e-01  1.42874951e-02  7.50174969e-02 -4.59059365e-02
  5.17691970e-02 -6.53400272e-02  8.80981516e-03  4.20162715e-02
  3.13420482e-02 -3.46683152e-02  1.31444950e-02 -4.16555628e-02
  4.63513248e-02  4.00717780e-02 -4.06567864e-02  2.37394646e-02
  2.95918956e-02 -8.41999352e-02  4.61893529e-02 -9.55622084e-03
 -3.62299569e-02 -6.01377413e-02  9.49749351e-02 -1.16802601e-03
 -8.35001394e-02 -6.03218470e-03  1.08698577e-01  2.64428370e-02
  1.37642510e-02 -2.15184991e-03  6.31554946e-02 -7.02347979e-02
 -6.89130798e-02  1.48197105e-02 -1.18301675e-01 -4.25948314e-02
  1.67452991e-02  1.20767467e-02  3.40427421e-02 -5.80016568e-08
 -1.24771353e-02 -3.35068665e-02  1.17843859e-02  4.03939299e-02
  4.28064173e-04 -8.18526000e-02 -6.28412142e-02 -4.56505604e-02
 -1.18819373e-02 -2.44720466e-02  2.58196834e-02  6.86896816e-02
  1.65883806e-02  3.47364172e-02 -4.57908660e-02 -3.23419794e-02
  1.90546247e-03 -7.35753700e-02 -3.21159400e-02 -2.46912464e-02
 -3.70888673e-02 -4.32153568e-02 -2.48716716e-02 -1.18764546e-02
  1.56620871e-02  8.45087925e-04  2.42694560e-02  1.46597981e-01
  5.89456819e-02 -1.17159402e-02  5.80263473e-02  1.27754593e-02
 -6.55458448e-03 -1.94096360e-02 -1.33940363e-02  1.31433699e-02
  4.23596799e-02  7.01150671e-02  4.56011109e-02  4.08445671e-02
  1.19491508e-02  7.88296536e-02 -4.79381420e-02 -7.96404108e-03
  7.32462630e-02  2.91923969e-03 -2.67463028e-02 -1.37652112e-02
  8.62644762e-02 -1.58698391e-02 -1.95234232e-02 -6.07515574e-02
  9.75819957e-03  2.01450102e-02 -4.02211025e-02 -1.13563269e-01
 -4.94311042e-02  4.79420759e-02 -3.87014598e-02  2.39235256e-02
  5.26702367e-02 -4.38646302e-02 -4.79636937e-02 -2.10858509e-02]"
"  destination_token_account.key.to_string()
    );

    // Creating a new TransactionInstruction
    /*
        Internal representation of the instruction's return value (Result<Instruction, ProgramError>)

        Ok(Instruction {
            program_id: *token_program_id, // PASSED FROM USER
            accounts,
            data,
        })
    */

    let transfer_tokens_instruction = transfer(
        &token_program.key,
        &source_token_account.key,
        &destination_token_account.key,
        &source_token_account_holder.key,
        &[&source_token_account_holder.key],
        token_transfer_amount,
    )?;

    let required_accounts_for_transfer = [
        source_token_account.clone(),
        destination_token_account.clone(),
        source_token_account_holder.clone(),
    ];

    // Passing the TransactionInstruction to send
    invoke(
        &transfer_tokens_instruction,
        &required_accounts_for_transfer,
    )?;

    msg!(""Transfer successful"");

    Ok(())
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889let token_transfer_amount = instruction_data
    .get(..8)
    .and_then(|slice| slice.try_into().ok())
    .map(u64::from_le_bytes)
    .ok_or(ProgramError::InvalidAccountData)?;

let transfer_tokens_instruction = transfer(
    &token_program.key,
    &source_token_account.key,
    &destination_token_account.key,
    &source_token_account_holder.key,
    &[&source_token_account_holder.key],
    token_transfer_amount,
)?;

let required_accounts_for_transfer = [
    source_token_account.clone(),
    destination_token_account.clone(),
    source_token_account_holder.clone(),
];

invoke(
    &transfer_tokens_instruction,
    &required_accounts_for_transfer,
)?;

1234567891011121314151617181920212223242526 The corresponding client instruction would be as follows. For knowing the mint and token creation instructions, please refer to the full code nearby. TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";
import {
  AccountLayout,
  MintLayout,
  Token,
  TOKEN_PROGRAM_ID,
  u64,
} from ""@solana/spl-token"";

import * as BN from ""bn.js"";

// Users
const PAYER_KEYPAIR = Keypair.generate();
const RECEIVER_PUBKEY = Keypair.generate().publicKey;

// Mint and token accounts
const TOKEN_MINT_ACCOUNT = Keypair.generate();
const SOURCE_TOKEN_ACCOUNT = Keypair.generate();
const DESTINATION_TOKEN_ACCOUNT = Keypair.generate();

// Numbers
const DEFAULT_DECIMALS_COUNT = 9;
const TOKEN_TRANSFER_AMOUNT = 50 * 10 ** DEFAULT_DECIMALS_COUNT;
const TOKEN_TRANSFER_AMOUNT_BUFFER = Buffer.from(
  Uint8Array.of(...new BN(TOKEN_TRANSFER_AMOUNT).toArray(""le"", 8))
);

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""EfYK91eN3AqTwY1C34W6a33qGAtQ8HJYVhNv7cV4uMZj""
  );

  const mintDataSpace = MintLayout.span;
  const mintRentRequired = await connection.getMinimumBalanceForRentExemption(
    mintDataSpace
  );

  const tokenDataSpace = AccountLayout.span;
  const tokenRentRequired = await connection.getMinimumBalanceForRentExemption(
    tokenDataSpace
  );

  // Airdropping some SOL
  await connection.confirmTransaction(
    await connection.requestAirdrop(PAYER_KEYPAIR.publicKey, LAMPORTS_PER_SOL)
  );

  // Allocating space and rent for mint account
  const createMintAccountIx = SystemProgram.createAccount({
    fromPubkey: PAYER_KEYPAIR.publicKey,
    lamports: mintRentRequired,
    newAccountPubkey: TOKEN_MINT_ACCOUNT.publicKey,
   ","[-2.24395953e-02  2.83720251e-02 -3.58614922e-02 -3.53651829e-02
 -9.32950824e-02 -2.67857425e-02  8.02612454e-02  1.17421232e-01
 -4.87542450e-02 -3.66507098e-03  2.01977678e-02 -6.24520853e-02
  4.99498956e-02 -5.23473695e-02  3.74849252e-02  2.77667511e-02
  6.56878855e-03  4.30845283e-02 -5.09441085e-02 -1.21605257e-02
  9.43973735e-02  9.40669514e-03 -1.94088835e-02  5.52562363e-02
  2.43209973e-02 -5.83122931e-02 -2.48962678e-02 -5.42473085e-02
  4.13780957e-02  2.06994335e-03  2.48976368e-02 -4.05722447e-02
 -9.30213630e-02  1.30971130e-02  2.60546841e-02  1.02923617e-01
  2.93641724e-02 -7.04586953e-02  4.43518572e-02 -6.90878406e-02
 -4.24282402e-02  4.46691066e-02 -7.32492581e-02  3.00080497e-02
  1.17545119e-02  4.75355797e-02 -3.37787420e-02  1.05413748e-02
  1.20988274e-02  1.33614836e-03 -1.75630152e-02 -6.37232559e-03
 -4.12771013e-03 -4.62021073e-03 -8.65492523e-02 -1.06647881e-02
  6.71663657e-02 -1.16548762e-02  6.09788336e-02  4.39579487e-02
 -2.96793468e-02  2.99575217e-02  6.10523969e-02 -1.46471448e-02
 -6.36400059e-02 -1.53432032e-02 -1.90675445e-02  1.85235348e-02
 -1.16882939e-02 -1.34042036e-02 -2.30832733e-02 -3.61296423e-02
 -1.28091767e-01  3.50908153e-02 -4.07304727e-02 -3.54657951e-03
  2.63151713e-02  9.17119086e-02 -9.23490301e-02 -8.38181078e-02
  3.55061367e-02 -1.85691044e-02  5.92678003e-02  3.68230939e-02
 -2.92836991e-03  1.69527344e-02 -1.65738650e-02  2.94347834e-02
  5.57461083e-02  7.31404945e-02 -3.90262669e-03  1.76031627e-02
 -3.45248468e-02 -5.46114519e-02  1.38162091e-01  1.46899391e-02
 -3.39406431e-02 -4.55944426e-02 -1.94564220e-02  1.93350147e-02
 -3.03664673e-02 -3.69375944e-03  1.93523839e-02  1.47237945e-02
  2.55102534e-02  2.13901009e-02  9.57955867e-02 -4.11542319e-02
 -3.40464376e-02 -2.66670194e-02  2.01114174e-02  1.03666209e-01
 -1.91028155e-02  3.49412821e-02  2.22686641e-02  6.34910986e-02
 -6.50040358e-02  1.01811029e-02  3.06290621e-03  7.99633563e-02
  5.54499030e-02  1.70541536e-02 -3.18988152e-02 -3.19658220e-03
 -1.02522373e-01 -6.93777800e-02  2.38529276e-02 -4.53490402e-33
 -6.36389181e-02  2.90462002e-02 -3.88894118e-02  2.57899743e-02
 -2.18450557e-02 -7.91211799e-03  5.94297796e-02  3.11341770e-02
 -5.84206432e-02 -3.29095349e-02 -5.58182374e-02 -9.44470391e-02
 -1.57056749e-02  2.37779059e-02 -6.47806972e-02 -6.90597668e-02
  3.26037803e-03  2.99155973e-02  1.44341812e-01  2.76597440e-02
  5.88966012e-02  5.42124314e-03 -5.47829531e-02  1.37879252e-02
  9.76351742e-03 -1.74354867e-03 -8.48064125e-02 -2.06713937e-02
 -9.29596834e-03 -2.30962709e-02  4.04634550e-02 -5.39450645e-02
 -3.69360745e-02  2.69840602e-02  4.93889675e-02 -5.48737533e-02
  1.87474694e-02  6.60562282e-03 -7.31276302e-03 -4.91295457e-02
  5.64961545e-02 -3.54803130e-02 -3.12721282e-02  2.99437791e-02
 -5.36606573e-02 -3.88293602e-02 -1.76031832e-02 -1.24364737e-02
  1.33754283e-01  3.08679119e-02 -4.15050276e-02 -3.11861117e-03
 -1.56702672e-03 -1.28529876e-01  2.98771355e-02 -3.56821194e-02
 -2.51291916e-02 -1.52142961e-02 -6.49561360e-03 -1.30682541e-02
 -3.67609225e-02  8.95424783e-02  3.10935881e-02  1.70646813e-02
  4.16832119e-02  9.74434428e-03 -7.60779977e-02 -3.37432846e-02
  3.73950601e-02 -8.44571814e-02 -1.28370970e-01  7.91078992e-03
 -2.41114087e-02  1.48435719e-02 -5.17499410e-02 -2.63103470e-02
  8.65386892e-03 -5.05165085e-02 -5.87777607e-02 -3.81106511e-02
 -9.14553273e-03 -9.89176612e-03 -1.10687912e-01  1.56379286e-02
  1.15129938e-02  9.71574783e-02 -2.31453851e-02 -9.23151989e-03
  2.00008471e-02  4.83529568e-02  6.00463673e-02 -1.04534753e-01
 -4.98061664e-02  1.08265933e-02  1.83529835e-02  5.62373349e-34
  6.36968687e-02  2.75153089e-02  5.99666238e-02 -1.28721702e-04
 -2.87525747e-02  9.27865505e-03  8.45706314e-02 -2.07103919e-02
 -4.59890552e-02  5.48803695e-02 -1.12617142e-01  1.12000844e-02
 -4.41835783e-02 -1.52149508e-02  2.25603653e-04 -3.41636501e-02
 -7.33646527e-02  4.46698070e-02  5.35999164e-02 -7.91518483e-03
 -1.63244046e-02  1.14490524e-01  1.81138068e-02  1.97704993e-02
 -2.93807089e-02  3.71909812e-02 -6.31035566e-02  9.07929242e-02
  5.64734228e-02  8.52370053e-04  2.69234926e-02 -2.69060675e-02
  7.01104626e-02  1.10561095e-01 -1.88738219e-02 -1.30037993e-01
  5.32882810e-02  9.05687213e-02 -1.54679071e-03  2.84551512e-02
  9.46962237e-02 -6.90317079e-02  1.73976750e-03  1.24431355e-02
  4.80392426e-02  3.35045867e-02  3.05870902e-02 -2.72477567e-02
 -1.60802864e-02  2.23060809e-02  4.82215807e-02 -2.84489105e-03
 -7.77832344e-02  1.27051929e-02  1.51417535e-02  6.66567683e-03
  2.01935604e-01 -6.31802753e-02  5.05959205e-02 -1.22358896e-01
  4.99047479e-03 -5.96994944e-02  1.09836623e-01  2.96079391e-03
  6.29960895e-02 -1.64592210e-02 -1.24523686e-02  2.18173433e-02
 -5.19809779e-03  5.43787144e-02 -4.78558280e-02 -2.01534908e-02
  6.58167601e-02 -5.12982756e-02  5.83947226e-02  7.45601282e-02
  2.09211081e-04 -6.16499186e-02 -3.35448086e-02  2.81791762e-02
 -3.17775980e-02  3.86007829e-03 -4.27537831e-03  9.59858969e-02
 -2.12275125e-02 -1.16810184e-02  3.91283818e-02  2.54500024e-02
 -4.79162745e-02 -2.67216396e-02 -6.11797236e-02 -2.65199654e-02
  4.45463583e-02 -8.93049687e-02 -1.69836842e-02 -5.26518775e-08
 -1.14761814e-02 -5.08068614e-02  1.89520791e-02  7.11612776e-02
 -1.15784556e-02 -2.07777079e-02 -6.57425597e-02 -7.61583522e-02
 -2.48006601e-02 -3.04691270e-02 -1.19370423e-01  3.10566537e-02
 -2.87693366e-03 -5.94917275e-02 -4.59224321e-02 -3.45707573e-02
 -6.50102645e-03 -4.98553663e-02  2.33517829e-02 -5.69521338e-02
 -4.03015502e-02 -4.77455668e-02  3.73545103e-02  1.52433040e-02
 -1.22672291e-02  2.37214454e-02  6.28634766e-02  1.10287212e-01
  3.29091400e-02 -8.21199119e-02  4.02139090e-02 -5.30609628e-04
  9.27707087e-03 -3.38995941e-02 -4.64199744e-02 -3.23293917e-02
  1.84621301e-03 -2.33841455e-03  6.30831122e-02 -1.12367710e-02
  1.28713006e-03  6.36296794e-02  3.46760731e-03  1.10543845e-02
  2.85617113e-02  3.79498526e-02 -4.15513441e-02 -6.28958829e-03
  3.61600332e-02  3.84648331e-02 -5.72984256e-02 -2.24943794e-02
 -2.03117114e-02  9.78755951e-02 -5.90406694e-02 -1.29094757e-02
 -6.24894723e-02 -6.33394942e-02  2.14993041e-02  4.44924049e-02
  7.36474246e-02  8.05408955e-02  1.41504593e-02 -1.23378865e-01]"
"programId: TOKEN_PROGRAM_ID,
    space: mintDataSpace,
  });

  // Initializing mint with decimals and authority
  const initializeMintIx = Token.createInitMintInstruction(
    TOKEN_PROGRAM_ID,
    TOKEN_MINT_ACCOUNT.publicKey,
    DEFAULT_DECIMALS_COUNT,
    PAYER_KEYPAIR.publicKey, // mintAuthority
    PAYER_KEYPAIR.publicKey // freezeAuthority
  );

  // Allocating space and rent for source token account
  const createSourceTokenAccountIx = SystemProgram.createAccount({
    fromPubkey: PAYER_KEYPAIR.publicKey,
    newAccountPubkey: SOURCE_TOKEN_ACCOUNT.publicKey,
    lamports: tokenRentRequired,
    programId: TOKEN_PROGRAM_ID,
    space: tokenDataSpace,
  });

  // Initializing token account with mint and owner
  const initializeSourceTokenAccountIx = Token.createInitAccountInstruction(
    TOKEN_PROGRAM_ID,
    TOKEN_MINT_ACCOUNT.publicKey,
    SOURCE_TOKEN_ACCOUNT.publicKey,
    PAYER_KEYPAIR.publicKey
  );

  // Minting tokens to the source token account for transferring later to destination account
  const mintTokensIx = Token.createMintToInstruction(
    TOKEN_PROGRAM_ID,
    TOKEN_MINT_ACCOUNT.publicKey,
    SOURCE_TOKEN_ACCOUNT.publicKey,
    PAYER_KEYPAIR.publicKey,
    [PAYER_KEYPAIR],
    TOKEN_TRANSFER_AMOUNT
  );

  // Allocating space and rent for destination token account
  const createDestinationTokenAccountIx = SystemProgram.createAccount({
    fromPubkey: PAYER_KEYPAIR.publicKey,
    newAccountPubkey: DESTINATION_TOKEN_ACCOUNT.publicKey,
    lamports: tokenRentRequired,
    programId: TOKEN_PROGRAM_ID,
    space: tokenDataSpace,
  });

  // Initializing token account with mint and owner
  const initializeDestinationTokenAccountIx =
    Token.createInitAccountInstruction(
      TOKEN_PROGRAM_ID,
      TOKEN_MINT_ACCOUNT.publicKey,
      DESTINATION_TOKEN_ACCOUNT.publicKey,
      RECEIVER_PUBKEY
    );

  // Our program's CPI instruction (transfer)
  const transferTokensIx = new TransactionInstruction({
    programId: programId,
    data: TOKEN_TRANSFER_AMOUNT_BUFFER,
    keys: [
      {
        isSigner: false,
        isWritable: true,
        pubkey: SOURCE_TOKEN_ACCOUNT.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: DESTINATION_TOKEN_ACCOUNT.publicKey,
      },
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: TOKEN_PROGRAM_ID,
      },
    ],
  });

  const transaction = new Transaction();
  // Adding up all the above instructions
  transaction.add(
    createMintAccountIx,
    initializeMintIx,
    createSourceTokenAccountIx,
    initializeSourceTokenAccountIx,
    mintTokensIx,
    createDestinationTokenAccountIx,
    initializeDestinationTokenAccountIx,
    transferTokensIx
  );

  const txHash = await connection.sendTransaction(transaction, [
    PAYER_KEYPAIR,
    TOKEN_MINT_ACCOUNT,
  ","[-8.86983126e-02 -6.63300510e-03 -1.13543652e-01 -2.29361420e-03
 -6.64843917e-02  3.08611318e-02  5.92170097e-02  1.46921128e-01
 -2.92260889e-02  6.29279017e-02  8.04059301e-03 -1.10080831e-01
  6.36925399e-02 -1.29280034e-02  3.85059305e-02  3.91990021e-02
 -3.58384885e-02 -1.20230215e-02  2.17792932e-02  2.05350742e-02
  1.02690063e-01 -8.82208347e-02 -5.12025226e-03 -3.47149856e-02
  1.03017345e-01 -2.07204502e-02 -1.69505998e-02  1.09955193e-02
  1.61812995e-02  5.10829017e-02  7.08120316e-02 -3.87253761e-02
  5.85387424e-02 -3.86891142e-02  1.11998625e-01  8.30000415e-02
  8.88399687e-03 -3.57935503e-02  6.12268858e-02 -7.11057037e-02
 -2.58064866e-02  9.41031352e-02 -5.94223924e-02 -7.35750655e-03
 -7.64152315e-03  5.48094418e-03  2.58339271e-02  5.70559017e-02
 -5.29306987e-03 -5.76763116e-02  5.17392009e-02  3.15560326e-02
  3.67888175e-02  3.22492681e-02 -1.01973727e-01  2.87003201e-02
  3.90745588e-02  5.29734269e-02  8.18943903e-02  3.44314724e-02
  2.82954425e-02  4.23594527e-02  1.29930088e-02 -3.22894044e-02
 -2.56162137e-02  2.05799881e-02 -7.20532611e-02 -7.52760284e-03
 -5.47407288e-03 -3.01376469e-02 -2.09005270e-02  2.91888397e-02
 -2.93537397e-02  1.12600392e-02 -4.42673005e-02 -3.75316031e-02
 -1.78438015e-02  9.89404917e-02 -2.17885505e-02 -7.71251693e-02
 -5.50521770e-03  3.48813720e-02  8.04779008e-02  7.03788549e-02
  3.07773538e-02  4.21944670e-02  5.04949987e-02 -8.14901851e-03
  4.70409505e-02 -4.24177758e-03  3.75107639e-02  1.38436090e-02
  2.70899795e-02 -1.53042320e-02  1.30591720e-01 -2.38513947e-03
  1.99660715e-02 -3.64788482e-03 -4.38885875e-02  6.89438507e-02
 -1.75064746e-02 -2.85299737e-02  2.54957639e-02  1.63472351e-02
  9.49935168e-02  3.45857218e-02  2.44081933e-02  1.54069578e-03
 -1.32835442e-02  1.00539569e-02  3.67133319e-02  2.96404529e-02
 -2.85686273e-02  1.41336005e-02  9.07756202e-03  6.84817284e-02
 -8.81488919e-02  1.32810650e-02  6.11108802e-02  4.93916310e-02
  1.40586779e-01 -1.54869650e-02 -6.51009232e-02 -8.76509398e-02
 -8.43258575e-02 -7.95472355e-04  4.38201539e-02  8.23442609e-33
 -9.94563028e-02 -4.79795448e-02 -1.57626700e-02  3.04785860e-03
  4.34914418e-03  2.04559565e-02  3.60515006e-02  1.19963042e-01
 -2.74118930e-02 -5.96643845e-03  1.76848918e-02 -5.47642298e-02
 -1.39621841e-02  4.40362422e-03 -6.33457080e-02 -4.45884205e-02
 -1.27993757e-02  5.40505722e-02  9.32627916e-02 -2.54710075e-02
 -7.36782327e-03 -1.61151197e-02 -1.27489325e-02 -9.18167364e-03
  1.38276592e-02  5.88173978e-02  2.28419178e-03 -2.22050194e-02
 -1.12437643e-02  2.90515134e-04  1.15494905e-02 -1.25103653e-03
 -2.99843121e-02 -7.05251424e-03  2.87938882e-02 -5.19811222e-03
  5.18685244e-02  1.62800811e-02 -9.55373198e-02 -8.70895460e-02
  6.78374097e-02 -7.48987682e-03 -2.93492898e-02 -9.78337880e-03
 -1.85092743e-02 -3.97762842e-02 -4.26434129e-02 -9.56200622e-03
  4.62247133e-02  3.21833603e-02 -6.69135079e-02  4.27323654e-02
 -8.53218064e-02 -1.03368917e-02 -9.93171334e-03 -8.89725387e-02
 -2.46918760e-02 -1.70334559e-02  1.82248987e-02 -1.08188562e-01
 -6.79165423e-02 -3.72353708e-03  2.36071777e-02  2.30663549e-03
  7.98405055e-03  5.00057824e-02 -6.62084594e-02 -7.92051330e-02
  3.45416479e-02  2.55017504e-02 -6.15361817e-02 -1.56333502e-02
 -1.78184845e-02  6.80495799e-02 -9.27277207e-02 -4.37741820e-03
  4.24785502e-02 -9.68688540e-03 -6.28406256e-02 -4.54589501e-02
  6.59546303e-03  2.11589783e-03 -4.84488681e-02  3.06161400e-02
 -2.43702158e-02  1.09711755e-02 -3.40862125e-02  2.31052507e-02
 -3.99159603e-02 -3.75471711e-02  6.89928904e-02 -1.02396540e-01
 -6.53435057e-03  3.39088105e-02 -1.28276840e-01 -9.24747594e-33
  1.19342804e-02 -7.43195089e-03  1.44662727e-02 -5.83536699e-02
 -4.76704165e-02  9.02536064e-02 -7.95585513e-02 -3.27670611e-02
 -3.27403322e-02  9.13045406e-02 -4.38752808e-02  4.49131895e-03
  6.56994467e-04  4.69545908e-02  5.74865378e-02  3.58465947e-02
 -3.13762277e-02  6.15513697e-03 -1.92678701e-02  2.22405996e-02
 -2.33665239e-02  9.18795764e-02 -1.39185628e-02  4.92665395e-02
 -1.84237603e-02  4.06705886e-02 -5.84880747e-02  6.97867870e-02
  4.25422005e-02  4.47391719e-02  1.89466346e-02 -3.38694900e-02
 -9.71231535e-02 -1.03924691e-03 -2.69754566e-02 -1.13578431e-01
 -1.49870403e-02  4.73699234e-02 -5.62428348e-02  4.16000113e-02
  1.01070002e-01 -1.18810080e-01  1.69888581e-03  1.89193022e-02
  7.56483674e-02 -3.74903344e-02  6.93863258e-02 -5.48272058e-02
 -3.58892381e-02  2.67188735e-02  4.13963832e-02 -8.13841000e-02
 -6.56296462e-02  2.71438388e-03 -5.09339981e-02 -6.52637100e-03
  1.35019585e-01  3.72156613e-02  3.25595327e-02 -1.23580858e-01
  4.96300496e-02 -5.20128012e-02  2.24770661e-02  6.45304620e-02
  5.22353174e-03 -8.33332464e-02 -7.55281374e-02  8.79681781e-02
 -1.53376944e-02  2.42616571e-02 -3.48744877e-02  1.79862007e-02
  4.84538116e-02 -2.98091006e-02 -1.24113308e-02  8.44839588e-02
  5.66565618e-02 -7.92188942e-02  4.11121408e-03 -6.97950745e-05
 -2.10131072e-02  2.23246105e-02  3.48612890e-02 -3.66594195e-02
 -4.36712988e-02 -5.45237362e-02  3.48310061e-02  2.75539774e-02
 -4.42295289e-03  3.69066224e-02 -7.18558654e-02  2.56670211e-02
 -1.30504137e-02 -1.78756807e-02  2.93582138e-02 -5.83182924e-08
 -1.07254880e-02 -1.83367822e-02 -1.92621425e-02  9.78303179e-02
  1.80533826e-02 -4.00832519e-02 -2.83816271e-02 -1.96712418e-03
 -5.39085455e-02 -3.42737697e-02 -4.19240259e-02  3.00205145e-02
 -4.85428236e-02 -8.19859747e-03 -6.92324117e-02 -6.92082569e-02
 -6.27467185e-02  3.71491723e-02 -2.07613595e-02 -3.39636430e-02
 -3.29209790e-02 -1.51384706e-02  4.76601459e-02 -6.98614046e-02
  6.78680046e-03 -1.11448444e-01  9.93593261e-02  1.09648921e-01
  2.64998768e-02  1.35115441e-02 -2.11926810e-02  8.49148557e-02
  1.70317478e-02 -8.85870904e-02 -5.98822460e-02 -1.28292758e-02
  8.96853115e-03  2.32416857e-02  5.80524579e-02 -2.74841450e-02
 -5.43009937e-02  5.20051531e-02 -5.52797057e-02 -2.59241182e-02
 -3.56699750e-02  1.31706437e-02 -5.25901392e-02  7.41399229e-02
  7.83995613e-02 -1.90861057e-02 -1.02283128e-01 -9.90984123e-03
 -3.52318212e-02 -3.31571023e-03 -4.99110781e-02  7.63309700e-03
 -1.00263402e-01  3.66506688e-02 -2.29146783e-04 -2.66131256e-02
 -6.32346235e-03 -7.27247400e-03 -6.52712658e-02 -3.78693007e-02]"
" SOURCE_TOKEN_ACCOUNT,
    DESTINATION_TOKEN_ACCOUNT,
  ]);

  console.log(`Token transfer CPI success: ${txHash}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""EfYK91eN3AqTwY1C34W6a33qGAtQ8HJYVhNv7cV4uMZj""
  );

  const transferTokensIx = new TransactionInstruction({
    programId: programId,
    data: TOKEN_TRANSFER_AMOUNT_BUFFER,
    keys: [
      {
        isSigner: false,
        isWritable: true,
        pubkey: SOURCE_TOKEN_ACCOUNT.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: DESTINATION_TOKEN_ACCOUNT.publicKey,
      },
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: TOKEN_PROGRAM_ID,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(transferTokensIx);

  const txHash = await connection.sendTransaction(transaction, [
    PAYER_KEYPAIR,
    TOKEN_MINT_ACCOUNT,
    SOURCE_TOKEN_ACCOUNT,
    DESTINATION_TOKEN_ACCOUNT,
  ]);

  console.log(`Token transfer CPI success: ${txHash}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445Now let's take a look at another example, which is System Program's create_account instruction. There is a slight difference between the above mentioned instruction and this. There, we never had to pass the token_program as one of the accounts inside the invoke function. However, there are exceptions where you are required to pass the invoking instruction's program_id. In our case it would be the System Program's program_id. (""11111111111111111111111111111111""). So now the required accounts would beThe payer account who funds the rentThe account which is going to be createdSystem Program accountRustPress </> button to view full sourceuse solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program::invoke,
    program_error::ProgramError,
    pubkey::Pubkey,
    rent::Rent,
    system_instruction::create_account,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

// Accounts required
/// 1. [signer, writable] Payer Account
/// 2. [signer, writable] General State Account
/// 3. [] System Program
pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();

    // Accounts required for token transfer

    // 1. Payer account for the state account creation
    let payer_account = next_account_info(accounts_iter)?;
    // 2. Token account we hold
    let general_state_account = next_account_info(accounts_iter)?;
    // 3. System Program
    let system_program = next_account_info(accounts_iter)?;

    msg!(
        ""Creating account for","[-3.02982405e-02  2.09392291e-02 -6.70556426e-02  5.39433323e-02
 -2.69832299e-03 -1.75314788e-02  4.88288850e-02  5.76345287e-02
  2.69070491e-02  3.35776135e-02  2.53148843e-02 -8.49102661e-02
 -2.42623165e-02 -4.18393202e-02 -2.20022798e-02 -3.73133123e-02
 -5.01740202e-02  8.09052587e-03 -4.98945778e-03 -2.21177358e-02
  5.79145364e-03 -8.41589794e-02 -6.30333368e-03 -3.00126299e-02
  4.85562757e-02  4.95361630e-03 -1.32844141e-02 -6.45448714e-02
 -6.29083440e-03  3.74732092e-02 -1.55142182e-02 -1.70334615e-02
 -8.68186206e-02 -2.98722181e-02  5.80687225e-02  1.42267764e-01
  3.62944640e-02 -6.17042668e-02  2.39611957e-02 -1.01136193e-01
  8.82290900e-02  1.98844131e-02 -4.83094230e-02 -1.01017952e-03
  5.46796955e-02  5.26951300e-03 -1.99761540e-02  4.34574559e-02
 -1.08683258e-02 -2.51129456e-02 -3.62896994e-02  3.93298976e-02
 -4.78747636e-02  6.22379854e-02 -1.01914637e-01  8.43567103e-02
  3.43442820e-02  2.11449061e-02  8.44709054e-02 -3.32127921e-02
  1.03436075e-02 -4.10671234e-02  6.55367672e-02 -6.97944835e-02
 -1.20940858e-04  4.81585957e-05 -2.94897240e-03  1.89466644e-02
 -8.14356934e-03  7.06269825e-03  5.23803271e-02  5.67203499e-02
 -1.12582386e-01 -2.20183711e-02 -1.90335922e-02 -9.84390825e-03
 -1.00294678e-02  4.72833477e-02 -3.20152342e-02 -2.52246670e-03
  2.26550568e-02 -3.94159295e-02  7.87571445e-02 -2.20399559e-03
 -1.19221620e-02  3.93955261e-02 -2.81562135e-02 -3.57173756e-02
 -1.06588600e-03 -3.81657742e-02 -9.31915548e-03  8.29295516e-02
 -3.19298469e-02 -3.82397771e-02  7.92734995e-02 -1.49634238e-02
 -4.46969159e-02  4.47634570e-02  2.31565181e-02  4.33601178e-02
  1.34560456e-02  9.43862274e-03 -3.54256202e-03  4.31290865e-02
  6.48869248e-03 -8.37511197e-03  7.64916092e-02 -7.67292529e-02
 -2.76880767e-02  2.93586552e-02  3.35618015e-03  1.12371221e-01
 -3.06316633e-02  2.79914606e-02 -1.35480836e-02  1.07394412e-01
 -5.84298559e-02  1.17556229e-02 -6.08950015e-03  9.03854594e-02
  8.47984254e-02 -1.94450431e-02 -7.85351917e-02  3.20912302e-02
 -8.71407241e-02 -6.06110878e-02  3.68305221e-02  9.65636724e-33
 -9.45371389e-02 -3.63451093e-02  2.06529070e-02 -3.66284773e-02
  9.74718854e-03 -1.19717354e-02  4.50788513e-02 -1.34389764e-02
 -5.15050888e-02 -7.41808936e-02 -1.11348718e-01 -4.16011401e-02
 -2.41461620e-02  1.03314510e-02 -8.58318955e-02 -7.86590576e-02
  7.07183313e-03  7.61406571e-02  1.68340102e-01 -6.63282862e-03
  4.75175157e-02 -1.32918721e-02  3.66201508e-03 -3.75203975e-02
 -4.14298028e-02  6.35277480e-03 -6.79169297e-02 -5.78305423e-02
  7.44241104e-02 -6.55443117e-04  2.68132091e-02  3.86607014e-02
 -7.82173476e-04  3.31577361e-02 -1.10581163e-02 -1.42472507e-02
 -8.24795477e-03 -3.68725173e-02 -7.11861849e-02 -5.05251326e-02
  2.21448131e-02 -1.18472883e-02 -3.99171673e-02 -4.03544446e-03
 -9.04306397e-02 -1.65328733e-04  2.17456874e-02 -1.03452414e-01
  5.11550047e-02 -1.10023469e-02 -4.94276918e-02  2.97289505e-03
 -2.39852648e-02 -1.25676572e-01  3.60637940e-02 -8.10989290e-02
 -6.99505629e-03  5.40084066e-03 -7.82390777e-03  1.94015764e-02
 -9.16803838e-04  1.37658482e-02  1.28993448e-02 -2.60780230e-02
  4.32940759e-02  4.88349013e-02 -1.98161528e-02  2.31707431e-02
  1.21367015e-02 -4.42545861e-03 -4.75783758e-02  7.70815834e-02
 -4.88685910e-03  6.12737648e-02 -3.50946188e-02  1.67732371e-03
 -2.11325213e-02 -8.61110399e-04 -8.71440694e-02 -1.01518437e-01
 -3.84579413e-02 -2.47922149e-02 -7.90226385e-02  1.16463834e-02
  1.32030398e-02  7.40874112e-02 -6.76616207e-02 -1.83105487e-02
  3.10395602e-02  1.11292200e-02  3.85371819e-02 -3.16115655e-02
  8.20853841e-03  1.43205654e-02 -5.03098182e-02 -1.07950796e-32
  1.56675987e-02 -1.03337616e-02 -3.60117145e-02  1.65514722e-02
 -7.95195177e-02  2.46173963e-02  3.02087255e-02  4.35928851e-02
  4.41430993e-02  9.48902220e-02 -8.11932422e-03 -1.20298471e-02
 -1.25333564e-02 -2.59539150e-02  6.78172940e-03 -3.34007479e-02
 -9.29225981e-03 -1.28122140e-03  7.15636313e-02 -3.22563834e-02
 -4.51481156e-02  7.04265162e-02 -2.14110166e-02  8.10130984e-02
 -9.90321115e-02  3.50498594e-02 -6.46014735e-02  2.74922960e-02
 -7.24635134e-03 -1.95851047e-02  1.00352410e-02 -1.61003936e-02
 -4.89898510e-02  9.86162946e-02  3.67384814e-02 -6.54259846e-02
  1.24090472e-02  6.09261096e-02  4.32604402e-02  2.22559758e-02
  5.30863144e-02 -4.59209941e-02 -4.03894633e-02  6.13236241e-03
  7.60013014e-02 -3.55437137e-02  8.54698569e-02 -2.67442670e-02
  1.57172792e-02  1.28138848e-02  2.08304152e-02 -1.36089660e-02
 -4.36218828e-02  2.49379724e-02 -1.33438911e-02  7.83057138e-02
  1.59965411e-01 -3.06056384e-02  5.88598335e-03 -6.58759028e-02
  3.37020233e-02 -1.19181618e-01  2.20426768e-02  7.63729261e-03
  1.11169569e-01 -5.07721230e-02 -1.72268376e-02  4.00552340e-02
  4.60569747e-02  6.87628463e-02 -4.04451005e-02  1.01880901e-01
  5.20697348e-02  4.13763076e-02  1.74817778e-02  2.21650880e-02
  1.57333761e-02 -8.32438767e-02  1.63905174e-02  4.77928855e-02
 -4.08287011e-02  2.82084793e-02  1.60773024e-02  4.13861386e-02
  4.92230393e-02 -1.91533435e-02  6.41495213e-02  6.12513870e-02
 -6.78128749e-03 -4.62022144e-03 -6.47876263e-02 -9.16873962e-02
 -1.50773395e-03 -2.16591600e-02 -4.94124889e-02 -6.49519478e-08
 -2.30097342e-02 -4.62448411e-03 -5.38508967e-02  7.83755928e-02
  2.09371913e-02  1.03854872e-02 -4.49679904e-02 -7.37742335e-02
 -2.11312342e-02 -7.99469724e-02 -1.32774264e-01  2.38972926e-03
 -3.11199557e-02 -4.99430932e-02 -3.51113230e-02 -4.91703302e-02
 -3.80170085e-02 -1.56604517e-02  1.17571820e-02 -9.31942463e-02
 -2.55270768e-02 -2.12644935e-02 -9.04636458e-03 -2.15069018e-03
  7.45737972e-03 -3.46361175e-02  1.26868159e-01  1.48237318e-01
  1.29642803e-02 -1.13727406e-01 -7.98110887e-02 -1.10095576e-03
  1.21004786e-02 -1.81324296e-02 -4.21192497e-02  2.97285989e-02
  1.13564894e-01  3.26143354e-02  6.03116117e-02 -2.43520248e-03
 -1.29959872e-02  6.41606152e-02 -4.17735986e-02 -2.18504220e-02
  5.62025513e-03  9.30711627e-02  6.08397182e-03  5.85350767e-02
  5.31157106e-02  2.94980668e-02 -8.02449789e-03 -4.16772962e-02
 -3.80944982e-02  9.11114588e-02 -1.84026454e-02 -8.14466029e-02
 -1.27465874e-01  2.81448849e-03  2.62432322e-02 -8.00932932e-04
  1.35394037e-01  2.19111647e-02 -5.35781495e-03 -6.97983950e-02]"
"{}"",
        general_state_account.key.to_string()
    );

    // Parsing the token transfer amount from instruction data
    // a. Getting the 0th to 8th index of the u8 byte array
    // b. Converting the obtained non zero u8 to a proper u8 (as little endian integers)
    // c. Converting the little endian integers to a u64 number
    let account_span = instruction_data
        .get(..8)
        .and_then(|slice| slice.try_into().ok())
        .map(u64::from_le_bytes)
        .ok_or(ProgramError::InvalidAccountData)?;

    let lamports_required = (Rent::get()?).minimum_balance(account_span as usize);

    // Creating a new TransactionInstruction
    /*
        Internal representation of the instruction's return value (Instruction)

        Instruction::new_with_bincode(
            system_program::id(), // NOT PASSED FROM USER
            &SystemInstruction::CreateAccount {
                lamports,
                space,
                owner: *owner,
            },
            account_metas,
        )
    */

    let create_account_instruction = create_account(
        &payer_account.key,
        &general_state_account.key,
        lamports_required,
        account_span,
        program_id,
    );

    let required_accounts_for_create = [
        payer_account.clone(),
        general_state_account.clone(),
        system_program.clone(),
    ];

    // Passing the TransactionInstruction to send (with the issused program_id)
    invoke(&create_account_instruction, &required_accounts_for_create)?;

    msg!(""Transfer successful"");

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788let account_span = instruction_data
    .get(..8)
    .and_then(|slice| slice.try_into().ok())
    .map(u64::from_le_bytes)
    .ok_or(ProgramError::InvalidAccountData)?;

let lamports_required = (Rent::get()?).minimum_balance(account_span as usize);

let create_account_instruction = create_account(
    &payer_account.key,
    &general_state_account.key,
    lamports_required,
    account_span,
    program_id,
);

let required_accounts_for_create = [
    payer_account.clone(),
    general_state_account.clone(),
    system_program.clone(),
];

invoke(&create_account_instruction, &required_accounts_for_create)?;
1234567891011121314151617181920212223The respective client side code will look as followsTSPress </> button to view full sourceimport { clusterApiUrl, Connection, Keypair } from ""@solana/web3.js"";
import { LAMPORTS_PER_SOL, PublicKey, SystemProgram } from ""@solana/web3.js"";
import { Transaction, TransactionInstruction } from ""@solana/web3.js"";

import * as BN from ""bn.js"";

// Users
const PAYER_KEYPAIR = Keypair.generate();
const GENERAL_STATE_KEYPAIR = Keypair.generate();

const ACCOUNT_SPACE_BUFFER = Buffer.from(
  Uint8Array.of(...new BN(100).toArray(""le"", 8))
);

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""),","[ 3.16072889e-02  7.50760138e-02 -5.87255433e-02 -1.05441352e-02
 -9.46457162e-02 -4.05659452e-02  2.83744521e-02  9.12227109e-02
 -4.27754112e-02  3.06684338e-02  3.03909015e-02 -3.73407751e-02
 -9.43210907e-03 -6.01010174e-02  1.92599129e-02  3.33714951e-03
 -5.96018508e-02  2.52930019e-02 -5.13844527e-02 -8.02121032e-03
  1.52542368e-01  3.40002961e-02  1.56839322e-02  2.76177675e-02
  4.18022051e-02 -1.57180075e-02 -5.36324875e-03  2.29664538e-02
  7.99914598e-02 -6.53618500e-02  6.42044023e-02 -2.39749569e-02
  6.82881940e-03  2.08845246e-03  5.80990054e-02  9.05963182e-02
  3.30716856e-02 -1.44391268e-01  1.16178188e-02 -4.40457277e-02
 -5.44069335e-02  6.45795837e-02 -4.86980937e-02  1.11457415e-01
 -1.03914393e-02  5.13725206e-02 -1.18139331e-04 -1.10283878e-03
  1.46850646e-02  3.79009987e-03  3.93324904e-02  5.53089716e-02
  6.01840671e-03  3.90189365e-02 -1.80263408e-02 -1.97022986e-02
  4.40522097e-02 -5.18219918e-02  4.37850989e-02  2.67514866e-02
 -5.48077226e-02  2.88924612e-02  9.12044793e-02 -3.73536386e-02
 -3.22709903e-02 -1.03937825e-02 -9.95366555e-03 -2.19536219e-02
 -1.41653810e-02 -3.36420275e-02 -2.78778784e-02 -6.81031942e-02
 -1.14657380e-01  7.69317746e-02 -5.77641353e-02  3.62006128e-02
  3.76149011e-03  3.92673723e-02 -3.44952121e-02 -5.04729077e-02
 -6.11279421e-02 -4.68599536e-02  7.00832531e-02  9.31419581e-02
  2.76294220e-02 -1.32596241e-02  1.62463635e-02  5.63200861e-02
  9.02977511e-02  6.55651540e-02 -5.95243089e-03  1.02035152e-02
  5.63575793e-03 -2.62956414e-02  1.18976966e-01  9.31675825e-03
  3.39659303e-02 -7.10129961e-02 -6.35455921e-02  6.02256656e-02
 -1.30311986e-02  2.37597413e-02  8.83093919e-04  1.11241499e-02
 -3.55692673e-03 -1.24233635e-03  8.23516399e-02  7.08227605e-03
 -8.21933150e-02 -4.49386351e-02  4.71627712e-02  7.41009936e-02
 -2.34173816e-02  2.51295194e-02  1.09982248e-02  4.87966649e-03
 -5.42773046e-02 -2.08451636e-02  1.60961878e-02  6.60122335e-02
  9.25350711e-02  7.36953691e-02 -6.62446246e-02  6.71389028e-02
 -9.52601656e-02 -2.54433118e-02 -3.17930654e-02  3.52133182e-33
 -4.19739522e-02  2.61073206e-02 -5.28238788e-02 -1.50906947e-02
 -7.02562481e-02  1.64247472e-02  2.86621880e-02  6.59611151e-02
 -9.03109983e-02  6.69146702e-02 -2.11703852e-02 -4.46139649e-02
  4.34971303e-02  2.29923744e-02  4.25261706e-02 -5.14118783e-02
  4.64870520e-02  2.93893199e-02  8.90790895e-02  1.20151658e-02
  2.59293243e-02  8.68013501e-03 -6.47098720e-02 -6.61361814e-02
  2.95976140e-02  1.45109231e-02 -8.03660974e-02 -1.86371878e-02
 -4.86733421e-04 -1.91801284e-02 -2.07316391e-02 -6.85425103e-02
 -2.66970992e-02 -3.02369110e-02  1.27201974e-01 -7.76725486e-02
  3.80436145e-02  1.58701409e-02 -4.38964777e-02 -3.79558876e-02
  8.29909071e-02  1.91503298e-02 -4.74102460e-02  2.67870389e-02
 -2.33763345e-02 -8.63803271e-03  4.20010742e-03 -9.51318070e-03
  9.49747041e-02  6.24110131e-03 -4.54004854e-02  5.14217876e-02
 -5.10722287e-02 -6.97832927e-02  3.06480168e-03 -1.03963032e-01
  4.39606123e-02 -2.41229981e-02  1.66878458e-02 -2.36648750e-02
  2.71834928e-04  6.05811924e-02  1.61831938e-02  2.16516554e-02
 -3.59191070e-03  9.01739858e-03 -4.61985283e-02  1.80305522e-02
 -1.98609028e-02 -2.32287198e-02 -1.14311621e-01  2.46137604e-02
  4.07226710e-03  4.48236130e-02 -8.90578255e-02 -5.65994568e-02
  9.59514547e-03 -7.25212917e-02 -5.85672818e-02 -8.24202597e-02
  4.82575297e-02 -1.05929747e-03 -6.38177022e-02  1.36638507e-02
  9.06475913e-03  6.55562654e-02 -8.95403046e-03  2.10951157e-02
 -3.31594013e-02  1.12588825e-02  5.15036471e-02 -1.20049357e-01
 -5.73182618e-03 -5.00148945e-02 -4.90695350e-02 -5.30602832e-33
  1.06762759e-02 -1.87088829e-02  5.89500600e-03  1.55115174e-02
 -4.92043644e-02 -2.93804500e-02  1.07335843e-01  1.21834464e-02
 -3.71370874e-02  2.09399275e-02 -6.22820444e-02  4.73694541e-02
  3.87974270e-02 -9.48584988e-04  6.55777603e-02 -9.49721597e-03
 -1.44515753e-01 -1.23262266e-02  1.10086374e-01  3.84123549e-02
 -3.14133838e-02  9.16787386e-02  3.59217227e-02  3.67975682e-02
  3.31649929e-03  6.06919751e-02  3.66095896e-03  8.33356008e-02
  1.14275971e-02 -1.89164076e-02  3.25198174e-02 -7.68153965e-02
  6.44256826e-03  5.59264868e-02 -5.46590351e-02 -1.16926581e-01
  4.33493294e-02  4.40730043e-02 -6.34400034e-03  4.55604866e-02
  1.14695914e-01 -5.78309931e-02 -1.71963628e-02 -1.62931271e-02
  4.17785486e-03  3.13343629e-02  5.51043684e-03  2.20261998e-02
 -4.59135137e-02 -2.27082074e-02  2.65490059e-02  2.52599102e-02
 -8.23518187e-02  2.90740319e-02 -2.51678489e-02  6.18169492e-04
  1.18753999e-01 -2.77157407e-02  7.52459243e-02 -1.12631276e-01
 -1.96319185e-02 -4.31378856e-02  9.55676585e-02 -7.16292346e-03
  3.67331281e-02 -2.11965125e-02 -4.67977300e-02 -1.96032487e-02
 -5.26556969e-02  3.82958986e-02  1.50332344e-03 -3.48402709e-02
  7.08956718e-02 -2.61057764e-02  4.42649461e-02  5.74361645e-02
  1.14490930e-02 -5.57703599e-02  6.19089650e-03  2.13731974e-02
 -5.54219261e-02  6.18140027e-02  1.38985356e-02  6.66599795e-02
 -4.50541731e-03 -4.29672189e-02  1.78059284e-02 -6.50724862e-03
 -8.48083645e-02 -1.02929473e-02 -7.09793493e-02 -1.74371116e-02
 -2.16348190e-02 -2.40259822e-02 -1.32999904e-02 -6.16089793e-08
 -1.46136014e-02 -6.31817579e-02  3.70762162e-02  1.00304238e-01
  5.24997748e-02 -4.69823256e-02 -4.08308841e-02 -6.80811405e-02
 -4.81664715e-03 -4.21199985e-02 -9.43787303e-03  2.98525300e-02
 -4.81258631e-02 -8.68349820e-02 -1.28888618e-02  1.00063151e-02
  6.92060776e-03 -1.22817699e-02 -1.52751068e-02 -5.44044860e-02
 -5.79151511e-02 -3.14048566e-02  1.98804401e-02 -2.82204524e-02
 -2.61867978e-02  3.18122469e-02  2.47536488e-02  1.44115284e-01
  6.40199184e-02 -1.01358056e-01  6.91705644e-02 -4.39916825e-04
  2.46529933e-02 -1.53923407e-02 -4.01585698e-02 -2.01699790e-02
 -4.28114347e-02  3.71178761e-02  7.95020983e-02 -3.94367874e-02
 -2.30048206e-02  3.21340375e-02 -3.63753438e-02  4.05131169e-02
  6.30275719e-03 -1.86901242e-02 -6.54707476e-02  8.43835878e-04
  4.47198749e-02  2.51498315e-02  1.24841556e-02 -4.03490327e-02
 -3.50273512e-02  1.17502712e-01 -5.89355975e-02 -3.84119488e-02
 -5.43669611e-02 -6.58477023e-02 -1.03475600e-01  5.37388884e-02
  7.04914406e-02  5.36763947e-03 -3.05976160e-02 -8.71122703e-02]"
"""confirmed"");
  const programId = new PublicKey(
    ""DkuQ5wsndkzXfgqDB6Lgf4sDjBi4gkLSak1dM5Mn2RuQ""
  );

  // Airdropping some SOL
  await connection.confirmTransaction(
    await connection.requestAirdrop(PAYER_KEYPAIR.publicKey, LAMPORTS_PER_SOL)
  );

  // Our program's CPI instruction (create_account)
  const createAccountIx = new TransactionInstruction({
    programId: programId,
    data: ACCOUNT_SPACE_BUFFER,
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: true,
        isWritable: true,
        pubkey: GENERAL_STATE_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: SystemProgram.programId,
      },
    ],
  });

  const transaction = new Transaction();
  // Adding up all the above instructions
  transaction.add(createAccountIx);

  const txHash = await connection.sendTransaction(transaction, [
    PAYER_KEYPAIR,
    GENERAL_STATE_KEYPAIR,
  ]);

  console.log(`Create Account CPI Success: ${txHash}`);
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""DkuQ5wsndkzXfgqDB6Lgf4sDjBi4gkLSak1dM5Mn2RuQ""
  );

  // Airdropping some SOL
  await connection.confirmTransaction(
    await connection.requestAirdrop(PAYER_KEYPAIR.publicKey, LAMPORTS_PER_SOL)
  );

  // Our program's CPI instruction (create_account)
  const creataAccountIx = new TransactionInstruction({
    programId: programId,
    data: ACCOUNT_SPACE_BUFFER,
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: true,
        isWritable: true,
        pubkey: GENERAL_STATE_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: SystemProgram.programId,
      },
    ],
  });

  const transaction = new Transaction();
  // Adding up all the above instructions
  transaction.add(creataAccountIx);

  const txHash = await connection.sendTransaction(transaction, [
    PAYER_KEYPAIR,
    GENERAL_STATE_KEYPAIR,
  ]);

  console.log(`Create Account CPI Success: ${txHash}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445# How to create a PDAA Program Derived Address is simply an account owned by the program, but has no private key. Instead it's signature is obtained by a set of seeds and a bump (a nonce which makes sure it's off curve). ""Generating"" a Program Address is different from ""creating"" it. One can generate a PDA using Pubkey::find_program_address. Creating a PDA essentially means to initialize","[-1.06420122e-01 -3.42577621e-02 -5.07696904e-02  6.27297014e-02
 -8.59519059e-04 -5.91134764e-02  9.69187021e-02  5.35010472e-02
  2.49044579e-02  8.34909976e-02  9.20280069e-02 -2.83004809e-02
 -4.09992412e-02 -3.22484560e-02 -3.51697318e-02  1.55831722e-03
 -9.05722380e-02 -9.20737013e-02 -3.65630239e-02  2.81166993e-02
  3.60866375e-02 -1.42881796e-01  2.84654796e-02 -5.16643487e-02
  7.65092745e-02 -7.68957213e-02  1.30175771e-02  9.00278986e-03
 -1.00334678e-02 -9.31286346e-03  1.09734155e-01  8.05297047e-02
 -2.56955549e-02 -9.64701734e-03  1.20647848e-02  5.94111532e-02
  4.36816774e-02 -4.06990834e-02 -2.10184474e-02 -6.05150834e-02
 -6.80869736e-04  2.66771987e-02 -7.94329569e-02  1.22516632e-01
  2.42267381e-02  4.28281771e-03  3.51616181e-02  7.46245757e-02
 -3.36024881e-04  5.05295470e-02 -4.04528640e-02  7.89923519e-02
 -1.79894958e-02  6.83435649e-02 -9.00960192e-02  8.54966193e-02
  3.60583840e-03  2.37830505e-02  2.69497987e-02 -2.44668555e-02
  5.14783822e-02  2.81637963e-02 -3.35908495e-03 -5.32559752e-02
 -4.89354953e-02  7.22720847e-02  2.13727318e-02 -6.16582185e-02
  1.95457693e-02 -2.01410521e-02  6.52061775e-03  2.08032783e-03
 -7.49553666e-02  3.31309065e-02 -8.73234347e-02 -5.09616956e-02
  5.32458862e-03 -2.38320362e-02 -1.02374747e-01  5.24728186e-02
  2.29172148e-02 -3.84073555e-02 -6.19215891e-03  8.26168060e-03
 -3.96687575e-02  5.46247177e-02  9.15426482e-03 -5.27697988e-02
  1.06354048e-02 -4.43476178e-02  2.53172014e-02 -2.74016112e-02
 -4.76032384e-02 -3.32998559e-02  7.03097060e-02  5.31399436e-02
  2.74607372e-02 -2.81389547e-03 -5.31347618e-02  2.66749859e-02
  4.03419621e-02 -2.41506808e-02 -3.40671316e-02  1.39971660e-03
  7.41535157e-04 -1.50314486e-02  9.06287804e-02 -9.02889371e-02
 -8.07532594e-02  4.00509201e-02 -3.37428250e-03  5.72614484e-02
  9.85349901e-03  1.80619285e-02 -2.54128836e-02  1.87975749e-01
 -5.92414625e-02  1.23080714e-02  1.60855930e-02  1.17369471e-02
  1.47533398e-02  8.19963217e-02 -2.12536044e-02 -1.00805135e-02
 -4.70424518e-02 -2.35426482e-02 -3.16838697e-02  1.02838233e-32
 -3.48256864e-02  1.09059233e-02 -3.37755196e-02 -6.09294232e-03
 -7.51604093e-03 -5.31256311e-02  1.12752393e-01  2.03242768e-02
 -8.44979212e-02  2.10485589e-02 -1.07239470e-01 -9.86668989e-02
  2.69724615e-02 -4.47049513e-02  3.37962643e-03 -3.69279347e-02
  9.96462652e-04  7.36580342e-02  1.06973104e-01  6.15958869e-02
  4.69447765e-03 -4.76395153e-02 -1.33297201e-02  2.66318233e-03
  4.91223894e-02  3.20678353e-02 -9.53945145e-02  1.02076866e-02
  1.20615102e-01 -5.22089330e-03  1.51579231e-02  1.64594185e-02
 -1.89204775e-02  6.26519546e-02  4.67776172e-02  2.05307659e-02
 -3.51609923e-02 -1.62714422e-02 -6.84320554e-02 -5.32769933e-02
  4.25011069e-02 -3.47883850e-02 -9.35004726e-02  3.10571957e-02
 -5.29718585e-02 -5.43072484e-02 -5.86265959e-02 -3.08811329e-02
  7.28496313e-02  2.39365939e-02 -7.12372363e-02  1.13834562e-02
 -8.64533987e-03 -6.79726005e-02  7.39830956e-02 -2.43926849e-02
  3.75372265e-03  1.09957466e-02  3.96398045e-02  7.32666487e-03
 -9.27558169e-03 -3.36449370e-02 -3.77592742e-02 -2.34927405e-02
  6.74409280e-03 -2.45633945e-02 -7.42879808e-02  2.24951692e-02
 -1.28741898e-02 -5.39964589e-04 -8.93897042e-02  5.79242259e-02
 -8.45228974e-03  5.26240394e-02  3.46896239e-02 -3.48795690e-02
 -2.60103513e-02 -3.09493933e-02 -1.47319119e-02 -1.08645119e-01
  2.29532868e-02  1.93485003e-02  3.98124335e-03  3.31105664e-02
  3.67285730e-03  9.35336873e-02 -8.47860891e-03  6.24693036e-02
 -6.11670874e-03  3.13142091e-02  7.28032412e-03 -3.04163415e-02
  8.82705394e-03 -8.50180909e-02  3.95795964e-02 -1.07348098e-32
 -3.43026817e-02 -3.79498675e-02 -1.22043028e-01  4.86648902e-02
 -2.06935275e-02  7.66610056e-02  2.43856777e-02  1.16685722e-02
 -1.59639604e-02 -9.79067665e-03 -1.71775185e-02  5.44538088e-02
  1.16095068e-02 -1.39589133e-02  3.27525139e-02 -6.67578354e-02
 -2.90207863e-02 -1.15562929e-02  6.34245053e-02  1.35258380e-02
  2.85919732e-03  4.88868263e-03 -1.22423545e-02  3.94444279e-02
 -9.48001444e-02  1.58345811e-02 -1.66372943e-03  9.94009003e-02
 -1.84297655e-02  1.05714146e-02  3.74036580e-02  4.07413244e-02
 -7.14428723e-02  8.82262290e-02  1.37892840e-02 -1.10835239e-01
  1.36097195e-02  5.63070141e-02 -2.31828522e-02  3.48011218e-02
  5.25354631e-02 -6.85082674e-02 -2.27906872e-02  1.03067597e-02
  9.16784070e-03 -6.45713136e-02  1.85537823e-02 -4.74424548e-02
  3.98979224e-02 -3.61451209e-02  1.56121403e-02 -1.14371786e-02
 -3.43076736e-02  3.06627788e-02  3.22903730e-02  8.69985297e-02
  1.34875417e-01 -2.62078848e-02  5.46967722e-02 -1.31403916e-02
  3.45599130e-02 -5.48407324e-02  4.73122187e-02  1.11774460e-03
  1.15770102e-01 -5.16393892e-02  7.93772563e-03  6.04033768e-02
  2.12253984e-02  2.88527291e-02 -2.41509974e-02 -4.04921435e-02
  3.23186256e-02  1.29349483e-02  1.12280168e-01 -1.52720499e-03
 -2.45402940e-02  4.33454197e-03  1.53713848e-03  5.06080687e-02
  1.28661077e-02  4.37492039e-03 -1.37419431e-02  6.75621768e-03
 -2.85839313e-03 -6.05059229e-02  1.58159602e-02  1.91722382e-02
 -5.65472022e-02 -8.46946426e-03 -3.94467935e-02 -6.92380071e-02
 -2.94083450e-02 -1.66612118e-02 -1.72962416e-02 -6.90817146e-08
  1.28779979e-02  7.23511353e-02 -2.64218599e-02  5.21561354e-02
  4.86876257e-02  5.79086281e-02  1.76944342e-02 -4.58224788e-02
 -3.99687923e-02 -1.45199344e-01 -9.98587087e-02  2.90560089e-02
 -3.45687591e-03  4.82901260e-02  6.98741600e-02 -9.63480100e-02
 -6.58951104e-02 -7.40531087e-02 -4.89553027e-02 -7.07370639e-02
  2.45322939e-03 -2.67789140e-02 -3.09398603e-02 -1.12753594e-02
 -9.71095450e-03  2.17440724e-02  1.54168442e-01  1.29996389e-01
  4.15801331e-02  2.09698770e-02 -8.49606097e-02 -1.81176066e-02
  1.34120602e-02 -2.92507019e-02 -5.85464947e-02  6.21902384e-02
  4.63315658e-02  1.37610012e-03  4.55649160e-02  1.56558715e-02
  5.61596127e-03  3.25161815e-02 -9.25704166e-02 -1.38579821e-02
 -2.74022445e-02  6.07015006e-02 -4.86194678e-02 -3.54126352e-03
  3.36739197e-02  6.33737221e-02 -4.87107225e-02 -4.68902811e-02
 -2.11208477e-04  8.08634534e-02 -9.73395538e-03  1.38238573e-03
 -4.65673059e-02 -1.89177748e-02 -1.75733473e-02 -2.43410505e-02
  5.52042089e-02 -2.31937096e-02 -5.72306775e-02 -2.30660085e-02]"
"the address with space and set the state to it. A normal Keypair account can be created outside of our program and then fed to initialize it's state. Unfortunately, for PDAs, it has be created on chain, due to the nature of not being able to sign on behalf of itself. Hence we use invoke_signed to pass the seeds of the PDA, along with the funding account's signature which results in account creation of a PDA.RustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    program::invoke_signed,
    program_error::ProgramError,
    pubkey::Pubkey,
    rent::Rent,
    system_instruction,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
/// 1. [signer, writable] Funding account
/// 2. [writable] PDA account
/// 3. [] System Program
pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    const ACCOUNT_DATA_LEN: usize = 1;

    let accounts_iter = &mut accounts.iter();
    // Getting required accounts
    let funding_account = next_account_info(accounts_iter)?;
    let pda_account = next_account_info(accounts_iter)?;
    let system_program = next_account_info(accounts_iter)?;

    // Getting PDA Bump from instruction data
    let (pda_bump, _) = instruction_data
        .split_first()
        .ok_or(ProgramError::InvalidInstructionData)?;

    // Checking if passed PDA and expected PDA are equal
    let signers_seeds: &[&[u8]; 3] = &[
        b""customaddress"",
        &funding_account.key.to_bytes(),
        &[*pda_bump],
    ];
    let pda = Pubkey::create_program_address(signers_seeds, program_id)?;

    if pda.ne(&pda_account.key) {
        return Err(ProgramError::InvalidAccountData);
    }

    // Assessing required lamports and creating transaction instruction
    let lamports_required = Rent::get()?.minimum_balance(ACCOUNT_DATA_LEN);
    let create_pda_account_ix = system_instruction::create_account(
        &funding_account.key,
        &pda_account.key,
        lamports_required,
        ACCOUNT_DATA_LEN.try_into().unwrap(),
        &program_id,
    );
    // Invoking the instruction but with PDAs as additional signer
    invoke_signed(
        &create_pda_account_ix,
        &[
            funding_account.clone(),
            pda_account.clone(),
            system_program.clone(),
        ],
        &[signers_seeds],
    )?;

    // Setting state for PDA
    let mut pda_account_state = HelloState::try_from_slice(&pda_account.data.borrow())?;
    pda_account_state.is_initialized = true;
    pda_account_state.serialize(&mut &mut pda_account.data.borrow_mut()[..])?;

    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081let","[-1.17703661e-01 -6.85284473e-03 -1.43891931e-01 -2.59300619e-02
 -7.99197704e-02 -7.57273287e-02  1.71848002e-03  6.35492429e-02
 -2.41114683e-02 -1.22516677e-02 -2.04433035e-02 -8.38898346e-02
  1.59507729e-02 -8.08332190e-02  3.96578424e-02  5.18015102e-02
 -8.86550024e-02 -6.58054575e-02  2.66923066e-02  4.04212959e-02
  4.83671129e-02 -1.75814480e-02 -1.82974513e-03  4.53091115e-02
 -4.69978116e-02 -3.10909189e-02  5.40928505e-02  1.48737868e-02
 -6.67122193e-03  5.66019816e-03  8.68124515e-02  3.86322550e-02
  1.34470146e-02 -2.55152918e-02  7.46539235e-02  1.50609955e-01
  7.68201947e-02  2.06921510e-02 -3.68086547e-02 -4.77287583e-02
  1.67049270e-03  5.24252094e-02 -4.78403680e-02 -7.16303301e-04
  1.55286333e-02 -6.27098307e-02  3.79597694e-02  4.84696776e-02
  1.61466785e-02 -1.29715316e-02 -2.74597071e-02  2.95053963e-02
  1.32549945e-02  2.59069148e-02 -1.01724491e-02  6.23942539e-02
  6.39690831e-02  2.98786778e-02  1.03082648e-02  9.54051688e-03
 -5.88319823e-03  4.71786931e-02  3.53161953e-02 -4.26090695e-02
 -1.23677207e-02  3.13253179e-02 -1.76199041e-02  2.33069621e-03
 -2.47755889e-02 -3.85317653e-02  1.16367703e-02 -6.87670410e-02
 -1.01156309e-01  7.88331684e-03 -2.47348268e-02  9.94656235e-03
 -8.59923381e-03  2.04878543e-02  4.95734140e-02 -5.13502322e-02
  3.95884104e-02  1.05233388e-02 -4.93959198e-03  3.25080380e-02
 -4.97332849e-02  6.35951683e-02 -7.63561502e-02 -1.37895957e-01
  1.18212447e-01  6.69098869e-02  4.17785421e-02 -9.19311494e-02
 -4.40246314e-02 -7.23961741e-02  1.25564829e-01  3.79348285e-02
  8.57200921e-02 -1.92462578e-02 -3.28958668e-02  8.58897269e-02
  1.28358630e-02 -3.42056006e-02 -5.65921962e-02 -7.56039564e-03
  2.91068722e-02  2.96757594e-02  7.65120834e-02 -2.27802601e-02
 -3.47488672e-02  8.43438506e-02  3.65780517e-02  3.82921062e-02
  3.89159881e-02 -2.17355546e-02  1.22477459e-02  2.68616490e-02
 -2.94914357e-02  1.63993649e-02  3.59591991e-02 -6.90447399e-03
  1.92114357e-02  1.13529479e-02 -4.27538790e-02 -2.65135914e-02
 -2.66730357e-02 -3.05829644e-02 -1.40425209e-02  5.83229053e-33
  5.56894913e-02 -2.11938899e-02 -2.57565100e-02  3.11046541e-02
 -3.16695422e-02  1.86933670e-02  4.77487333e-02  1.77567322e-02
 -9.03502479e-02  3.59519967e-03 -2.10232139e-02 -3.11598890e-02
 -9.06366296e-03 -5.66025861e-02 -4.85244766e-02 -3.61462124e-02
 -1.70530044e-02  4.65035848e-02  8.83605890e-03  2.43783183e-03
  2.58327257e-02  3.16878147e-02 -1.84905659e-02 -6.09740764e-02
  6.18847609e-02  3.30870263e-02 -9.24612880e-02  2.73063942e-03
 -3.79466191e-02 -1.11151533e-02 -2.02991925e-02 -3.15330699e-02
 -4.14021797e-02 -1.80879440e-02  2.38055792e-02 -8.33872780e-02
 -3.48981796e-03 -4.74498086e-02 -1.08991981e-01 -1.04875542e-01
  7.80728310e-02  2.94050779e-02  1.94167960e-02  2.45925169e-02
 -2.84296889e-02 -2.17313925e-03 -2.18825415e-02  3.68234180e-02
  5.07405177e-02  5.81872184e-03 -5.30023500e-02 -8.30213726e-03
 -1.05395630e-01  1.20698521e-03 -2.23063845e-02 -7.17576370e-02
 -5.66781387e-02 -6.27487451e-02  4.87139784e-02 -7.06544472e-03
 -2.04617232e-02  2.60436106e-02  2.96009816e-02 -1.12008397e-02
 -9.67571512e-03 -6.37731329e-02 -6.82331026e-02  8.79692361e-02
  4.55257185e-02 -2.14999374e-02 -3.26551646e-02  2.74447165e-02
 -6.30804673e-02  9.76148769e-02 -2.47632223e-03 -8.30051079e-02
  7.63313845e-02  5.58266379e-02 -7.02069849e-02 -2.57071313e-02
  4.59843175e-03 -3.91796678e-02  4.11454542e-03  1.46191135e-01
 -3.21276151e-02  6.52757362e-02  2.74576116e-02 -5.87713905e-02
 -1.10147424e-01 -6.46196306e-02  3.73175517e-02 -3.18180919e-02
  3.27666514e-02 -2.84657981e-02 -6.28648847e-02 -9.02140266e-33
  4.06569205e-02 -8.35234299e-02  5.26980218e-03 -1.34344205e-01
 -2.83984561e-02 -3.11408117e-02  2.82049389e-03 -2.94677634e-02
 -7.37037361e-02 -5.37181739e-03 -6.08558282e-02  9.85010900e-03
  6.85936958e-02  1.47594186e-02  1.20223872e-02  3.10093310e-04
  3.24826352e-02  1.76360290e-02 -3.61928158e-02  1.91564467e-02
 -4.88542356e-02  4.09270823e-02 -7.35396845e-03  1.04475208e-03
  7.06793740e-03 -7.24307597e-02 -2.97067557e-02  1.01299047e-01
 -2.17193663e-02  4.72018309e-02  7.78992921e-02  2.31998321e-02
 -9.13816094e-02  9.39737633e-02 -1.05835520e-01 -4.28784080e-02
  7.79310614e-03  1.47876507e-02 -2.44282857e-02  5.46668693e-02
  1.16128989e-01 -3.36824022e-02 -6.43737167e-02  8.99697319e-02
 -1.08605055e-02  3.96419838e-02  3.33289206e-02 -1.61353536e-02
 -7.83451349e-02  5.26220798e-02  3.05169113e-02 -3.59598249e-02
  9.06234328e-03 -5.94755029e-03 -9.73413605e-03  1.53822917e-02
  1.16990283e-01 -1.01399571e-02  1.56376790e-02 -2.27823537e-02
  6.28561005e-02 -3.66212353e-02  2.45500021e-02  5.89841567e-02
  6.85599539e-03 -4.80220690e-02  2.59418017e-03  4.41356674e-02
  1.97708681e-02 -3.54062021e-02  8.44577253e-02 -3.32701094e-02
 -1.61309559e-02  7.80514479e-02  5.52615784e-02  4.75915186e-02
  4.33868691e-02 -1.61554888e-02 -6.81776379e-04 -9.89658106e-03
 -1.10982269e-01 -5.28522581e-03  6.37411792e-03  3.21982917e-03
  4.44797538e-02 -3.96470279e-02  6.42737970e-02 -3.43787903e-03
 -7.28883967e-02  6.40253872e-02 -6.79011121e-02  1.06282765e-03
  3.46107781e-02  3.33534367e-02  1.37724178e-02 -6.23717256e-08
 -6.43703043e-02 -1.07706767e-02 -3.58892195e-02  7.56160319e-02
 -7.43849650e-02  3.02810110e-02 -2.97247786e-02 -1.02532752e-01
 -4.66918238e-02 -6.88174069e-02 -8.94984528e-02  8.81118998e-02
 -7.08452761e-02 -6.26340285e-02 -3.01786847e-02 -7.94996507e-03
  5.68803679e-03  2.33363248e-02 -6.15659021e-02 -4.52374630e-02
  3.88150252e-02 -2.33837813e-02 -8.03720132e-02 -8.52598250e-03
 -1.64167061e-02 -1.74216907e-02  2.47870311e-02  1.05076976e-01
  7.80045241e-02 -1.26436269e-02  6.63665161e-02  2.25386396e-02
  2.94551905e-02  1.19607430e-02 -2.95272898e-02  4.95671891e-02
 -4.02753167e-02  3.89708281e-02 -1.25094699e-02  9.77429096e-03
 -7.58908764e-02  6.67917281e-02 -5.14378883e-02 -4.41227518e-02
 -6.27856478e-02  4.86934111e-02 -6.67395443e-02  4.47160862e-02
  1.22711226e-01  5.82642155e-03 -2.65547633e-03 -4.16635349e-02
  7.12641403e-02  9.41675678e-02  6.82220161e-02  1.40534611e-02
 -6.93538040e-02  1.87359359e-02  4.04217280e-02  1.72770936e-02
  2.57033668e-03  2.51994077e-02 -1.35954712e-02  2.45718062e-02]"
"create_pda_account_ix = system_instruction::create_account(
    &funding_account.key,
    &pda_account.key,
    lamports_required,
    ACCOUNT_DATA_LEN.try_into().unwrap(),
    &program_id,
);

invoke_signed(
    &create_pda_account_ix,
    &[funding_account.clone(), pda_account.clone()],
    &[signers_seeds],
)?;
12345678910111213One can send the required accounts via client as followsTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";

const PAYER_KEYPAIR = Keypair.generate();

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""6eW5nnSosr2LpkUGCdznsjRGDhVb26tLmiM1P8RV1QQp""
  );

  // Airdop to Payer
  await connection.confirmTransaction(
    await connection.requestAirdrop(PAYER_KEYPAIR.publicKey, LAMPORTS_PER_SOL)
  );

  const [pda, bump] = await PublicKey.findProgramAddress(
    [Buffer.from(""customaddress""), PAYER_KEYPAIR.publicKey.toBuffer()],
    programId
  );

  console.log(`PDA Pubkey: ${pda.toString()}`);

  const createPDAIx = new TransactionInstruction({
    programId: programId,
    data: Buffer.from(Uint8Array.of(bump)),
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: pda,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: SystemProgram.programId,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(createPDAIx);

  const txHash = await connection.sendTransaction(transaction, [PAYER_KEYPAIR]);
  console.log(`Created PDA successfully. Tx Hash: ${txHash}`);
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859const PAYER_KEYPAIR = Keypair.generate();

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""6eW5nnSosr2LpkUGCdznsjRGDhVb26tLmiM1P8RV1QQp""
  );

  const [pda, bump] = await PublicKey.findProgramAddress(
    [Buffer.from(""customaddress""), PAYER_KEYPAIR.publicKey.toBuffer()],
    programId
  );

  const createPDAIx = new TransactionInstruction({
    programId: programId,
    data: Buffer.from(Uint8Array.of(bump)),
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: pda,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: SystemProgram.programId,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(createPDAIx);

  const txHash = await connection.sendTransaction(transaction, [PAYER_KEYPAIR]);
})();
12345678910111213141516171819202122232425262728293031323334353637383940# How to read accountsAlmost all instructions in Solana would require atleast","[-1.05708510e-01 -1.13435620e-02 -1.60527751e-01 -2.66118813e-02
 -2.57314858e-03 -7.33968988e-02 -1.59538258e-02  5.09057008e-02
 -1.15408581e-02  4.70459238e-02  3.49065848e-02 -8.33290592e-02
  1.12172375e-02 -8.40242580e-02  3.45537588e-02  4.17793579e-02
 -7.47092441e-02 -1.13110006e-01  3.17935459e-02 -2.10939590e-02
  3.20793241e-02 -1.11771472e-01  7.27842283e-03 -2.52903700e-02
  1.95703134e-02 -5.60929216e-02  3.26179154e-02 -1.87134687e-02
 -1.91102680e-02  4.33407761e-02  8.78921598e-02  3.79474871e-02
 -4.83929329e-02 -1.26716178e-02  4.64496538e-02  1.31346598e-01
  7.64440326e-03 -4.50106598e-02 -2.65433192e-02 -5.86306734e-04
  2.83954330e-02  3.71774584e-02 -8.62706080e-02  1.81300528e-02
 -3.87239791e-02 -7.98142478e-02 -6.10272922e-02  7.04596937e-02
  1.13628963e-02 -3.50700542e-02 -5.80621958e-02 -3.24097425e-02
 -2.87584662e-02  4.37006541e-02 -9.80228037e-02  5.49943000e-02
  3.68534215e-02  2.41987519e-02  3.60837206e-02  3.24328314e-03
  2.35190652e-02  2.95260828e-02  6.66957200e-02 -3.77606526e-02
 -1.22490712e-02  8.22564494e-03 -4.19393219e-02 -1.49055826e-03
 -1.65552255e-02 -2.65300535e-02 -1.98509283e-02 -4.12208661e-02
 -1.18260562e-01 -1.74115654e-02 -4.40983698e-02 -2.52943188e-02
 -1.57156009e-02  9.93328765e-02 -1.89021474e-03 -1.71116297e-03
 -2.96795666e-02  7.64895929e-03  1.77796446e-02  8.22263956e-02
 -2.82475073e-02  8.89691338e-02 -4.02794443e-02 -1.03761638e-02
  6.09233789e-02 -3.75737175e-02 -4.00420986e-02  8.28178786e-03
 -5.65203764e-02 -3.54435444e-02  4.70001958e-02  3.89749594e-02
  5.19063808e-02 -2.10263841e-02 -1.31328860e-02  9.14393216e-02
  4.25111204e-02 -7.01862723e-02 -3.14767472e-02 -2.72040106e-02
 -4.33486775e-02 -1.92387979e-02  6.74063265e-02 -8.31184722e-03
 -8.66565108e-03  9.44396853e-02 -2.61423606e-02  1.10764541e-01
  5.25929965e-03 -4.42270190e-03 -2.83637848e-02  4.87227291e-02
 -4.45792312e-03  3.90633289e-03  3.52007411e-02  4.59624501e-03
  6.69683665e-02  1.76019967e-02 -5.54570742e-02 -5.25983721e-02
  4.91313748e-02 -4.17859592e-02  2.24993378e-02  2.37730361e-33
  5.09799533e-02  4.77769499e-04 -4.54865862e-03  7.79705076e-03
  4.31653485e-03  2.97440533e-02  1.05329148e-01 -1.54096019e-02
 -1.01961307e-01 -1.04600312e-02 -8.41167644e-02 -2.82169990e-02
  2.37911791e-02 -3.88740934e-02 -1.20484687e-01 -5.25957718e-02
  2.40815952e-02  7.30533674e-02  7.90763497e-02 -2.04868359e-03
 -2.56436062e-03 -3.98080572e-02  4.97390740e-02 -2.73214802e-02
  3.59717719e-02  3.22894752e-02 -7.79706091e-02  5.63217700e-02
  5.61643438e-03 -2.11428069e-02  1.14977686e-02 -1.59272924e-02
  7.15005258e-03  2.99172997e-02  3.29264514e-02 -2.91622430e-02
  4.52166423e-03 -6.32334277e-02 -1.13657504e-01 -1.00229234e-02
  7.44954646e-02  1.43419327e-02  4.15678881e-02 -1.37692094e-02
 -5.56990169e-02  6.50044233e-02  1.82852130e-02  3.22291590e-02
  9.35964286e-02  1.50962379e-02 -1.33746609e-01 -3.44120972e-02
 -1.22502130e-02 -4.46361676e-02  1.02128815e-02 -3.16199437e-02
 -1.80998037e-03 -4.49256301e-02  8.35049152e-03 -6.54599667e-02
 -3.01440917e-02 -1.76784284e-02 -1.79164205e-02 -1.44090401e-02
  1.19627807e-02 -3.60129704e-03 -8.75506923e-02  7.12958723e-02
  5.08351251e-02 -4.33007181e-02 -4.79606986e-02  3.18834707e-02
 -6.01265617e-02  9.90677848e-02  3.26291397e-02 -4.56467308e-02
  2.04021297e-02  7.39304125e-02 -8.10667723e-02  3.97387370e-02
  1.65947080e-02 -3.21465768e-02 -4.69644293e-02  8.11432153e-02
  2.47408375e-02  6.71701655e-02  1.85186486e-03  1.18847582e-02
 -6.30524233e-02 -2.10004561e-02  4.93817404e-02 -2.23991405e-02
  1.65916625e-02 -5.59047684e-02 -2.45044176e-02 -4.80688917e-33
 -4.53881733e-02 -8.10866728e-02 -1.52767990e-02 -4.67558466e-02
  9.40702185e-02  2.65940633e-02  1.20441271e-02  9.16208886e-03
 -3.32332179e-02  4.17970121e-02  1.02416985e-02 -5.70077961e-03
  2.83900537e-02 -4.00800407e-02 -2.48111859e-02  2.35454477e-02
 -8.90992489e-03  4.33410238e-03  2.23483536e-02 -4.15678769e-02
 -4.72559594e-03  9.26735625e-02 -5.58109721e-04  1.67641882e-02
 -3.57384272e-02 -5.32519184e-02 -1.69253889e-02  8.42023939e-02
 -8.84703174e-02 -4.00998369e-02  8.48932862e-02  1.64853185e-02
 -1.17049173e-01  9.81582180e-02 -5.02327122e-02 -8.64521712e-02
  1.58153065e-02  8.65901485e-02 -8.05198029e-03  6.40578419e-02
  8.35945383e-02 -9.90566611e-02 -8.86569265e-03  8.09179991e-02
 -1.21204685e-02 -2.54156832e-02  5.12847677e-02 -1.93251763e-02
 -7.16374591e-02  9.79693532e-02 -2.07011513e-02 -6.63524121e-02
  3.39307450e-02 -1.37315691e-02  1.46920020e-02  6.38474599e-02
  1.18101396e-01  2.67676916e-02  9.39091817e-02 -3.18870842e-02
  6.54205307e-02 -8.87072235e-02  3.81948240e-02  6.69395104e-02
  4.03846540e-02 -7.32192919e-02  1.97001453e-02  6.31755590e-02
  6.12685010e-02  5.68647422e-02 -2.24909931e-02 -1.08178938e-03
  4.59597446e-02  2.42857579e-02  8.57381001e-02 -3.54838534e-03
 -5.18181175e-02 -6.03056978e-03  2.91935019e-02 -2.81150802e-03
 -1.91124026e-02 -1.09247975e-02  3.96360420e-02 -4.52826731e-03
  7.08943084e-02 -5.53670600e-02  7.69427493e-02 -2.53977906e-02
 -8.68508592e-02  1.24951750e-02 -7.11495355e-02 -3.00791375e-02
 -2.14579403e-02  2.35092770e-02  5.55649437e-02 -6.02855366e-08
 -1.36857452e-02  2.94208117e-02 -8.33000764e-02 -1.39354607e-02
 -1.66993700e-02  1.91334123e-03 -3.23544815e-02 -1.33909900e-02
 -4.40376215e-02 -2.69060880e-02 -3.85601781e-02  5.58899269e-02
 -3.11445016e-02  8.59416090e-03 -3.47259045e-02 -1.32061904e-02
  4.62476946e-02  4.76315059e-02 -4.47552139e-03 -7.60239586e-02
  2.73675136e-02 -6.86306432e-02  1.10581713e-02 -9.40380525e-03
  8.65494236e-02  9.29370988e-03  2.97329128e-02  1.46710515e-01
  2.72368174e-03 -6.70980662e-02 -6.36952966e-02  1.01951966e-02
  1.68187302e-02 -4.31416519e-02 -5.55167831e-02  2.41276305e-02
 -4.92814630e-02 -1.58810709e-02  3.11158616e-02 -1.61622204e-02
  4.13392112e-03  1.10416397e-01 -2.56790221e-02 -3.05183232e-02
 -4.17190678e-02  5.91243245e-02 -6.52789846e-02  4.00210135e-02
  7.64874145e-02  1.97376800e-03 -2.97313407e-02 -9.13661942e-02
  8.05302337e-02  4.24768776e-02 -4.16774349e-03 -3.60669829e-02
 -6.01916723e-02  5.09085022e-02  1.08669894e-02  1.74921434e-02
  7.04247504e-02  8.99078920e-02  1.68180838e-02 -4.94503118e-02]"
"2 - 3 accounts, and they would be mentioned over the instruction handlers on what order it's expecting those set of accounts. It's fairly simple if we take advantage of the iter() method in Rust, instead of manually indicing the accounts. The next_account_info method basically slices the first index of the iterable and returning the account present inside the accounts array. Let's see a simple instruction which expects a bunch of accounts and requiring to parse each of them.RustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    pubkey::Pubkey,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
/// 1. [signer] Payer
/// 2. [writable] Hello state account
/// 3. [] Rent account
/// 4. [] System Program
pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    // Fetching all the accounts as a iterator (facilitating for loops and iterations)
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;
    // Rent account
    let rent_account = next_account_info(accounts_iter)?;
    // System Program
    let system_program = next_account_info(accounts_iter)?;

    Ok(())
}
1234567891011121314151617181920212223242526272829303132333435363738pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    // Fetching all the accounts as a iterator (facilitating for loops and iterations)
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;
    // Rent account
    let rent_account = next_account_info(accounts_iter)?;
    // System Program
    let system_program = next_account_info(accounts_iter)?;

    Ok(())
}
123456789101112131415161718# How to verify accountsSince programs in Solana are stateless, we as a program creator have to make sure the accounts passed are validated as much as possible to avoid any malicious account entry. The basic checks one can do areCheck if the expected signer account has actually signedCheck if the expected state account's have been checked as writableCheck if the expected state account's owner is the called program idIf initializing the state for the first time, check if the account's already been initialized or not.Check if any cross program ids passed (whenever needed) are as expected.A basic instruction which initializes a hero state account, but with the above mentioned checks is defined belowRustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    clock::Clock,
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    pubkey::Pubkey,
    rent::Rent,
    system_program::ID as SYSTEM_PROGRAM_ID,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
///","[-8.02294537e-02  6.48019835e-03 -8.31912234e-02 -1.45154148e-02
 -3.78976353e-02 -8.82885903e-02  4.26513068e-02  1.74590722e-02
 -2.08796803e-02 -4.47208472e-02 -9.50477831e-03 -4.23065983e-02
  1.22250440e-02 -9.34305564e-02  1.74795166e-02  2.35865135e-02
 -1.41663462e-01 -2.15349682e-02  3.39764426e-03 -2.74118539e-02
  3.36578414e-02  2.15114541e-02  4.68163565e-03  2.92589217e-02
 -1.06145097e-02  2.85856482e-02 -1.64596308e-02  2.18486190e-02
 -8.40349868e-03 -4.17158846e-03  5.91653995e-02  2.02588942e-02
  1.72879137e-02 -2.39710119e-02  2.07293052e-02  4.84915748e-02
  2.24696063e-02  4.29461477e-03 -9.89013631e-03 -3.09974831e-02
 -4.50313464e-02  9.42654088e-02 -6.88980445e-02  8.78725108e-03
  5.00065647e-02 -2.16253158e-02  1.88057274e-02  9.59584303e-03
 -1.00497669e-02 -1.29043823e-02 -2.44327262e-02 -5.20127174e-03
  3.56589593e-02  3.96471731e-02  9.12463665e-03  2.82757692e-02
  7.56881479e-03 -6.50949776e-02  7.16076232e-03  6.69467226e-02
 -2.79858857e-02  1.18535934e-02 -1.20307028e-03 -4.18647677e-02
 -1.86432712e-03 -4.07888228e-03  6.32155803e-04  2.21967380e-02
 -2.43415702e-02 -2.27568522e-02  9.63489432e-03 -6.59253150e-02
 -1.38523519e-01  3.65191512e-02 -6.13008589e-02  2.08489653e-02
  2.16070339e-02 -1.25723630e-02 -3.06821149e-02 -9.40430164e-02
 -1.20323533e-02 -3.61234024e-02 -7.79698836e-04  3.09140999e-02
 -2.40870621e-02 -1.53596350e-03 -6.24349900e-02 -1.24820471e-01
  5.08729257e-02  1.18334711e-01  2.45885067e-02 -8.29008222e-02
 -2.42249835e-02 -4.50895876e-02  1.12958811e-01  6.77645430e-02
  5.83412908e-02  5.99973872e-02  1.26025872e-02  8.14639702e-02
 -2.02558842e-02 -9.59143788e-03  8.51106867e-02 -8.16422235e-03
 -5.49948029e-03 -4.66177091e-02  8.13571215e-02  2.54782004e-04
 -6.21723756e-02  2.94973459e-02  4.58413810e-02  4.70699966e-02
  2.87250616e-02  3.84493102e-03  3.59971896e-02  3.98762524e-02
  5.37239714e-03  6.51752278e-02  3.00174374e-02  5.07079065e-02
  6.66110292e-02  9.94525105e-02  6.92962855e-02 -3.89963645e-03
 -1.06829228e-02  2.33990736e-02 -2.50427108e-02  6.94997517e-33
  6.98920712e-02 -1.68210536e-03 -2.65115295e-02  2.53960956e-02
 -3.92090008e-02 -4.81146714e-03 -1.66935362e-02  3.35676782e-02
 -5.98924942e-02  8.49097148e-02 -1.61403026e-02 -3.62276845e-02
  6.36232644e-03 -4.61411551e-02 -7.49969063e-03 -4.35973853e-02
  2.25290209e-02  4.80505191e-02 -2.94012204e-02  3.44768874e-02
  4.25072275e-02  8.54869373e-03 -5.79307936e-02 -1.73364226e-02
  3.84795771e-04  2.13304628e-02 -6.05798624e-02 -2.37147301e-03
 -4.11717147e-02 -5.30637288e-03  1.73494369e-02 -4.99814190e-02
  5.52174635e-03 -1.75729170e-02  1.06089920e-01 -6.43735975e-02
  9.89239197e-03 -6.06280938e-02 -5.49868234e-02 -1.06888033e-01
  6.15509488e-02  9.61866602e-03  3.98965599e-03  2.81138327e-02
 -9.45074111e-03 -1.81830414e-02 -5.22313230e-02  9.70860124e-02
  3.69377360e-02  5.66302761e-02 -3.59322205e-02  4.19449732e-02
 -6.30181208e-02  5.49161956e-02  6.56960979e-02 -1.93261597e-02
  1.60232396e-03  6.68024970e-03  3.40402201e-02  9.30947363e-02
  1.63643397e-02  3.47790048e-02 -4.12484147e-02  2.33198497e-02
  7.73537625e-03 -2.57115569e-02 -8.30344930e-02  4.50866818e-02
  5.17305546e-02  2.92240805e-03 -2.98257861e-02  7.39329308e-02
 -6.38554394e-02  1.73291154e-02 -1.02915009e-02 -5.62863871e-02
  4.77263555e-02 -1.22875776e-02 -8.91697109e-02 -2.64964718e-02
  2.41234410e-03  3.38219665e-02 -1.33621192e-03  1.45509616e-01
 -9.60296467e-02  1.26844451e-01  5.48645258e-02 -5.11970557e-02
 -7.67698884e-02 -2.31504142e-02  7.93159083e-02 -3.78086157e-02
 -2.26449477e-03 -7.74495900e-02 -6.24855310e-02 -6.74031987e-33
  5.33751920e-02 -5.96600249e-02  2.81047709e-02 -1.27938673e-01
  1.42150829e-02 -6.45719543e-02  1.79603156e-02 -4.78759408e-02
 -2.05176845e-02 -2.42162589e-02 -6.74031377e-02  1.74381025e-02
  1.95815358e-02 -3.83848436e-02  8.01893994e-02  3.05536110e-02
  6.84181824e-02 -7.21473247e-02  7.68419076e-03 -3.60066742e-02
 -6.14290358e-03  7.87435994e-02  8.38498920e-02 -4.15233150e-02
 -9.59752221e-03 -3.64984497e-02  1.81076713e-02  8.80398601e-02
  6.99695060e-03  6.48840517e-02  6.01766780e-02 -4.38175462e-02
  4.33016643e-02  8.66278633e-02 -4.05879579e-02 -7.18586147e-02
  8.48397030e-04  5.96789047e-02 -1.89596473e-03  5.70509396e-02
  7.81791881e-02 -1.51470564e-02 -5.12253828e-02  2.94220615e-02
  1.89656764e-02  3.56257074e-02 -1.52498959e-02  1.67578720e-02
 -5.41502126e-02  2.25712657e-02  1.07770842e-02 -4.57099341e-02
 -5.29594757e-02 -6.09158352e-03 -1.56885386e-02 -9.39742848e-02
  9.97912213e-02 -7.98374787e-02  5.14165685e-02 -2.49937791e-02
  4.56414148e-02 -2.28350889e-02  6.93674833e-02  9.56592113e-02
  2.10984293e-02 -5.34034744e-02 -9.47243813e-03 -3.64798903e-02
 -8.73094331e-03 -5.31139113e-02  2.07487196e-02 -1.01636782e-01
 -6.77195936e-03  1.68964211e-02  4.61018598e-03  3.73644195e-02
 -2.23141871e-02 -3.65006708e-04 -1.19658718e-02 -4.03856765e-03
 -1.31598562e-01  2.98342165e-02  2.98960246e-02  7.57841021e-02
  5.45335424e-05 -1.30205661e-01  5.51614948e-02  1.86381284e-02
 -4.45671938e-02  1.33036710e-02  5.42959105e-03 -1.81594351e-03
  6.96198717e-02  1.81264970e-02 -4.42353711e-02 -5.63731497e-08
 -5.37080169e-02 -1.04599968e-01 -1.66010577e-02  1.13709442e-01
  1.11019043e-02  4.21117768e-02 -4.23490405e-02 -4.23492752e-02
 -3.29680964e-02 -1.24421380e-02 -2.70800795e-02  1.04099475e-01
 -6.13731623e-04 -7.53386915e-02  7.38525689e-02 -2.01526619e-02
  4.18220460e-02 -5.60500212e-02 -9.29730833e-02 -7.81499073e-02
  1.65201966e-02  1.21178357e-02 -5.36200628e-02 -3.34557071e-02
 -4.16341983e-02  2.41293758e-02 -3.29998299e-03  6.87806681e-02
  1.00136697e-01 -6.03480823e-02  5.26349954e-02  3.40753794e-02
  4.54153754e-02  3.75473388e-02  9.08472203e-03  3.48987430e-02
 -1.08982317e-01  5.52499369e-02 -2.53147203e-02  9.47190728e-03
 -1.02262847e-01 -4.33337502e-02 -2.69619469e-02  4.93726470e-02
 -1.50993152e-03 -3.04761864e-02 -1.25111833e-01 -6.66889036e-03
  1.23324871e-01 -5.50598614e-02 -3.06822322e-02 -3.79740968e-02
  1.03147894e-01  1.38499007e-01 -1.48751717e-02  3.82651598e-03
 -5.87240141e-03 -3.00247502e-02 -5.86337131e-03  2.50685290e-02
 -1.38455117e-02  2.78244354e-02 -2.86235958e-02  3.03678680e-02]"
"1. [signer] Payer
/// 2. [writable] Hello state account
/// 3. [] System Program
pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;
    // System Program
    let system_program = next_account_info(accounts_iter)?;

    let rent = Rent::get()?;

    // Checking if payer account is the signer
    if !payer_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature);
    }

    // Checking if hello state account is rent exempt
    if !rent.is_exempt(hello_state_account.lamports(), 1) {
        return Err(ProgramError::AccountNotRentExempt);
    }

    // Checking if hello state account is writable
    if !hello_state_account.is_writable {
        return Err(ProgramError::InvalidAccountData);
    }

    // Checking if hello state account's owner is the current program
    if hello_state_account.owner.ne(&program_id) {
        return Err(ProgramError::IllegalOwner);
    }

    // Checking if the system program is valid
    if system_program.key.ne(&SYSTEM_PROGRAM_ID) {
        return Err(ProgramError::IncorrectProgramId);
    }

    let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;

    // Checking if the state has already been initialized
    if hello_state.is_initialized {
        return Err(ProgramError::AccountAlreadyInitialized);
    }

    hello_state.is_initialized = true;
    hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;
    msg!(""Account initialized :)"");

    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let payer_account = next_account_info(accounts_iter)?;
    let hello_state_account = next_account_info(accounts_iter)?;
    let system_program = next_account_info(accounts_iter)?;

    let rent = Rent::get()?;

    // Checking if payer account is the signer
    if !payer_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature);
    }

    // Checking if hello state account is rent exempt
    if !rent.is_exempt(hello_state_account.lamports(), 1) {
        return Err(ProgramError::AccountNotRentExempt);
    }

    // Checking if hello state account is writable
    if !hello_state_account.is_writable {
        return Err(ProgramError::InvalidAccountData);
    }

    // Checking if hello state account's owner is the current program
    if hello_state_account.owner.ne(&program_id) {
        return Err(ProgramError::IllegalOwner);
    }

    // Checking if the system program is valid
    if system_program.key.ne(&SYSTEM_PROGRAM_ID) {
        return Err(ProgramError::IncorrectProgramId);
  ","[-3.05791497e-02  5.44939749e-02 -7.10295662e-02 -2.18806770e-02
  2.08687913e-02 -2.48023514e-02  9.71007794e-02  1.24163432e-02
 -3.82014550e-02  3.31153572e-02  5.45325167e-02 -5.17253168e-02
 -8.73042969e-04  1.15833730e-02  7.29872212e-02 -2.27156840e-02
 -7.37858862e-02  3.63403605e-03  4.11792099e-02 -4.67242897e-02
  5.74870557e-02 -1.89907569e-02 -2.01154035e-02  2.33983453e-02
  1.99151617e-02 -6.39955327e-02  1.85330436e-02  3.83081697e-02
  2.44721398e-03 -3.45484130e-02  7.39318132e-02 -3.27941738e-02
 -1.82476044e-02 -6.36824919e-03  1.10244855e-01  5.26538081e-02
  2.83853821e-02 -1.13163896e-01 -3.12889703e-02 -4.92953472e-02
 -4.68707606e-02  4.33206744e-03 -5.22727072e-02 -1.48357637e-02
 -1.66684333e-02  4.55916710e-02 -4.21880037e-02  3.07753533e-02
 -1.08581865e-02 -1.29445512e-02  1.84873659e-02 -9.63180698e-03
 -1.55443223e-02  1.54573228e-02  2.39185691e-02  3.10504083e-02
  5.11308238e-02 -7.55651668e-02 -4.55940887e-03 -2.26172470e-02
 -3.32395285e-02  2.99045779e-02 -6.52886415e-03 -1.33222146e-02
 -1.28772464e-02  8.83138180e-02 -5.89617603e-02  1.62550993e-02
 -1.73040330e-02 -4.17600945e-02 -3.22077647e-02 -2.41067484e-02
 -6.87458813e-02 -5.99703789e-02 -3.90344933e-02 -2.28416752e-02
 -1.67308431e-02  4.39625904e-02 -1.30682401e-02 -1.08468361e-01
 -9.75133181e-02 -4.35286351e-02 -3.23440903e-03  4.76042740e-02
  2.58344803e-02  6.74439035e-03 -3.16431969e-02 -7.01897666e-02
  1.30054638e-01  6.68405220e-02  2.21054014e-02  4.31776010e-02
  2.11342443e-02 -3.11823003e-02  1.29629105e-01  3.36988568e-02
  2.97817010e-02 -2.53040642e-02 -3.41640674e-02  9.32666138e-02
 -7.79373720e-02  2.59642750e-02  7.16082081e-02 -1.94665939e-02
  7.47757405e-02  2.53795702e-02  5.66849597e-02 -6.41457438e-02
 -6.77726641e-02 -3.42650488e-02 -5.08934399e-03  7.57980347e-02
  8.85512978e-02  7.87364878e-03  1.59183759e-02  3.47975157e-02
 -1.17829526e-02  1.53403906e-02  4.62561026e-02  1.69330221e-02
  1.03780329e-01  4.56519201e-02 -4.29839119e-02 -2.86877831e-03
 -1.40946517e-02 -2.27126423e-02  4.09539230e-03  3.25745427e-33
 -3.71461152e-03 -8.99432134e-03 -4.95904610e-02  3.25261950e-02
 -3.63395773e-02  1.22619811e-02  4.24539782e-02  6.47240505e-02
 -7.99872503e-02  8.33050162e-02  5.09211197e-02 -4.06832248e-02
 -8.95558111e-03 -2.77944990e-02  3.13373804e-02 -3.22203897e-02
  8.94848481e-02  1.40743637e-02  6.92187026e-02  8.50770026e-02
  5.62882796e-02 -1.90271586e-02 -2.24407893e-02 -2.84264516e-02
  1.54198874e-02  2.31795013e-02 -6.88089877e-02 -3.58824222e-03
 -1.84461921e-02 -1.40141966e-02  6.82848319e-02 -4.80020456e-02
  1.42798331e-02  1.57539211e-02  7.54701719e-02 -5.20425402e-02
  2.95213908e-02  1.97628122e-02 -8.30676705e-02 -7.00650215e-02
  5.89533560e-02 -4.22197692e-02  3.74162570e-02 -1.96473356e-02
  1.55942224e-04 -1.71389487e-02 -4.15459648e-03 -3.11127622e-02
  8.10496286e-02  9.62237939e-02  2.18564421e-02  4.14115749e-02
 -1.44928560e-01 -6.35155886e-02  7.91468937e-03 -7.18017966e-02
 -1.95002072e-02  5.68196829e-03 -4.53487374e-02 -3.92409824e-02
 -2.49238545e-03  1.58363059e-02 -5.58481226e-03 -4.37028557e-02
 -5.30182160e-02 -4.74541113e-02 -4.32498083e-02 -2.50020120e-02
  1.02095127e-01 -4.33479548e-02 -4.32240106e-02  2.20956765e-02
  6.06414210e-03  5.43980710e-02 -2.92290561e-02 -2.56215166e-02
 -2.59895492e-02 -1.00913607e-02 -4.70689498e-02 -5.36518432e-02
  1.96467750e-02 -2.49529406e-02 -1.02116428e-01  8.62158015e-02
 -3.83444577e-02  4.61059250e-02  1.85063761e-02 -1.34609481e-02
 -5.05253859e-02  2.98094768e-02  4.66365069e-02 -5.53117469e-02
 -1.44370617e-02 -3.47272828e-02 -2.84895655e-02 -5.44332569e-33
  2.52487902e-02 -9.84557867e-02 -5.68899512e-02 -9.30189416e-02
 -7.43908063e-02 -4.55911271e-03  6.78931102e-02 -6.03718907e-02
  7.75431166e-04  3.42681557e-02 -8.46771300e-02  2.15267241e-02
  8.31375048e-02  1.16030285e-02  7.02036843e-02  3.94965224e-02
 -7.70718902e-02 -2.62433998e-02  3.06080561e-02  6.10440038e-02
 -2.95803193e-02  1.52891442e-01  4.42689657e-02  4.29884642e-02
  4.86644683e-03  4.52176258e-02 -4.58899960e-02  7.86151886e-02
  8.33414495e-03  1.90649927e-02  1.02738170e-02 -4.93483059e-02
 -2.69803628e-02  6.93128780e-02 -6.50074391e-04 -1.44586444e-01
  3.79626080e-02  5.33426814e-02 -7.38085434e-02  2.76757497e-02
  1.52276188e-01 -4.42927629e-02 -4.62979525e-02 -2.35239267e-02
  1.99222248e-02  4.28125337e-02  5.77977747e-02 -1.77747826e-03
 -3.14029232e-02  4.99821678e-02  7.23239209e-04 -5.66752777e-02
  5.04950178e-04 -7.66355172e-03 -4.49606776e-02  2.50630062e-02
  1.54508382e-01 -1.00228615e-01  5.10842465e-02 -2.31687818e-02
  5.77547140e-02 -5.00445180e-02  4.03932780e-02  6.66611716e-02
  3.80222090e-02 -7.41158202e-02 -5.07768914e-02 -1.15566719e-02
  1.23746291e-01  2.36603431e-02 -2.14986829e-03 -2.75196880e-02
  1.61824375e-02 -7.83820674e-02  7.16846883e-02  1.01689585e-01
  3.88759598e-02 -2.43312940e-02 -2.39639226e-02 -7.93162826e-03
 -9.00146887e-02  3.32629830e-02 -2.66493522e-02  7.58715766e-03
 -3.33322026e-02 -5.65574281e-02  5.08121774e-02 -2.97238342e-02
 -3.06141768e-02  6.98034838e-03 -1.67708080e-02  4.51780856e-02
 -7.51334848e-03 -2.06112489e-02 -4.82650846e-02 -5.34815605e-08
 -5.39326482e-02 -6.66872188e-02  9.48220305e-03  4.59347591e-02
  2.16920897e-02 -1.01054884e-01  3.54249515e-02 -6.25960752e-02
 -7.79051334e-02 -2.48541366e-02 -2.30525509e-02  4.53394242e-02
 -3.00548319e-02 -7.40925148e-02  3.96466143e-02 -6.92639947e-02
 -5.90627361e-03  6.17823005e-03 -8.94843489e-02 -7.26768421e-03
 -3.69285829e-02  4.94587608e-03 -8.18165094e-02  2.17405520e-02
 -6.92702234e-02 -8.86572246e-03  4.27725986e-02  7.66999051e-02
  1.03028387e-01  2.10287925e-02  7.21214935e-02  5.64262569e-02
  1.70049034e-02 -4.65299003e-02 -4.53462861e-02  2.94278953e-02
  3.43531035e-02  2.28489842e-02  3.72659937e-02  3.10198721e-02
 -2.69975793e-02  1.27687883e-02 -3.82129028e-02 -1.01621030e-02
 -1.27667757e-02 -1.85410236e-03 -1.93146840e-02 -9.09088552e-02
  8.99269134e-02 -5.77070788e-02 -1.04998380e-01 -3.26630995e-02
  9.24775377e-03  7.41343498e-02 -8.96636844e-02 -2.26138905e-02
  4.06065397e-02 -3.82441469e-02 -3.46148126e-02  3.10549121e-02
  6.55401573e-02  1.98105033e-02 -3.98150533e-02 -1.52315581e-02]"
" }

    let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;

    // Checking if the state has already been initialized
    if hello_state.is_initialized {
        return Err(ProgramError::AccountAlreadyInitialized);
    }

    hello_state.is_initialized = true;
    hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;
    msg!(""Account initialized :)"");

    Ok(())
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# How to read multiple instructions from a transactionSolana allows us to take a peek at all of the instructions in the current transaction. We can store them in a variable and iterate over them. We can do many things with this, like checking for suspicious transactions.RustPress </> button to view full sourceuse anchor_lang::{
    prelude::*,
    solana_program::{
        sysvar,
        serialize_utils::{read_pubkey,read_u16}
    }
};


declare_id!(""8DJXJRV8DBFjJDYyU9cTHBVK1F1CTCi6JUBDVfyBxqsT"");

#[program]
pub mod cookbook {
    use super::*;

    pub fn read_multiple_instruction<'info>(ctx: Context<ReadMultipleInstruction>, creator_bump: u8) -> Result<()> {
        let instruction_sysvar_account = &ctx.accounts.instruction_sysvar_account;

        let instruction_sysvar_account_info = instruction_sysvar_account.to_account_info();

        let id = ""8DJXJRV8DBFjJDYyU9cTHBVK1F1CTCi6JUBDVfyBxqsT"";

        let instruction_sysvar = instruction_sysvar_account_info.data.borrow();

        let mut idx = 0;

        let num_instructions = read_u16(&mut idx, &instruction_sysvar)
        .map_err(|_| MyError::NoInstructionFound)?;

        for index in 0..num_instructions {
            let mut current = 2 + (index * 2) as usize;
            let start = read_u16(&mut current, &instruction_sysvar).unwrap();

            current = start as usize;
            let num_accounts = read_u16(&mut current, &instruction_sysvar).unwrap();
            current += (num_accounts as usize) * (1 + 32);
            let program_id = read_pubkey(&mut current, &instruction_sysvar).unwrap();

            if program_id != id
            {
                msg!(""Transaction had ix with program id {}"", program_id);
                return Err(MyError::SuspiciousTransaction.into());
            }
        }

        Ok(())
    }

}

#[derive(Accounts)]
#[instruction(creator_bump:u8)]
pub struct ReadMultipleInstruction<'info> {
    #[account(address = sysvar::instructions::id())]
    instruction_sysvar_account: UncheckedAccount<'info>
}

#[error_code]
pub enum MyError {
    #[msg(""No instructions found"")]
    NoInstructionFound,
    #[msg(""Suspicious transaction detected"")]
    SuspiciousTransaction
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364let mut idx = 0;
let num_instructions = read_u16(&mut idx, &instruction_sysvar)
.map_err(|_| MyError::NoInstructionFound)?;


for index in 0..num_instructions","[-3.42317596e-02  1.19847851e-02 -3.20308581e-02 -1.35227311e-02
 -6.60143793e-02 -8.74291062e-02  9.50690284e-02  2.29597576e-02
 -2.00595316e-02 -3.27208154e-02  4.66025025e-02 -2.00766046e-02
 -4.30763550e-02 -4.09956910e-02 -1.10401772e-02 -6.74056560e-02
 -6.72027767e-02  2.03692205e-02 -2.17972510e-02 -2.84801368e-02
  7.35710338e-02  7.31921429e-03 -1.99600239e-03  3.81942727e-02
 -2.71542743e-02  8.08670223e-02 -2.61801351e-02 -1.55279518e-03
  3.65640335e-02 -1.11667085e-02  4.22548167e-02 -7.72572728e-03
 -9.54184216e-03  5.62928990e-02  2.54573822e-02  5.15152467e-03
 -1.62357744e-02 -4.44047861e-02 -5.31972498e-02 -1.33206276e-02
 -3.03866509e-02  5.30536957e-02 -9.65357870e-02  2.25778837e-02
  5.75460456e-02 -1.12073623e-01 -2.56059915e-02  1.12461271e-02
  4.80803363e-02  3.96279572e-03 -4.84574921e-02  2.09594853e-02
  2.96524670e-02  1.29961334e-02  1.08636752e-01 -3.52584221e-03
  4.92455512e-02 -3.57460044e-02 -3.41389738e-02  1.46305244e-02
 -4.42971848e-02 -2.85164248e-02  3.86446267e-02 -8.62200037e-02
  3.43684736e-03  9.89077538e-02  1.81481875e-02  1.85681563e-02
 -7.21814064e-03 -7.45188668e-02 -4.49572392e-02 -5.59672937e-02
 -6.71546236e-02  1.29917748e-02 -1.22218795e-01 -5.15821017e-03
  5.17991595e-02 -1.43531384e-02 -9.03874412e-02 -1.45222088e-02
 -1.00858726e-01 -8.12586024e-02  6.65257573e-02 -3.11028920e-02
 -1.59141459e-02  3.24596688e-02 -8.22991729e-02 -5.54060005e-03
  4.69683036e-02  5.34825586e-02  2.40244921e-02  3.21416706e-02
 -3.67285237e-02 -8.27090517e-02  8.23885575e-02  8.38972405e-02
 -1.64269973e-02 -4.06893119e-02 -1.51800998e-02  7.12518021e-02
  2.80588698e-02  5.97031564e-02  2.82320138e-02  1.30048785e-02
  2.14792672e-03 -4.01382074e-02  7.09303617e-02 -5.94497174e-02
 -1.13230146e-01 -1.31647494e-02  3.89343463e-02  1.13396376e-01
  7.11531118e-02  5.08949608e-02 -7.32851634e-03  4.83071693e-04
 -3.78726721e-02  5.44776246e-02  5.86891435e-02  8.29581842e-02
  5.32164462e-02  4.41037454e-02 -4.19518352e-02  6.11060597e-02
 -3.99159603e-02 -6.08021319e-02  2.92951819e-02  5.86515955e-33
 -1.46436412e-02 -6.70505315e-02 -5.72253689e-02  7.14895353e-02
 -1.02133647e-01  6.92687929e-02  1.80163197e-02 -1.29458625e-02
 -4.93723080e-02  2.20016271e-04 -6.06026538e-02 -4.67174724e-02
 -3.21948938e-02 -1.18626682e-02 -8.28460008e-02 -6.61954805e-02
  5.20343473e-03 -6.57489116e-04  2.33826805e-02  6.73360452e-02
  5.46051078e-02  1.36498269e-02  3.07395984e-03 -4.77527231e-02
 -2.20125653e-02 -1.18620005e-02 -1.23723768e-01 -2.96430029e-02
 -4.40965854e-02  1.74106583e-02 -3.33351828e-02 -7.32224137e-02
 -8.27043653e-02  5.91077656e-02  6.53316826e-02 -5.61052077e-02
  3.10552139e-02 -1.51960291e-02 -1.05238318e-01 -8.26037750e-02
 -4.32268195e-02 -2.22429745e-02 -1.93139352e-02  4.05009985e-02
 -1.00830775e-02 -3.32982070e-03 -9.37124938e-02  6.30656183e-02
  5.37693352e-02  9.78430544e-05 -3.19833979e-02  3.59432623e-02
 -1.62671078e-02 -1.02922350e-01 -4.42065997e-03 -6.05095401e-02
  4.80491994e-03 -2.08385494e-02 -5.13439020e-03  5.41652478e-02
 -4.46823165e-02  2.74029709e-02 -7.51070529e-02  1.86128523e-02
  3.37748392e-03  7.64734522e-02 -1.11663282e-01  2.15860270e-02
 -3.83332232e-03 -1.07071567e-02 -5.65737747e-02  1.77342929e-02
  1.82494055e-02  7.80086871e-03  2.07822099e-02 -3.78003679e-02
  6.74507022e-02  1.43745705e-03 -4.70469669e-02 -9.62785184e-02
  1.01760458e-02 -1.29593574e-02  4.66081500e-03  9.62021276e-02
 -2.66338009e-02  1.51886389e-01  2.72004884e-02 -1.78749133e-02
 -2.49470230e-02  3.78001146e-02 -2.94778328e-02 -2.07475331e-02
  1.29458876e-02 -9.56176668e-02  6.29945621e-02 -7.91185648e-33
  9.07639340e-02 -1.90928334e-03  2.74652708e-02 -7.00671971e-03
 -9.37273651e-02 -8.19723774e-03  8.86679068e-03 -4.67731198e-03
 -5.44426441e-02 -3.77933197e-02 -5.37155382e-02  1.23327021e-02
  1.94877665e-02 -2.38481462e-02  2.96668187e-02  3.03927809e-02
  3.71413641e-02 -1.20110717e-02  6.86592087e-02  8.42505600e-03
 -2.92369463e-02  2.61380635e-02 -1.34748649e-02  5.38591966e-02
 -2.99303811e-02  1.92521811e-02 -1.24580469e-02  1.83704887e-02
 -1.58743281e-02 -2.45787576e-02  5.04112686e-04 -4.21058089e-02
  5.97288087e-02  1.06894843e-01  5.51010994e-03 -5.57868183e-02
  5.42481318e-02  4.84549776e-02  1.91008523e-02  2.38421988e-02
  2.21894588e-02  1.78302899e-02 -5.15164994e-02  7.33784512e-02
 -4.21494879e-02  4.17766646e-02 -2.90405620e-02  6.85061440e-02
 -5.33078052e-02 -3.36932987e-02  6.06002926e-04 -6.57407436e-05
 -2.15811823e-02  2.35459283e-02 -1.30364215e-02 -1.07457535e-02
  8.30846503e-02 -7.55727813e-02  2.17536297e-02 -3.16385180e-02
 -3.52483802e-02 -2.73576491e-02  2.85559669e-02  5.55632040e-02
  6.22155257e-02 -6.76220208e-02  2.14321259e-02 -9.24343616e-02
  9.58641805e-03  4.06331569e-03  2.80480329e-02 -2.32181530e-02
 -1.08041326e-02 -4.33325619e-02  1.01867124e-01  4.71092761e-02
 -5.58440611e-02 -9.13261920e-02 -7.02841487e-03  5.54253869e-02
 -1.48935216e-02  1.49635095e-02  4.01834911e-03  3.47916111e-02
  3.79634164e-02 -2.47982908e-02  3.55373584e-02  6.01714142e-02
 -1.82902832e-02 -7.44057540e-03 -4.25422825e-02  1.46215754e-02
 -3.08287591e-02 -1.55769084e-02 -2.84427777e-02 -6.65488926e-08
 -2.14155503e-02 -1.26956597e-01 -3.51660363e-02  7.52967522e-02
  3.46418247e-02  1.33372443e-02 -6.57041967e-02 -7.36447200e-02
 -2.50909310e-02 -6.23394996e-02  5.35900332e-03  8.81594643e-02
 -6.35560602e-02 -8.07823539e-02  3.19680236e-02  1.72136575e-02
  4.91718501e-02 -5.18385768e-02 -4.51652333e-02  3.39308530e-02
  6.93786964e-02 -1.71361130e-03 -3.91045325e-02  3.32312025e-02
 -1.35234501e-02  2.17617769e-02  2.22656429e-02  1.45303145e-01
  7.37475827e-02 -4.44246940e-02  7.57630691e-02 -1.39874162e-03
  1.03754714e-01  2.83087138e-02 -7.76659101e-02  2.33094171e-02
  7.21165389e-02  8.24313834e-02  5.28730378e-02 -4.19029407e-02
 -4.59085070e-02 -6.27787933e-02 -7.09559992e-02  1.30550927e-02
 -2.76758783e-02 -3.54620325e-03 -9.95547920e-02 -1.37187168e-02
  5.33159152e-02 -5.29545583e-02 -7.09260534e-03 -1.39573533e-02
  9.04944167e-02  1.55458018e-01 -9.07809436e-02 -2.21102405e-03
  5.15989289e-02 -5.03989905e-02  7.56099634e-03  7.60483295e-02
  4.24858779e-02  3.17890719e-02  1.59356259e-02 -4.63057868e-02]"
"{
    
    let mut current = 2 + (index * 2) as usize;
    let start = read_u16(&mut current, &instruction_sysvar).unwrap();

    current = start as usize;
    let num_accounts = read_u16(&mut current, &instruction_sysvar).unwrap();
    current += (num_accounts as usize) * (1 + 32);

}
123456789101112131415 # Token# What do I need to get started with SPL-Tokens?Every time you interact with tokens on Solana, you are actually interacting with the Solana Program Library Token, or SPL-Token standard. The SPL-Token standard requires a specific library to be used, which you can find below based on your language.TS""@solana/spl-token"": ""^0.2.0""
1# How to create a new TokenCreating tokens is done by creating what is called a ""mint account"". This mint account is later used to mint tokens to a user's token account.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
} from ""@solana/web3.js"";
import {
  createInitializeMintInstruction,
  TOKEN_PROGRAM_ID,
  MINT_SIZE,
  getMinimumBalanceForRentExemptMint,
  createMint,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  // 1) use build-in function
  let mintPubkey = await createMint(
    connection, // conneciton
    feePayer, // fee payer
    alice.publicKey, // mint authority
    alice.publicKey, // freeze authority (you can use `null` to disable it. when you disable it, you can't turn it on again)
    8 // decimals
  );
  console.log(`mint: ${mintPubkey.toBase58()}`);

  // or

  // 2) compose by yourself
  const mint = Keypair.generate();
  console.log(`mint: ${mint.publicKey.toBase58()}`);

  let tx = new Transaction().add(
    // create mint account
    SystemProgram.createAccount({
      fromPubkey: feePayer.publicKey,
      newAccountPubkey: mint.publicKey,
      space: MINT_SIZE,
      lamports: await getMinimumBalanceForRentExemptMint(connection),
      programId: TOKEN_PROGRAM_ID,
    }),
    // init mint account
    createInitializeMintInstruction(
      mint.publicKey, // mint pubkey
      8, // decimals
      alice.publicKey, // mint authority
      alice.publicKey // freeze authority (you can use `null` to disable it. when you disable it, you can't turn it on again)
    )
  );
  console.log(
    `txhash: ${await connection.sendTransaction(tx, [feePayer, mint])}`
  );
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071// 1) use build-in function
let mintPubkey = await createMint(
  connection, // conneciton
  feePayer, // fee payer
  alice.publicKey, // mint authority
  alice.publicKey, // freeze authority (you can use `null` to disable it. when you disable it, you can't turn it on again)
  8 // decimals
);

// or

// 2) compose by yourself
let","[-1.18158683e-01 -7.82540813e-02 -7.59797916e-02  5.00700288e-02
 -7.88623095e-02 -5.46225421e-02  1.91100258e-02  6.98367134e-02
 -1.72485653e-02  1.12652117e-02 -9.82623547e-03 -4.79140952e-02
 -4.82650734e-02  1.13597652e-02  8.35128799e-02  6.71839565e-02
 -1.41317174e-01  1.32885324e-02 -5.96541986e-02 -6.66869921e-04
  1.21194452e-01 -4.02846970e-02 -6.06047437e-02  1.83466058e-02
  6.70025637e-03 -3.12283337e-02  8.24225310e-04 -3.25851552e-02
  7.86179956e-03  6.47319555e-02  7.09520057e-02  7.48952553e-02
  1.71644278e-02  2.43343264e-02  1.09384162e-02  4.54520658e-02
 -1.42052805e-03  2.81859301e-02  8.72794315e-02 -1.06875204e-01
 -3.23252240e-03  4.22983244e-02 -1.12335503e-01  9.50241182e-03
  3.95325795e-02 -3.90705280e-02 -2.52761096e-02  2.63906829e-02
 -2.38791518e-02 -1.29348515e-02 -2.11363472e-02  3.20705809e-02
 -9.37047414e-03 -2.43668612e-02 -1.34919221e-02 -3.87466736e-02
 -5.88161536e-02  3.85417007e-02  9.64495316e-02  2.79996265e-03
 -3.75708714e-02  7.46000605e-03  5.42538911e-02 -5.89024536e-02
 -3.75484191e-02 -9.24815610e-02 -2.61323862e-02 -1.84011031e-02
  4.24282365e-02 -3.75092262e-03 -1.95313469e-02 -5.76762110e-02
  1.27387559e-03  6.00384101e-02 -4.44565304e-02 -5.29101342e-02
  6.74127713e-02  4.90029156e-02 -1.55099072e-02  1.32143963e-03
  2.14070454e-02  2.21988259e-04  1.09349251e-01  9.45127159e-02
  3.55217494e-02  8.66808114e-04  1.09654199e-02 -2.02875193e-02
  5.78625277e-02  4.17005010e-02  1.32083353e-02 -2.34148204e-02
  2.91458069e-04  2.00156048e-02  6.90238625e-02  2.96895877e-02
 -1.99996550e-02  3.91413607e-02 -7.76029229e-02  1.26092151e-01
  3.89123894e-03 -2.58097406e-02 -3.29455175e-02  3.58928856e-03
  2.14840490e-02 -3.63183431e-02  1.03084750e-01 -4.30896133e-02
  1.49213411e-02  5.94134219e-02  6.80048913e-02  6.84501007e-02
 -5.15314452e-02  4.02352326e-02 -5.58279715e-02 -1.73857305e-02
 -1.19732544e-02  4.34051789e-02  8.11968669e-02  4.47878465e-02
  5.83539791e-02  7.56776705e-02 -6.12100624e-02 -7.86123704e-03
 -5.25402464e-02 -7.45066209e-04 -3.37448553e-04  9.58146180e-33
 -4.31748293e-02  1.59143768e-02  1.23480186e-02  8.07459652e-02
 -1.02635212e-01 -6.11415915e-02  3.94508876e-02  2.05239858e-02
 -1.04360819e-01 -2.66757124e-04 -5.27636101e-03  5.17527051e-02
 -3.01270504e-02 -2.08401065e-02 -7.96840340e-02 -5.87311685e-02
 -2.48485841e-02 -4.79067899e-02  1.77046470e-02 -5.09428456e-02
 -2.19390187e-02 -4.57081795e-02  1.11713922e-02 -3.36652547e-02
  3.45719345e-02 -9.01629496e-03 -2.07570065e-02 -7.71881491e-02
  1.67029053e-02  9.94501449e-03  3.38387676e-02 -2.43089162e-02
 -1.32734561e-03  7.60532096e-02  4.46092375e-02  1.30699966e-02
  5.05193621e-02 -1.90386316e-03 -4.60968539e-02 -4.15130109e-02
  3.27687860e-02  1.57605279e-02 -1.63037498e-02  3.55475917e-02
 -6.24116920e-02  9.52644944e-02 -9.67821945e-03  1.10414423e-01
  8.25427473e-02  4.13947813e-02 -1.07489593e-01  4.42899279e-02
 -8.26338828e-02  2.22300775e-02  5.14187664e-02 -2.88188811e-02
 -2.76330989e-02  4.53354232e-03  3.97908315e-02 -4.62427400e-02
 -6.11920953e-02 -2.92059463e-02  4.18890826e-02  3.94715788e-03
 -7.85630103e-03  5.34193516e-02 -8.60952660e-02 -7.26650935e-03
  1.04073742e-02 -7.99988210e-02 -5.10968715e-02  1.03026606e-01
 -4.09123674e-02  4.80919182e-02 -4.59546633e-02 -6.06419109e-02
  1.31401926e-01  4.53597605e-02 -1.28389969e-01  1.58243235e-02
  2.02582534e-02 -7.57950917e-02 -5.62521666e-02  1.06541194e-01
  2.78341249e-02 -3.77326086e-02 -2.97133578e-03 -2.79990453e-02
 -6.03971966e-02 -8.36222321e-02  1.04254611e-01 -7.42410496e-02
 -1.35631766e-03 -2.01288965e-02 -7.66034350e-02 -8.51285809e-33
 -1.57141569e-03 -2.25801878e-02 -3.46712805e-02 -2.86096353e-02
 -5.54479584e-02 -6.14511184e-02 -1.17605152e-02 -2.74504218e-02
 -4.06194925e-02  1.86800864e-02 -6.39213398e-02  2.20620986e-02
 -1.34782325e-02  5.23333922e-02 -6.39069080e-02  1.03129007e-01
  2.12871414e-02  4.31075785e-03  1.82294436e-02 -4.48602401e-02
 -2.02007554e-02  1.53607845e-01 -3.36333700e-02 -1.46417618e-02
 -2.08907370e-02  3.74359521e-03  1.53329121e-02  8.73814002e-02
 -5.75576909e-03 -1.28223579e-02  9.55815539e-02 -2.17449293e-02
  1.04460968e-02  2.54274234e-02 -6.45139217e-02 -1.10455848e-01
  9.27010365e-03  2.32459400e-02 -1.01403212e-02  2.51242192e-03
  2.18154956e-02  7.07233604e-03 -1.08098071e-02  2.55551171e-02
  1.81818437e-02  2.45603677e-02  6.15198351e-02 -1.21957799e-02
 -9.45147872e-02 -1.01147043e-02  6.89083189e-02 -7.93382600e-02
 -4.30355556e-02 -7.27747306e-02 -4.72113974e-02 -5.49294204e-02
  6.76925555e-02 -2.54629683e-02 -4.49908376e-02 -9.71348733e-02
  3.32809202e-02 -4.32484001e-02  4.20019738e-02  1.17045203e-02
  5.38471676e-02 -6.51070997e-02 -7.06028240e-03  1.05672795e-02
 -3.27607840e-02 -2.05598418e-02  4.06484073e-03 -5.91757894e-02
 -2.91380715e-02  1.04811294e-02 -3.41043877e-03  4.13085707e-02
  2.09135399e-03 -4.73192781e-02  2.54386142e-02 -1.86242780e-03
 -2.06904691e-02 -1.59004964e-02  3.90889160e-02  5.51493987e-02
  1.07806604e-02  2.25170162e-02  7.18302801e-02  4.77688760e-02
 -1.45345023e-02  9.73512977e-02 -2.58339401e-02  3.10824681e-02
  2.97090765e-02  9.34766009e-02  2.49293912e-02 -5.85536313e-08
 -4.84625846e-02 -3.48998345e-02 -9.31575522e-02  6.80708438e-02
 -1.58827249e-02  6.38208985e-02 -4.51773889e-02  2.56699580e-03
 -2.76261084e-02 -5.88242151e-02 -9.52411518e-02  1.97820365e-02
 -3.63882445e-02 -3.70324701e-02  3.34969461e-02 -6.72034407e-03
  2.32440364e-02  4.35834080e-02 -2.95386687e-02 -6.03188314e-02
  1.17787635e-02 -2.23468669e-04 -5.72805386e-03 -6.77442038e-03
  2.63439696e-02 -3.01822480e-02  8.15788470e-03  6.38228506e-02
 -5.67617826e-03 -9.85667929e-02 -1.45437242e-02  5.68358339e-02
  7.93093592e-02  1.15029914e-02 -6.76203743e-02  2.64327191e-02
 -3.54311205e-02 -2.52770949e-02  2.41947323e-02  5.64594381e-02
 -1.33475959e-02  1.52678872e-02 -1.45770134e-02  1.71993338e-02
 -8.00507888e-02  8.52156058e-03 -4.36942317e-02  1.04026450e-02
  1.12960517e-01 -1.36349890e-02  3.95000167e-02  2.78571658e-02
 -5.85980900e-03  7.74492770e-02 -9.15592303e-04  5.74971735e-02
 -7.98241496e-02  1.29467100e-01  3.39168012e-02  3.41656469e-02
 -3.18368003e-02  4.90544587e-02 -9.59757492e-02  2.31670421e-02]"
"tx = new Transaction().add(
  // create mint account
  SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    newAccountPubkey: mint.publicKey,
    space: MINT_SIZE,
    lamports: await getMinimumBalanceForRentExemptMint(connection),
    programId: TOKEN_PROGRAM_ID,
  }),
  // init mint account
  createInitializeMintInstruction(
    mint.publicKey, // mint pubkey
    8, // decimals
    alice.publicKey, // mint authority
    alice.publicKey // freeze authority (you can use `null` to disable it. when you disable it, you can't turn it on again)
  )
);
1234567891011121314151617181920212223242526272829# How to get a token mintIn order to get the current supply, authority, or decimals a token has, you will need to get the account info for the token mint.TSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";
import { getMint } from ""@solana/spl-token"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const mintAccountPublicKey = new PublicKey(""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV"");

  let mintAccount = await getMint(connection, mintAccountPublicKey);

  console.log(mintAccount);
  /*
  {
    address: PublicKey {
      _bn: <BN: 7351e5e067cc7cfefef42e78915d3c513edbb8adeeab4d9092e814fe68c39fec>
    },
    mintAuthority: PublicKey {
      _bn: <BN: df30e6ca0981c1a677eed6f7cb46b2aa442ca9b7a10a10e494badea4b9b6944f>
    },
    supply: 0n,
    decimals: 8,
    isInitialized: true,
    freezeAuthority: PublicKey {
      _bn: <BN: df30e6ca0981c1a677eed6f7cb46b2aa442ca9b7a10a10e494badea4b9b6944f>
    }
  }
  */
})();
12345678910111213141516171819202122232425262728let mintAccount = await getMint(connection, mintAccountPublicKey);
1# How to create a token accountA token account is required for a user to hold tokens.A user will have at least one token account for every type of token they own.Associated Token Accounts are deterministicly created accounts for every keypair. ATAs are the recommended method of managing token accounts.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
  SystemProgram,
} from ""@solana/web3.js"";
import {
  createAssociatedTokenAccount,
  getAssociatedTokenAddress,
  createAssociatedTokenAccountInstruction,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const mintPubkey = new PublicKey(
    ""2SKpuBU9ksneBZD4nqbZkw75NE11HsSHsGRtW2BZh5aQ""
  );

  // 1) use build-in function
  {
    let ata = await createAssociatedTokenAccount(
      connection, // connection
      feePayer, // fee payer
      mintPubkey, // mint
      alice.publicKey // owner,
    );
    console.log(`ATA: ${ata.toBase58()}`);
  }

  // or

  // 2) composed by yourself
  {
    // calculate ATA
    let ata = await getAssociatedTokenAddress(
      mintPubkey, // mint
      alice.publicKey // owner
    );
   ","[-9.97607410e-02  2.90835323e-03 -8.37634057e-02  1.91812229e-03
 -8.49644095e-02  6.33672923e-02  3.51532437e-02  1.08223759e-01
 -3.40141840e-02  8.10659751e-02 -1.86533108e-02 -7.29958490e-02
  2.51526721e-02 -2.04697512e-02 -4.18525143e-03 -1.02478378e-02
 -7.90042803e-03 -3.28807719e-02  3.24081420e-03 -2.52552256e-02
  9.04937908e-02 -8.26680809e-02 -4.40104976e-02 -1.41168311e-02
  5.36934398e-02 -4.12857905e-03 -3.57547291e-02  2.95367977e-03
 -1.07946778e-02  2.29895711e-02  5.33759147e-02  2.14519203e-02
  5.71816750e-02 -3.15983929e-02  5.22576161e-02  3.74207413e-03
  1.52188493e-02  4.11714241e-02  1.43367365e-01 -8.81672576e-02
 -2.86038127e-02  6.29908815e-02 -4.56372052e-02 -2.09853183e-02
  3.72109823e-02 -4.91794432e-03  1.69677921e-02  3.53402644e-02
 -8.74321628e-03 -2.22963262e-02  4.04389203e-02  4.63278033e-02
  1.64549276e-02  3.68086323e-02 -3.25005613e-02 -2.60120723e-03
  4.61484082e-02  2.23609209e-02  2.92483661e-02  2.91668717e-02
 -3.04756034e-02 -2.47530453e-02 -3.68788489e-03 -4.51481380e-02
 -3.75914536e-02  5.73736764e-02 -7.32593164e-02  1.37826158e-02
  2.00101621e-02 -1.42521858e-02  3.87028456e-02 -2.78680418e-02
 -3.09572909e-02  8.18770379e-03 -4.03582789e-02 -5.07515967e-02
 -2.01915130e-02  6.28039911e-02 -2.59441249e-02  1.02678714e-02
  9.29631351e-04  4.42462079e-02  1.01228453e-01  1.19963005e-01
  3.57358009e-02 -5.39523342e-07  1.93214009e-03  2.85368394e-02
  7.48675223e-03 -6.56301156e-03  7.98210781e-03  7.75500759e-02
  3.15884724e-02 -6.09446876e-02  1.31417483e-01  1.17223728e-02
  1.96734387e-02 -3.96246128e-02 -3.18067782e-02  8.20062608e-02
  4.90680747e-02  1.44439600e-02 -3.15884724e-02  3.07470337e-02
  9.77410600e-02  1.58111509e-02  1.17796184e-02 -2.07456425e-02
  6.39694035e-02  8.20250344e-03  3.85966711e-02  4.77227569e-02
 -4.37986925e-02  1.12595176e-02 -6.05406947e-02  3.17805409e-02
  4.50521195e-03  2.82793660e-02 -1.09941540e-02  2.99337134e-02
  1.28790185e-01  3.64670600e-03 -7.35723227e-02 -2.50375587e-02
 -4.40933704e-02  5.05735092e-02  9.24686864e-02  7.80364708e-33
 -1.08242109e-01 -3.58982496e-02  4.54163961e-02 -4.86314856e-02
 -3.83265540e-02  6.40367866e-02  2.52604373e-02  3.79081257e-02
  1.10673299e-02  4.20572311e-02 -2.64144484e-02 -3.93001437e-02
 -2.10694000e-02 -7.92507976e-02 -9.12033319e-02 -6.89445287e-02
 -2.44132094e-02  3.77107039e-02  6.94530085e-02  3.79894744e-03
 -2.02889331e-02 -2.11514663e-02 -4.76117209e-02 -7.34130444e-04
  3.21775936e-02  5.69588989e-02 -2.49991715e-02 -2.88645215e-02
  8.60896707e-03  1.86822396e-02 -1.17069827e-02 -1.03259424e-03
 -5.47324568e-02 -4.15630192e-02 -2.16014627e-02 -6.21597618e-02
  2.56462954e-02 -5.95228896e-02 -2.49288306e-02 -7.51841068e-02
  2.59084012e-02 -2.60811183e-03 -9.32059139e-02 -2.19662637e-02
 -4.85242903e-02  7.95634370e-03 -7.96699002e-02  1.84049329e-03
  1.11058697e-01  1.77026540e-02 -9.04175565e-02  3.47422287e-02
  1.24290595e-02 -5.66194765e-02  4.40076925e-02 -8.58638808e-02
 -3.73556628e-03  3.53381410e-02  3.20710763e-02 -5.61899766e-02
  3.32019432e-03 -6.73752278e-02 -2.69253720e-02  1.66203808e-02
  2.01097876e-02  2.74348427e-02 -5.69481440e-02 -9.54673812e-02
 -3.69092114e-02 -5.28853619e-03 -5.96165396e-02  2.16234829e-02
 -5.50240055e-02  5.93184903e-02 -2.47028060e-02  2.19558496e-02
  9.76560414e-02  4.23901975e-02 -6.37221485e-02 -2.11216416e-02
  1.14108296e-02  3.61168720e-02 -3.90081033e-02  3.06834299e-02
  8.89081657e-02  2.64498554e-02 -1.91722568e-02  2.28015780e-02
 -3.13494541e-02 -1.07646987e-01  3.76770198e-02 -8.79490227e-02
  3.73197231e-03  1.03068411e-01 -1.34824067e-01 -6.68565571e-33
  4.13528793e-02  9.66178253e-03  1.63936466e-02 -6.17597327e-02
 -3.24701257e-02  4.65105772e-02 -9.49575529e-02  7.42568262e-03
 -8.79834127e-03  8.02168399e-02  2.46227514e-02  7.69884279e-03
 -5.55986390e-02  4.90941890e-02  1.05747849e-01  6.62719384e-02
 -3.92759740e-02  7.07225427e-02 -3.25180776e-02  5.32246716e-02
 -1.46860136e-02  3.10454145e-02 -3.88477929e-02  3.97389084e-02
 -4.26825136e-02  6.62943870e-02 -2.19743419e-02  7.26461932e-02
  1.88280623e-02  1.76947545e-02 -1.24180438e-02 -5.83731420e-02
 -1.26680695e-02  1.81465270e-03 -5.22894412e-02 -1.16666362e-01
  2.68682260e-02  4.16837707e-02 -2.30495092e-02  8.91260579e-02
  3.78458649e-02 -3.29961292e-02 -2.41792258e-02  1.87341694e-03
  2.85289995e-02 -3.91579270e-02  7.07131475e-02 -2.70246598e-03
 -3.26047800e-02  7.69472644e-02  1.94068626e-02 -2.45522372e-02
 -9.06807706e-02  3.86476889e-02 -8.01676139e-02 -4.26700041e-02
  1.25874341e-01  3.65453586e-02  4.29227389e-02 -1.56809956e-01
  2.02103797e-02 -1.33958654e-02  2.76186820e-02  5.58748059e-02
  4.60065939e-02 -1.03061665e-02 -2.09660716e-02  6.27392009e-02
 -3.64848487e-02  1.85343940e-02 -2.08942648e-02 -2.73587182e-02
  8.85815546e-02  5.41579090e-02  4.34352234e-02  6.49783313e-02
 -3.40065430e-03 -6.13985769e-02  8.52226000e-03 -5.86723490e-03
  9.04985424e-03  8.48607123e-02  2.67720167e-02 -3.16763297e-02
 -5.24495654e-02 -3.77422664e-03  4.49052788e-02  1.01438370e-02
  5.62167540e-02  4.54443730e-02 -8.43949988e-02 -3.09527330e-02
 -1.78434048e-02  1.67476828e-03  4.50823903e-02 -6.05283006e-08
  2.80999616e-02 -8.55058581e-02 -9.04411450e-03  7.28626922e-02
  5.93385547e-02  4.42274585e-02 -9.77276191e-02 -3.13132554e-02
 -8.50556642e-02 -2.75768619e-02 -3.13131846e-02  5.65428138e-02
 -5.17280959e-02 -6.11368380e-02 -3.33572850e-02 -8.05353280e-04
 -1.85847301e-02 -2.34590378e-02 -2.97711380e-02 -2.43066493e-02
 -2.49296539e-02  5.46759460e-04  9.64881629e-02 -4.00446206e-02
 -8.38212029e-04 -9.86741781e-02  3.40814814e-02  1.07764654e-01
  8.53515603e-03 -4.14671116e-02 -5.02345301e-02  6.91893101e-02
  3.06682568e-02 -5.29179983e-02 -1.44453138e-01 -1.53088896e-02
 -2.02943813e-02  4.11008969e-02  5.32981493e-02 -5.90842552e-02
 -2.72871014e-02  3.98447514e-02 -7.85709992e-02 -1.45990578e-02
 -2.90639400e-02  8.68930575e-03 -2.14666873e-02  2.87183467e-02
  6.63698018e-02 -6.13591932e-02 -7.78896809e-02 -3.13621946e-02
  2.24483125e-02  3.54315229e-02 -6.39693365e-02  2.58570130e-04
 -1.35888264e-01  8.58813524e-02  4.79572220e-03 -1.79998185e-02
  2.72233915e-02  4.12483513e-02 -2.31536813e-02 -6.09076768e-02]"
"console.log(`ATA: ${ata.toBase58()}`);

    // if your wallet is off-curve, you should use
    // let ata = await getAssociatedTokenAddress(
    //   mintPubkey, // mint
    //   alice.publicKey // owner
    //   true, // allowOwnerOffCurve
    // );

    let tx = new Transaction().add(
      createAssociatedTokenAccountInstruction(
        feePayer.publicKey, // payer
        ata, // ata
        alice.publicKey, // owner
        mintPubkey // mint
      )
    );
    console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
  }
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677// 1) use build-in function
{
  let ata = await createAssociatedTokenAccount(
    connection, // connection
    feePayer, // fee payer
    mintPubkey, // mint
    alice.publicKey // owner,
  );
}

// or

// 2) composed by yourself
{
  let tx = new Transaction().add(
    createAssociatedTokenAccountInstruction(
      feePayer.publicKey, // payer
      ata, // ata
      alice.publicKey, // owner
      mintPubkey // mint
    )
  );
}
1234567891011121314151617181920212223# How to get a Token AccountEvery token account has information on the token such as the owner, mint, amount(balance), and decimals.TSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";
import { getAccount } from ""@solana/spl-token"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const tokenAccountPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );

  let tokenAccount = await getAccount(connection, tokenAccountPubkey);
  console.log(tokenAccount);
  /*
  {
    address: PublicKey {
      _bn: <BN: 16aef79dfadb39ffedb3b6f77688b8c162b18bb9cba2ffefe152303629ae3030>
    },
    mint: PublicKey {
      _bn: <BN: 7351e5e067cc7cfefef42e78915d3c513edbb8adeeab4d9092e814fe68c39fec>
    },
    owner: PublicKey {
      _bn: <BN: df30e6ca0981c1a677eed6f7cb46b2aa442ca9b7a10a10e494badea4b9b6944f>
    },
    amount: 0n,
    delegate: null,
    delegatedAmount: 0n,
    isInitialized: true,
    isFrozen: false,
    isNative: false,
    rentExemptReserve: null,
    closeAuthority: null
  }
  */
})();
12345678910111213141516171819202122232425262728293031323334let tokenAccount = await getAccount(connection, tokenAccountPubkey);
1# How to get a token account's balanceThe token account has the token balance, which can be retrieved with a single call.TSRustPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const tokenAccount = new PublicKey(
    ""FWZedVtyKQtP4CXhT7XDnLidRADrJknmZGA2qNjpTPg8""
  );

  let tokenAmount = await connection.getTokenAccountBalance(tokenAccount);
  console.log(`amount: ${tokenAmount.value.amount}`);
  console.log(`decimals: ${tokenAmount.value.decimals}`);
})();
12345678910111213let tokenAmount = await connection.getTokenAccountBalance(tokenAccount);
1use solana_client::rpc_client::RpcClient;
use solana_program::pubkey::Pubkey;
use solana_sdk::commitment_config::CommitmentConfig;
use std::str::FromStr;

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let token_account = Pubkey::from_str(""FWZedVtyKQtP4CXhT7XDnLidRADrJknmZGA2qNjpTPg8"").unwrap();
    let balance = connection
        .get_token_account_balance(&token_account)
  ","[-4.71472070e-02  1.32837715e-02 -8.67840722e-02  2.84081250e-02
 -7.57283717e-02  4.55729403e-02  3.41052376e-02  5.71239926e-02
  3.16457674e-02  6.99678138e-02  4.35402170e-02 -7.36583322e-02
 -3.86967994e-02 -3.20725627e-02  5.98762780e-02  6.23102300e-02
 -4.35351543e-02 -1.02955721e-01  2.69472450e-02  1.94270082e-03
  9.25307814e-03 -8.12559351e-02  5.48646636e-02  5.42289298e-03
  6.80063665e-02 -5.63638806e-02  4.73400056e-02 -4.62799594e-02
 -5.47278523e-02  7.15033244e-03  1.04542226e-01  2.52880119e-02
 -2.81632412e-02 -3.99178863e-02 -1.90376956e-02  1.05514005e-01
  1.42266531e-03  2.18149889e-02  4.68885563e-02 -9.77411196e-02
  1.81708541e-02  4.50435504e-02 -4.60830890e-02 -3.40337455e-02
  1.17422149e-01 -6.50424231e-03 -2.84220837e-03  5.12886681e-02
  2.82555819e-02  3.33971158e-02  1.60507876e-02  2.33361851e-02
 -9.40837432e-03  1.58500634e-02 -3.01623940e-02  1.13712050e-01
  7.38792121e-02  6.98577389e-02  3.78469154e-02 -3.80315781e-02
  3.01574729e-02 -5.45489267e-02  1.45008340e-02 -6.18997626e-02
 -1.42485192e-02  6.00620080e-03  1.38280755e-02 -3.85054760e-02
 -4.90353890e-02  4.13915049e-03  7.66692385e-02 -2.55000703e-02
 -6.27341792e-02 -3.65118422e-02 -4.04617116e-02 -8.60061273e-02
  3.49271460e-03  7.28987083e-02 -4.37462218e-02 -1.79257356e-02
 -2.95952260e-02  2.85933223e-02  7.33747706e-02  6.05080053e-02
  2.43964866e-02  1.02813825e-01 -3.20122316e-02  1.22583667e-02
 -2.12253556e-02 -6.95250928e-02  4.33029383e-02  6.34166375e-02
 -2.58884076e-02 -2.19469145e-02  9.34826136e-02  4.77427915e-02
 -1.15825804e-02  3.67904566e-02 -6.73162714e-02  5.42664826e-02
  5.15631400e-02  7.06925467e-02 -9.35008377e-02  9.14917514e-03
  9.81140137e-02  7.69830048e-02  4.77605611e-02 -1.07655581e-02
 -4.29602228e-02  5.76377809e-02  3.85352410e-02  6.25292212e-02
 -1.14049958e-02  3.66518758e-02 -4.64846753e-02  5.27050346e-02
 -1.74394213e-02  6.77863732e-02  1.72549430e-02  6.28874302e-02
  9.98831242e-02  1.42998416e-02 -6.91117272e-02  3.03083751e-02
 -3.50328460e-02 -1.06801994e-01  6.34721965e-02 -1.17707163e-33
 -4.66334634e-03 -1.82295069e-02  6.59314869e-03  1.42328562e-02
 -2.99360063e-02 -3.67712751e-02  6.77126423e-02  5.78463264e-02
 -4.02535871e-03  1.62720960e-02 -2.74256226e-02 -8.51754919e-02
 -4.30138744e-02 -7.40997791e-02 -9.26826298e-02 -7.95874521e-02
 -2.79601496e-02  2.84060091e-03  1.05660900e-01  3.26168872e-02
 -4.98060696e-02 -4.40513939e-02 -1.21440710e-02 -1.43280495e-02
 -8.92792270e-03  9.44567565e-03  7.40760937e-03 -1.99804306e-02
 -4.59494963e-02  1.23488931e-02  7.80309737e-02  5.81431529e-03
 -1.87989082e-02  2.62644198e-02  1.92731470e-02 -5.46127744e-02
 -4.56409939e-02  2.84623243e-02 -1.80737123e-01  1.00902785e-02
  6.82159960e-02  3.21793859e-03 -5.15617840e-02  2.85188034e-02
 -9.77360308e-02  9.80243785e-04  6.54145628e-02 -1.49782458e-02
  1.40964985e-01  3.35333385e-02 -1.18228845e-01 -1.52640026e-02
  3.62199992e-02 -7.42949322e-02  8.51378590e-02 -6.70495108e-02
  1.64423548e-02 -1.08434027e-02 -2.79049575e-02 -5.31385839e-02
 -2.24649776e-02 -7.59832412e-02 -4.71878313e-02 -1.20748607e-02
 -2.96236556e-02  3.74199636e-02 -1.01267546e-01 -4.39271927e-02
 -1.99500471e-02 -3.84990661e-03 -8.01113527e-03  1.99937262e-02
 -2.35190857e-02  7.62527734e-02 -4.37624613e-03  2.10207887e-02
 -3.98148820e-02  4.81286794e-02  1.99451372e-02 -6.00551143e-02
 -8.90872814e-03  8.69701523e-03 -4.79117371e-02  9.55246314e-02
  9.91108716e-02  8.37210938e-02 -4.19759490e-02 -3.89759168e-02
 -1.93966683e-02  2.88162362e-02  1.28022057e-03 -4.05974537e-02
 -4.36798744e-02 -3.83182205e-02 -4.12444212e-02  5.72648501e-34
 -2.47559585e-02 -3.77035476e-02 -6.57808259e-02 -8.28274246e-03
 -3.00623477e-02  2.82330494e-02 -4.50162292e-02  6.70555905e-02
 -4.24355641e-02  2.63108760e-02 -5.07696345e-02  3.04830838e-02
 -2.91494615e-02  5.09889890e-03  6.56431839e-02  4.44098981e-03
  1.50418968e-03 -5.54318950e-02  8.11264105e-03 -1.53695710e-03
 -1.36777917e-02 -8.13660864e-03  3.39842625e-02  4.21076864e-02
 -5.70398346e-02  8.43557715e-02 -2.00389083e-02  8.52283314e-02
  1.05846049e-02  1.74152746e-03 -2.85965037e-02 -5.03665060e-02
 -3.19994763e-02  5.31160310e-02 -7.97134731e-03 -6.44522235e-02
  3.22125060e-03  9.52958837e-02 -3.71135920e-02  3.63928936e-02
  6.82804920e-03 -2.49968562e-02  7.54455628e-04 -1.82984322e-02
  3.12480982e-02 -8.45569968e-02  2.30522379e-02 -8.84100446e-04
  3.69394459e-02  8.26405212e-02  4.01794836e-02 -3.81002948e-02
 -7.51598552e-03  6.82487488e-02 -6.65455684e-02  4.56294268e-02
  9.30655897e-02 -9.47684422e-02  9.99760702e-02 -1.00238606e-01
 -2.46563251e-03 -2.92867962e-02  6.97957724e-02  7.12667629e-02
  5.06032929e-02 -5.03611267e-02  2.44101658e-02  1.10302968e-02
  3.35915610e-02  1.24554247e-01 -3.24807055e-02 -3.72530855e-02
  4.29785214e-02 -5.10993898e-02  9.42721441e-02 -8.37625563e-03
  1.43666239e-02 -1.04958087e-01  7.06137195e-02  1.03444839e-02
  1.15327546e-02  1.15005160e-02  3.13030295e-02  2.42987722e-02
  1.79415513e-02 -4.44472358e-02 -1.33528805e-03 -4.32199016e-02
 -1.18533592e-03  6.88813552e-02 -2.84519698e-02  4.33944501e-02
 -4.56710570e-02 -3.80132087e-02 -6.71214536e-02 -5.85031295e-08
 -4.02522571e-02  3.35857784e-03 -7.28770345e-02 -1.91720400e-03
  6.00044057e-02 -2.41642706e-02 -2.43725274e-02 -2.51548029e-02
 -7.49340206e-02 -5.72870262e-02 -8.08205381e-02  6.46209344e-02
 -1.96754816e-03 -1.76850129e-02 -6.82330364e-03 -7.35611990e-02
  4.91224751e-02  1.11095821e-02 -6.19946346e-02 -3.09282597e-02
  2.82047712e-03 -5.46512706e-03  2.71374267e-02 -5.85471019e-02
  2.27959137e-02  5.99610247e-03  7.92231336e-02  7.78438747e-02
  5.27665988e-02  7.87956547e-03 -6.77758083e-02  1.90865416e-02
  5.79777062e-02 -2.85258256e-02 -1.33682817e-01 -2.89526246e-02
  7.14445934e-02 -2.73211952e-02  5.84432743e-02  7.29143769e-02
  1.24601452e-02  5.19213788e-02 -4.32066210e-02  2.79680621e-02
  1.49961505e-02 -1.61396526e-02 -2.13463400e-02  4.62687425e-02
  5.49781397e-02 -7.91935436e-03 -2.20205523e-02 -5.20739108e-02
 -3.14891711e-02 -2.17041019e-02 -6.58929572e-02 -4.54876572e-02
  1.87245887e-02  1.49061419e-02  3.31826992e-02 -5.71320008e-04
  5.14446273e-02 -3.28929685e-02  5.87938074e-03 -6.44934326e-02]"
"     .unwrap();

    println!(""amount: {}, decimals: {}"", balance.amount, balance.decimals);
}
12345678910111213141516let balance = connection
        .get_token_account_balance(&token_account)
        .unwrap();
123TIPA token account can only hold one kind of mint. When you specify a token account, you also specific a mint too.# How to mint tokensWhen you mint tokens, you increase the supply and transfer the new tokens to a specific token account.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  createMintToCheckedInstruction,
  mintToChecked,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );

  const tokenAccountPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );

  // 1) use build-in function
  {
    let txhash = await mintToChecked(
      connection, // connection
      feePayer, // fee payer
      mintPubkey, // mint
      tokenAccountPubkey, // receiver (sholud be a token account)
      alice, // mint authority
      1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
      8 // decimals
    );
    console.log(`txhash: ${txhash}`);

    // if alice is a multisig account
    // let txhash = await mintToChecked(
    //   connection, // connection
    //   feePayer, // fee payer
    //   mintPubkey, // mint
    //   tokenAccountPubkey, // receiver (sholud be a token account)
    //   alice.publicKey, // !! mint authority pubkey !!
    //   1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
    //   8, // decimals
    //   [signer1, signer2 ...],
    // );
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createMintToCheckedInstruction(
        mintPubkey, // mint
        tokenAccountPubkey, // receiver (sholud be a token account)
        alice.publicKey, // mint authority
        1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
        8 // decimals
        // [signer1, signer2","[-1.25038415e-01 -3.86403576e-02 -1.41307577e-01  2.34153513e-02
 -3.70131284e-02 -1.88893192e-02  3.20431255e-02  7.91726634e-02
 -1.37261702e-02  2.37274915e-02 -2.49570925e-02 -8.54049027e-02
 -2.58344486e-02 -1.41313262e-02  6.98981583e-02 -1.15508419e-02
 -1.38951942e-01 -1.72262231e-03 -3.29903439e-02 -1.11929802e-02
  8.92115608e-02 -5.51265180e-02 -1.72334723e-02 -3.37514910e-03
  5.19594103e-02  5.15514910e-02 -4.06834390e-03 -5.06061390e-02
 -2.36858204e-02  5.91096804e-02  2.75937133e-02  5.50856665e-02
  2.37439247e-03 -4.19561975e-02  3.08918115e-02  5.23866229e-02
 -2.91816127e-02  4.71063703e-02  8.31472725e-02 -7.16413185e-02
  5.81339514e-03  6.52222261e-02 -7.43646175e-02 -3.15280892e-02
  2.98325997e-02 -5.20125553e-02 -8.67976621e-02  5.61928339e-02
  8.52578692e-03  7.36844493e-03  1.70151684e-02 -6.20140089e-03
 -1.02873314e-02  4.95665818e-02 -7.55049661e-02  9.09134280e-03
  5.57645708e-02 -1.83697399e-02  6.08079582e-02  8.95645656e-03
  1.83138698e-02  2.20978893e-02  5.66460006e-02 -3.39571573e-02
  1.58831012e-02 -3.26240137e-02 -8.62244517e-02  4.03860062e-02
 -1.76708046e-02 -7.21091870e-03  2.47359648e-02 -4.66842279e-02
  1.02484822e-02 -1.75201576e-02 -2.16958206e-02 -7.71480128e-02
  6.48003891e-02  9.01753008e-02 -6.56765827e-04  6.79211840e-02
 -3.31724645e-04 -6.22257125e-03  9.20279324e-02  1.33797854e-01
  4.92759421e-03  1.82667002e-02 -4.07825895e-02 -8.76507780e-04
 -2.21746117e-02 -4.31596898e-02 -3.87939587e-02  3.05685643e-02
  7.42975436e-03 -2.72701606e-02  4.10551168e-02  4.12966646e-02
 -3.29152718e-02  2.16657296e-02 -1.74702611e-02  1.30481914e-01
  9.32183340e-02 -2.01020949e-02 -2.38526557e-02  3.45863402e-03
  1.87006220e-02 -2.55209301e-02  6.99361041e-02  5.10905683e-03
  3.74032632e-02  3.96143459e-02  3.90669964e-02  8.39155689e-02
 -1.97442435e-02  1.88805163e-02 -7.13113993e-02 -2.34705047e-03
  4.82885316e-02  3.03954259e-02  9.95198265e-03  8.67747143e-02
  8.42221826e-02  1.46368565e-02 -6.87809139e-02 -5.52689284e-02
 -1.14889834e-02  9.24420822e-03  4.51146662e-02  5.17134348e-33
 -5.63445538e-02 -8.69047716e-02  4.23590327e-03 -4.59370017e-02
 -3.18836309e-02  4.16520499e-02 -1.42740794e-02  3.36923334e-03
 -3.91663015e-02  1.22333579e-02 -2.70772278e-02  2.30471268e-02
 -2.29847990e-02 -5.53056635e-02 -1.44953281e-01 -5.35233989e-02
 -3.12213879e-02  3.47103179e-02  8.57627541e-02 -6.39907569e-02
 -1.07310880e-02 -7.63233677e-02 -2.34426055e-02  5.41647151e-03
  4.47695237e-03  5.93413003e-02 -1.51008926e-02  6.42948225e-03
 -7.20006879e-03  9.01069865e-03  3.77086550e-02 -5.68330567e-03
 -3.07935644e-02 -7.35741062e-03 -2.32261531e-02 -2.83616949e-02
  2.64604073e-02 -5.21948449e-02 -1.28518090e-01 -4.73570712e-02
  3.13398913e-02 -3.69439018e-03 -2.94737630e-02  1.82851013e-02
 -4.52737659e-02  9.13806856e-02 -7.34913768e-03  6.11825846e-02
  7.15711489e-02 -1.63444635e-02 -1.14804409e-01  1.55504514e-02
 -3.60992961e-02 -2.93659624e-02  5.00334613e-02 -4.97316830e-02
  1.85186863e-02  2.63868012e-02  3.93543914e-02 -7.21032545e-02
 -4.74164672e-02 -3.55493128e-02 -1.21026300e-02 -1.75130330e-02
  2.83641112e-03  1.49762660e-01 -3.39148119e-02  2.70051081e-02
 -2.33881157e-02 -3.85097899e-02 -1.12946853e-01  5.49483225e-02
 -2.53221635e-02  1.20968483e-01 -5.63925430e-02 -1.49626480e-02
  1.08004980e-01  6.23091608e-02 -7.62892962e-02  1.39648924e-02
  3.01572178e-02 -3.55816297e-02 -6.51456639e-02  1.16537228e-01
  6.04751334e-02 -4.19294462e-03 -2.15197504e-02 -6.44298792e-02
 -3.74720544e-02 -6.17006794e-02  6.28086329e-02 -4.11021113e-02
  7.22950418e-03 -7.14555457e-02 -1.12529911e-01 -5.60876073e-33
 -1.32399807e-02  1.81083661e-02 -4.46226113e-02 -4.70777526e-02
 -3.95623036e-03  1.36058871e-03 -2.75313854e-02  5.36300652e-02
 -1.00282626e-02  7.08722696e-02 -2.46541314e-02 -1.49759790e-03
 -5.01541756e-02 -4.88318549e-03 -6.14441037e-02  9.88223404e-02
  3.78595404e-02  3.19352299e-02 -1.20091112e-02 -4.09457944e-02
  3.21093225e-03  7.77743533e-02  3.07610701e-03  1.27476603e-02
 -7.04550520e-02  1.32384375e-02 -2.54868120e-02  5.57986982e-02
 -4.16178256e-02  2.24760342e-02  8.03418830e-02 -7.03428015e-02
  1.25984680e-02  4.51813787e-02 -2.41811015e-02 -9.40306485e-02
  1.04223425e-02  3.08769178e-02  1.44650340e-02  7.25589320e-02
  2.22598873e-02 -5.05277887e-02 -8.03717691e-03  5.57774752e-02
  8.39388091e-03 -3.62747163e-02  1.64731685e-02 -3.04494938e-03
 -5.47651052e-02  3.75676751e-02  2.36852374e-02 -8.81703272e-02
 -7.77361020e-02  1.26384581e-02 -3.77029851e-02  1.43461013e-02
  7.19700381e-02 -7.19146850e-03 -9.88950301e-03 -1.01243734e-01
  4.03492264e-02 -1.01005688e-01  2.60948832e-03  6.49814904e-02
  5.98397292e-02 -8.07006359e-02 -3.15139070e-02  5.42330556e-02
  1.61681138e-03  4.90831733e-02 -3.10311671e-02  3.21160555e-02
  1.06282465e-01  2.20666938e-02  4.91925403e-02  4.77613248e-02
 -1.49634108e-02 -3.82322706e-02  5.92523068e-02  2.89641973e-03
 -9.76149272e-03  2.45847031e-02  3.79718468e-02 -9.44303907e-03
  2.37790048e-02 -9.75429080e-03  4.37223651e-02  4.62496802e-02
  9.95227788e-03  4.52179760e-02 -7.83095658e-02  3.01246140e-02
  4.13171714e-03  3.44977528e-02  3.15421596e-02 -5.42820260e-08
 -1.54346891e-03 -3.46685424e-02 -1.73363946e-02  3.38851511e-02
 -8.56123958e-03  7.66289383e-02 -6.53773546e-02 -9.84479580e-03
 -6.07495792e-02  3.32194902e-02 -5.80421574e-02  6.53807446e-02
 -7.09798783e-02 -3.40910852e-02 -4.17809300e-02  1.25537543e-02
  3.44137587e-02  4.43846174e-02 -1.29670696e-02 -4.12870869e-02
  3.35995294e-02 -2.80263145e-02  8.55422691e-02  1.51158338e-02
  6.46759048e-02 -7.40328133e-02 -2.41463375e-03  7.98659772e-02
 -3.72519228e-03 -1.20979093e-01 -6.32345825e-02  5.08038625e-02
  4.74140979e-02 -2.72430237e-02 -1.04169019e-01 -2.59414092e-02
 -3.60297412e-02  3.19381915e-02  3.23210880e-02  8.44312608e-02
 -4.47555222e-02  3.06263231e-02 -1.14316761e-01  2.81699467e-03
 -3.95829119e-02 -1.07511766e-02 -5.44607453e-02  7.78377652e-02
  5.47352657e-02 -2.76451726e-02 -7.38848394e-05 -6.17956594e-02
  3.86926830e-02  4.69809473e-02 -1.90921477e-04 -3.46991979e-02
 -1.16947271e-01  9.90802720e-02  1.74462404e-02  4.22538295e-02
 -7.07304804e-03  3.13218571e-02 -3.17729451e-02 -5.16475290e-02]"
"...], // only multisig account will use
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + mint authority */,
      ])}`
    );
  }
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// 1) use build-in function
{
  let txhash = await mintToChecked(
    connection, // connection
    feePayer, // fee payer
    mintPubkey, // mint
    tokenAccountPubkey, // receiver (sholud be a token account)
    alice, // mint authority
    1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
    8 // decimals
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createMintToCheckedInstruction(
      mintPubkey, // mint
      tokenAccountPubkey, // receiver (sholud be a token account)
      alice.publicKey, // mint authority
      1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
      8 // decimals
      // [signer1, signer2 ...], // only multisig account will use
    )
  );
}
12345678910111213141516171819202122232425262728# How to transfer tokensYou can transfer tokens from one token account to another token account.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  createTransferCheckedInstruction,
  TOKEN_PROGRAM_ID,
  transferChecked,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );

  const tokenAccountXPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );
  const tokenAccountYPubkey = new PublicKey(
    ""GMxZfDmpR1b3vdJYXHzdF5noVLQogZuUAsDHHQ3ytPfV""
  );

  // 1) use build-in function
  {
    let txhash = await transferChecked(
      connection, // connection
      feePayer, // payer
      tokenAccountXPubkey, // from (should be a token account)
      mintPubkey, // mint
      tokenAccountYPubkey, // to (should be a token account)
      alice, // from's owner
      1e8, // amount, if your deciamls is 8, send 10^8 for 1 token
      8 // decimals
    );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createTransferCheckedInstruction(
","[-3.81795838e-02  1.39098521e-02 -1.02643974e-01  2.46032663e-02
 -1.49682939e-01  1.22119552e-02  6.92970455e-02  9.65590179e-02
  7.92326480e-02  6.99578449e-02 -8.06600030e-04 -1.50390238e-01
 -2.75077652e-02  2.43587904e-02  5.75903244e-02  4.36769519e-03
 -7.28200823e-02 -1.44800376e-02 -4.33139205e-02 -3.48847136e-02
  7.01326579e-02 -9.82373282e-02  5.53422123e-02  1.40100168e-02
  7.38239661e-02 -7.93656483e-02 -1.08660981e-02 -2.94783134e-02
 -3.48564424e-02  9.98638943e-03  9.06284675e-02  6.75211325e-02
 -3.60165127e-02 -2.44149100e-02 -3.31983119e-02  5.74176647e-02
 -7.51063810e-04  1.14122676e-02  6.20941594e-02 -1.02399722e-01
 -2.98009440e-02  2.71708965e-02 -5.34861796e-02 -3.10773160e-02
 -5.78061398e-03 -1.15788653e-02 -4.17235754e-02  1.03666484e-01
  3.47310044e-02  2.54377946e-02  7.20243007e-02  2.70122513e-02
 -1.10288151e-02  3.34403403e-02  1.36286225e-02 -1.41580179e-02
  1.31447408e-02  3.38286534e-02  6.06684312e-02  5.74040785e-03
 -5.47606647e-02  2.34250184e-02 -5.96995187e-06 -3.60566229e-02
 -2.06438117e-02  2.09786855e-02 -5.51962554e-02 -2.30396129e-02
 -1.07063487e-01  1.78177487e-02  2.72585917e-02 -3.84455957e-02
 -6.60132393e-02 -4.63107936e-02 -5.38585000e-02 -4.91385683e-02
 -2.22155489e-02  2.05160188e-03 -5.94244041e-02  5.14484867e-02
 -6.94604171e-03  3.09962854e-02  8.69474486e-02  2.74563804e-02
  7.56680444e-02  6.64809570e-02 -1.99058056e-02 -3.00402544e-03
 -1.67014990e-02 -2.98120137e-02  6.12042611e-03  6.76689819e-02
  2.43428126e-02  7.67057762e-03  9.47703943e-02  5.98010197e-02
 -3.33181806e-02  6.24208413e-02 -3.22162025e-02  6.85316771e-02
  5.13050631e-02  4.73778844e-02 -5.66521846e-02  1.40878521e-02
  9.94795784e-02  3.32200639e-02  1.29874542e-01 -1.46325389e-02
  1.81786846e-02 -2.36885119e-02  5.55608496e-02  2.67770104e-02
 -3.61586437e-02  3.10698152e-02 -2.14587199e-03  6.63849488e-02
  1.51433349e-02  5.50349131e-02  3.59951667e-02  3.58054154e-02
  3.48545909e-02  4.23403271e-03 -8.26900974e-02 -2.27126013e-02
 -3.42944730e-03 -3.10743526e-02  1.17645152e-01  2.17949455e-33
 -3.80468816e-02 -8.62735230e-03  8.80569965e-03 -2.56131100e-03
 -1.61941759e-02  1.97618920e-02  1.82149019e-02  7.54266232e-02
 -6.13747649e-02  1.21371597e-02  2.25170795e-03 -4.25794013e-02
 -1.91901121e-02 -5.25606349e-02 -8.31930712e-02 -6.35822564e-02
 -1.22985365e-02  1.77738126e-02  1.62779048e-01  1.92912687e-02
 -2.64895801e-02 -6.08316362e-02  3.35477851e-03  1.01525839e-02
  2.94946749e-02  3.73345837e-02 -3.13999094e-02 -5.98128326e-02
  6.15350669e-03 -5.86167723e-03  3.29877138e-02  3.36837731e-02
 -3.34496535e-02  1.94248315e-02  1.22551555e-02 -3.26964632e-02
  6.84465421e-03  2.39040982e-02 -8.45739469e-02 -2.77057830e-02
  2.44732834e-02 -1.36929257e-02 -4.37482670e-02 -4.37880494e-02
 -1.21001333e-01  2.44060364e-02 -2.31328164e-03  9.46876407e-03
  1.21802144e-01 -8.12604930e-03 -2.94195134e-02  4.91900034e-02
 -2.78652664e-02 -8.27181339e-02  1.24815717e-01 -6.35688603e-02
  2.49219853e-02 -9.31726489e-03  3.04222628e-02 -2.04870664e-02
 -3.91783454e-02 -4.82770689e-02 -3.97046842e-02 -1.01058939e-02
 -1.02465898e-02  6.56112283e-02 -1.05481379e-01 -6.43535331e-02
 -1.40290859e-03  1.87099017e-02 -5.50635830e-02 -4.28992137e-03
 -2.60295887e-02  5.21823764e-02 -2.25957185e-02 -1.63717684e-03
  3.01627964e-02  5.36436262e-03 -6.99484861e-03  3.70205827e-02
  2.96374466e-02  3.13579217e-02 -8.23969692e-02  9.43339542e-02
  4.19982895e-02  3.72167528e-02 -4.45586182e-02 -3.82910408e-02
 -3.36762071e-02 -4.65597622e-02  2.16593966e-02 -7.01805875e-02
 -2.76508238e-02 -4.15765755e-02 -7.48797581e-02 -3.51480452e-33
 -1.88594721e-02  2.22789571e-02 -6.59479722e-02  5.56788594e-02
 -2.93721315e-02  2.49603880e-04  1.65373981e-02  6.40243851e-03
  2.69914269e-02  3.97715792e-02 -6.63517863e-02  2.30134930e-02
 -6.11397102e-02 -2.48665772e-02  4.62426096e-02 -2.06676852e-02
 -4.95733358e-02  5.69669018e-03  1.23082604e-02 -3.96205336e-02
  2.11738758e-02  5.33922538e-02  4.59099934e-02  5.08600101e-02
  6.90292800e-04  7.05158396e-04 -6.26612678e-02  5.17317243e-02
  2.10054428e-03  2.37979414e-03 -7.18440302e-03 -7.62779415e-02
  4.51610610e-02 -1.11830616e-02 -1.62962507e-02 -1.35351270e-01
  3.50919627e-02  1.37481481e-01  8.93440656e-03  5.71345799e-02
  3.52357775e-02 -6.03026859e-02  4.87126177e-03  3.58323231e-02
  4.67943139e-02 -4.73205075e-02 -1.76728680e-03  5.25167026e-03
  7.26818907e-05  8.07331651e-02  3.40926647e-02 -7.41893947e-02
 -8.92523974e-02  4.11449410e-02 -7.63032287e-02  5.13117202e-02
  1.02183372e-01 -7.64402226e-02  8.72144774e-02 -1.10439368e-01
 -3.71900015e-02 -4.80370857e-02  1.14312209e-01  7.10481629e-02
  7.12527037e-02 -2.32340768e-02 -3.54605280e-02 -4.19192156e-03
  5.77665605e-02  9.08795074e-02  8.74475669e-03 -4.99532893e-02
  4.31228988e-02 -3.08113359e-02  4.12747338e-02 -3.08675990e-02
 -1.58661441e-03 -4.76959683e-02  8.29008445e-02  7.40068033e-02
 -5.26239024e-03  5.98203130e-02  3.59241143e-02 -1.28977830e-02
 -1.06388060e-02 -1.75611824e-02  6.80134967e-02  3.59846838e-02
 -1.69548821e-02  3.65358964e-02 -4.37427722e-02  9.27850083e-02
  1.49835479e-02 -1.00367419e-01 -6.59001395e-02 -5.72818379e-08
 -4.97628562e-02 -8.03248659e-02 -4.49643768e-02  3.53785045e-02
  5.74894249e-02  5.18048508e-03 -5.65461889e-02 -6.72635585e-02
 -3.28870229e-02  2.42598681e-03 -2.53821705e-02 -9.11613274e-03
 -1.63088627e-02 -7.64810741e-02  1.61186866e-02 -8.12929869e-02
  7.51229972e-02 -1.84273440e-02 -7.12041482e-02 -4.38087359e-02
  1.07923045e-03  3.90103012e-02 -4.44308935e-05 -4.13845293e-02
  3.22597311e-03  5.94959420e-04  2.53115948e-02  1.20259315e-01
 -2.86672190e-02  1.20926201e-02 -1.66430622e-02  6.27764985e-02
 -2.13848776e-03 -5.23056090e-02 -1.32239059e-01 -4.77566980e-02
  2.58419663e-02  2.51620654e-02  1.99819561e-02  5.29857865e-03
 -1.17579279e-02 -3.65192606e-03 -3.19576897e-02  1.14903052e-03
  1.52775403e-02 -3.43242884e-02 -3.90579998e-02  2.57141832e-02
  7.47709498e-02  9.75063816e-03 -2.36977823e-03  4.21642745e-03
 -1.98358670e-02  5.50000779e-02 -6.40479550e-02 -7.99628645e-02
 -2.68062837e-02  1.71157215e-02 -2.80223694e-03  1.97793487e-02
  7.69071132e-02 -3.77024077e-02 -5.51163629e-02 -8.24063197e-02]"
"       tokenAccountXPubkey, // from (should be a token account)
        mintPubkey, // mint
        tokenAccountYPubkey, // to (should be a token account)
        alice.publicKey, // from's owner
        1e8, // amount, if your deciamls is 8, send 10^8 for 1 token
        8 // decimals
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + owner */,
      ])}`
    );
  }
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980// 1) use build-in function
{
  let txhash = await transferChecked(
    connection, // connection
    feePayer, // payer
    tokenAccountXPubkey, // from (should be a token account)
    mintPubkey, // mint
    tokenAccountYPubkey, // to (should be a token account)
    alice, // from's owner
    1e8, // amount, if your deciamls is 8, send 10^8 for 1 token
    8 // decimals
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createTransferCheckedInstruction(
      tokenAccountXPubkey, // from (should be a token account)
      mintPubkey, // mint
      tokenAccountYPubkey, // to (should be a token account)
      alice.publicKey, // from's owner
      1e8, // amount, if your deciamls is 8, send 10^8 for 1 token
      8 // decimals
    )
  );
}
1234567891011121314151617181920212223242526272829# How to burn tokensYou can burn token if you are the token owner.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  burnChecked,
  createBurnCheckedInstruction,
  TOKEN_PROGRAM_ID,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );

  const tokenAccountPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );

  // 1) use build-in function
  {
    let txhash = await burnChecked(
      connection, // connection
      feePayer, // payer
      tokenAccountPubkey, // token account
      mintPubkey, // mint
      alice, // owner
      1e8, // amount, if your deciamls is 8, 10^8 for","[-5.06271273e-02  1.65206529e-02 -9.29488987e-02  3.61500904e-02
 -1.14376426e-01 -7.87791423e-03  1.03034072e-01  8.94263312e-02
  1.30888373e-02  7.54430592e-02  1.93151869e-02 -1.73958436e-01
 -5.56503481e-04  2.39329915e-02  3.60964909e-02  3.06069516e-02
 -6.61546513e-02 -4.32599969e-02 -1.46491844e-02 -1.71919528e-03
  6.69862777e-02 -1.05638325e-01  2.30691489e-02 -2.17105597e-02
  9.65157822e-02 -6.67264089e-02  1.05001042e-02 -6.13602512e-02
 -3.52612846e-02  1.98295210e-02  6.85182437e-02  2.86647119e-03
 -4.64602970e-02 -2.25436571e-03 -1.43192755e-03  9.30930302e-02
 -1.62512728e-03 -3.17916796e-02  9.37768742e-02 -6.36064783e-02
 -1.06538879e-02  3.67985070e-02 -1.02318272e-01 -2.55549010e-02
  2.13564392e-02  3.30136865e-02 -1.19250724e-02  9.31371003e-02
  1.08826766e-02  3.43040600e-02  3.22522484e-02  2.88632382e-02
 -3.09887510e-02  3.04565448e-02  6.03007013e-03  2.18529701e-02
  2.26891898e-02  3.76496576e-02  9.14506987e-02 -2.77907439e-02
 -3.03548179e-03 -1.45748416e-02  5.48015116e-03 -1.87207628e-02
 -1.70656480e-02 -4.23836987e-03 -8.45807567e-02  1.91552043e-02
 -5.24917692e-02  7.39444653e-03  4.26587909e-02 -2.52415761e-02
 -4.59390134e-02 -2.56363284e-02 -6.16431832e-02 -7.79493228e-02
  1.12254247e-02  7.57001117e-02 -5.19349836e-02  1.71593875e-02
  7.09467428e-03 -7.49548851e-03  6.26856983e-02  5.25182225e-02
  5.26048951e-02  8.69094729e-02 -1.86845299e-03 -2.04824060e-02
 -2.32151095e-02 -3.05146910e-02  4.43777582e-03  4.99327779e-02
 -1.03578493e-02  9.24460124e-03  8.61893371e-02  3.69709134e-02
 -3.24833728e-02  4.48485427e-02 -4.12037857e-02  6.39102459e-02
  1.65622272e-02 -2.06132117e-03 -3.37661020e-02  1.52102448e-02
  6.42636493e-02  3.84567119e-02  7.38071054e-02 -1.91182643e-02
 -2.82816384e-02  1.33363195e-02  1.42163699e-02  4.90155071e-02
 -3.90537828e-02  2.91515961e-02 -8.47048964e-03  6.88364580e-02
 -2.98812427e-02  6.34043217e-02  5.99279888e-02  2.98137758e-02
  1.08108655e-01  1.61357690e-02 -6.61283508e-02 -1.76938791e-02
 -3.65945920e-02 -4.00457792e-02  1.16607673e-01  2.74920541e-33
 -4.60901633e-02 -1.49215758e-02 -3.02602481e-02 -1.28112761e-02
  1.49315400e-02  1.54658863e-02  8.22244287e-02  8.95724669e-02
 -6.71203882e-02  2.74330867e-03 -3.06865871e-02 -6.66413456e-02
 -4.01695259e-02 -9.34698060e-03 -7.97083154e-02 -8.08297545e-02
 -1.89513937e-02  2.54938379e-03  1.43771634e-01  4.50953543e-02
  1.17195481e-02 -5.25205620e-02 -3.64213157e-03  1.29119484e-02
 -2.01717447e-02 -2.60423170e-03 -2.01156344e-02 -2.53965780e-02
  2.28574593e-02 -6.77894382e-03  4.85745221e-02  3.99559326e-02
 -4.13531363e-02  6.83633378e-03  1.99400894e-02 -3.44337970e-02
  9.61529929e-03  2.11706478e-02 -1.09487310e-01 -2.68698521e-02
  1.64249521e-02 -1.58095956e-02 -9.48301256e-02 -9.23998468e-03
 -1.13299251e-01 -8.99332762e-03  2.41069514e-02 -7.90845901e-02
  1.04482204e-01  4.24084850e-02 -6.20429702e-02 -5.10001183e-03
 -5.07283509e-02 -8.04449841e-02  1.16085611e-01 -9.89568308e-02
  9.87731572e-03  1.80506203e-02 -3.92049141e-02 -2.18920466e-02
 -3.01878564e-02 -3.99665013e-02 -1.44896703e-02 -5.09055853e-02
  9.77908541e-03  9.35176089e-02 -1.24822110e-01 -2.37863269e-02
  1.08055137e-02 -2.11486369e-02 -4.46698219e-02  1.57783329e-02
  3.09479274e-02  4.69572619e-02 -8.19202885e-03  3.12266778e-02
 -2.83122472e-02 -1.27872790e-03 -2.74600741e-02 -2.06095651e-02
  2.16382910e-02  3.00293937e-02 -8.58763084e-02  7.64146894e-02
  3.32594290e-02  2.78200824e-02 -6.31414652e-02 -4.97198626e-02
 -3.19999941e-02 -1.70996264e-02  3.96379363e-03 -6.91452026e-02
 -3.56873386e-02 -3.93423066e-02 -8.31122100e-02 -3.80896977e-33
 -1.82698295e-02  2.88019255e-02 -3.14902663e-02  2.24495176e-02
 -2.48314422e-02  1.79952160e-02 -4.96882666e-03  1.07522914e-02
  3.47209685e-02  6.39413297e-02 -9.86666754e-02  4.16788906e-02
 -3.29483412e-02 -1.12760430e-02  4.01426703e-02 -1.46608502e-02
 -2.80252174e-02 -3.64103988e-02 -7.63577223e-03 -4.94097397e-02
 -8.40015803e-03  6.88681453e-02 -8.53382703e-03  3.96732911e-02
 -7.07112299e-03  3.62352841e-02 -1.93552375e-02  1.01842895e-01
  5.50782606e-02 -9.45382752e-03 -2.38905959e-02 -5.50224781e-02
 -4.06257575e-03  3.03281676e-02 -9.52891633e-03 -9.85104144e-02
  4.10172865e-02  1.39736503e-01  6.99527981e-03  3.22955586e-02
  5.29075935e-02 -9.50186700e-02  1.88884344e-02  1.95838860e-03
  5.35783283e-02 -3.01116966e-02 -3.67400842e-03 -4.30582091e-02
 -2.80134287e-03  9.17017087e-02  7.04077631e-02 -1.23537118e-02
 -1.10470250e-01  5.38289845e-02 -7.72253275e-02  4.17298600e-02
  1.08149894e-01 -6.32217154e-02  1.22208945e-01 -7.91369081e-02
 -7.96037819e-03 -6.16528057e-02  1.29350722e-01  7.48308972e-02
  7.58287311e-02 -6.45172521e-02 -6.61209747e-02  5.46082109e-03
  5.91157228e-02  9.51188281e-02  1.13496277e-02 -1.70593522e-02
  2.52881553e-02 -4.12825271e-02  6.41893893e-02 -2.26297844e-02
 -1.72377843e-02 -7.35028163e-02  6.71503097e-02  7.17052221e-02
 -2.03445051e-02  5.12203425e-02  8.80973637e-02  2.96559408e-02
  2.36578714e-02  4.02995460e-02  6.47362322e-02  1.64832473e-02
 -2.00437065e-02  3.64854448e-02 -3.20402831e-02 -3.24629061e-03
  4.44368720e-02 -8.95300061e-02 -5.37217036e-02 -5.60446907e-08
 -7.34983608e-02 -4.07305211e-02 -6.69319481e-02  2.60488167e-02
  4.11178917e-02  3.84326163e-03 -6.20379820e-02 -4.61543836e-02
 -4.46101725e-02 -3.87319848e-02 -6.29894733e-02  4.23083566e-02
 -6.79454254e-03  5.39233023e-03 -1.01307156e-02 -6.70624152e-02
  5.35094552e-02 -2.07397845e-02 -2.77960170e-02 -3.60559039e-02
 -1.38576818e-03  7.99904019e-03 -2.87121977e-03 -3.57454196e-02
 -5.72758261e-03 -2.91044228e-02  5.49499094e-02  1.30426839e-01
  2.73070578e-03 -1.53804673e-02 -3.34801003e-02  6.22866116e-02
  2.64272094e-02 -5.96051589e-02 -8.19536224e-02 -3.71780507e-02
  3.73148806e-02 -2.93947477e-02  1.74623188e-02  2.95324679e-02
 -1.75388549e-02  4.45098290e-03 -3.71094458e-02  1.96277481e-02
  9.36661102e-03 -4.27861605e-03 -1.83323864e-02  1.44171054e-02
  4.72969823e-02  8.56030791e-04  1.31692486e-02 -1.11761391e-02
 -7.75329620e-02  2.77601536e-02 -7.73908496e-02 -6.00488484e-02
 -8.51492807e-02 -1.60881281e-02 -1.99141214e-03  3.34710553e-02
  7.66617358e-02  3.58775211e-03 -2.18271744e-02 -8.21413100e-02]"
"1 token
      8
    );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createBurnCheckedInstruction(
        tokenAccountPubkey, // token account
        mintPubkey, // mint
        alice.publicKey, // owner of token account
        1e8, // amount, if your deciamls is 8, 10^8 for 1 token
        8 // decimals
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + token authority */,
      ])}`
    );
  }
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475// 1) use build-in function
{
  let txhash = await burnChecked(
    connection, // connection
    feePayer, // payer
    tokenAccountPubkey, // token account
    mintPubkey, // mint
    alice, // owner
    1e8, // amount, if your deciamls is 8, 10^8 for 1 token
    8
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createBurnCheckedInstruction(
      tokenAccountPubkey, // token account
      mintPubkey, // mint
      alice.publicKey, // owner of token account
      1e8, // amount, if your deciamls is 8, 10^8 for 1 token
      8 // decimals
    )
  );
}
123456789101112131415161718192021222324252627# How to close token accountsYou can close a token account if you don't want to use it anymore. There are two situations:Wrapped SOL - Closing converts Wrapped SOL to SOLOther Tokens - You can close it only if token account's balance is 0.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import { closeAccount, createCloseAccountInstruction } from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const tokenAccountPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );

  // 1) use build-in function
  {
    let txhash = await closeAccount(
      connection, // connection
      feePayer, // payer
      tokenAccountPubkey, // token account which you want to close
      alice.publicKey, // destination
      alice // owner of token account
","[-3.85175943e-02  3.01954150e-02 -7.16284215e-02  4.96257208e-02
 -1.29218385e-01 -7.70862401e-03  1.05450273e-01  7.41202608e-02
  7.02929422e-02  6.94574565e-02  2.50450857e-02 -1.10586941e-01
 -5.32816350e-02 -2.33238451e-02  4.52707186e-02  3.03504318e-02
 -7.52456263e-02 -4.78412360e-02 -6.29627332e-02 -6.90180510e-02
  8.65752324e-02 -8.26427117e-02  2.53560208e-02  2.27959640e-02
  7.97707364e-02 -4.77123298e-02  6.14098390e-04 -3.00400034e-02
 -2.03571804e-02  2.87982845e-03  8.91672000e-02  2.61316765e-02
 -3.82341594e-02 -1.20667564e-02 -8.14958548e-05  8.26276913e-02
  1.37071838e-04  1.34936674e-03  4.91435789e-02 -9.92750227e-02
 -8.85447208e-03  2.95110829e-02 -9.65455323e-02 -3.17470059e-02
  2.52710599e-02  3.31343128e-03 -1.03915203e-02  8.13425332e-02
  1.70666985e-02  1.84783172e-02  5.29236197e-02  6.50103390e-02
 -1.30333537e-02  2.47140508e-02  2.43042305e-04  5.15367696e-03
 -6.94194529e-03  3.38194445e-02  4.48119119e-02 -9.69262142e-03
 -2.72351895e-02 -1.41535234e-02  2.74153221e-02 -4.24538776e-02
  1.39454482e-02 -1.68406162e-02 -2.38125958e-02  1.32535014e-03
 -7.03532621e-02  3.72174792e-02  4.12958376e-02 -1.23657957e-02
 -3.09973862e-02 -3.64358835e-02 -7.06751868e-02 -3.94281261e-02
  2.09242832e-02  1.65955015e-02 -6.42058998e-02  1.43718738e-02
 -4.83156601e-03  1.29202418e-02  9.86638963e-02  3.46268527e-02
  4.41715084e-02  9.09565091e-02 -2.37545930e-02  1.40857045e-02
  1.81722827e-02  6.43739616e-03 -2.74320152e-02  6.94341436e-02
  3.10041718e-02  9.31866560e-03  8.75016525e-02  4.42928225e-02
 -1.92677658e-02  5.02518974e-02 -4.05106656e-02  7.44189173e-02
 -1.17114307e-02  1.18803000e-02 -4.75761071e-02 -1.04622664e-02
  1.04073390e-01  2.57934872e-02  7.49924481e-02 -2.81424001e-02
 -8.22425634e-03 -1.64077356e-02  6.52878359e-02  5.74233420e-02
 -2.79774365e-04  9.26605053e-03 -3.11880354e-02  7.28012025e-02
 -7.79914716e-03  6.73128143e-02  7.20681474e-02  4.25260440e-02
  9.71919671e-02  1.82771999e-02 -9.85991135e-02 -1.93981696e-02
 -7.09640980e-02 -8.93271938e-02  9.81722847e-02  2.27403864e-33
 -3.22949588e-02 -7.41962926e-04 -1.43217491e-02 -2.34322133e-03
  3.31198163e-02  8.56473856e-03  3.49836461e-02  8.89269263e-02
 -1.07823931e-01  2.81080045e-02 -2.79618683e-03 -5.19527681e-02
 -1.86855197e-02 -2.66240165e-02 -8.36139843e-02 -1.00180164e-01
 -1.46038206e-02  1.76492985e-02  1.25077650e-01 -2.51771621e-02
 -3.08371820e-02 -5.55867255e-02 -1.03540868e-02 -9.48775187e-03
 -2.43487153e-02  2.06576418e-02 -9.85340122e-03 -5.84244467e-02
 -2.16680355e-02 -6.45380421e-03  6.29912168e-02  1.66853908e-02
 -3.28086503e-02  1.38536142e-02  3.53521556e-02 -2.20902152e-02
  2.10721232e-03  3.47855687e-02 -1.09905154e-01 -5.29338829e-02
  2.23770160e-02 -7.50388531e-03 -6.84743598e-02 -1.67662445e-02
 -1.46702766e-01 -8.32944829e-03 -1.53154805e-02  1.23223271e-02
  1.07537910e-01  1.93960648e-02 -3.13799195e-02  3.43110263e-02
  1.32947294e-02 -6.38971850e-02  1.17066003e-01 -7.03652352e-02
  1.30526982e-02 -1.01607544e-02  3.32504399e-02 -1.13975555e-02
 -1.12011889e-02 -3.96784246e-02 -4.90154624e-02 -2.07930710e-02
 -9.78637859e-03  8.54945108e-02 -1.04257777e-01 -5.77424951e-02
  3.11869718e-02 -3.89115848e-02 -5.58985807e-02 -2.84537091e-04
  2.08507348e-02  3.09915412e-02 -3.29574128e-03  1.94727723e-02
 -2.04736590e-02 -1.99799915e-03 -5.31174950e-02  2.52105854e-02
  6.28510024e-03 -2.04681028e-02 -1.22595794e-01  8.09453949e-02
  4.90208641e-02  3.97689082e-02 -5.47717139e-02 -5.59670702e-02
 -2.70606466e-02 -2.29988918e-02 -4.59432118e-02 -8.75417590e-02
  3.96518502e-03 -3.93927209e-02 -4.33956236e-02 -3.13030766e-33
  8.61923490e-03  1.86748162e-03 -4.20684367e-02  4.29137461e-02
 -9.96991340e-03 -1.69603284e-02  1.64673943e-02  1.36438720e-02
 -2.82383547e-03  2.29373947e-02 -7.00918809e-02  2.34829299e-02
 -5.83856143e-02  3.31918560e-02  4.31882292e-02  1.32697010e-02
 -5.49327768e-02 -1.88371316e-02  2.70195473e-02 -3.39494012e-02
 -6.84589567e-03  1.01969257e-01  6.78717904e-03  7.73564279e-02
 -6.36981726e-02  1.57114696e-02 -1.67848393e-02  7.27617517e-02
  1.77368652e-02 -1.74788255e-02 -1.17900828e-02 -4.65680249e-02
 -1.61889812e-03  4.27634083e-02 -1.60752907e-02 -1.06457993e-01
  4.71045896e-02  1.35998577e-01  1.74397808e-02  4.88719977e-02
  3.84288169e-02 -3.35872322e-02  1.15681463e-03  5.04145995e-02
  3.65267284e-02 -4.38115746e-02  3.15205567e-02 -1.43512301e-02
  3.01520173e-02  1.02745160e-01  6.42308295e-02 -7.04054981e-02
 -1.01078227e-01  5.09781316e-02 -6.82526007e-02  2.78872680e-02
  7.05619603e-02 -1.07171804e-01  8.97231176e-02 -5.95046021e-02
 -1.76097304e-02 -8.22819918e-02  1.57665938e-01  6.77283332e-02
  5.68407252e-02 -2.71827038e-02 -6.49230555e-02 -6.14585914e-03
  8.36172551e-02  9.48707983e-02  2.33627874e-02 -3.74965556e-02
  4.35307762e-03 -4.69906405e-02  5.58387823e-02 -2.01176573e-02
  1.43911531e-02 -7.22830296e-02  5.74186295e-02  8.40993747e-02
 -1.11317132e-02  2.87625063e-02  2.61388458e-02  1.43079888e-02
  3.83821614e-02 -7.45653547e-03  4.27560844e-02  2.16396209e-02
 -5.61078126e-03  6.14717789e-02 -3.52184251e-02  4.63180169e-02
  2.13471726e-02 -7.48411343e-02 -9.82008055e-02 -5.74380152e-08
 -7.49317780e-02 -9.04816613e-02 -7.24862888e-02  4.21642289e-02
  5.99670038e-02 -2.63633113e-02 -1.36645790e-02 -7.59587586e-02
 -7.06131160e-02 -6.33185208e-02 -2.22036913e-02  2.81693004e-02
 -2.00106204e-02 -5.70761226e-02  1.62699185e-02 -5.33381775e-02
  3.44584361e-02  1.50437537e-03 -5.17801233e-02 -5.27442433e-02
  2.56112590e-02  1.90520231e-02  1.91062018e-02 -2.33836211e-02
 -6.25824882e-03 -1.23213520e-02  5.57435267e-02  8.06782395e-02
 -1.45291723e-02  2.41869073e-02 -1.45861376e-02  9.13392901e-02
  3.86821926e-02 -6.15252033e-02 -1.01412311e-01 -4.71109785e-02
  1.74559448e-02 -7.61650130e-03  2.24603619e-02  2.34630667e-02
 -1.02454028e-03  2.67658085e-02 -1.41855450e-02  9.59741510e-03
  7.52377417e-03 -4.23830748e-02 -4.20378670e-02  2.46045664e-02
  5.12488075e-02  1.82192109e-03  1.78161934e-02 -1.21511344e-03
 -4.98472415e-02  3.17848362e-02 -7.50002041e-02 -6.46283850e-02
  3.15680378e-03  3.20353061e-02  1.53754381e-02  4.18317243e-02
  7.90250376e-02 -3.73391621e-02 -2.90377531e-03 -1.10398389e-01]"
"   );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createCloseAccountInstruction(
        tokenAccountPubkey, // token account which you want to close
        alice.publicKey, // destination
        alice.publicKey // owner of token account
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + owner */,
      ])}`
    );
  }
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// 1) use build-in function
{
  let txhash = await closeAccount(
    connection, // connection
    feePayer, // payer
    tokenAccountPubkey, // token account which you want to close
    alice.publicKey, // destination
    alice // owner of token account
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createCloseAccountInstruction(
      tokenAccountPubkey, // token account which you want to close
      alice.publicKey, // destination
      alice.publicKey // owner of token account
    )
  );
}
1234567891011121314151617181920212223# How to set authority on token accounts or mintsYou can set/update authority. There are 4 types:MintTokens (mint account)FreezeAccount (mint account)AccountOwner (token account)CloseAccount (token account)TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  AuthorityType,
  createSetAuthorityInstruction,
  setAuthority,
  TOKEN_PROGRAM_ID,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const randomGuy = Keypair.generate();
  console.log(`random guy: ${randomGuy.publicKey.toBase58()}`);

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );

  // authority type

  // 1) for mint account
  // AuthorityType.MintTokens
  // AuthorityType.FreezeAccount

  // 2) for token account
  // AuthorityType.AccountOwner
  // AuthorityType.CloseAccount

  // 1) use build-in function
  {
    let txhash = await setAuthority(
      connection, // connection
      feePayer, // payer
      mintPubkey, // mint account || token account
      alice, // current authority
      AuthorityType.MintTokens, // authority type
      randomGuy.publicKey // new authority (you can pass `null` to close it)
    );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
    let tx =","[ 6.12216361e-04  1.18626915e-02 -3.79838459e-02  5.18953055e-02
 -8.81350860e-02  1.53083373e-02  9.43915024e-02  4.74263020e-02
  7.22517595e-02  9.73412320e-02  2.50818245e-02 -9.11330879e-02
 -6.69082478e-02 -2.20891386e-02  5.72916307e-02  7.44989365e-02
 -6.69683740e-02 -1.83050055e-02 -2.97467373e-02  5.77443978e-03
  4.11139540e-02 -1.04411710e-02  4.34767269e-02  2.70517357e-02
  1.73274837e-02 -6.34247065e-02  1.49853714e-02 -6.06460646e-02
 -2.47989669e-02 -1.48558449e-02  7.01707304e-02 -2.33974494e-02
 -1.07401572e-01 -4.62678373e-02 -3.45584303e-02  1.12893417e-01
  1.39734261e-02 -1.01616178e-02  5.88451102e-02 -9.06979516e-02
  2.34741215e-02  3.00595239e-02 -1.06767356e-01 -4.57175486e-02
  2.13767979e-02  2.22155284e-02 -4.31449413e-02  3.49160470e-02
  1.45935966e-02  2.70596370e-02 -3.11912484e-02 -8.22658651e-03
 -5.37786111e-02  1.36066424e-02  3.04252356e-02  4.00846601e-02
  2.60626134e-02  1.86253916e-02  4.94062975e-02  2.15553939e-02
  9.16045438e-03  1.79341026e-02  6.69905124e-03 -2.89567057e-02
  4.00664881e-02 -3.98311019e-02  7.79908476e-03 -1.36394901e-02
 -3.55706476e-02 -2.58398540e-02  4.99012731e-02 -3.16382619e-03
 -7.87939504e-02 -4.57972474e-02 -6.20232262e-02 -3.90619077e-02
  1.61990616e-02  1.54231163e-02 -1.08772665e-01  4.63064909e-02
  1.90436635e-02  1.38308117e-02  8.68763775e-02  1.72742140e-02
 -2.33678669e-02  1.08280040e-01 -6.71333401e-03 -5.72546907e-02
  6.83421083e-03 -2.78766546e-03 -5.01524918e-02  5.00874966e-02
  3.58052365e-02  9.29244328e-03  9.01929140e-02  2.67331507e-02
 -6.19113781e-02  4.73856740e-02 -2.45288070e-02  7.63847604e-02
  1.45195080e-02  3.37693915e-02 -1.67636406e-02 -1.56825278e-02
  4.97480780e-02  5.27038947e-02  7.65227377e-02 -5.32109626e-02
 -2.39902530e-02  8.64190795e-03  3.53631079e-02  4.70902994e-02
 -5.62103279e-02  3.92214246e-02 -2.69441083e-02  1.32473394e-01
 -2.26838584e-03  9.69834924e-02  1.02576748e-01  5.25923111e-02
  7.44452327e-02  2.45965626e-02 -8.65354016e-02  6.84789941e-03
 -1.75417513e-02 -8.39957446e-02  1.21369407e-01  2.13158250e-33
 -1.89769827e-02 -6.30187318e-02 -5.70041388e-02  7.03976825e-02
  7.71691799e-02 -2.99829757e-03  4.15023118e-02  4.85744439e-02
 -6.69389516e-02  1.72896851e-02  8.78387596e-04 -1.17126755e-01
 -5.10816090e-02 -3.64135802e-02 -5.80151491e-02 -1.05480306e-01
 -2.18993728e-06  2.66663115e-02  8.33262429e-02  3.23680528e-02
  4.18752544e-02 -2.57899836e-02  2.81697344e-02  2.34496836e-02
 -9.04016383e-03 -2.31964458e-02  5.63253602e-03 -4.64368723e-02
 -1.24885645e-02 -1.07331183e-02  8.07028785e-02  3.54370773e-02
  5.70535148e-03  1.14504628e-01  3.82701913e-03 -8.03586096e-03
 -3.18351313e-02  3.47612463e-02 -9.06195343e-02 -5.58755770e-02
  1.38455839e-03 -1.12375841e-02 -1.04970992e-01  4.03595455e-02
 -8.84372592e-02 -9.38079506e-02  5.95661290e-02 -1.61857232e-02
  9.35273394e-02  2.59268451e-02 -2.29449943e-03 -1.56913698e-02
 -7.39231938e-03 -9.47630480e-02  7.68551752e-02 -3.58263329e-02
 -2.58050207e-02 -4.33166139e-02 -3.82352062e-02 -1.84296016e-02
 -4.19657603e-02 -2.02762876e-02 -3.68641764e-02 -9.90079716e-03
 -3.97824533e-02  2.06529517e-02 -8.27744901e-02 -8.01939592e-02
  4.01557758e-02 -6.58611879e-02 -5.53090759e-02  7.36188656e-03
 -1.54327052e-02  5.03696594e-03 -2.58966675e-03  3.38951051e-02
 -5.68791665e-02  6.09731628e-03  4.30158451e-02  2.09191106e-02
  8.38302523e-02  9.35986917e-03 -1.02861241e-01  9.21077505e-02
  1.53891854e-02  4.06321399e-02 -5.68337962e-02 -3.66140045e-02
  7.49202492e-03  3.05055939e-02 -7.65680298e-02 -2.05456186e-02
 -5.59259467e-02 -3.58144715e-02  3.96178057e-03 -3.63181175e-33
 -6.12019701e-03 -3.36312093e-02 -4.30416688e-02  1.17180608e-02
 -2.84726769e-02 -3.76642197e-02  5.85313626e-02 -5.49149811e-02
 -2.10712124e-02  1.99378021e-02 -8.07325169e-02  4.24717069e-02
  1.24159781e-02  2.78275646e-02  4.78194607e-03 -3.58065553e-02
  4.70957682e-02 -5.11928238e-02 -1.88815687e-03 -3.72740030e-02
 -4.35056500e-02  3.95450406e-02  1.75154302e-02  6.17221044e-03
 -6.79208385e-03 -7.04990234e-03 -5.58016002e-02  6.50598034e-02
  1.88889448e-02 -3.28612588e-02 -3.91509471e-04 -7.32785091e-02
  4.82618101e-02  1.67798083e-02  1.51364245e-02 -6.81016669e-02
  5.36735822e-03  1.24704301e-01 -1.38003659e-03  1.53944558e-02
  7.68539608e-02 -3.19536291e-02 -8.65425356e-03 -3.49445529e-02
  7.01734349e-02 -3.38643305e-02  1.94232271e-03 -4.19360213e-02
  2.47416608e-02  5.36725074e-02  2.53568171e-03 -3.58330458e-02
 -5.20084314e-02  6.52193464e-03 -5.49863502e-02  4.02931497e-02
  1.31484419e-01 -8.95916969e-02  1.01493649e-01 -9.52826887e-02
  2.28867512e-02 -2.80070025e-02  1.72538519e-01  6.05156235e-02
  9.34722424e-02 -4.36261967e-02 -2.51899734e-02 -1.26094325e-02
  4.63479199e-02  8.77682641e-02 -3.61919701e-02 -8.41885246e-03
  1.09561244e-02 -1.58457924e-02  7.95302689e-02 -3.16928402e-02
 -3.18304123e-03 -1.17904715e-01  5.70099428e-02  3.61792184e-02
  4.38745767e-02  1.99866681e-05  2.84255072e-02  5.50327115e-02
  5.22545464e-02  3.07621341e-02  2.15942897e-02  6.80672470e-04
 -4.08978686e-02  6.40003905e-02 -2.16872301e-02 -1.66035781e-03
  1.81630161e-02 -1.27700776e-01 -1.06267951e-01 -5.28635091e-08
 -5.08883037e-02 -7.72248488e-03 -3.51130255e-02  2.43203584e-02
  1.17453178e-02 -5.31216823e-02  6.13192609e-03 -1.19994413e-02
 -2.05611344e-02 -2.40548514e-02 -1.15437157e-01  6.38759062e-02
  3.07822637e-02 -1.35585936e-02 -3.39572900e-03 -1.08426787e-01
  7.30759129e-02 -4.97149304e-02 -1.47039080e-02 -6.21298477e-02
 -6.73403172e-03 -2.66377628e-02  1.16853428e-03 -2.47382224e-02
 -2.77112704e-02 -1.05773157e-04  9.47711095e-02  4.90389466e-02
 -2.86659156e-03 -2.15062909e-02 -1.30461752e-02  4.65285070e-02
 -6.96237804e-03 -2.20353864e-02 -1.00309767e-01 -8.95026140e-03
  5.91406375e-02 -2.26742402e-02 -4.55385586e-03  3.59351523e-02
  2.15343833e-02  5.84485531e-02  1.82213727e-02  3.09695043e-02
  1.17344633e-02  9.01814457e-03  2.65473593e-02 -1.50089050e-02
  5.29415198e-02  6.02424294e-02  5.20543708e-03 -2.02730652e-02
 -9.22802612e-02  3.46644633e-02 -8.43721554e-02 -4.23161797e-02
  2.51462813e-02 -2.22500972e-02 -1.32670319e-02  3.83555098e-03
  4.69938815e-02 -4.71638795e-03 -2.52458937e-02 -1.04681544e-01]"
"new Transaction().add(
      createSetAuthorityInstruction(
        mintPubkey, // mint acocunt || token account
        alice.publicKey, // current auth
        AuthorityType.MintTokens, // authority type
        feePayer.publicKey // new auth (you can pass `null` to close it)
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + origin auth */,
      ])}`
    );
  }
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283// 1) use build-in function
{
  let txhash = await setAuthority(
    connection, // connection
    feePayer, // payer
    mintPubkey, // mint account || token account
    alice, // current authority
    AuthorityType.MintTokens, // authority type
    randomGuy.publicKey // new authority (you can pass `null` to close it)
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createSetAuthorityInstruction(
      mintPubkey, // mint acocunt || token account
      alice.publicKey, // current auth
      AuthorityType.MintTokens, // authority type
      randomGuy.publicKey // new auth (you can pass `null` to close it)
    )
  );
}
12345678910111213141516171819202122232425# How to approve a token delegateYou can set a delegate with an allowed amount. After you setting, the delegate is like an another owner of your token account. A token account can only delegate to one account at the same timeTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  approveChecked,
  createApproveCheckedInstruction,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const randomGuy = Keypair.generate();

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );
  const tokenAccountPubkey = new PublicKey(
    ""GMxZfDmpR1b3vdJYXHzdF5noVLQogZuUAsDHHQ3ytPfV""
  );

  // 1) use build-in function
  {
    let txhash = await approveChecked(
      connection, // connection
      feePayer, // fee payer
      mintPubkey, // mint
      tokenAccountPubkey, // token account
      randomGuy.publicKey, // delegate
      alice, // owner of token account
      1e8, // amount, if your deciamls is 8, 10^8 for 1 token
      8 // decimals
    );
   ","[-5.35010137e-02  2.86447685e-02 -1.07060984e-01  1.98953208e-02
 -7.42231980e-02  2.45813094e-02  5.69945201e-02  3.38329375e-02
  7.22438693e-02  1.02079593e-01  3.96707244e-02 -9.07899961e-02
 -3.85630466e-02 -4.96582827e-03  4.28540446e-02  7.70647302e-02
 -2.22216975e-02 -7.28590116e-02 -1.71286967e-02  1.36833694e-02
  1.40909730e-02 -9.31017622e-02  3.01487353e-02  1.35289477e-02
  7.56093711e-02 -1.12892874e-01  1.83248315e-02 -3.88458520e-02
 -1.91673841e-02  1.43235745e-02  8.07964355e-02  2.96014384e-03
 -7.04390705e-02 -5.07008024e-02 -1.39716864e-02  7.96263441e-02
  1.36142951e-02  4.30636741e-02  6.71276748e-02 -8.55516642e-02
  2.05717329e-02  3.19054760e-02 -8.45845491e-02 -1.29349446e-02
  3.48262563e-02  3.93784838e-03 -4.53863712e-03  4.52731289e-02
  1.76132284e-02  1.71722304e-02  1.36522744e-02  3.28378826e-02
 -1.08689321e-02  3.49674700e-03 -2.12819409e-02  4.81051803e-02
  6.10263012e-02  4.16210517e-02  6.59635589e-02  4.29837266e-03
  9.05101188e-03 -2.74141207e-02 -6.56326348e-03 -1.15103787e-02
 -1.78730134e-02  1.07202623e-02 -2.75361370e-02 -2.89278999e-02
 -5.60043119e-02 -2.45103128e-02  3.64819095e-02 -1.67270489e-02
 -9.17089060e-02 -1.33796856e-02 -1.90003496e-02 -7.73304179e-02
 -2.27131788e-02  4.60971780e-02 -8.81290287e-02  2.17995085e-02
  3.97793483e-03  5.03159538e-02  9.25978795e-02  4.12565246e-02
  4.10824046e-02  8.14976767e-02 -3.15162423e-03 -1.12773348e-02
 -1.14678303e-02 -7.67898466e-03  1.61434896e-02  7.93776438e-02
 -4.55750525e-03 -2.05632690e-02  1.14662528e-01  3.07269674e-02
  7.69175938e-04  2.80990098e-02 -1.85420252e-02  4.23443504e-02
  2.15736851e-02  2.60905642e-02 -6.56185970e-02  9.75268893e-03
  1.00294657e-01  5.85742742e-02  4.40436192e-02 -4.35331836e-03
  2.34351829e-02  5.15536293e-02  7.73145817e-03  3.62790637e-02
 -4.99854200e-02 -2.05884874e-02 -4.80244309e-02  1.31433696e-01
 -6.38942048e-02  8.13396201e-02  5.64849153e-02  2.05432680e-02
  9.03374553e-02  1.65063497e-02 -8.58202577e-02 -3.10213473e-02
  2.03397740e-02 -6.06137328e-02  8.46330822e-02  1.00216468e-33
 -1.45627810e-02 -2.54852846e-02 -3.23188454e-02  9.01589729e-03
  3.69235873e-02  9.76171717e-03  7.93789402e-02  2.45702639e-02
 -2.54502110e-02  5.77254081e-03 -1.07834432e-02 -9.80930626e-02
 -1.47855924e-02 -6.66279569e-02 -7.87731931e-02 -3.26695666e-02
 -2.35384740e-02 -2.12097336e-02  1.32537514e-01  8.74725282e-02
  5.04694693e-03 -3.46332118e-02  3.36758569e-02  6.32811850e-03
 -4.93093506e-02  5.96287381e-03 -3.27689806e-03 -6.21397942e-02
 -1.99648999e-02  6.68030046e-03  2.36808006e-02  4.58434187e-02
 -1.73105504e-02  7.63107315e-02 -1.58348475e-02 -2.01353524e-02
 -2.17364281e-02 -6.93013240e-03 -9.42940190e-02 -6.79166093e-02
  4.86755520e-02 -1.02318311e-02 -1.22913525e-01  2.98365299e-02
 -6.84491023e-02 -4.91510965e-02  3.10394797e-03 -7.76145514e-03
  1.21390864e-01  3.45054939e-02 -9.29233804e-02  2.21060161e-02
  1.54806776e-02 -8.87585655e-02  8.98633674e-02 -6.74846098e-02
 -3.15682590e-02 -2.16276236e-02 -5.20087667e-02 -9.08216983e-02
 -4.22339188e-03 -3.45958956e-02 -5.77445440e-02  1.74137335e-02
 -3.88658904e-02 -5.09707816e-03 -1.31601110e-01 -6.33758977e-02
  1.14889781e-03 -5.93334511e-02 -4.33746800e-02  3.73188220e-03
 -1.59462672e-02  6.80174902e-02 -1.79315042e-02  3.51836979e-02
 -3.13104072e-04  5.73254414e-02  4.97392043e-02 -1.05239376e-02
  4.86423783e-02  3.95266302e-02 -8.25199485e-02  9.67932045e-02
  9.64080729e-03  3.71859670e-02 -7.30716288e-02 -2.81218514e-02
 -4.01802827e-03 -1.31994840e-02  6.22765219e-04 -7.27092326e-02
  7.84787722e-03  3.68701220e-02 -5.23026139e-02 -3.10194261e-33
 -1.06218522e-02 -3.37338075e-02 -4.40700389e-02  1.79111790e-02
 -3.57221346e-03  3.06804888e-02 -4.18862849e-02 -7.86763709e-03
 -1.24177430e-02  1.12518137e-02 -3.72820795e-02  3.67651843e-02
 -5.10531478e-02  2.60575097e-02  6.50728419e-02 -3.30530703e-02
 -4.89719538e-03 -4.20513423e-03 -2.74398234e-02 -1.11810714e-02
 -1.60156470e-02  3.05065960e-02  1.41320135e-02  2.94850040e-02
  1.16082272e-02  1.59538705e-02 -3.89719903e-02  7.84074515e-02
 -4.60440572e-03 -5.19347936e-03 -6.46709744e-03 -1.13535160e-02
 -3.72978300e-02  4.83353995e-02  3.31767835e-02 -6.29359037e-02
  1.69110149e-02  1.16479039e-01 -2.98753437e-02  5.99994659e-02
  6.54059798e-02 -4.72351350e-02  1.70112483e-03 -1.94760151e-02
  9.21674743e-02 -2.55075395e-02  1.70198746e-03 -6.74681962e-02
  6.07105764e-03  1.04470812e-01  4.58170008e-03 -2.32138205e-02
  7.08022760e-03  1.91400945e-02 -8.62094909e-02  2.88045071e-02
  1.30297482e-01 -7.30657279e-02  1.51671737e-01 -9.59281400e-02
 -4.09226306e-03 -1.37809012e-02  9.99840423e-02  1.01783872e-01
  4.12960909e-02 -4.29490395e-02 -2.26001088e-02  7.14636520e-02
  7.48556480e-02  9.37451050e-02 -1.96796078e-02 -6.11020550e-02
  3.05537530e-03 -1.58848073e-02  1.03083923e-01 -2.29043774e-02
  1.54214529e-02 -1.50662243e-01  7.13415351e-03  4.69206758e-02
  4.62921485e-02  2.68625095e-02  5.02167009e-02 -4.10802709e-03
  1.35975955e-02  4.84504411e-03  1.35724023e-02 -1.45433638e-02
  1.14495084e-02  7.12766871e-02 -2.63324119e-02  1.26325637e-02
 -7.78953359e-03 -1.16894074e-01 -8.90086368e-02 -5.47739916e-08
 -3.95928286e-02 -2.06706356e-02 -4.26496789e-02  3.36491726e-02
  5.88359721e-02 -1.85665376e-02 -4.97127622e-02 -3.94787304e-02
 -6.63649514e-02 -4.84329611e-02 -7.91508928e-02  5.94140105e-02
  3.77447121e-02 -4.06360328e-02 -1.61936656e-02 -6.97181970e-02
  3.94700654e-02 -3.89990434e-02 -3.14565971e-02 -5.36585636e-02
 -2.58845352e-02 -7.06936885e-03  5.62958373e-03 -5.96788973e-02
 -2.17828844e-02 -3.53111550e-02  7.26389512e-02  8.84338915e-02
  2.01063957e-02  1.06899608e-02 -7.46055618e-02  7.65978023e-02
  3.00906841e-02 -4.04133089e-02 -1.50448203e-01 -1.77834816e-02
  4.42044809e-02 -6.68170750e-02 -4.26832773e-03 -4.13264260e-02
  2.05595605e-02  4.31532972e-02 -3.02153621e-02 -1.15492335e-02
  4.49075084e-03  1.23226084e-03  1.72215141e-02  1.90815106e-02
  8.21437910e-02 -2.47691236e-02 -2.08315868e-02 -1.64179988e-02
 -3.54828611e-02  3.02812532e-02 -3.06806769e-02 -4.34390903e-02
 -2.20803414e-02  1.99043229e-02  6.37514591e-02 -5.79439998e-02
  2.61205006e-02 -2.23533325e-02  7.84917083e-03 -8.02066550e-02]"
"console.log(`txhash: ${txhash}`);
  }
  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createApproveCheckedInstruction(
        tokenAccountPubkey, // token account
        mintPubkey, // mint
        randomGuy.publicKey, // delegate
        alice.publicKey, // owner of token account
        1e8, // amount, if your deciamls is 8, 10^8 for 1 token
        8 // decimals
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + owner */,
      ])}`
    );
  }
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576// 1) use build-in function
{
  let txhash = await approveChecked(
    connection, // connection
    feePayer, // fee payer
    mintPubkey, // mint
    tokenAccountPubkey, // token account
    randomGuy.publicKey, // delegate
    alice, // owner of token account
    1e8, // amount, if your deciamls is 8, 10^8 for 1 token
    8 // decimals
  );
}
// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createApproveCheckedInstruction(
      tokenAccountPubkey, // token account
      mintPubkey, // mint
      randomGuy.publicKey, // delegate
      alice.publicKey, // owner of token account
      1e8, // amount, if your deciamls is 8, 10^8 for 1 token
      8 // decimals
    )
  );
}
12345678910111213141516171819202122232425262728# How to revoke a token delegateRevoke will set delegate to null and set delegated amount to 0.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import { createRevokeInstruction, revoke } from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const tokenAccountPubkey = new PublicKey(
    ""DRS5CSgPQp4uvPPcUA34tckfYFNUPNBJi77fVbnSfQHr""
  );

  // 1) use build-in function
  {
    let txhash = await revoke(
      connection, // connection
      feePayer, // payer
      tokenAccountPubkey, // token account
      alice // owner of token account
    );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
   ","[-2.22091265e-02  1.44487713e-02 -1.79036111e-02  6.30333722e-02
 -9.17248726e-02 -5.11519238e-03  1.06828503e-01  3.17809135e-02
  8.56513754e-02  7.88615942e-02  3.59019451e-02 -1.00349352e-01
 -6.36854842e-02 -7.98875000e-03  2.28735413e-02  4.70075011e-02
 -2.95887925e-02 -8.12457576e-02 -4.28871289e-02 -5.89432307e-02
  4.05852571e-02 -5.94706051e-02  7.00514242e-02  2.04163659e-02
  7.88471028e-02 -6.44082725e-02 -8.26755073e-03 -3.85727100e-02
 -1.04571525e-02 -8.39333888e-03  9.25947949e-02  4.01441753e-02
 -2.45347768e-02 -4.06611450e-02 -5.03196716e-02  7.94080868e-02
  2.76048165e-02 -2.86541376e-02  5.36018498e-02 -1.17243357e-01
 -5.43239526e-03  1.68466121e-02 -1.00134075e-01 -2.77645905e-02
  1.45565988e-02 -1.17552700e-02 -2.04077549e-02  6.05977140e-02
  3.96145955e-02  4.11686972e-02  6.45543076e-03  3.46282572e-02
 -2.79123918e-03  1.45683449e-03  1.83751415e-02  4.68665361e-02
  3.92410066e-03  5.35193458e-03  4.03515585e-02 -1.81782283e-02
 -2.64429264e-02 -1.08376658e-02 -4.49979911e-03 -4.69732247e-02
  4.18509543e-02 -9.55327507e-03 -1.71063580e-02  1.66712198e-02
 -8.39983523e-02  2.39383220e-03  6.68835714e-02 -7.68896379e-03
 -3.75053287e-02 -2.29233298e-02 -6.20644167e-02 -4.33851071e-02
  1.32118165e-02 -1.02016451e-02 -8.37043673e-02  2.96154022e-02
 -4.90504652e-02  1.19598862e-02  1.00733645e-01  1.61993671e-02
  4.73321192e-02  7.84162953e-02 -4.25157733e-02  1.24959950e-03
 -1.51771249e-03  1.09732023e-03 -2.95605790e-02  7.24399462e-02
 -8.75500869e-03 -5.08239307e-03  1.02178238e-01  6.29484728e-02
 -5.62576912e-02  6.69063032e-02 -5.79275899e-02  1.02735959e-01
  1.40450418e-03  4.74666152e-03 -5.13905138e-02 -2.08858419e-02
  1.00647792e-01  2.75703222e-02  8.23376328e-02 -5.81316762e-02
 -8.04025494e-03 -3.24622681e-03  4.49635610e-02  4.21192385e-02
 -1.16730155e-02  3.86522561e-02 -6.57045618e-02  7.79746100e-02
  5.10635879e-03  6.98444173e-02  4.43949774e-02  4.94835414e-02
  7.90452585e-02  2.30705552e-02 -9.96515900e-02 -2.02118848e-02
 -3.45032178e-02 -8.91224369e-02  1.25965372e-01  6.88164194e-34
  2.99451058e-03 -2.28307061e-02 -1.64743594e-03  1.85026135e-02
  4.42173667e-02  3.44714336e-02  3.22732776e-02  5.24061657e-02
 -8.58590901e-02  1.39258825e-03 -5.84168034e-03 -6.41529709e-02
 -8.60267598e-03 -3.61564644e-02 -7.39935338e-02 -1.22819521e-01
 -4.18729186e-02  2.38473602e-02  1.15141481e-01  1.69794951e-02
 -2.52355100e-03 -4.02834527e-02 -1.84415337e-02  1.26587437e-03
 -3.83696929e-02 -1.49428882e-02 -3.19223404e-02 -3.89598869e-02
 -4.46963729e-03  7.88945425e-03  4.91348468e-02  3.11744381e-02
 -3.27370837e-02  3.06849927e-02  9.67775565e-03 -1.89236719e-02
 -2.51724403e-02  2.01445296e-02 -1.33953869e-01 -1.87045299e-02
  4.89765182e-02 -1.52040208e-02 -8.85742754e-02 -8.09844490e-03
 -1.81322619e-01 -2.04655025e-02 -6.03209157e-03  3.02591128e-03
  1.27980232e-01 -1.47000537e-04 -7.51160411e-03  1.65185146e-02
  4.46546532e-04 -4.47368212e-02  8.56017694e-02 -2.69552879e-02
  8.67425743e-03 -3.93252224e-02  2.67126467e-02 -1.44878058e-02
 -2.25119796e-02 -1.48894079e-02 -5.96144609e-02 -4.22213040e-03
 -8.11072905e-03  4.91610505e-02 -8.95990729e-02 -3.66975404e-02
  5.45764826e-02 -3.55535522e-02 -5.54849431e-02 -1.97649393e-02
 -5.41459350e-03  5.47345877e-02  1.90733727e-02  3.84748401e-03
 -6.25764057e-02 -4.06429730e-02 -1.50392409e-02  1.83332190e-02
  1.71348359e-03 -2.46397289e-03 -9.03554484e-02  9.05176327e-02
  5.81127666e-02  8.31755176e-02 -6.47852421e-02 -3.60640474e-02
 -3.26827355e-03 -2.27030665e-02 -3.27727981e-02 -5.94693311e-02
 -2.39460636e-03 -7.12997019e-02 -1.58743300e-02 -2.71017331e-33
 -1.40609676e-02 -7.97561734e-05 -6.46056086e-02  3.40312682e-02
 -1.45626720e-02 -1.56426635e-02  2.14034580e-02  1.71181615e-02
  2.55240519e-02 -5.74996881e-03 -7.30169043e-02  2.56824829e-02
 -2.75914203e-02  2.49145105e-02  3.58358733e-02 -2.02232674e-02
 -6.05277568e-02 -1.31750386e-02  2.87984274e-02 -3.70128155e-02
  4.88027278e-03  8.95087868e-02  4.22219932e-02  5.05869202e-02
 -6.92402869e-02  1.85073446e-03 -7.95584917e-03  8.41737166e-02
  2.99868938e-02 -1.84844304e-02 -1.54169416e-02 -3.67698185e-02
 -1.30863991e-02  4.15589884e-02  1.08511150e-02 -1.15891747e-01
  3.09722722e-02  1.25754327e-01  1.82053093e-02  6.54516965e-02
  1.37226628e-02 -2.60118693e-02  2.53521111e-02  7.42490962e-02
  2.05157436e-02 -4.20267284e-02  2.45101075e-03 -3.12259439e-02
  4.78887036e-02  6.45043701e-02  3.46643664e-02 -5.00878580e-02
 -7.91173279e-02  4.51506823e-02 -6.36175871e-02  3.19915861e-02
  7.24241436e-02 -1.09555066e-01  1.12332068e-01 -3.04486547e-02
 -5.42285405e-02 -1.92205440e-02  1.58121660e-01  4.12264541e-02
  8.78571346e-02 -1.81439836e-02 -2.47531794e-02 -1.64387785e-02
  1.33936316e-01  9.39541757e-02  2.01679394e-02 -3.93790863e-02
 -6.05209125e-03 -3.85999754e-02  1.07887678e-01 -5.57427062e-03
  2.15900522e-02 -4.64962423e-02  7.60272145e-02  4.32800315e-02
  3.00258845e-02  1.13678323e-02  2.62124073e-02 -2.98077296e-02
  4.04806994e-02 -4.72444370e-02  2.33270936e-02  1.67417508e-02
 -2.81143077e-02  6.46932945e-02 -1.78600308e-02  4.56335507e-02
  1.72230862e-02 -8.22670832e-02 -7.03546256e-02 -5.99127432e-08
 -7.56724328e-02 -6.74365088e-02 -8.63042027e-02  3.35214697e-02
  6.03561997e-02 -3.65440696e-02 -6.29626773e-03 -7.75542110e-02
 -4.77250591e-02 -6.97758943e-02 -2.27123201e-02  1.12719471e-02
 -3.73309962e-02 -1.05542794e-01  2.94706505e-02 -6.88268542e-02
  4.24622856e-02  3.19437422e-02 -7.57381842e-02 -3.92372794e-02
  8.06395616e-03  2.92026345e-02 -1.96622275e-02 -3.39458995e-02
 -2.85185520e-02  3.76130431e-03  4.28706594e-02  7.51031190e-02
 -3.70073579e-02  4.84852120e-02  5.84949600e-03  7.24280775e-02
  1.64988413e-02 -3.95758860e-02 -1.12741612e-01 -3.30099240e-02
  3.00838314e-02 -3.30303796e-02  5.87887429e-02  1.91862397e-02
  4.35111113e-02  4.05273102e-02 -1.53014669e-02  3.13966279e-03
  2.71403813e-03 -5.41358069e-03 -3.63847427e-02  1.22418152e-02
  6.21801279e-02  6.83683623e-03  1.36005441e-02 -1.02403504e-03
 -4.41099219e-02  3.97456028e-02 -7.35036060e-02 -3.57249714e-02
  1.49145452e-02 -2.37088297e-02 -2.81032198e-03  1.09764114e-02
  9.38772857e-02 -3.57998833e-02 -8.82711634e-03 -9.30888951e-02]"
"let tx = new Transaction().add(
      createRevokeInstruction(
        tokenAccountPubkey, // token account
        alice.publicKey // owner of token account
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + origin auth */,
      ])}`
    );
  }
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// 1) use build-in function
{
  let txhash = await revoke(
    connection, // connection
    feePayer, // payer
    tokenAccountPubkey, // token account
    alice // owner of token account
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createRevokeInstruction(
      tokenAccountPubkey, // token account
      alice.publicKey // owner of token account
    )
  );
}
123456789101112131415161718192021# How to manage wrapped SOLWrapped SOL just like any other token mint. The difference is using syncNative and creating token accounts specifically on the NATIVE_MINT address.# Create Token AccountLike Create Token Account but replace mint with NATIVE_MINTimport { NATIVE_MINT } from ""@solana/spl-token"";
1# Add BalanceThere are two ways to add balance for Wrapped SOL# 1. By SOL TransferTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
} from ""@solana/web3.js"";
import {
  NATIVE_MINT,
  getAssociatedTokenAddress,
  createSyncNativeInstruction,
  createAccount,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  // remember to create ATA first
  let ata = await getAssociatedTokenAddress(
    NATIVE_MINT, // mint
    alice.publicKey // owner
  );

  let amount = 1 * 1e9; /* Wrapped SOL's decimals is 9 */

  let tx = new Transaction().add(
    // trasnfer SOL
    SystemProgram.transfer({
      fromPubkey: alice.publicKey,
      toPubkey: ata,
      lamports: amount,
    }),
    // sync wrapped SOL balance
    createSyncNativeInstruction(ata)
  );
  console.log(
    `txhash: ${await connection.sendTransaction(tx, [feePayer, alice])}`
  );
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455let tx = new Transaction().add(
  // trasnfer SOL
  SystemProgram.transfer({
    fromPubkey: alice.publicKey,
    toPubkey: ata,
    lamports: amount,
  }),
  // sync wrapped SOL balance
  createSyncNativeInstruction(ata)
);
12345678910# 2. By Token TransferTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
} from ""@solana/web3.js"";
import {
  TOKEN_PROGRAM_ID,
  NATIVE_MINT,
  getMinimumBalanceForRentExemptAccount,
  getAssociatedTokenAddress,
  ACCOUNT_SIZE,
  createInitializeAccountInstruction,
  createTransferInstruction,
  closeAccountInstructionData,
  createCloseAccountInstruction,
}","[-1.09270722e-01 -2.51288656e-02 -4.74054851e-02  7.30637461e-02
 -6.81825280e-02 -4.20458056e-03  7.32128397e-02  4.06992584e-02
  2.75655137e-03  9.12838355e-02  9.45926905e-02 -7.68874958e-02
 -2.09147669e-02  2.96592992e-02  6.78387284e-02  4.37430143e-02
 -8.83344337e-02 -3.56481113e-02 -5.65444380e-02  1.13296462e-02
  5.30521087e-02 -1.53628960e-01  1.39000537e-02 -6.53427374e-03
  4.53801192e-02 -2.59094760e-02 -1.08329495e-02 -1.56912282e-02
  3.42621766e-02  3.27508599e-02  6.81483075e-02  8.04380849e-02
 -1.09004572e-01  8.95214733e-03 -8.78618157e-04  9.35686007e-02
 -6.72459882e-03  6.70470372e-02  4.54287939e-02 -1.33765474e-01
  1.10029448e-02  4.55153994e-02 -6.80236891e-02 -2.55661434e-03
  2.79084034e-02 -1.59399584e-02  3.14394198e-03  3.08459941e-02
 -1.53627824e-02 -6.89806091e-03  4.22131969e-03  7.07434267e-02
 -6.05974086e-02  2.90644448e-02 -3.59702818e-02  1.95328668e-02
  4.62503619e-02  3.05899736e-02  6.56892657e-02  3.22448346e-03
 -2.31614970e-02  1.67294368e-02  2.44052801e-02 -2.36345660e-02
 -2.71410421e-02 -1.04525974e-02  2.72773136e-03  1.70353577e-02
  4.25632019e-03 -2.50162706e-02  4.53414768e-02 -3.85398269e-02
 -3.41265574e-02 -4.88622151e-02 -1.18307676e-02 -3.15357968e-02
  2.12716013e-02  4.57117632e-02 -1.08854018e-01  4.27596457e-02
  2.87742279e-02  6.57396466e-02  7.94801265e-02  4.94863465e-02
 -2.29403116e-02  1.76141784e-02  3.55998334e-03 -6.20372817e-02
  4.43519652e-02 -7.55907851e-04  2.63759084e-02 -6.48286147e-03
 -4.20192210e-03 -3.57097015e-02  5.24694771e-02  1.36546185e-02
 -1.13307359e-02  1.22112669e-01 -7.24315718e-02  8.07182789e-02
  1.57801006e-02 -1.95198320e-02 -4.96671572e-02  2.86886785e-02
  8.43350217e-02  2.20787358e-02  4.62448187e-02 -5.20459078e-02
 -1.36267571e-02  6.79899231e-02  1.04881581e-02  8.12276080e-02
 -5.49281798e-02  3.17690708e-02 -3.98268662e-02  1.11731417e-01
 -1.27704861e-03  7.03088865e-02  5.71726114e-02  7.49194920e-02
  1.03719421e-01  4.21760008e-02  3.06053087e-02 -2.31005251e-02
 -3.67352590e-02 -3.03431638e-02  7.41884857e-02  6.17132551e-33
 -6.24565929e-02  1.70071289e-04 -3.85023132e-02  1.88155717e-03
  2.38947328e-02 -2.98192315e-02  1.94101557e-02  8.46848860e-02
 -7.65235946e-02  1.16193704e-02 -1.39753437e-02 -1.61612388e-02
 -5.01276255e-02 -4.51839492e-02 -5.61301596e-02 -6.62089437e-02
 -7.10406825e-02  2.67518181e-02  3.86650003e-02  4.35677171e-02
 -5.37568182e-02 -6.53543547e-02  5.94852455e-02 -2.30260957e-02
 -3.73767987e-02 -1.60710402e-02 -2.88964342e-02 -2.95978580e-02
  4.73781265e-02  1.64209493e-02  5.44838235e-02 -1.95594667e-03
 -1.28236916e-02  1.15844369e-01 -1.60004254e-02  3.42686027e-02
 -3.04377675e-02 -3.47085781e-02 -8.81430581e-02 -3.57009284e-02
 -1.17029920e-02  1.47611313e-02 -5.81470430e-02  1.45657780e-02
 -4.89049964e-02 -3.81360948e-02  4.92823385e-02  1.67869516e-02
  7.04200342e-02  3.11518814e-02 -3.87753621e-02 -1.49494747e-03
 -1.06553696e-02 -8.87473598e-02  8.27560127e-02 -6.92379698e-02
  1.71754025e-02 -1.55228069e-02 -4.47925515e-02 -6.59544617e-02
 -1.23946853e-02 -6.15870468e-02 -9.80712697e-02  1.06253549e-02
  2.19576191e-02  6.73507079e-02 -4.55526039e-02 -1.67870745e-02
 -2.13274322e-02 -9.45893824e-02 -8.33541900e-02  3.18276249e-02
 -7.91922882e-02  7.64296502e-02 -2.07942668e-02 -2.22479515e-02
  1.09305218e-01  8.40025023e-02 -3.20989289e-04 -4.10671122e-02
  2.21362226e-02 -1.12869288e-03 -1.11218743e-01  9.78135467e-02
 -4.71452586e-02  2.39448203e-03 -2.76867393e-02 -2.88479635e-03
 -1.70176793e-02 -4.37361822e-02  3.86009365e-02 -4.09697816e-02
  2.69552711e-02 -2.07937472e-02 -4.73354161e-02 -6.68884057e-33
 -1.58588905e-02 -3.00662015e-02 -4.58396487e-02 -3.14122885e-02
 -1.28059294e-02  3.17570753e-02 -3.62992212e-02 -1.65428389e-02
 -1.26568824e-02 -3.02275294e-03 -8.27163830e-02 -2.93808319e-02
 -6.68100314e-03  6.67057484e-02 -6.98032454e-02  1.76557843e-02
  3.01933847e-02  1.64256338e-02 -4.33291756e-02 -1.13413762e-02
 -3.38032022e-02  1.18882649e-01 -1.50045324e-02  5.85509930e-03
 -4.19498160e-02  8.01629294e-03 -2.19324771e-02  1.18996084e-01
  1.57194175e-02 -3.64543870e-02  5.51212057e-02 -8.42547864e-02
  2.05606241e-02 -1.13426456e-02 -1.97521131e-02 -3.93452309e-02
 -1.23659810e-02  8.98203254e-02 -2.29126047e-02  3.04012671e-02
  3.73731367e-02 -4.46302909e-03 -5.71375526e-02  3.48702706e-02
  3.47411968e-02  8.18152563e-04 -4.97862250e-02 -7.58805946e-02
  1.51020670e-02  9.11164731e-02  1.29311243e-02 -2.01569293e-02
 -7.03143552e-02 -5.86041324e-02 -1.12405546e-01  2.20480859e-02
  9.52134430e-02 -6.27497509e-02  3.99028026e-02 -1.22047119e-01
  5.37543185e-02 -1.71576925e-02  1.44768998e-01  1.65820904e-02
  1.01472892e-01 -3.88953462e-02 -6.89612643e-04  3.79391946e-03
 -3.95096168e-02  6.72892407e-02 -1.42022818e-02 -4.62895371e-02
 -2.31420086e-03 -2.96125803e-02  1.10540397e-01 -9.48513392e-03
 -5.49908401e-03 -1.28273457e-01 -9.86240245e-03  2.74335034e-04
 -2.99250111e-02 -1.80124433e-03  1.98812131e-02  3.54649723e-02
 -4.39740457e-02 -3.34488079e-02  4.02592048e-02  4.89189588e-02
  2.27926560e-02  6.67809844e-02  2.33088285e-02 -1.81431125e-03
 -1.48666399e-02  2.18366887e-02 -6.60530329e-02 -6.51576428e-08
  2.61843707e-02 -3.89300212e-02 -7.04129934e-02  4.48905416e-02
  1.10094557e-02  4.79897298e-02 -4.99017872e-02 -8.28963071e-02
 -5.53261340e-02 -2.62590107e-02 -7.69437477e-02  8.97553042e-02
 -6.60052449e-02 -2.38698628e-02  2.20969040e-03 -7.36514404e-02
 -1.77511852e-02  1.37708895e-02 -6.71083182e-02 -3.51560488e-02
 -1.83038451e-02  3.19299800e-03  2.26682518e-02 -8.21348839e-03
  4.71086102e-03 -3.16266418e-02  9.04865414e-02  7.44556189e-02
  9.86164343e-03 -8.88308976e-03 -5.06254993e-02  7.12936968e-02
  4.26050760e-02  1.50964614e-02 -1.68124273e-01 -1.53546641e-02
  5.03252335e-02 -4.25534174e-02 -3.49085615e-03  5.92012368e-02
  3.07684373e-02  7.59850144e-02 -7.10578635e-02  6.03124080e-03
  8.46603420e-04  1.53263956e-02 -4.65262821e-03 -1.20005999e-02
  6.65400401e-02  4.22935747e-02 -3.97832319e-02 -1.03433672e-02
 -6.20438457e-02  5.09293042e-02 -9.88347270e-03  2.27506310e-02
 -1.03114126e-02  3.40484232e-02  5.38259037e-02 -2.70717144e-02
 -2.54476666e-02 -3.10727246e-02  4.34861630e-02 -2.98672449e-02]"
"from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  // remember to create ATA first
  let ata = await getAssociatedTokenAddress(
    NATIVE_MINT, // mint
    alice.publicKey // owner
  );

  let auxAccount = Keypair.generate();
  let amount = 1 * 1e9; /* Wrapped SOL's decimals is 9 */

  let tx = new Transaction().add(
    // create token account
    SystemProgram.createAccount({
      fromPubkey: alice.publicKey,
      newAccountPubkey: auxAccount.publicKey,
      space: ACCOUNT_SIZE,
      lamports:
        (await getMinimumBalanceForRentExemptAccount(connection)) + amount, // rent + amount
      programId: TOKEN_PROGRAM_ID,
    }),
    // init token account
    createInitializeAccountInstruction(
      auxAccount.publicKey,
      NATIVE_MINT,
      alice.publicKey
    ),
    // transfer WSOL
    createTransferInstruction(
      auxAccount.publicKey,
      ata,
      alice.publicKey,
      amount
    ),
    // close aux account
    createCloseAccountInstruction(
      auxAccount.publicKey,
      alice.publicKey,
      alice.publicKey
    )
  );

  console.log(
    `txhash: ${await connection.sendTransaction(tx, [
      feePayer,
      auxAccount,
      alice,
    ])}`
  );
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586let tx = new Transaction().add(
  // create token account
  SystemProgram.createAccount({
    fromPubkey: alice.publicKey,
    newAccountPubkey: auxAccount.publicKey,
    space: ACCOUNT_SIZE,
    lamports:
      (await getMinimumBalanceForRentExemptAccount(connection)) + amount, // rent + amount
    programId: TOKEN_PROGRAM_ID,
  }),
  // init token account
  createInitializeAccountInstruction(
    auxAccount.publicKey,
    NATIVE_MINT,
    alice.publicKey
  ),
  // transfer WSOL
  createTransferInstruction(auxAccount.publicKey, ata, alice.publicKey, amount),
  // close aux account
  createCloseAccountInstruction(
    auxAccount.publicKey,
    alice.publicKey,
    alice.publicKey
  )
);
12345678910111213141516171819202122232425# How to get all token accounts by ownerYou can fetch token accounts by owner. There are two ways to do it.Get All Token AccountTSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";
import { TOKEN_PROGRAM_ID } from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const owner = new PublicKey(""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY"");
  let response = await connection.getParsedTokenAccountsByOwner(owner, {
    programId: TOKEN_PROGRAM_ID,
  });

  response.value.forEach((accountInfo) => {
    console.log(`pubkey:","[-3.59142348e-02 -9.28396732e-02 -9.79967490e-02  1.58689748e-02
 -5.55261970e-02 -4.15303372e-02  2.82724444e-02  1.44952768e-03
 -2.08325684e-03  2.29769456e-03  5.83369732e-02  3.49148439e-04
  4.17082869e-02 -1.04267411e-01  2.78531406e-02  2.60409135e-02
 -8.44327882e-02 -3.24994363e-02 -2.63983309e-02  1.66318212e-02
 -4.80847061e-03 -9.84886214e-02 -5.86520741e-03 -2.76441276e-02
  5.84659278e-02 -6.15231879e-03  2.87454724e-02  4.74859886e-02
 -2.64719501e-02 -5.17410971e-03  4.90027517e-02  7.19208643e-02
  2.54191700e-02  1.08788414e-02  4.33471464e-02  1.06128208e-01
  5.78367002e-02 -8.82918853e-03 -1.75933279e-02 -7.12344050e-02
 -5.82290860e-03  2.77392170e-03 -9.95200202e-02  6.50478378e-02
  3.09953298e-02  4.07512076e-02 -8.16522688e-02  7.48614594e-02
  2.23064274e-02 -8.04842263e-02 -6.14974014e-02  1.12650298e-01
 -7.79561028e-02  6.66605309e-03 -7.50734359e-02  9.17378534e-03
 -3.21749821e-02  5.55163138e-02  1.54986769e-01  4.76444047e-03
  7.06725009e-03 -1.47120450e-02  2.56570745e-02 -6.83623087e-03
 -3.72026525e-02 -2.56395433e-03 -1.34724062e-02 -5.27153946e-02
  1.75550580e-02 -3.82293984e-02 -4.16609123e-02 -9.66143794e-03
 -2.50015315e-02 -1.08998790e-02 -1.22904582e-02  2.17953827e-02
 -2.21911352e-02 -2.58647949e-02 -1.68555882e-02  1.84493382e-02
 -3.25753316e-02 -6.33484721e-02  2.41348371e-02  1.10155940e-01
  3.45016457e-02  6.50752336e-02 -5.00980429e-02 -3.01326923e-02
 -1.39382221e-02  1.28195537e-02 -8.19717422e-02 -1.25018219e-02
 -3.98252606e-02 -2.25938130e-02  1.27173299e-02  4.02759984e-02
  8.02706741e-03  2.21363250e-02 -3.54641005e-02  8.34530443e-02
  1.40667849e-04 -5.08633479e-02 -5.30877858e-02 -7.58872852e-02
  3.76510173e-02 -9.39860754e-03  6.28691837e-02 -2.09375750e-02
  6.77899048e-02  1.70404930e-02 -1.63154975e-02  3.86586003e-02
  1.52794542e-02 -5.19577600e-03 -5.04274406e-02  1.25736311e-01
  6.78751525e-03  4.28785942e-02  4.88773882e-02  1.76913254e-02
  2.36522537e-02 -5.78308143e-02 -4.41957042e-02  2.67425203e-03
 -1.08839102e-01 -4.19358537e-02 -1.00986438e-03  1.87104362e-32
 -6.43328205e-02 -2.84060948e-02  7.58900419e-02 -2.51557436e-02
 -1.43234422e-02 -9.92229441e-04  2.99886614e-02  1.54144308e-02
 -9.93252695e-02 -1.97448470e-02 -1.16141915e-01 -8.24425444e-02
  2.58518457e-02 -7.77557418e-02 -3.35939601e-02 -7.26520270e-02
 -3.13348696e-02  6.01008572e-02 -1.04647931e-02  1.94449630e-02
  4.14236300e-02 -1.02890197e-04  3.62033700e-03 -2.90709399e-02
 -1.14363311e-02  5.43927364e-02 -1.82396197e-03 -3.72080952e-02
  1.11740127e-01  9.15301684e-03  1.58829205e-02  2.55456250e-02
 -1.04733914e-01  9.96474363e-03  7.18401372e-03 -3.64446193e-02
  2.30251532e-02 -2.67606471e-02 -1.33234337e-01 -7.65856728e-02
  1.71724241e-02 -3.48354541e-02 -3.23031656e-02 -2.66684815e-02
 -1.53805846e-02 -3.51049080e-02  2.40940508e-02  1.74450543e-04
  7.85764530e-02  6.06846064e-02 -3.76495309e-02  1.72364898e-02
  2.03376496e-03  2.66184332e-03  1.23755783e-02 -4.97890599e-02
  3.66361253e-02  6.58901408e-02  2.52257064e-02  4.56887707e-02
 -2.00607702e-02  5.83962817e-03  1.73664000e-02 -5.65133393e-02
  8.33340064e-02  1.04680927e-02  1.51681518e-02  4.45549563e-02
 -3.82552370e-02 -1.08831367e-02 -5.11687249e-03  3.78233232e-02
  4.96501774e-02  3.28283571e-02 -1.02500409e-01 -5.52635547e-03
 -2.19877549e-02  2.94435211e-02 -7.04454482e-02 -4.54749800e-02
  2.82542016e-02 -2.35008635e-02 -7.72834569e-02  4.87453341e-02
 -4.63864356e-02  3.82775441e-02  2.72065721e-04 -9.22840908e-02
 -8.74402642e-04 -2.49086111e-03 -1.54875768e-02 -2.67466996e-02
 -5.64994551e-02 -5.30655533e-02 -1.07199267e-01 -1.75133803e-32
 -3.97360809e-02 -2.80602910e-02 -7.13201798e-03 -3.69045930e-03
 -2.14417130e-02 -2.09121518e-02 -8.75326432e-03 -3.59852463e-02
  1.98698901e-02  7.00248107e-02  5.30415624e-02 -1.39258308e-02
  5.46173528e-02 -3.91659029e-02  7.56800696e-02 -3.04568354e-02
  5.96780330e-02  6.18020892e-02  7.98614845e-02  1.05910059e-02
 -7.43826330e-02  1.02913983e-01 -4.55714315e-02  6.95436448e-02
 -8.50007683e-03  7.76580349e-02 -1.21997914e-03  1.46061197e-01
 -1.18256314e-02  2.28291918e-02  4.40782346e-02  1.00983322e-01
 -1.23003200e-01  5.24248630e-02 -3.75282834e-03 -5.51065058e-02
  1.70217385e-03  5.78989461e-02  6.24369644e-03 -3.53707112e-02
  3.79040688e-02  4.12264094e-03 -4.47158031e-02  2.74879709e-02
  1.02878265e-01 -2.69629303e-02  4.55462411e-02  4.31459537e-03
 -5.87883480e-02  4.01015058e-02  1.11206293e-01 -3.34425233e-02
 -2.81418525e-02 -6.69485936e-03 -4.62264428e-03  5.48370890e-02
  2.31828652e-02  2.79299803e-02  3.97454426e-02 -6.36010692e-02
  7.81092420e-02 -1.13089219e-01  6.82244897e-02  4.11562175e-02
  8.39962065e-02 -3.83418426e-02 -1.51979206e-02  5.42763956e-02
 -3.52043658e-02 -4.12344821e-02 -9.41584408e-02  5.03939874e-02
 -3.66133302e-02  7.14501664e-02  8.27312842e-02  4.44605239e-02
 -6.15192167e-02  1.75992306e-03 -3.36941592e-02  4.65571545e-02
 -6.04521036e-02  8.01934488e-03  4.81893774e-03  8.26476514e-02
  3.79771963e-02 -2.76347697e-02  3.36570740e-02  9.46231186e-02
 -3.24304737e-02 -1.24863982e-02 -6.66219518e-02  4.75439057e-02
 -5.59771992e-03  3.78032923e-02  1.86235216e-02 -6.14608666e-08
  6.29840419e-03  1.92822702e-02 -6.02832697e-02  4.95979376e-03
  2.11141706e-02  3.96449491e-02 -8.56236890e-02 -1.10841416e-01
 -3.65437679e-02 -8.09644163e-02 -6.20504506e-02 -2.82571018e-02
 -3.35798413e-02 -1.22801736e-02  8.27528629e-03 -2.17720736e-02
 -7.29286969e-02 -6.40349314e-02  1.03151426e-03 -3.25960405e-02
  6.25384226e-02 -7.41491616e-02  1.01841660e-02  3.57800573e-02
 -5.00567304e-03 -7.26610096e-03  9.48863700e-02  1.27176955e-01
  2.17115181e-03 -9.30931792e-02 -5.48409261e-02 -2.26318240e-02
  1.60453208e-02 -5.59828319e-02 -1.01547562e-01  2.25994065e-02
 -1.38543407e-02  3.77902240e-02  2.82654464e-02  8.94909352e-02
 -2.54906639e-02 -9.15542431e-03 -6.04423769e-02  1.50887417e-02
 -8.52887630e-02  6.22313656e-02  4.31667268e-02  8.15332010e-02
  8.88788328e-02  1.07158208e-02 -3.03149149e-02 -2.48014983e-02
 -4.31658030e-02 -2.36628894e-02 -5.85403200e-03 -3.20537575e-02
 -7.27416351e-02 -1.17997872e-03  5.51613383e-02  5.82531467e-02
 -4.03973303e-04  4.09855470e-02 -1.47332866e-02 -4.21035253e-02]"
"${accountInfo.pubkey.toBase58()}`);
    console.log(`mint: ${accountInfo.account.data[""parsed""][""info""][""mint""]}`);
    console.log(
      `owner: ${accountInfo.account.data[""parsed""][""info""][""owner""]}`
    );
    console.log(
      `decimals: ${accountInfo.account.data[""parsed""][""info""][""tokenAmount""][""decimals""]}`
    );
    console.log(
      `amount: ${accountInfo.account.data[""parsed""][""info""][""tokenAmount""][""amount""]}`
    );
    console.log(""===================="");
  });
})();
12345678910111213141516171819202122232425262728let response = await connection.getParsedTokenAccountsByOwner(owner, {
  programId: TOKEN_PROGRAM_ID,
});
123Filter By MintTSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";
import { TOKEN_PROGRAM_ID } from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const owner = new PublicKey(""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY"");
  const mint = new PublicKey(""54dQ8cfHsW1YfKYpmdVZhWpb9iSi6Pac82Nf7sg3bVb"");

  let response = await connection.getParsedTokenAccountsByOwner(owner, {
    mint: mint,
  });

  response.value.forEach((accountInfo) => {
    console.log(`pubkey: ${accountInfo.pubkey.toBase58()}`);
    console.log(`mint: ${accountInfo.account.data[""parsed""][""info""][""mint""]}`);
    console.log(
      `owner: ${accountInfo.account.data[""parsed""][""info""][""owner""]}`
    );
    console.log(
      `decimals: ${accountInfo.account.data[""parsed""][""info""][""tokenAmount""][""decimals""]}`
    );
    console.log(
      `amount: ${accountInfo.account.data[""parsed""][""info""][""tokenAmount""][""amount""]}`
    );
    console.log(""===================="");
  });
})();
123456789101112131415161718192021222324252627282930let response = await connection.getParsedTokenAccountsByOwner(owner, {
  mint: mint,
});
123 # Staking# Get Current ValidatorsWe can stake SOL and earn rewards for helping secure the network. To stake, we delegate SOL to validators who in turn process transactions.TSCLIimport { clusterApiUrl, Connection } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // Get all validators, categorized by current (i.e. active) and deliquent (i.e. inactive)
  const { current, delinquent } = await connection.getVoteAccounts();
  console.log(""current validators: "", current);
  console.log(""all validators: "", current.concat(delinquent));
})();
12345678910solana validators
1# Create Stake AccountAll staking instructions are handled by the Stake Programopen in new window. To begin, we create a Stake Accountopen in new window which is created and managed differently than a standard system account. In particular, we must set the account's Stake Authority and Withdrawal Authority.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  StakeProgram,
  Authorized,
  sendAndConfirmTransaction,
  Lockup,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const wallet = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    wallet.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // Create a keypair for our stake account
  const stakeAccount = Keypair.generate();

  // Calculate how much we want to stake
  const minimumRent = await connection.getMinimumBalanceForRentExemption(
    StakeProgram.space
  );
  const amountUserWantsToStake = LAMPORTS_PER_SOL / 2; // This is can be user input. For now, we'll hardcode to 0.5 SOL
  const amountToStake = minimumRent + amountUserWantsToStake;

  // Setup a transaction to create our stake account
  // Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
  const createStakeAccountTx = StakeProgram.createAccount({
    authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set","[ 4.10699956e-02  6.23994507e-02 -5.60429431e-02  1.61978565e-02
 -6.49035424e-02 -2.48950068e-02  4.58198413e-02  5.48344441e-02
  8.89280587e-02 -8.41872580e-03 -5.41869476e-02 -7.39855468e-02
 -2.30837557e-02  3.14694527e-03  3.09528001e-02 -5.04122861e-03
 -1.17366999e-01 -1.51953651e-02 -5.43147512e-02 -1.60199520e-03
  8.95848870e-02 -7.84110203e-02 -7.48159215e-02 -8.69463757e-03
  8.09003934e-02  6.48817420e-02 -1.08797522e-02 -2.55237315e-02
 -4.17840183e-02  6.42214194e-02  6.02810606e-02 -3.66234742e-02
  2.51755323e-02 -4.85826284e-02 -1.74742155e-02 -3.32397670e-02
  2.68781260e-02  1.70824826e-02  1.00786246e-01 -5.18058464e-02
 -1.54504925e-02  3.04184631e-02  1.55789098e-02 -2.02179980e-02
  9.30780917e-02  2.64677294e-02 -8.34268928e-02  7.57808164e-02
 -2.94617433e-02  4.56192568e-02  6.38647452e-02 -2.00127205e-03
  2.27788538e-02  4.05492000e-02 -5.72741702e-02  2.75455862e-02
  1.10775381e-02  4.32540588e-02  5.31977713e-02  1.40276477e-02
 -6.45199325e-03 -5.20630926e-02 -3.63710448e-02 -5.32665616e-03
 -4.44772281e-03 -4.94535416e-02 -3.84645462e-02 -1.07609034e-02
 -6.26322404e-02  1.62338167e-02  4.89975363e-02 -3.39466035e-02
  1.32099660e-02 -4.14537750e-02  1.10500464e-02 -5.73475845e-02
 -5.25509045e-02 -4.88064112e-03 -2.34277360e-02  2.28326563e-02
  1.56064760e-02 -1.67919192e-02  1.89815499e-02  9.11553353e-02
  5.41619323e-02  6.12645261e-02 -2.41273716e-02  4.12750095e-02
 -4.86297868e-02 -6.51182681e-02 -2.35222299e-02  4.02971841e-02
  6.99298605e-02  9.11326110e-02  8.77127424e-02  5.57045564e-02
  2.91146357e-02 -4.70421016e-02 -4.73181792e-02  8.73065665e-02
  2.94791386e-02  3.48083451e-02 -2.46361122e-02 -2.38145236e-02
  1.03277698e-01  1.46507230e-02  6.23109899e-02  4.85391170e-02
  4.80811810e-03  9.87676624e-03 -4.73415703e-02  7.90031701e-02
 -6.59120530e-02  6.77224323e-02 -2.28548907e-02 -7.64707401e-02
  4.69597168e-02 -9.11917631e-03 -2.75834780e-02  7.12253451e-02
  7.70763531e-02 -4.27810010e-03 -6.48023561e-02 -1.75393596e-02
  5.97508578e-03 -7.15385824e-02  7.88046718e-02  3.86085205e-33
 -1.97370257e-02 -4.64103520e-02  4.96759750e-02 -5.34092374e-02
 -4.66640294e-02  3.77138220e-02 -1.78337973e-02  6.45615458e-02
 -1.37275942e-02  6.36375919e-02  2.11832915e-02 -1.62912940e-03
 -2.02249233e-02 -3.72429416e-02 -6.16261438e-02  2.33530998e-02
  7.08197011e-03  4.46657613e-02  6.95402771e-02 -2.64959340e-03
 -3.56654786e-02 -2.50586122e-02 -6.52635191e-03  5.36779091e-02
  8.43392015e-02  4.12404388e-02 -1.68252587e-02  8.06573126e-03
 -2.84708161e-02  2.28291890e-03  2.03304589e-02  6.77174982e-03
 -3.24067585e-02 -7.74749219e-02  4.85034809e-02 -5.71983047e-02
  7.59068504e-02 -3.59327309e-02 -1.24160692e-01 -2.28741299e-02
  6.04465716e-02 -2.71436796e-02  1.20575947e-03  7.30979117e-03
 -1.21369295e-01  4.38758172e-02 -7.53896590e-03  1.92160010e-02
  7.80182555e-02 -1.27273882e-02 -1.25344232e-01  8.69631842e-02
 -7.92330354e-02 -1.49416170e-04  2.31561251e-03 -8.03793147e-02
 -1.09064719e-02  1.81880873e-02 -3.14402767e-02 -1.25253826e-01
 -2.57986002e-02 -3.76207419e-02  1.54666491e-02 -1.71438511e-02
 -3.05494312e-02  1.97512228e-02 -2.78453007e-02  3.26215327e-02
 -4.11661491e-02  2.01155003e-02 -1.12870984e-01 -9.34917107e-03
  6.86620595e-03  4.37399223e-02 -4.27516960e-02 -3.06138354e-05
  4.70220260e-02  1.89548582e-02 -9.81523283e-03 -4.81443573e-03
  4.03689183e-02  1.62679199e-02 -6.76208884e-02  7.52443969e-02
  2.42618155e-02  1.48462951e-01 -1.32891135e-02 -7.05736503e-03
 -4.52058613e-02  9.09918547e-03  3.28507684e-02 -3.87633070e-02
 -3.17263603e-02 -4.70457226e-02 -1.48906410e-01 -3.55996554e-33
 -5.62324785e-02 -2.48146355e-02 -1.72356367e-02  2.47276966e-02
 -5.88586088e-03 -1.10365287e-03  6.10632449e-03  4.17002700e-02
  4.13572155e-02  5.39457873e-02  1.95284951e-02 -1.53777236e-02
 -5.34334555e-02  4.49567772e-02  2.36976296e-02  1.02368645e-01
 -8.40742514e-03 -7.59895798e-03  5.48593402e-02 -9.37253460e-02
 -7.48853339e-03  4.12036851e-02  5.35738543e-02  4.28460687e-02
 -1.25521898e-01  5.83596863e-02 -4.50772084e-02 -2.18026582e-02
  5.91690047e-03  2.52152588e-02  4.09831181e-02 -5.59658259e-02
 -9.63719841e-03  3.22212875e-02  1.66746397e-02 -9.62061435e-02
  6.46564588e-02  7.06678480e-02 -4.43443879e-02  3.93262841e-02
 -1.21186236e-02 -7.06720501e-02 -9.86737479e-03 -1.64084823e-03
  7.22068027e-02 -1.14201069e-01  7.87185058e-02  3.18188109e-02
  3.52551974e-02  3.77191603e-02  9.09259394e-02 -4.46829982e-02
 -8.72355849e-02  7.25087225e-02 -4.79637869e-02 -6.93822950e-02
  7.38814846e-02 -7.61355013e-02  3.41510661e-02 -1.00068934e-01
 -5.96170723e-02  4.24704514e-03 -1.91858374e-02  1.07589856e-01
  2.69857440e-02 -5.19101471e-02 -4.64857137e-03  2.53534224e-02
  1.74720644e-03 -2.97636483e-02 -2.17372086e-02 -4.24112380e-02
  1.03207089e-01  4.06375760e-03  5.81027046e-02 -3.36326472e-02
  1.00487657e-03 -3.46368290e-02  4.98356074e-02  4.94329035e-02
 -1.39124785e-02  3.43605652e-02  3.79930134e-03 -8.35918821e-03
  3.01637733e-03 -5.66647127e-02  3.76208387e-02  3.17475526e-04
 -2.98078340e-02  1.60113368e-02 -2.32829899e-02  8.49364400e-02
 -5.63434921e-02 -1.74639560e-02  1.23019209e-02 -5.05435374e-08
 -3.35523067e-03 -3.58851142e-02 -1.38977822e-02  1.24811642e-02
 -1.39512680e-03 -9.65184998e-03  3.88111919e-02 -1.15597779e-02
 -6.76681027e-02 -2.57738810e-02  6.64950290e-04  3.55020314e-02
 -2.10072100e-02 -5.16312346e-02 -7.66578615e-02 -6.02053776e-02
 -4.48037237e-02 -1.62533112e-02 -1.15301991e-02  2.74992455e-02
  2.87277251e-02  4.28660726e-03  1.21602323e-02 -9.48037654e-02
  7.09063113e-02 -1.05763497e-02 -2.89326231e-03  1.19491458e-01
 -4.54443917e-02  7.46084377e-02 -2.41473895e-02  7.16453567e-02
  5.74672222e-02 -6.98575154e-02 -5.45644835e-02 -1.91459954e-02
  3.70259434e-02  2.51228698e-02  1.71641968e-02  9.18034837e-03
  1.67526528e-02 -3.45084779e-02 -5.70408963e-02  5.30827567e-02
  4.15066443e-03 -7.05176741e-02  2.17846222e-02  9.70411152e-02
  1.28548145e-01 -1.33338332e-01 -2.46447194e-02 -2.59087943e-02
  1.88999344e-02 -2.50337850e-02 -5.50684035e-02 -7.93427229e-02
 -7.16824606e-02  1.34694837e-02  5.48718423e-02  1.95168145e-02
  7.57851675e-02 -8.41104388e-02 -6.38366416e-02 -3.35099809e-02]"
"to our wallet.
    fromPubkey: wallet.publicKey,
    lamports: amountToStake,
    lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
    stakePubkey: stakeAccount.publicKey,
  });

  const createStakeAccountTxId = await sendAndConfirmTransaction(
    connection,
    createStakeAccountTx,
    [
      wallet,
      stakeAccount, // Since we're creating a new stake account, we have that account sign as well
    ]
  );
  console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

  // Check our newly created stake account balance. This should be 0.5 SOL.
  let stakeBalance = await connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

  // Verify the status of our stake account. This will start as inactive and will take some time to activate.
  let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// Setup a transaction to create our stake account
// Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
const createStakeAccountTx = StakeProgram.createAccount({
  authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set to our wallet.
  fromPubkey: wallet.publicKey,
  lamports: amountToStake,
  lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
  stakePubkey: stakeAccount.publicKey,
});

const createStakeAccountTxId = await sendAndConfirmTransaction(
  connection,
  createStakeAccountTx,
  [
    wallet,
    stakeAccount, // Since we're creating a new stake account, we have that account sign as well
  ]
);
console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

// Check our newly created stake account balance. This should be 0.5 SOL.
let stakeBalance = await connection.getBalance(stakeAccount.publicKey);
console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

// Verify the status of our stake account. This will start as inactive and will take some time to activate.
let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
console.log(`Stake account status: ${stakeStatus.state}`);
123456789101112131415161718192021222324252627# Delegate StakeOnce a stake account is funded, the Stake Authority can delegate it to a validator. Each stake account can only be delegated to one validator at a time. In addition, all tokens in the account must be either delegated or un-delegated. Once delegated, it takes several epochs for a stake account to become active.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  StakeProgram,
  Authorized,
  sendAndConfirmTransaction,
  Lockup,
  PublicKey,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const wallet = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    wallet.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // Create a keypair for our stake account
  const stakeAccount = Keypair.generate();

  // Calculate how much we want to stake
  const minimumRent = await connection.getMinimumBalanceForRentExemption(
    StakeProgram.space
  );
  const amountUserWantsToStake = LAMPORTS_PER_SOL / 2; // This is can be user input. For now, we'll hardcode to 0.5 SOL
  const amountToStake = minimumRent + amountUserWantsToStake;

  // Setup a transaction to","[ 1.18953371e-02  2.68158945e-03 -4.99019101e-02  6.89619854e-02
 -3.32638994e-02 -4.11272496e-02  5.90394326e-02  3.38181183e-02
  1.39412671e-01  5.14813028e-02  4.59475555e-02 -6.77561313e-02
 -4.59940992e-02 -2.45075542e-02  2.73778252e-02  4.64605652e-02
 -1.13957085e-01 -4.07091528e-02  2.81111319e-02  3.91213149e-02
  8.52277037e-03 -1.43253401e-01  2.17554104e-02  5.09239137e-02
  4.80241179e-02 -9.86625031e-02 -3.69052030e-02  1.21500983e-03
 -4.64355052e-02 -9.61591862e-03  2.62342021e-02  1.50121050e-02
 -4.87610735e-02 -5.08812219e-02 -3.06301787e-02  1.07197024e-01
 -5.50356181e-03 -2.34988388e-02 -7.19940662e-02 -5.06506599e-02
 -2.05717739e-02  4.20578383e-03 -4.53303009e-02 -2.95716841e-02
  3.29560749e-02 -2.80725420e-03 -1.35347303e-02  7.76321515e-02
  5.62582351e-03  5.45603074e-02  1.17001683e-03 -5.66166081e-02
 -2.80227941e-02  2.80129202e-02 -1.99922603e-02  1.07753970e-01
  7.64479786e-02  2.91774794e-02  3.15893926e-02 -5.99358976e-02
  5.31101748e-02  1.43607352e-02  6.23941934e-03 -1.01001374e-01
  8.38761218e-03  3.59414332e-02 -1.42219709e-02 -1.85889807e-02
 -3.80417588e-03 -3.17246132e-02  4.69334275e-02  1.27813118e-02
 -2.85994299e-02 -8.10443982e-02 -5.40667363e-02  2.44162977e-02
 -6.99782185e-03  3.22201103e-02  1.20528154e-02  5.46651287e-03
 -2.21102014e-02  7.44428113e-03 -1.99745921e-03 -8.44142691e-04
  3.01017109e-02  6.60061389e-02  3.82279381e-02  2.77836621e-02
 -5.45645356e-02 -6.42977050e-03 -3.16767022e-02  5.00350744e-02
 -3.52491252e-02  3.73702310e-02  6.13893867e-02  8.40570852e-02
 -7.66632333e-02  5.96525893e-02 -5.98200522e-02  3.15916277e-02
  7.11541474e-02  3.79382372e-02 -5.44540435e-02  5.38177369e-03
  4.97860089e-02  1.49452942e-03  9.63477790e-02 -8.86728093e-02
 -5.43146487e-03 -2.27488521e-02  1.77062321e-02  9.63502750e-02
 -6.02745917e-03  7.96135440e-02 -2.94531099e-02  1.17552668e-01
 -2.03119759e-02  1.00304596e-02  1.56848840e-02  7.58731645e-03
  1.05279483e-01  2.63676178e-02 -5.02171032e-02 -8.68326239e-03
 -2.47115288e-02  9.43754055e-03  6.77622706e-02  6.66978801e-33
  2.30192374e-02  6.61144406e-03 -9.80843976e-03  6.75844252e-02
 -8.70769098e-03  1.26700513e-02  1.99875422e-02  2.40798760e-03
 -1.40878901e-01  1.66859962e-02  8.57060601e-04 -5.58953695e-02
  8.07325616e-02 -7.49283731e-02 -8.59301612e-02 -1.59686312e-01
  5.05903102e-02  2.35502459e-02  1.41920432e-01 -7.94517696e-02
 -4.33053374e-02 -2.62708291e-02 -3.43551859e-02 -3.76802757e-02
  5.01854531e-02 -1.58772748e-02 -6.45675063e-02  2.96603460e-02
 -9.54253078e-02 -2.08906624e-02  6.06919453e-02 -2.13195216e-02
 -5.82360895e-03 -6.20007701e-03  6.89934492e-02 -2.07931418e-02
  9.18011665e-02 -1.73314530e-02 -4.53957394e-02 -4.71396521e-02
  1.51851531e-02  1.79642774e-02 -1.59840100e-02  7.55858095e-03
 -1.07946858e-01 -5.96622145e-03 -1.90887712e-02  2.60052532e-02
  5.38661852e-02  3.87147404e-02 -6.61151707e-02  4.64705750e-02
 -3.93256694e-02 -4.33821157e-02  1.37111116e-02 -5.14174551e-02
 -3.00381873e-02 -4.71574292e-02 -4.30346802e-02 -2.76531018e-02
  5.19138090e-02 -1.60798430e-02 -5.01594990e-02 -6.18925551e-03
  8.41230527e-03  7.17248991e-02 -6.22562468e-02 -6.65160501e-03
 -6.38320148e-02 -9.63218231e-03 -6.30293936e-02  1.80660821e-02
 -1.24682792e-01  2.31974293e-02 -6.75181746e-02 -5.41856177e-02
 -4.06573387e-03  7.53133604e-03 -4.07046117e-02  2.68754270e-02
  5.65513857e-02  1.28771234e-02 -5.27762473e-02  3.80515307e-02
 -3.68885696e-03  6.34577945e-02  9.11442935e-03 -2.08398271e-02
 -1.76336765e-02 -3.47799547e-02 -1.09745711e-02 -6.59519853e-03
  6.58984259e-02  7.01181218e-03  1.27555532e-02 -6.19602558e-33
 -1.21497167e-02 -7.65660629e-02 -3.99360135e-02 -1.05782235e-02
  4.99064364e-02  4.21195365e-02  6.36176839e-02 -3.39112543e-02
 -6.40146136e-02 -2.23013628e-02 -5.16611896e-02  6.29723594e-02
 -3.09379790e-02  2.87344754e-02  5.16265444e-02 -9.23377201e-02
 -5.63454069e-02  3.85470875e-02  6.39795959e-02 -3.27165835e-02
 -8.60376190e-03  4.36764397e-02 -4.33175229e-02  1.07081980e-01
 -8.72300044e-02  3.48118842e-02 -2.32801493e-02  1.28166489e-02
 -5.94050176e-02 -4.30188440e-02  3.95675190e-02 -4.71522287e-02
 -1.31816529e-02  7.23501295e-02 -2.96456832e-02 -9.37844217e-02
  1.50384912e-02  2.34181788e-02 -3.92404152e-03  9.14896578e-02
  6.59201518e-02 -3.21326517e-02  2.66975500e-02 -3.80913578e-02
  3.89641989e-03 -4.20769602e-02  1.06262214e-01  2.91635096e-02
  1.77009329e-02  7.34171644e-02  3.49941738e-02 -7.26252124e-02
  4.16523106e-02  7.92528316e-03  2.68210005e-02  6.88233152e-02
  3.16203907e-02 -2.56860573e-02  4.67728488e-02 -1.08265981e-01
  3.96767557e-02  4.47626645e-03  3.43007296e-02  8.32772255e-02
  9.47116241e-02  5.45184081e-03  7.58047309e-03  1.13522597e-02
  6.15106262e-02  5.42823188e-02 -2.53376011e-02  3.91374789e-02
  1.53651843e-02 -3.84280160e-02  4.01750877e-02  4.73161554e-03
 -1.19220540e-02 -2.25639902e-02  6.42321408e-02  1.08565195e-02
  7.16184452e-02  2.22270750e-02  3.21291164e-02 -1.39022432e-02
  3.45701501e-02  5.77819534e-03  2.62875929e-02 -5.21478662e-03
 -4.14364599e-02 -2.29050331e-02 -3.89954969e-02 -3.72369923e-02
 -5.11994325e-02 -4.27178442e-02 -2.13258043e-02 -6.48338556e-08
 -4.49403524e-02  5.47001064e-02 -7.17647746e-02  9.39327292e-03
  1.81868002e-02 -2.90883426e-02  7.26214871e-02 -1.20929375e-01
 -3.88569161e-02  4.04327102e-02 -9.60931554e-02  3.19885127e-02
 -2.50752047e-02 -8.19179341e-02 -7.61473086e-03 -9.68430862e-02
 -1.36277424e-02 -4.95569780e-02 -2.16605831e-02 -2.20025256e-02
 -3.74247832e-03  1.50644435e-02  3.55128385e-03 -3.31531651e-02
 -8.44890159e-03 -2.20223097e-03  1.14243761e-01  1.06210254e-01
  6.66746125e-02  2.75463667e-02 -1.37491440e-02 -9.37811285e-03
  1.15795629e-02 -3.06763779e-02 -6.71622828e-02  7.14972243e-02
 -5.72131909e-02  6.03469498e-02  8.27821940e-02  4.72407974e-02
  9.54795629e-03  5.79300933e-02  3.94456387e-02  6.01661566e-04
 -1.28047734e-01  2.32408755e-02 -6.25789985e-02  3.40272523e-02
  7.45206773e-02 -3.80722620e-02 -9.60674882e-03 -2.39242353e-02
  2.86217928e-02  8.53037834e-02 -5.85992187e-02  3.86305377e-02
  6.17383979e-02 -6.66259183e-03 -1.21520460e-02 -3.65596712e-02
  1.04849197e-01 -7.25350976e-02 -7.59862289e-02 -2.85186153e-02]"
"create our stake account
  // Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
  const createStakeAccountTx = StakeProgram.createAccount({
    authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set to our wallet.
    fromPubkey: wallet.publicKey,
    lamports: amountToStake,
    lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
    stakePubkey: stakeAccount.publicKey,
  });

  const createStakeAccountTxId = await sendAndConfirmTransaction(
    connection,
    createStakeAccountTx,
    [
      wallet,
      stakeAccount, // Since we're creating a new stake account, we have that account sign as well
    ]
  );
  console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

  // Check our newly created stake account balance. This should be 0.5 SOL.
  let stakeBalance = await connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

  // Verify the status of our stake account. This will start as inactive and will take some time to activate.
  let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // To delegate our stake, we first have to select a validator. Here we get all validators and select the first active one.
  const validators = await connection.getVoteAccounts();
  const selectedValidator = validators.current[0];
  const selectedValidatorPubkey = new PublicKey(selectedValidator.votePubkey);

  // With a validator selected, we can now setup a transaction that delegates our stake to their vote account.
  const delegateTx = StakeProgram.delegate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
    votePubkey: selectedValidatorPubkey,
  });

  const delegateTxId = await sendAndConfirmTransaction(connection, delegateTx, [
    wallet,
  ]);
  console.log(
    `Stake account delegated to ${selectedValidatorPubkey}. Tx Id: ${delegateTxId}`
  );

  // Check in on our stake account. It should now be activating.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485// With a validator selected, we can now setup a transaction that delegates our stake to their vote account.
const delegateTx = StakeProgram.delegate({
  stakePubkey: stakeAccount.publicKey,
  authorizedPubkey: wallet.publicKey,
  votePubkey: selectedValidatorPubkey,
});

const delegateTxId = await sendAndConfirmTransaction(connection, delegateTx, [
  wallet,
]);
console.log(
  `Stake account delegated to ${selectedValidatorPubkey}. Tx Id: ${delegateTxId}`
);

// Check in on our stake account. It should now be activating.
stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
console.log(`Stake account status: ${stakeStatus.state}`);
1234567891011121314151617# Get Delegator by ValidatorsMultiple accounts might have staked to a particular validator account. To fetch all the stakers, we will use getProgramAccounts or getParsedProgramAccounts API. Refer guides section for more information. The stake accounts are of 200 bytes in length and the Voter Public Key starts at 124 bytes. Referenceopen in new windowTSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";

(async () => {
  const STAKE_PROGRAM_ID = new PublicKey(
    ""Stake11111111111111111111111111111111111111""
  );
  const VOTE_PUB_KEY = ""27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x"";

  const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
  const accounts = await connection.getParsedProgramAccounts(STAKE_PROGRAM_ID, {
    filters: [
      {
    ","[-1.12851737e-02  3.73750143e-02 -5.71775027e-02  5.22459000e-02
 -6.21014088e-02 -6.02634512e-02  5.94793744e-02  2.42807250e-02
  1.16587088e-01  9.52525437e-02  3.76003720e-02 -8.49031433e-02
 -2.21782811e-02  1.22204497e-02  3.96621414e-03  3.78608964e-02
 -3.69584337e-02 -5.12338392e-02  4.34342846e-02  3.62254754e-02
  1.69233233e-02 -1.42423570e-01  3.49631235e-02  5.27029745e-02
  7.12457150e-02 -1.42635792e-01 -3.50054651e-02  2.07225606e-02
 -3.48723382e-02 -3.44451843e-03  5.63578233e-02 -1.52834216e-02
 -5.72273433e-02 -6.64546192e-02 -4.51721512e-02  8.87791887e-02
  2.48471033e-02 -2.10070442e-02 -4.47674729e-02 -5.31255864e-02
  1.11333071e-03  2.08523851e-02 -3.80603224e-02 -3.29491086e-02
  1.71468779e-02 -1.85183971e-03  7.99646415e-03  6.39138743e-02
 -2.09727138e-03  4.11145277e-02  1.40158832e-02 -3.32571082e-02
 -7.54439132e-03  4.17869426e-02 -2.00369153e-02  7.84529671e-02
  6.42509535e-02  3.04046627e-02  5.17396145e-02 -5.39974459e-02
  2.61724070e-02  1.13997199e-02  2.67585739e-03 -8.67536739e-02
 -4.31438675e-03  5.35746142e-02 -1.92213915e-02 -2.82181818e-02
  2.43605278e-03 -6.16254546e-02  4.68490720e-02 -1.84199866e-02
 -8.11984017e-02 -7.41883442e-02 -2.93273218e-02  1.42507544e-02
 -1.17928779e-03  6.93789050e-02 -5.33466339e-02 -2.72475928e-02
  1.67789645e-02  5.18995039e-02  1.17925806e-02 -1.58863235e-02
  5.73429558e-03  5.47591113e-02  4.01750319e-02  4.54904586e-02
 -2.52406579e-02  2.69510932e-02  7.77686853e-03  6.04156032e-02
 -4.54704612e-02  1.40711281e-03  8.55924189e-02  3.20843533e-02
 -5.07467389e-02  7.93096703e-03 -4.38912287e-02  1.26025761e-02
  7.73215890e-02 -4.09281813e-02 -4.57162261e-02  1.11974962e-03
  7.35800415e-02  1.36951320e-02  9.31958854e-02 -8.58753547e-02
  1.31562706e-02  1.94821204e-03 -8.21859576e-03  9.74183306e-02
 -1.27935670e-02  7.48975053e-02 -1.45459902e-02  1.27893671e-01
 -6.07972033e-02  3.14813554e-02  2.76395679e-02 -7.00029805e-02
  3.64232846e-02  1.76955014e-02  6.74531795e-04 -2.56664846e-02
 -1.81597453e-02 -7.51232170e-03  5.21894284e-02  7.69663816e-33
 -9.26315039e-03  1.28209842e-02 -2.58252360e-02  8.04208666e-02
  4.28289697e-02  1.83531176e-02  1.11587383e-02 -3.22386879e-03
 -1.11529887e-01 -1.19521944e-02 -2.00599022e-02 -5.42105250e-02
  7.60029256e-02 -5.92836849e-02 -5.79694845e-02 -1.34236202e-01
  2.78614033e-02  5.78377536e-03  1.73779190e-01 -3.92576680e-02
 -5.33396900e-02  2.83185411e-02 -3.68648954e-03 -5.06764138e-03
  3.57632264e-02 -4.20879945e-02 -8.91935304e-02 -9.16433241e-03
 -8.70966241e-02 -1.76339429e-02  4.07455228e-02 -1.48403458e-02
  2.54221745e-02  1.43350912e-02  5.63140735e-02 -1.13595938e-02
  4.94315512e-02 -2.79777311e-02 -3.12630236e-02 -8.59666467e-02
  5.57413045e-03 -6.68150652e-03 -5.15294001e-02  2.33133640e-02
 -1.23463318e-01 -2.53470615e-02 -1.41962022e-02 -4.79689101e-03
  6.04597628e-02  2.66462713e-02 -6.83350414e-02  4.51271161e-02
  1.04403803e-02 -7.04740286e-02 -7.13016279e-03 -8.72746557e-02
  9.00585763e-03 -4.67750095e-02 -1.69435497e-02 -5.51091842e-02
  4.70295437e-02  5.16027734e-02 -7.57623017e-02 -9.00608860e-03
 -8.02648347e-03  3.68363746e-02 -1.04709059e-01 -1.27737448e-02
 -1.39325876e-02 -2.81930789e-02 -8.14830959e-02  4.90437411e-02
 -7.56153464e-02  2.80619115e-02 -4.33525406e-02 -3.96566279e-02
 -2.84148883e-02  1.93974115e-02 -5.64175891e-03  8.91786942e-04
  4.17233892e-02  4.22413632e-06 -4.46016304e-02  6.74358290e-03
 -8.12457222e-03  7.92212114e-02 -1.99696161e-02  1.23489852e-04
  9.50242393e-03 -2.54686214e-02 -1.56228514e-02  6.96523162e-03
  8.48995373e-02  3.64979617e-02  6.21442758e-02 -8.00825730e-33
 -1.44414126e-03 -5.61821349e-02  8.14038888e-03 -1.30154220e-02
  3.31528373e-02  3.98447104e-02  2.99547594e-02 -7.83252418e-02
 -5.90288043e-02 -4.21304926e-02 -4.63650525e-02  2.70639062e-02
 -2.23628487e-02  3.71779948e-02  6.57534450e-02 -1.57323018e-01
 -6.31056875e-02  7.68233743e-03  6.85621947e-02 -5.84568903e-02
  5.65557601e-03  4.58884090e-02 -5.07299826e-02  1.16470285e-01
 -7.01952800e-02  3.31475027e-02 -2.40481440e-02  6.38125390e-02
 -3.44555825e-02 -6.71402514e-02  8.45379289e-03 -5.03668673e-02
 -2.00459063e-02  6.31664246e-02 -2.14552358e-02 -1.03907704e-01
  9.47382487e-03  7.57738426e-02 -1.81716885e-02  8.12514722e-02
  5.51417507e-02 -4.08068262e-02  2.83223577e-03  2.64368858e-03
  1.95157789e-02 -3.08944844e-02  5.79577833e-02  8.90437514e-03
  2.46650688e-02  7.22222254e-02  1.41356979e-03 -1.89703181e-02
  6.38268217e-02  2.41464400e-03  3.48625146e-02  3.22625712e-02
  1.02123857e-01 -5.42623438e-02  1.14374988e-01 -1.08044848e-01
  3.47885825e-02 -3.39718233e-03  7.89717585e-02  1.07380226e-01
  8.95832255e-02 -9.45404824e-03 -4.48961416e-03  1.57022215e-02
  4.64981794e-02  4.48271930e-02 -2.46966369e-02  2.51382869e-02
 -8.77244771e-03 -7.00747296e-02  8.96194726e-02  1.32878497e-02
 -2.36462206e-02 -6.19479790e-02  3.07637863e-02  2.02338472e-02
  5.69560044e-02 -1.86026140e-04  5.23746945e-02 -2.56562093e-03
  3.51954773e-02  1.82754528e-02  5.94664924e-03 -2.06078179e-02
 -4.45728004e-03 -2.19554603e-02 -2.08182205e-02 -3.65790389e-02
 -2.23374479e-02 -8.39415938e-02 -1.59841944e-02 -6.02330417e-08
 -6.46025985e-02  3.35242748e-02 -4.69817854e-02  2.82953549e-02
  1.37008838e-02 -2.41374448e-02  3.40452753e-02 -1.23538241e-01
 -4.42837663e-02 -7.19204964e-03 -1.15956150e-01  2.60680970e-02
 -3.30726826e-03 -6.29185513e-02 -2.48026382e-02 -7.88904279e-02
 -2.82415599e-02 -6.03336208e-02 -4.15711477e-03 -1.85524095e-02
 -2.09134687e-02 -3.47009748e-02  3.29804909e-03  7.36468355e-04
 -1.71803031e-02 -9.69047938e-03  9.68903229e-02  1.09359153e-01
  3.42897438e-02  6.60737231e-02 -2.64620874e-02 -3.16249542e-02
  2.38540899e-02  2.11348943e-02 -7.69136772e-02  4.25457917e-02
 -6.25100508e-02  6.37043491e-02  6.63258508e-02 -1.96428038e-02
  3.65632772e-03  3.81220765e-02  2.43770182e-02  4.42039082e-03
 -1.13717780e-01  4.52644266e-02 -4.63244207e-02  4.81066369e-02
  6.88110739e-02 -2.28507202e-02  1.60600506e-02 -2.01653820e-02
  2.88405623e-02  1.04807869e-01 -1.33839585e-02  2.29530670e-02
  4.34223972e-02 -8.16338509e-03  2.70514302e-02 -4.14786413e-02
  1.20175533e-01 -4.76422086e-02 -2.65708342e-02 -6.11711368e-02]"
"   dataSize: 200, // number of bytes
      },
      {
        memcmp: {
          offset: 124, // number of bytes
          bytes: VOTE_PUB_KEY, // base58 encoded string
        },
      },
    ],
  });

  console.log(`Accounts for program ${STAKE_PROGRAM_ID}: `);
  console.log(
    `Total number of delegators found for ${VOTE_PUB_KEY} is: ${accounts.length}`
  );
  if (accounts.length)
    console.log(`Sample delegator:`, JSON.stringify(accounts[0]));

  /*
  // Output

    Accounts for program Stake11111111111111111111111111111111111111: 
    Total number of delegators found for 27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x is: 184
    Sample delegator: 
    {
      ""account"": {
        ""data"": {
          ""parsed"": {
            ""info"": {
              ""meta"": {
                ""authorized"": {
                  ""staker"": ""3VDVh3rHTLkNJp6FVYbuFcaihYBFCQX5VSBZk23ckDGV"",
                  ""withdrawer"": ""EhYXq3ANp5nAerUpbSgd7VK2RRcxK1zNuSQ755G5Mtxx""
                },
                ""lockup"": {
                  ""custodian"": ""3XdBZcURF5nKg3oTZAcfQZg8XEc5eKsx6vK8r3BdGGxg"",
                  ""epoch"": 0,
                  ""unixTimestamp"": 1822867200
                },
                ""rentExemptReserve"": ""2282880""
              },
              ""stake"": {
                ""creditsObserved"": 58685367,
                ""delegation"": {
                  ""activationEpoch"": ""208"",
                  ""deactivationEpoch"": ""18446744073709551615"",
                  ""stake"": ""433005300621"",
             ","[ 2.59477925e-02  3.92403379e-02 -4.17887345e-02 -3.94732878e-03
  2.51846686e-02 -8.34977925e-02  2.94753034e-02  2.65127849e-02
  9.48614329e-02  3.39091048e-02 -2.31003202e-02 -6.46451414e-02
  8.98379646e-03 -2.18987279e-02  4.06736275e-03  4.20725159e-02
 -1.49966896e-01 -2.79359240e-02 -7.27030635e-03 -5.91099262e-02
  6.15376048e-02 -4.73309867e-02 -2.31658835e-02 -9.57726594e-03
  1.87303852e-02  1.63503904e-02 -3.08949612e-02  3.08417082e-02
 -2.04807017e-02 -5.28557785e-02  4.96165268e-02 -8.74727890e-02
  5.42360805e-02  2.74686366e-02  1.71780884e-02  7.21593574e-02
 -1.03651710e-01 -1.38612166e-01 -1.97372995e-02 -6.05645254e-02
  5.42090535e-02  5.61442375e-02 -3.12193390e-02 -5.24461009e-02
  7.60670304e-02  5.04822433e-02 -1.13714524e-01  9.47476998e-02
 -1.23854727e-02 -8.46406352e-03  2.20224932e-02 -3.49010788e-02
 -3.87783535e-03  4.80330028e-02 -5.74666483e-04 -3.10550742e-02
 -3.55022065e-02 -7.22439308e-03  4.06606905e-02  1.80529580e-02
  5.88146411e-02  6.54710806e-04  5.15323656e-04 -8.14383179e-02
  2.06359308e-02 -4.77495529e-02 -4.99120727e-02  3.98575142e-02
  2.93296482e-02 -7.83910882e-03  1.05943471e-01  2.68570092e-02
 -6.71975389e-02 -7.23473653e-02 -4.69738953e-02 -5.78646036e-03
 -2.87947692e-02 -8.60296749e-03  2.67355721e-02 -1.34210195e-02
 -4.18786444e-02 -3.76248881e-02 -2.55633295e-02  1.84948593e-02
  5.82864285e-02  2.45629828e-02 -2.73711281e-03  6.53243298e-03
 -8.14143009e-03 -9.46295634e-03 -3.70903574e-02  2.70592459e-02
  1.49047300e-02  4.74450588e-02  4.34324369e-02  8.85363519e-02
  4.14754339e-02 -1.78559441e-02 -3.55640650e-02  9.33402330e-02
 -4.60186712e-02 -1.73343159e-02  2.53062826e-02 -5.04444428e-02
  3.83327752e-02  2.43111104e-02  3.56301479e-02  4.55073640e-02
 -4.79833297e-02 -9.65150911e-03 -2.52560116e-02  9.40414295e-02
 -7.01082051e-02  1.01996496e-01  3.50838825e-02  4.41934466e-02
 -1.96127463e-02  3.81383151e-02  1.53598413e-02  6.81224391e-02
  1.58286303e-01 -2.36933250e-02 -3.57406698e-02 -2.39976272e-02
 -3.37525569e-02  1.77008752e-02  1.64550859e-02  9.28743099e-33
  1.24531146e-02 -5.13435639e-02 -1.59524381e-02 -4.06147260e-03
  3.92636172e-02  2.57157348e-02  8.85788351e-03  5.76493517e-02
 -1.34628028e-01  6.51005059e-02 -4.37431671e-02  1.91413742e-02
  8.36361665e-03  7.34426230e-02  2.19271500e-02 -1.13763399e-01
  4.72210385e-02  5.75886518e-02  4.94196229e-02 -4.95402142e-02
  6.95486600e-03  2.85700001e-02 -3.11185364e-02  3.32823768e-02
  5.47713861e-02 -8.84671323e-03 -4.95519675e-02 -2.28712391e-02
 -1.04585141e-01  3.87938507e-03  4.15229686e-02 -3.43716368e-02
 -1.11176502e-02 -1.42069403e-02  7.80875161e-02  1.04312375e-02
  6.52711987e-02 -3.88653986e-02 -8.55127200e-02 -7.22763985e-02
  7.22408295e-02 -6.02453295e-03  1.02589186e-02 -6.79413229e-02
 -1.51105449e-01  1.48468046e-02  3.95033285e-02 -1.07495263e-01
 -2.30337679e-02  6.65767565e-02 -2.84125339e-02  7.49282613e-02
  7.01830024e-03  9.08218045e-03  3.45761254e-02 -6.66451976e-02
  3.48958075e-02  5.89102088e-03  3.82790379e-02 -1.09635694e-02
  3.40515003e-02  4.22215946e-02  1.83764100e-02  5.05467784e-03
 -4.18540798e-02  9.34228860e-03 -2.57133637e-02  2.97405366e-02
  5.26933894e-02  3.99070382e-02 -2.08619293e-02  6.19453564e-02
  1.79127548e-02 -2.16891300e-02 -1.07794099e-01 -6.18745461e-02
 -3.43702585e-02 -3.16711701e-02 -1.26090636e-02 -2.57428400e-02
  7.66585246e-02 -3.79789025e-02 -2.78411321e-02  1.87105089e-02
 -3.71620581e-02  6.52553737e-02  2.14163344e-02 -5.82853816e-02
 -3.42139415e-02  2.48729740e-03 -2.73387413e-02  3.76137644e-02
 -8.25057458e-03 -1.01741649e-01 -9.98255387e-02 -9.06405400e-33
 -3.94036323e-02 -5.07012121e-02  6.77787066e-02  9.24512744e-03
  4.61535342e-02 -5.63786291e-02  2.45707259e-02  8.31960142e-03
  3.00890580e-02  2.49603041e-03 -6.63250238e-02 -1.08550545e-02
  4.81279381e-03  1.66668766e-03  6.46668077e-02  2.49702018e-02
 -1.10867262e-01 -2.30365060e-02  5.75016551e-02 -9.71095264e-02
 -1.35150952e-02  1.00101672e-01  7.06878453e-02  8.75589401e-02
 -5.27023859e-02 -2.13423148e-02  4.14235070e-02 -5.06138317e-02
  1.25502246e-02 -1.66932251e-02 -2.76118629e-02 -7.51663372e-02
 -5.14842123e-02  6.58545718e-02 -2.40433328e-02 -1.11945651e-01
  9.00617391e-02  8.98555294e-02 -8.81872373e-04 -3.00091896e-02
  7.59102255e-02 -1.06517109e-03 -4.16807346e-02  2.18979567e-02
  3.69381392e-03 -1.25442510e-02  9.32127535e-02  1.33061558e-01
  6.98925108e-02 -2.12875064e-02 -1.39550939e-02 -4.52593602e-02
  9.71622206e-03  6.29501566e-02 -1.20775281e-02 -6.32697046e-02
  2.25244276e-02 -6.54989406e-02  4.19787467e-02 -3.73470001e-02
 -3.34253609e-02 -6.62218556e-02 -1.89037342e-02  7.25587010e-02
  6.16144203e-02 -7.50600770e-02 -8.62461776e-02 -2.91847214e-02
  3.42465937e-02  4.77219634e-02 -4.82771127e-03  1.24384183e-02
 -1.77764054e-02 -4.39942721e-03 -1.05924765e-02 -1.76459886e-02
 -5.74540235e-02 -1.37367789e-02  6.27604797e-02  1.50385536e-02
 -4.01439555e-02  6.10820986e-02  4.26162854e-02  8.39387008e-04
  5.45911901e-02 -1.22240847e-02  7.93209150e-02  5.76232262e-02
 -6.32988214e-02  3.61856893e-02 -2.39257831e-02  2.12422702e-02
  3.64645608e-02 -1.10767744e-02 -2.79374141e-02 -5.67435272e-08
  9.36317374e-04 -2.64687301e-03 -5.76065406e-02  2.73610186e-02
  4.21621054e-02 -1.73231550e-02  6.01111911e-02 -4.61350344e-02
  2.37508640e-02 -4.21802700e-03  9.68645513e-02  1.90905572e-04
 -9.86674726e-02 -5.64927161e-02 -2.33794712e-02 -6.56560361e-02
 -8.69738683e-02  5.79269491e-02 -3.39693762e-02  5.41125685e-02
  2.85365973e-02  5.88061139e-02 -3.03844903e-02 -4.32232767e-02
  2.37684920e-02  2.07573157e-02 -6.92290859e-03  1.42924547e-01
 -3.10930517e-02  1.32637005e-02  1.17494795e-03  8.95224884e-03
  3.94873060e-02 -1.94663033e-02  2.44086180e-02  2.77456678e-02
 -8.40614513e-02  4.65026721e-02  2.18639839e-02 -4.36009699e-03
 -3.58772948e-02 -8.07533215e-04  1.41433603e-03  1.20333452e-02
 -4.95304503e-02 -4.60882150e-02 -5.80026172e-02  7.40072355e-02
  7.40025491e-02 -1.18508592e-01 -1.39927980e-03 -6.00467660e-02
 -4.29175869e-02  3.61405201e-02  5.52597735e-03  2.65927222e-02
  1.76761101e-03 -1.12283686e-02  2.13856474e-02 -4.03370857e-02
  1.35339916e-01 -3.01310979e-02 -5.86520694e-02 -5.88847771e-02]"
"    ""voter"": ""27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x"",
                  ""warmupCooldownRate"": 0.25
                }
              }
            },
            ""type"": ""delegated""
          },
          ""program"": ""stake"",
          ""space"": 200
        },
        ""executable"": false,
        ""lamports"": 433012149261,
        ""owner"": {
          ""_bn"": ""06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc000000000""
        },
        ""rentEpoch"": 264
      },
      ""pubkey"": {
        ""_bn"": ""0dc8b506f95e52c9ac725e714c7078799dd3268df562161411fe0916a4dc0a43""
      }
    }

  */
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283const STAKE_PROGRAM_ID = new PublicKey(
  ""Stake11111111111111111111111111111111111111""
);
const VOTE_PUB_KEY = ""27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x"";

const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
const accounts = await connection.getParsedProgramAccounts(STAKE_PROGRAM_ID, {
  filters: [
    {
      dataSize: 200, // number of bytes
    },
    {
      memcmp: {
        offset: 124, // number of bytes
        bytes: VOTE_PUB_KEY, // base58 encoded string
      },
    },
  ],
});

console.log(`Accounts for program ${STAKE_PROGRAM_ID}: `);
console.log(
  `Total number of delegators found for ${VOTE_PUB_KEY} is: ${accounts.length}`
);
if (accounts.length)
  console.log(`Sample delegator:`, JSON.stringify(accounts[0]));

/*
// Output

  Accounts for program Stake11111111111111111111111111111111111111: 
  Total number of delegators found for 27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x is: 184
  Sample delegator: 
  {
    ""account"": {
      ""data"": {
        ""parsed"": {
          ""info"": {
            ""meta"": {
              ""authorized"": {
                ""staker"": ""3VDVh3rHTLkNJp6FVYbuFcaihYBFCQX5VSBZk23ckDGV"",
                ""withdrawer"": ""EhYXq3ANp5nAerUpbSgd7VK2RRcxK1zNuSQ755G5Mtxx""
              },
              ""lockup"": {
                ""custodian"": ""3XdBZcURF5nKg3oTZAcfQZg8XEc5eKsx6vK8r3BdGGxg"",
                ""epoch"": 0,
              ","[ 2.84607187e-02  5.32775633e-02 -8.90712216e-02  5.84169943e-03
 -2.42308490e-02 -4.05052193e-02  6.63385987e-02 -5.26508875e-02
 -1.92907229e-02  9.66577232e-02  6.65222555e-02 -8.32378045e-02
  4.44337428e-02 -4.22772355e-02  2.37820279e-02  8.30930993e-02
 -9.33513343e-02 -4.16031145e-02 -8.31977744e-03 -4.62988857e-03
  1.13055261e-03  2.12192861e-03 -2.33094469e-02  6.21086266e-03
  1.23622473e-02 -6.40406758e-02  2.11109087e-04  6.39484078e-02
 -4.67984527e-02 -3.43031436e-02  7.07199648e-02 -7.45363086e-02
 -2.85675749e-02  1.60908531e-02  1.21469840e-01  1.06410764e-01
  1.41075635e-02 -1.35713547e-01 -3.76988649e-02 -4.26588915e-02
  5.08612692e-02 -3.96384038e-02 -2.56191455e-02 -2.85298210e-02
 -1.88480318e-02  3.43184061e-02 -1.72454435e-02  5.46886660e-02
  6.21951511e-03 -7.14782625e-02 -2.74203233e-02 -1.85207836e-03
  6.75305771e-03  1.82144716e-02 -7.72999087e-03  1.07564162e-02
 -5.92170060e-02  3.06127109e-02  7.92176574e-02 -5.84544018e-02
  9.85479876e-02  3.98496315e-02 -2.04432234e-02 -4.93576638e-02
 -4.81626615e-02 -2.55862586e-02 -2.93021575e-02 -7.67465532e-02
 -3.76278814e-03 -7.30062574e-02  6.70223162e-02  3.27045433e-02
 -5.31271324e-02 -2.98664700e-02 -3.70392278e-02  5.48790302e-03
 -3.68036367e-02 -1.73404291e-02  6.23291126e-03 -1.00894272e-01
 -2.69921925e-02 -1.24049392e-02 -2.84472890e-02  3.40530723e-02
  4.55035530e-02  1.55740026e-02 -8.14697333e-03 -1.59683786e-02
  1.67462155e-02  4.75512967e-02 -2.71964027e-03  2.41420381e-02
  8.88506416e-03  6.23321868e-02  7.15677068e-02  4.81169894e-02
  5.49931414e-02  3.18060070e-03 -6.74866736e-02  1.17150255e-01
 -4.57846336e-02 -1.72106978e-02 -8.49988088e-02 -4.99254614e-02
  6.02290705e-02  1.48648452e-02  2.83908024e-02 -1.48374690e-02
 -6.56167939e-02 -5.11310995e-02 -5.89012392e-02  5.28362803e-02
 -4.62853797e-02 -1.53489430e-02 -1.70624014e-02  5.41072823e-02
 -1.60409193e-02  4.05056514e-02 -4.42910716e-02 -3.36839492e-03
  1.43758282e-01 -4.43909690e-03 -1.08341184e-02  2.02649478e-02
 -4.77723554e-02  1.86465599e-03  7.01288972e-03  7.25390511e-33
  2.08238382e-02 -7.66106471e-02 -4.52145524e-02 -8.96972418e-03
  9.15119611e-03  6.27897829e-02  3.05170417e-02  3.95225585e-02
 -6.77500814e-02  1.35621736e-02 -4.65824082e-02 -5.95966578e-02
  4.88091633e-02 -1.15233379e-04  4.53641377e-02 -8.56445506e-02
  4.34682937e-03  5.71494289e-02  1.67160276e-02 -6.39836714e-02
 -2.30602343e-02  5.25560752e-02 -2.33381111e-02 -6.76872805e-02
 -1.57113709e-02 -3.30209322e-02 -4.51944470e-02 -3.06158829e-02
 -1.20151220e-02  4.03092802e-02  4.02911901e-02 -2.49567907e-02
 -7.70677850e-02 -1.34244189e-02  4.03953344e-03 -7.92919938e-03
  6.87095225e-02 -6.13320246e-02 -4.45808358e-02 -1.01660281e-01
  2.93001290e-02 -2.78571621e-02 -1.38886720e-02  3.05492505e-02
 -8.73757675e-02  2.08579861e-02 -7.26795793e-02 -4.89758281e-03
 -5.58652207e-02  3.31247896e-02 -6.49934039e-02  5.04551306e-02
 -1.48268715e-02  1.98447402e-03 -5.79689816e-02 -1.19060487e-01
 -4.53983843e-02  1.21354628e-02  2.40350496e-02 -7.25677237e-02
 -1.31817292e-02  6.63289651e-02 -3.96401696e-02  2.30190512e-02
  3.03144623e-02 -2.91482490e-02  3.88335139e-02  2.55862623e-02
  1.76025573e-02 -3.64160095e-03 -1.85070392e-02  5.36591448e-02
  5.23845144e-02  2.57640611e-02 -9.84075963e-02 -9.45301205e-02
 -7.02475489e-04 -1.10772224e-02 -3.84798669e-03 -5.57454303e-02
  6.64680526e-02 -5.11217676e-02 -5.46101481e-02 -3.61674763e-02
 -5.51368035e-02  3.02047841e-02 -2.84503773e-02 -1.68540366e-02
 -8.50768294e-03 -9.44293756e-03 -7.03330487e-02  2.59491876e-02
  1.92004554e-02 -9.69827548e-02 -3.28045860e-02 -9.65364817e-33
 -1.72409546e-02 -5.88989034e-02  2.49579474e-02 -2.55974773e-02
  1.24027056e-03 -1.46699958e-02 -1.33993779e-03 -1.37184069e-01
 -3.97454463e-02  5.61015271e-02  6.36913441e-03 -1.83234382e-02
  1.15258936e-02  3.05771977e-02  1.09432250e-01 -2.13467125e-02
 -1.37606710e-01  4.85879891e-02  7.22901747e-02 -1.93574838e-02
 -2.20787153e-02  1.86577693e-01 -3.52748819e-02  1.12633549e-01
 -9.43655148e-03 -5.50241135e-02 -2.30340548e-02  7.82671496e-02
 -9.44384467e-03 -4.48568678e-03  2.91592497e-02 -2.81283334e-02
 -1.23644270e-01  7.42272586e-02 -1.53059950e-02 -3.23174037e-02
  6.40066341e-02  3.75166796e-02 -2.26382297e-02  7.21538365e-02
  8.02261606e-02 -5.58747612e-02 -2.52002925e-02 -3.35067324e-03
  2.43258215e-02 -3.71006317e-02  6.43792823e-02  6.42671883e-02
 -2.44420418e-03  5.92522658e-02  2.73135509e-02 -1.97820365e-02
  2.04147976e-02  7.06477370e-03  5.90588674e-02  4.61795693e-03
  6.77590072e-02 -5.01400456e-02 -3.36326286e-03 -4.59876396e-02
  7.85006732e-02 -3.97450477e-02  3.49489525e-02  1.13302179e-01
  7.18309283e-02 -9.92544740e-02 -5.16963527e-02 -8.54841527e-03
  4.70150933e-02 -1.91826932e-02 -5.71204796e-02 -1.12839462e-02
 -7.96720479e-03 -3.97504158e-02  4.24905121e-02  4.78777476e-02
  1.52953193e-02  7.39330277e-02  3.03072538e-02  1.55306701e-02
  1.90532245e-02  3.78913037e-03  6.56402335e-02 -1.63661980e-03
  2.25525498e-02 -6.44229725e-02  9.21992734e-02  6.36171624e-02
 -1.00589424e-01  1.32887494e-02 -2.33924985e-02 -2.91441102e-02
  9.05845985e-02  3.92078422e-02  2.78797792e-03 -5.73188252e-08
 -4.81129587e-02  9.65684559e-03 -5.54427803e-02  5.02695516e-02
  4.10232581e-02 -3.61552015e-02 -2.14580465e-02 -1.20433286e-01
 -7.68275326e-03 -7.59067982e-02  4.03486453e-02  1.31381126e-02
 -2.87966449e-02 -2.73079220e-02 -4.74720746e-02 -1.11431457e-01
 -1.11059479e-01  1.12006851e-02 -4.80167866e-02  3.38572101e-03
  1.14636524e-02  1.73467502e-03  4.20145830e-03  3.92930396e-02
 -2.48841271e-02  3.72007154e-02  5.51000871e-02  7.83346370e-02
  1.35515882e-02  1.12955339e-01 -1.98900513e-03  1.40262172e-02
  9.70583316e-03 -2.29345057e-02 -7.71816075e-02  9.45242271e-02
 -3.79289836e-02  9.20373425e-02  1.48078958e-02 -1.46994200e-02
 -3.68684530e-02 -3.30225611e-03 -9.33494046e-03  2.23183930e-02
 -5.02858497e-03 -2.68441974e-03  2.67705327e-04  2.89357118e-02
  1.03820279e-01 -6.39029220e-02 -5.20228781e-02  5.34888962e-03
  2.88717058e-02  1.31967971e-02 -4.76280078e-02  5.85078448e-02
  1.55785251e-02  3.44561301e-02  3.53595577e-02  1.91564541e-02
  8.69956687e-02 -1.30788479e-02 -6.33465052e-02  3.39181013e-02]"
" ""unixTimestamp"": 1822867200
              },
              ""rentExemptReserve"": ""2282880""
            },
            ""stake"": {
              ""creditsObserved"": 58685367,
              ""delegation"": {
                ""activationEpoch"": ""208"",
                ""deactivationEpoch"": ""18446744073709551615"",
                ""stake"": ""433005300621"",
                ""voter"": ""27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x"",
                ""warmupCooldownRate"": 0.25
              }
            }
          },
          ""type"": ""delegated""
        },
        ""program"": ""stake"",
        ""space"": 200
      },
      ""executable"": false,
      ""lamports"": 433012149261,
      ""owner"": {
        ""_bn"": ""06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc000000000""
      },
      ""rentEpoch"": 264
    },
    ""pubkey"": {
      ""_bn"": ""0dc8b506f95e52c9ac725e714c7078799dd3268df562161411fe0916a4dc0a43""
    }
  }
  
*/
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# Deactivate StakeAt anytime after a stake account is delegated, the Stake Authority can choose to deactivate the account. Deactivation can take several epochs to complete, and is required before any SOL is withdrawn.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  StakeProgram,
  Authorized,
  sendAndConfirmTransaction,
  Lockup,
  PublicKey,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const wallet = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    wallet.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // Create a keypair for our stake account
  const stakeAccount = Keypair.generate();

  // Calculate how much we want to stake
  const minimumRent = await connection.getMinimumBalanceForRentExemption(
    StakeProgram.space
  );
  const amountUserWantsToStake = LAMPORTS_PER_SOL / 2; // This is can be user input. For now, we'll hardcode to 0.5 SOL
  const amountToStake = minimumRent + amountUserWantsToStake;

  // Setup a transaction to create our stake account
  // Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
","[-3.97337079e-02  3.50135341e-02 -9.59051922e-02  7.82271009e-03
  2.80971639e-03 -6.55944794e-02  1.12407291e-02 -1.46345831e-02
  3.51791009e-02  7.85078853e-02  4.97937649e-02 -1.10716827e-01
  8.55197955e-04 -1.33285290e-02  8.68457183e-03  6.28539473e-02
 -1.17348231e-01 -2.46145744e-02  3.21627483e-02 -4.30082493e-02
  1.49783920e-02  1.85468066e-02 -1.80830248e-02 -3.82907242e-02
  4.00166288e-02  2.52520968e-03 -7.40149915e-02  6.30691648e-02
 -6.95754066e-02 -1.54331466e-02  5.43665662e-02 -2.50156187e-02
  3.82190235e-02 -1.15252566e-02  1.26463130e-01  1.68527424e-01
 -1.33206658e-02 -1.01364076e-01 -5.30283973e-02 -3.46668512e-02
  7.40441382e-02 -1.07622463e-02 -2.21438464e-02 -6.23520948e-02
 -6.15197383e-02 -4.32253443e-02  2.38171034e-02 -2.10582875e-02
 -1.67660415e-02 -1.75701026e-02 -1.97552890e-02  2.26267073e-02
  2.84318216e-02  2.12885886e-02 -1.23116933e-02  2.00070292e-02
 -5.07600531e-02  3.13671567e-02  5.49738817e-02 -6.14043511e-02
  9.83389616e-02  5.43385446e-02 -6.99739084e-02 -4.42533344e-02
 -3.66776367e-03 -2.28268956e-03 -3.69535759e-02 -1.32970968e-02
  1.76076423e-02 -7.37950578e-02  5.98877519e-02  3.44379991e-03
 -1.04047783e-01 -1.85621735e-02 -1.51290931e-02  8.38548988e-02
  2.05275267e-02 -2.42897635e-03  1.62329245e-02 -1.36787146e-01
 -4.26214188e-02 -6.18879236e-02 -3.11901122e-02  3.74787040e-02
 -6.00269251e-02  5.08480743e-02  1.81655604e-02  3.00733615e-02
  3.07964329e-02  4.66922559e-02 -9.41252429e-03 -2.37343684e-02
  3.10131442e-02  4.34630597e-03  9.12942644e-03  6.38445169e-02
  2.65605329e-03  5.06578125e-02 -3.73820662e-02  1.06743410e-01
 -2.87433844e-02  2.35007983e-02 -8.20248723e-02 -4.30620573e-02
  2.26947293e-02 -5.93204401e-04  5.54382103e-03  3.51952203e-02
 -5.03919981e-02 -4.28655073e-02 -2.06658263e-02  3.00729312e-02
 -3.93827818e-02 -4.15121242e-02 -7.69801531e-03  4.42544818e-02
 -5.51606156e-02 -2.22983453e-02  1.46011356e-03  6.85757250e-02
  1.80683509e-01 -1.76082700e-02 -2.93583758e-02  2.71219877e-03
 -2.04350092e-02 -8.81640054e-03  6.37384728e-02  8.11081698e-33
  2.30948534e-02 -6.58803433e-02 -2.08131354e-02 -3.15913297e-02
  2.91885361e-02  1.76883545e-02  8.67268536e-03  8.45401809e-02
 -1.19403981e-01  3.97256576e-02 -4.06590402e-02 -4.55696955e-02
  6.41210601e-02  1.41418050e-03 -3.33348922e-02 -9.79567692e-02
  2.42601745e-02  3.02297883e-02  3.37796174e-02 -4.94310968e-02
 -2.12001009e-03  4.04390842e-02 -4.82045300e-02 -2.58368813e-02
 -5.62236318e-03 -3.06373145e-02 -2.17718761e-02 -2.48703174e-02
  1.47296246e-02  4.25837860e-02  5.03533855e-02 -1.74817313e-02
 -8.39564949e-02  1.10728312e-02  6.85787946e-02 -6.92638662e-03
  1.91972144e-02 -2.78308429e-02 -7.65117481e-02 -1.03404164e-01
  1.97329558e-02 -7.64165213e-03 -7.07493201e-02  3.59786041e-02
 -3.75588462e-02 -4.51685628e-03 -2.00020485e-02 -6.32278100e-02
 -5.15987957e-03  9.64176059e-02 -8.38620961e-03  4.71977592e-02
 -1.30116502e-02 -3.36759887e-03 -4.13984917e-02 -3.94983776e-02
 -1.04235206e-02 -3.57265264e-04  1.20766349e-02 -7.93646798e-02
  4.27936614e-02  8.62966031e-02 -2.06553098e-02 -7.17882290e-02
  5.96844032e-02 -3.86119522e-02  1.82878673e-02  1.90273039e-02
 -2.90410649e-02  6.77498281e-02 -6.94567710e-03  3.19645666e-02
  9.22333449e-02 -1.53743115e-03 -8.20013210e-02 -8.90571102e-02
  1.87108926e-02 -8.92833900e-03 -1.79364979e-02  6.21928554e-03
  3.84036414e-02 -1.28458127e-01 -1.99703667e-02 -4.86014932e-02
 -2.80963182e-02 -9.09819268e-03 -6.31663948e-03  4.35629301e-03
 -2.17741430e-02 -3.96936275e-02 -6.79737714e-04  1.95782855e-02
 -1.13356290e-02 -1.06483027e-01 -5.44978119e-02 -9.47538666e-33
  2.60113347e-02 -6.95144534e-02  1.08626410e-02 -4.19728458e-02
  3.64856096e-03 -2.37638336e-02 -4.94145155e-02 -3.76033410e-02
 -1.20937107e-02  7.86558613e-02  3.04110460e-02 -1.31413965e-02
  1.91700198e-02 -4.58085276e-02  9.51988325e-02  1.24207400e-02
 -8.41267332e-02 -2.24858038e-02  2.64396872e-02 -1.79662257e-02
 -2.54389420e-02  1.69559777e-01 -1.87114812e-02  1.21574827e-01
  1.05095701e-02 -7.02331215e-02 -6.86802343e-03  1.03327006e-01
 -4.39279480e-03 -2.83244555e-03 -2.19669286e-02 -5.21736266e-03
 -1.58198223e-01  6.09356239e-02 -3.17349434e-02 -2.35921890e-02
  7.09099695e-02  1.01819180e-01 -5.70178069e-02 -2.26205681e-02
  4.94392402e-02  1.96675193e-02 -6.61481097e-02 -2.66023818e-02
  8.48796684e-03  1.37584461e-02  5.49526140e-02  6.17968664e-02
  1.68182403e-02  5.18183820e-02  3.28850397e-03 -3.20545323e-02
  1.94087401e-02  3.39377783e-02  6.23814836e-02  1.18596926e-02
  5.66326417e-02 -4.29777838e-02 -1.01153962e-02 -3.97563279e-02
  6.87019676e-02 -4.98780087e-02  2.20921766e-02  5.54082952e-02
  7.05367997e-02 -8.29943642e-02 -8.59942064e-02 -1.29903071e-02
 -3.79006155e-02 -1.91000197e-02  5.04469573e-02 -3.48989032e-02
 -6.25286996e-02 -5.33575639e-02  1.42495427e-02  2.51227301e-02
  2.19993442e-02  6.86416179e-02 -3.17934044e-02  8.92827101e-03
  2.90789101e-02  5.18439598e-02  3.71295922e-02  1.11280367e-01
  3.14273611e-02 -8.01377520e-02  4.04463001e-02  5.83053082e-02
 -4.30415049e-02  1.60184801e-02 -5.45278490e-02 -2.71017458e-02
  6.97586760e-02  6.45155683e-02 -5.99459978e-03 -5.91061244e-08
 -5.54667264e-02 -2.07198244e-02 -5.92446290e-02  2.57607233e-02
  1.15305968e-01 -7.18680210e-03 -1.55198341e-02 -3.96405049e-02
 -2.06423569e-02 -3.31010930e-02  1.21275730e-01 -1.26887336e-02
 -5.12121581e-02 -7.21416548e-02 -1.76305026e-02 -8.98147151e-02
 -8.93483311e-02  2.45722514e-02 -6.45243824e-02 -1.21767921e-02
  3.63075286e-02 -1.22941472e-02  5.07239113e-03  2.96535389e-03
 -2.91105080e-02  3.17278802e-02  5.92229888e-02  6.90296814e-02
  1.40949823e-02  3.54754254e-02 -3.13183218e-02  2.35370826e-02
  2.85142870e-03 -1.12088688e-01 -3.55522446e-02  7.16527849e-02
 -1.93974096e-02  8.04852992e-02 -2.13487428e-02  2.65593757e-03
 -4.39605042e-02  3.42980325e-02 -2.67148018e-02  4.02574427e-02
  2.68404442e-03 -4.23887651e-03 -3.80234160e-02  6.42462894e-02
  9.46154371e-02 -9.15907025e-02 -2.05719676e-02 -3.34240240e-03
 -3.47505957e-02  5.35373278e-02 -3.69150750e-02  3.73494960e-02
  1.86914839e-02 -2.35107518e-03  4.40960051e-03  3.40007059e-02
  8.60672146e-02 -2.08752509e-03 -3.17952894e-02  1.02356356e-02]"
" const createStakeAccountTx = StakeProgram.createAccount({
    authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set to our wallet.
    fromPubkey: wallet.publicKey,
    lamports: amountToStake,
    lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
    stakePubkey: stakeAccount.publicKey,
  });

  const createStakeAccountTxId = await sendAndConfirmTransaction(
    connection,
    createStakeAccountTx,
    [
      wallet,
      stakeAccount, // Since we're creating a new stake account, we have that account sign as well
    ]
  );
  console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

  // Check our newly created stake account balance. This should be 0.5 SOL.
  let stakeBalance = await connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

  // Verify the status of our stake account. This will start as inactive and will take some time to activate.
  let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // To delegate our stake, we first have to select a validator. Here we get all validators and select the first active one.
  const validators = await connection.getVoteAccounts();
  const selectedValidator = validators.current[0];
  const selectedValidatorPubkey = new PublicKey(selectedValidator.votePubkey);

  // With a validator selected, we can now setup a transaction that delegates our stake to their vote account.
  const delegateTx = StakeProgram.delegate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
    votePubkey: selectedValidatorPubkey,
  });

  const delegateTxId = await sendAndConfirmTransaction(connection, delegateTx, [
    wallet,
  ]);
  console.log(
    `Stake account delegated to ${selectedValidatorPubkey}. Tx Id: ${delegateTxId}`
  );

  // Check in on our stake account. It should now be activating.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // At anytime we can choose to deactivate our stake. Our stake account must be inactive before we can withdraw funds.
  const deactivateTx = StakeProgram.deactivate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
  });
  const deactivateTxId = await sendAndConfirmTransaction(
    connection,
    deactivateTx,
    [wallet]
  );
  console.log(`Stake account deactivated. Tx Id: ${deactivateTxId}`);

  // Check in on our stake account. It should now be inactive.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101// At anytime we can choose to deactivate our stake. Our stake account must be inactive before we can withdraw funds.
const deactivateTx = StakeProgram.deactivate({
  stakePubkey: stakeAccount.publicKey,
  authorizedPubkey: wallet.publicKey,
});
const deactivateTxId = await sendAndConfirmTransaction(
  connection,
  deactivateTx,
  [wallet]
);
console.log(`Stake account deactivated. Tx Id: ${deactivateTxId}`);

// Check in on our stake account. It should now be inactive.
stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
console.log(`Stake account status: ${stakeStatus.state}`);
123456789101112131415# Withdraw StakeOnce deactivated, the Withdrawal Authority can withdraw SOL back to a system account. Once a stake account is no longer delegated and has a balance of 0 SOL, it is effectively destroyed.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
 ","[-4.00028517e-03  2.35944428e-02 -4.95830253e-02  6.36553019e-02
 -6.45589381e-02 -5.74386604e-02  8.22127908e-02  2.53358856e-02
  1.36650309e-01  6.49081618e-02  5.18411510e-02 -8.92919302e-02
 -2.48735994e-02 -1.07343728e-02  1.57291908e-02  5.05120233e-02
 -8.19803253e-02 -5.87102994e-02  3.80080342e-02  3.39850411e-02
  3.50586027e-02 -1.31266400e-01  2.57040523e-02  6.33581728e-02
  5.56616485e-02 -1.09462574e-01 -3.59949544e-02  4.87668673e-03
 -1.95534267e-02  6.98823668e-03  6.00916408e-02  3.87478177e-03
 -3.10355481e-02 -5.25711104e-02 -3.26669216e-02  9.85238105e-02
 -3.00623826e-03 -3.26466039e-02 -6.31697997e-02 -5.13952114e-02
 -2.85839755e-02  3.34409326e-02 -3.61512676e-02 -3.94230150e-02
  3.74042317e-02 -1.91056412e-02 -2.82987729e-02  7.58640468e-02
  1.93014033e-02  5.86352237e-02  1.59986503e-02 -3.46334539e-02
 -1.82319079e-02  2.63864137e-02 -2.50344258e-02  8.22484568e-02
  5.57064004e-02  2.98394840e-02  4.50517684e-02 -8.00408497e-02
  2.99197044e-02  4.09384305e-03 -3.07366531e-03 -9.81931686e-02
  1.15666923e-03  2.38471515e-02 -3.34737822e-02 -4.71951067e-03
 -2.60573532e-03 -5.55770062e-02  4.73769158e-02 -1.09847318e-02
 -4.83334586e-02 -6.95650205e-02 -2.90008616e-02  7.73705961e-03
 -7.19699822e-03  4.80845682e-02 -2.73862332e-02 -8.21335148e-03
  2.77321786e-03  4.04964574e-02  1.29427891e-02 -8.81543476e-03
  2.29186956e-02  4.26064879e-02  4.82288338e-02  4.04855683e-02
 -3.31068262e-02  3.18391435e-02  4.44467552e-03  6.06483482e-02
 -4.61431630e-02  1.61911491e-02  6.89939484e-02  6.86985776e-02
 -8.50053281e-02  2.48134416e-02 -6.06138296e-02  2.12708302e-02
  6.21204004e-02 -2.06781905e-02 -6.24415874e-02  3.90205416e-03
  6.44059703e-02  1.52489042e-03  9.64291096e-02 -1.03317082e-01
  3.10195275e-02  9.34977364e-03 -1.13506978e-02  9.24111307e-02
 -4.14303644e-03  7.97301307e-02 -2.50833929e-02  1.27575159e-01
 -3.62947732e-02  3.40570509e-02  3.24779153e-02 -3.62792425e-02
  6.46233037e-02  1.28418384e-02 -2.07718387e-02 -2.76353788e-02
 -3.02454084e-02 -1.60370693e-02  5.85812330e-02  7.03812769e-33
 -2.60652625e-03  6.70672581e-03 -1.67406052e-02  9.55039561e-02
  2.24706270e-02  1.09057771e-02  6.57785311e-03  8.31027166e-04
 -1.47658095e-01 -8.80911108e-03 -3.92122418e-02 -2.71981433e-02
  9.48937163e-02 -5.87279238e-02 -6.05230220e-02 -1.33043140e-01
  4.34689596e-02  1.73293464e-02  1.70670658e-01 -6.03296086e-02
 -3.52845192e-02 -4.68721474e-03  3.38838692e-03 -5.24683530e-03
  5.29560074e-02 -4.11975011e-02 -8.57203081e-02  1.52879301e-02
 -7.96292573e-02 -2.11225022e-02  6.03242293e-02 -2.03929804e-02
  1.60452127e-02 -4.17944556e-03  7.90217221e-02 -2.14539049e-03
  8.88214931e-02 -1.64055396e-02 -5.07461466e-02 -8.92935693e-02
 -6.71014888e-03  1.99261471e-03 -1.58224069e-02  3.28550413e-02
 -1.12024270e-01 -3.13989185e-02 -3.05821951e-02  6.09877473e-03
  4.30216752e-02  6.11559562e-02 -6.92304075e-02  3.55855823e-02
 -1.02491281e-03 -6.03743009e-02  1.54274656e-02 -6.29939586e-02
 -2.30282415e-02 -2.80222222e-02 -2.77028307e-02 -3.74386311e-02
  4.89691384e-02  3.49244922e-02 -5.99117652e-02 -5.40680392e-03
  2.12856177e-02  6.42989278e-02 -1.05132066e-01 -3.23606050e-03
 -2.16999315e-02 -2.05153432e-02 -7.93342665e-02  3.77685577e-02
 -1.07576638e-01  2.77336203e-02 -4.94748428e-02 -5.58007956e-02
 -9.98385623e-03  8.80768057e-03 -1.86115801e-02  3.34604527e-03
  2.59901863e-02 -6.46812608e-03 -6.06445596e-02  2.18167324e-02
  2.36496399e-03  7.76692480e-02  6.02679502e-04 -4.69702017e-03
  1.13445641e-02  2.11132038e-03 -1.39502268e-02 -1.67120190e-03
  6.10362925e-02  2.35222969e-02  3.85556482e-02 -6.73319932e-33
 -1.05049266e-02 -4.48701642e-02 -2.50605736e-02 -2.30079591e-02
  4.02392820e-02  4.69878800e-02  4.27098647e-02 -6.41004220e-02
 -3.99977081e-02 -2.60199327e-02 -4.87408377e-02  3.74564454e-02
 -3.08354255e-02  4.27792110e-02  7.08378851e-02 -1.26861498e-01
 -5.46968728e-02  1.94565989e-02  2.71784719e-02 -4.53260392e-02
 -2.94550508e-02  5.58901504e-02 -3.65439616e-02  1.07984751e-01
 -8.02739933e-02  2.95024961e-02 -2.29747668e-02  4.92053367e-02
 -3.55452858e-02 -4.77552712e-02  1.96349137e-02 -4.36865166e-02
 -3.03024277e-02  1.03226222e-01 -1.84784811e-02 -1.08622722e-01
  2.91918218e-02  4.88677584e-02 -2.31572594e-02  7.81709030e-02
  6.13492653e-02 -3.43588628e-02  1.13878837e-02  4.73710039e-04
  1.21143619e-02 -3.19896080e-02  9.65805948e-02  3.32565047e-02
  1.26291411e-02  3.38953324e-02  1.92386117e-02 -6.56489059e-02
  3.85400690e-02  3.56604382e-02  1.99285802e-02  4.50447686e-02
  6.83055669e-02 -3.12723815e-02  9.92226973e-02 -1.01938114e-01
  4.08067182e-02  5.49173262e-03  5.37957884e-02  9.75447148e-02
  9.11935270e-02 -1.55024901e-02 -1.06713725e-02  3.12570184e-02
  7.03123063e-02  5.17526083e-02 -3.68555896e-02  2.55976748e-02
  1.60511266e-02 -7.83954635e-02  7.85640478e-02  1.01553863e-02
 -2.52250321e-02 -5.36460802e-02  3.59259285e-02  1.68215726e-02
  7.18364269e-02  1.36077814e-02  5.84633909e-02 -5.13448054e-03
  3.44812982e-02 -7.53189577e-03  1.56559590e-02 -1.70389209e-02
 -1.43845296e-02  3.98063799e-03 -2.93774512e-02 -3.31670679e-02
 -3.61221321e-02 -4.94095162e-02 -3.26910578e-02 -6.24120133e-08
 -7.05491826e-02  4.52637337e-02 -5.22795320e-02  1.44551974e-02
  1.94333252e-02 -2.69242208e-02  5.50249815e-02 -1.25716642e-01
 -7.24465176e-02  2.35608523e-03 -8.95570293e-02  2.67256238e-02
 -2.46277917e-02 -8.03024918e-02 -1.96391139e-02 -9.44763049e-02
 -2.20166910e-02 -3.82183865e-02 -2.97979428e-03 -1.58948880e-02
 -1.48113118e-02 -3.44632640e-02  7.54819578e-03  8.37824121e-03
 -3.87353124e-03 -1.61872637e-02  9.52366218e-02  9.34276134e-02
  3.87038700e-02  5.24033792e-02 -1.17568509e-03 -2.99656577e-02
  1.53302969e-02  1.14521096e-02 -6.74413443e-02  3.93113904e-02
 -6.01050593e-02  6.20224364e-02  1.02092519e-01  1.07853161e-02
  1.09168785e-02  6.03814833e-02  1.35094160e-02  6.00280100e-03
 -1.28081247e-01  3.35345529e-02 -4.85801771e-02  2.83221714e-02
  7.39581808e-02 -2.48891506e-02  1.70935789e-04 -2.59300005e-02
  1.44958673e-02  9.65998694e-02 -4.51277904e-02  1.29277976e-02
  5.08434288e-02 -1.90441739e-02 -2.01105941e-02 -4.29200865e-02
  1.13898404e-01 -4.97629717e-02 -4.60148230e-02 -4.17950563e-02]"
"Keypair,
  LAMPORTS_PER_SOL,
  StakeProgram,
  Authorized,
  sendAndConfirmTransaction,
  Lockup,
  PublicKey,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const wallet = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    wallet.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // Create a keypair for our stake account
  const stakeAccount = Keypair.generate();

  // Calculate how much we want to stake
  const minimumRent = await connection.getMinimumBalanceForRentExemption(
    StakeProgram.space
  );
  const amountUserWantsToStake = LAMPORTS_PER_SOL / 2; // This is can be user input. For now, we'll hardcode to 0.5 SOL
  const amountToStake = minimumRent + amountUserWantsToStake;

  // Setup a transaction to create our stake account
  // Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
  const createStakeAccountTx = StakeProgram.createAccount({
    authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set to our wallet.
    fromPubkey: wallet.publicKey,
    lamports: amountToStake,
    lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
    stakePubkey: stakeAccount.publicKey,
  });

  const createStakeAccountTxId = await sendAndConfirmTransaction(
    connection,
    createStakeAccountTx,
    [
      wallet,
      stakeAccount, // Since we're creating a new stake account, we have that account sign as well
    ]
  );
  console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

  // Check our newly created stake account balance. This should be 0.5 SOL.
  let stakeBalance = await connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

  // Verify the status of our stake account. This will start as inactive and will take some time to activate.
  let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // To delegate our stake, we first have to select a validator. Here we get all validators and select the first active one.
  const validators = await connection.getVoteAccounts();
  const selectedValidator = validators.current[0];
  const selectedValidatorPubkey = new PublicKey(selectedValidator.votePubkey);

  // With a validator selected, we can now setup a transaction that delegates our stake to their vote account.
  const delegateTx = StakeProgram.delegate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
    votePubkey: selectedValidatorPubkey,
  });

  const delegateTxId = await sendAndConfirmTransaction(connection, delegateTx, [
    wallet,
  ]);
  console.log(
    `Stake account delegated to ${selectedValidatorPubkey}. Tx Id: ${delegateTxId}`
  );

  // Check in on our stake account. It should now be activating.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // At anytime we can choose to deactivate our stake. Our stake account must be inactive before we can withdraw funds.
  const deactivateTx = StakeProgram.deactivate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
  });
  const deactivateTxId = await sendAndConfirmTransaction(
 ","[-2.53391713e-02 -5.13777174e-02 -9.26280096e-02  4.01929617e-02
 -1.19120553e-02 -8.25413689e-02  7.25450516e-02  5.87681755e-02
  3.58725116e-02  5.93450293e-02  6.64747208e-02 -6.65582567e-02
 -2.01157928e-02 -5.63521348e-02 -1.26898345e-02  5.50034791e-02
 -1.13715820e-01 -9.21547785e-02 -4.36260067e-02  7.55349267e-03
  4.87694070e-02 -1.70755088e-01  2.26273667e-02 -2.85440963e-02
  6.08034059e-02 -6.88928217e-02 -7.12853670e-03  3.11516947e-03
 -3.15234438e-02 -1.29322018e-02  1.01672985e-01  6.39522895e-02
 -2.69755144e-02 -2.82254107e-02 -1.23250904e-02  8.92728120e-02
 -2.16504689e-02 -2.41999570e-02 -8.27166736e-02 -7.49870297e-03
 -6.24546781e-02  3.22573036e-02 -7.42087364e-02 -2.88467942e-04
 -1.11646438e-02 -2.20874473e-02 -3.74136977e-02  1.06138080e-01
 -1.72370225e-02  4.87202033e-02 -1.71021875e-02  2.51636244e-02
  8.29820149e-03  7.04352036e-02 -7.60028139e-02  3.03855594e-02
 -8.14275816e-03  3.68082486e-02  4.95220907e-02 -9.65062082e-02
  8.32025707e-02  1.05274608e-02  1.95714012e-02 -7.93593749e-02
  2.00401037e-03  1.47694291e-03  1.52399000e-02 -5.15769124e-02
  6.58691535e-03 -5.36201298e-02  4.90471050e-02 -1.62398294e-02
 -1.71201546e-02 -3.77685204e-02 -5.90194650e-02  2.70605478e-02
  1.00332042e-02  1.25143416e-02 -1.97840333e-02  5.55129834e-02
  2.91809551e-02 -4.10502125e-03 -5.66230044e-02  7.62903243e-02
 -8.45798291e-03  5.69726080e-02  2.88686864e-02  6.47387728e-02
 -2.41434500e-02 -4.88087498e-02 -4.61038984e-02  1.21856267e-02
 -8.00785050e-02  6.27072528e-03  3.42860743e-02  6.38081431e-02
 -2.00055707e-02 -5.44264168e-02 -6.81249052e-02  6.78804442e-02
  8.22072774e-02 -3.52246799e-02 -6.00955747e-02 -4.18878570e-02
 -5.40516013e-03 -1.60780530e-02  7.51559883e-02 -3.67087685e-02
  3.79839465e-02  5.34825325e-02 -2.54924055e-02  6.23826832e-02
 -2.57904213e-02  4.24255393e-02 -8.65304172e-02  1.37237445e-01
  3.99884358e-02 -4.82873693e-02  5.96207827e-02  5.03384024e-02
  5.25125526e-02  9.51297060e-02  1.59286577e-02 -1.83674749e-02
  4.52441024e-03 -4.68003424e-03 -1.75294131e-02  7.26094632e-33
 -1.00634545e-02  2.30446402e-02 -1.66806486e-02 -2.51529086e-02
 -1.52311884e-02 -1.64370928e-02  8.31851214e-02  2.93032657e-02
 -9.20040682e-02 -2.08075326e-02 -5.80074266e-02 -5.25009334e-02
  1.09722793e-01 -1.03012919e-01 -3.18588801e-02 -9.39124897e-02
  4.53036949e-02  3.80039103e-02  6.67927563e-02 -2.05652099e-02
 -2.01691762e-02 -9.18778554e-02 -3.82040516e-02 -2.26632110e-03
  9.97712389e-02 -4.85878959e-02 -3.58209126e-02  5.09086922e-02
  3.77118066e-02  2.08060932e-03  1.09608240e-01 -3.36561981e-03
 -4.46192473e-02  8.74564797e-03  3.45829166e-02  7.74172554e-03
  3.46732922e-02 -3.41759324e-02 -8.25462267e-02 -5.67359105e-02
 -4.27680425e-02  1.23715540e-02 -6.43935893e-03 -3.68307135e-03
 -4.66455929e-02  4.56602685e-03 -1.41730048e-02  1.72484890e-02
  4.64063101e-02  2.72939187e-02 -1.38720214e-01 -9.34111653e-04
 -1.09269349e-02 -2.30911020e-02  8.22745636e-02 -6.17971504e-03
  6.08624145e-03  2.54374519e-02  2.15623993e-02 -3.56092565e-02
 -2.72037871e-02 -5.61127365e-02 -1.80343892e-02 -2.05537435e-02
 -1.58711746e-02  8.40075593e-03 -5.76407388e-02  5.16502969e-02
 -1.40747819e-02 -1.14487344e-02 -9.57273245e-02  5.84864430e-02
 -3.21334647e-03  7.11737350e-02 -5.30154556e-02 -1.81723982e-02
  4.74871956e-02  1.51807470e-02 -5.78113683e-02 -2.75872108e-02
  2.49606688e-02  1.34818256e-02  2.28537675e-02  4.29601371e-02
  5.02385665e-03  4.39634174e-02  2.98485020e-03  5.76054975e-02
 -5.27806915e-02  1.00807864e-02  7.49270665e-03 -7.21656671e-03
  2.53524575e-02 -9.74358767e-02 -3.11376527e-02 -6.26280615e-33
 -8.49471316e-02 -2.26391722e-02 -4.34139110e-02 -2.03488790e-03
  1.09491728e-01  6.97942451e-02  6.66728523e-03 -3.11311595e-02
 -5.11777885e-02 -2.95047462e-03 -6.64042830e-02  6.10457957e-02
  3.59694213e-02 -1.56957712e-02  5.43393567e-03 -2.12891605e-02
 -4.43473570e-02 -2.71403827e-02  1.13969848e-01  1.91002246e-02
 -2.49340963e-02  2.78667808e-02 -2.44562384e-02  3.22024822e-02
 -1.05414823e-01  2.56664194e-02  2.18010624e-03  5.71474880e-02
 -9.56005082e-02 -1.96600165e-02  4.84652929e-02 -2.70335153e-02
 -1.03873186e-01  6.66720793e-02 -4.81337756e-02 -1.18622556e-01
  1.17793726e-02  3.11765801e-02 -4.14091162e-02  6.10836595e-02
  4.05419655e-02 -3.64126638e-02  4.15458046e-02 -4.38405611e-02
 -4.78645898e-02 -5.41139096e-02  5.23793362e-02 -8.33150931e-03
 -1.78252440e-03 -1.76200864e-03  6.65796408e-03 -4.60586548e-02
 -2.04530749e-02  5.82430176e-02  4.31699082e-02  8.75757262e-02
  6.91138953e-02  3.20590809e-02  1.70094278e-02 -1.17351487e-02
  4.96717654e-02 -8.24377909e-02  1.06965967e-01  9.46097523e-02
  7.58600459e-02 -4.12478372e-02  2.22713370e-02  7.45388791e-02
  7.62919057e-03  6.59346059e-02 -5.40838279e-02  4.15203050e-02
  9.25608724e-02  4.91866469e-02  1.01625435e-01  3.44380247e-03
 -2.61692586e-03 -1.11349188e-02  1.09732114e-01 -3.16304937e-02
  3.85138951e-02  1.99062079e-02  8.90053902e-03 -2.99412403e-02
  5.19274697e-02 -1.09989690e-02  3.10975965e-02  8.63942690e-03
 -7.83886835e-02 -1.16675245e-02 -8.75842646e-02 -2.17592176e-02
 -4.37249476e-03 -3.70245092e-02  2.56883278e-02 -5.75002979e-08
  3.19821201e-02  8.64152461e-02 -7.16309771e-02  1.16689177e-02
 -1.40913846e-02  2.44961437e-02  2.51304116e-02 -3.28585207e-02
 -1.90020725e-02 -2.53209136e-02 -3.30994353e-02  2.94664092e-02
  2.49249190e-02  8.16913228e-03 -3.96929542e-03 -8.26319456e-02
  4.04832978e-03 -3.50562036e-02 -3.50378864e-02 -5.18628024e-02
  5.54372035e-02 -6.40972890e-03  9.01686901e-04 -1.13993287e-02
  6.36721179e-02  4.53766249e-02  5.38402610e-02  8.42993855e-02
  1.36810234e-02 -5.78709552e-03 -1.02807686e-01  3.01999087e-03
  3.15769576e-02 -6.44318834e-02 -9.02987272e-02  6.12469427e-02
 -1.09841414e-01  1.68739967e-02  6.54883310e-02  1.01670079e-01
  5.52566089e-02  7.04606920e-02 -3.53189893e-02 -2.04121638e-02
 -4.50226255e-02  5.55782355e-02  6.47979090e-03  3.28285396e-02
  2.77270731e-02  1.79411862e-02 -1.90529469e-02 -6.39196485e-02
  4.27451767e-02  4.73761186e-02  5.54643478e-03  1.73145570e-02
 -2.24352628e-02 -1.52254626e-02  1.95025299e-02 -2.62373462e-02
  2.14509107e-02 -8.96143634e-03 -1.19819641e-01  1.26104208e-03]"
"  connection,
    deactivateTx,
    [wallet]
  );
  console.log(`Stake account deactivated. Tx Id: ${deactivateTxId}`);

  // Check in on our stake account. It should now be inactive.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // Once deactivated, we can withdraw our SOL back to our main wallet
  const withdrawTx = StakeProgram.withdraw({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
    toPubkey: wallet.publicKey,
    lamports: stakeBalance, // Withdraw the full balance at the time of the transaction
  });

  const withdrawTxId = await sendAndConfirmTransaction(connection, withdrawTx, [
    wallet,
  ]);
  console.log(`Stake account withdrawn. Tx Id: ${withdrawTxId}`);

  // Confirm that our stake account balance is now 0
  stakeBalance = await connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118// Once deactivated, we can withdraw our SOL back to our main wallet
const withdrawTx = StakeProgram.withdraw({
  stakePubkey: stakeAccount.publicKey,
  authorizedPubkey: wallet.publicKey,
  toPubkey: wallet.publicKey,
  lamports: stakeBalance, // Withdraw the full balance at the time of the transaction
});

const withdrawTxId = await sendAndConfirmTransaction(connection, withdrawTx, [
  wallet,
]);
console.log(`Stake account withdrawn. Tx Id: ${withdrawTxId}`);

// Confirm that our stake account balance is now 0
stakeBalance = await connection.getBalance(stakeAccount.publicKey);
console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);
12345678910111213141516 # Non Fungible Tokens (NFTs)# How to create an NFTTo create an NFT you have to:Upload the image to IPFS like ArweaveUpload the json metadata to IPFS like ArweaveCall metaplex to create an account for the NFT# Upload to ArweaveTSPythonPress </> button to view full sourceimport fs from ""fs"";
import Arweave from ""arweave"";

(async () => {
  const arweave = Arweave.init({
    host: ""arweave.net"",
    port: 443,
    protocol: ""https"",
    timeout: 20000,
    logging: false,
  });

  // Upload image to Arweave
  const data = fs.readFileSync(""./code/nfts/arweave-upload/lowres-dog.png"");

  const transaction = await arweave.createTransaction({
    data: data,
  });

  transaction.addTag(""Content-Type"", ""image/png"");

  const wallet = JSON.parse(fs.readFileSync(""wallet.json"", ""utf-8""))
  
  await arweave.transactions.sign(transaction, wallet);

  const response = await arweave.transactions.post(transaction);
  console.log(response);

  const id = transaction.id;
  const imageUrl = id ? `https://arweave.net/${id}` : undefined;
  console.log(""imageUrl"", imageUrl);

  // Upload metadata to Arweave

  const metadata = {
    name: ""Custom NFT #1"",
    symbol: ""CNFT"",
    description: ""A description about my custom NFT #1"",
    seller_fee_basis_points: 500,
    external_url: ""https://www.customnft.com/"",
    attributes: [
      {
        trait_type: ""NFT type"",
        value: ""Custom"",
      },
    ],
    collection: {
      name: ""Test Collection"",
      family: ""Custom NFTs"",
    },
    properties: {
      files: [
        {
          uri: imageUrl,
          type: ""image/png"",
 ","[ 3.47847678e-02  3.73515375e-02 -5.21891117e-02  1.01520300e-01
 -4.09157667e-03 -4.43988219e-02  7.82966092e-02 -7.90797547e-03
  8.44669640e-02  3.10490113e-02  3.62466648e-02 -1.70240328e-02
 -3.35353762e-02  1.50049943e-02  2.59257294e-02  3.08626853e-02
 -8.34344402e-02 -3.31770740e-02  5.63003719e-02  3.71154174e-02
 -3.71869132e-02 -1.17817625e-01 -3.10040526e-02  4.80436459e-02
  5.13006374e-02 -4.79268059e-02 -4.26948816e-02 -1.83060188e-02
 -4.58098538e-02 -1.74137822e-03  2.26081274e-02  3.26745138e-02
 -7.16461539e-02 -8.88474807e-02 -1.78704374e-02  6.07625023e-02
 -4.72959131e-02 -2.03015469e-02 -6.53026029e-02 -5.50205335e-02
  1.43313948e-02  2.96382215e-02 -6.27594590e-02 -6.18042946e-02
  7.16839656e-02 -1.94592625e-02 -9.10857469e-02  9.34090093e-03
  1.20845418e-02  5.97517602e-02  2.05955524e-02 -4.92079221e-02
 -8.02433211e-03  6.59392551e-02  6.48368383e-03  9.29972976e-02
  1.07073508e-01  7.08342791e-02  4.19048443e-02 -7.08883107e-02
  8.69142041e-02 -4.90834005e-03 -5.56748407e-03 -8.99888277e-02
 -3.03890817e-02  3.80695611e-02  1.60515904e-02 -6.74292296e-02
  2.02400777e-02 -3.36020403e-02  4.11053747e-02  5.92972850e-03
 -6.28658012e-02 -1.09122038e-01 -2.27966085e-02  1.83559186e-03
  6.87111169e-02 -1.67922135e-02 -1.89446204e-04 -4.19099350e-03
  1.23664541e-02  2.34116130e-02  2.31164508e-02  2.55775976e-05
 -1.04329782e-02  3.53648886e-02 -7.29687163e-04  4.12191376e-02
 -6.88010966e-03 -4.51780073e-02 -2.13403348e-03  8.53158757e-02
 -1.99413430e-02  1.98319517e-02  8.13909248e-02  2.16666926e-02
 -6.84088469e-02  6.00847639e-02 -1.05564713e-01  5.05019166e-02
  5.79677597e-02  3.38935805e-03 -9.73247141e-02 -3.25750597e-02
  2.58123707e-02  2.88349157e-03  1.00330651e-01 -7.07251653e-02
 -8.98183137e-03 -3.65179330e-02 -5.40127046e-02  8.84664580e-02
  2.59445272e-02  8.14377069e-02 -3.19982432e-02  1.60509989e-01
  7.97145243e-04  2.87090018e-02  5.66466991e-03 -1.16565377e-02
  7.07431138e-02  4.35784683e-02  3.41782868e-02 -1.47916693e-02
 -1.79141294e-02 -9.79742780e-03  6.93538487e-02  5.99169821e-33
 -1.17105134e-02 -4.02552672e-02 -5.17016314e-02  6.58645406e-02
  4.07905094e-02 -3.25281732e-02  3.86576951e-02 -1.19056795e-02
 -7.98124969e-02 -2.32523363e-02 -3.44315805e-02 -3.96427438e-02
  2.01475061e-02 -5.56410253e-02 -1.79779846e-02 -1.32537097e-01
  1.20664522e-01 -2.68220343e-03  1.62213147e-01 -6.89087436e-02
  6.76793512e-03 -3.35226534e-03 -3.04541439e-02 -6.37636753e-04
  6.06359392e-02 -7.81089813e-03 -5.97855747e-02  2.34962441e-02
 -1.02825902e-01 -5.60450880e-03  7.90912211e-02 -2.63740961e-02
 -4.46053147e-02 -8.33890121e-03  3.31180952e-02 -2.24227048e-02
  5.08193076e-02  3.01365019e-03 -5.25703616e-02 -7.30023980e-02
  1.23313172e-02  3.76324132e-02  1.47719905e-02  1.03127826e-02
 -7.86092803e-02 -3.76747772e-02  1.46150924e-02 -3.38418297e-02
  3.76999415e-02  1.56670511e-02 -2.39899419e-02  3.31998318e-02
  2.57353000e-02 -7.86684752e-02 -4.54129931e-03 -6.89166412e-02
 -2.29826849e-02 -1.28772575e-02 -6.50922582e-02 -2.39862334e-02
  8.97036418e-02 -2.24473719e-02 -7.85079300e-02 -3.28344591e-02
 -6.77265169e-04  8.88292268e-02 -1.22385681e-01 -6.92850491e-03
 -1.22106560e-01 -2.24647056e-02 -8.42603594e-02  5.86034991e-02
 -5.34027666e-02 -9.43012908e-03 -6.02549613e-02 -4.32921648e-02
 -1.19134793e-02 -2.60281060e-02 -2.02887990e-02  2.93614734e-02
  6.16830625e-02 -2.76875794e-02 -9.15932506e-02  1.65005587e-02
  1.07837911e-03  6.47401512e-02  2.00916212e-02 -7.65812173e-02
  4.90150321e-03 -1.57025754e-02 -2.92010177e-02  2.54500080e-02
  5.33155538e-02  1.49685610e-03  4.20486405e-02 -6.29639002e-33
 -1.13954404e-02 -1.75358802e-02 -2.07623597e-02 -4.82978150e-02
  3.84068750e-02  5.66852391e-02  5.12939803e-02 -2.70264427e-04
 -6.63627535e-02 -3.14732268e-02 -3.00509781e-02  3.63126099e-02
  6.30986877e-03  4.99658138e-02  2.40794476e-02 -5.40619716e-02
 -7.72117674e-02  3.14147025e-02  5.78061212e-03  2.67923373e-04
 -2.87650377e-02  5.96942231e-02 -5.03887571e-02  5.26115112e-02
 -8.87786821e-02  3.91507372e-02 -2.91179065e-02  3.45961079e-02
 -3.50431800e-02 -4.68265824e-02  6.12794012e-02 -4.96449582e-02
 -2.13837698e-02  1.12229981e-01 -2.23168097e-02 -2.89246198e-02
  2.05269223e-03  3.66767570e-02 -9.00690854e-02  2.23248433e-02
  5.68162948e-02  3.88172758e-03  7.01423129e-03  6.58894842e-03
  2.82064304e-02  1.10232271e-02  6.80820271e-02  2.31823139e-02
  9.70572606e-03  7.06069693e-02  1.31200068e-02 -5.53728789e-02
  7.68851191e-02  5.39664663e-02  5.11158258e-02  3.55384760e-02
  4.71192300e-02 -6.38586804e-02  1.76020507e-02 -9.15570632e-02
  6.37484565e-02 -5.71073266e-03  2.45322939e-02  1.05507940e-01
  7.77711943e-02 -4.25236635e-02 -3.86534408e-02  7.69481361e-02
  5.48951142e-02  2.19683889e-02 -1.68844350e-02  8.87028426e-02
 -2.21714582e-02 -3.41516100e-02  5.32058068e-02  4.90899682e-02
 -2.68090181e-02 -3.37093882e-02  4.35344130e-02  8.39024689e-03
  7.98799843e-02 -1.85139049e-02  3.23165357e-02 -4.18132171e-02
  1.75199211e-02  1.35055678e-02 -5.88052813e-03 -7.16169318e-03
 -3.46832839e-03 -3.23231407e-02 -2.28392817e-02 -6.71253353e-02
  1.59653332e-02 -1.53690474e-02 -2.52973810e-02 -5.22516785e-08
 -4.69257385e-02  1.92879401e-02 -3.46711725e-02 -8.07840843e-03
  4.09734920e-02 -1.39070489e-02  6.29463941e-02 -1.03298508e-01
 -5.88159002e-02  6.60158740e-03 -1.06324695e-01  2.12420542e-02
 -1.52625209e-02 -8.26812387e-02 -1.99976447e-03 -8.08922425e-02
 -2.67110448e-02 -2.19206605e-02  3.62186544e-02  2.58141514e-02
 -2.59003825e-02 -4.36442643e-02 -1.51851708e-02  3.77248302e-02
  9.04646236e-03  7.96562061e-03  1.01303473e-01  5.31467870e-02
  5.71051612e-02  5.97084910e-02 -3.37715372e-02 -3.93588794e-03
  4.30163704e-02  2.84668580e-02 -7.77762309e-02  4.36859392e-02
 -4.26521264e-02  9.21480730e-02  3.08466032e-02  5.31743951e-02
  3.44726369e-02  4.44221273e-02 -2.45322678e-02 -5.78066647e-05
 -8.96923617e-02  2.66882963e-02 -9.68573894e-03  5.15895635e-02
  6.32424429e-02 -4.02139984e-02 -1.01819281e-02 -6.83139712e-02
 -8.59463494e-03  9.10711437e-02 -6.41132593e-02  8.19627382e-03
  1.04752462e-02  1.73144005e-02 -5.60821220e-02 -7.35759288e-02
  1.15480378e-01 -5.46226799e-02 -8.55755359e-02 -6.64222986e-02]"
"      },
      ],
      category: ""image"",
      maxSupply: 0,
      creators: [
        {
          address: ""CBBUMHRmbVUck99mTCip5sHP16kzGj3QTYB8K3XxwmQx"",
          share: 100,
        },
      ],
    },
    image: imageUrl,
  };

  const metadataRequest = JSON.stringify(metadata);

  const metadataTransaction = await arweave.createTransaction({
    data: metadataRequest,
  });

  metadataTransaction.addTag(""Content-Type"", ""application/json"");

  await arweave.transactions.sign(metadataTransaction, wallet);

  console.log(""metadata txid"", metadataTransaction.id);

  console.log(await arweave.transactions.post(metadataTransaction));
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283// 1. Upload image to Arweave
const data = fs.readFileSync(""./code/nfts/arweave-upload/lowres-dog.png"");

const transaction = await arweave.createTransaction({
  data: data,
});

transaction.addTag(""Content-Type"", ""image/png"");

const wallet = JSON.parse(fs.readFileSync(""wallet.json"", ""utf-8""))
await arweave.transactions.sign(transaction, wallet);

const response = await arweave.transactions.post(transaction);
console.log(response);

const id = transaction.id;
const imageUrl = id ? `https://arweave.net/${id}` : undefined;

// 2. Upload metadata to Arweave

const metadataRequest = JSON.stringify(metadata);

const metadataTransaction = await arweave.createTransaction({
  data: metadataRequest,
});

metadataTransaction.addTag(""Content-Type"", ""application/json"");

await arweave.transactions.sign(metadataTransaction, wallet);

await arweave.transactions.post(metadataTransaction);
12345678910111213141516171819202122232425262728293031from arweave.arweave_lib import Wallet, Transaction, API_URL
import json

# Load your arweave wallet
your_ar_wallet = Wallet('wallet.json')

with open('./code/nfts/arweave-upload/lowres-dog.png', 'rb') as f:
    img_in_bytes = f.read()

# Upload image to Arweave
transaction = Transaction(your_ar_wallet, data=img_in_bytes)
transaction.add_tag('Content-Type', 'image/png')
transaction.sign()
transaction.send()

image_url = API_URL+""/""+transaction.id

# Define metadata
metadata = {
    ""name"": ""Custom NFT #1"",
    ""symbol"": ""CNFT"",
    ""description"": ""A description about my custom NFT #1"",
    ""seller_fee_basis_points"": 500,
    ""external_url"": ""https://www.customnft.com/"",
    ""attributes"": [
        {
            ""trait_type"": ""NFT type"",
            ""value"": ""Custom""
        }
    ],
    ""collection"": {
        ""name"": ""Test Collection"",
        ""family"": ""Custom NFTs"",
    },
    ""properties"": {
        ""files"": [
            {
                ""uri"": image_url,
                ""type"": ""image/png"",
            },
        ],
        ""category"": ""image"",
        ""maxSupply"": 0,
        ""creators"": [
            {
                ""address"": ""CBBUMHRmbVUck99mTCip5sHP16kzGj3QTYB8K3XxwmQx"",
                ""share"": 100,
            },
        ],
    },
    ""image"": image_url,
}

# Upload metadata to Arweave
meta_transaction","[ 3.76723818e-02  1.30897434e-03 -5.37765138e-02  3.87565792e-02
 -1.31990444e-02 -4.55079339e-02 -7.73274945e-03  5.09534590e-02
  7.99796544e-03  3.16908844e-02  2.25799363e-02 -3.95565294e-02
 -2.58405525e-02  4.63166796e-02  1.56867448e-02  5.00187539e-02
 -1.12492934e-01 -7.89906159e-02 -5.08002676e-02  8.20097793e-03
  1.15976399e-02 -9.71495062e-02  8.71141776e-02 -9.23897326e-02
  4.37126085e-02  1.34430295e-02 -5.65061532e-02 -7.33847022e-02
  8.86822212e-03 -3.38647813e-02  1.11130230e-01 -7.20179603e-02
 -2.74766311e-02 -2.61193104e-02  5.89605905e-02  1.20987386e-01
 -6.93666050e-03 -3.93702090e-02  1.31079694e-02 -4.47662286e-02
  3.60840522e-02  4.65540588e-02 -2.06180736e-02 -3.70129384e-02
 -1.60816200e-02 -3.52987729e-04 -1.43441865e-02 -2.60569551e-03
  4.38991301e-02  4.39954326e-02 -8.22694972e-02 -6.95974939e-03
 -4.16794866e-02  5.91248944e-02  3.88136171e-02  3.71018723e-02
 -8.68003368e-02 -2.29747351e-02  2.90962141e-02  5.48818940e-03
  7.80433640e-02 -3.59820575e-02  1.64437573e-02 -2.33815471e-03
  2.19220892e-02  6.50830707e-03  1.99387763e-02 -2.34033857e-02
 -8.72597657e-03 -1.65763069e-02  3.16767432e-02  3.58911604e-02
 -7.75700659e-02 -2.24105194e-02 -6.83981627e-02 -4.18440886e-02
  2.72347089e-02  1.06465016e-02 -1.96419433e-02 -5.54227568e-02
  7.76762813e-02 -1.45602534e-02  3.81987914e-02  3.86604480e-02
  3.19880098e-02  1.00660902e-02 -8.34964961e-02 -1.39801223e-02
 -7.82292262e-02 -6.77335709e-02 -5.98655343e-02  2.35060807e-02
 -3.98799591e-02  1.58498529e-02  1.98418833e-02  3.03092394e-02
 -3.65755819e-02  1.19541213e-02 -8.63974914e-02  8.23481306e-02
  5.23659624e-02  4.66861762e-03 -2.23928895e-02  3.68292183e-02
  1.12404972e-01 -3.49382982e-02  5.36202230e-02  3.65056358e-02
 -6.93647414e-02  9.88983512e-02 -4.88422550e-02  1.13651581e-01
 -9.30679366e-02 -1.33118713e-02 -3.56253870e-02  5.75368740e-02
 -6.27707243e-02 -3.45422141e-02 -6.21162727e-03 -1.76815707e-02
  1.01842493e-01 -1.51733542e-02 -1.02399021e-01 -1.22236228e-02
 -2.25348538e-03 -1.02402873e-01  6.65719574e-03  8.93559378e-33
  7.59961233e-02 -2.68688109e-02  4.27798927e-02  3.80764976e-02
  4.21674363e-02 -4.05766144e-02  3.09687145e-02 -3.03930361e-02
 -7.97330067e-02 -4.10988517e-02 -1.84940416e-02 -1.69489887e-02
 -1.28724426e-02  3.17947567e-02 -4.08192836e-02 -6.57739267e-02
 -9.49831679e-03  3.16982642e-02  1.00255847e-01  4.03567143e-02
 -9.05629173e-02 -2.15023961e-02 -2.40012612e-02  1.14584677e-02
 -7.97506049e-02 -3.46929617e-02 -8.03730357e-03  8.82537663e-03
 -1.16438912e-02 -1.92192616e-03  8.15551132e-02  3.09833456e-02
  2.51935273e-02  5.50316013e-02  4.19225544e-02 -7.05828220e-02
 -2.61305217e-02  6.14439026e-02 -9.21496451e-02 -7.86566990e-04
  1.00043304e-01 -3.52461226e-02 -7.79947042e-02 -2.31523775e-02
 -7.77220055e-02 -2.12607495e-02 -2.69594118e-02 -7.39106396e-03
  3.84291522e-02  6.04384765e-02 -1.66544772e-03  6.29164977e-03
 -3.75964269e-02 -6.72489107e-02  1.05368961e-02  1.22413365e-02
 -3.29892635e-02 -5.91045097e-02 -6.08648099e-02 -3.51615027e-02
 -9.61809233e-03  4.98084612e-02  5.31866066e-02  5.87258022e-03
  3.78529192e-04  5.50871575e-03  1.38098840e-02 -2.23755054e-02
 -2.99677756e-02 -1.16466098e-02 -1.05072325e-02  5.37839644e-02
  4.46086610e-03 -2.14382615e-02  4.38900739e-02 -1.37857988e-03
 -3.17405015e-02  7.13380706e-03 -7.42255226e-02  5.20828739e-02
 -1.85678024e-02 -4.78692241e-02 -4.01637070e-02 -9.37057601e-04
 -3.89545932e-02  5.33204041e-02  2.46921405e-02 -8.65612645e-03
  3.27730067e-02  4.04231101e-02 -7.46939750e-03  3.72142568e-02
 -2.83337999e-02 -5.55708855e-02 -7.95433298e-03 -8.77402869e-33
  6.97797462e-02 -2.70735975e-02 -4.72727083e-02 -2.10486781e-02
 -2.95294244e-02  5.86926602e-02  9.98041332e-02  9.91157368e-02
 -1.43268658e-02  8.20876062e-02  3.90042961e-02  4.37855311e-02
 -1.04286723e-01 -3.68181877e-02 -3.89531963e-02 -4.81518209e-02
  7.68856844e-03 -3.23578529e-02  6.17627986e-02 -6.09054528e-02
  5.98751428e-03  9.62725952e-02  1.85148753e-02  1.19181149e-01
 -8.73389468e-02  5.59796356e-02  8.88419710e-03  7.44150532e-03
 -3.96981016e-02 -9.32531133e-02  2.98858080e-02  2.98594311e-02
 -3.26242968e-02  3.82699631e-02  8.27487558e-02 -5.64652458e-02
  4.71181199e-02  7.62652755e-02 -4.76937480e-02  1.32833114e-02
  2.49148253e-02  1.53300865e-02 -3.17502134e-02  4.18171361e-02
  4.32234369e-02 -1.16434298e-01  1.27252247e-02 -2.90837213e-02
  6.87329695e-02  2.18201466e-02  7.73133859e-02 -1.22442894e-01
 -1.27137420e-04 -1.30637232e-02  5.16607426e-02  6.55339211e-02
  5.73003478e-02 -9.61923748e-02  4.13575135e-02  3.25938091e-02
  3.02806385e-02 -5.48226684e-02 -5.86894788e-02 -3.78219262e-02
  5.93786873e-02 -1.32549722e-02 -8.50297660e-02 -4.04961854e-02
 -3.70639302e-02  8.89767408e-02 -6.55911267e-02  1.52462116e-02
  4.13974263e-02 -1.75261255e-02  1.20973878e-01  1.52998616e-03
  5.69826178e-02 -5.49011789e-02  4.75927666e-02 -5.71022071e-02
  3.57610621e-02  3.41351815e-02 -1.39579559e-02 -6.47316035e-03
  1.74689256e-02 -3.37670511e-03 -1.39979087e-02  1.01456895e-01
 -4.83315475e-02 -9.33420844e-03 -1.50925517e-02  3.48853110e-03
  4.07790504e-02 -5.18818907e-02  2.90746354e-02 -5.62263516e-08
 -1.22479022e-01  4.83566485e-02 -7.74804428e-02 -9.84394364e-03
  2.61207693e-03  4.64176834e-02  4.96263839e-02 -9.46739316e-02
  3.93395275e-02 -1.08523920e-01 -2.71925442e-02  3.77172306e-02
 -3.26215550e-02  1.56493764e-02 -2.95115672e-02 -4.74055149e-02
  3.14277448e-02 -2.22169906e-02  2.46160142e-02 -7.05300272e-03
 -4.16064747e-02 -8.08471292e-02 -7.33484339e-04 -8.77564549e-02
  6.87185079e-02 -7.81255029e-03  1.04446098e-01  3.66308019e-02
 -2.10395101e-02  3.76668014e-02 -1.55184334e-02  3.00816838e-02
  4.03962024e-02  4.99598403e-03 -5.51551245e-02 -3.42728123e-02
  8.70370958e-03 -4.62088697e-02 -5.59393782e-03 -5.84619157e-02
  4.77651954e-02  9.78504345e-02 -6.40024757e-03 -3.21872942e-02
 -4.71147709e-03  4.02626917e-02  8.59234575e-03  9.21538398e-02
 -2.11074669e-02  1.97573099e-02 -3.19635272e-02 -3.88313979e-02
  1.43326493e-02  6.37193583e-03 -7.46097788e-02 -6.32766113e-02
  4.35179211e-02 -2.21565291e-02  4.06054147e-02  7.04303384e-02
  1.97496563e-01 -3.51313911e-02 -4.98473160e-02  2.78631896e-02]"
"= Transaction(your_ar_wallet, data=json.dumps(metadata))
meta_transaction.add_tag('Content-Type', 'text/html')
meta_transaction.sign()
meta_transaction.send()

metadata_url = API_URL+""/""+meta_transaction.id

print(metadata_url)
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#  1. Load your arweave wallet
your_ar_wallet = Wallet('wallet.json')

#  2. Upload image to Arweave
with open('./code/nfts/arweave-upload/lowres-dog.png', 'rb') as f:
    img_in_bytes = f.read()

transaction = Transaction(your_ar_wallet, data=img_in_bytes)
transaction.add_tag('Content-Type', 'image/png')
transaction.sign()
transaction.send()

image_url = API_URL+""/""+transaction.id

#  3. Upload metadata to Arweave
meta_transaction = Transaction(your_ar_wallet, data=json.dumps(metadata))
meta_transaction.add_tag('Content-Type', 'text/html')
meta_transaction.sign()
meta_transaction.send()

metadata_url = API_URL+""/""+meta_transaction.id
123456789101112131415161718192021# Mint the NFTIf you already have the image and metadata uploaded, you can mint the NFT with the following code.TSPress </> button to view full sourceimport { Metaplex, keypairIdentity } from ""@metaplex-foundation/js"";
import {
  Connection,
  clusterApiUrl,
  Keypair,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import dotenv from ""dotenv"";

dotenv.config();

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const keypair = Keypair.fromSecretKey(
    Buffer.from(JSON.parse(process.env.SOLANA_KEYPAIR!.toString()))
  );

  const metaplex = new Metaplex(connection);
  metaplex.use(keypairIdentity(keypair));

  const feePayerAirdropSignature = await connection.requestAirdrop(
    keypair.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(feePayerAirdropSignature);

  const mintNFTResponse = await metaplex.nfts().create({
    uri: ""https://ffaaqinzhkt4ukhbohixfliubnvpjgyedi3f2iccrq4efh3s.arweave.net/KUAIIbk6p8oo4XHRcq0U__C2r0mwQaNl0gQow4Qp9yk"",
    maxSupply: 1,
  });

  console.log(mintNFTResponse);
})();
123456789101112131415161718192021222324252627282930313233const mintNFTResponse = await metaplex.nfts().create({
  uri: ""https://ffaaqinzhkt4ukhbohixfliubnvpjgyedi3f2iccrq4efh3s.arweave.net/KUAIIbk6p8oo4XHRcq0U__C2r0mwQaNl0gQow4Qp9yk"",
  maxSupply: 1,
});
1234NoteYou cannot mint an NFT with a different creator than your wallet. If you run into creator issues, make sure your metadata lists you as the creator.# How to get NFT MetadataMetaplex NFTs have metadata that is stored on Arweave. In order to get the Arweave metadata, you must get the Metaplex PDA and decode the account data.TSPress </> button to view full sourceimport { Metaplex, keypairIdentity } from ""@metaplex-foundation/js"";
import { Connection, clusterApiUrl, Keypair, PublicKey } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));
  const keypair = Keypair.generate();

  const metaplex = new Metaplex(connection);
  metaplex.use(keypairIdentity(keypair));

  const mintAddress = new PublicKey(
    ""Ay1U9DWphDgc7hq58Yj1yHabt91zTzvV2YJbAWkPNbaK""
  );

  const nft = await metaplex.nfts().findByMint({ mintAddress });

  console.log(nft.json);
  /*
  {
    name: 'SMB #139',
    symbol: 'SMB',
    description: 'SMB is a collection of 5000 randomly generated 24x24 pixels NFTs on the Solana Blockchain. Each SolanaMonkey is unique and comes with different type and attributes varying in rarity.',
    seller_fee_basis_points: 600,
    image: 'https://arweave.net/tZrNpbFUizSoFnyTqP4n2e1Tf7WvP3siUwFWKMMid_Q',
    external_url: 'https://solanamonkey.business/',
    collection: { name: 'SMB Gen2', family: 'SMB' },
    attributes: [
      { trait_type: 'Attributes Count', value: 2 },
      { trait_type: 'Type', value: 'Solana' },
      { trait_type: 'Clothes', value: 'Orange Shirt' },
      { trait_type: 'Ears', value: 'None' },
      { trait_type: 'Mouth', value: 'None' },
      { trait_type: 'Eyes', value: 'Cool Glasses' },
      { trait_type: 'Hat', value: 'None' }
    ],
    properties: {
      files: [ [Object], [Object] ],
      category: 'image',
      creators: [ [Object] ]
    }
  }
  */
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243const connection = new Connection(clusterApiUrl(""mainnet-beta""));
const keypair = Keypair.generate();

const metaplex = new Metaplex(connection);
metaplex.use(keypairIdentity(keypair));

const mintAddress = new PublicKey(
  ""Ay1U9DWphDgc7hq58Yj1yHabt91zTzvV2YJbAWkPNbaK""
);

const","[-8.36735242e-04  3.05288490e-02 -5.29036745e-02  6.04767278e-02
  3.15968841e-02 -1.13335021e-01  2.55563166e-02  7.12412521e-02
 -4.54536825e-02  1.20067243e-02  1.43883228e-02  3.69349122e-02
  2.62301266e-02  4.11942340e-02 -1.25448490e-02 -9.28406324e-03
 -5.77047765e-02 -4.68377732e-02  1.05122821e-02 -1.11628734e-02
 -3.36593925e-03 -3.30159590e-02  9.32003260e-02 -8.77236277e-02
  2.54007475e-03 -3.61496694e-02 -2.72682551e-02 -2.87345089e-02
  2.12148260e-02 -5.21229357e-02  5.75820096e-02 -3.61186303e-02
 -2.48171147e-02 -1.67323183e-02  8.13882872e-02  8.70693699e-02
  3.00050825e-02  1.49245765e-02 -3.97686213e-02 -1.40917404e-02
  9.22611207e-02 -5.25356270e-03 -3.61899994e-02 -2.83445939e-02
 -4.26111035e-02 -9.31021292e-03  8.86509102e-03  1.20559838e-02
  4.54992205e-02  5.11978753e-02 -1.09379537e-01 -1.29399868e-02
 -5.11786528e-02  5.79239130e-02 -3.05516063e-03  2.12153909e-03
 -3.68954390e-02 -1.04973845e-01 -5.37077300e-02 -3.88227217e-02
  3.95142473e-02  6.41520228e-03 -2.64887381e-02 -1.91927887e-02
 -2.21381467e-02  6.02453984e-02  3.47802378e-02 -6.14507981e-02
  5.28902933e-03 -3.92242298e-02  3.90408486e-02  2.94606537e-02
 -8.74571577e-02 -3.53739932e-02 -7.45967105e-02 -4.07970957e-02
  8.20682570e-02  2.29371171e-02  3.30602899e-02 -1.78691465e-02
  5.50733544e-02 -4.18220460e-02  2.76888441e-02  4.26582396e-02
  3.51449437e-02 -4.85508852e-02 -8.44287425e-02 -8.24398734e-03
 -6.18144833e-02 -1.25672072e-01 -8.25088471e-03 -1.17223123e-02
 -4.38055955e-02 -5.65494131e-03  1.36850439e-02  1.94916744e-02
  3.54323871e-02  2.39329655e-02 -9.33038592e-02  5.26013672e-02
  5.79954796e-02 -1.36869922e-02  1.76204164e-02  9.17841494e-03
  4.51629125e-02  1.40795382e-02  9.74638537e-02  4.55898233e-02
 -4.09786776e-02  3.04944199e-02 -3.13747860e-02  3.19711380e-02
 -2.67575700e-02  1.47215547e-02  2.33495142e-02  1.38005897e-01
 -1.28493041e-01  4.30436805e-02 -5.83302416e-02  5.36737125e-03
  6.28562421e-02  2.28734370e-02 -5.68675511e-02  1.90415941e-02
  7.77066033e-03 -6.10161833e-02  1.45724707e-03  4.42078666e-33
  1.77007038e-02  4.58059870e-02  2.02120114e-02 -2.44010072e-02
  4.02781963e-02  1.42073547e-02  5.13132371e-04 -6.52793422e-02
 -4.41503227e-02 -1.94913466e-02 -3.40882018e-02  2.49501858e-02
 -2.38394924e-02  4.73383255e-02 -6.02058060e-02 -1.02158533e-02
 -4.13902141e-02  6.13126308e-02  1.69142872e-01  8.41926113e-02
 -2.27026194e-02 -3.81420366e-02 -6.39742836e-02  7.07919942e-03
 -1.08698457e-01 -1.63949579e-02 -6.24931045e-02 -1.75286345e-02
 -1.27388388e-02 -9.53276269e-03  1.39467120e-02  2.91833226e-02
  3.52607742e-02  3.30998236e-03 -1.75499991e-02 -1.27090603e-01
 -1.82844643e-02  3.37580517e-02 -1.08946085e-01 -1.81979090e-02
  7.88412169e-02  2.06804052e-02 -4.54233885e-02 -2.85783224e-02
 -7.70069584e-02 -1.95863247e-02 -5.58912642e-02  4.38247547e-02
  8.04422610e-03  4.37121838e-02  1.93458761e-03 -7.50210509e-02
  3.34031209e-02 -6.49709255e-02 -3.06358915e-02 -2.99773850e-02
  2.20935419e-02 -7.38995674e-04  4.79514003e-02 -9.41678211e-02
  3.94165032e-02  7.13719707e-03  3.96994837e-02  3.68468766e-03
  3.94295268e-02 -3.58878151e-02  1.93499867e-02  1.95115302e-02
 -3.96697707e-02  5.02057225e-02 -2.36217547e-02  1.20029807e-01
 -4.80857901e-02 -3.49503867e-02  4.56366278e-02 -6.76092952e-02
  1.72749963e-02  1.35921817e-02 -2.72167809e-02  5.39893545e-02
 -2.68832128e-02 -1.07366117e-02 -1.60357449e-02 -5.63208126e-02
 -2.65221987e-02  2.51097400e-02  3.07939202e-02  3.87311168e-02
 -9.78740864e-03 -9.81780440e-02 -2.23562401e-02  8.99676327e-03
 -5.94505370e-02 -8.76028687e-02 -3.10327346e-03 -4.51578387e-33
  5.98614439e-02  1.12537853e-02 -1.89209152e-02  1.08210491e-02
 -4.10031751e-02  5.07878661e-02  1.60829946e-01  1.08199656e-01
  1.97004806e-02 -9.35947616e-03  2.08926089e-02  2.96743084e-02
 -3.21015492e-02 -9.33008343e-02  2.76219342e-02 -1.04656413e-01
 -1.71763375e-02 -1.50482254e-02  7.56861791e-02 -3.94113325e-02
 -8.93705413e-02  3.07963486e-03 -3.11515182e-02  1.00520141e-01
 -7.81346932e-02  7.32618794e-02 -1.91167817e-02 -2.16996633e-02
 -7.83600658e-02 -2.61932500e-02  5.89790009e-02  2.40969062e-02
 -9.66939982e-03  6.73805177e-02  1.50237055e-02  1.50662204e-02
  8.34253877e-02  4.78593186e-02 -1.01945996e-02  6.32734038e-03
  7.91498572e-02  4.89592068e-02 -1.41262207e-02  1.10644121e-02
  2.89552808e-02 -4.10416760e-02 -2.96354145e-02 -2.22682450e-02
  2.87710633e-02 -1.93670224e-02  2.28180848e-02 -8.46778303e-02
 -4.61659916e-02  2.26694830e-02  4.06982489e-02  8.14329907e-02
  8.00682083e-02 -3.38821821e-02  3.17996647e-03 -4.48874943e-03
 -3.12382486e-02 -1.44409053e-02 -7.11330250e-02 -9.53561664e-02
 -5.38575696e-03 -4.18581301e-03 -1.01975560e-01 -9.98008996e-03
 -6.50545210e-02  4.87464704e-02 -9.18487012e-02  2.35466249e-02
  9.45250243e-02  3.83245014e-02  7.41749704e-02  5.50310910e-02
  7.45994821e-02  2.89565325e-02  4.47124951e-02 -8.26485157e-02
  9.23032034e-03 -1.39699625e-02 -3.96591239e-02  4.23372276e-02
 -1.43608851e-02  1.69297270e-02  8.36033374e-03  8.80309269e-02
  2.59868149e-02 -3.95520665e-02 -1.31245460e-02  2.35490557e-02
  4.50463295e-02 -1.17874295e-02  1.02288067e-01 -4.39089511e-08
 -2.86000073e-02  5.17528467e-02 -7.59430509e-03  3.06299552e-02
 -6.68554194e-03  7.36443251e-02  1.75712314e-02 -5.76758087e-02
  6.12749644e-02 -9.89032015e-02 -3.16908956e-03 -3.88198420e-02
 -4.82079946e-02  2.77083609e-02 -3.62564959e-02  7.58130252e-02
  3.82052362e-02 -1.17651056e-02  3.36081423e-02 -7.87292868e-02
 -5.06638102e-02 -6.50216416e-02  3.47605646e-02 -7.71522969e-02
  1.04205776e-02 -2.02020109e-02  7.40153268e-02 -8.68922845e-03
 -2.86150724e-02 -6.76846579e-02 -1.80120803e-02 -2.18807142e-02
  5.13394102e-02  1.60836633e-02 -8.12865607e-03 -3.61865833e-02
 -5.39034791e-03 -9.29060392e-03  1.93477366e-02 -3.02093644e-02
 -2.30898820e-02  8.88298452e-02 -4.48889919e-02 -1.12400323e-01
  5.11434339e-02  1.71893686e-02 -1.08600380e-02  1.75878294e-02
 -4.96779606e-02  1.02660462e-01 -1.14334337e-02 -7.19695762e-02
  7.75423348e-02  3.11590396e-02 -4.16487595e-03 -8.90100971e-02
  4.03328054e-02 -4.70215604e-02  4.63832393e-02  4.38825004e-02
  1.79752305e-01  2.61958186e-02 -1.27098113e-02  1.71600599e-02]"
"nft = await metaplex.nfts().findByMint({ mintAddress });

console.log(nft.json);
12345678910111213# How to get the owner of an NFTIf you have the mint key of an NFT, you can find its current owner by sneak-peeking at the largest token account for that mint key.Remember that NFTs have a supply of 1, and they are indivisible, meaning that only one token account will hold that token at any point in time, whilst all other token accounts for that mint key will have a balance of 0.Once the largest token account is identified, we can retrieve its owner.TSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(""https://api.mainnet-beta.solana.com"");
  const tokenMint = ""9ARngHhVaCtH5JFieRdSS5Y8cdZk2TMF4tfGSWFB9iSK"";

  const largestAccounts = await connection.getTokenLargestAccounts(
    new PublicKey(tokenMint)
  );
  const largestAccountInfo = await connection.getParsedAccountInfo(
    largestAccounts.value[0].address
  );
  console.log(largestAccountInfo.value.data.parsed.info.owner);
  /*
    PublicKey {
        _bn: <BN: 6ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9>
    }
     */
})();
12345678910111213141516171819const connection = new Connection(""https://api.mainnet-beta.solana.com"");
const tokenMint = ""9ARngHhVaCtH5JFieRdSS5Y8cdZk2TMF4tfGSWFB9iSK"";
const largestAccounts = await connection.getTokenLargestAccounts(
  new PublicKey(tokenMint)
);
const largestAccountInfo = await connection.getParsedAccountInfo(
  largestAccounts.value[0].address
);
console.log(largestAccountInfo.value.data.parsed.info.owner);
123456789# How to get NFT Mint AddressesIf you know the public key of the Candy Machine, you can get the list of all NFT mint addresses generated from that Candy Machine using the following code. Note that we can use the following memcmp filter because, in v1, the first creator is always the address of the Candy Machine.# Candy Machine V1TSPress </> button to view full sourceimport { Connection, clusterApiUrl, PublicKey } from ""@solana/web3.js"";
import bs58 from ""bs58"";

const connection = new Connection(clusterApiUrl(""mainnet-beta""));
const MAX_NAME_LENGTH = 32;
const MAX_URI_LENGTH = 200;
const MAX_SYMBOL_LENGTH = 10;
const MAX_CREATOR_LEN = 32 + 1 + 1;
const MAX_CREATOR_LIMIT = 5;
const MAX_DATA_SIZE =
  4 +
  MAX_NAME_LENGTH +
  4 +
  MAX_SYMBOL_LENGTH +
  4 +
  MAX_URI_LENGTH +
  2 +
  1 +
  4 +
  MAX_CREATOR_LIMIT * MAX_CREATOR_LEN;
const MAX_METADATA_LEN = 1 + 32 + 32 + MAX_DATA_SIZE + 1 + 1 + 9 + 172;
const CREATOR_ARRAY_START =
  1 +
  32 +
  32 +
  4 +
  MAX_NAME_LENGTH +
  4 +
  MAX_URI_LENGTH +
  4 +
  MAX_SYMBOL_LENGTH +
  2 +
  1 +
  4;

const TOKEN_METADATA_PROGRAM = new PublicKey(
  ""metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s""
);
const candyMachineId = new PublicKey(""ENTER_YOUR_CANDY_MACHINE_ID_HERE"");

const getMintAddresses = async (firstCreatorAddress: PublicKey) => {
  const metadataAccounts = await connection.getProgramAccounts(
    TOKEN_METADATA_PROGRAM,
    {
      // The mint address is located at byte 33 and lasts for 32 bytes.
      dataSlice: { offset: 33, length: 32 },

      filters: [
        // Only get Metadata accounts.
        { dataSize: MAX_METADATA_LEN },

        // Filter using the first creator.
        {
          memcmp: {
            offset:","[-1.19787388e-01  3.15836165e-04 -8.67829919e-02  1.17477383e-02
  1.50069892e-02 -2.61130035e-02  6.13314705e-03  6.53839409e-02
 -2.47228500e-02  4.24691588e-02 -8.24489892e-02 -4.10618894e-02
 -3.85388844e-02  4.71022958e-03  2.97187455e-02 -6.23946823e-03
 -9.02803838e-02  2.75845150e-03  4.03761922e-04 -3.32100801e-02
  5.26051633e-02 -6.66186363e-02  3.57497623e-03 -1.02393888e-01
  1.55305183e-02  1.55854942e-02 -7.02598225e-03 -2.87993532e-02
  3.96633148e-02 -5.22549555e-04  7.70446360e-02 -6.82041654e-03
 -6.68682670e-03  4.73394133e-02  3.22656780e-02 -2.55006719e-02
 -3.49320844e-02  5.04660681e-02  7.85048679e-02 -3.58604081e-02
 -7.19798263e-03  9.17121544e-02 -2.68888641e-02 -3.75535078e-02
  7.36581311e-02 -1.27707412e-02 -2.02291608e-02  5.01426198e-02
  7.90511221e-02  4.33294140e-02 -1.60999671e-02 -5.81750693e-03
  2.28425302e-02  1.07369982e-01  4.82052714e-02  3.04714050e-02
  1.19110581e-03 -7.75734484e-02  2.12257099e-03  2.96167266e-02
  5.68376556e-02 -4.06297185e-02  4.55941185e-02 -5.98737635e-02
  1.59568321e-02  3.50359008e-02 -6.51652738e-02  2.13251333e-03
 -2.11856863e-03 -7.16912150e-02  9.90438461e-02 -5.54692298e-02
 -5.09369113e-02  1.80101320e-02 -6.22854903e-02 -6.52823746e-02
  2.80292798e-02  5.95182553e-02 -2.69267429e-02  3.59415337e-02
  1.56597421e-02  7.08589107e-02  6.79134056e-02  8.16184804e-02
  1.78686492e-02  6.28946647e-02 -3.90679240e-02  7.15352222e-02
 -7.90236238e-03 -9.36234090e-03 -8.95542502e-02  2.33913466e-04
  6.25733705e-03 -5.38009545e-03  4.41861600e-02  6.77742064e-02
 -4.11163606e-02  6.94175661e-02 -7.70410746e-02  9.56231803e-02
  2.20299531e-02  3.58514190e-02 -3.58975790e-02 -2.68406526e-04
  1.53787446e-03  7.20660761e-02  4.32463624e-02  4.23182324e-02
 -4.25961874e-02  4.45221961e-02 -4.08506580e-02  3.08719333e-02
 -3.45538966e-02  4.45628874e-02 -1.04005290e-02  1.57961287e-02
 -5.63255511e-02  7.55572766e-02  2.41186935e-02  3.10594141e-02
  8.34711567e-02 -8.14040750e-03 -3.72508094e-02  1.69817023e-02
 -3.99417058e-03  1.43626362e-01  5.59946187e-02  1.03581601e-32
 -2.36335434e-02  9.71166492e-02  8.18150304e-03 -4.63372990e-02
 -1.78038664e-02  4.27916348e-02  7.70083219e-02  4.86168750e-02
 -1.90163199e-02  8.32258463e-02  3.35517759e-03  1.12893373e-01
 -7.26904422e-02 -1.30540147e-01 -1.37896627e-01 -4.40410413e-02
 -4.63713892e-02  1.33249154e-02  1.98126566e-02  3.70270684e-02
  5.73222665e-03 -1.76614430e-02 -2.30330825e-02  1.39969578e-02
  2.41341572e-02 -5.68499789e-02 -9.16455314e-02  3.82896774e-02
  1.97002292e-02  2.17739753e-02  5.08720316e-02 -1.91081390e-02
 -6.57682195e-02 -2.43983380e-02  3.65524329e-02 -9.53757614e-02
  1.53686460e-02 -1.88085362e-02 -1.35735884e-01 -4.09187898e-02
  1.48687493e-02 -4.58004465e-03 -7.84136727e-02 -3.74613255e-02
 -1.53404266e-01 -4.54024598e-02 -7.75461197e-02  2.87876781e-02
  8.38288516e-02  6.81053549e-02 -6.15478978e-02  1.69744380e-02
 -8.52893889e-02 -8.60689953e-03  1.11382701e-01 -5.63236363e-02
 -1.84360251e-03  4.55739312e-02  5.94945811e-02 -5.01618423e-02
 -6.28387742e-03 -1.14150919e-01 -1.60237104e-02  2.51459423e-03
  1.86760426e-02  2.26161834e-02 -5.88592477e-02 -1.27680534e-02
  3.27269570e-03 -9.18600429e-03 -1.26590785e-02  5.24973422e-02
 -1.61405299e-02  8.94718710e-03 -1.06217004e-02 -3.63879763e-02
  1.97505504e-02  9.18692723e-02 -9.88689251e-03  2.62711733e-03
  2.07092632e-02  4.38434966e-02 -2.80094184e-02  8.64334702e-02
  3.58793070e-03 -5.54998545e-03 -3.78386304e-02 -3.88771743e-02
 -3.41922119e-02 -8.16382766e-02  6.45021498e-02 -3.67464498e-02
 -3.70559506e-02  4.27140901e-03 -1.28992632e-01 -8.27441126e-33
  2.99065094e-02 -5.93066365e-02 -3.26438923e-04 -1.23709373e-01
 -2.35441122e-02 -2.35258490e-02 -2.57814769e-02 -6.52409764e-03
 -1.79501474e-02  2.33235117e-02  3.83642390e-02  3.44861597e-02
  1.11041097e-02  4.71049882e-02 -1.38588045e-02  7.19836131e-02
  6.07399978e-02 -1.37993153e-02  1.51399998e-02 -4.04119380e-02
 -7.25068823e-02 -9.94476839e-04 -2.35571526e-02  1.21996813e-02
 -9.42128897e-02  8.19194615e-02  1.80300381e-02  7.16298670e-02
 -4.72226031e-02 -3.79652111e-03  8.69493186e-02 -1.68095324e-02
 -8.88917670e-02 -6.38984377e-03 -2.18107388e-03 -4.38168496e-02
 -2.23858133e-02  9.88107398e-02 -3.44179687e-03  4.02878709e-02
  2.61054784e-02  5.66988587e-02  3.06626596e-02 -1.94111392e-02
 -1.19029218e-02 -9.69399640e-04 -3.49261053e-02 -5.02163544e-03
  1.98604558e-02  7.00514913e-02  8.81603882e-02 -2.48775091e-02
 -2.16726027e-03 -1.32749053e-02 -2.17626393e-02  3.25109484e-03
  7.58946761e-02 -4.80180979e-02  3.06860432e-02 -4.78969403e-02
  5.67571335e-02 -4.62801233e-02 -1.91842839e-02  1.02799676e-01
 -4.77996767e-02 -6.48891255e-02 -8.15181136e-02  3.73910703e-02
  2.39208173e-02  8.53268206e-02 -1.95412338e-02 -5.76103888e-02
  7.46132880e-02 -4.11598448e-04  3.21059078e-02  7.30100423e-02
  2.67015025e-02 -3.73861007e-02  6.57035038e-02 -2.90920660e-02
 -2.28368095e-03  1.16427792e-02  3.57204638e-02 -5.70371822e-02
 -3.03168278e-02 -2.43139453e-03  4.24288847e-02 -3.62269096e-02
  5.26563413e-02  1.75192337e-02 -4.17576134e-02  6.47603010e-04
 -1.03524931e-01 -3.51866037e-02  7.08937868e-02 -5.57977380e-08
 -6.42213523e-02 -2.41396129e-02 -4.62315138e-03 -1.73086149e-03
  5.66294342e-02  7.14955404e-02  2.26670355e-02 -2.46724505e-02
 -1.92625280e-02  9.16631147e-03 -6.59652054e-03  3.16243544e-02
  1.11762935e-03 -1.90242045e-02 -1.94004085e-02  9.08817723e-03
  6.36502579e-02  1.39646896e-03  6.67813374e-03 -1.23856580e-02
  1.67077836e-02 -4.54238476e-03  9.59831253e-02 -4.62649912e-02
 -3.05042733e-02 -5.23525998e-02  7.35663157e-03 -3.93844135e-02
  1.66807026e-02  3.27030718e-02 -1.18950106e-01  6.30039051e-02
  5.32615036e-02 -7.03636929e-02 -3.58934812e-02 -2.06916220e-02
 -2.11290792e-02 -2.00789943e-02 -5.77501208e-03  9.94647760e-03
  2.52111387e-02  9.75025222e-02 -7.01870024e-02 -1.22031467e-02
 -1.83382705e-02 -1.66244600e-02  1.62869506e-02  6.70559006e-03
  1.07986042e-02 -5.94344288e-02  4.42025863e-04 -9.77385640e-02
 -6.48805127e-02  4.42057662e-02 -8.20848048e-02 -5.90819772e-03
 -1.52600780e-01  8.93083140e-02 -2.97742654e-02 -7.21649872e-03
 -6.05973378e-02  2.08525993e-02 -2.32909191e-02  3.96967568e-02]"
"CREATOR_ARRAY_START,
            bytes: firstCreatorAddress.toBase58(),
          },
        },
      ],
    }
  );

  return metadataAccounts.map((metadataAccountInfo) =>
    bs58.encode(metadataAccountInfo.account.data)
  );
};

getMintAddresses(candyMachineId);
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768const getMintAddresses = async (firstCreatorAddress: PublicKey) => {
  const metadataAccounts = await connection.getProgramAccounts(
    TOKEN_METADATA_PROGRAM,
    {
      // The mint address is located at byte 33 and lasts for 32 bytes.
      dataSlice: { offset: 33, length: 32 },

      filters: [
        // Only get Metadata accounts.
        { dataSize: MAX_METADATA_LEN },

        // Filter using the first creator.
        {
          memcmp: {
            offset: CREATOR_ARRAY_START,
            bytes: firstCreatorAddress.toBase58(),
          },
        },
      ],
    }
  );

  return metadataAccounts.map((metadataAccountInfo) =>
    bs58.encode(metadataAccountInfo.account.data)
  );
};

getMintAddresses(candyMachineId);
12345678910111213141516171819202122232425262728# Candy Machine V2If you're using a Candy Machine v2, you'll first need to access its ""Candy Machine Creator"" address which is a simple PDA using candy_machine and the Candy Machine v2 address as seeds. Once you have the creator address, you can use it the same way we were for v1.TSPress </> button to view full sourceimport { Connection, clusterApiUrl, PublicKey } from ""@solana/web3.js"";
import bs58 from ""bs58"";

const connection = new Connection(clusterApiUrl(""mainnet-beta""));
const MAX_NAME_LENGTH = 32;
const MAX_URI_LENGTH = 200;
const MAX_SYMBOL_LENGTH = 10;
const MAX_CREATOR_LEN = 32 + 1 + 1;
const MAX_CREATOR_LIMIT = 5;
const MAX_DATA_SIZE =
  4 +
  MAX_NAME_LENGTH +
  4 +
  MAX_SYMBOL_LENGTH +
  4 +
  MAX_URI_LENGTH +
  2 +
  1 +
  4 +
  MAX_CREATOR_LIMIT * MAX_CREATOR_LEN;
const MAX_METADATA_LEN = 1 + 32 + 32 + MAX_DATA_SIZE + 1 + 1 + 9 + 172;
const CREATOR_ARRAY_START =
  1 +
  32 +
  32 +
  4 +
  MAX_NAME_LENGTH +
  4 +
  MAX_URI_LENGTH +
  4 +
  MAX_SYMBOL_LENGTH +
  2 +
  1 +
  4;

const TOKEN_METADATA_PROGRAM = new PublicKey(
  ""metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s""
);
const CANDY_MACHINE_V2_PROGRAM = new PublicKey(
  ""cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ""
);
const candyMachineId = new PublicKey(""ENTER_YOUR_CANDY_MACHINE_ID_HERE"");

const getMintAddresses = async (firstCreatorAddress: PublicKey) => {
  const metadataAccounts = await connection.getProgramAccounts(
    TOKEN_METADATA_PROGRAM,
    {
      // The mint address is located at byte 33 and lasts for 32 bytes.
      dataSlice: { offset: 33, length: 32 },

      filters: [
        // Only get Metadata accounts.
        { dataSize: MAX_METADATA_LEN },

   ","[-4.81379591e-02  5.08826189e-02 -7.66022503e-02 -5.43817831e-03
 -9.44005176e-02 -6.06634244e-02 -1.05175236e-02  6.08120933e-02
 -3.49428542e-02 -3.22291777e-02 -3.75615694e-02 -5.07020615e-02
  4.30161506e-02 -8.14042166e-02 -4.14749654e-03  4.94879857e-02
 -8.73539373e-02 -1.35259433e-02  3.04464847e-02  2.44393125e-02
  1.54185370e-01 -6.71009570e-02  1.73640600e-03 -5.15277609e-02
  1.51810590e-02  7.50770867e-02 -4.55113947e-02  3.87267582e-02
  1.85865331e-02 -1.18195871e-03  1.75121486e-01 -1.45207299e-02
  3.31337079e-02  1.51946405e-02  5.17199337e-02  3.69447656e-02
 -4.21104580e-02  4.98246811e-02  5.12317829e-02 -8.85408148e-02
  6.77997386e-03  5.75773567e-02 -9.89322662e-02  2.37824190e-02
 -2.96344678e-03 -1.52791264e-02 -1.38743185e-02  3.17418240e-02
  1.87107653e-03 -1.55481789e-02 -2.24057995e-02  5.60637936e-02
 -8.31989758e-03  8.09473097e-02  1.27052329e-02  3.26514356e-02
 -3.78768817e-02  1.70548558e-02  5.03206924e-02  7.81847686e-02
 -7.00707221e-03 -4.55107912e-02  2.78225504e-02 -2.38922983e-02
 -1.94872450e-02  4.35801446e-02 -7.14903548e-02  2.97587197e-02
 -5.12579270e-03 -5.24919406e-02  8.80034361e-03 -1.78712364e-02
 -6.92959800e-02  6.11423552e-02  4.73483978e-03 -2.04951614e-02
 -3.88293937e-02  9.23583924e-04 -1.55259604e-02 -6.81690797e-02
 -6.25601411e-03  1.59804821e-02  2.05466580e-02  1.03174567e-01
  3.01544182e-02  1.27204591e-02 -1.84975509e-02  3.82934920e-02
 -2.11948287e-02 -1.04358159e-02  3.53329703e-02 -8.80116690e-03
 -3.72309573e-02  2.84726880e-02  6.82666451e-02  2.74611171e-02
  3.12272292e-02 -1.09734363e-03  1.85023283e-03  5.97261488e-02
 -1.15396278e-02  2.39495784e-02 -2.82082893e-02  4.55160588e-02
  9.66761336e-02 -3.05193886e-02  1.45091470e-02  1.81548335e-02
 -9.34659913e-02  8.23495239e-02  5.89095755e-03  5.85111044e-02
 -4.36636843e-02 -4.58065569e-02 -1.60540771e-02  4.95468825e-02
 -3.91997322e-02  7.21133873e-02 -3.92875960e-03  1.17906872e-02
  9.78739858e-02 -1.88663509e-02 -1.60367601e-02 -6.60632178e-02
 -6.92831650e-02  8.35671369e-03  3.33600044e-02  8.89001766e-33
 -2.62103453e-02 -4.15570056e-03  4.81037050e-02  1.40374117e-02
 -2.21660100e-02  3.68657373e-02  1.71817075e-02  1.05340056e-01
  1.56008974e-02  3.48392874e-02  2.82815564e-03  2.16410756e-02
 -4.89524119e-02 -1.12848729e-02 -3.70146707e-02  2.54204962e-02
 -1.66663574e-03  4.01749536e-02  1.78411976e-02  2.59498563e-02
 -3.57239321e-02 -6.22827597e-02 -3.36544625e-02 -5.13656950e-03
  6.29473180e-02  8.06089938e-02 -2.45390218e-02  4.69147637e-02
  4.23795097e-02  1.86890585e-03  2.89899632e-02  8.63758940e-03
 -1.41546177e-02 -7.54893711e-03  5.76635748e-02 -7.42576867e-02
 -2.17983965e-02 -1.16923079e-02 -8.80570486e-02 -6.30619675e-02
  1.04030073e-01  4.77807857e-02 -3.24293040e-02 -5.79939187e-02
 -1.27604932e-01  1.49533097e-02 -2.23909393e-02 -3.99348652e-03
  1.48749605e-01  5.93834557e-02  2.97669452e-02  3.84484157e-02
 -9.54216644e-02  5.21639623e-02  4.13989834e-02 -8.18734020e-02
 -3.83583717e-02 -4.88022156e-03  2.55719293e-02  1.70095302e-02
 -4.28666323e-02 -2.32690852e-02  3.52610312e-02  3.27912532e-02
  3.51457745e-02  3.27259786e-02  1.73648577e-02  1.59490872e-02
 -2.77160071e-02  1.66035984e-02 -2.53301635e-02 -5.07798120e-02
 -5.33878095e-02 -2.28716596e-03 -6.50434196e-02  2.80765332e-02
  1.07620470e-03 -2.82579456e-02 -9.30111259e-02 -7.38687143e-02
  1.15797855e-02  5.58504723e-02 -6.24868907e-02  1.00052603e-01
 -1.94873605e-02  2.76206881e-02 -2.31942702e-02 -4.09815721e-02
 -1.90702211e-02 -2.31214222e-02 -1.16540780e-02 -7.20234066e-02
 -5.44810630e-02 -3.19774710e-02 -2.14619219e-01 -8.43727527e-33
  7.45610939e-03 -8.48264918e-02  6.58024922e-02 -2.69156471e-02
 -9.64930188e-03  3.05693224e-03  3.63499448e-02  7.96105489e-02
  5.56488871e-04  6.76895827e-02 -1.99573059e-02  2.60343719e-02
 -2.81766485e-02 -1.25115449e-02  6.83856457e-02  1.14301316e-01
  5.59465541e-03  1.07483575e-02  1.85008603e-03 -1.22166127e-02
 -5.89982346e-02  1.14687912e-01  1.71312280e-02  2.57258601e-02
 -6.39408454e-02  6.66265413e-02  1.54562732e-02  5.59493601e-02
  9.13108066e-02 -4.24677990e-02  6.45582527e-02  8.18454474e-03
 -4.28438112e-02 -4.47200872e-02  1.01381689e-02 -1.93248186e-02
 -8.60485062e-03  7.19497949e-02 -4.15966287e-03  6.14927895e-02
  4.36552055e-02 -5.91095202e-02 -7.67228901e-02 -3.92409936e-02
  3.10231261e-02 -4.72795516e-02 -2.11673994e-02  6.80249631e-02
  3.00263497e-03  1.64212864e-02  5.54718748e-02 -2.91500315e-02
 -8.27677920e-02 -6.80210022e-03 -6.24209009e-02 -3.83934975e-02
  5.33149838e-02 -3.56171168e-02  1.18570268e-01 -1.09126329e-01
  2.88393907e-02 -1.08564645e-01 -1.22214742e-02  4.99240719e-02
 -4.13029417e-02 -3.78451161e-02 -2.87497882e-02  4.54315031e-03
 -4.65823971e-02  4.64876182e-02  4.38420512e-02 -2.89457794e-02
  1.22531522e-02 -2.79728994e-02  9.41036362e-03  7.14154840e-02
 -5.15521178e-03 -6.34472594e-02  2.95400247e-02 -2.07864102e-02
 -5.51656634e-02  1.07249208e-01  6.11738041e-02 -4.06780057e-02
 -1.90271512e-02 -5.37776425e-02  1.57474671e-02  1.05955368e-02
  4.61626425e-03  7.64841959e-03 -5.17875627e-02  5.34579717e-02
 -6.91225007e-02  3.86519730e-02 -2.29378417e-03 -6.64891644e-08
  1.10232364e-02 -7.29127079e-02  2.02465039e-02  8.63952637e-02
  8.60544946e-03  4.34141420e-02 -3.42399366e-02 -7.73285888e-03
  3.21862437e-02  1.54162841e-02  5.49283922e-02  3.89388539e-02
 -8.07828829e-02 -2.41397358e-02 -3.03035732e-02 -2.15550289e-02
  1.83939766e-02 -3.56531404e-02 -3.51687931e-02  3.47709283e-02
 -4.33709770e-02  4.06219251e-02  3.68074956e-03 -1.31847084e-01
  6.04316741e-02 -9.49570984e-02  7.13807121e-02  5.17311320e-02
  1.66110452e-02  6.97073480e-03  2.78333817e-02  2.30953768e-02
  8.82641152e-02 -4.49454524e-02 -4.17109728e-02 -3.86125185e-02
 -7.05716386e-02 -3.96949984e-02 -1.09023200e-02 -4.66468919e-04
  7.32433721e-02 -3.23871747e-02 -4.01307829e-02  6.92448299e-03
 -3.02946977e-02 -1.17743649e-02 -6.36545718e-02  8.29445347e-02
  6.47182465e-02  1.25440853e-02 -7.79272616e-02 -5.35298474e-02
 -3.07682846e-02 -6.13908656e-02 -6.22350872e-02 -1.06905110e-01
 -1.55695036e-01  5.95248230e-02  5.35489209e-02 -1.25599196e-02
  7.69381598e-03 -9.34055075e-03 -9.97245777e-03 -2.12413277e-02]"
"    // Filter using the first creator.
        {
          memcmp: {
            offset: CREATOR_ARRAY_START,
            bytes: firstCreatorAddress.toBase58(),
          },
        },
      ],
    }
  );

  return metadataAccounts.map((metadataAccountInfo) =>
    bs58.encode(metadataAccountInfo.account.data)
  );
};

const getCandyMachineCreator = async (
  candyMachine: PublicKey
): Promise<[PublicKey, number]> =>
  PublicKey.findProgramAddress(
    [Buffer.from(""candy_machine""), candyMachine.toBuffer()],
    CANDY_MACHINE_V2_PROGRAM
  );

(async () => {
  const candyMachineCreator = await getCandyMachineCreator(candyMachineId);
  getMintAddresses(candyMachineCreator[0]);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182const getCandyMachineCreator = async (
  candyMachine: PublicKey
): Promise<[PublicKey, number]> =>
  PublicKey.findProgramAddress(
    [Buffer.from(""candy_machine""), candyMachine.toBuffer()],
    CANDY_MACHINE_V2_PROGRAM
  );

const candyMachineCreator = await getCandyMachineCreator(candyMachineId);
getMintAddresses(candyMachineCreator[0]);
12345678910# How to get all NFTs from a wallet?When getting all NFTs from a wallet, you'll need to get all token accounts and then parse which ones are NFTs. This can all be done using findDataByOwneropen in new window from the Metaplex JS library.TSPress </> button to view full sourceimport { Metaplex, keypairIdentity } from ""@metaplex-foundation/js"";
import { Connection, clusterApiUrl, Keypair, PublicKey } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
  const keypair = Keypair.generate();

  const metaplex = new Metaplex(connection);
  metaplex.use(keypairIdentity(keypair));

  const owner = new PublicKey(""2R4bHmSBHkHAskerTHE6GE1Fxbn31kaD5gHqpsPySVd7"");
  const allNFTs = await metaplex.nfts().findAllByOwner({ owner });

  console.log(allNFTs);
})();
123456789101112131415const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
const keypair = Keypair.generate();

const metaplex = new Metaplex(connection);
metaplex.use(keypairIdentity(keypair));

const owner = new PublicKey(""2R4bHmSBHkHAskerTHE6GE1Fxbn31kaD5gHqpsPySVd7"");
const allNFTs = await metaplex.nfts().findAllByOwner({ owner });

console.log(allNFTs);
12345678910# Candy Machine v2Metaplex JS SDK now supports creating and updating Candy Machine v2 via code. It enable the developers to interact with the Candy Machine v2 program and create, update, and delete Candy Machines as well as mint NFTs from them.# How to create a Candy MachineTSPress </> button to view full sourceimport {
  keypairIdentity,
  Metaplex,
  sol,
  toBigNumber,
} from ""@metaplex-foundation/js"";
import { Keypair, Connection, LAMPORTS_PER_SOL } from ""@solana/web3.js"";

const createCandyMachine = async () => {
  const connection = new Connection(
    ""https://api.devnet.solana.com/"",
    ""confirmed""
  );
  const payer = Keypair.generate();

  // request airdrop
  const airdropSignature = await connection.requestAirdrop(
    payer.publicKey,
    2 * LAMPORTS_PER_SOL
  );

  console.log(`Airdrop signature - ${airdropSignature}`);

  // creating metaplex instance with payer as the authority
  const metaplex = Metaplex.make(connection).use(keypairIdentity(payer));

  // creating a candy machine
  const { candyMachine } = await metaplex.candyMachinesV2().create({
    sellerFeeBasisPoints: 5, // 0.05% royalties
    price: sol(0.0001), // 0.0001 SOL
    itemsAvailable: toBigNumber(5), // 5 items available
  });

  console.log(`Candy Machine ID - ${candyMachine.address.toString()}`);
};

createCandyMachine();
12345678910111213141516171819202122232425262728293031323334353637const { candyMachine } = await metaplex.candyMachinesV2().create({
  sellerFeeBasisPoints: 5, // 0.05% royalties
  price: sol(0.0001), // 0.0001 SOL
  itemsAvailable: toBigNumber(5), // 5 items available
});

/**
 * #1 Candy Machine ID - HSZxtWx6vgGWGsWu9SouXkHA2bAKCMtMZyMKzF2dvhrR
 */
123456789# How to delete a Candy MachineTSPress </> button to view full sourceimport","[-3.10387816e-02  6.74458668e-02 -2.99126338e-02 -2.42289100e-02
 -6.56982511e-02 -2.37698704e-02  5.75722717e-02  4.12044711e-02
 -8.72062370e-02 -6.49753362e-02 -4.12310399e-02 -1.01022795e-01
  2.61108428e-02 -1.11106820e-01 -5.47527298e-02  5.06784245e-02
 -8.21289700e-03  3.54498625e-02  2.71565802e-02 -3.04311328e-02
  1.68733492e-01 -6.02387749e-02  2.48701852e-02 -4.77331243e-02
 -1.11403577e-02  7.04231486e-02 -4.08075526e-02 -1.14802625e-02
  2.05509327e-02 -3.84114645e-02  1.02805026e-01 -5.45992441e-02
 -1.58448312e-02  1.76758487e-02  1.01538608e-02  4.68611456e-02
 -5.96323498e-02 -1.99261848e-02  1.77287366e-02 -8.41248035e-02
  2.13421378e-02  7.88930207e-02 -9.11950842e-02  2.05987841e-02
  8.24035238e-03 -2.71396358e-02  1.42550208e-02  7.06264470e-03
  3.04808132e-02  1.52869551e-02 -6.97498098e-02 -1.16630746e-02
 -3.52058113e-02  4.48525101e-02  2.60529108e-02 -1.25846764e-05
 -9.53457952e-02 -1.83773283e-02  5.17665856e-02  1.12622837e-02
  1.41448667e-02 -7.83123672e-02  5.61074764e-02 -1.35043981e-02
  3.93145382e-02  2.94474177e-02 -4.93677380e-03  2.08799168e-02
  5.44584803e-02 -5.71037270e-02 -1.78063149e-03  1.53403822e-02
 -2.19143461e-02  3.81263308e-02  6.26748381e-03  1.79825034e-02
 -3.68028469e-02  1.71974301e-02  3.31232958e-02 -4.33224328e-02
  6.74855104e-03 -8.61503035e-02  2.74945740e-02  1.77323166e-02
 -3.34360264e-02  3.24592590e-02 -3.56320366e-02 -3.18423882e-02
  6.14829883e-02  1.74896847e-02 -1.31615009e-02  1.22740213e-03
 -4.79378812e-02  4.96195555e-02  5.77225424e-02 -5.47790676e-02
  2.04809848e-02  1.14527484e-02  4.91681546e-02  9.10845920e-02
 -7.84985498e-02  1.60991549e-02 -2.68393522e-03  1.25427218e-02
  7.48909786e-02 -4.68277223e-02  5.41252159e-02 -6.09401334e-03
 -9.76488367e-02  5.09109385e-02 -4.54427265e-02  1.15349181e-01
  1.09174475e-02 -1.19554661e-02  1.78066939e-02  6.08836859e-02
  5.20166717e-02  2.93730609e-02  7.52251269e-03 -9.03198030e-03
  3.97531725e-02 -4.03218064e-03 -2.65147793e-03 -5.58042713e-02
 -6.01225495e-02  2.20493861e-02 -2.36025769e-02  8.20445833e-33
  2.83522774e-02 -2.26195212e-02  7.27442577e-02  5.60684092e-02
  1.22047551e-02  2.34957933e-02  7.26398155e-02  7.90638849e-02
 -7.93652236e-03 -2.65526213e-02 -5.35039930e-03 -5.81453964e-02
 -7.12672994e-02 -7.36619206e-03 -2.81533320e-02 -4.33687568e-02
  1.08748535e-02 -2.43766569e-02  1.82133783e-02 -6.30751019e-03
 -9.60420445e-02 -7.78188556e-03 -3.05503793e-02 -3.82717215e-02
  1.35570541e-02  6.05190620e-02 -4.11031954e-02  6.35334179e-02
  3.87681201e-02  1.80057939e-02  6.39707819e-02  2.21545659e-02
 -1.54450526e-02  3.75373662e-02  4.72653322e-02 -4.08474132e-02
 -3.01308483e-02  3.81371714e-02 -3.62769030e-02 -8.95386115e-02
  4.54255790e-02  2.98728105e-02 -1.26795266e-02 -1.26296952e-01
 -1.26324460e-01 -6.49369061e-02 -3.82163450e-02 -2.71724234e-03
  1.05811052e-01  2.28723455e-02  8.50600973e-02  8.83103386e-02
 -7.28855729e-02 -8.45330767e-03  1.95752718e-02 -8.16098452e-02
 -3.00186910e-02  3.55137587e-02  2.07296796e-02  1.01112701e-01
 -2.23112069e-02  3.32341865e-02  6.20902069e-02  4.29065898e-02
  3.12190317e-02  6.70297965e-02  3.38275321e-02  1.46709792e-02
  4.34408411e-02 -2.16860585e-02  1.30802114e-02 -6.93898052e-02
 -4.72192690e-02 -5.04576426e-04 -6.14406634e-03  1.42395953e-02
 -7.13990331e-02 -7.75062069e-02 -1.44877672e-01 -8.10154751e-02
  1.81039125e-02  2.27314364e-02 -6.84254616e-02  5.29444888e-02
 -7.06007183e-02  6.82765767e-02 -5.05716354e-03 -7.24035278e-02
  5.11031486e-02  2.10420415e-02 -6.87216893e-02 -4.68072817e-02
 -3.37074921e-02 -1.19124427e-02 -1.10236377e-01 -8.65879939e-33
  3.32385935e-02 -7.53081366e-02  6.63301945e-02  3.20173660e-03
  1.70271900e-02  2.59899646e-02  8.34703445e-02 -2.92491950e-02
 -1.01340842e-02  8.45178962e-02 -3.47304381e-02  2.71233786e-02
  2.43526301e-03 -1.92099717e-02  4.80301902e-02  8.56420994e-02
  2.78507750e-02 -3.47590782e-02 -2.42312253e-02 -5.16386107e-02
 -6.76397905e-02  1.46961793e-01 -1.56074634e-03  3.36132795e-02
 -9.94859636e-02  8.00560564e-02  9.70476586e-03  9.18314904e-02
  9.22186300e-02 -7.16517270e-02  2.73752213e-02  2.67010722e-02
 -2.87114047e-02 -6.20374382e-02  4.76066656e-02 -7.12937787e-02
 -4.44842409e-03  7.38689601e-02  1.85181890e-02  2.40490250e-02
  5.43631054e-02 -7.56164715e-02 -9.32853445e-02 -3.35035287e-02
  3.42318341e-02 -8.23601149e-03  4.86480258e-02  3.54341641e-02
  1.82030853e-02  2.51249392e-02  3.51210125e-02 -2.50816960e-02
 -8.96647424e-02 -1.86874010e-02 -4.26526703e-02  2.15330534e-02
  5.75415716e-02 -4.62295413e-02  1.30538270e-01 -2.60047186e-02
 -1.64757427e-02 -1.31671786e-01 -5.25516458e-03 -5.14112003e-02
 -9.26110987e-03  3.19851883e-04 -1.08476253e-02 -8.38106964e-03
  5.85995149e-03  1.20762885e-02 -2.92461063e-03 -6.41486899e-04
  4.15272871e-03 -1.43499253e-02 -4.59141470e-03  3.60212438e-02
  3.17707867e-03 -7.50153139e-02  1.97984651e-02 -1.93539616e-02
 -6.80312663e-02  7.25933313e-02  7.48388395e-02  2.66749095e-02
  3.58555117e-03 -8.90512168e-02  1.34389545e-03 -4.94989082e-02
 -5.41534834e-02 -5.27849235e-02 -4.82278503e-03  1.40020456e-02
 -1.25407040e-01  2.61575636e-02  7.53071252e-03 -6.21241938e-08
  1.48507943e-02 -5.46851233e-02  3.10118124e-02  1.26069576e-01
  1.23365521e-02  5.97398132e-02 -6.00251853e-02  2.42612604e-02
  1.90859865e-02 -1.52673488e-02  1.98161919e-02  4.34920304e-02
  2.73250304e-02 -1.14258202e-02  4.03791061e-03 -7.48561770e-02
 -1.57441758e-02  8.50296672e-03 -5.02178930e-02  2.36148313e-02
 -4.69986945e-02  3.05920858e-02  5.80808381e-03 -7.36081079e-02
  3.75204682e-02 -5.30781113e-02  7.36200809e-02 -2.07807333e-03
  4.41312417e-02  1.77724715e-02  2.97950115e-02  4.32159305e-02
  8.45698267e-02 -2.36675572e-02 -5.21984957e-02 -2.18929425e-02
 -5.90928160e-02 -2.89315991e-02  3.10532586e-03  1.93062890e-02
  1.15253426e-01  7.67332176e-03 -1.25139160e-02  3.24107930e-02
 -6.28461540e-02  2.50347666e-02 -1.85401235e-02  3.84274460e-02
  4.50127311e-02  8.12772959e-02 -6.34444430e-02 -1.05829369e-02
 -2.21773190e-03 -3.93486917e-02 -4.51585203e-02 -1.26939178e-01
 -8.81548002e-02 -7.10679358e-03  2.42388025e-02  2.63720676e-02
  6.65016621e-02 -4.51862924e-02 -4.48952289e-03 -3.66948470e-02]"
"{
  Metaplex,
  keypairIdentity,
  sol,
  toBigNumber,
} from ""@metaplex-foundation/js"";
import { Connection, Keypair, LAMPORTS_PER_SOL } from ""@solana/web3.js"";

const deleteCandyMachine = async () => {
  const connection = new Connection(
    ""https://api.devnet.solana.com/"",
    ""confirmed""
  );
  const payer = Keypair.generate();

  // request airdrop
  const airdropSignature = await connection.requestAirdrop(
    payer.publicKey,
    2 * LAMPORTS_PER_SOL
  );

  console.log(`Airdrop signature - ${airdropSignature}`);

  // creating metaplex instance with payer as the authority
  const metaplex = Metaplex.make(connection).use(keypairIdentity(payer));

  // creating a candy machine
  const { candyMachine } = await metaplex.candyMachinesV2().create({
    sellerFeeBasisPoints: 5, // 0.05% royalties
    price: sol(0.0001), // 0.0001 SOL
    itemsAvailable: toBigNumber(5), // 5 items available
  });

  console.log(`Candy Machine ID - ${candyMachine.address.toString()}`);

  // deleting the candy machine
  const { response } = await metaplex.candyMachinesV2().delete({
    candyMachine,
  });

  console.log(`Delete Candy Machine signature - ${response.signature}`);
};

deleteCandyMachine();
1234567891011121314151617181920212223242526272829303132333435363738394041424344// creating a candy machine
const { candyMachine } = await metaplex.candyMachinesV2().create({
  sellerFeeBasisPoints: 5, // 0.05% royalties
  price: sol(0.0001), // 0.0001 SOL
  itemsAvailable: toBigNumber(5), // 5 items available
});

console.log(`Candy Machine ID - ${candyMachine.address.toString()}`);

// deleting the candy machine
const { response } = await metaplex.candyMachinesV2().delete({
  candyMachine,
});
12345678910111213# How to find Candy Machine via authorityTo find all the Candy Machines whose authority is a certain public key, we have use the findAllByopen in new window function along with the type parameter as authorityTSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";
import { Metaplex } from ""@metaplex-foundation/js"";

const findCandyMachineViaAuthority = async () => {
  const connection = new Connection(
    ""https://api.devnet.solana.com/"",
    ""confirmed""
  );
  const metaplex = new Metaplex(connection);
  const authority = new PublicKey(
    ""9pr8wNxphx2PhBRbHKuH7YhPs5zbDuxx62UcDiayXxrw""
  );

  const candyMachines = await metaplex.candyMachinesV2().findAllBy({
    type: ""authority"",
    publicKey: authority,
  });

  candyMachines.map((candyMachine, index) => {
    console.log(`#${index + 1} Candy Machine ID - ${candyMachine.address}`);
  });

  /**
   * #1 Candy Machine ID - HSZxtWx6vgGWGsWu9SouXkHA2bAKCMtMZyMKzF2dvhrR
   */
};

findCandyMachineViaAuthority();
12345678910111213141516171819202122232425262728const candyMachines = await metaplex.candyMachinesV2().findAllBy({
  type: ""authority"",
  publicKey: authority,
});

candyMachines.map((candyMachine, index) => {
  console.log(`#${index + 1} Candy Machine ID - ${candyMachine.address}`);
});

/**
 * #1 Candy Machine ID - HSZxtWx6vgGWGsWu9SouXkHA2bAKCMtMZyMKzF2dvhrR
 */
123456789101112# How to find Candy Machine using wallet addressTo fetch the Candy Machine object via its wallet address, we have use the findAllByopen in new window function along with the type parameter as wallet. You can get the wallet address of the Candy Machine from the ""Anchor data"" tab in the explorer.TSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";
import { Metaplex } from ""@metaplex-foundation/js"";

const findCandyMachineViaWallet = async () => {
  const connection = new Connection(
    ""https://api.devnet.solana.com/"",
    ""confirmed""
  );
  const metaplex = new Metaplex(connection);
  const wallet = new PublicKey(""9pr8wNxphx2PhBRbHKuH7YhPs5zbDuxx62UcDiayXxrw"");

  const candyMachines = await metaplex.candyMachinesV2().findAllBy({
    type: ""wallet"",
    publicKey: wallet,
  });

  candyMachines.map((candyMachine, index) => {
    console.log(`#${index + 1} Candy Machine ID","[-1.14650704e-01 -4.05067652e-02 -4.84217219e-02  2.55860817e-02
 -1.34091014e-02 -7.94323608e-02  8.59899744e-02  1.99084263e-02
  1.55492285e-02 -1.08462998e-04  6.72193915e-02  2.35879421e-02
 -5.66994809e-02 -6.00523092e-02  3.78519259e-02  3.68584171e-02
 -8.60274732e-02 -9.50741246e-02 -7.47312754e-02  3.83897200e-02
  1.12915955e-01 -1.34167627e-01  1.96072366e-03 -4.57912013e-02
  2.77531333e-02 -7.68873990e-02  6.49114465e-03  6.09204778e-03
 -6.08930439e-02 -3.58460061e-02  1.04416877e-01  9.10731032e-02
 -6.62160143e-02  2.55317707e-03 -1.34026585e-03  7.41610825e-02
 -1.21901771e-02  9.16694570e-03  2.68386044e-02 -4.30732965e-02
 -1.18567580e-02  2.12963559e-02 -1.05296530e-01  1.57891586e-02
 -1.31371105e-02 -1.07054105e-02 -3.19080278e-02  7.00432807e-02
  1.09516419e-02  7.01154768e-02 -7.11547583e-02  2.14302093e-02
 -3.72370519e-02  8.66469666e-02 -5.96252307e-02  2.20492054e-02
 -3.78390588e-02 -5.18632587e-03  3.79696377e-02 -7.73427784e-02
  5.71298003e-02  1.26547283e-02  9.46253072e-03 -6.93125501e-02
  9.39520728e-03 -1.57989506e-02 -2.12748516e-02 -6.47183135e-02
 -2.19606739e-02 -5.71966209e-02  4.95855138e-02 -4.90569398e-02
  9.08014085e-03  5.44549562e-02  4.28819191e-03 -6.90678041e-03
 -2.36399705e-03 -2.03418899e-02 -4.11961321e-03  1.09329119e-01
  2.03724355e-02 -5.42599708e-02 -6.25843480e-02  6.87639788e-02
 -3.27595323e-02  1.57043766e-02  1.76946912e-02  7.93489162e-03
  1.49507383e-02 -4.82290573e-02 -4.02853377e-02  1.12880981e-02
 -2.48985719e-02  3.11095044e-02  3.12544629e-02  2.13891622e-02
  4.63091061e-02 -2.18624230e-02 -3.83378528e-02  1.19325392e-01
  2.87042633e-02 -4.01347689e-02 -5.04306294e-02 -2.64129671e-03
  1.65996011e-02 -3.55027430e-02  5.13963290e-02 -2.65518613e-02
 -1.29161999e-02  6.81171566e-02 -5.50778955e-02  1.37332371e-02
  4.04649042e-03 -1.41613383e-03 -8.20840299e-02  1.50388256e-01
 -9.10690334e-03  4.36543971e-02  8.43934193e-02 -3.51743288e-02
  2.81443875e-02  6.21810630e-02 -2.42718644e-02 -3.16561684e-02
  5.58967283e-03 -5.23116579e-03 -2.57064328e-02  5.88401191e-33
 -3.01789418e-02  5.40869199e-02 -1.04396660e-02  3.29472609e-02
  7.61416256e-02 -4.25566733e-02  1.12938881e-01  2.53110472e-02
 -5.15038930e-02  3.97720002e-02 -1.03526555e-01 -1.53888939e-02
  4.52464335e-02 -9.94582698e-02 -6.56605214e-02 -1.95340402e-02
  1.05110900e-02 -2.77363183e-03 -8.44541658e-03  3.66196111e-02
  5.40032797e-03 -7.69196004e-02  2.30774768e-02  4.86068130e-02
  3.58530357e-02  2.13495549e-02 -4.72456366e-02  5.58735617e-02
  1.10091381e-01 -2.33879569e-03  1.29663318e-01  5.85251953e-03
  4.70738159e-03  7.38609135e-02  3.67049165e-02  2.75944844e-02
  7.11307907e-03 -2.36474089e-02 -1.11436494e-01 -5.73186204e-02
  4.25544567e-02 -2.60424931e-02 -6.19417019e-02  2.54411325e-02
 -5.60365021e-02 -3.49557772e-02 -1.47385122e-02  3.87795866e-02
  1.22018568e-01  4.20361161e-02 -1.09598167e-01  9.63291712e-03
 -6.20079879e-03 -9.16224532e-03  4.79608066e-02  6.14891574e-03
 -9.81046818e-03  5.52120581e-02 -9.27648600e-03 -7.88070485e-02
 -3.96440877e-03 -3.19846086e-02  4.14745212e-02 -1.62643101e-02
 -8.01112596e-03 -2.66392570e-04 -8.72418433e-02  5.61550781e-02
  2.65599955e-02 -5.01522608e-02 -7.05346167e-02  8.20893496e-02
  2.46719178e-03  3.97295989e-02  1.06053865e-02 -3.52221914e-02
  2.59711547e-03 -1.55484295e-02 -3.02808378e-02 -7.83843622e-02
  2.49723289e-02  1.05509292e-02 -1.40428161e-02  9.64550972e-02
  2.74969060e-02  1.57655571e-02 -2.73281131e-02 -5.32827200e-03
  3.79639417e-02  3.55642773e-02 -1.49462353e-02 -7.38241384e-03
 -3.40935104e-02 -8.69623199e-02 -2.89557558e-02 -5.92803822e-33
 -6.00040890e-02 -5.71792759e-02 -6.94656372e-02  5.89790009e-02
  4.08459269e-02  6.92503527e-02  2.18292559e-03 -7.49300607e-03
 -4.52901535e-02  3.11000105e-02 -2.01526973e-02  5.87398596e-02
  4.56371829e-02 -5.33430912e-02  3.85738201e-02  2.99483109e-02
  8.96988623e-03 -5.84063716e-02  3.15201916e-02 -1.06047485e-02
 -2.11844146e-02  5.93249425e-02 -5.27144745e-02  3.15578952e-02
 -1.45599857e-01  1.44704543e-02  9.05262074e-04  8.93263668e-02
  1.96493487e-03  2.35668328e-02  4.82981913e-02  6.74076304e-02
 -6.67099580e-02  7.59749189e-02 -9.27324221e-03 -5.27832657e-02
  1.15500847e-02  3.88692133e-02 -1.67356189e-02  4.97956723e-02
 -5.83275827e-03 -9.28272530e-02 -2.00432092e-02 -2.98569375e-03
 -3.32073960e-03 -5.00310324e-02  2.46290267e-02  2.65418328e-02
  5.67889810e-02  8.70797969e-03  5.89219294e-02 -4.32903804e-02
 -6.80153519e-02 -3.39872278e-02 -1.42086418e-02  1.16118655e-01
  7.98590258e-02 -1.22798430e-02  5.56083880e-02  2.47978698e-02
  7.35384077e-02 -1.00664973e-01  5.99974319e-02  5.04437508e-03
  4.81604114e-02 -3.88603844e-02  1.43784154e-02  2.61449628e-02
  7.57501796e-02  2.50938814e-02 -5.57899699e-02  3.18623669e-02
  4.34809960e-02 -3.33725512e-02  1.42659098e-01  1.95586346e-02
 -3.57200019e-02  2.15054546e-02  1.07676052e-02 -1.88645087e-02
  2.74608098e-02  5.34667680e-03  4.30722833e-02 -6.90793153e-03
  1.31662823e-02 -1.70735754e-02 -6.26733527e-03  2.25818455e-02
 -1.28254086e-01 -2.36718412e-02 -1.45550650e-02 -1.92965828e-02
  1.97853539e-02 -1.01387519e-02 -5.30889072e-03 -5.75643035e-08
  3.96847874e-02  9.27705765e-02 -7.50030726e-02 -2.76104920e-02
 -1.79007519e-02  6.78466931e-02 -4.37262980e-03 -2.60746125e-02
  1.00531746e-02 -7.24324211e-02 -5.94520159e-02  3.22550870e-02
 -1.40792588e-02  6.35386705e-02  5.16806096e-02 -1.12120099e-01
 -3.25914621e-02 -2.54250434e-03 -6.89891130e-02 -6.01017922e-02
 -1.13522718e-02 -2.65409146e-02  1.15633337e-02 -6.55239373e-02
  6.47887513e-02  5.61327022e-03  6.69846311e-02  8.83763656e-02
  3.04126716e-03  1.94035936e-02 -9.38638970e-02  4.33210023e-02
  6.12597764e-02 -6.99501559e-02 -8.84278715e-02  1.34575441e-02
 -2.65395232e-02 -4.03595679e-02  4.29096185e-02  4.18037437e-02
  8.98676664e-02  8.03520232e-02 -1.45707324e-01 -1.54567705e-02
 -3.97251248e-02  4.07865569e-02  1.74507825e-03  2.74057705e-02
  1.98637694e-02  8.20878670e-02 -4.36056256e-02 -2.42892429e-02
 -4.15083347e-03  1.12042343e-03 -1.32048931e-02  8.90149793e-04
 -4.98876907e-02 -2.00191345e-02  1.14276204e-02 -2.48322729e-02
  4.80299704e-02 -1.74546205e-02 -7.35467970e-02 -4.18529138e-02]"
"- ${candyMachine.address}`);
  });

  /**
   * #1 Candy Machine ID - HSZxtWx6vgGWGsWu9SouXkHA2bAKCMtMZyMKzF2dvhrR
   */
};

findCandyMachineViaWallet();
1234567891011121314151617181920212223242526const candyMachines = await metaplex.candyMachinesV2().findAllBy({
  type: ""wallet"",
  publicKey: wallet,
});

candyMachines.map((candyMachine, index) => {
  console.log(`#${index + 1} Candy Machine ID - ${candyMachine.address}`);
});
12345678# How to find Candy Machine using its addressTo find a Candy Machine using its address, we have to use the findByAddressopen in new window function.TSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";
import { Metaplex } from ""@metaplex-foundation/js"";

const findCandyMachineViaAddress = async () => {
  const connection = new Connection(
    ""https://api.devnet.solana.com/"",
    ""confirmed""
  );
  const metaplex = new Metaplex(connection);
  const candyMachineId = new PublicKey(
    ""HSZxtWx6vgGWGsWu9SouXkHA2bAKCMtMZyMKzF2dvhrR""
  );

  const candyMachine = await metaplex.candyMachinesV2().findByAddress({
    address: candyMachineId,
  });
};

findCandyMachineViaAddress();
12345678910111213141516171819const candyMachine = await metaplex.candyMachinesV2().findByAddress({
  address: candyMachineId,
});
123# How to find minted NFTs from a Candy MachineTSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";
import { Metaplex } from ""@metaplex-foundation/js"";

const findCandyMachineMintedNfts = async () => {
  const connection = new Connection(
    ""https://api.devnet.solana.com/"",
    ""confirmed""
  );
  const metaplex = new Metaplex(connection);
  const candyMachineId = new PublicKey(
    ""HSZxtWx6vgGWGsWu9SouXkHA2bAKCMtMZyMKzF2dvhrR""
  );

  const candyMachine = await metaplex.candyMachinesV2().findMintedNfts({
    candyMachine: candyMachineId,
  });
};

findCandyMachineMintedNfts();
12345678910111213141516171819const candyMachine = await metaplex.candyMachinesV2().findMintedNfts({
  candyMachine: candyMachineId,
});
123# How to insert items into a Candy MachineTSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";
import { Metaplex } from ""@metaplex-foundation/js"";

const insertItems = async () => {
  const connection = new Connection(
    ""https://api.devnet.solana.com/"",
    ""confirmed""
  );
  const metaplex = new Metaplex(connection);
  const candyMachineId = new PublicKey(
    ""HSZxtWx6vgGWGsWu9SouXkHA2bAKCMtMZyMKzF2dvhrR""
  );

  await metaplex.candyMachines().insertItems({
    candyMachineId,
    items: [
      { name: ""My NFT #1"", uri: ""https://example.com/nft1"" },
      { name: ""My NFT #2"", uri: ""https://example.com/nft2"" },
      { name: ""My NFT #3"", uri: ""https://example.com/nft3"" },
    ],
  });
};

insertItems();
123456789101112131415161718192021222324await metaplex.candyMachines().insertItems({
  candyMachineId,
  items: [
    { name: ""My NFT #1"", uri: ""https://example.com/nft1"" },
    { name: ""My NFT #2"", uri: ""https://example.com/nft2"" },
    { name: ""My NFT #3"", uri: ""https://example.com/nft3"" },
  ],
});
12345678# How to mint an NFT from a Candy MachineBy default, the owner of the minted NFT would be metaplex.identity().publicKey. If you want to mint the NFT to some other wallet, pass that public key along with the newOwner parameterTSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";
import { Metaplex } from ""@metaplex-foundation/js"";

const mintNft = async () => {
  const connection = new Connection(
    ""https://api.devnet.solana.com/"",
    ""confirmed""
  );
  const metaplex = new Metaplex(connection);
  const candyMachineId = new PublicKey(
    ""HSZxtWx6vgGWGsWu9SouXkHA2bAKCMtMZyMKzF2dvhrR""
  );

  // by default, the owner of the minted nft would be `metaplex.identity().publicKey`. if you want to mint the nft to some other wallet, pass","[-6.26747087e-02  5.95736876e-02 -1.00739095e-02  2.36883871e-02
 -5.98769039e-02  2.67772097e-02  3.34555358e-02  1.76629890e-02
 -3.60432602e-02 -4.64495420e-02 -5.58109879e-02 -1.00860773e-02
  2.42328388e-03 -6.37630522e-02  3.45406011e-02 -1.10406857e-02
 -4.32884395e-02 -4.96258289e-02  1.60549898e-02 -4.07099817e-03
  1.26444250e-01 -3.38424519e-02  1.73987653e-02 -9.53622237e-02
 -1.33001329e-02  1.72458868e-03  1.98498089e-02 -3.19973640e-02
 -4.36429791e-02  5.23323240e-03  9.01986659e-02 -2.78315041e-02
 -3.89901251e-02 -2.88772024e-02  3.27464193e-02  4.28556055e-02
 -5.96206076e-02  2.83336472e-02  9.51834992e-02 -3.97791564e-02
  2.54398677e-02  6.84905648e-02  6.76554302e-03 -3.65005210e-02
  1.05911210e-01 -3.83792631e-02 -7.46589974e-02  2.55543496e-02
  6.93325773e-02  2.01807022e-02 -1.02670684e-01 -6.43287599e-02
  5.54460473e-03  2.10434925e-02  4.40077148e-02  1.29388524e-02
 -4.26219068e-02 -3.07280272e-02  8.20100754e-02 -9.48633533e-03
  1.52299196e-01 -8.21029767e-02  5.98390773e-02 -7.49348477e-02
  4.26478833e-02 -6.70601353e-02 -3.25573720e-02 -1.15306526e-02
 -1.25426352e-02 -6.61522448e-02  3.02284677e-02  6.27869274e-03
 -1.54171484e-02  1.13561861e-02 -2.49486906e-03 -1.59079880e-02
 -2.54801828e-02 -3.98713835e-02  4.96837683e-02  4.75226641e-02
 -2.21893992e-02 -7.43107423e-02  4.53396663e-02  7.49635920e-02
 -3.29293869e-02 -1.15995575e-02 -3.04991882e-02 -3.34280245e-02
  6.23248853e-02 -2.45008897e-02 -7.79690454e-03 -4.99694888e-03
 -3.96461785e-02  3.06877736e-02  1.16193220e-01  1.44657101e-02
 -3.87387909e-03  9.54289734e-03 -7.36281201e-02  9.16141123e-02
 -1.53172892e-02  5.71850985e-02 -2.46911421e-02 -8.36363249e-03
  5.66239990e-02  2.79809092e-03 -1.45840831e-03  1.43308437e-03
 -1.06769446e-02  6.77609909e-03 -9.11061838e-03  5.97546920e-02
  3.27722766e-02  2.90048495e-02 -6.37395829e-02 -5.81138674e-03
  7.93065056e-02  3.28634903e-02  2.58382373e-02  1.52310757e-02
  7.24504814e-02  2.28626095e-02 -4.88254800e-02 -8.36749598e-02
  1.61747616e-02  2.48763338e-02  3.83760594e-03  1.07929307e-32
  3.29002962e-02  8.43998697e-03  2.28753705e-02  4.60024215e-02
  2.21327040e-02 -3.73097509e-02  3.07562556e-02  7.96126425e-02
 -3.15845571e-02  1.12014838e-01 -5.51189706e-02  2.84163356e-02
 -2.41613165e-02 -6.79686517e-02 -1.00664601e-01  1.40449768e-02
  4.45684046e-02  1.24243051e-02 -6.60285950e-02 -1.58406526e-03
 -4.99325804e-02 -5.41514084e-02  8.40375572e-02 -1.49938324e-02
  7.63196945e-02  4.37453575e-02 -2.20481548e-02  3.70857418e-02
  6.36386722e-02  1.39566408e-02  1.01601571e-01 -8.02168250e-03
 -8.59226733e-02  4.54245694e-02  3.28595825e-02  4.12761234e-03
  1.89504493e-02 -3.13816667e-02 -1.03357010e-01 -5.58537580e-02
  2.93566287e-03 -3.58617641e-02 -6.14056475e-02 -9.32071172e-03
 -5.51812276e-02 -5.93169071e-02 -3.14761624e-02 -4.83001806e-02
  1.05575763e-01  1.07369393e-01 -6.95020482e-02  7.68486634e-02
 -1.07409298e-01  2.06221621e-02 -4.31240071e-03  1.10630086e-02
 -1.95987429e-02  7.25607648e-02  3.37141491e-02 -1.75307947e-03
 -6.14816789e-03 -3.15280892e-02  2.03003976e-02  5.36091626e-02
  4.48297299e-02 -7.65558518e-03 -4.20285910e-02 -9.80588142e-03
 -2.49183364e-02 -1.35078253e-02  3.80407460e-02  1.28095853e-04
 -5.80463384e-04  4.01899479e-02  9.05924756e-03 -3.24900867e-03
 -5.44285998e-02  6.88680797e-04 -7.88365379e-02 -8.54124501e-02
  3.45413722e-02 -8.52068979e-03 -1.16498061e-01  6.53120875e-02
  3.06242192e-03  4.87992428e-02 -4.57730517e-02 -1.00063406e-01
  7.41658211e-02 -5.88019751e-03 -5.22329099e-02  3.93649712e-02
 -9.48604494e-02 -3.35194990e-02 -9.94504318e-02 -1.02280013e-32
  3.23194005e-02 -8.12508091e-02 -3.61139607e-03 -6.69083148e-02
 -2.41334941e-02 -2.35443003e-02  8.80359858e-02 -9.94485468e-02
 -4.91891801e-02  2.33020782e-02 -9.72815324e-03  2.60249171e-02
  1.18149584e-02  9.74100083e-03  3.86345014e-02  1.72288358e-01
  3.26944590e-02 -2.47060042e-02 -2.12890701e-03 -1.99932102e-02
 -3.73180658e-02  1.15740500e-01 -7.64743015e-02  2.06841584e-02
 -1.14577390e-01  3.97479944e-02  2.68529560e-02  5.43361232e-02
  1.65388675e-03 -2.28895489e-02  6.93233088e-02  6.78912029e-02
  5.65351127e-03  3.21151987e-02 -3.91781628e-02  3.05376444e-02
  3.88971679e-02  4.31681648e-02  3.52503434e-02  7.09872916e-02
  9.64073744e-03 -6.78357854e-02 -8.13291967e-02 -3.24789882e-02
  5.90858571e-02 -4.09800150e-02 -8.63669999e-03  5.69802225e-02
  6.24089800e-02  6.06718212e-02  1.32431552e-01 -3.88096385e-02
 -1.08541057e-01 -5.33139072e-02 -1.77799817e-02  3.67312171e-02
 -2.77228002e-02 -5.61246797e-02  1.86023880e-02 -2.22148132e-02
  5.86257875e-02 -1.00739054e-01  7.85136037e-03  5.73990755e-02
  1.50991092e-03  1.38214473e-02 -4.71960828e-02 -5.38211875e-02
  7.95496553e-02 -3.22075076e-02 -1.88785214e-02  4.72250916e-02
  9.03746858e-02  5.91479766e-04  2.73513310e-02  8.49831328e-02
  3.22788879e-02  1.95767693e-02  5.66778295e-02 -1.52245993e-02
  3.80821973e-02  3.85839418e-02  8.50057453e-02 -8.32636952e-02
 -4.25975546e-02 -2.46319771e-02  5.81591427e-02  3.97022963e-02
 -1.27110168e-01 -6.47675991e-02 -6.77934662e-02  1.95516786e-03
 -7.25874305e-02 -1.13342563e-02  2.58000046e-02 -5.88881974e-08
 -2.50234008e-02  5.61197251e-02 -4.44375984e-02 -1.31128673e-02
 -2.43531652e-02  5.59713580e-02 -9.55935381e-03 -3.37065570e-02
  1.89641621e-02  1.16014155e-02 -8.49362761e-02  6.34577870e-02
  1.31318606e-02  1.07555753e-02 -8.42958689e-03 -4.34638523e-02
  1.25046438e-02 -5.86104169e-02 -5.07162586e-02  7.22424537e-02
  4.35998775e-02 -3.60590033e-02  2.63863485e-02 -2.89319754e-02
  7.43356496e-02 -7.92513415e-02 -1.71601810e-02 -9.92346182e-03
 -4.34427476e-03  3.96957248e-02 -3.64219248e-02  5.79099730e-02
  2.58891582e-02  1.63443647e-02 -4.76186462e-02 -4.45911698e-02
 -3.58421430e-02 -5.16913496e-02  5.50617091e-02 -3.13719921e-03
  9.82535258e-02 -3.84763218e-02 -5.02569079e-02 -1.18106697e-02
 -7.30713606e-02  1.97391566e-02  1.02735292e-02  2.23692339e-02
  7.28447549e-03 -8.83219577e-03 -6.87966645e-02  3.29215191e-02
  8.88038147e-03 -1.18481768e-02 -5.68963327e-02  2.45204661e-03
 -6.14774004e-02 -8.34986474e-03 -3.21422927e-02  4.44983467e-02
  1.95950326e-02 -2.49979254e-02 -4.57877778e-02 -7.76181370e-02]"
"that public key along with the `newOwner` parameter
  const candyMachine = await metaplex.candyMachinesV2().mint({
    candyMachine: candyMachineId,
    // newOwner: new PublicKey(""some-other-public-key"");
  });
};

mintNft();
123456789101112131415161718192021// by default, the owner of the minted nft would be `metaplex.identity().publicKey`. if you want to mint the nft to some other wallet, pass that public key along with the `newOwner` parameter
const candyMachine = await metaplex.candyMachinesV2().mint({
  candyMachine: candyMachineId,
  // newOwner: new PublicKey(""some-other-public-key"");
});
12345 # Offline Transaction# Sign TransactionTo create an offline transaction, you have to sign the transaction and then anyone can broadcast it on the network.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
  LAMPORTS_PER_SOL,
  Message,
} from ""@solana/web3.js"";
import * as nacl from ""tweetnacl"";
import * as bs58 from ""bs58"";

// to complete a offline transaction, I will seperate them into four steps
// 1. Create Transaction
// 2. Sign Transaction
// 3. Recover Transaction
// 4. Send Transaction

(async () => {
  // create connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // create a example tx, alice transfer to bob and feePayer is `feePayer`
  // alice and feePayer are signer in this tx
  const feePayer = Keypair.generate();
  await connection.confirmTransaction(
    await connection.requestAirdrop(feePayer.publicKey, LAMPORTS_PER_SOL)
  );
  const alice = Keypair.generate();
  await connection.confirmTransaction(
    await connection.requestAirdrop(alice.publicKey, LAMPORTS_PER_SOL)
  );
  const bob = Keypair.generate();

  // 1. Create Transaction
  let tx = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: alice.publicKey,
      toPubkey: bob.publicKey,
      lamports: 0.1 * LAMPORTS_PER_SOL,
    })
  );
  tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;
  tx.feePayer = feePayer.publicKey;
  let realDataNeedToSign = tx.serializeMessage(); // the real data singer need to sign.

  // 2. Sign Transaction
  // use any lib you like, the main idea is to use ed25519 to sign it.
  // the return signature should be 64 bytes.
  let feePayerSignature = nacl.sign.detached(
    realDataNeedToSign,
    feePayer.secretKey
  );
  let aliceSignature = nacl.sign.detached(realDataNeedToSign, alice.secretKey);

  // 3. Recover Tranasction

  // you can verify signatures before you recovering the transaction
  let verifyFeePayerSignatureResult = nacl.sign.detached.verify(
    realDataNeedToSign,
    feePayerSignature,
    feePayer.publicKey.toBytes() // you should use the raw pubkey (32 bytes) to verify
  );
  console.log(`verify feePayer signature: ${verifyFeePayerSignatureResult}`);

  let verifyAliceSignatureResult = nacl.sign.detached.verify(
    realDataNeedToSign,
    aliceSignature,
    alice.publicKey.toBytes()
  );
  console.log(`verify alice signature: ${verifyAliceSignatureResult}`);

  // there are two ways you can recover the tx
  // 3.a Recover Tranasction (use populate then addSignauture)
  {
    let recoverTx = Transaction.populate(Message.from(realDataNeedToSign));
    recoverTx.addSignature(feePayer.publicKey, Buffer.from(feePayerSignature));
    recoverTx.addSignature(alice.publicKey, Buffer.from(aliceSignature));

    // 4. Send transaction
    console.log(
      `txhash: ${await connection.sendRawTransaction(recoverTx.serialize())}`
    );
  }

  // or

  // 3.b. Recover Tranasction (use populate with signature)
  {
    let recoverTx = Transaction.populate(Message.from(realDataNeedToSign), [
      bs58.encode(feePayerSignature),
","[-6.21171705e-02  3.31722982e-02 -5.52060641e-02 -3.17252590e-03
 -7.23289177e-02  3.74733582e-02  5.68758436e-02  8.04681405e-02
 -7.89531991e-02  2.43952754e-03 -2.03862377e-02  9.16921627e-03
 -3.71962064e-03 -6.57986943e-03  6.21525086e-02 -7.35818991e-04
  2.24614888e-02 -4.27648723e-02 -1.55600859e-02  4.64589186e-02
  6.47214204e-02 -1.17720343e-01  1.32020405e-02 -5.51811084e-02
  2.55571641e-02 -3.73868495e-02  3.67231891e-02  2.79518384e-02
 -3.24017426e-04  1.65903824e-03  1.31203145e-01 -3.62754334e-03
 -3.48983146e-02  2.18265746e-02  1.59951355e-02  1.87334381e-02
  6.68158848e-03  1.21234603e-01  9.68183111e-03 -4.79108989e-02
  3.20494846e-02  4.85405177e-02 -7.73102641e-02 -1.04815643e-02
  3.09900753e-02 -7.84243941e-02 -1.68691408e-02  3.98246199e-02
  7.74469599e-02  4.11292464e-02 -3.76212858e-02 -6.10681344e-03
 -1.67748779e-02  7.11261258e-02  4.45492789e-02  5.62932827e-02
 -9.66542121e-03 -4.93928231e-02  5.32981008e-02 -5.19134924e-02
  1.52645752e-01 -3.51620503e-02  1.69817749e-02 -1.11914016e-02
  2.16341065e-03  5.96783869e-02 -4.35750894e-02 -3.66620533e-02
 -1.34031707e-02 -7.15337619e-02  8.46170932e-02 -2.78888214e-02
 -3.11238915e-02 -2.30971165e-02 -1.02015026e-02 -5.99052869e-02
  2.08220482e-02  2.79665384e-02 -7.92170875e-03  5.33136316e-02
 -6.88403659e-03  6.26764372e-02  4.96342368e-02 -1.05728069e-02
 -6.72092661e-03  4.63369675e-02 -5.04369587e-02  4.72047180e-02
 -5.21245273e-03 -2.02561449e-02 -5.45674413e-02  3.85395214e-02
  3.31702232e-02 -4.44918219e-03  8.31606761e-02 -1.99554861e-02
  8.05851258e-03  5.08116521e-02 -7.67222955e-04  6.47156984e-02
 -3.54442466e-03  8.33149105e-02 -2.72341333e-02  3.15153860e-02
  5.32421581e-02  4.29409705e-02  2.77110357e-02 -1.69392452e-02
 -6.34934241e-03  3.00706234e-02 -1.58163402e-02  4.28436138e-02
  2.96655800e-02 -6.39044540e-03 -8.49691257e-02  1.35267630e-01
 -4.37264331e-02  6.23883121e-02  5.34693189e-02 -8.50563683e-03
  5.22226542e-02 -4.80873324e-02 -7.60596767e-02 -4.30099806e-03
  3.65859494e-02  4.74606864e-02  6.10951660e-03  4.56776607e-33
 -3.65098938e-02 -5.29076438e-03 -8.86192638e-03  1.06258681e-02
  7.54524618e-02  6.48652539e-02  3.41606475e-02 -5.33159971e-02
 -3.64025263e-03  2.87187733e-02 -4.38941410e-03  6.26340508e-03
  3.80054000e-03 -6.13063872e-02 -9.90942791e-02 -3.59498337e-02
 -3.32345180e-02  2.68708561e-02  1.37182236e-01  4.91710678e-02
 -2.63957046e-02  4.21296945e-03 -8.44094250e-03  3.03744115e-02
 -8.92533362e-02  4.82124984e-02 -1.71286371e-02 -6.79564103e-03
  1.24070264e-01 -2.47161195e-04  9.06600878e-02 -1.29425321e-02
 -4.28051082e-03  1.75337996e-02  2.74593905e-02 -7.84456208e-02
  2.91264569e-03 -3.09442859e-02 -4.21874300e-02 -9.26891789e-02
  5.95111288e-02 -8.42016097e-03 -1.20076239e-01 -1.28684249e-02
 -6.41839206e-02 -5.08914478e-02 -3.63406353e-02  3.37263271e-02
  1.22010462e-01  3.01951617e-02 -3.72456312e-02  7.24133616e-03
 -7.10463598e-02  5.66886272e-03  2.53843479e-02 -3.31151709e-02
 -3.69216837e-02  1.72033086e-02  2.46761180e-02 -9.15440544e-02
 -3.75945196e-02 -1.51029862e-02  2.28990056e-02 -1.17770873e-03
  9.29194167e-02  6.59113226e-04 -6.61218017e-02 -1.82019174e-02
 -3.19040976e-02 -4.89192717e-02 -2.19068062e-02  4.18500789e-02
 -1.21462896e-01  4.48908694e-02  8.46054312e-03  1.09375652e-03
  1.20574888e-03  4.69398722e-02  4.97718155e-02 -1.67211555e-02
 -2.75896420e-03  1.00289635e-01 -1.15677968e-01  6.63870275e-02
 -1.40848039e-02  6.51400164e-03 -1.13926820e-01  1.34499241e-02
  1.64130740e-02 -5.67555502e-02 -3.39321676e-03 -8.01191851e-03
 -4.68930528e-02  1.68695301e-02 -9.81456861e-02 -4.14238185e-33
 -1.18554733e-03 -6.75402060e-02 -2.33916901e-02 -2.33978312e-02
 -4.84320447e-02  7.64824525e-02 -1.95127092e-02 -4.24235053e-02
 -6.57764673e-02  5.60161173e-02 -7.03197729e-04 -1.51911899e-02
  3.81250866e-02 -1.01855735e-03  2.69701499e-02 -2.03885678e-02
  3.44277658e-02  6.08292744e-02 -5.95788397e-02 -1.08224740e-02
 -6.67105615e-02  4.29650210e-03 -1.16195224e-01  8.58838260e-02
 -8.53569880e-02  1.09502591e-01 -9.45158582e-03  8.84378999e-02
 -9.58021544e-03  2.19272953e-02  1.03497267e-01  2.16727350e-02
 -2.58187875e-02 -1.92769226e-02  3.20319831e-02  4.36866656e-02
  9.73856449e-03  2.88409982e-02 -2.48889346e-02  1.25063583e-02
  1.92376990e-02 -1.74463112e-02  1.32966070e-02 -3.59594896e-02
  1.41471494e-02 -9.29244887e-03 -1.09492838e-02 -5.46956901e-03
 -1.72034167e-02  1.17472768e-01  4.22143266e-02 -6.87066326e-03
 -4.94967960e-02 -4.19588350e-02 -6.74288496e-02  7.81872347e-02
  6.03325330e-02 -4.26711328e-02  1.07122891e-01 -6.86938688e-02
  1.15494922e-01 -4.36190926e-02 -1.52328564e-03  2.64411997e-02
 -4.03619856e-02 -7.71499649e-02 -7.39144459e-02  4.51629981e-02
  3.44824418e-02  5.80717213e-02 -7.62669444e-02  1.06860511e-02
  8.63499343e-02 -3.12296562e-02  8.14274251e-02  6.78524841e-03
  6.83715418e-02 -4.22306452e-03  4.68756780e-02 -4.35773022e-02
  3.93964909e-03  4.11099056e-03  5.09961136e-02 -8.58643875e-02
 -5.30887581e-03 -3.93487066e-02  9.47613344e-02 -7.44150626e-03
 -5.35999518e-03 -1.45556461e-02 -1.62338410e-02 -1.38024911e-02
 -1.10753246e-01 -2.45024003e-02  8.40480328e-02 -5.18245606e-08
  7.99627881e-03  2.82695517e-02 -7.39525026e-03 -4.90773171e-02
 -7.69920275e-03  1.69475209e-02 -4.50458415e-02 -8.81876349e-02
 -2.29397975e-02 -5.71497716e-03 -1.84082687e-02  8.01234990e-02
 -2.85890009e-02  4.32815310e-03 -5.29340170e-02  1.38764398e-03
  3.10767423e-02 -1.05381027e-01 -1.45108830e-02 -3.92207457e-03
 -1.73264984e-02 -5.83508089e-02  2.77363211e-02 -2.52518263e-02
 -3.88738960e-02 -5.20864464e-02  9.09270421e-02  1.70358755e-02
  7.39931986e-02  8.28828756e-03 -7.48346373e-02  4.14009243e-02
  7.38133565e-02 -6.61897063e-02 -6.70381859e-02 -6.77798837e-02
  4.68416698e-02  2.06914004e-02  7.57936537e-02  1.63704883e-02
  1.19505459e-02  2.32453365e-02 -9.54074860e-02 -3.32163684e-02
 -9.24702063e-02 -2.62437128e-02 -2.40721498e-02  2.25290880e-02
 -2.09187083e-02  6.17254935e-02 -4.09413017e-02 -7.73736089e-02
 -1.44408261e-02 -5.09602167e-02 -7.46327713e-02 -1.49638718e-02
 -1.04578458e-01  6.58270940e-02  5.40283397e-02 -3.21384035e-02
 -1.75114088e-02 -1.62500457e-03 -5.44289388e-02 -1.18066175e-02]"
"     bs58.encode(aliceSignature),
    ]);

    // 4. Send transaction
    console.log(
      `txhash: ${await connection.sendRawTransaction(recoverTx.serialize())}`
    );
  }

  // if this process takes too long, your recent blockhash will expire (after 150 blocks).
  // you can use `durable nonce` to get rid of it.
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// there are two ways you can recover the tx
// 3.a Recover Tranasction (use populate then addSignauture)
{
  let recoverTx = Transaction.populate(Message.from(realDataNeedToSign));
  recoverTx.addSignature(feePayer.publicKey, Buffer.from(feePayerSignature));
  recoverTx.addSignature(alice.publicKey, Buffer.from(aliceSignature));

  // 4. Send transaction
  console.log(
    `txhash: ${await connection.sendRawTransaction(recoverTx.serialize())}`
  );
}

// or

// 3.b. Recover Tranasction (use populate with signature)
{
  let recoverTx = Transaction.populate(Message.from(realDataNeedToSign), [
    bs58.encode(feePayerSignature),
    bs58.encode(aliceSignature),
  ]);

  // 4. Send transaction
  console.log(
    `txhash: ${await connection.sendRawTransaction(recoverTx.serialize())}`
  );
}
123456789101112131415161718192021222324252627# Partial Sign TransactionWhen a transaction requires multiple signatures, you can partially sign it. The other signers can then sign and broadcast it on the network.Some examples of when this is useful:Send an SPL token in return for paymentSign a transaction so that you can later verify its authenticityCall custom programs in a transaction that require your signatureIn this example Bob sends Alice an SPL token in return for her payment:TSPress </> button to view full sourceimport {
  createTransferCheckedInstruction,
  getAssociatedTokenAddress,
  getMint,
  getOrCreateAssociatedTokenAccount,
} from ""@solana/spl-token"";
import {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
} from ""@solana/web3.js"";
import base58 from ""bs58"";

/* The transaction:
 * - sends 0.01 SOL from Alice to Bob
 * - sends 1 token from Bob to Alice
 * - is partially signed by Bob, so Alice can approve + send it
 */

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const alicePublicKey = new PublicKey(
    ""5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8""
  );
  const bobKeypair = Keypair.fromSecretKey(
    base58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );
  const tokenAddress = new PublicKey(
    ""Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr""
  );
  const bobTokenAddress = await getAssociatedTokenAddress(
    tokenAddress,
    bobKeypair.publicKey
  );

  // Alice may not have a token account, so Bob creates one if not
  const aliceTokenAccount = await getOrCreateAssociatedTokenAccount(
    connection,
    bobKeypair, // Bob pays the fee to create it
    tokenAddress, // which token the account is for
    alicePublicKey // who the token account is for
  );

  // Get the details about the token mint
  const tokenMint = await getMint(connection, tokenAddress);

  // Get a recent blockhash to include in the transaction
  const { blockhash } = await connection.getLatestBlockhash(""finalized"");

  const transaction = new Transaction({
    recentBlockhash: blockhash,
    // Alice pays the transaction fee
    feePayer: alicePublicKey,
  });

  // Transfer 0.01 SOL from Alice -> Bob
  transaction.add(
    SystemProgram.transfer({
      fromPubkey: alicePublicKey,
      toPubkey: bobKeypair.publicKey,
   ","[-2.86829416e-02  5.93364835e-02 -5.54094538e-02  5.95375709e-03
 -2.23438418e-03  6.20617904e-02 -9.33115091e-03 -1.53051103e-02
  8.96928757e-02  4.24747318e-02  2.32519340e-02 -3.25069181e-03
 -7.47585446e-02 -6.44286647e-02 -5.44020906e-03 -6.57532969e-03
 -3.66029516e-02  2.31998935e-02 -4.37337123e-02 -5.81744313e-03
 -1.82865013e-03 -1.14354854e-02  5.44384234e-02  3.91920358e-02
  6.80637062e-02  1.47870136e-03 -9.67992470e-03 -3.67402993e-02
 -3.42501514e-02 -5.92464209e-02  2.81788539e-02  6.16197474e-02
 -9.37812328e-02 -8.23752508e-02 -1.76490948e-03  7.29553699e-02
 -4.43629436e-02  3.25274989e-02  9.93789290e-04 -7.42339715e-02
  8.12503882e-03  5.54400682e-02 -1.19661033e-01  3.01570185e-02
  4.93617728e-02 -3.38698700e-02 -4.07496952e-02  4.50561419e-02
  8.86673853e-02 -1.49609018e-02 -4.63417498e-03  2.71424837e-02
  4.39556083e-03  9.99341533e-02 -4.45526559e-03  1.09220380e-02
  3.51986149e-03  3.05491779e-02  9.91800241e-03  4.35169414e-02
 -6.68898597e-03  2.01156195e-02  3.63399908e-02 -5.84062822e-02
  4.11020182e-02  6.26531169e-02  1.52481291e-02 -4.64177802e-02
 -3.50266835e-03  3.60708684e-02  1.53998435e-02 -5.74802496e-02
 -1.31217211e-01 -3.22102718e-02 -5.79964556e-03 -2.97946110e-02
 -3.17336880e-02  6.91358757e-04 -8.21082965e-02  6.01216517e-02
 -6.47245273e-02 -8.52951258e-02  8.31933320e-02  2.83879451e-02
 -7.27192219e-03  4.52159978e-02 -6.17994890e-02  5.08900695e-02
  6.12833258e-03 -1.26730949e-02 -6.17296323e-02  6.01190329e-02
 -3.42151895e-03  5.90100065e-02  5.88115752e-02 -3.47967888e-03
 -6.31523579e-02  9.06448141e-02 -5.44297369e-03  8.26172903e-02
  4.77932803e-02  5.07329516e-02 -8.56129453e-02 -1.83960069e-02
  2.23454759e-02 -8.71228334e-03  8.67454261e-02  2.28432915e-03
 -3.33447047e-02 -8.86701164e-04  2.53090300e-02  2.82821134e-02
  1.44261317e-02  1.82844363e-02 -1.06027378e-02  8.21551532e-02
 -6.40498847e-02  6.68483153e-02  1.69350188e-02 -1.71666464e-03
  7.11201802e-02 -7.00789550e-03 -4.14660051e-02 -2.85934098e-02
 -8.18999601e-04 -6.62817657e-02  1.79018304e-01  1.25060008e-33
 -1.41149806e-02 -7.36283744e-03  1.68652050e-02  1.56290159e-02
 -5.20628784e-03  3.79459448e-02  3.16542909e-02 -1.91534156e-04
 -2.96638794e-02  1.20084958e-04 -2.82897018e-02 -5.53884618e-02
  8.98126606e-03 -5.18302880e-02 -1.04159512e-01 -2.78839935e-02
 -1.87624265e-02  2.56342199e-02  5.05467579e-02  9.81177241e-02
  4.80308831e-02  2.13220194e-02  1.91349220e-02  3.18307942e-03
  4.46365355e-03  3.60436141e-02  3.20411026e-02 -1.01203276e-02
 -1.98490582e-02 -8.74065887e-03  7.64857456e-02  8.63900706e-02
 -9.36257467e-03  2.61435416e-02 -5.54003008e-03  1.82182677e-02
  5.45567200e-02 -6.94060116e-04 -1.04524121e-01  8.51119217e-03
  5.53225130e-02  2.29822565e-02 -5.50072752e-02 -3.84801328e-02
 -7.32250959e-02 -9.19962823e-02  4.23390716e-02 -3.53781171e-02
  8.15802217e-02  2.07403558e-03 -4.67498275e-03  5.10326661e-02
  2.00870130e-02 -3.79266702e-02 -2.06845235e-02 -4.09166701e-02
  5.93447872e-02 -3.59161869e-02 -1.57848485e-02  3.73094454e-02
  7.00727999e-02 -5.26756793e-02  5.04857227e-02 -5.56253120e-02
  3.44399102e-02  1.65330935e-02 -7.15764239e-02 -6.70830309e-02
 -9.11733583e-02 -8.91352370e-02 -3.50668319e-02 -2.24461779e-02
  6.59348220e-02  1.81225054e-02  6.84677297e-03 -3.18598561e-02
 -4.18987386e-02  1.53756524e-02 -1.99970361e-02 -2.29063667e-02
  5.39649315e-02 -1.10693716e-01 -2.30616760e-02  1.69123597e-02
  2.30343211e-02  6.35172799e-02  6.61100820e-03 -7.76662380e-02
  6.07847096e-03  6.35364372e-03 -8.81884098e-02 -7.17833545e-03
 -3.86024937e-02 -4.83806804e-03  4.04632427e-02 -2.29755716e-33
  4.47643697e-02 -3.70177925e-02 -8.04335698e-02  5.33443913e-02
  9.16217174e-03 -2.33941264e-02  7.62865972e-03  1.58671618e-01
 -6.23603053e-02 -5.66214249e-02 -8.92927218e-03 -1.78995188e-02
 -1.53085301e-02  2.27198913e-03  1.71124078e-02  5.30389021e-04
  4.32947315e-02 -5.92352524e-02  2.39662733e-03 -4.51158825e-03
  5.39964512e-02  4.89102900e-02 -1.88688654e-03  3.45797278e-02
 -3.73391621e-02  5.91928512e-02  5.20737981e-03  6.74919486e-02
 -1.11387279e-02 -9.68263745e-02 -1.33619672e-02 -3.02301981e-02
 -2.79530827e-02  1.03781940e-02  2.49118451e-02 -3.14225703e-02
  9.94208455e-02  8.30512419e-02 -1.16332003e-03  6.99858144e-02
  2.56167110e-02  2.73757316e-02 -6.61209449e-02 -3.66295576e-02
  1.10437967e-01 -1.71565581e-02 -6.06208295e-02  2.61023385e-03
  1.04889125e-01  1.24978103e-01  1.03295580e-01 -1.40236625e-02
  3.65379713e-02  1.78885330e-02  3.30099687e-02 -1.71856675e-02
  3.82179208e-02 -9.49506015e-02  4.38998342e-02 -4.64486890e-02
 -6.06365167e-02 -1.86641030e-02  1.15273036e-01 -2.64270753e-02
  1.13575421e-01  4.14954051e-02 -9.80163366e-03 -1.76655129e-02
  6.24947473e-02  4.51236106e-02 -4.72233519e-02  5.92222773e-02
 -7.00181127e-02  1.07756611e-02  1.56475186e-01  4.69567347e-03
 -6.04524948e-02 -3.98225859e-02  6.69931818e-04  2.10137852e-02
  1.80682428e-02  1.35973003e-03  3.21311429e-02  1.69320013e-02
  9.02739763e-02  2.07948452e-03 -4.07805629e-02 -2.07451880e-02
  2.18132138e-03 -3.74847949e-02 -6.13609254e-02 -1.94621775e-02
 -3.73395793e-02 -6.57489821e-02 -7.21540451e-02 -5.40289449e-08
 -9.94257927e-02 -3.63772959e-02 -5.97894639e-02  4.07714397e-03
  6.08007088e-02 -1.69244912e-02 -2.72246599e-02 -6.81489531e-04
 -2.17640381e-02 -1.34913743e-01 -4.24424037e-02 -2.67426930e-02
  2.66420729e-02 -4.85824049e-02 -2.86219269e-02 -9.10560563e-02
  1.58708487e-02 -9.96252447e-02 -2.73942482e-02 -6.32430241e-02
  1.18092485e-02  1.52947684e-03  1.32109718e-02 -4.41213585e-02
  5.00256941e-03  4.16411832e-02  1.17516905e-01  1.03543118e-01
 -1.14396699e-02 -4.82215658e-02 -8.50284845e-02 -9.19115823e-03
  9.13675949e-02 -5.07820807e-02 -9.01222676e-02 -9.87411849e-03
  5.61316032e-03 -1.72586236e-02  1.68356244e-02  2.18902547e-02
  3.78460288e-02  3.83767001e-02 -1.10893231e-02 -1.56505797e-02
  6.78845216e-03 -4.69779074e-02 -2.17356905e-02  3.07707563e-02
  3.42907500e-03 -3.27594914e-02  9.98752378e-03 -1.02915606e-02
 -3.85469906e-02  6.23049289e-02 -4.66943681e-02 -8.21775943e-02
  6.43320903e-02 -4.46349345e-02  6.15144596e-02  3.61966714e-02
  3.34224626e-02 -1.03206351e-01 -6.61609396e-02 -6.85943812e-02]"
"  lamports: 0.01 * LAMPORTS_PER_SOL,
    })
  );

  // Transfer 1 token from Bob -> Alice
  transaction.add(
    createTransferCheckedInstruction(
      bobTokenAddress, // source
      tokenAddress, // mint
      aliceTokenAccount.address, // destination
      bobKeypair.publicKey, // owner of source account
      1 * 10 ** tokenMint.decimals, // amount to transfer
      tokenMint.decimals // decimals of token
    )
  );

  // Partial sign as Bob
  transaction.partialSign(bobKeypair);

  // Serialize the transaction and convert to base64 to return it
  const serializedTransaction = transaction.serialize({
    // We will need Alice to deserialize and sign the transaction
    requireAllSignatures: false,
  });
  const transactionBase64 = serializedTransaction.toString(""base64"");
  return transactionBase64;

  // The caller of this can convert it back to a transaction object:
  const recoveredTransaction = Transaction.from(
    Buffer.from(transactionBase64, ""base64"")
  );
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899// 1. Add an instruction to send the token from Bob to Alice
transaction.add(
  createTransferCheckedInstruction(
    bobTokenAddress, // source
    tokenAddress, // mint
    aliceTokenAccount.address, // destination
    bobKeypair.publicKey, // owner of source account
    1 * 10 ** tokenMint.decimals, // amount to transfer
    tokenMint.decimals // decimals of token
  )
);

// 2. Bob partially signs the transaction
transaction.partialSign(bobKeypair);

// 3. Serialize the transaction without requiring all signatures
const serializedTransaction = transaction.serialize({
  requireAllSignatures: false,
});

// 4. Alice can deserialize the transaction
const recoveredTransaction = Transaction.from(
  Buffer.from(transactionBase64, ""base64"")
);
123456789101112131415161718192021222324# Durable NonceRecentBlockhash is an important value for a transaction. Your transaction will be rejected if you use an expired recent blockhash (after 150 blocks). You can use durable nonce to get a never expired recent blockhash. To trigger this mechanism, your transaction mustuse a nonce stored in nonce account as a recent blockhashput nonce advance operation in the first instruction# Create Nonce AccountTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  NONCE_ACCOUNT_LENGTH,
  SystemProgram,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const feePayer = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  const nonceAccountAuth = Keypair.generate();

  let nonceAccount = Keypair.generate();
  console.log(`nonce account: ${nonceAccount.publicKey.toBase58()}`);

  let tx = new Transaction().add(
    // create nonce account
    SystemProgram.createAccount({
      fromPubkey: feePayer.publicKey,
      newAccountPubkey: nonceAccount.publicKey,
      lamports: await connection.getMinimumBalanceForRentExemption(
        NONCE_ACCOUNT_LENGTH
      ),
      space: NONCE_ACCOUNT_LENGTH,
      programId: SystemProgram.programId,
    }),
    // init nonce account
    SystemProgram.nonceInitialize({
      noncePubkey: nonceAccount.publicKey, // nonce account pubkey
   ","[-7.85332732e-03  4.82275002e-02 -5.58592565e-02 -2.67082565e-02
 -8.57205912e-02  4.21306118e-02  9.74841975e-03  1.35439828e-01
 -3.87686118e-02  6.85628876e-02 -1.01576652e-02 -3.73176765e-03
  3.27945268e-03 -6.15049191e-02  6.25451729e-02  7.89492391e-03
 -4.54794280e-02  8.61422941e-02 -2.80081085e-03  5.50827496e-02
  2.52777245e-02 -9.65067893e-02  2.37444714e-02 -7.57431462e-02
  7.67357647e-02  1.99999567e-02  1.56633053e-02 -3.68335145e-03
 -7.10554495e-02  5.19415073e-04  8.34249929e-02  5.79223186e-02
 -6.16858378e-02 -2.72870660e-02  2.35518994e-04  1.03762880e-01
 -2.27060411e-02 -2.06066500e-02  7.48225227e-02 -8.40373412e-02
 -1.78835131e-02  5.81583194e-02 -7.79548287e-02 -3.85146774e-02
  1.01694353e-02 -8.57131742e-03  3.33523750e-02  2.71659493e-02
  1.19361584e-03 -6.14804663e-02  7.02540623e-03  1.22598894e-02
  1.19707137e-02  1.28606230e-01 -7.48557970e-02  3.51405740e-02
 -2.55598850e-03 -9.80315264e-04  3.62601057e-02  2.90664639e-02
  1.43774524e-02  3.96582708e-02  1.34359850e-02 -7.38466978e-02
 -8.70228335e-02 -3.37955616e-02 -2.34549213e-03 -3.20951603e-02
  3.20769921e-02 -1.01447068e-02  3.02990724e-04 -5.19226938e-02
 -1.20310396e-01 -1.14881564e-02 -4.86139916e-02 -2.95325387e-02
 -3.67584918e-03  7.74690136e-02 -6.32943958e-02  2.57249326e-02
  1.42247444e-02 -3.70506532e-02  1.19570807e-01  7.12608397e-02
  2.18554754e-02  4.08253185e-02  5.63133974e-03  8.66132826e-02
 -7.50084296e-02 -3.00505534e-02 -8.03394169e-02 -1.64836124e-02
  5.27161248e-02 -5.10490835e-02  6.94718435e-02 -4.86256927e-02
  2.53633372e-02  4.27179784e-03  4.88213263e-02  7.62340501e-02
  3.82668003e-02  3.97970900e-02 -3.32212709e-02 -2.56280880e-02
  6.54290989e-02  3.58549729e-02  5.62196672e-02  2.62190215e-02
  4.95652296e-03 -3.87471952e-02  5.57000982e-03  5.77228405e-02
 -7.67640322e-02  1.42379738e-02 -1.59162618e-02  4.45013382e-02
 -1.99942831e-02  2.43358221e-02 -1.42167872e-02 -2.89259758e-03
  1.13709301e-01 -1.52913341e-02 -9.91314556e-03  8.61982852e-02
 -3.21733393e-02 -1.59414005e-04  9.13704336e-02  4.63754011e-33
 -1.86525248e-02  2.00784206e-02 -2.63572130e-02 -4.68543656e-02
 -3.64419147e-02  7.78150484e-02  5.16893640e-02  5.15974350e-02
  6.49727741e-03  1.06585096e-03 -1.02869617e-02 -6.59974590e-02
 -7.28270039e-03  1.10514779e-02 -1.11312129e-01 -1.70364138e-02
 -5.03586754e-02  5.39289676e-02  1.00861967e-01  1.77831482e-02
 -4.07103114e-02  1.18423002e-02 -6.30474314e-02  2.43103784e-02
 -1.69565212e-02  2.92034019e-02 -2.58560274e-02 -1.88156012e-02
  3.57916602e-03 -1.72995664e-02  3.87428999e-02  5.29217860e-03
 -1.92876961e-02  1.92288007e-03  4.63902354e-02 -2.37657949e-02
  8.00760556e-03 -7.57133216e-03 -8.89747962e-02 -4.27912176e-02
  2.35793907e-02 -3.43860411e-05 -5.99833913e-02 -4.09543142e-03
 -1.90086793e-02  2.80644204e-02 -9.22765397e-03  1.02923727e-02
  1.93935663e-01  1.15293544e-02 -8.89913663e-02  6.70332089e-02
  2.44373567e-02 -5.53734973e-03  4.88996366e-03 -7.17995763e-02
  3.46707739e-02  1.85734592e-02 -1.88816935e-02 -4.68918681e-02
 -1.94159970e-02  1.84005182e-02  2.71891970e-02 -5.06665185e-02
  2.33944897e-02  7.99499732e-03 -2.43747197e-02 -4.35236730e-02
 -6.41994774e-02 -4.10690531e-02 -7.29923770e-02  6.63995743e-02
  2.70309262e-02  4.99125309e-02 -1.95332207e-02  4.45697270e-02
  4.32851352e-02  2.82253083e-02  1.31062353e-02 -9.29304510e-02
  3.37980241e-02  3.24463807e-02 -1.63621772e-02 -3.18042822e-02
  2.99206413e-02  6.01451509e-02 -5.99352308e-02 -3.57178003e-02
 -8.20893273e-02 -5.67110404e-02  7.87968934e-02 -6.22642264e-02
 -3.89857627e-02  3.62172090e-02 -2.58558355e-02 -4.48954757e-33
 -1.18293613e-02  7.98138883e-03 -1.25625851e-02  1.78814176e-02
  2.69654719e-03  3.06911040e-02  3.64749320e-02  2.17572730e-02
 -6.52912706e-02  1.91444531e-02 -7.00285807e-02 -3.89028266e-02
 -9.27197281e-03  9.50885005e-04  1.52352182e-02 -4.75451499e-02
 -4.55909632e-02  2.76961811e-02  1.53790815e-02 -1.18863042e-02
  2.07922272e-02  4.51121405e-02 -3.90285021e-03  3.10348701e-02
 -7.14217052e-02  6.59302771e-02  8.13712645e-03  5.33955134e-02
 -8.04050639e-03 -2.18080021e-02  7.06671700e-02 -1.45473834e-02
  4.52443585e-02 -2.79897302e-02 -4.43240479e-02 -1.03952974e-01
  1.14829689e-02  6.21167347e-02 -2.43192762e-02  5.82611151e-02
  3.85148712e-02 -7.13739321e-02  1.58910174e-02 -9.74567980e-03
  9.44036320e-02 -5.46820462e-02 -2.22236756e-02  2.57772338e-02
  6.66397586e-02  9.63803455e-02  5.08769415e-02  6.66527674e-02
 -7.66292438e-02 -3.82395834e-02 -1.49362963e-02  2.82920618e-02
  9.38407332e-02 -3.19564790e-02  1.21966358e-02 -7.88975134e-02
 -8.71486031e-03 -2.33342014e-02  1.54429466e-01  2.07816828e-02
  5.88977486e-02 -1.09056178e-02 -1.51564833e-02  3.00215534e-03
 -5.07172979e-02  3.98328751e-02  7.91582465e-03 -2.54075918e-02
  8.39206874e-02  6.34544641e-02  1.90399632e-01  1.13819875e-02
 -3.58439842e-03 -5.06592169e-02  4.05951738e-02 -2.45735422e-02
 -2.22045481e-02 -8.41465965e-03  3.54338139e-02  3.79546471e-02
 -4.53229481e-03 -5.12281582e-02  8.26169737e-03 -1.17905419e-02
 -6.29794374e-02 -4.10977751e-02 -1.35719338e-02 -5.51254395e-03
  1.37533937e-02 -8.75528976e-02  6.09658435e-02 -5.59432358e-08
  2.89114732e-02 -2.06078812e-02 -9.13055241e-02  5.55955879e-02
  6.82367058e-03  4.69770767e-02 -4.29874212e-02 -2.43303515e-02
 -3.05036120e-02 -2.07515396e-02 -1.07887879e-01  6.63943812e-02
 -2.59527024e-02 -2.32535601e-02 -2.86078472e-02 -3.35259810e-02
  8.55752081e-02 -1.37696251e-01 -5.37410676e-02 -3.82489152e-02
 -8.28262698e-03 -7.94473439e-02  6.59543946e-02 -7.00525716e-02
  3.14988457e-02 -3.35574001e-02  3.35880741e-02  2.14157566e-01
  3.21241319e-02 -7.85776675e-02 -6.94905147e-02  5.89365251e-02
  1.67187061e-02 -4.94189188e-02 -6.31368309e-02 -1.69007871e-02
  2.60141678e-02 -8.65022000e-03  1.83628947e-02 -2.60650981e-02
 -2.43371986e-02  2.13850513e-02 -5.55725545e-02  3.10800914e-02
 -1.27541674e-02 -1.31175630e-02 -6.00156421e-03  2.60135848e-02
  2.72180745e-03  3.36654224e-02  9.62322485e-03 -5.64299002e-02
  7.35736173e-03  1.13861710e-02 -1.18474029e-01  5.15066320e-03
 -8.63742903e-02 -2.95304018e-03  5.60972020e-02 -2.20188070e-02
  3.20146121e-02  3.08530796e-02 -3.78287919e-02 -6.50893897e-02]"
"  authorizedPubkey: nonceAccountAuth.publicKey, // nonce account authority (for advance and close)
    })
  );

  console.log(
    `txhash: ${await connection.sendTransaction(tx, [feePayer, nonceAccount])}`
  );
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849let tx = new Transaction().add(
  // create nonce account
  SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    newAccountPubkey: nonceAccount.publicKey,
    lamports: await connection.getMinimumBalanceForRentExemption(
      NONCE_ACCOUNT_LENGTH
    ),
    space: NONCE_ACCOUNT_LENGTH,
    programId: SystemProgram.programId,
  }),
  // init nonce account
  SystemProgram.nonceInitialize({
    noncePubkey: nonceAccount.publicKey, // nonce account pubkey
    authorizedPubkey: nonceAccountAuth.publicKey, // nonce account authority (for advance and close)
  })
);

console.log(
  `txhash: ${await connection.sendTransaction(tx, [feePayer, nonceAccount])}`
);
123456789101112131415161718192021# Get Nonce AccountTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  NonceAccount,
} from ""@solana/web3.js"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const nonceAccountPubkey = new PublicKey(
    ""7H18z3v3rZEoKiwY3kh8DLn9eFT6nFCQ2m4kiC7RZ3a4""
  );

  let accountInfo = await connection.getAccountInfo(nonceAccountPubkey);
  let nonceAccount = NonceAccount.fromAccountData(accountInfo.data);
  console.log(`nonce: ${nonceAccount.nonce}`);
  console.log(`authority: ${nonceAccount.authorizedPubkey.toBase58()}`);
  console.log(`fee calculator: ${JSON.stringify(nonceAccount.feeCalculator)}`);
})();
12345678910111213141516171819202122let accountInfo = await connection.getAccountInfo(nonceAccountPubkey);
let nonceAccount = NonceAccount.fromAccountData(accountInfo.data);
12# Use Nonce AccountTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
  SystemProgram,
  NonceAccount,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const feePayer = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const nonceAccountAuth = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const nonceAccountPubkey = new PublicKey(
    ""7H18z3v3rZEoKiwY3kh8DLn9eFT6nFCQ2m4kiC7RZ3a4""
  );
  let nonceAccountInfo = await connection.getAccountInfo(nonceAccountPubkey);
  let nonceAccount = NonceAccount.fromAccountData(nonceAccountInfo.data);

  let tx = new Transaction().add(
    // nonce advance must be the first insturction
    SystemProgram.nonceAdvance({
      noncePubkey: nonceAccountPubkey,
      authorizedPubkey: nonceAccountAuth.publicKey,
    }),
    // after that, you do what you really want to do, here we append a transfer instruction as an example.
    SystemProgram.transfer({
      fromPubkey: feePayer.publicKey,
      toPubkey: nonceAccountAuth.publicKey,
      lamports: 1,
    })
  );
  // assign `nonce` as recentBlockhash
  tx.recentBlockhash = nonceAccount.nonce;
  tx.feePayer = feePayer.publicKey;
  tx.sign(
    feePayer,
    nonceAccountAuth
  ); /* fee payer + nonce account authority + ... */

  console.log(`txhash: ${await connection.sendRawTransaction(tx.serialize())}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960let tx = new Transaction().add(
  // nonce advance must be the first insturction
  SystemProgram.nonceAdvance({
    noncePubkey: nonceAccountPubkey,
    authorizedPubkey: nonceAccountAuth.publicKey,
  }),
  // after that, you do what you really want to do, here we append a transfer instruction as an example.
  SystemProgram.transfer({
    fromPubkey: feePayer.publicKey,
    toPubkey:","[-6.36330899e-03  1.01816719e-02 -8.95114839e-02 -1.39644882e-02
 -2.11684089e-02 -5.22137284e-02  2.50013378e-02 -2.40927301e-02
  8.74940082e-02  6.04106896e-02  9.87937823e-02 -1.41587019e-01
 -1.71530955e-02 -3.80152911e-02 -5.56990355e-02 -5.40632568e-03
  2.59296000e-02 -8.77915025e-02  8.76351609e-04  1.23796817e-02
  7.26716686e-03 -3.21521908e-02  2.67774519e-02 -2.13606581e-02
  3.11848782e-02 -9.35680047e-02 -4.60463613e-02 -1.39943487e-03
  4.96071298e-03 -1.19623933e-02  2.02475432e-02 -2.28661001e-02
 -8.87115821e-02 -4.35835309e-02  4.72087413e-02  7.97075592e-03
  1.78387146e-02 -5.43092117e-02  3.74094001e-03 -1.07674266e-03
  3.16526741e-02  3.06137130e-02 -8.98989961e-02  4.48652767e-02
  4.12469059e-02 -5.07211536e-02 -5.24057001e-02 -2.52761832e-03
 -2.66313087e-04 -1.78640578e-02 -4.56012897e-02  3.43273953e-02
 -2.51497515e-02  6.80060238e-02 -4.83831689e-02  2.90147178e-02
  5.98811768e-02 -4.27953294e-03  1.81107447e-02 -2.84167510e-02
  7.34974816e-02 -4.00161967e-02  2.82939840e-02 -5.19656502e-02
 -4.86549363e-02  1.01779357e-01  6.47141505e-03 -1.87911075e-02
 -1.70846786e-02 -6.73495531e-02  1.80307608e-02  6.28268719e-03
 -1.30368367e-01  2.77227852e-02 -2.79799998e-02 -2.82718670e-02
 -8.21345858e-03  6.81812540e-02 -5.79531752e-02 -2.57946942e-02
 -5.48529625e-02 -4.11388800e-02  1.70572288e-02  6.35127947e-02
  3.18360329e-02 -2.51975865e-03 -4.70793955e-02 -1.87623091e-02
 -1.34616550e-02  2.63265688e-02 -3.05580981e-02  9.48625728e-02
 -6.20295405e-02 -1.93451047e-02  3.54552418e-02 -6.30281027e-03
 -1.74860787e-02  8.57978687e-02 -7.66451657e-02  7.15067983e-02
  1.97137389e-02  2.21335776e-02 -8.85106549e-02  1.73332430e-02
  5.92794903e-02  6.45178258e-02  7.77611658e-02 -5.77981696e-02
  4.21968400e-02  3.17661017e-02  4.03142609e-02  5.80762699e-02
 -4.60412130e-02  4.15975787e-02  5.09592472e-03  1.00730099e-01
 -3.21565270e-02  5.55480495e-02  4.71809991e-02  5.61684184e-02
  7.86204264e-02  2.49064658e-02 -6.59879223e-02 -1.35478145e-02
 -4.85903211e-02 -1.28394030e-02  5.20268790e-02  1.09844400e-32
 -3.02584912e-03 -7.50259310e-03  2.62117442e-02 -1.83881447e-02
 -8.55071563e-03  3.77137884e-02  2.91867387e-02  2.03477293e-02
 -5.29545024e-02  1.11063868e-02 -6.82673082e-02 -3.44100595e-02
  3.77068408e-02 -8.35271850e-02 -5.93246310e-04 -8.13254118e-02
  2.83863507e-02 -9.22762975e-03  1.62222922e-01  2.74080131e-02
  1.36787500e-02 -3.16634099e-03  6.71596127e-03 -3.62834968e-02
 -2.67756879e-02  1.41333826e-02 -1.10094562e-01 -4.92185690e-02
  1.46853337e-02  2.70325746e-02  3.93416248e-02  4.89348732e-02
  3.66726890e-02  5.00997864e-02  5.76955825e-02 -7.27719963e-02
 -1.36138906e-03 -2.49300711e-02 -5.48450090e-02 -3.62673923e-02
  2.24121921e-02 -2.43059117e-02 -4.21400853e-02 -2.84272619e-02
 -9.34617147e-02 -9.00210217e-02  3.57642360e-02  2.59913155e-03
  9.23138261e-02  5.70551530e-02 -4.79578264e-02  2.56492924e-02
 -1.65021513e-02 -7.30685070e-02  4.57192026e-03 -5.82545809e-02
 -6.28571911e-03 -2.60860450e-03 -1.77626908e-02 -5.44183562e-03
  2.56265514e-02 -2.06060093e-02 -3.26896794e-02  1.29515463e-02
 -1.85593497e-03 -3.76924649e-02 -1.03190266e-01 -6.23956742e-03
 -9.28899553e-03 -3.37344222e-02 -4.19686735e-02  5.68582527e-02
 -1.31352004e-02  3.87839116e-02 -2.29720417e-02 -7.40299523e-02
  1.13452906e-02  4.81436625e-02  2.65667913e-03 -1.86760561e-03
  4.38320003e-02  1.06851170e-02 -6.23050518e-03 -8.71359929e-03
 -5.69038130e-02  9.76458788e-02 -2.70307269e-02  6.62896484e-02
  1.96154714e-02 -1.92727032e-03  7.50199407e-02  6.66718232e-03
 -5.83321564e-02  9.79977194e-03 -1.35494564e-02 -1.20787871e-32
 -1.27858361e-02 -3.52130793e-02 -5.83145805e-02 -7.17194304e-02
  3.64252813e-02  4.75270189e-02  1.12655051e-02 -5.79350395e-03
 -2.54960675e-02 -4.88095209e-02  7.24016726e-02  2.46891137e-02
  2.67414507e-02 -1.97534971e-02  1.02077119e-01 -7.16855228e-02
 -1.25869894e-02  4.97991592e-02  1.75171867e-02 -2.96356305e-02
  5.18171452e-02  8.80110562e-02 -2.92790551e-02  6.27329051e-02
 -7.67547563e-02 -6.53249794e-04 -1.00542039e-01  5.20499609e-02
 -4.80258688e-02 -3.10418513e-02  5.08738607e-02  1.27760218e-02
 -3.31847817e-02  1.99659001e-02 -2.49566697e-02 -9.97969210e-02
  8.56132340e-03  1.02470592e-01 -5.50747011e-03  2.83056535e-02
  3.69312465e-02  2.73250532e-03  2.10872628e-02 -5.60926646e-02
 -1.39760943e-02  2.49869991e-02 -2.20363867e-02 -6.18512742e-02
  3.44772041e-02  6.27299920e-02  1.06308535e-02 -2.43528988e-02
  2.15067808e-02  4.71450612e-02 -4.15003672e-02  9.51392502e-02
  1.02961518e-01 -4.99804169e-02  1.56608224e-01 -8.73646513e-02
  4.73060608e-02 -1.46278348e-02 -3.70744010e-03  4.46280688e-02
  1.28762648e-01  1.77478231e-02 -2.27451436e-02  7.13899210e-02
  5.97498938e-02  1.94348600e-02 -5.87433688e-02 -9.52197611e-03
 -6.32407442e-02 -5.63008152e-02  3.06287240e-02 -1.64956190e-02
  1.14160012e-02 -2.98068542e-02 -3.04452535e-02 -2.31775176e-02
  1.77025758e-02  4.38502356e-02  8.84802139e-04 -1.24234399e-02
 -1.21675432e-02 -4.91836667e-02 -1.54152103e-02 -5.29275686e-02
 -2.14505494e-02  3.81993614e-02 -2.79040821e-02 -2.19167899e-02
 -8.45531747e-02 -3.65536436e-02  3.67464386e-02 -6.41810587e-08
  3.41019535e-04  5.20285731e-03 -7.95511715e-03  8.00046325e-02
  1.15674779e-01  2.61354353e-02 -6.36503007e-03 -7.64657483e-02
 -4.83537689e-02 -5.37816137e-02 -3.32409851e-02 -9.03793890e-03
 -3.41340993e-03 -8.53538886e-02  6.51328266e-03 -4.87272516e-02
 -3.33335958e-02 -7.06738010e-02 -2.34016590e-03 -8.64417404e-02
 -4.61283736e-02 -4.01987061e-02 -2.26628780e-02 -7.37696737e-02
 -7.61461407e-02  2.02013347e-02  1.24123193e-01  1.35589138e-01
  6.27254322e-02 -4.02066112e-02 -8.96885917e-02 -4.14147926e-03
 -1.52659584e-02 -5.91907427e-02 -1.20283529e-01  8.70180428e-02
  2.73104175e-03  1.38191748e-02 -2.65257452e-02 -3.41191068e-02
 -8.04778305e-04  6.47211820e-02  2.78369896e-02  3.93954031e-02
  4.14810702e-02  1.70577597e-02 -4.11723852e-02  4.05618362e-02
  1.27375945e-01 -1.64923631e-02  3.08767217e-03 -2.14715358e-02
  8.56525614e-04  1.50531679e-01 -5.71960136e-02 -1.15416041e-02
  1.73179060e-02 -1.19953649e-02 -2.69549694e-02  4.56966050e-02
  1.68475643e-01 -5.75163178e-02 -2.57667247e-02 -3.40216309e-02]"
"nonceAccountAuth.publicKey,
    lamports: 1,
  })
);
// assign `nonce` as recentBlockhash
tx.recentBlockhash = nonceAccount.nonce;
tx.feePayer = feePayer.publicKey;
tx.sign(
  feePayer,
  nonceAccountAuth
); /* fee payer + nonce account authority + ... */

console.log(`txhash: ${await connection.sendRawTransaction(tx.serialize())}`);
12345678910111213141516171819202122 # Name Service# Name registryThe name registry stores information about the domain name. It is made of two things:The headerThe dataThe data for a domain name is always prefixed by the header, below is the structure of the header in JS:TSPress </> button to view full sourceimport { PublicKey } from ""@solana/web3.js"";
import { Schema } from ""borsh"";

export class NameRegistryState {
  parentName: PublicKey;
  owner: PublicKey;
  class: PublicKey;
  data: Buffer | undefined;

  static HEADER_LEN = 96;

  static schema: Schema = new Map([
    [
      NameRegistryState,
      {
        kind: ""struct"",
        fields: [
          [""parentName"", [32]],
          [""owner"", [32]],
          [""class"", [32]],
        ],
      },
    ],
  ]);
  constructor(obj: {
    parentName: Uint8Array;
    owner: Uint8Array;
    class: Uint8Array;
  }) {
    this.parentName = new PublicKey(obj.parentName);
    this.owner = new PublicKey(obj.owner);
    this.class = new PublicKey(obj.class);
  }
}
12345678910111213141516171819202122232425262728293031323334export class NameRegistryState {
  parentName: PublicKey;
  owner: PublicKey;
  class: PublicKey;
  data: Buffer | undefined;

  static HEADER_LEN = 96;

  static schema: Schema = new Map([
    [
      NameRegistryState,
      {
        kind: ""struct"",
        fields: [
          [""parentName"", [32]],
          [""owner"", [32]],
          [""class"", [32]],
        ],
      },
    ],
  ]);
  constructor(obj: {
    parentName: Uint8Array;
    owner: Uint8Array;
    class: Uint8Array;
  }) {
    this.parentName = new PublicKey(obj.parentName);
    this.owner = new PublicKey(obj.owner);
    this.class = new PublicKey(obj.class);
  }
}
12345678910111213141516171819202122232425262728293031# Resolving SOL domains.SOL domains are unique, human-friendly domain names that convert to publicKeys. Many wallets use these as another option to send tokens or SOL. You can convert .SOL domains to their publicKey with the following:TSPress </> button to view full sourceimport {
  getHashedName,
  getNameAccountKey,
  NameRegistryState,
} from ""@bonfida/spl-name-service"";

import { Connection, clusterApiUrl, PublicKey } from ""@solana/web3.js"";

(async () => {
  const domain = ""levi.sol"";
  const hashedName = await getHashedName(domain.replace("".sol"", """"));
  const nameAccountKey = await getNameAccountKey(
    hashedName,
    undefined,
    new PublicKey(""58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx"") // SOL TLD Authority
  );
  const owner = await","[-9.91859138e-02  4.12500203e-02 -7.58534297e-02 -1.82611160e-02
  1.44016417e-02 -8.36601183e-02  3.75650451e-02 -4.16956432e-02
  9.23177004e-02  2.28199251e-02  4.34064232e-02 -7.29623511e-02
 -2.00046226e-02 -6.87826946e-02 -3.05404812e-02 -7.07204640e-03
 -5.80226704e-02 -8.29599723e-02 -3.58992815e-03 -9.76297706e-02
  1.65136401e-02  2.60617416e-02  1.30122406e-02 -2.94903275e-02
  2.13722065e-02 -5.20739108e-02 -2.56188177e-02 -2.50493246e-03
 -2.96221115e-03 -2.86846552e-02  4.41067998e-04 -1.07284375e-02
 -1.31277904e-01 -7.92532135e-03 -1.65668726e-02  8.65225494e-03
 -6.51297858e-03  3.35277803e-02  6.62730588e-03 -1.91934258e-02
  2.88363788e-02  2.60018976e-03 -4.80274372e-02 -2.08675414e-02
  7.70960562e-03 -2.65432559e-02 -3.30677554e-02  4.12824191e-02
 -3.18358503e-02  7.20236776e-03 -3.28748003e-02 -2.91674994e-02
 -4.87820245e-02  5.98660745e-02 -1.20110298e-02  2.14870572e-02
 -2.76898518e-02  2.06032060e-02  2.08417550e-02 -3.57337855e-02
  1.64181944e-02 -2.67411284e-02  2.04678401e-02 -6.30376786e-02
  3.23031992e-02 -1.40291508e-02 -4.18838933e-02  9.38924868e-03
  8.82251840e-03 -6.80135041e-02  2.92523261e-02 -4.16344404e-03
 -6.67379647e-02  5.44605078e-03  2.42730416e-02 -2.59690639e-02
 -4.50218543e-02  9.02127177e-02 -5.82167618e-02 -1.26575783e-01
 -4.13111970e-02 -4.59871031e-02 -4.86339256e-03  1.13607742e-01
  2.22014524e-02  3.90794165e-02 -4.30874191e-02 -3.55168059e-02
  9.23140999e-03  1.18718781e-02 -3.68514508e-02  1.97476298e-02
 -2.15140940e-03  2.34830007e-02  9.08696931e-03  2.80135926e-02
 -4.17026579e-02  8.03533867e-02 -8.11761543e-02  1.29649088e-01
  5.24780713e-03  6.35649404e-03 -7.87165090e-02  3.33223715e-02
  7.60671943e-02 -4.78488989e-02  5.17918877e-02  9.09510162e-03
  5.39904609e-02  4.85850647e-02  2.61854436e-02  7.31394887e-02
 -3.59767079e-02  4.79239924e-03 -6.95833787e-02 -3.20375375e-02
  1.77483633e-02  1.93003025e-02  9.76470038e-02 -6.02134736e-03
  7.90227950e-02  2.23396346e-02 -7.99239501e-02 -7.03622997e-02
  3.54248993e-02 -1.43957771e-02  1.04899794e-01  1.30522896e-32
  1.27553744e-02  4.05030139e-02 -1.67577807e-02 -1.51746534e-02
 -6.21358491e-02  7.16287643e-03  5.68880551e-02  3.73638161e-02
 -4.78954203e-02  1.15262151e-01 -3.82141285e-02  2.88360231e-02
  6.24348707e-02 -7.73006827e-02 -3.82244475e-02 -5.17966524e-02
  3.12727131e-02  1.44725554e-02  7.15235621e-02  5.83580136e-02
 -4.81661642e-03  5.72341122e-02  3.25064287e-02 -1.26468549e-02
 -1.47625962e-02 -1.91661622e-03 -8.20822492e-02 -1.21032009e-02
 -3.26676480e-02  4.06539589e-02  8.04327726e-02  2.73024309e-02
  4.95699607e-02  6.96658716e-02  1.17289893e-01  9.47771780e-03
  7.93918595e-02 -6.75588474e-02 -8.13971311e-02 -1.41709158e-02
  4.52553071e-02 -3.36172916e-02 -8.37472975e-02  2.20806934e-02
 -1.33809805e-01 -5.69580235e-02  3.39450054e-02 -6.30390421e-02
  9.95151028e-02  1.61964092e-02 -5.65771423e-02  2.02184692e-02
  6.52572606e-03 -8.28486681e-03  1.98754240e-02 -3.22293714e-02
 -7.30665401e-02  1.38813322e-02 -4.18476434e-03 -7.56355748e-02
  2.31620520e-02 -6.22817725e-02 -3.05654015e-02  3.02580073e-02
  7.85305072e-03 -6.54433593e-02 -3.39123942e-02  1.19511830e-02
 -1.89925488e-02 -7.66779259e-02  3.47408392e-02  4.98493761e-02
  4.06797417e-02  8.25898647e-02  3.25829387e-02 -2.63620056e-02
 -7.39317853e-03  7.46575445e-02 -1.93488188e-02 -1.12246079e-02
  8.43400359e-02 -4.81990688e-02 -6.58670068e-02  5.70038967e-02
  4.69111465e-03  1.05332494e-01  8.53621960e-03  1.78771634e-02
 -1.36161735e-02 -1.35729965e-02  3.07016578e-02  1.68731362e-02
 -6.69079721e-02 -3.21838818e-02 -6.13080449e-02 -1.12056460e-32
  1.05255200e-02 -4.63313609e-02 -7.18321502e-02 -2.69471724e-02
 -2.14072987e-02 -6.98465761e-03  3.19965035e-02 -1.06122792e-02
 -1.23751117e-02 -6.21716492e-02  9.02605429e-02  2.08763722e-02
 -5.02886549e-02 -5.47497300e-03  9.13233608e-02  7.74678886e-02
 -1.41181413e-03 -2.42199004e-02 -4.95031066e-02 -5.27543463e-02
 -9.14498884e-03  5.87488487e-02 -8.94772932e-02  4.34161574e-02
 -1.11144669e-01 -8.47510702e-04 -7.62280449e-02  1.24450780e-01
 -8.40777308e-02 -1.46004958e-02  7.63321817e-02  6.19705282e-02
 -7.29257762e-02 -2.08321158e-02 -1.04709543e-01 -7.52833262e-02
  3.30729894e-02  1.26752615e-01  9.74061247e-03  5.30352481e-02
 -1.13030607e-02  5.17402962e-02  8.36577080e-03 -3.05549726e-02
  5.61997062e-03  2.77164225e-02 -3.14452909e-02  1.87465847e-02
  1.70392003e-02  1.06014013e-01  6.50876388e-02 -5.85944951e-02
  3.75516973e-02 -4.86182496e-02 -4.21357304e-02  7.77815208e-02
  3.88411097e-02 -4.01162133e-02  7.44396299e-02 -1.99029874e-02
  9.78773534e-02 -8.89630392e-02  7.90691748e-02  8.14071223e-02
  6.41106591e-02  4.95265350e-02  4.70722979e-03  5.06887957e-02
  1.03822351e-01 -4.06422205e-02 -6.00933023e-02 -7.02520758e-02
 -6.05775490e-02 -7.26291761e-02  2.58625969e-02 -1.54605312e-02
  6.97980300e-02  3.00730970e-02  3.81386392e-02  1.98047496e-02
  1.84362661e-02  1.87935028e-02  4.42537060e-03 -2.65182387e-02
  5.91848791e-02 -5.72246797e-02 -4.19862792e-02 -1.42579935e-02
 -3.31558883e-02 -1.60578862e-02  6.58436678e-03 -3.68150063e-02
 -6.14328273e-02 -3.61836888e-02  4.01462382e-03 -6.52241781e-08
 -2.63528861e-02  9.29952541e-04 -5.77995628e-02  4.38506491e-02
  3.57778594e-02  2.62271315e-02  1.30470861e-02 -3.31411809e-02
 -3.07082217e-02 -6.14846237e-02  3.34014483e-02  2.31077559e-02
  2.57767830e-02 -6.47618175e-02  1.72856748e-02 -4.28545363e-02
  2.48581320e-02  1.70175247e-02 -6.03197217e-02 -7.12710619e-02
 -1.55816246e-02  6.28528139e-03 -7.29806256e-03 -9.03946757e-02
  2.56839059e-02  3.11279334e-02  5.30769639e-02  7.09520653e-02
  7.47516006e-02 -1.35473944e-02 -6.18423000e-02  8.19827765e-02
  4.49717641e-02 -5.29485308e-02 -9.76440609e-02  5.45585379e-02
 -6.09214837e-03  1.21240783e-02 -3.22175324e-02 -5.31086652e-03
  4.71642464e-02  7.70078301e-02  1.90484412e-02  2.99250297e-02
 -1.79678518e-02  3.49117443e-02  7.34647643e-03  3.96672934e-02
  1.00456551e-01 -6.27647340e-02  3.10420487e-02  4.64076474e-02
  6.89079091e-02  1.34824246e-01 -3.86951678e-02 -6.88087419e-02
  2.93230601e-02 -8.39367602e-03 -2.91047264e-02  2.28212103e-02
  4.93740439e-02 -6.28157407e-02 -1.79180838e-02  1.14306957e-02]"
"NameRegistryState.retrieve(
    new Connection(clusterApiUrl(""mainnet-beta"")),
    nameAccountKey
  );
  console.log(owner.registry.owner.toBase58());
  // JUskoxS2PTiaBpxfGaAPgf3cUNhdeYFGMKdL6mZKKfR
})();
1234567891011121314151617181920212223const domain = ""levi.sol"";
const hashedName = await getHashedName(domain.replace("".sol"", """"));
const nameAccountKey = await getNameAccountKey(
  hashedName,
  undefined,
  new PublicKey(""58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx"") // SOL TLD Authority
);
const owner = await NameRegistryState.retrieve(
  new Connection(clusterApiUrl(""mainnet-beta"")),
  nameAccountKey
);
console.log(owner.registry.owner.toBase58());
// JUskoxS2PTiaBpxfGaAPgf3cUNhdeYFGMKdL6mZKKfR
12345678910111213# Reverse look upThis can be used to resolve the domain name from its public keyTSPress </> button to view full sourceimport { performReverseLookup } from ""@bonfida/spl-name-service"";
import { PublicKey, Connection, clusterApiUrl } from ""@solana/web3.js"";

async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));
  // Public key of bonfida.sol
  const domainKey = new PublicKey(
    ""Crf8hzfthWGbGbLTVCiqRqV5MVnbpHB1L9KQMd6gsinb""
  );

  const domainName = await performReverseLookup(connection, domainKey); // bonfida
};
123456789101112// Public key of bonfida.sol
const domainKey = new PublicKey(""Crf8hzfthWGbGbLTVCiqRqV5MVnbpHB1L9KQMd6gsinb"");

const domainName = await performReverseLookup(connection, domainKey); // bonfida
1234# Subdomain look upIn order to resolve a subdomain you need to:Get the parent domain keyGet the subdomain keyRetrieve the account infoTSPress </> button to view full sourceimport {
  getHashedName,
  getNameAccountKey,
  NameRegistryState,
  getDNSRecordAddress,
} from ""@bonfida/spl-name-service"";
import { Connection, clusterApiUrl, PublicKey } from ""@solana/web3.js"";

async () => {
  const SOL_TLD_AUTHORITY = new PublicKey(
    ""58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx""
  );
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));

  // Resolution of demo.bonfida.sol

  const parentDomain = ""bonfida"";
  const subDomain = ""demo"";

  // Step 1
  const hashedParentDomain = await getHashedName(parentDomain);
  const parentDomainKey = await getNameAccountKey(
    hashedParentDomain,
    undefined,
    SOL_TLD_AUTHORITY
  );

  // Step 2
  const subDomainKey = await getDNSRecordAddress(parentDomainKey, subDomain);

  // Step 3
  const registry = await NameRegistryState.retrieve(connection, subDomainKey);
};
123456789101112131415161718192021222324252627282930313233const parentDomain = ""bonfida"";
const subDomain = ""demo"";

// Step 1
const hashedParentDomain = await getHashedName(parentDomain);
const parentDomainKey = await getNameAccountKey(
  hashedParentDomain,
  undefined,
  SOL_TLD_AUTHORITY
);

// Step 2
const subDomainKey = await getDNSRecordAddress(parentDomainKey, subDomain);

// Step 3
const registry = await NameRegistryState.retrieve(connection, subDomainKey);
12345678910111213141516# Find all the domain names owned by a public keyYou can retrieve all the domain names of a wallet by doing a getProgramAccounts request with a memcmp filterTSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";
import { NAME_PROGRAM_ID } from ""@bonfida/spl-name-service"";

export async function findOwnedNameAccountsForUser(
  connection: Connection,
  userAccount: PublicKey
): Promise<PublicKey[]> {
  const filters = [
    {
      memcmp: {
        offset: 32,
        bytes: userAccount.toBase58(),
      },
    },
  ];
  const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {
    filters,
  });
  return accounts.map((a) => a.publicKey);
}
1234567891011121314151617181920export async function findOwnedNameAccountsForUser(
  connection: Connection,
  userAccount: PublicKey
): Promise<PublicKey[]> {
  const filters = [
    {
      memcmp: {
        offset: 32,
        bytes: userAccount.toBase58(),
      },
    },
  ];
  const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {
    filters,
  });
  return accounts.map((a) => a.publicKey);
}
1234567891011121314151617# Resolve a Twitter handleTwitter handles can be registered on the Solana name serviceopen in","[-2.08943263e-02 -4.69907224e-02 -3.49076539e-02 -3.42874415e-02
 -3.77025120e-02 -7.64951622e-03  5.45329563e-02 -5.77119086e-03
  2.16453075e-02  6.92169648e-03  1.04595069e-02 -6.56638816e-02
 -3.29913422e-02 -4.54344265e-02 -3.68428826e-02  2.21420396e-02
 -5.28647937e-02 -4.98146266e-02  1.76496599e-02 -5.05918488e-02
  4.39158306e-02 -7.58383870e-02 -2.13998817e-02 -6.14654869e-02
  1.37384683e-02  1.74221713e-02 -3.55704539e-02  2.50167046e-02
 -4.60002717e-04  1.39986409e-03  8.10698979e-03  3.42556052e-02
 -5.91403656e-02 -2.06695590e-02  6.63673878e-02  9.14859772e-02
 -2.11097579e-02  1.13490149e-02 -4.54222634e-02 -1.06122121e-01
  7.51701146e-02  3.82675938e-02  1.54203726e-02 -1.82329845e-02
  2.52681002e-02  1.23174461e-02 -5.79653569e-02  3.66571769e-02
  5.05043715e-02  8.70882813e-03 -2.57777292e-02  1.38876084e-02
  2.62813941e-02  1.11410981e-02 -1.49351051e-02  1.40283659e-01
 -2.17142608e-02  5.50809354e-02  9.13881734e-02 -7.17600435e-02
  1.39819821e-02 -6.02401979e-02  3.38571221e-02 -5.32746166e-02
 -1.41575215e-02 -4.94881757e-02  1.02773716e-03 -3.14143151e-02
  2.91962512e-02 -8.61294866e-02 -2.45028511e-02  7.62600377e-02
 -8.44129082e-03  5.54648750e-02 -3.33490856e-02  5.47428876e-02
 -4.19550464e-02 -8.42911284e-03  1.84885506e-02  1.82926795e-03
 -3.15806493e-02  3.06328181e-02  2.49377266e-02  6.10384420e-02
  5.55754267e-03  8.92509297e-02 -2.55330801e-02 -6.85640052e-02
  3.09945419e-02 -4.22601737e-02 -4.83746640e-02 -7.69268395e-03
 -3.62632051e-02 -3.61327529e-02  4.67513036e-03  7.82727227e-02
 -2.73875594e-02  7.76659548e-02 -4.47483845e-02  1.10386722e-01
 -1.23281693e-02  2.62382608e-02 -5.18071912e-02 -2.79516205e-02
 -6.54297136e-03 -3.49191651e-02  1.49343340e-02  5.44799790e-02
  2.50016828e-03  6.07003234e-02 -4.24142331e-02  9.32671502e-02
  2.54731998e-02 -2.21809633e-02 -5.18816300e-02  1.45986099e-02
  5.61926849e-02 -2.75999177e-02  4.34459075e-02 -1.32652251e-02
  9.62603763e-02 -3.19864862e-02 -2.61439811e-02 -5.04984707e-02
 -3.91546786e-02  2.75915731e-02 -5.96041838e-03  1.31196513e-32
  1.61747802e-02  3.53247747e-02  4.70178090e-02  1.53250489e-02
 -2.18795370e-02 -5.41382506e-02  5.08222915e-02  4.03840877e-02
 -8.69416967e-02  1.07493028e-02 -1.04192644e-01 -1.62832942e-02
  7.27878064e-02 -1.80688143e-01 -1.85436718e-02 -2.17966661e-02
  8.48308802e-02  4.79886942e-02  5.50770238e-02 -2.14995611e-02
 -4.20138910e-02 -5.60935528e-04  6.46197349e-02 -3.72621492e-02
 -2.27375999e-02 -2.09074691e-02 -1.81295369e-02  1.12419175e-02
  5.51108606e-02  2.19233241e-02  1.10479414e-01  1.19489208e-02
 -6.91788644e-02  2.46285386e-02  8.21846128e-02  1.13297626e-02
  7.44209737e-02 -2.32695732e-02 -9.17892456e-02 -3.67026441e-02
  5.20618707e-02 -4.13750187e-02 -1.47279790e-02 -1.35040591e-02
 -1.66121833e-02 -5.99783510e-02  2.62236390e-02 -5.93064167e-02
  1.37018353e-01  4.07043621e-02 -2.87467092e-02 -1.70304049e-02
 -1.03235128e-03 -3.67207415e-02  1.05948723e-03  5.91280758e-02
 -2.99938787e-02 -8.07746837e-04 -5.44549860e-02  3.38232927e-02
 -2.38899272e-02 -1.90732665e-02 -7.50548095e-02  3.55988145e-02
  4.44671884e-02 -4.77060676e-02  1.19915893e-02 -1.32733006e-02
 -3.28161679e-02 -1.22282114e-02  1.66562013e-02  5.54278353e-03
 -1.61341988e-02  7.28686303e-02 -3.57745960e-02 -2.93842703e-02
 -3.05852406e-02 -2.27547735e-02 -8.65900069e-02 -3.09810322e-02
  5.21544628e-02 -2.91008260e-02 -1.32979408e-01  6.96961135e-02
 -1.08217523e-02  9.40030366e-02  4.97170724e-03 -5.92617542e-02
  3.98138985e-02 -3.43818627e-02 -3.63488361e-04  8.32213275e-03
 -1.03017492e-02  5.79014793e-03 -1.27989799e-01 -1.29257153e-32
  1.18209119e-03 -6.30686581e-02 -5.94898909e-02 -6.24917485e-02
  3.90862953e-03  6.79935934e-03  4.37962189e-02  2.77307350e-02
 -6.94522783e-02 -7.34071806e-03  1.06788598e-01 -8.46719928e-03
  1.03379283e-02 -4.03651362e-03  3.63908485e-02  9.06882435e-02
  3.78917083e-02 -3.94152924e-02  1.66943744e-02  2.08909456e-02
 -6.27901256e-02  8.92183408e-02 -7.60378987e-02  9.33720078e-03
 -1.05418876e-01  2.45933719e-02 -3.91240083e-02  1.00279137e-01
 -5.76227792e-02 -1.98879596e-02  5.41187711e-02  1.32783893e-02
 -1.08760133e-01  9.89465564e-02 -1.36044994e-02 -8.58220831e-02
  3.16234268e-02  5.16253291e-03 -1.57561302e-02 -1.80225652e-02
  1.29598510e-02 -4.10407670e-02 -4.48569581e-02 -4.40452760e-03
  7.74026439e-02 -2.31303703e-02  3.29018421e-02  4.68992591e-02
 -1.01715904e-02  7.23901466e-02  1.58100072e-02 -1.20871626e-01
  2.50880234e-02 -3.49598995e-05  1.24641089e-02  3.60866934e-02
  1.44542465e-02 -2.30154134e-02  3.07161584e-02 -1.30670220e-02
  5.66036142e-02 -1.08979411e-01 -2.50275321e-02  1.52685612e-01
  1.02908485e-01  1.09913079e-02 -8.42645243e-02  1.68178361e-02
 -1.34910792e-02 -9.92902275e-03 -1.00618742e-01 -1.79171679e-03
 -8.41727201e-03 -2.31523607e-02  3.22394483e-02 -4.57498208e-02
  1.82837658e-02  4.22780551e-02 -2.42432170e-02  1.98819004e-02
  1.73000842e-02  4.34892476e-02 -1.84024666e-02 -8.75840113e-02
  4.41324748e-02 -3.61346942e-03  4.65302430e-02  9.06456113e-02
 -2.30846331e-02 -3.10620107e-03 -5.73894829e-02 -3.29394266e-02
 -5.36504090e-02  9.06519053e-05 -1.72288418e-02 -6.38690665e-08
  2.58206739e-03  5.58786988e-02 -4.14935052e-02  5.56877302e-03
  3.62015478e-02  7.10509121e-02  2.14515179e-02 -4.74150218e-02
 -5.10591008e-02 -9.01359227e-03 -6.06303103e-02  5.07168844e-02
 -2.64903791e-02  3.06824706e-02 -1.23880468e-02 -5.81968985e-02
 -6.83585703e-02  6.84549809e-02 -2.40025744e-02 -3.71775851e-02
 -2.36921199e-02 -2.81828307e-02  3.24179381e-02 -3.16176331e-03
  4.10422403e-03 -3.26851010e-02  8.53185356e-02  1.74150225e-02
  7.83263613e-03  1.96721144e-02 -1.40049011e-01  5.22675067e-02
  3.38729881e-02 -4.86419871e-02 -9.60585624e-02  6.10910505e-02
 -2.17554774e-02  2.07177605e-02  8.77269581e-02  3.61222439e-02
  5.25873788e-02  1.41042799e-01  1.60360597e-02  1.97583716e-02
 -6.32252995e-05  3.70960049e-02  6.43462762e-02  7.88529143e-02
  1.42545938e-01 -5.58765195e-02 -6.30123615e-02 -1.81787519e-03
 -3.97305414e-02  5.91854239e-03 -9.18531120e-02 -2.86149681e-02
 -1.07820839e-01 -1.08875008e-02 -2.46807206e-02  3.59787941e-02
  5.15440963e-02 -3.21915746e-02 -9.18278918e-02 -1.04677621e-02]"
"new window and be used like .SOL domain namesTSPress </> button to view full sourceimport { PublicKey, clusterApiUrl, Connection } from ""@solana/web3.js"";
import { getHandleAndRegistryKey } from ""@bonfida/spl-name-service"";

async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));
  // Pubkey of the wallet you want to retrieve the Twitter handle
  const pubkey = new PublicKey(""FidaeBkZkvDqi1GXNEwB8uWmj9Ngx2HXSS5nyGRuVFcZ"");

  const [handle, registryKey] = await getHandleAndRegistryKey(
    connection,
    pubkey
  );
};
12345678910111213// Pubkey of the wallet you want to retrieve the Twitter handle
const pubkey = new PublicKey(""FidaeBkZkvDqi1GXNEwB8uWmj9Ngx2HXSS5nyGRuVFcZ"");

const [handle, registryKey] = await getHandleAndRegistryKey(connection, pubkey);
1234# Reverse look up of a Twitter handleIn order to find the SOL address associated to a Twitter handle you can perform a reverse look upTSPress </> button to view full sourceimport { getTwitterRegistry } from ""@bonfida/spl-name-service"";
import { Connection, clusterApiUrl } from ""@solana/web3.js"";

async () => {
  const handle = ""bonfida"";
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));

  const registry = await getTwitterRegistry(connection, handle);
};
123456789const handle = ""bonfida"";

const registry = await getTwitterRegistry(connection, handle);
123 #
Versioned Transactions

Solana recently released Versioned Transactions. The proposed changes are as follows:

Introduce a new program which manages on-chain address lookup tables

Add a new transaction format which can make use of on-chain address lookup tables

#
Facts

Fact Sheet

Legacy transactions have a major issue: Maximum allowed size of 1232 bytes, and hence the number of accounts that can fit in an atomic transaction: 35 addresses.
Address Lookup Tables (LUTs): Once accounts are stored in this table, the address of the table can be referenced in a transaction message using 1-byte u8 indices.
solana/web3.js's createLookupTable() can be used to construct a new lookup table, as well as determine its address.
Once an LUT is created, it can be extended, ie., accounts can be appended to the table.
Versioned Transactions: The structure of legacy transaction needs to be modified to incorporate LUTs
Before versioning was introduced, txs left an unused upper bit in the first byte of their headers, which can be used to explicitly declare the version of txs

We'll talk more about the above introduced changes and what they mean for developers. To understand the changes better, however, we need to first understand the anatomy of a regular (or legacy) transaction.

#
Legacy Transaction

The Solana network uses a maximum transactional unit (MTU) size of 1280 bytes, adherent to the IPv6 MTU
open in new window
 size constraints to ensure speed and reliability. This leaves 1232 bytes for packet data like serialised transactions.

A transaction is comprised of:

A compact array of signatures, where each signature is a 64 byte ed25519
open in new window
.
A (legacy) message

Compact-Array format

A compact array is an array serialised to have the following components:

An array length in a multi-byte encoding called Compact-u16
open in new window
Followed by each array item

#
Legacy Message

A Legacy Message has the following components:

A header
A compact-array of account addresses, where each account address takes 32 bytes
A recent blockhash
a 32-byte SHA-256 hash used to indicate when ledger was last observed. If a blockhash is too old, validators reject it.
A compact-array of Instructions

#
Header

The message header is 3 bytes in length and contains 3 u8 integers:

The number of required signatures: the Solana runtime verifies this number with the length of the","[-3.02964244e-02 -1.76330039e-03 -1.21539004e-01 -2.94889528e-02
 -2.13391315e-02 -7.05336919e-04  8.92600976e-03  3.89072150e-02
  6.49853572e-02 -1.08753731e-02 -3.45668010e-02 -1.69953052e-02
 -2.13290639e-02 -6.36831522e-02  3.99524942e-02 -8.67991243e-03
 -1.04140259e-01 -8.09150636e-02  4.83834073e-02  1.09548951e-02
  1.13025559e-02 -3.04436535e-02 -2.62073167e-02 -4.91553843e-02
 -2.94412989e-02  1.16078760e-02 -1.15705719e-02 -2.63149999e-02
 -1.91606525e-02  5.79880066e-02  6.77902997e-02  4.31036130e-02
  1.39939599e-02 -3.18362564e-02  8.47231597e-03  9.23611894e-02
 -1.14972563e-02  6.98131844e-02  1.18074915e-03 -2.65305769e-02
  5.28840087e-02  1.01600578e-02 -6.21949509e-02  8.93897563e-03
  3.15270536e-02 -4.47870232e-02 -7.71243498e-02  4.94995713e-02
 -2.72906404e-02  2.16354895e-02 -9.77343544e-02 -6.52949959e-02
 -3.21614444e-02  1.82693098e-02 -7.03019574e-02  9.58328694e-02
 -7.32970284e-03  5.81336990e-02  7.28611648e-02 -2.05722731e-02
  5.54609112e-02 -3.04925293e-02  2.57688314e-02 -2.11093649e-02
 -3.89957279e-02 -2.01029200e-02 -2.66226437e-02  1.03964796e-02
  2.06038784e-02 -1.00021414e-01 -5.75645380e-02 -3.85979842e-03
 -1.11981807e-02 -4.29465361e-02 -3.76909859e-02 -3.71191688e-02
 -1.67604592e-02  7.87769537e-03 -4.77350354e-02  6.72715008e-02
  5.06352969e-02 -1.03996787e-02 -4.53680550e-04  1.33208722e-01
  9.84457228e-03  9.67760906e-02 -9.37754512e-02 -5.16199954e-02
 -1.06291426e-02 -2.95570735e-02 -8.33529681e-02 -6.19119545e-03
 -7.16545805e-02 -2.96392906e-02  3.00561190e-02  1.05162404e-01
 -4.78593484e-02 -6.65660482e-03 -6.81976900e-02  5.33634834e-02
  4.09824848e-02  2.71520708e-02 -4.95494939e-02 -7.72174001e-02
  3.78242619e-02 -5.96881891e-03  3.13567556e-02 -2.04946715e-02
  2.47523002e-02  5.35736680e-02 -1.79843996e-02  9.96809378e-02
 -3.25748790e-03 -4.93707769e-02  2.58553103e-02 -2.54785269e-03
  7.22416714e-02  4.38724346e-02  1.35172322e-01  1.44923907e-02
  3.54197100e-02 -2.00827420e-02 -5.14373146e-02 -6.01085015e-02
 -1.02177728e-02  5.46591431e-02 -1.86770540e-02  9.34558417e-33
  5.77160381e-02  3.76092531e-02  4.61386815e-02  4.49759364e-02
 -2.14220528e-02 -4.49689701e-02  1.13351434e-01 -1.00093111e-02
 -1.02049239e-01 -4.80440632e-03 -6.02885708e-02  2.56172847e-03
  2.64629479e-02 -1.38465509e-01 -1.07390881e-01 -1.81890093e-02
 -4.66112457e-02  4.82972451e-02  2.02515107e-02 -2.80441530e-02
 -5.06439060e-02 -1.91706407e-03  4.62724194e-02  3.40987220e-02
  7.62132034e-02 -3.99318300e-02  3.32019031e-02  4.57736216e-02
  1.13512433e-05 -7.43582426e-03  6.88334852e-02  2.07555909e-02
 -1.04441449e-01 -1.33468695e-02  8.00803900e-02 -3.12709697e-02
  1.01806268e-01  4.22330350e-02 -1.48030519e-01  6.76921045e-04
  1.46980910e-02 -3.33533734e-02  5.88838477e-04  1.41991337e-03
 -1.79165043e-02  8.73799436e-03  7.54936086e-03 -4.71733860e-04
  1.09984770e-01  8.72105826e-03 -5.98128811e-02 -5.66747300e-02
 -4.00845893e-02 -3.36590526e-03  1.79185960e-02  1.07407467e-02
 -3.36358137e-02  4.21802178e-02  2.34310627e-02 -2.88880467e-02
 -5.27387224e-02 -5.72430342e-02  1.55591546e-02  5.84553964e-02
  6.90324903e-02 -7.17970403e-03 -7.38633424e-02  1.19861513e-02
 -6.16866089e-02 -1.36216171e-02 -5.07930852e-03  3.58505175e-02
 -2.44133696e-02  1.86484586e-02  2.77058054e-02  6.58777403e-03
 -1.70411430e-02  3.33716832e-02 -2.66331714e-02 -6.14030380e-03
  7.36579821e-02 -2.99655292e-02 -4.31844145e-02  4.16239426e-02
  1.64417885e-02  4.12442759e-02  5.29027916e-02 -7.19090477e-02
  3.55697982e-02 -1.67707428e-02 -2.66714282e-02  2.69491546e-04
 -1.52532533e-02 -5.32800891e-02 -8.62176791e-02 -9.00074041e-33
  2.69887000e-02 -7.60162845e-02 -3.42679545e-02 -6.43928424e-02
 -1.76387597e-02  3.12344283e-02  1.05417706e-02 -1.80228297e-02
 -1.87458545e-02  1.50071857e-02  6.96827844e-02  4.54745740e-02
 -8.28185771e-03 -1.22088017e-02 -1.48029858e-02  1.11893281e-01
  1.02130830e-01 -4.25714403e-02 -2.24398877e-02 -3.60856168e-02
 -2.49765068e-02 -6.30389526e-02 -2.67192777e-02  4.62192930e-02
 -1.20046332e-01  9.04641300e-03  3.28553431e-02  5.62246516e-02
 -1.04496852e-01 -2.65722387e-02  3.84680070e-02  1.80783551e-02
 -5.93962409e-02  1.71844825e-01 -6.76571578e-02 -2.58835889e-02
 -1.30542731e-02  1.09079732e-02  5.09705804e-02 -6.02555461e-03
  5.94393462e-02 -6.45392314e-02 -5.30139282e-02  1.65186636e-02
  1.81577727e-03 -1.50321648e-02 -7.55929342e-03 -2.43498888e-02
 -3.79361473e-02  8.09094608e-02  8.17771554e-02 -7.44763613e-02
 -3.92164327e-02 -1.78838205e-02  1.39442412e-02  1.26203587e-02
  2.96939444e-02  2.98464131e-02 -4.56417203e-02 -2.66553368e-02
  9.08615589e-02 -9.47895125e-02 -8.34579915e-02  8.48113373e-02
  5.21469116e-02 -5.22932820e-02 -4.28688899e-02  3.14176790e-02
  9.13805969e-04  1.39715280e-02 -8.56665894e-02  1.81518923e-02
  3.01219150e-02  2.88113914e-02  9.74416435e-02  3.72976549e-02
  1.47395264e-02  3.85817979e-03  6.70613954e-03  8.44338760e-02
  7.40203485e-02 -1.74932405e-02 -5.72185498e-03 -1.00963965e-01
 -6.46173861e-03 -3.15493578e-03  4.74289879e-02  7.34323338e-02
 -3.94796161e-03 -4.28939573e-02 -2.72015519e-02  6.17746376e-02
 -2.62353234e-02 -5.55142201e-03  1.08551949e-01 -5.77046997e-08
 -5.44389598e-02  1.03379814e-02 -5.18618040e-02  2.96308659e-02
 -4.13349718e-02  9.34130251e-02  1.47944624e-02 -4.21264395e-02
  8.20322719e-04  1.74679724e-03 -9.86109152e-02  1.18824663e-02
 -1.83390751e-02  6.04662523e-02 -2.66435817e-02 -3.42685059e-02
  6.06125593e-03 -9.83223319e-03  4.64961380e-02 -1.99869815e-02
  6.54144362e-02 -1.55292833e-02  6.58408701e-02  1.22290011e-02
  8.87359083e-02 -3.40266190e-02 -4.25418615e-02 -1.29545350e-02
  2.45786663e-02 -3.10001094e-02 -6.36842176e-02 -3.11067402e-02
  7.05390191e-03 -3.67297716e-02 -1.04149736e-01  6.33656979e-02
 -7.64098717e-03 -3.05892695e-02  5.73987104e-02  9.41171944e-02
  3.00592333e-02  5.58914095e-02 -9.06493589e-02 -3.10851689e-02
 -1.30716801e-01  6.71540275e-02  1.89120118e-02  7.66773000e-02
  6.06813394e-02 -5.25523152e-04 -2.80231331e-02 -1.86570697e-02
  4.32249345e-02  4.31811288e-02 -8.31272975e-02  2.53213500e-03
 -7.08103627e-02  4.55375686e-02 -1.21654700e-02 -2.07825229e-02
 -4.47425954e-02  3.15047055e-02 -4.83227707e-02  4.22464982e-02]"
"compact array of signatures in the transaction.
The number of read-only account addresses that require signatures.
The number of read-only account addresses that do not require signatures.

#
Compact-array of account addresses

This compact array starts with a compact-u16 encoding of the number of account addresses, followed by:

Account addresses that require signatures: The addresses that request read and write access are listed first, followed by the ones that request for read-only access
Account addresses that do not require signatures: Same as above, the addresses that request read and write access are listed first, followed by the ones that request for read-only access

#
Compact array of instructions

Much like the array of account addresses, this compact array starts with a compact-u16 encoding of the number of instructions, followed by an array of instructions. Each instruction in the array has the following components:

Program ID: identifies an on-chain program that will process the instruction. This is represented as a u8 index to an address in the compact array of account addresses inside the message.
Compact array of account address indexes: u8 indexes to a subset of account addresses in the compact array of account addresses, that require signatures.
Compact array of opaque u8 data: a general purpose byte array that is specific to the program ID mentioned before. This array of data specifies any operations that the program should perform and any additional information that the accounts might not contain.

#
Issues with Legacy Transactions

What is the issue with the above Transaction model?

The max size of a transaction, and hence the number of accounts that can fit in a single atomic transaction.

As discussed earlier, the maximum allowed size of a transaction is 1232 bytes. The size of an account address is 32 bytes. Thus, a transaction can at the very best store 35 accounts, taking into account some space for headers, signatures and other metadata.

This is problematic as there are several cases where developers need to include 100s of signature-free accounts in a single transaction. This is currently not possible with the legacy transaction model. The solution currently being used is to temporarily store state on-chain and consume it later in transactions. This workaround does not work when multiple programs need to be composed in a single transaction. Each program requires multiple accounts as input and hence we fall into the same problem as before.

This is where Address Lookup Tables (LUT) are introduced.

#
Address Lookup Tables (LUT)

The idea behind Address Lookup Tables is to store account addresses in a table-like (array) data structure on-chain. Once accounts are stored in this table, the address of the table can be referenced in a transaction message. To point to an individual account within the table, a 1-byte u8 index is needed.

This opens up space as addresses need not be stored inside the transaction message anymore. They only need to be referenced in the form of an index within the array like table. This leads to a possibility of referencing 2^8=256 accounts, as accounts are referenced using a u8 index.

LUTs need to be rent-exempt when initialised or whenever a new address is added to the table. Addresses can be added to this","[-1.13663394e-02  3.59057002e-02 -9.09405425e-02 -3.70193459e-02
 -2.73788683e-02 -4.37610187e-02  6.51704520e-02 -4.85703945e-02
  1.80790592e-02 -8.10154751e-02 -4.39232923e-02  9.50677469e-02
  4.15209197e-02 -4.08361293e-02 -2.78966110e-02 -1.54996607e-02
 -7.82560781e-02 -5.15667014e-02 -3.28079495e-03  2.64599640e-02
  8.06492940e-02  5.32660671e-02 -5.48021272e-02 -3.25267687e-02
 -8.47419277e-02  5.10183163e-02 -3.92768299e-03  3.10689155e-02
  3.32359038e-02 -2.50466578e-02  4.25560214e-02 -1.59328664e-03
  1.17891237e-01  1.48479063e-02  1.47510460e-02  5.08593060e-02
  3.57712507e-02 -1.46843661e-02 -1.42212659e-02 -4.75120917e-03
 -2.82149650e-02  3.07056699e-02 -3.30069140e-02  1.27747998e-01
  6.81344606e-03  5.62951639e-02 -7.55038932e-02  1.29684797e-02
 -1.07223958e-01 -6.40850812e-02 -4.49476615e-02  2.38898564e-02
 -3.40300836e-02  6.72098994e-02  3.59538533e-02 -7.18977526e-02
 -4.79341224e-02 -3.45423892e-02 -2.94862073e-02  1.06054116e-02
 -1.05426982e-02 -3.60144861e-02 -1.54421793e-03  4.79928367e-02
  1.78816947e-04  3.39280888e-02  6.15288578e-02 -3.22044007e-02
  4.66760620e-02 -6.82400316e-02 -6.77785128e-02 -6.65482180e-03
 -1.49407625e-01  7.88167194e-02  8.32373928e-03  3.64465676e-02
 -1.27993245e-02 -1.61302704e-02  9.56725236e-03 -9.85286012e-02
 -7.05094486e-02 -2.99581187e-03  5.37005737e-02 -4.01757797e-03
 -3.35866250e-02  6.80054724e-03 -3.96041796e-02 -3.61971110e-02
  4.23815921e-02  5.24227992e-02  1.78740639e-02 -5.62360324e-02
 -1.62944086e-02  8.23676959e-03  8.51746127e-02 -1.78442486e-02
  8.30099732e-02  2.11157110e-02 -6.08928166e-02  3.55537236e-02
  1.31484987e-02  3.22480425e-02  4.98446971e-02  1.22703603e-02
  1.76327266e-02 -1.76191777e-02  2.06109118e-02 -4.44860309e-02
 -9.50222984e-02 -2.93372888e-02 -2.77373195e-02  4.58440371e-02
 -4.69065830e-02 -1.36488071e-02  1.02564960e-03 -5.10083959e-02
 -6.04537353e-02  5.01577184e-02 -7.83219561e-03  4.36380096e-02
  3.45227234e-02  5.55873988e-03 -8.14235397e-03 -1.50670893e-02
 -3.91457342e-02 -2.03996594e-03 -9.69724655e-02  2.13982804e-33
  9.39078722e-03  5.45145161e-02 -6.06354810e-02  4.97417636e-02
 -2.18134820e-02 -6.91755712e-02  8.54499266e-03  1.52046885e-02
 -9.72125754e-02  1.08110219e-01  7.49154715e-03  1.03572965e-01
  4.84129973e-02  1.65018007e-01  1.28819302e-01  2.07154807e-02
  4.67089154e-02  9.61615592e-02  3.87877710e-02 -2.40081940e-02
  7.26767676e-03  7.74585754e-02  6.57563098e-03 -3.41853090e-02
  5.15170358e-02 -5.87056966e-05 -5.64172082e-02  6.05318975e-03
 -4.29609939e-02  3.70143796e-03 -7.23581463e-02  1.33380489e-02
  3.84393003e-04  3.76838003e-03  1.36776775e-01 -5.24961539e-02
 -4.66042869e-02 -8.40940550e-02 -4.55952948e-03 -5.52455075e-02
  6.13202900e-02  3.45730782e-02 -1.08293798e-02 -4.86762710e-02
 -1.50623173e-02 -3.62243168e-02  3.71635077e-03  2.34569404e-02
  7.78685585e-02  3.80918533e-02  9.52813402e-03  6.16712011e-02
 -9.73084345e-02 -3.52330320e-02 -1.80279892e-02 -4.88934889e-02
  1.40250707e-02  1.07871983e-02  1.07536782e-02  1.13930687e-01
 -3.73609364e-02  2.77991174e-03  7.03434134e-03  8.88078958e-02
  3.85852009e-02 -1.82888694e-02 -4.96219061e-02 -3.07076182e-02
  2.84939725e-02  2.72478219e-02 -2.11707968e-02  1.88339408e-02
  3.58438157e-02  2.15750430e-02 -6.56046718e-02 -3.24437506e-02
  5.39009273e-02 -6.79522231e-02 -4.00592797e-02 -3.47996620e-03
 -1.16125271e-02  7.11923093e-03 -3.55695672e-02  9.04846285e-03
 -1.32415056e-01  2.16176044e-02 -1.42446777e-03 -3.41790356e-02
 -2.67805588e-02 -7.69260377e-02  1.73143521e-02 -2.38994788e-02
 -8.94652773e-03 -8.57262909e-02  1.86143257e-02 -4.70504801e-33
  8.08830857e-02 -8.05866048e-02 -2.65832972e-02 -1.67553946e-02
 -8.09189826e-02 -2.51896847e-02  1.14448249e-01 -2.67524421e-02
 -5.53399287e-02 -5.33213764e-02 -8.71781353e-03  5.26527576e-02
  4.40157875e-02 -2.11000536e-02  3.83352228e-02 -2.22034976e-02
  1.17226345e-02 -3.03849429e-02  4.48390730e-02  1.10732028e-02
  4.59300354e-02  3.45809571e-02  3.19308564e-02 -1.71815150e-03
 -2.85601374e-02 -2.22375542e-02 -8.44289735e-03  1.48602389e-02
  2.68823337e-02 -7.01030111e-03  2.65020244e-02 -3.67512852e-02
  3.66010517e-02  4.58074249e-02 -3.17856893e-02 -9.95262563e-02
  3.75618860e-02  3.92712913e-02  6.87547121e-03 -6.81949826e-03
  8.78318995e-02  3.22158635e-02  4.48270701e-02 -2.86494126e-03
  6.98483735e-02 -4.02773060e-02 -1.66738108e-02  1.96726192e-02
 -7.70374388e-02 -6.09984323e-02  2.32673436e-02 -2.44849063e-02
 -1.52043439e-02 -1.52392881e-02 -3.42846997e-02  4.73352000e-02
  3.63516062e-02 -1.62118357e-02  1.14716090e-01 -3.30319367e-02
  6.23476692e-02 -3.93886976e-02  1.65587068e-02  5.14348820e-02
  3.42630129e-03 -2.62912363e-02 -2.89757624e-02 -9.30781364e-02
 -9.60153043e-02  7.11887097e-03  1.83358751e-02 -1.53303087e-01
 -1.72164124e-02 -3.36114317e-02 -1.76236741e-02 -3.83725092e-02
 -4.01269048e-02 -4.93234508e-02 -7.51126707e-02  2.64505902e-03
 -5.51766045e-02  5.08491248e-02 -2.15802458e-03  9.65623707e-02
  5.63689470e-02 -2.36583725e-02  2.63050571e-02 -2.20621470e-02
 -5.32374382e-02  5.07342145e-02 -1.83947850e-02  4.58861217e-02
  3.36528309e-02  2.55855490e-02 -4.78919074e-02 -4.82424589e-08
 -5.68895228e-02 -8.63685831e-02 -7.83881824e-03  7.96789536e-04
  5.24394102e-02  5.70892030e-03 -2.61098426e-02 -1.02529079e-02
  2.17579268e-02  1.35056814e-02  1.18960194e-01  2.48833969e-02
 -1.05187431e-01 -4.88591529e-02  8.28647912e-02  7.37266168e-02
 -2.19148714e-02 -8.22593048e-02 -7.13891983e-02 -2.42699590e-02
 -2.56860014e-02  4.83249202e-02 -5.85037470e-02 -1.71742607e-02
  1.75579991e-02 -2.77966354e-03  8.75111297e-02  1.68261141e-01
  2.92100292e-02 -2.77897762e-03  3.49193141e-02  1.87657420e-02
  7.39519671e-02 -2.24218685e-02  9.77729447e-03  2.93908138e-02
  9.63791681e-04 -1.24997608e-02  5.56486025e-02 -8.69982969e-03
  4.13119281e-03 -4.85897027e-02 -1.53039303e-02  3.71709019e-02
  5.06600663e-02 -1.60042029e-02 -1.21225722e-01  2.25310698e-02
 -1.38256829e-02  1.90417767e-02 -1.97288301e-02  1.97633132e-02
 -3.06159146e-02  9.59765315e-02  5.29443473e-03  2.07955614e-02
 -3.79419029e-02 -8.52318257e-02  7.58491978e-02  2.94282641e-02
  1.00060031e-01  4.58627343e-02  2.27401741e-02 -7.41765872e-02]"
"table either by an on-chain buffer, or by directly appending them to the table through the Extension instruction. Furthermore, LUTs can store associated metadata followed by a compact-array of accounts. Below you can see the structure of a typical Address Lookup Table.

One important pitfall of LUTs is that since address lookups require extra overhead during transaction processing, they usually incur higher costs for a transaction.

#
Versioned Transactions: TransactionV0

The structure of legacy transaction needs to be modified to incorporate address table lookups. These changes should not break transaction processing on Solana, nor should they indicate any format changes to the invoked programs.

To ensure the above, it is important to explicitly mention the transaction type: legacy or versioned. How do we include this information in a transaction?

Before versioning was introduced, transactions left an unused upper bit in the first byte of their message headers: num_required_signatures. We can now use this bit to explicitly declare the version of our transactions.

pub enum VersionedMessage {
    Legacy(Message),
    V0(v0::Message),
}

1
2
3
4


If the first bit is set, the remaining bits in the first byte will encode a version number. Solana is beginning with “Version 0”, which is the versioned required to begin using LUTs.

If the first bit is not set, the transaction will be considered a “Legacy Transaction” and the remainder of the first byte will be treated as the first byte of an encoded legacy message.

#
MessageV0

The structure of the new MessageV0 is more or less the same, except for two small but important changes:

Message Header: unchanged from legacy
Compact array of account keys: unchanged from legacy. We will denote the array of indexes pointing to elements in this array as index array A (you will see why we are denoting this soon)
Recent blockhash: unchanged from legacy
Compact array of instructions: change from legacy
Compact array of address table lookups: introduced in v0

We'll first discuss the structure of the compact array of address table lookups before seeing what changed in the instruction array.

#
Compact array of address table lookups

This struct introduces Address Lookup Tables (LUT) to Versioned Transactions, hence enables the usage of LUTs for loading more readonly and writable accounts in a single transaction.

The compact array starts with a compact-u16 encoding of the number of address table lookups, followed by an array of address table lookups. Each lookup has the following structure:

Account key: account key of the address lookup table
Writable indexes: compact array of indexes used to load writable account addresses. We will denote this array as index array B.
Readonly indexes: compact array of indexes used to load readonly account addresses. We will denote this array as index array C.

Now let's see what changes were made in the instructions compact array

#
Compact array of instructions

As discussed before, the compact array of legacy instructions stores individual legacy instructions that in-turn store the following:

Program ID index
Compact array of account address indexes
Compact array of opaque 8-bit data

The change in the new instruction is not in the structure of the instruction itself, but the array being used to get indexes from for 1 and 2. In legacy transactions, a subset of the index array A","[-2.00821869e-02 -1.82660748e-04 -4.04623710e-02 -6.39046952e-02
  1.13655394e-02 -1.00563139e-01 -2.13612840e-02  5.09806722e-02
 -1.26342231e-04  3.76554094e-02  2.54999939e-03  1.14783794e-02
 -5.95807433e-02 -4.48170789e-02  2.43122242e-02  1.06468312e-02
 -6.37422949e-02 -1.41307653e-03 -1.46328416e-02  1.00171268e-01
  4.33706418e-02 -4.56913887e-03  2.01564226e-02 -2.54227724e-02
 -1.31060146e-02  2.91469451e-02  2.90603396e-02  4.51067761e-02
 -5.58825061e-02 -8.17946438e-03  5.07136397e-02  1.00119330e-01
  1.57564282e-02  6.05440810e-02 -2.85478346e-02  1.06497547e-02
  3.02638970e-02  1.50300628e-02  3.13567817e-02 -5.66375703e-02
 -2.97724940e-02  2.01484114e-02 -2.16526184e-02 -8.47490411e-03
  6.04743846e-02 -7.26113170e-02 -5.56383990e-02 -1.44781629e-02
 -6.66811615e-02  1.75948460e-02  3.87090482e-02  2.78267153e-02
 -3.68408114e-02  1.22553684e-01  5.44479452e-02  6.29319027e-02
 -3.55859362e-02 -1.00207394e-02  8.72930512e-03  2.87835076e-02
 -6.65546358e-02  7.39481673e-02 -3.92981106e-03 -1.08538024e-01
 -9.53688547e-02 -2.68906783e-02  5.73659539e-02 -3.03767864e-02
 -7.89224054e-04  9.90779325e-03 -6.15694597e-02 -2.87322924e-02
 -1.57279432e-01 -4.04800568e-03 -9.74365920e-02  4.98065911e-02
  4.06582616e-02  3.98854725e-02 -1.18320122e-01 -7.63308853e-02
  3.46263982e-02 -4.63836305e-02  5.79261295e-02  3.15461755e-02
  4.76511288e-03 -2.49734409e-02  1.79599738e-04 -6.30112290e-02
  5.79683706e-02  2.85888128e-02  4.06873040e-02 -6.08181879e-02
  4.45903316e-02 -5.84779158e-02  7.79683888e-02  5.18307798e-02
  3.24791707e-02  1.71474367e-02  1.08381743e-02  9.10178944e-02
  2.94758175e-02  2.67316867e-03 -6.12987652e-02  3.44291888e-03
 -1.51572598e-03 -3.48179713e-02  9.79794785e-02  1.33655348e-03
 -9.47203934e-02 -2.49129292e-02  4.47960794e-02  1.36435190e-02
 -1.79282017e-02 -9.32514146e-02 -3.64669114e-02  1.09944595e-02
 -6.23578988e-02  2.10790113e-02 -2.09880788e-02 -3.52776870e-02
  4.83549163e-02  5.45789897e-02  3.22284512e-02  2.27416810e-02
 -5.22529297e-02 -1.29409181e-03 -6.60863146e-02  7.77091397e-33
  3.26491483e-02 -3.27885412e-02 -4.63028438e-03  3.53355780e-02
 -2.18165088e-02  1.32068153e-02  3.25364619e-02  9.91145428e-03
 -6.95236325e-02 -9.80826318e-02 -3.00565176e-02  6.51315078e-02
 -2.55030431e-02 -8.34540054e-02  2.14815345e-02  1.04658417e-01
 -3.78913991e-02  3.48517001e-02  4.83351760e-02  4.10950594e-02
 -2.52422448e-02 -4.10778597e-02  1.76442470e-02  9.94640961e-03
  1.16169341e-01  9.59404465e-03 -4.22874056e-02 -6.83305785e-02
 -2.45584361e-02 -3.48392664e-03 -2.26600710e-02 -3.17586437e-02
  3.58412676e-02  3.45566869e-02  5.63489236e-02  7.32095167e-02
 -3.30774821e-02 -7.48928711e-02 -3.08418013e-02 -7.42759258e-02
  7.23605156e-02  3.33737209e-02 -3.30576897e-02  4.02799482e-03
 -3.19716483e-02  8.20991620e-02 -6.07987307e-03  7.24467263e-02
  5.55176809e-02  9.26514901e-03 -7.34799192e-04 -6.07808959e-03
 -5.07612638e-02  7.25448248e-04  4.79074195e-03 -2.04291921e-02
  8.03024601e-03  5.40491613e-03  7.00758845e-02  8.42551738e-02
 -1.46769769e-02 -3.77733745e-02 -9.90195083e-04  5.59639297e-02
 -2.59353798e-02  5.13485521e-02 -1.13597386e-01 -4.24767621e-02
  1.58805214e-03 -3.24353091e-02 -3.29557545e-02  4.66856994e-02
 -1.49459264e-03  1.01788186e-01 -3.49307270e-03 -3.47608738e-02
  5.16917408e-02  2.65459474e-02 -4.46820892e-02 -3.30675915e-02
  5.66964224e-02  5.89792756e-03 -9.47285257e-03  6.84432834e-02
 -4.58197556e-02 -2.10683048e-02 -1.10533880e-03 -8.42414200e-02
 -4.01233509e-02 -1.11975148e-02  6.81328550e-02 -4.00124528e-02
 -1.23426700e-02 -3.00519615e-02  5.88197540e-03 -6.82311802e-33
  4.35949350e-03  9.36404709e-03 -8.77585560e-02 -2.52478607e-02
 -6.82587549e-02  3.17441416e-03  2.86867302e-02 -5.02208807e-02
 -1.43717369e-03 -3.62070426e-02 -4.20618318e-02 -1.79106090e-02
 -1.22969560e-02 -8.00064653e-02 -4.60885242e-02  2.28348300e-02
  2.03812476e-02 -6.91361949e-02  2.00058310e-03 -3.65530252e-02
  4.18877713e-02  7.08020553e-02  6.73125759e-02 -6.55138679e-03
  3.23230252e-02 -2.89584715e-02  1.29742008e-02  3.72203439e-02
 -2.76121255e-02 -1.15564160e-01  2.13763770e-02 -5.71958274e-02
  1.31565994e-02  7.35279731e-03 -2.35226862e-02 -4.23786007e-02
  5.52675053e-02 -1.11168446e-02  2.95386966e-02  4.93122563e-02
  4.04105633e-02  2.84777489e-02 -1.00224167e-02  8.20101947e-02
  1.81510542e-02 -1.34598529e-02 -4.46178131e-02  2.45465040e-02
  2.36572921e-02 -3.65701281e-02  9.57408175e-02 -8.99980888e-02
  1.87546276e-02  2.14573238e-02  7.26525858e-02  2.08813231e-02
  1.09651282e-01  1.71058476e-02 -2.61626691e-02 -2.38167085e-02
  1.87155362e-02  3.28639299e-02  5.81924729e-02  3.71886902e-02
  7.46713579e-02 -3.94853810e-03  4.35017608e-02 -1.06096074e-01
 -8.13191012e-02 -3.37550342e-02  5.31498380e-02 -1.64918721e-01
 -7.25136995e-02  5.34004681e-02  7.77947530e-02  4.66027483e-02
 -4.01258990e-02 -3.47500555e-02 -1.99579671e-02 -8.65980517e-03
 -1.06920324e-01 -6.04976481e-03  4.00076471e-02  3.23531963e-02
  1.09932979e-03 -7.42479265e-02  4.17329744e-02  4.83347587e-02
 -2.51222076e-03  3.01525537e-02 -1.48541443e-02 -9.44283418e-03
 -7.67087713e-02  3.79846506e-02 -1.27235828e-02 -5.58537643e-08
 -1.02651067e-01 -7.49918595e-02 -1.18784577e-01  8.04053769e-02
  8.16097483e-02  3.25692073e-02  7.53974542e-02  3.04825176e-02
  2.36892551e-02 -4.84052375e-02 -2.70850435e-02  7.59956287e-03
 -3.47402208e-02 -5.24772741e-02  1.10734627e-01  5.25879748e-02
  2.84772366e-02 -7.52685964e-02 -1.11012369e-01  2.64240429e-02
  1.01676397e-02  5.32851480e-02 -2.30038781e-02 -8.27067625e-03
 -1.35121848e-02 -5.75971268e-02 -8.40727799e-03  8.57994631e-02
  4.30007763e-02 -2.77749524e-02  3.59346122e-02 -3.13622085e-03
  1.03245012e-01  2.11777482e-02 -2.12286990e-02  4.27511707e-02
  3.64683308e-02 -4.72364295e-03  4.55902778e-02  8.97284076e-02
  7.00853532e-03 -1.57277323e-02 -8.98585096e-02  2.62256935e-02
  3.80891748e-02  3.01179718e-02 -1.22629419e-01  1.23720001e-02
 -1.96535932e-03  1.90562941e-02  3.26432548e-02 -4.84122010e-03
  7.02790320e-02  8.04829225e-02 -8.62126872e-02 -1.57503188e-02
  6.42535556e-03  5.82155697e-02  1.38329834e-01 -2.12132372e-02
  5.37853800e-02 -2.10681204e-02 -2.37938645e-03  1.05741702e-01]"
"is used, while in versioned transactions, a subset of the combined array of the following are used:

index array A: Compact array of accounts stored in the message
index array B: Writable indexes in address table lookup
index array C: Readonly indexes in address table lookup

#
RPC Changes

Transaction responses will require a new version field: maxSupportedTransactionVersion to indicate to clients which transaction structure needs to be followed for deserialisation.

The following methods need to be updated to avoid errors:

getTransaction
getBlock

The following parameter needs to be added to the requests:

maxSupportedTransactionVersion: 0

If maxSupportedTransactionVersion is not explicitly added to the request, the transaction version will fallback to legacy. Any block that contains a versioned transaction will return with an error by the client in the case of a legacy transaction.

You can set this via JSON formatted requests to the RPC endpoint like below:

curl http://localhost:8899 -X POST -H ""Content-Type: application/json"" -d \
'{""jsonrpc"": ""2.0"", ""id"":1, ""method"": ""getBlock"", ""params"": [430, {
  ""encoding"":""json"",
  ""maxSupportedTransactionVersion"":0,
  ""transactionDetails"":""full"",
  ""rewards"":false
}]}'

1
2
3
4
5
6
7


You can also do the same using the @solana/web3.js
open in new window
 library.

// connect to the `devnet` cluster and get the current `slot`
const connection = new web3.Connection(web3.clusterApiUrl(""devnet""));
const slot = await connection.getSlot();

// get the latest block (allowing for v0 transactions)
const block = await connection.getBlock(slot, {
  maxSupportedTransactionVersion: 0,
});

// get a specific transaction (allowing for v0 transactions)
const getTx = await connection.getTransaction(
  ""3jpoANiFeVGisWRY5UP648xRXs3iQasCHABPWRWnoEjeA93nc79WrnGgpgazjq4K9m8g2NJoyKoWBV1Kx5VmtwHQ"",
  {
    maxSupportedTransactionVersion: 0,
  },
);

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16

#
Other Resources
How to build a Versioned Transaction
open in new window
How to build a Versioned Transaction with Address Lookup using LUTs
open in new window
Limitations of Versioned Transactions
open in new window
Security concerns of Versioned Transactions
open in new window
Alternate proposed solutions to Versioned Transactions
open in new window
#
References
Transactions-V2 Proposal
open in new window
Developing with Versioned Transactions
open in new window","[-1.11788195e-02  4.91272621e-02 -3.72071192e-02 -1.24599095e-02
 -3.82417217e-02 -8.80239252e-03 -7.34023228e-02 -3.02028507e-02
  4.25170287e-02  1.74213536e-02  5.44645311e-03  5.50566316e-02
 -8.98295492e-02  1.69655774e-02  8.22380185e-03 -4.80733663e-02
  5.83258532e-02 -1.25979455e-02 -2.92975623e-02  4.91241552e-02
 -4.83922251e-02  2.09769118e-03 -2.53795758e-02  5.76993339e-02
 -4.19889130e-02  2.89856605e-02 -7.12618530e-02  2.61838990e-03
 -2.27705296e-02  5.32553829e-02 -2.92729260e-03  3.51457158e-03
 -1.95689294e-02  1.99343879e-02 -3.54355425e-02  3.74780968e-02
 -2.26021954e-03  2.69285426e-03  4.47298326e-02 -2.73203533e-02
 -1.25219962e-02  5.52465580e-02 -2.75223032e-02  3.37576158e-02
  5.71434088e-02 -7.60194436e-02 -8.21649954e-02  2.24972628e-02
 -2.24246476e-02 -2.92351143e-03 -1.89315900e-02  5.12869358e-02
  3.47055146e-03  9.84329283e-02  9.07637104e-02 -6.83739260e-02
 -1.25393540e-01  1.01435557e-02  1.12407720e-02  2.42961701e-02
  6.36175796e-02 -4.41700444e-02  1.66100059e-02 -5.87875172e-02
 -7.94400275e-02 -6.62499443e-02  4.94522713e-02 -6.41515478e-02
  9.55482498e-02  4.11876850e-03 -4.71018255e-02 -4.01075818e-02
 -1.90907359e-01 -3.36144902e-02 -1.44929122e-02  5.72735406e-02
  1.85849816e-02 -1.00893108e-02 -6.90719336e-02 -1.16512008e-01
  1.49986427e-02 -5.85739762e-02  6.79326104e-03 -1.18068969e-02
 -5.02420738e-02 -2.16731187e-02 -3.51377577e-02 -4.73914780e-02
  7.02786297e-02 -2.17109658e-02  6.29520491e-02 -3.21255694e-03
  5.65274023e-02 -6.44927546e-02  4.98783179e-02 -2.05773264e-02
 -3.64536270e-02  2.08756961e-02  1.68820452e-02  5.22456057e-02
  5.88603057e-02 -4.14327867e-02 -1.93329938e-02  3.43442410e-02
  4.33433540e-02 -6.69006929e-02  5.25759533e-02  1.32932821e-02
 -9.27095264e-02  1.10208932e-02 -2.41194684e-02  8.39719325e-02
 -6.53825477e-02 -6.92202300e-02 -3.45745236e-02 -3.65985148e-02
  1.54151684e-02  1.45206554e-02 -3.03606559e-02  4.76176739e-02
  6.18103556e-02 -5.26946746e-02  4.50239889e-02 -1.54299038e-02
 -5.14478572e-02 -7.97521397e-02 -2.31087878e-02  1.17857811e-32
  5.62037043e-02  4.02668724e-03 -1.89744048e-02 -8.13148171e-03
 -3.96704022e-03  3.82274948e-02  6.53593391e-02 -1.91899072e-02
 -8.14072322e-03 -3.54707763e-02  1.98529195e-02 -1.66174525e-03
 -3.80896381e-03  2.19958741e-02  3.06575131e-02  9.79308039e-03
 -3.98478992e-02  8.33502188e-02  1.35496259e-01  5.52511066e-02
 -2.09327461e-03  1.84039138e-02  7.33409896e-02 -1.94396134e-02
  1.43307997e-02 -6.66507035e-02 -4.03534137e-02 -4.28712256e-02
 -9.44879130e-02 -1.52518125e-02  4.49780189e-02  6.91783940e-03
  4.08496298e-02  6.31733909e-02  9.23506543e-02  5.21657104e-03
 -2.09394414e-02 -4.28265929e-02  4.27712873e-02 -4.26304638e-02
 -6.73818588e-02  1.65040344e-02 -8.54512602e-02 -4.95635858e-03
 -1.06299398e-02 -6.07241737e-03 -4.69682962e-02  4.34537828e-02
  1.68368928e-02  4.65200603e-04  4.49438803e-02  5.07447496e-02
  3.41811702e-02 -5.59591576e-02  3.41685601e-02 -5.74335754e-02
  4.97766957e-02  3.91449779e-02  1.41268503e-02  4.01738798e-03
  5.28544076e-02 -3.62889878e-02 -3.92499454e-02 -4.50569671e-03
  5.86145520e-02  4.45864275e-02 -6.45036325e-02 -6.70251623e-02
 -3.89912650e-02 -5.87295415e-03  3.52293923e-02  4.84502427e-02
  3.19554061e-02  9.57611650e-02  3.52639705e-04 -8.59541073e-02
 -1.63096655e-02  7.75829852e-02  9.36945081e-02 -5.34276366e-02
 -4.62274663e-02  2.06632521e-02 -2.12022923e-02  1.13251768e-02
 -9.76424962e-02  1.05531171e-01 -1.42313223e-02 -6.43530441e-03
  9.56121925e-03 -1.88393611e-02  1.55615881e-02 -3.78922708e-02
  1.23032776e-03 -4.22444008e-02  1.29066393e-01 -1.10496741e-32
  4.48864978e-03 -1.07369676e-01 -7.84399807e-02 -1.18929790e-02
 -1.01362467e-01 -7.21674338e-02  1.14605334e-02  1.23356050e-02
  4.78910320e-02  4.24434152e-03  5.47557510e-02 -2.71180794e-02
 -2.95876898e-02  2.11404469e-02 -3.00084371e-02 -2.02064235e-02
 -5.36972731e-02 -9.89895761e-02  3.06300186e-02 -1.58746000e-02
 -3.58953979e-03  4.57806922e-02  3.75438072e-02  1.02498941e-01
 -5.98148033e-02 -4.31387015e-02 -2.01682337e-02  3.86527181e-02
  1.91159118e-02 -1.62138954e-01 -8.22196063e-03 -4.86791655e-02
  1.99381597e-02  4.75187451e-02  3.49510163e-02 -1.88865289e-02
  2.29287036e-02  3.87010537e-02  1.25001390e-02 -1.48740327e-02
  3.20971124e-02  5.02460413e-02  6.93673082e-03  7.22326860e-02
  8.67063925e-02 -8.76742229e-03 -4.62137870e-02  1.12047456e-01
  1.59028303e-02 -4.91293520e-02  8.62891786e-03 -4.73862216e-02
  2.08993275e-02  1.03089131e-01  4.32434939e-02  2.19492130e-02
  4.68028858e-02 -3.63833867e-02 -1.10754650e-02 -1.76462959e-02
 -2.11195517e-02 -2.19504293e-02  1.89489219e-02  3.94892767e-02
  7.38539696e-02  4.46986072e-02  3.53367976e-03 -5.72113767e-02
 -3.59234847e-02  2.03893296e-02  3.41870710e-02 -1.22997060e-01
 -1.21712359e-02 -5.26619591e-02  8.82064924e-02 -9.05527100e-02
 -3.34518440e-02 -7.54701644e-02  4.20921184e-02  2.87599508e-02
 -8.94905329e-02  5.19905314e-02  1.90462358e-02  9.92801338e-02
  5.86745404e-02 -4.88112532e-02 -3.83239128e-02  5.39315417e-02
  7.84162246e-03  1.54153758e-03  3.43482085e-02 -9.42052677e-02
 -8.65983143e-02 -6.17366582e-02 -7.41552655e-03 -6.34343564e-08
 -3.62672731e-02 -1.58268904e-05 -8.84503350e-02  5.79709560e-03
  8.48831087e-02  3.91180217e-02 -8.77057854e-03 -6.69040680e-02
  5.77949174e-02 -1.86251719e-02  3.52065638e-02  1.97436567e-02
 -2.37696301e-02 -6.01398870e-02  1.67694297e-02  1.56918876e-02
  3.09038279e-03 -1.18673984e-02 -2.41481960e-02  2.42840443e-02
 -4.22775559e-02 -1.32166883e-02  4.58059879e-03 -4.14848812e-02
  3.22080292e-02  2.63711102e-02  8.75225887e-02  1.09726354e-01
 -3.76335271e-02 -4.46294434e-02  4.11248840e-02 -4.13242076e-03
  1.19348221e-01  7.79544413e-02  1.00648981e-02  5.34502156e-02
  2.81103398e-03  5.77570088e-02  2.00970173e-02  2.81872600e-02
  1.20438291e-02 -1.02853486e-02 -7.17660263e-02  5.68631329e-02
  7.97915924e-03  2.43871869e-03 -1.30793631e-01  1.54520115e-02
 -3.88401523e-02 -6.03347458e-02 -1.98484901e-02  1.50289945e-02
  3.50372493e-02  7.36521408e-02 -2.24910770e-02 -4.61400971e-02
  9.82474349e-03 -2.99178511e-02  1.02951609e-01  3.58109139e-02
  1.51949108e-01  1.24403704e-02  1.32144056e-02  2.87788752e-02]"
"Text #
Account

Account trong lập trình Solana được hiểu như một vùng nhớ để lưu dữ liệu. Chúng là một khối cơ sở trong quá trình phát triển ứng dụng trên Solana.

#
Có thể bạn chưa biết

Những điều có thể bạn chưa biết

Account đươc dùng để lưu trữ dữ liệu
Mỗi Account sẽ có một địa chỉ duy nhất
Account có kích thước tối đa là 10MB (10 Mega Bytes)
PDA Account có kích thước tối đa là 10KB (10 Kilo Bytes)
PDA Account có thể dùng để ký đại diện cho một program
Kích thước Account được cố định tại thời điểm khởi tạo, nhưng vẫn có thể điều chỉnh bằng realloc
open in new window
Vùng nhớ dữ liệu được cấp phát cho Account phải được thuê bằng cách trả phí
Account owner trong trường hợp mặc định sẽ là System Program
#
Chi tiết
#
Cấu trúc Account

Có 3 kiểu Account trên Solana:

Data Accounts dùng để lưu trữ dữ liệu
Program Accounts dùng để lưu chương trình thực thi
Native Accounts ám chỉ native programs trên Solana như là System, Stake, và Vote

Kiểu Data Account lại có 2 kiểu con:

Account được sở hữu bởi System
PDA (Program Derived Address) Accounts

Mỗi Account lại có một địa chỉ (thường là public key - khoá công khai) và một owner (địa chỉ của một Program Account). Đầy đủ các trường của một Account được trình bày ở bảng dưới.

Trường	Mô tả
lamports	Số lượng lamports thuộc sở hữu bởi Account đó
owner	Địa chỉ Program Account đang kiếm soát Account đó
executable	Account này có thể thực thi các instructions hay không?
data	Dữ liệu thô dưới dạng các bytes được lưu trữ trong Account
rent_epoch	Kỳ hạn thuê vùng nhớ tiếp theo cho Account

Có một vài quy tắc quan trọng về quyền sở hữu:

Chỉ owner mới được chỉnh sửa cũng như rút số lamports từ một Data Account
Bất kỳ ai cũng được phép nạp lamports vào một Data Account
Owner của một Account có thể được gán cho một owner mới khi và chỉ khi vùng nhớ của Account đó được hoàn trả

Program Accounts không được lưu state.

Ví dụ, nếu bạn có một chương trình đếm trên một Program Account và cho phép tăng bộ đếm lên sau mỗi lần tương tác, bạn phải tạo tối thiểu 2 Account. Trong đó, một cho Program Account để lưu code thực thi, và một cho Data Account để lưu dữ liệu bộ đếm.

Để tránh việc một Account bị xoá, bạn phải trả chi phí để thuê vùng nhớ cho Account đó.

#
Thuê

Lưu trữ dữ liệu vào Account và duy trì Account đó sẽ phát sinh chi phí SOL. Chi phí này được gọi là chi phí thuê. Nếu chi phí thuê được duy trì ở mức tối thiểu là 2 năm cho Account đó, thì bạn sẽ được miễn phí lưu trữ. Bạn cũng có thể thu hồi lại phí cọc bằng cách đóng Account. Số lamports cọc sẽ được hoàn trả về địa chỉ ví của bạn.

Chi phí thuê được tính toán và chi trả ở 2 thời điểm khác nhau:

Khi có bất kỳ giao dịch nào có tham chiếu đến Account đó.
Định kỳ mỗi epoch.

Một phần của chi phí thuê thu","[-1.88820884e-02 -4.73458990e-02 -2.72978805e-02 -1.25870571e-01
 -8.99741650e-02 -9.97038931e-03  1.07638322e-01  3.42456885e-02
  6.14201017e-02  4.66668271e-02  1.12802058e-01 -1.05925575e-01
 -1.20497104e-02 -7.50439018e-02  2.20880397e-02 -6.24681003e-02
 -7.06514791e-02  5.25995763e-03 -7.10448027e-02 -8.31212923e-02
 -7.68852653e-03 -2.48121936e-02 -4.69374955e-02 -1.27800079e-02
 -6.33734763e-02  2.14680210e-02 -8.00206140e-03  5.62999286e-02
 -3.30941714e-02 -1.01658829e-01  2.39743362e-03  1.07815810e-01
  1.23481378e-02 -7.40521308e-03  6.59132972e-02 -1.14417030e-02
 -1.08894892e-02  5.71784656e-03  2.76811682e-02 -7.21583329e-03
 -1.04103304e-01 -1.20733492e-02 -5.34488596e-02 -5.56529798e-02
  5.02775125e-02  2.12529004e-02 -7.36261010e-02  2.94393934e-02
  1.11738238e-02 -7.42604118e-03 -4.53981496e-02  8.85525346e-02
  3.07124807e-03  6.85157403e-02 -9.74120349e-02 -1.84294749e-02
 -3.01604439e-03  3.04595754e-02  3.31736282e-02 -2.16784403e-02
 -6.22422509e-02  7.27024525e-02 -3.62277776e-02 -1.13505889e-02
 -1.07254386e-02 -3.16762887e-02 -1.20859638e-01 -3.17506976e-02
  2.77625164e-04  3.65166292e-02 -6.75515234e-02 -4.49861176e-02
 -1.86433926e-01  1.03797428e-01 -9.16761160e-02  1.04723992e-02
 -4.49622422e-02 -5.30669373e-03  1.47731714e-02 -1.92729849e-02
 -5.21219801e-03  5.77200130e-02  4.36393060e-02 -7.63152167e-02
 -4.69867289e-02  8.14257413e-02 -7.80213252e-02  2.29976606e-02
 -4.14452329e-02 -7.19648749e-02  7.40234703e-02  5.17136715e-02
  7.70731270e-02  9.20653809e-03 -6.22112246e-04 -5.72978035e-02
  2.32723989e-02  9.47136879e-02  1.38398877e-03  3.78274620e-02
  6.65046200e-02  5.53319678e-02  9.48879123e-03 -1.11653488e-02
 -7.46001489e-03 -9.12818534e-04  1.29983351e-01  2.59342976e-02
  2.50881352e-02 -4.61067110e-02 -6.62027299e-02  4.99629648e-03
 -5.88673837e-02 -1.17305897e-01  2.55768970e-02  3.22810113e-02
 -5.62115721e-02  7.89221376e-03 -2.54287813e-02  4.32598181e-02
  2.60108542e-02 -4.04297188e-03 -6.05286695e-02  5.08746039e-03
 -1.04797194e-02 -8.20190646e-03  8.27678889e-02  2.73117590e-32
 -2.80341357e-02  3.17414030e-02  1.63841508e-02 -6.57310635e-02
  2.29295865e-02 -4.18242142e-02 -5.31881228e-02  2.31430214e-02
 -1.03291310e-01  2.13245209e-02  4.21859063e-02 -3.90852429e-02
 -5.82511351e-02 -6.31338283e-02  7.71825910e-02 -1.64847132e-02
  4.82977144e-02 -8.22082609e-02  1.08092725e-02 -1.17739234e-02
  2.19834279e-02 -6.67370716e-03  5.63831441e-02  2.00683381e-02
  5.90621717e-02 -1.30104311e-02 -7.26373047e-02 -1.02374675e-02
 -1.41743673e-02  4.31961305e-02  2.48129796e-02 -2.36563627e-02
 -7.83224180e-02 -3.37860510e-02 -8.28423649e-02 -3.45089994e-02
  1.92070883e-02 -7.97577128e-02 -3.96595187e-02 -2.53082458e-02
  1.34482821e-02 -9.06564947e-03  8.68352503e-03 -3.42957815e-03
 -3.51986177e-02  6.65077493e-02  2.44935546e-02  1.90328285e-02
  1.54895205e-02  2.65667625e-02 -4.21909383e-04 -1.03193820e-02
 -9.78267193e-02  7.78737664e-02  4.16118167e-02 -3.90007608e-02
 -1.88376440e-03 -5.36772721e-02  2.96701845e-02  8.02154616e-02
  1.59228675e-03 -1.32770995e-02  1.07432231e-02  9.60483626e-02
 -4.72632907e-02 -1.08835667e-01  5.82861751e-02  1.28950095e-02
  2.01180298e-02  1.20191351e-02 -6.19870499e-02 -9.07087550e-02
  1.19189201e-02  5.39861657e-02 -5.62383197e-02 -6.76609427e-02
  4.07706089e-02 -7.86859449e-03 -4.86352555e-02  9.00651589e-02
  7.24041611e-02 -4.07420360e-02  1.88195128e-02 -8.24147239e-02
 -9.33485385e-03  2.37558521e-02  7.84822255e-02 -6.47077188e-02
 -4.17346992e-02 -1.11780781e-03 -3.75464372e-02  6.88303933e-02
  6.27745613e-02  1.80650186e-02 -2.08577625e-02 -2.45607452e-32
  3.67741985e-03 -3.41826789e-02 -7.54493698e-02  8.14958848e-03
  1.24714221e-03  7.36643188e-03  1.66961364e-02 -3.13623101e-02
  2.61623766e-02 -6.07991852e-02 -6.83292300e-02  1.39838327e-02
 -1.07470024e-02  1.88387781e-02  7.00753629e-02 -2.49572867e-03
  6.58236220e-02 -2.33820314e-03 -4.38821949e-02  4.89973240e-02
 -2.35205404e-02 -2.16896646e-02 -9.89918318e-03  7.04596518e-03
 -2.19255462e-02  1.67097822e-02 -5.46938740e-03  7.59495869e-02
  2.80235279e-02  4.14458476e-02  9.88080259e-03 -4.45205048e-02
 -4.85569164e-02  5.62025085e-02  9.62472428e-03 -1.67978689e-01
  7.42698461e-02  6.71373978e-02 -3.79494838e-02  5.39362133e-02
  5.74002750e-02 -1.12630092e-02  4.29576896e-02 -4.53472324e-02
  6.86649000e-03 -2.48262435e-02  2.04702839e-02 -6.51187599e-02
 -5.21128662e-02  1.15142204e-02  1.15907103e-01 -1.55631807e-02
  1.53915212e-02  2.28869319e-02  1.36985704e-02  5.40319160e-02
  4.36781868e-02 -6.89031407e-02 -4.95903268e-02 -1.34083942e-01
 -1.49811152e-02  1.30850337e-02 -3.83353382e-02  4.07436192e-02
  1.08281739e-01 -2.75689624e-02 -1.01282429e-02  3.18790972e-02
 -4.99111554e-03 -9.06556100e-02 -3.03833093e-02 -8.03848505e-02
 -1.01333708e-02 -2.10780371e-02 -7.38323014e-03  1.64272971e-02
 -5.67803532e-02 -2.47779069e-03  3.08951107e-03 -1.15597816e-02
 -8.37031081e-02  3.31019387e-02 -2.18994040e-02  1.57545228e-02
 -5.29079046e-03  1.05687920e-02 -9.74773690e-02 -2.97443755e-02
  2.52077784e-02  1.79400127e-02  4.48605493e-02 -3.30344252e-02
  5.52466288e-02  5.40241413e-02 -3.63860391e-02 -6.74158329e-08
  1.14377234e-02 -1.28183618e-01  3.60916182e-02  5.38001023e-02
  7.04329461e-02 -1.37061169e-02 -1.86299644e-02 -3.47822346e-02
  1.38097629e-02  3.84996682e-02  2.50900146e-02  5.20183779e-02
 -5.56255644e-03  6.66371267e-03 -6.73081074e-03  6.04365505e-02
  6.42847344e-02  4.99666901e-03  5.93583705e-03 -3.01445164e-02
  3.78131904e-02  3.60977948e-02  1.53909633e-02  4.34228964e-02
 -7.65218958e-02  6.92991987e-02 -3.43637317e-02  4.78776842e-02
 -1.21851629e-02 -1.92621890e-02  5.54182641e-02 -4.01347801e-02
  1.67342424e-02 -1.99176632e-02  1.23624399e-01 -1.50675345e-02
 -1.18450383e-02  7.47583481e-03 -6.88862354e-02  5.75825870e-02
  1.68449637e-02  1.94324497e-02  5.26882298e-02 -4.51535685e-03
  6.91920985e-03 -4.25168574e-02 -3.76446731e-02 -5.63494675e-02
  1.16327778e-01 -3.28447782e-02 -4.97051105e-02  1.23579549e-02
  7.36759081e-02  5.78099303e-02  2.92658024e-02 -3.96952993e-04
  1.16538731e-02  2.52763443e-02 -2.32928945e-03  4.28940021e-02
  6.30522594e-02  6.68670908e-02 -3.87931429e-02 -2.91711763e-02]"
"được sẽ được tiêu huỷ, trong khi phần còn lại sẽ được phân chia cho các Vote Account sau mỗi slot.

Nếu một Account không đủ cọc để chi trả phí thuê, Account đó sẽ bị thu hồi và toàn bộ dữ liệu sẽ bị xoá.

#
Các nguồn tài liệu khác
Solana Account Model
open in new window
Tài liệu chính thống
open in new window
pencilflip account thread
open in new window
#
Lời cảm ơn

Khái niệm căn bản này được đóng góp của Pencilflip. Theo dõi anh ấy trên Twitter
open in new window
. #
Transactions

Người dùng có thể gọi Program bằng cách tạo và gửi một Transaction đến mạng lưới Solana. Một Transaction có thể chứa nhiều instruction bên trong, và mỗi instruction có thể tương tác với các Program khác nhau. Khi một Transaction được gửi đi, Solana Runtime
open in new window
 sẽ xử lý các instruction bên trong Transaction theo thứ tự và tuần tự. Nếu có bất kỳ instruction nào xảy ra lỗi, toàn bộ Transaction sẽ được xem là lỗi.

#
Có thể bạn chưa biết

Những điều có thể bạn chưa biết

Các instruction là những đơn vị thực thi nhỏ nhất trên Solana
Mỗi instruction sẽ chứa:
program_id của Program mục tiêu
Một mảng tất cả accounts mà instruction muốn đọc hoặc ghi
Một mảng byte instruction_data cung cấp dữ liệu đầu vào cụ thể cho Program
Nhiều instruction có thể được đóng gói trong một Transaction duy nhất
Mỗi Transaction có thể chứa:
Một mảng tất cả accounts mà Transaction muốn đọc hoặc ghi
Một hoặc nhiều instructions
blockhash hiện tại
Một hoặc nhiều signatures
Các instruction sẽ được thực thi tuần tự và theo thứ tự trong Transaction
Nếu có bất kỳ instruction nào xảy ra lỗi, toàn bộ giao dịch sẽ được xem là lỗi
Transaction có giới hạn dung lượng là 1232 bytes
#
Chi tiết

Solana Runtime yêu cầu instruction và Transaction phải khai báo một danh sách tất cả các Account mà chúng cần đọc hoặc ghi dữ liệu. Bằng cách yêu cầu những Account này trước, Solana Runtime có thể song song hoá quá trình thực thi xuyên suốt tất cả các Transaction.

Khi một Transaction được gửi vào mạng lưới, Solana Runtime sẽ xử lý các instructions của nó tuần tự từng instruction một theo thứ tự khai báo bên trong Transaction. Với mỗi instruction, Program được truy vấn sẽ lấy dữ liệu từ instruction và thực thi trên các Account tương ứng trong instruction đó. Program hoặc là trả về kết quả thành công, hoặc là với kết quả lỗi với mã lỗi tương ứng. Với bất kỳ lỗi nào được trả ra, toàn bộ Transaction sẽ kết thúc với lỗi ngay lập tức.

Bất kỳ Transaction nào mà thay đổi dữ liệu của Account hay rút lamports ra từ Account thì đều cần yêu cầu chữ ký của owner trong Account. Bất kỳ Account nào khi cần được sửa đổi đều phải đánh dấu là writable trong instruction tương ứng. Một Account có thể được nạp thêm lamports mà không cần xin phép, chỉ cần người trả phí cho Transaction đủ khả năng chi trả phí thuê và phí giao dịch.

Trước khi gửi đi, tất cả các","[-6.50091842e-02 -6.07024617e-02 -3.54792066e-02 -1.12246729e-01
 -8.45132917e-02 -1.29179293e-02  7.80507326e-02  1.29388347e-02
  1.00417137e-01  5.19260988e-02  1.18826173e-01 -5.57124652e-02
 -3.96699943e-02 -2.94610169e-02  8.18099752e-02 -6.16228692e-02
 -4.22850959e-02 -4.09581028e-02 -9.58958790e-02 -5.18929511e-02
  5.53204678e-03 -3.97993363e-02 -5.86915724e-02 -3.77798416e-02
 -6.98259249e-02 -2.13723872e-02 -6.32664887e-04  1.79289486e-02
  2.52656322e-02 -9.04274359e-02 -4.48009092e-03  1.41025245e-01
 -1.99869499e-02 -1.10265575e-02  6.09166920e-02  3.87218408e-02
 -4.12657969e-02 -1.79005377e-02  5.47888242e-02 -8.79771076e-03
 -8.50650817e-02 -3.86814922e-02 -7.98936188e-02 -6.91315085e-02
  8.00435022e-02 -3.07153612e-02 -3.82197127e-02 -2.02538613e-02
 -4.13822457e-02  1.02080889e-02 -6.42085969e-02  9.48194861e-02
 -3.30028273e-02  4.57096063e-02 -8.07799324e-02 -1.63297523e-02
  1.55429938e-03  1.72887146e-02  2.99428161e-02 -2.04306263e-02
 -5.89805767e-02  6.10390082e-02 -2.92464830e-02 -3.58953443e-03
 -2.19643973e-02  6.03905367e-03 -7.34475553e-02 -4.84269038e-02
  1.48503156e-02  2.31528375e-02 -7.23511279e-02 -4.01400588e-02
 -1.12031914e-01  3.59327979e-02 -8.28113556e-02  1.12605910e-03
 -1.58414338e-02  6.51570503e-03  9.10012890e-03 -8.99569541e-02
  6.35721609e-02  3.69190089e-02  3.26291211e-02 -5.51609173e-02
 -1.69315108e-03  7.28211254e-02 -4.79750782e-02  1.55584235e-02
  3.62426750e-02 -3.99322063e-02  8.02548528e-02  9.89894718e-02
  2.23294608e-02 -1.94669068e-02  3.92744355e-02 -6.90094680e-02
  3.55546623e-02  6.53990507e-02 -1.63617954e-02  6.13794811e-02
  5.48523404e-02  5.21378890e-02  4.57489528e-02 -9.09197377e-04
 -3.36480960e-02  1.28111904e-02  1.02521002e-01  5.66507550e-03
  1.83734428e-02 -3.52454819e-02 -7.61861503e-02  2.20453423e-02
  1.65075657e-03 -1.50575891e-01  5.62561909e-03  4.04903665e-02
 -5.00156395e-02  1.41532030e-02 -3.30000222e-02  9.34865698e-02
  4.16556001e-02  2.40525920e-02 -1.08744964e-01  3.52240540e-03
 -1.33716101e-02 -7.43311942e-02  5.58093116e-02  2.64174194e-32
  3.15021351e-02  1.47362379e-02 -1.83928031e-02 -9.26309228e-02
  1.63677838e-02 -5.08153858e-03 -2.93176994e-02  4.68609575e-03
 -9.36074257e-02 -3.62996235e-02  1.45998513e-02 -6.14751354e-02
 -7.53801614e-02 -4.09338772e-02  6.92234337e-02  1.31673627e-02
  3.45260128e-02 -6.82006255e-02  4.58541512e-02 -1.53328320e-02
  5.94034046e-02 -4.91200276e-02  1.76590085e-02 -6.47860439e-03
  5.37729524e-02  1.07434876e-02 -5.50624914e-02 -5.46005704e-02
 -6.42272905e-02  4.41032536e-02  3.39852944e-02 -1.02794105e-02
 -8.00796971e-02 -5.07367635e-03 -7.93943852e-02 -3.78544442e-02
  1.47230574e-03 -4.89198714e-02 -1.36220017e-02 -5.53354062e-02
 -2.34367717e-02  3.85071449e-02  1.78289344e-03  2.03818902e-02
 -2.17815284e-02  4.59747612e-02  2.31250692e-02  1.11567173e-02
  6.20031394e-02  2.74694692e-02 -4.36762013e-02 -2.51360927e-02
 -1.00124173e-01  2.89373659e-02  2.56775580e-02 -5.21270335e-02
 -4.25394531e-03 -2.38696560e-02  2.75782999e-02  5.86012602e-02
  1.00060944e-02 -5.71636576e-03 -4.56104577e-02  6.21855222e-02
 -6.80842698e-02 -8.57377797e-02 -1.98159833e-02 -1.75639689e-02
  4.50697578e-02 -5.47317155e-02 -8.69374499e-02 -3.88821065e-02
  4.94998647e-03  5.55855148e-02 -1.54768461e-02 -5.50975464e-02
  2.92613562e-02 -3.26042771e-02 -3.81555893e-02  3.39811146e-02
  4.86127920e-02 -7.49122575e-02  1.68509188e-03 -8.22875053e-02
  2.98602674e-02  4.30124253e-02  8.40721205e-02 -4.49712388e-02
 -2.29978357e-02 -1.15914680e-02 -1.44642554e-02  3.14136408e-02
  7.26748854e-02  1.10964850e-02  1.68286469e-02 -2.31171073e-32
  4.34276677e-04 -1.27844596e-02 -9.02909413e-02  5.27727082e-02
  8.21666513e-03  3.36913429e-02  2.51148287e-02 -7.31550381e-02
  6.61072880e-02 -1.89431608e-02 -5.17867729e-02 -3.32444790e-04
  3.47067863e-02  4.82544042e-02  2.80339979e-02  2.90869921e-03
  4.25060391e-02  5.95872402e-02 -3.62474397e-02  5.39563708e-02
  1.45313116e-02 -3.29340398e-02 -8.07347894e-03 -7.27828173e-03
 -3.71824624e-03  3.85856368e-02  4.54274639e-02  5.18754758e-02
 -2.17476580e-02  5.65538183e-02  6.81218877e-03 -7.26591498e-02
 -8.02084431e-02  9.98936519e-02  1.50526930e-02 -1.29026547e-01
  8.85868967e-02  4.59351242e-02 -3.91721725e-02  7.80420080e-02
  9.81379151e-02 -2.89527252e-02  3.02676577e-02 -7.01765111e-03
 -2.71483809e-02 -2.01296937e-02 -2.25987602e-02 -2.88582500e-02
 -4.79721501e-02 -4.02703732e-02  1.02625161e-01  4.38596308e-02
  1.70663558e-02 -3.27990651e-02  1.69828977e-03  6.64846227e-02
  1.00224830e-01 -9.78760570e-02 -9.58105847e-02 -1.00943357e-01
  2.51396541e-02  4.23323512e-02 -1.29903052e-02  4.13226383e-03
  1.37805447e-01 -4.40961160e-02  1.81779098e-02  5.09771667e-02
  5.45935705e-03 -8.18556920e-02 -6.76720217e-03 -7.28052855e-02
 -9.03899968e-03 -4.16915193e-02  4.71363962e-03  2.83296071e-02
 -2.03280430e-03 -1.89078804e-02  2.79186275e-02  1.49389813e-02
 -6.46995082e-02  5.83966868e-03  4.19680635e-03 -1.91734843e-02
 -5.43320924e-02  4.23034094e-02 -3.61150317e-02  2.43072305e-03
  2.47704647e-02 -1.35834310e-02  1.24098342e-02  2.70185433e-02
  8.98966342e-02  6.37083501e-02  4.14369162e-03 -6.55660628e-08
 -2.33009923e-02 -1.28456727e-01  3.68213933e-03  6.26295432e-02
  7.37748146e-02 -1.65908262e-02  1.75385661e-02 -3.15260477e-02
  3.89584154e-02  2.26370199e-03  3.09469290e-02  5.25455400e-02
 -1.01373754e-02 -2.41485089e-02  2.80448943e-02  5.97227775e-02
  4.65491824e-02 -1.45699186e-02 -1.24485679e-02 -8.21922794e-02
  9.06194299e-02 -1.98542792e-02  2.68069338e-02  5.56206666e-02
 -8.17796290e-02  4.97944877e-02 -6.77328324e-03  7.24760592e-02
 -1.65884756e-02  1.41488155e-02  7.08843861e-03 -7.01731592e-02
  3.51639353e-02 -4.02332768e-02  7.00936466e-02  9.20631341e-04
 -9.90132918e-04 -1.77954696e-02 -4.93231863e-02  8.08442831e-02
  5.91403916e-02 -3.57604250e-02  2.10002549e-02 -1.23304073e-02
  4.03123163e-02  1.54618621e-02 -1.81218199e-02 -9.41602439e-02
  1.11410059e-01 -2.53540594e-02 -7.86174759e-02 -2.08245702e-02
  8.54833946e-02  4.85876650e-02  3.49257253e-02  1.41374376e-02
  2.02636477e-02  2.96069719e-02  3.07542011e-02  2.66986492e-04
  4.91480194e-02  7.38840550e-02 -4.94993739e-02 -3.45239826e-02]"
"Transaction phải tham chiếu Blockhash
open in new window
 mới nhất. Blockhash được dùng để chống trùng lặp và loại bỏ các giao dịch quá hạn. Thời hạn tối đa cho một Transaction là không quá 150 blocks so với Blockhash được ghi, và khoảng chừng 1 phút 19 giây theo ước tính tại thời điểm cuốn sách được viết.

#
Phí

Mạng Solana sẽ thu 2 loại phí:

Phí giao dịch
open in new window
 cho việc lan truyền Transaction (Hay thường được gọi là phí gas ở các blockchain khác)
Phí thuê
open in new window
 vùng nhớ dữ liệu cho Account

Trên Solana, phí giao dịch thường bất biến, nghĩa là không có khái niệm về đánh phí theo thị trường nơi mà người dùng có thể trả phí cao hơn mặt bằng để tăng cơ hội được ưu tiên thực thi Transaction trước. Tại thời điểm tác giả viết, phí giao dịch được xác định bằng số lượng chữ ký bên trong Transaction (cụ thể là lamports_per_signature), và không phải bằng số bước tính toán cho Transaction đó. Điều đó được lý giải bởi vì luôn có một giới hạn trần là 1232 bytes cho mọi Transaction.

Tất cả Transaction yêu cầu ít nhất một Account là writable để ký Transaction đó. Một khi được gửi, Account trả phí với nhãn writable và sigher sẽ được tuần tự hoá trước tiên. Account này sẽ chi trả các chi phí phát sinh của Transaction cho dù Transaction thành công hay thất bại. Nếu Account trả phí không đủ số dư để trả phí giao dịch, Transaction sẽ bị bỏ qua.

Tại thời điểm được viết, 50% phí giao dịch sẽ được thưởng cho Validator để sinh ra block, trong khi 50% còn lại sẽ được đốt. Bằng cơ cấu như vậy, Validator được khuyến khích phải xử lý càng nhiều Transaction càng tốt trong thời hạn được đề cử.

#
Các nguồn tài liệu khác
Tài liệu chính thống
open in new window
Transaction Structure
open in new window
Transaction Fees by Justin Starry
open in new window
An Introduction to Solana by Hana
open in new window
Transaction Processing by Jito Labs
open in new window
Solana Transaction in Depth by Alex Miller
open in new window #
Program

Bất kỳ lập trình viên nào đều có thể viết và triển khai một chương trình trên Solana. Program (hay được biết đến với tên gọi là Smart Contract trên các blockchain khác) sẽ là nền tảng cho các hoạt động on-chain; thứ giúp tạo nên đa số các hình thái từ DeFi, NFTs cho đến Mạng xã hội và Trò chơi.

#
Có thể bạn chưa biết

Những điều có thể bạn chưa biết

Program sẽ xử lý các instruction từ người dùng và các Program khác
Tất cả các Program đều là stateless: mọi dữ liệu mà Program tương tác đều được lưu trên những Account tách biệt và được lan truyền thông qua các instruction
Bản thân Program được lưu bên trong những Account được đánh dấu là executable
Tất cả Program được sở hữu bởi BPF Loader
open in new window
 và được thực thi bởi Solana Runtime
open in new window
Hầu hết các lập trình viên đều phát triển Program","[-5.52881323e-02 -2.53935345e-02 -2.82979663e-02 -8.23594332e-02
 -6.78252950e-02 -3.66043039e-02  6.71040043e-02 -2.09175926e-02
  1.01726748e-01  5.75948805e-02  1.27593830e-01 -4.72362563e-02
 -5.70867360e-02  4.00540465e-03  5.17004207e-02 -6.04647808e-02
 -4.59969901e-02 -1.07080098e-02 -1.00312755e-01 -3.38156968e-02
 -2.74331383e-02 -6.03702478e-02 -6.24319278e-02 -3.12198289e-02
 -6.35982528e-02  3.14474385e-03 -2.14346834e-02  1.18760513e-02
  2.02267300e-02 -8.92498717e-02  3.20766680e-02  1.08185858e-01
 -5.45828268e-02  1.29862437e-02  8.68813097e-02  2.12431047e-02
 -8.58278200e-03  2.34364755e-02  3.40298787e-02 -3.24702561e-02
  2.04377808e-03 -1.00657772e-02 -5.03355004e-02 -3.95857058e-02
  1.63649060e-02  2.68575754e-02 -1.91913489e-02  3.08989137e-02
  1.68321154e-03 -2.75926036e-03 -1.04549870e-01  1.12899631e-01
 -9.31546930e-03  8.83496180e-02 -6.42377064e-02  2.27852189e-03
  2.22004484e-02 -3.19779441e-02 -3.38349164e-05 -3.63370031e-02
 -3.59418839e-02  5.98839112e-02  1.95352104e-03 -2.96042245e-02
  3.44747342e-02  2.29164306e-02 -6.24898188e-02 -2.47258600e-02
 -3.37361470e-02  3.55367810e-02 -1.40770571e-02 -3.67776752e-02
 -1.24120511e-01  4.56578657e-02 -4.40667793e-02 -6.30840892e-03
 -4.91910875e-02 -2.22141342e-03 -1.63492486e-02 -9.05686542e-02
  2.31887884e-02  1.36845000e-02  7.82694016e-03 -9.04026404e-02
 -6.32634610e-02  5.43559343e-02 -6.59955218e-02  3.15824226e-02
  3.43134627e-02 -3.52271236e-02  1.11555539e-01  8.09961930e-02
 -4.15951535e-02 -2.33299807e-02  1.10529978e-02 -8.41301382e-02
 -5.86617796e-04  1.07562035e-01  2.58928668e-02  4.62878197e-02
  9.10425186e-02  4.91304658e-02  5.44197671e-03 -4.41965126e-02
 -5.71331531e-02  1.50679015e-02  8.70348439e-02 -9.96713433e-03
  1.26642818e-02 -1.31507153e-02 -8.40846077e-02  1.08394260e-02
  2.69394089e-02 -1.29288554e-01 -5.94349802e-02  4.39994261e-02
 -2.87313331e-02  2.85578463e-02 -1.15403980e-02  5.35066761e-02
  2.40443405e-02 -2.41476065e-03 -6.89304844e-02  6.96801813e-03
 -7.41084591e-02 -1.05469584e-01  5.31829931e-02  2.30303088e-32
  4.88775829e-03  2.29926500e-02 -4.53573558e-03 -7.10273311e-02
  3.34760733e-02  3.13200317e-02 -5.24930507e-02 -4.41689864e-02
 -4.54273559e-02 -8.58334731e-03  6.00547669e-03 -9.09816176e-02
 -1.05683558e-01 -1.09190203e-01  3.30195352e-02  2.03080494e-02
  5.53220417e-03 -7.31398091e-02  7.72529887e-03  2.97818147e-03
  1.58165116e-02 -1.35286069e-02  1.92078222e-02  1.42173888e-02
  1.50534064e-02  2.27105673e-02 -3.11851129e-02 -8.00943971e-02
 -3.34176794e-02  4.61883992e-02  1.02928877e-01 -1.81670848e-03
 -3.55956852e-02  8.79850425e-03 -2.83974186e-02  3.88445184e-02
 -3.59452590e-02 -5.48190996e-02  2.40725768e-03 -1.14603050e-01
 -6.82299957e-02 -9.91456024e-03 -2.91439146e-02  3.46469283e-02
 -3.95389758e-02  4.81608100e-02  6.62530307e-04  8.77388008e-03
  1.05166957e-02  2.17414573e-02 -1.00956913e-02 -3.59570421e-02
 -1.14358947e-01  6.84154453e-03  1.28599321e-02 -2.47655939e-02
  6.04769448e-03 -3.27195376e-02  3.72353271e-02  5.43941222e-02
 -1.10755637e-02 -4.12219428e-02 -8.05004761e-02  4.92183566e-02
 -8.52361768e-02 -7.99073726e-02 -9.40567721e-03 -1.78974308e-02
 -1.03684012e-02 -2.08184812e-02 -4.53474894e-02 -4.99216244e-02
 -1.32620744e-02  9.94273946e-02 -3.56146619e-02 -4.81759310e-02
  6.02352992e-02 -1.22657744e-02 -2.07978413e-02  4.75231148e-02
 -4.46221698e-03 -4.29357514e-02  5.13767358e-03 -4.75067794e-02
 -1.28838146e-04  6.54210895e-02  3.19296010e-02 -4.89680320e-02
 -1.31132342e-02  2.08003800e-02  1.41499517e-02  3.98115963e-02
  1.61664113e-01  1.14563648e-02  1.20914094e-02 -2.09534307e-32
 -2.54176930e-03  1.31132910e-02 -3.11295968e-02  4.42616120e-02
 -1.35732247e-02  1.18637402e-02  1.20663624e-02  4.86544333e-02
  8.97184908e-02 -1.34314941e-02  1.32064549e-02 -3.39519815e-03
 -2.14420203e-02  7.27797076e-02  3.02851778e-02 -4.32977546e-03
  1.32209182e-01  3.70804407e-02  1.72569118e-02  6.37787580e-02
  3.20469588e-02 -1.41146528e-02 -4.50864732e-02  4.61689122e-02
 -1.90537982e-02  2.69627664e-02  2.30920371e-02  8.33796859e-02
 -4.24047408e-04  2.75669359e-02  4.01237747e-03 -5.89699931e-02
 -7.81115070e-02  8.35404322e-02  3.46208587e-02 -1.19171999e-01
  1.21618100e-01  1.89138912e-02 -2.91224923e-02  4.13937382e-02
  3.09260823e-02  8.00709520e-03 -1.63005181e-02 -3.70145626e-02
 -6.77759349e-02 -1.71871725e-02  1.36979213e-02  1.63924303e-02
 -6.54779896e-02 -2.68015359e-02  1.22398987e-01  1.49699897e-02
 -4.46777977e-03 -7.85801485e-02  1.41588980e-02  1.40836686e-01
  2.71559022e-02 -6.03518225e-02 -8.42934400e-02 -8.62995088e-02
 -1.36822334e-03  4.13852073e-02 -7.79442955e-03 -2.12244187e-02
  4.94310483e-02 -7.48166116e-04  1.45113152e-02  4.68043089e-02
  4.77156788e-03 -7.39487410e-02 -5.87157644e-02 -5.49125597e-02
 -3.18862647e-02 -2.73610046e-03  2.43483465e-02  3.26608159e-02
  2.29835417e-02 -5.30293435e-02  4.25853059e-02  4.05187486e-03
 -8.68169516e-02  6.51015639e-02 -4.02064323e-02 -2.68222634e-02
  3.18098329e-02  3.05409934e-02 -5.03560118e-02  1.27988933e-02
  1.49529874e-02  4.52683680e-03 -2.41798908e-02  2.03168690e-02
  7.65610710e-02  6.53748885e-02 -4.46751639e-02 -5.92099063e-08
 -2.62094308e-02 -1.23115472e-01  4.85971458e-02  1.86572399e-03
  4.67014350e-02 -6.01779744e-02  7.03089386e-02  4.77040280e-03
  1.20002897e-02 -5.33800479e-03  3.12507711e-02  8.19651484e-02
 -5.68727516e-02 -4.24483716e-02 -4.75924388e-02  5.46756946e-02
  3.73541117e-02 -3.85805443e-02  4.03268775e-03 -1.02291979e-01
  1.18084624e-01  1.02158990e-02  4.45551574e-02  9.69980881e-02
 -9.25856233e-02  3.08592226e-02  2.66250297e-02  1.74241774e-02
 -4.59485985e-02 -3.91398966e-02  2.49990802e-02 -2.77855117e-02
  3.36389318e-02 -2.54707802e-02  3.19328010e-02  2.42861938e-02
 -2.59506758e-02 -3.04329395e-02 -4.77082655e-02  5.83670586e-02
  9.09685493e-02  2.60648876e-02  3.22927497e-02 -3.05568855e-02
  1.38814449e-02 -4.57104202e-03 -1.44721968e-02 -5.41317947e-02
  2.06816271e-02 -2.40030792e-02 -6.11410439e-02 -1.01199755e-02
  1.21464156e-01  4.66567203e-02 -1.35709774e-02 -4.71549369e-02
  4.41113338e-02  4.43972200e-02  4.89911847e-02 -2.05156673e-02
  1.03260174e-01  4.47221659e-02 -2.94698048e-02 -1.41583309e-02]"
"bằng Rust hoặc C++, nhưng bạn vẫn có thể lựa chọn bất kỳ ngôn ngữ lập trình mà có hỗ trợ BPF
open in new window
 của LLVM
open in new window
Mọi Program chỉ có duy nhất một điểm truy cập, nơi mà các instruction được xử lý (cụ thể là process_instruction); các tham số đầu vào luôn bao gồm:
program_id: pubkey
accounts: array,
instruction_data: byte array
#
Chi tiết

Không giống như hấu hết các blockchain khác, Solana tách bạch giữa code và dữ liệu. Tất cả dữ liệu mà chương trình cần tương tác sẽ được lưu ở các Account tách biệt và được lan truyền thông dưới dạng tham chiếu thông qua các instruction. Mô hình này cho phép một chương trình chung có thể hoạt động trên nhiều kiểu Account khác nhau mà không cần tái cơ cấu lại chương trình. Một ví dụ hay gặp của mô hình này là Native Programs và SPL Programs.

#
Native Programs & Solana Program Library (SPL) Programs

Solana được trang bị sẵn một số Program nền tảng và được dùng để xây dựng các tương tác on-chain. Những Program này thường được chia thành Native Programs
open in new window
 và Solana Program Library (SPL) Programs
open in new window
.

Native Programs cung cấp các chức năng cơ sở và cần thiết để vận hành các validators. Trong các Program này, chương trình được biết đến rộng rãi nhất là System Program
open in new window
. System Program chịu trách nhiệm cho việc cấp phát Account mới, cũng như chuyển SOL giữa các Account khác nhau.

SPL Programs hỗ trợ một số các hoạt động on-chain bao gồm tạo tokens, trao đổi tokens, cho vay tokens, cũng như tạo stake pools, và duy trì name service. SPL Token Program
open in new window
 có thể được gọi trực tiếp thông qua Solana CLI, hoặc bằng cách khác hơn như là Associated Token Account Program
open in new window
. Associated Token Account Program thường được kết hợp với các chương trình tuỳ chỉnh để gọi đến SPL Token Program hơn là gọi độc lập.

#
Viết một Program

Program hầu như được phát triển dựa trên Rust hoặc C++. Tuy nhiên bạn vẫn có thể phát triển bằng bất kỳ ngôn ngữ nào miễn là hỗ trợ BPF của LLVM. Hiện tại, lập trình viên cũng có thể chuyển đổi smart contract trên EVM được viết bằng Solidity thông qua dự án được khởi xướng bởi Neon Labs
open in new window
 và Solang
open in new window
.

Đa số các Program dự trên Rust đều bám sát kiến trúc sau:

Tệp	Mô tả
lib.rs	Đăng ký các modules
entrypoint.rs	Điểm truy cập của Program
instruction.rs	Program API, tuần tự và phi tuần tự hoá dữ liệu đầu vào
processor.rs	Logic của Program
state.rs	Các đối tượng của Program, tuần tự và phi tuần tự hoá trạng thái
error.rs	Định nghĩa lỗi của Program

Hiện tại, Anchor
open in new window
 đang nổi lên như là một framework phổ biến giúp phát triển Program nhanh chóng hơn. Anchor được lấy cảm hứng nhiều từ Ruby on Rails nhằm giảm thiểu các mẫu code lặp lại, đồng thời chuẩn hoá việc tuần tự và phi tuần tự hoá dữ liệu trong quá","[-6.40899166e-02 -3.41255032e-02 -3.09497807e-02 -1.00631401e-01
 -8.64548683e-02 -2.31647678e-02  7.99008831e-02 -4.09942004e-04
  6.62045628e-02  3.99901830e-02  1.38870537e-01 -5.44373430e-02
 -7.21060298e-03 -9.06492248e-02  5.74371219e-02 -3.88435535e-02
 -7.15959296e-02 -1.98587033e-04 -4.61419635e-02 -7.81162083e-02
 -1.20063694e-02 -3.98992710e-02 -6.51323795e-02 -3.71221825e-02
 -4.22393680e-02  6.84086308e-02  1.33365742e-03  8.04624036e-02
  2.21937173e-03 -8.95087123e-02  6.26669079e-03  1.56480148e-01
  1.82237383e-02  3.01751327e-02  5.16864546e-02  3.37550491e-02
  4.51408559e-03 -6.12128600e-02  4.16797064e-02  1.90539809e-03
 -1.32400975e-01  2.13688817e-02 -6.06946424e-02 -1.15345661e-02
  7.40090013e-02 -1.82440709e-02 -7.55622238e-02 -3.76251116e-02
 -4.38304581e-02 -1.17255365e-02 -5.91963828e-02  1.08893923e-01
  2.04606156e-04  4.99809645e-02 -7.83874020e-02 -1.06017794e-02
 -3.32164252e-03  3.02913487e-02  7.29673430e-02 -1.47058731e-02
 -1.08555257e-01  3.23554873e-02 -3.52132097e-02 -1.02112084e-04
  1.00390818e-02 -1.25532700e-02 -7.40286857e-02 -3.82178687e-02
  1.41386315e-02  4.70487811e-02 -8.94375965e-02 -3.99311483e-02
 -1.25085935e-01  8.08313116e-02 -9.67835337e-02  1.93431210e-02
 -1.92635618e-02 -3.07965819e-02  2.52029207e-03 -7.01750442e-02
 -1.38459578e-02  5.92048019e-02  5.00638112e-02 -2.81437542e-02
 -2.72445120e-02  6.13251515e-02 -4.77326959e-02  1.65455602e-02
  3.17239156e-03 -3.91321518e-02  6.18917309e-02  4.57176492e-02
  1.62242353e-02 -1.13484757e-02  4.90362644e-02 -3.72251384e-02
  4.11594734e-02  7.03591779e-02 -5.03826216e-02  1.44224521e-02
  7.62612969e-02  6.43508732e-02  3.40260006e-02 -7.35578761e-02
 -2.27385294e-02  2.48128478e-03  1.29313663e-01  4.26421873e-02
  1.62897930e-02 -3.56457233e-02 -5.95261306e-02  3.33902948e-02
 -2.88573299e-02 -1.39258280e-01 -2.89631877e-02  2.16081552e-02
 -2.46327892e-02 -2.41757184e-02 -1.56060979e-02  8.09236243e-02
  1.66674685e-02  1.21223682e-03 -9.32266191e-02 -1.06955338e-02
 -9.46136937e-02 -9.22926292e-02  4.83300537e-02  2.33284774e-32
  2.81146001e-02  2.61840988e-02 -1.77823734e-02 -5.90945855e-02
  6.05175309e-02 -1.30226007e-02  4.88231750e-03 -5.56709524e-03
 -1.16065338e-01  1.71572797e-03  3.04662697e-02 -7.57505894e-02
 -6.79140165e-02 -3.62778455e-02  2.95243207e-02 -1.49652851e-03
  3.30862403e-02 -1.10123418e-01 -1.78114045e-02  9.96282883e-03
  3.14931534e-02  1.04148369e-02  5.02084419e-02  5.92349702e-03
  4.94690575e-02  2.45247409e-02 -4.46810201e-02 -5.97704574e-02
  1.05458489e-02  6.08709268e-02  6.86786473e-02 -3.71762514e-02
 -4.54987213e-02 -3.76549289e-02 -2.88927164e-02 -2.52370927e-02
  7.82964658e-03 -4.61396724e-02 -1.01149315e-02 -4.39158864e-02
  3.27214375e-02 -6.36499794e-03  3.11950855e-02  1.07763521e-02
 -3.51936370e-02  1.94177851e-02  1.65240536e-03 -7.00492878e-03
  3.59149799e-02  3.67120430e-02 -5.13608381e-03 -3.51904240e-03
 -1.22089259e-01  5.96160665e-02  6.91781864e-02 -4.95572574e-02
  6.56527875e-04 -4.20145802e-02  2.53989920e-02  1.03094094e-01
 -4.39348724e-03  5.54674715e-02  6.08629547e-03  7.02106431e-02
 -2.45583747e-02 -8.83111507e-02 -2.54638996e-02  5.05524362e-03
  4.77346890e-02 -2.31654141e-02 -7.54317865e-02 -9.49147269e-02
  2.03001909e-02  6.15139492e-02 -5.98521717e-02 -3.28633748e-02
  4.47557233e-02 -5.03676012e-02  1.76677722e-02 -1.59458239e-02
  7.26215243e-02 -2.94499323e-02  2.90204398e-02 -4.33582626e-02
 -1.64150423e-03  1.02804042e-02  1.91672295e-02 -5.53495660e-02
 -5.07935137e-02  1.07538216e-02 -4.01615128e-02  4.71854396e-02
  8.97355154e-02 -2.41139270e-02 -4.65894602e-02 -2.09657543e-32
  2.46261898e-02  5.15694730e-03 -7.96426237e-02  2.45443247e-02
 -3.85074690e-02  1.25509622e-02  5.49714789e-02 -8.75996202e-02
  3.60219367e-02 -2.11451184e-02 -3.84681635e-02 -1.25111919e-02
 -9.70821176e-03  1.20602669e-02  9.10526216e-02  1.44319348e-02
  3.76558229e-02  5.14328331e-02  1.16114067e-02  9.46654379e-02
 -1.66158658e-02 -3.21200825e-02 -8.94928910e-03  5.27197644e-02
  5.69787435e-03  3.83090451e-02  3.97700928e-02  4.44647074e-02
  2.98734773e-02  3.67874242e-02 -6.90205116e-03 -4.44348231e-02
 -5.79922013e-02  1.01018891e-01  2.09768843e-02 -1.34729818e-01
  9.39154476e-02  5.05219847e-02 -6.21783547e-02  3.38265859e-02
  7.24843666e-02 -4.00494933e-02 -1.60254035e-02 -2.61441283e-02
 -3.24649503e-03 -2.34665666e-02  4.06798013e-02 -4.62548062e-02
 -6.81628659e-02 -2.15145946e-02  1.16127156e-01 -1.52907697e-02
  8.53281748e-03 -1.87164377e-02  2.79302546e-03  3.18606496e-02
  3.04418318e-02 -7.05063865e-02 -4.69701774e-02 -9.00894850e-02
 -5.58464439e-04  2.78010909e-02 -2.86118989e-03 -2.59827022e-02
  1.17587522e-01 -2.15417184e-02 -3.33819701e-03  6.14395067e-02
 -3.03651821e-02 -1.37896746e-01 -6.88651437e-03 -4.49524447e-02
 -1.91785786e-02 -5.93953133e-02 -3.73582579e-02  1.41636655e-02
 -4.80015799e-02 -2.63239183e-02 -1.22523699e-02  2.59945728e-02
 -4.73380610e-02  2.86089536e-02 -3.70174609e-02  2.30542589e-02
 -1.58126038e-02  4.71119322e-02 -6.41192272e-02 -7.38199241e-03
 -3.80749046e-03 -1.36807775e-02  1.36885932e-02  2.88445000e-02
  7.35409781e-02  7.89602920e-02  2.47219228e-03 -6.12892777e-08
 -1.45952334e-03 -1.16339155e-01  1.80035066e-02  2.72133201e-02
  7.48388842e-02 -4.41299602e-02 -2.61507258e-02 -6.89876676e-02
 -6.15961989e-03 -5.39574260e-03  6.91133514e-02  2.95060072e-02
 -3.42345349e-02 -1.79913435e-02  1.60820093e-02  9.06906277e-02
  4.69377339e-02  8.48151185e-03  1.90921146e-02 -3.44774425e-02
  7.59976879e-02  5.70533238e-02  3.98414992e-02  9.14334506e-02
 -9.13897455e-02  5.64550497e-02 -2.78429897e-03  8.81489441e-02
 -1.24713210e-02 -1.89573597e-02  6.46604151e-02 -5.56314252e-02
 -7.62766460e-03 -2.70132292e-02  5.56288585e-02 -5.74988835e-02
  1.73274968e-02 -2.85669155e-02 -2.12175865e-02  5.32690771e-02
  1.45643242e-02  1.82342865e-02  1.13913212e-02  1.26349395e-02
  1.64419021e-02 -9.78206657e-03  8.75595398e-03 -7.20656738e-02
  7.47637823e-02 -9.59342811e-03 -6.84091151e-02  5.45221241e-03
  5.03554046e-02  7.48629570e-02  1.90988500e-02  1.41571639e-02
  1.35904772e-03  1.76880918e-02  1.31590469e-02  3.46014239e-02
  4.52473611e-02  6.56330436e-02 -3.89679596e-02 -3.45052220e-02]"
"trình phát triển bằng Rust.

Program thường được phát triển và kiểm thử trên môi trường localhost và devnet trước khi được triển khai trên testnet hoặc mainnet. Solana hỗ trợ các môi trường sau:

Cụm môi trường	Đường dẫn kết nối RPC
Mainnet-beta	https://api.mainnet-beta.solana.com
Testnet	https://api.testnet.solana.com
Devnet	https://api.devnet.solana.com
Localhost	Port mặc định: 8899 (e.g. http://localhost:8899, http://192.168.1.88:8899)

Sau khi triển khai lên một môi trường cụ thể, người dùng có thể tương tác với các Program trên on-chain thông qua kết nối RPC
open in new window
 tương ứng.

#
Triển khai Program

Lập trình viên có thể triển khai Program của họ thông qua CLI
open in new window
:

solana program deploy <PROGRAM_FILEPATH>

1


Khi một Program được triển khai, nó sẽ được biên dịch thành một ELF shared object
open in new window
 (có chứa BPF bytecode) và được tải lên mạng Solana. Program được lưu trữ trong Account (giống như hấu hết mọi thứ trên Solana), ngoại trừ việc được đánh dấu là executable và owner được gán cho BPF Loader. Địa chỉ của Account này sẽ được gọi là program_id và được sử dụng nhưng là tham chiếu cho Program trong các giao dịch ở tương lai.

Solana hỗ trợ đa dạng các BPF Loader với phiên bản mới nhất là Upgradable BPF Loader
open in new window
. BPF Loader chịu trách nhiệm cho việc điều hành các Account của Program và cho phép người dùng tương tác bằng program_id. Tất cả Program chỉ có một điểm truy cập duy nhất, nơi mà các instruction sẽ được ghi nhận và xử lý (cụ thể là process_instruction) với các tham số bao gồm:

program_id: pubkey
accounts: array,
instruction_data: byte array

Mỗi khi được gọi, Program sẽ được thực thi bởi Solana Runtime.

#
Các nguồn tài liệu khác
Tài liệu chính thống
open in new window
Tài liệu SPL
open in new window
Program Deploys by Justin Starry
open in new window
Solana Starter Kit by Iron Addicted Dog
open in new window
Programming on Solana by Paulx
open in new window
An Introduction to the Solana Blockchain by Hana
open in new window
Anchor
open in new window 404
How did we get here?
Take me home #
Program Derived Addresses (PDAs)

Program Derived Addresses (hay còn gọi vắn tắt là PDA) là những Account được thiết kế cho các Program có thể kiểm soát. Với PDA, Program có thể lập trình được chữ ký cho một số địa chỉ cụ thể mà không cần khoá riêng tư - private key. PDA là cơ sở để hiện thực Cross-Program Invocation
open in new window
, trong đó Solana cho phép các Program có thể tương tác cũng như kết hợp với nhau để tạo nên một hệ thống phức tạp hơn.

#
Có thể bạn chưa biết

Những điều có thể bạn chưa biết

PDA là một chuỗi 32 byte tương tự khoá công khai - public keys, nhưng lại không tồn tại khoá riêng tư tương ứng
findProgramAddress được dùng để suy ra một PDA từ thông tin program_id và seeds (một tập hợp các bytes)
Một bump (có giá trị 1 byte) được dùng để tạo ra một PDA khả dĩ nằm ngoài đường cong ellipitic ed25519.
Program có thể tạo ra chữ ký cho PDA bằng cách cung cấp seeds và bump cho hàm invoke_signed
open in new window
Một PDA chỉ có","[-1.23232737e-01 -4.87642409e-03 -6.76212683e-02 -1.21816479e-01
 -3.97952050e-02 -4.46961410e-02 -8.40114546e-04 -2.69387346e-02
  4.07735482e-02  3.84125262e-02  1.29662439e-01 -7.05547482e-02
 -5.05612642e-02 -2.37212665e-02  8.03617910e-02 -7.26210400e-02
 -2.24134848e-02 -5.91733865e-03 -6.27003331e-03 -9.41759869e-02
 -2.85221431e-02  7.58121861e-03 -4.75586057e-02 -6.94583654e-02
 -9.64185968e-02  1.61067268e-03  1.55747235e-02  7.76457191e-02
  3.24040130e-02 -3.12098674e-02 -7.20555522e-03  1.57320857e-01
 -8.17038417e-02  3.16758044e-02  4.63172197e-02  6.27846792e-02
 -2.42614653e-02 -3.52292247e-02 -4.26806659e-02  1.44014321e-02
 -2.35646181e-02  3.33058881e-03 -4.69681472e-02 -6.42951950e-02
  7.99321085e-02 -5.13590686e-02 -3.07261031e-02 -1.78282987e-03
 -5.30808000e-03 -6.12482689e-02 -5.97530641e-02  8.67277533e-02
 -1.53351680e-03  3.51466946e-02 -4.51708734e-02 -3.77402268e-02
  2.21085176e-03  6.65346310e-02  1.72635783e-02 -9.32251010e-03
  2.63488721e-02  2.20539756e-02 -5.52047677e-02 -1.10189347e-02
 -8.71466566e-03 -4.54524346e-02 -3.74825485e-02  7.08166510e-03
 -1.49981189e-03 -1.75882280e-02 -5.44261709e-02 -2.21531950e-02
 -9.96926501e-02  7.48875439e-02 -3.16030122e-02  3.03935315e-02
 -1.02515388e-02  5.32301795e-03 -5.84684536e-02 -6.27850369e-02
  4.30651568e-02  6.85351491e-02  2.91859247e-02 -9.57052968e-03
 -2.76285526e-03  4.48698178e-02 -4.16950658e-02  2.84544658e-02
  6.83452711e-02 -2.18905397e-02  7.00070038e-02  8.09387937e-02
 -2.93487385e-02  3.40640955e-02  1.14927357e-02 -4.71091717e-02
  2.62219850e-02  6.30765781e-02 -5.92857897e-02  5.46071753e-02
  6.33584782e-02 -1.66825112e-02 -1.00536142e-02 -8.70453194e-03
 -3.16983052e-02  4.61244285e-02  6.65355474e-02  4.37494144e-02
  1.17890745e-01  2.92261504e-02 -1.12880722e-01 -1.08592836e-02
 -1.95660535e-02 -1.41691670e-01 -6.95776045e-02  5.94719723e-02
 -6.07846379e-02  5.91077609e-03  3.64197716e-02  8.65696743e-02
  1.50555884e-02 -4.59667929e-02 -5.70935793e-02  2.57188920e-02
  6.14047807e-04 -3.91081534e-02  1.02413297e-01  1.69734361e-32
  1.10091651e-02  4.50492427e-02 -2.48685610e-02 -8.48491564e-02
  6.38999566e-02 -5.74931502e-02  4.25976478e-02  1.13134412e-02
 -7.86578283e-02 -3.54667418e-02 -2.31518745e-02 -2.27828901e-02
 -6.40893355e-02 -1.05132662e-01  3.88507582e-02  7.46910321e-03
  1.96901523e-02 -4.47154120e-02  2.56037042e-02  3.75775211e-02
  6.14905078e-03 -3.38236950e-02  4.11197096e-02 -4.91023213e-02
  3.28966677e-02 -1.88131463e-02 -5.81464432e-02 -1.50393450e-03
  9.20715928e-03  2.65314747e-02  1.06560312e-01 -1.96018033e-02
 -1.10777644e-02 -8.76778085e-03 -3.94225633e-03 -3.56517434e-02
 -1.46186864e-02  2.47150223e-04 -2.51005944e-02  6.11999538e-03
 -3.40664424e-02 -2.02099346e-02  1.78526919e-02  2.19401084e-02
  1.71390604e-02 -2.21795794e-02 -5.59889972e-02  4.88631078e-04
  2.61072721e-03  5.28292283e-02 -5.51435947e-02 -1.10529652e-02
 -8.14326182e-02  5.41219786e-02  1.45977708e-02  9.59979184e-03
  2.04967950e-02 -4.27655801e-02 -2.67297439e-02  1.15333367e-02
 -2.20304821e-02 -1.27799399e-02 -3.22006941e-02  1.47362519e-02
 -5.81661202e-02 -7.02449679e-02 -2.36791372e-03 -1.77940801e-02
  8.97145048e-02  1.05821220e-02 -8.18451494e-02 -8.35323241e-03
  8.00220892e-02  7.31202736e-02 -1.92747917e-02 -2.20254380e-02
  1.44324293e-02  3.59964138e-03  5.87255647e-03  4.14418578e-02
  1.03771277e-02 -1.01611968e-02  1.91197563e-02 -4.67497390e-03
  3.18769808e-03  1.73678864e-02  4.90879826e-02 -4.94852811e-02
  5.09366989e-02  2.04957612e-02  1.21765537e-02  7.29644746e-02
  3.39520834e-02 -3.35040428e-02 -1.00697512e-02 -1.35840612e-32
  6.49731373e-03  5.71146794e-02 -1.56126916e-01  6.10667188e-03
 -3.21465991e-02 -1.41201550e-02  3.35202888e-02 -4.80661355e-02
 -2.80331657e-03 -1.18514001e-02  5.49997687e-02 -4.36495766e-02
  5.02252765e-02 -3.41940497e-04  1.23171825e-02  5.25112599e-02
  3.36092561e-02  2.34013665e-02  1.08135790e-02  5.16119599e-02
  3.03867343e-03 -3.01398616e-02 -2.49919854e-02 -4.76621911e-02
 -4.69948165e-02 -2.09396072e-02  4.40194942e-02  5.24910055e-02
 -1.56352483e-02  1.51206814e-02  4.28289138e-02 -2.33055018e-02
 -1.05342291e-01  1.14338472e-01  3.97824198e-02 -3.33354175e-02
  1.19955100e-01  6.76081777e-02 -1.18225208e-02  5.19257709e-02
  1.38572991e-01 -4.39810231e-02 -8.47037062e-02  1.38776349e-02
 -7.07949623e-02 -9.88173392e-03  3.87322381e-02 -3.89370583e-02
 -1.43103674e-01 -4.30236049e-02  1.68369323e-01  2.96403281e-02
  3.57608460e-02 -2.88778078e-02  3.57967056e-02  7.92625919e-02
  3.35323624e-02 -1.02799414e-02 -6.90103993e-02  8.63826275e-03
  1.03012905e-01 -4.80036251e-02 -6.48397207e-02 -1.22550940e-02
  8.97540823e-02  2.17020717e-02 -2.27396693e-02  1.07570894e-01
  3.77816558e-02 -8.76891166e-02 -8.22027698e-02 -1.64654776e-02
 -8.59419536e-03 -4.53270264e-02 -6.86510280e-02 -4.80994210e-02
 -1.53963789e-02  8.35594628e-03  1.18688568e-02  1.86841898e-02
 -7.92843774e-02  1.31655931e-02 -4.49060760e-02 -9.50131379e-03
  2.50615552e-02  4.93985377e-02 -1.76502578e-02  6.55791089e-02
  1.47598917e-02 -2.31938269e-02 -2.37189159e-02  7.66798630e-02
  2.96905879e-02  1.03337504e-01  2.35399734e-02 -5.86125424e-08
  1.35036381e-02 -9.10909846e-02 -7.76220337e-02  3.56921740e-02
  4.19989005e-02  3.19287293e-02  5.13437837e-02 -6.45060539e-02
 -2.04698090e-02  3.74759063e-02 -1.44829182e-02  3.79781276e-02
 -8.07563439e-02  5.00621973e-03  1.07188132e-02  6.31687269e-02
 -5.27798058e-03  1.44053046e-02  4.26402763e-02 -8.65706801e-02
  1.14487074e-01  3.14497724e-02  1.37151536e-02  4.65715788e-02
 -1.03009678e-01  4.80721295e-02  2.19786465e-02  3.86683717e-02
 -4.54590097e-02 -2.02571582e-02 -6.99028187e-03 -7.86639303e-02
 -1.54352132e-02 -2.63994951e-02  3.87443043e-02  5.35553694e-02
 -4.41779755e-02  2.29508094e-02  1.32826250e-03  1.92210022e-02
 -1.21006847e-03  6.14643022e-02 -3.60054821e-02 -8.50089733e-03
  6.94061071e-02 -2.50880681e-02  4.09253165e-02 -2.48271171e-02
  1.11193977e-01 -3.25178690e-02 -1.19046783e-02 -1.73808020e-02
  5.51480278e-02  1.48344273e-02  6.60640374e-02  9.95894987e-03
 -2.00112276e-02 -2.39354447e-02 -4.38404679e-02  7.79462978e-02
 -2.89997994e-03  9.51823518e-02 -3.31426300e-02  1.61986277e-02]"
"thể được ký bởi Program mà nó được suy ra.
Ngoài việc cho phép Program có thể ký lên các instruction, PDA cũng cung cấp một interface giống với hashmap dành cho việc đánh chỉ số Account
#
Chi tiết

PDA là một khối cơ sở cho việc lập trình trên Solana. Với PDA, Program có thể ký cho nhiều Account trong khi đảm bảo rằng không tồn tại người dùng nào có thể giả mạo chữ ký cho cùng Account đó. Ngoài việc tạo ra chữ ký, Program cũng có thể chỉnh sửa Account được sở hữu bởi PDA của nó.

Hình ảnh được cho phép bời Pencilflip

#
Cách sinh PDA

Để hiểu được khái niệm đằng sau PDA, là cần thiết để làm rõ rằng PDA không phải được ""tạo ra"" mà là ""tìm ra"". PDA được sinh ra từ quá trình kết hợp giữa seeds (ví dụ như chuỗi ký tự “vote_account”) và program_id. Việc kết hợp này được cho qua một hàm băm - sha256 - để thử xem giá trị tạo ra có phải là một khoá công khai nằm ngoài đường cong ellipitic ed25519 hay không.

Quá trình thử này sẽ có xác suất 50/50. Nghĩa là sẽ có 50% cơ hội quá trình sinh ra một khoá công khai nằm trên đường cong ellipitic ed25519. Trong trường hợp đó, chúng ta đơn giản chỉ cần thêm một vài bit vào đầu vào để thử lại. Những bit được thêm vào trong thuật ngữ kỹ thuật được gọi là bump. Trong Solana, chúng ta bắt đầu với bump = 255 và tiếp tục giảm xuống 254, 253 cứ thể cho đến khi tìm được địa chỉ PDA không nằm trên đường cong ellipitic. Việc này có vẻ thô sơ, nhưng thực ra nó lại cho chúng ta một phương pháp bất biến để suy ra PDA cho các lần thử khác nhau, miễn là cùng một giá trị đầu vào.

#
Tương tác với PDAs

Khi một PDA được sinh ra, findProgramAddress sẽ trả về hai giá trị là địa chỉ của PDA và bump dùng để đảm bảo PDA này ngoài đường cong ellipitic. Với giá trị bump này, Program có thể ký lên bất kỳ instruction nào có chứa PDA của nó về sau. Để ký, Program phải truyền cho instruction một danh sách các Account, các seeds và bump dùng để suy ra PDA vào hàm invoke_signed. Ngoài việc ký lên instruction, PDA còn ký cho việc tạo ra chính bản thân nó thông qua hàm invoke_signed.

Khi phát triển ứng dụng với PDA, thường thì bạn sẽ phải lưu bump
open in new window
 trong dữ liệu Account. Điều này cho phép lập trình viên có thể kiểm tra PDA mà không cần truyền bump vào dữ liệu đầu vào của instruction.

#
Các nguồn tài liệu khác
Tài liệu chính thống
open in new window
Understanding Program Derived Addresses
open in new window # Đọc Program AccountgetProgramAccounts là một phương thức RPC giúp lấy dữ liệu của tất cả các Account được sở hữu bởi Program. Lưu ý, phân trang vẫn chưa được hỗ trợ tại thời điểm hiện tại.","[-1.07546873e-01 -4.64787818e-02 -8.17972049e-03 -6.86373115e-02
 -7.90802762e-02  2.00276785e-02  3.61268222e-02 -1.75435264e-02
  4.64446396e-02  1.46666961e-02  1.52682856e-01 -6.43394068e-02
 -2.22422462e-02 -7.72654116e-02  3.64480056e-02 -1.03032198e-02
 -2.49945093e-02 -1.20675808e-03 -4.82628457e-02 -7.81562030e-02
 -1.71549842e-02 -5.70541173e-02 -3.68382558e-02  2.56872233e-02
 -5.31611927e-02  7.52516389e-02  2.43503763e-03  1.58582032e-02
  3.96842282e-04 -5.24760894e-02 -8.64245184e-03  1.71956509e-01
  2.74526812e-02 -3.88124958e-02  1.95008889e-02  5.93540668e-02
 -4.48923185e-02 -1.95372030e-02  4.51799557e-02  4.69807684e-02
 -7.67700300e-02 -2.77957320e-02 -1.62959769e-02 -8.52554590e-02
  7.23194554e-02 -3.19980644e-02 -4.39372919e-02  3.86273558e-03
  7.43744103e-03 -1.58472918e-02 -3.91330831e-02  9.02151093e-02
 -4.46534045e-02  5.38108870e-02 -1.07024997e-01  2.85156462e-02
  9.28514730e-03  4.98423725e-02  5.69939949e-02  1.50234355e-02
 -9.84990597e-02  6.10902905e-02 -4.47352715e-02  9.40988585e-03
  3.60763781e-02 -3.83753590e-02 -8.41406435e-02 -5.57558909e-02
 -5.51647693e-03  4.02308740e-02 -3.80596519e-02 -4.51477915e-02
 -1.02622896e-01  8.42747167e-02 -2.93672588e-02  6.39791414e-02
 -8.15579388e-03 -3.74273234e-03  1.93055011e-02 -7.27815256e-02
  3.92419100e-02  4.25220206e-02  6.78667575e-02 -6.93558902e-02
  1.03805121e-02  9.84114707e-02 -1.35068586e-02  3.00473217e-02
  1.46884061e-02 -7.75667503e-02  2.89934333e-02  7.84718767e-02
 -3.81853059e-02  7.05027394e-03  7.20307324e-03 -6.45675659e-02
  2.97988262e-02  6.65410459e-02 -3.17129418e-02  2.54804492e-02
  6.17080741e-02  1.32552441e-02  2.09969804e-02 -5.02125509e-02
 -4.31508049e-02 -9.19989962e-03  9.75498557e-02 -2.88764481e-02
  6.75315261e-02  2.23986078e-02 -7.33963698e-02 -2.63843499e-02
 -1.54258832e-02 -1.44068420e-01  1.01823183e-02  3.71778235e-02
 -4.21674810e-02 -3.48589569e-02 -5.18054105e-02  6.03613295e-02
  1.87587347e-02  2.11062538e-03 -3.77085805e-02  4.28001676e-03
 -4.67934869e-02 -5.97338639e-02  6.76511228e-02  1.92942381e-32
  3.34857479e-02  2.70977244e-02  1.93737578e-02 -8.99697691e-02
  1.61450934e-02 -1.19637838e-03 -1.93255115e-02 -5.55450544e-02
 -5.08170053e-02 -2.21019355e-03  6.12293445e-02 -3.31408083e-02
 -6.07582293e-02 -1.53407250e-02  5.48134148e-02  8.98991432e-03
  4.52065244e-02 -9.10626352e-02 -4.16834326e-03 -2.60119438e-02
  2.14698054e-02  2.97534303e-03 -2.69509968e-03 -1.80531703e-02
  5.38999848e-02  2.10575256e-02 -4.23591211e-02 -4.26886752e-02
 -3.35009620e-02  5.11685088e-02  4.96847592e-02 -3.78190470e-03
 -7.35123008e-02 -8.37613568e-02 -1.25406876e-01 -3.82102653e-02
 -1.04972543e-02 -3.90549935e-02 -2.86210384e-02 -3.55792302e-03
  1.90048590e-02  1.74702387e-02  5.54994307e-02  2.31230073e-02
 -9.40495543e-03  4.70431298e-02  2.53974851e-02 -2.50856001e-02
  2.73204260e-02  1.73189361e-02 -1.32686989e-02 -4.14496027e-02
 -7.30945989e-02  4.59270924e-02  6.65606111e-02 -5.04500754e-02
  2.52046138e-02 -2.14836802e-02  2.74084490e-02  5.01537062e-02
  5.22934049e-02 -3.31566529e-03 -3.60757783e-02  4.67268117e-02
 -5.57882786e-02 -8.63626748e-02 -2.33289283e-02  1.82782374e-02
  1.06961563e-01 -3.46967056e-02 -8.64117071e-02 -7.09178373e-02
 -1.49402358e-02  2.08089836e-02 -4.78366204e-02 -5.52253984e-02
  9.43109915e-02 -6.24881918e-03 -4.50576469e-02  5.07957079e-02
  3.33655216e-02 -4.55176868e-02  1.79053079e-02 -6.25740290e-02
 -9.05359921e-04  1.45560701e-03  7.19561055e-02 -6.08992204e-02
 -2.52923593e-02  9.79372207e-03 -5.00054881e-02  6.61857426e-02
  4.98610809e-02  2.92623751e-02 -1.79225076e-02 -1.73323806e-32
  2.49159448e-02  3.93898934e-02 -5.88111728e-02  2.12622974e-02
 -4.74575534e-03 -2.20907014e-02  5.02784066e-02 -2.71236897e-02
  5.62237687e-02 -6.27610832e-02 -4.91698012e-02 -4.95402589e-02
  1.83104482e-02  4.36472148e-02  7.46426061e-02  4.87980805e-02
  2.63593085e-02  7.95647651e-02  4.81757009e-03  7.67614767e-02
 -2.48054974e-02 -1.37780923e-02 -1.10665243e-02  3.45842273e-04
  1.76004181e-03  1.03999497e-02  5.81375882e-02  2.41155620e-03
  2.71710847e-02  6.48009628e-02  7.28063285e-03 -6.07842319e-02
 -1.10561311e-01  9.58785117e-02 -2.84110922e-02 -8.74325782e-02
  7.42763653e-02  3.51422168e-02 -6.55506253e-02  5.39905205e-02
  6.09300584e-02 -3.57512832e-02 -2.39898474e-03 -4.20304947e-02
 -4.56510261e-02 -3.00240498e-02  6.90393820e-02 -2.99006440e-02
 -1.14081748e-01  2.20295917e-02  7.45900273e-02 -4.57214490e-02
 -4.30360762e-03 -8.86026211e-03 -2.56904867e-02  2.13278253e-02
  6.49060905e-02 -5.52030429e-02 -5.96159920e-02 -1.30094022e-01
  7.17277033e-03  7.36997202e-02 -2.86767352e-02 -2.52868999e-02
  5.94955944e-02  1.57118514e-02  3.47045362e-02  2.44036075e-02
  4.20768596e-02 -8.64144191e-02 -5.40122986e-02 -2.09227391e-02
 -4.02012980e-03 -2.58907434e-02 -9.22447722e-03  4.05274406e-02
 -6.17488623e-02  2.19031367e-02 -6.95581839e-04 -5.22249639e-02
 -8.30176547e-02  1.46709867e-02 -2.35834196e-02  2.11513811e-03
 -1.03873713e-02  1.14746138e-01 -6.34006560e-02 -1.94270369e-02
  4.89842482e-02  8.28777719e-03  4.19922844e-02  1.63479522e-02
  9.37718675e-02  7.92506412e-02  5.04762540e-03 -5.30540234e-08
  3.65400966e-03 -9.87777859e-02  4.24554981e-02  8.84176232e-03
  8.86979476e-02 -5.07439300e-03 -9.62731056e-03 -6.41038492e-02
  3.95734198e-02  6.15830570e-02  2.04383861e-02  8.56520310e-02
 -2.12626439e-02 -7.07546948e-03 -2.30594929e-02  7.30811954e-02
  4.68496755e-02  2.43224800e-02  2.71851439e-02 -5.27620912e-02
  5.20259701e-02  2.12762523e-02  4.13642265e-02  4.02257890e-02
 -9.88946408e-02  5.71720786e-02 -1.97857581e-02  6.77268580e-02
 -6.16165027e-02  7.17111863e-03  6.29366115e-02 -4.65910956e-02
  1.25526702e-02 -7.62598589e-02  8.49071890e-02 -7.51030892e-02
 -5.73069276e-03 -3.22919413e-02 -4.32453491e-02  5.25191724e-02
  7.33797848e-02  7.48772779e-03  4.99758311e-02 -3.07027642e-02
  5.12247868e-02 -2.64473390e-02  1.71489436e-02 -6.87294751e-02
  1.05582267e-01 -3.16632241e-02 -1.09958693e-01 -4.97653671e-02
  4.13468592e-02 -1.09845707e-02  6.91535771e-02 -1.96807720e-02
  1.50657985e-02  2.94648446e-02  1.63337924e-02 -3.21345031e-02
  2.47465614e-02  8.56403783e-02 -3.84223536e-02 -4.61048521e-02]"
"Việc gọi getProgramAccounts nên có thêm các tham số dataSlice và/hoặc filters để cải thiện thời gian trả về với kết quả mong muốn.# Có thể bạn chưa biếtTham sốprogramId: string - Khoá công khai của Program cần truy vấn và biểu diễn dưới dạng base58(Tuỳ chọn) configOrCommitment: object - Tham số cài đặt có chứa các trường tuỳ chọn sau: (Tuỳ chọn) commitment: string - State commitmentopen in new window(Tuỳ chọn) encoding: string - Kiểu mã hoá dữ liệu, một trong các kiểu sau: base58, base64, jsonParsed. Lưu ý, người dùng web3js nên sử dụng getParsedProgramAccountsopen in new window(Tuỳ chọn) dataSlice: object - Giới hạn các Account trả về dựa trên: offset: number - Vị trí bắt đầu cho dữ liệu được trả về của Accountlength: number - Độ dài dữ liệu của Account cần trả về và được tính từ vị trí bắt đầu(Tuỳ chọn) filters: array - Lọc các kết quả bằng cách sử dụng các bộ lọc sau: memcmp: object - Lọc bằng cách so sánh một chuỗi dữ liệu dưới dạng các bytes với dữ liệu Account offset: number - Vị trí bắt đầu trong dữ liệu Account dùng để so sánhbytes: string - Dữ liệu cần so sánh, được truyền vào dưới dạng base58 và không quá 129 bytesdataSize: number - Lọc theo độ lớn của dữ liệu Account(Tuỳ chọn) withContext: boolean - Đóng gói kết quả vào một đối tượng RpcResponse JSONopen in new window# Trả vềMặc định getProgramAccounts sẽ trả về một mảng các đối tượng JSON với cấu trúc như sau:pubkey: string - Địa chỉ của Account và được mã hoá base58account: object - Là một đối tượng JSON với các trường con như sau: lamports: number, số dư lamports của Accountowner: string, Địa chỉ của Program sở hữu Account và được mã hoá base58data: string | object - Dữ liệu của Account và được biểu diễn dưới dạng, hoặc là binary, hoặc là JSON, tuỳ vào tham số encoding lúc truyền vàoexecutable: boolean, Nhãn đánh dấu nếu Account này chứa một Program và có thể thực thirentEpoch: number, Kỳ hạn thuê tiếp theo của Account# Chi tiếtgetProgramAccounts là một phương thức RPC rất linh hoạt và có khả năng trả về tất cả các Account được sở hữu bởi một Program. Chúng ta có thể sử dụng getProgramAccounts cho nhiều loại truy vấn khác nhau, ví dụ như:Tất cả các Account của một ví cụ thểTất cả các Account cho một mint (hoặc thường được gọi là token đối với các blockchain khác) (i.e. Tất cả người giữ token SRMopen in new window)Tất cả các Account theo ý muốn của một Program cụ thể (i.e. Tất cả Account người dùng của ứng dụng Mangoopen in new window)Mặc dù hữu dụng là vậy, getProgramAccounts thường bị dùng sai vì các hạn chế hiện tại. Nhiều câu truy vấn được hỗ trợ bởi getProgramAccounts yêu cầu các nốt RPC phải quét một khối lượng rất lớn các dữ liệu. Những câu truy vấn như vậy không chỉ lớn về dung lượng dữ liệu và","[-9.97546092e-02  1.37495408e-02 -9.94636044e-02 -7.19243065e-02
 -1.04155667e-01 -6.90286374e-03  5.10373674e-02  4.19468842e-02
  3.19840834e-02  2.76504401e-02  6.61354437e-02 -1.20933823e-01
 -1.12951500e-02 -8.04629549e-02  6.30432218e-02 -2.04183664e-02
 -1.70004852e-02 -6.23580515e-02 -7.65117407e-02 -7.35823363e-02
  6.74923137e-02 -3.66896577e-02 -5.47727197e-02 -1.64152477e-02
  1.29129412e-02  3.23208421e-02  1.88088827e-02  5.74090965e-02
  2.87755101e-04 -2.59668678e-02  2.37029418e-02  9.24541503e-02
  5.19373193e-02  2.90321801e-02  4.98416796e-02  4.17745858e-02
 -4.57073785e-02 -3.44418399e-02  2.38874927e-02 -3.92161682e-02
 -9.00452286e-02  5.75378425e-02 -7.50812218e-02 -3.35957259e-02
  1.96420923e-02 -3.38113494e-02 -5.37656322e-02 -3.17590721e-02
 -5.25818877e-02 -7.90009648e-03 -6.47699535e-02  6.65957332e-02
 -8.40938743e-03  6.92234933e-02 -8.80453512e-02  9.66302864e-03
 -5.38114496e-02  4.01560068e-02  6.20729700e-02  1.25250919e-02
 -8.17228481e-02  5.37425419e-03 -1.75651312e-02  1.60320085e-02
 -1.39494669e-02 -3.27384919e-02 -4.56540994e-02 -1.43874055e-02
  3.45857926e-02  9.91396327e-03 -9.76598039e-02 -8.70636012e-03
 -1.24534637e-01  8.48803446e-02 -4.51042689e-02  2.61492282e-02
 -6.91072941e-02 -7.40656117e-03  6.93416968e-02 -1.25653759e-01
  2.41336506e-02 -1.39894346e-02 -1.85438879e-02  2.85463370e-02
  6.76479712e-02  3.11142914e-02 -3.90581787e-02  6.55222088e-02
  1.19909947e-03 -3.19305398e-02  3.64659466e-02  2.21027993e-02
  2.96279951e-03 -1.62137523e-02 -1.83911100e-02 -3.70935947e-02
  8.22801981e-03  6.41978905e-02 -4.79946248e-02  3.28953378e-02
  5.40433303e-02  3.70850810e-03  6.09664842e-02 -7.52380956e-03
 -4.73029576e-02 -3.41715366e-02  1.10047817e-01  1.08699612e-02
  5.86037971e-02  1.80632658e-02 -1.12070709e-01  4.23203483e-02
 -4.40141372e-02 -1.39946222e-01 -4.28914614e-02  1.07676886e-01
 -9.05013829e-02 -1.19390432e-02 -1.68337766e-02  3.13950516e-02
  3.72208655e-02 -5.93781546e-02 -6.58188164e-02  1.59923900e-02
 -6.40460476e-02 -7.80577958e-02  6.57013357e-02  2.00886063e-32
 -6.83787139e-03 -3.23874131e-02 -2.18456313e-02 -4.76610288e-02
  4.10918035e-02 -4.73620445e-02  4.09304649e-02  4.87793460e-02
 -2.15505976e-02 -2.86653508e-02 -7.42265061e-02  6.52609533e-03
 -2.95571182e-02 -4.15030215e-03  7.21247569e-02 -2.98382007e-02
  3.71023789e-02 -8.33230931e-03  3.53819206e-02  6.09662682e-02
  7.98026994e-02 -3.41816396e-02  5.00691496e-02 -3.14715244e-02
  7.72501901e-02  2.07884461e-02 -6.69956356e-02  7.55515648e-03
 -3.54058109e-02  3.87215689e-02  7.83708990e-02 -1.47336693e-02
 -1.59557406e-02 -2.95877643e-02  3.31795141e-02 -8.31664652e-02
 -1.69594847e-02 -3.56163755e-02 -2.81495508e-03 -4.47434820e-02
  3.63546275e-02  1.31114256e-02  1.50812194e-02 -2.16310881e-02
 -4.23807018e-02 -3.95122059e-02  1.09011913e-02 -1.12374350e-02
  4.59673293e-02  9.53290910e-02  5.71217947e-03  4.72496822e-03
 -1.06965393e-01  3.86672392e-02  2.08622571e-02 -7.55803585e-02
  4.33112197e-02  6.27657259e-03  8.02064780e-03  1.31454244e-02
 -6.78759888e-02  6.41527236e-04  2.19618529e-02  1.60155892e-02
  1.39810024e-02 -2.39382330e-02 -2.81853359e-02 -2.19714660e-02
  1.00503927e-02  3.19627672e-02 -6.88102096e-02 -2.77280845e-02
 -2.98416503e-02  3.54624614e-02 -3.43088396e-02 -1.94454379e-02
  3.41444053e-02  9.44878906e-03 -7.45031014e-02  3.55247632e-02
  7.21185468e-03  1.21489372e-02 -2.88484432e-02 -2.81049591e-02
  2.03111526e-02  6.69354275e-02  6.43239692e-02 -2.03842148e-02
 -4.41239923e-02  4.71522436e-02  3.26503515e-02  2.33025420e-02
 -6.76483335e-03  1.52528398e-02  3.37668136e-02 -1.87182473e-32
  1.33035630e-02  1.44739747e-02 -2.65255179e-02  4.67332173e-03
  5.62274605e-02  3.81880738e-02  3.41263562e-02 -4.75470386e-02
  6.40885085e-02  9.15048551e-03  8.64340691e-04 -4.56100218e-02
 -4.72529978e-03  4.41081859e-02  7.57034197e-02 -7.35162944e-03
 -3.74809243e-02  2.65293755e-02  1.76653601e-02  2.77618114e-02
 -8.67877994e-03  7.22367391e-02 -2.99504045e-02 -1.30528221e-02
  3.42935398e-02  1.47788308e-03 -9.35872830e-03  2.73577925e-02
  6.97100610e-02  1.03383628e-03 -2.85540000e-02 -3.22788097e-02
 -1.24266185e-01  1.02217950e-01 -4.35895147e-03 -1.41764238e-01
  1.08774595e-01  5.63492924e-02 -3.54975946e-02  7.63539672e-02
  9.01056603e-02 -3.21647748e-02 -4.13985550e-02  2.64174007e-02
 -7.03615369e-03 -5.52531816e-02  6.59501478e-02 -8.53370316e-03
 -5.37934564e-02 -1.69293117e-02  1.12549156e-01  4.74998876e-02
  1.67874474e-04  3.55549227e-03  5.47026806e-02  5.79959601e-02
  5.17786928e-02 -6.93209246e-02 -5.22314832e-02 -1.46798551e-01
 -1.37585429e-02 -1.73762906e-02  3.90624553e-02 -3.85203175e-02
  9.56159309e-02  3.90285812e-02 -2.01486740e-02  5.69799431e-02
 -3.35616544e-02 -1.08362362e-01 -5.25606573e-02 -9.99454260e-02
 -2.08777767e-02  1.49711976e-02 -1.98140424e-02 -5.80315962e-02
 -8.66082683e-02 -4.94310483e-02  3.77491266e-02  8.10651556e-02
 -1.07251517e-01  2.74967588e-02 -2.94594886e-03  7.09147705e-03
  3.65828387e-02  2.08729096e-02 -7.54101053e-02 -1.54106030e-02
  1.16000157e-02 -1.26939733e-02 -3.06355897e-02  1.47155197e-02
 -2.60435184e-03  1.20278485e-01 -2.07598750e-02 -6.48476544e-08
 -4.99250405e-02 -9.41158831e-02 -4.35139947e-02  2.37645470e-02
  8.59128013e-02 -3.54075339e-03 -7.49014392e-02 -6.61468655e-02
 -3.08495457e-03 -7.47098029e-02  4.69625853e-02  5.33965304e-02
 -8.37503225e-02 -3.42015326e-02 -5.24490466e-03  2.16723979e-02
  3.12346369e-02 -9.34783384e-05  1.26410229e-02 -2.01422814e-02
  8.47495273e-02 -4.15166933e-03 -3.55532095e-02  3.39130871e-02
 -3.00409552e-02  4.54282351e-02  1.90177951e-02  1.54997274e-01
 -2.17654333e-02 -2.85256729e-02  4.51592468e-02 -7.09849149e-02
  4.97896932e-02 -4.98198532e-02  5.51368743e-02 -4.12454829e-02
  2.75515951e-02  1.43923529e-03 -4.44691442e-03  2.50917766e-02
  9.81585681e-02  4.58040759e-02 -3.03874146e-02  3.78934219e-02
  4.27159593e-02  6.09120801e-02  7.23602902e-03 -5.52936159e-02
  6.70408085e-02 -1.26760947e-02 -8.32571834e-02 -4.81757298e-02
  6.30249977e-02  6.82509914e-02 -6.78619882e-03 -4.87615205e-02
  2.93981843e-03 -5.40894642e-02  3.87297448e-04  5.72166219e-02
  4.36584018e-02  4.35862616e-02 -2.74788449e-03  4.30754712e-03]"
"còn lớn về khối lượng tính toán. Tất yếu, việc gọi quá nhiều về cả tần suất và khối lượng dẫn đến kết nối sẽ bị ngắt. Ngoài ra, tại thời điểm cuốn sách được viết, getProgramAccounts vẫn chưa hỗ trợ phân trang. Nếu kết quả truy vấn quá lớn, nó sẽ được cắt bỏ đi.Để tránh các hạn chế này, getProgramAccounts giới thiệu các tham số dùng cho việc lọc và sơ chế kết quả, ví dụ như: dataSlice, filters với tuỳ chọn memcmp và dataSize. Bằng cách kết hợp các tham số trên, chúng ta có thể giảm thiểu phạm vi truy vấn với kích thước dữ liệu được kiểm soát và dễ đoán hơn.Một ví dụ thường thấy của getProgramAccounts là tương tác với SPL-Token Programopen in new window. Truy vấn tất cả các Account được sở hữu bởi Token Program với một câu truy vấn thuần tuý không có lọc sẽ dẫn đến một số lượng dữ liệu trả về khổng lồ. Thay vào đó, bằng cách bổ sung các tham số, chúng ta có thể truy vấn một cách hiệu quả chỉ những dữ liệu mình cần.# filtersTham số phổ biến nhất được dùng kèm với getProgramAccounts chính là mảng các filters. Mảng này chấp nhận 2 kiểu lọc là dataSize và memcmp. Trước khi sử dụng một trong hai, chúng ta nên hiểu được dữ liệu cần truy vấn sẽ có chứa dữ liệu gì? hình thái ra sao? tuần tự hoá như thế nào?# dataSizeTrong trường hợp Token Program, chúng ta có thể thấy rằng độ dài của Token Account là 165 bytesopen in new window. Đặc biệt, một Token Account có 8 trường con, với mỗi trường có độ dài vùng nhớ biết trước. Chúng ta có thể mường tượng cách dữ liệu được sắp xếp bằng minh hoạ sau.Nếu chúng ta muốn tìm tất cả Token Account sở hữu bởi chỉ riêng ví của mình, chúng ta có thể thêm { dataSize: 165 } và filters để thu hẹp pham vi câu truy vấn và chỉ lấy những Account có độ dài chính xác 165 bytes. Tuy vậy, nó vẫn là chưa đủ. Chúng ta cần thêm một điều kiện để chỉ lọc các Account được sở hữu bởi ví của mình. Để là được điều đó, chúng ta phải sử dụng memcmp.# memcmpĐiều kiện lọc memcmp, hoặc ""memory comparison"" (phép so sánh vùng nhớ), cho phép chúng ta so sánh dữ liệu truyền vào với bất kỳ vùng nhớ nào được lưu trong Account. Đặc biệt, chúng ta có thể truy vấn chỉ những Account mà khớp với một đoạn dữ liệu tại một vị trí cụ thể. memcmp yêu cầu 2 tham số:offset: Vị trí bắt đầu để so sánh dữ liệu. Vị trí này thường được tính theo bytes và biểu diễn dưới dạng số nguyên.bytes: Dữ liệu dùng để đối chiếu với dữ liệu trong Account. Dữ liệu này nên được biểu diễn dưới dạng base58 và không quá 129 bytes.Một điều quan trọng cần lưu ý là memcmp","[-1.01256385e-01  1.68987215e-02  8.68585519e-03 -8.97805095e-02
 -9.85134915e-02 -3.74177122e-03  9.57166255e-02  2.24665515e-02
  1.11902550e-01  2.54133902e-02  1.17965996e-01 -9.85371545e-02
 -2.18389183e-03 -5.64636327e-02 -2.32169293e-02 -1.30688716e-02
 -6.86642341e-03  4.46682423e-02 -8.71600583e-02 -7.86124021e-02
 -1.69994794e-02 -4.69206460e-02 -3.25344726e-02  1.77220197e-03
 -4.63777035e-02  7.63711780e-02 -1.49627998e-02  4.26892601e-02
 -2.44624224e-02 -3.86328436e-02 -2.13773712e-03  1.53828442e-01
 -4.22873870e-02 -2.87768780e-03  6.07946441e-02  3.22585441e-02
 -2.35875025e-02 -2.96564791e-02  5.40099181e-02  5.47879376e-02
 -6.30131662e-02 -1.92487743e-02 -4.15535346e-02 -9.11928341e-02
  1.92445125e-02  1.53538957e-03 -4.33628261e-02 -1.56974327e-02
 -1.82476044e-02 -4.03124020e-02 -7.34232292e-02  1.29362151e-01
 -1.27394628e-02  7.83132613e-02 -9.57896337e-02 -2.92596091e-02
  1.44324768e-02  9.52505246e-02  7.13074952e-02 -2.02451460e-02
 -8.79419446e-02  1.95795316e-02 -4.19567823e-02  2.67197704e-03
  9.00372863e-03 -4.22480702e-03 -3.93886641e-02 -1.27836224e-02
 -9.07457061e-03  9.90440547e-02 -5.08094504e-02  2.14650687e-02
 -5.93643710e-02  1.03828736e-01 -1.64218545e-02  4.94561270e-02
 -1.98939461e-02  2.59074359e-03  5.62964119e-02 -1.24011777e-01
  5.75110205e-02  5.06529063e-02  1.76123008e-02 -7.40749389e-02
  2.54312884e-02  3.01430896e-02 -1.49513474e-02  8.44084844e-03
  5.05288020e-02 -6.61064088e-02  6.31064400e-02  5.65888211e-02
 -5.52350245e-02 -3.05261854e-02 -1.04040727e-02 -4.27579843e-02
 -1.15796542e-02  3.84146832e-02 -6.70813629e-03  1.07258034e-03
  6.79362342e-02  3.95489903e-03  3.79559807e-02 -3.79673950e-02
 -5.50354682e-02  1.22683169e-03  8.84199440e-02 -4.80620703e-03
  5.87398447e-02  2.29997467e-02 -6.92576990e-02 -1.79478582e-02
  2.27558929e-02 -1.13713950e-01 -2.11081356e-02  5.68477996e-02
 -4.82265502e-02 -4.37624790e-02 -3.05327680e-02  3.57094705e-02
 -9.39322915e-03 -9.15766284e-02 -6.48705885e-02  2.34331153e-02
 -6.06165901e-02 -6.01312369e-02  6.47537857e-02  2.01868306e-32
  7.88129307e-03  1.96520481e-02  4.87344339e-02 -6.53137937e-02
  3.76071669e-02 -3.46331671e-02  2.46714847e-03  1.04972823e-02
 -5.89890666e-02 -4.16505821e-02 -2.96114050e-02 -4.04428393e-02
 -8.71672034e-02 -4.86704819e-02  5.28386869e-02  1.85659882e-02
  3.21045853e-02 -1.17182389e-01  1.60788111e-02  1.21376636e-02
  2.34560613e-02 -3.75798978e-02  6.15341179e-02 -2.77972352e-02
  4.44589369e-02  1.03110389e-03 -5.58135733e-02 -1.49810209e-03
 -4.59084287e-02  4.52473499e-02  3.34171802e-02  7.11959135e-03
  2.04703640e-02 -3.72226164e-02 -9.50106829e-02 -5.07910736e-02
 -4.12879102e-02 -1.93271022e-02 -3.60012962e-03 -1.46200173e-02
  2.92544700e-02  2.55147777e-02  1.51639618e-02  3.48250270e-02
 -3.69310826e-02  3.38716358e-02  2.50098342e-03 -2.11001430e-02
  2.91761346e-02  1.54081853e-02  2.96596461e-03 -5.02094962e-02
 -1.11500569e-01  1.21395746e-02  7.74074346e-02 -3.16561274e-02
  3.04483324e-02 -2.91000307e-02  2.12773476e-02  7.91151822e-02
 -3.69650945e-02  2.77583627e-03  3.66113298e-02  5.73251955e-02
  8.87829717e-03 -1.07597113e-01 -3.57106812e-02  1.91801193e-03
  9.84181762e-02 -5.40130101e-02 -6.51023835e-02 -5.05153164e-02
  2.44688354e-02  3.13186571e-02 -5.40395826e-03 -1.07068559e-02
  2.44372282e-02 -6.70611709e-02 -5.69550842e-02  3.31496745e-02
  2.30206940e-02 -2.70969756e-02  7.69545371e-03 -4.06832099e-02
  1.67127291e-03  2.94405241e-02  4.29826789e-02 -6.03030100e-02
 -4.05905917e-02  3.07594165e-02 -5.35173677e-02  2.21200977e-02
  3.44829410e-02 -3.52304466e-02 -2.33543571e-02 -1.77726415e-32
  2.45503914e-02  5.27625605e-02 -5.87531328e-02  6.41421601e-02
 -1.02810226e-02  1.28295487e-02  4.95834686e-02 -6.63076192e-02
  9.70872492e-02  3.25338244e-02 -3.42930183e-02 -9.55946818e-02
  3.28516811e-02  3.04538533e-02  4.91369106e-02  6.28690049e-02
  3.01023163e-02 -1.99659672e-02  2.22376618e-03  3.80675085e-02
 -5.93427755e-03 -2.38627046e-02 -2.41674595e-02  5.55246063e-02
 -6.50888681e-02  2.12530736e-02  1.81099512e-02  2.46387180e-02
  3.19617279e-02  5.69363944e-02 -3.82901821e-03 -9.04472843e-02
 -7.31829628e-02  1.02685101e-01  2.39390545e-02 -8.04294869e-02
  1.45795450e-01  1.28536718e-03 -7.56782517e-02  4.44220528e-02
  8.21330585e-03 -1.28231449e-02 -4.62656505e-02 -3.66766006e-02
 -4.30071689e-02 -7.27549568e-02  7.67584592e-02 -2.12545972e-02
 -7.52327889e-02 -7.32737631e-02  1.50609225e-01  3.33199799e-02
 -4.66094874e-02  2.02180576e-02  1.61555922e-03  5.51218763e-02
  6.01800047e-02 -4.60239761e-02 -6.32137954e-02 -5.58941700e-02
 -2.64584459e-02 -1.17922146e-02 -2.04862691e-02 -9.93001983e-02
  4.30554897e-02  4.13110293e-02  6.00630008e-02  7.35695511e-02
  4.04674895e-02 -9.83563140e-02 -4.42994107e-03 -8.77151638e-02
 -4.69099618e-02 -4.56004627e-02 -3.98750938e-02  8.21201317e-03
 -3.00594568e-02  3.00680362e-02  1.33794090e-02  8.89804866e-03
 -9.68113616e-02 -6.55974150e-02 -3.10246088e-02  6.34885160e-03
  1.23389214e-02  5.37766069e-02 -3.56953554e-02 -5.97170889e-02
  3.15237418e-02  1.10619385e-02  6.39659688e-02  1.36838807e-02
  4.65498753e-02  7.47630149e-02  8.68395716e-03 -5.42601626e-08
  1.43210152e-02 -1.09948002e-01 -1.31391445e-02  2.41065733e-02
  8.95178318e-02 -7.82424882e-02  1.81679521e-02  3.05384956e-03
 -2.07004044e-02 -8.47764220e-03  5.10103367e-02  3.14880051e-02
 -1.71833728e-02  1.41974408e-02  3.03561036e-02  8.81375223e-02
  3.42111103e-02  4.33917157e-02  1.20818084e-02 -3.37468944e-02
  5.74026331e-02  1.97149217e-02 -4.74958457e-02  6.45205798e-03
 -2.55894996e-02  3.40141915e-02 -5.12169162e-03  5.56861870e-02
 -1.44269420e-02 -1.53781259e-02  6.30782768e-02 -5.45180626e-02
  1.22507056e-02 -4.69348505e-02  8.62743929e-02 -5.42139485e-02
  2.72160899e-02 -1.50916232e-02 -4.22025025e-02  9.38579664e-02
  6.39748350e-02  6.22141324e-02 -1.29878977e-02  3.03391051e-02
  2.39916276e-02  3.24456096e-02  6.74914569e-02 -5.80503866e-02
  5.78376614e-02  3.43463644e-02 -6.83934689e-02 -9.34382528e-03
  5.56945316e-02  3.16457860e-02  3.97769362e-03 -5.40675148e-02
  6.54226867e-03  7.34681450e-03 -2.35193782e-02  3.35839130e-02
  3.52644026e-02  1.14305332e-01 -5.13101593e-02 -4.51687984e-02]"
"chỉ trả về các kết quả khớp chính xác trên từng bytes. Và hiện tại không hỗ trợ các phép so sánh lớn hơn hoặc nhỏ hơn cho bytes.Sử dụng lại ví dụ Token Program bên trên, chúng ta điều chỉnh câu truy vấn chỉ trả về những Token Account mà được sở hữu bởi chính mình. Khi nhìn vào một Token Account, chúng ta biết được 2 trường đầu tiên lưu trong Token Account là 2 khoá công khai với độ dài là 32 bytes. Biết rằng owner là trường thứ 2, chúng ta nên khởi tạo memcmp với offset là 32. Từ đó, chúng ta sẽ lọc được những Account của mình bằng cách truyền địa chỉ ví vào bytes.Chúng ta có thể gọi câu truy vấn này thông qua ví dụ sau:TSRust ClientcURLimport { TOKEN_PROGRAM_ID } from ""@solana/spl-token"";
import { clusterApiUrl, Connection } from ""@solana/web3.js"";

(async () => {
  const MY_WALLET_ADDRESS = ""FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T"";
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const accounts = await connection.getParsedProgramAccounts(
    TOKEN_PROGRAM_ID, // new PublicKey(""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"")
    {
      filters: [
        {
          dataSize: 165, // number of bytes
        },
        {
          memcmp: {
            offset: 32, // number of bytes
            bytes: MY_WALLET_ADDRESS, // base58 encoded string
          },
        },
      ],
    }
  );

  console.log(
    `Found ${accounts.length} token account(s) for wallet ${MY_WALLET_ADDRESS}: `
  );
  accounts.forEach((account, i) => {
    console.log(
      `-- Token Account Address ${i + 1}: ${account.pubkey.toString()} --`
    );
    console.log(`Mint: ${account.account.data[""parsed""][""info""][""mint""]}`);
    console.log(
      `Amount: ${account.account.data[""parsed""][""info""][""tokenAmount""][""uiAmount""]}`
    );
  });
  /*
    // Output

    Found 2 token account(s) for wallet FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T: 
    -- Token Account Address 0:  H12yCcKLHFJFfohkeKiN8v3zgaLnUMwRcnJTyB4igAsy --
    Mint: CKKDsBT6KiT4GDKs3e39Ue9tDkhuGUKM3cC2a7pmV9YK
    Amount: 1
    -- Token Account Address 1:  Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb --
    Mint: BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf
    Amount: 3
  */
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748use solana_client::{
  rpc_client::RpcClient, 
  rpc_filter::{RpcFilterType, Memcmp, MemcmpEncodedBytes, MemcmpEncoding},
  rpc_config::{RpcProgramAccountsConfig, RpcAccountInfoConfig},
};
use solana_sdk::{commitment_config::CommitmentConfig, program_pack::Pack};
use spl_token::{state::{Mint, Account}};
use solana_account_decoder::{UiAccountEncoding};

fn main() {
  const MY_WALLET_ADDRESS: &str = ""FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T"";

  let rpc_url = String::from(""http://api.devnet.solana.com"");
  let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

  let filters = Some(vec![
      RpcFilterType::Memcmp(Memcmp {
          offset: 32,
          bytes: MemcmpEncodedBytes::Base58(MY_WALLET_ADDRESS.to_string()),
          encoding: Some(MemcmpEncoding::Binary),
     ","[-6.12618737e-02  2.86069908e-03 -2.94048656e-02 -7.73851573e-02
 -8.03418681e-02 -4.06673178e-02  1.12439573e-01  6.22424521e-02
  7.67070875e-02  3.48105058e-02  1.12368934e-01 -7.29103610e-02
  5.27914241e-02 -6.65169656e-02  3.22739072e-02 -3.34053934e-02
 -6.31138459e-02  1.55542381e-02 -7.00826719e-02 -7.89989904e-02
  9.81167145e-03 -6.25704601e-02 -4.95656952e-02 -4.24334966e-03
 -5.12879640e-02  2.13320907e-02  4.84200241e-03  4.63719256e-02
  1.80367697e-02 -3.09880115e-02 -3.31891626e-02  1.14820763e-01
 -1.16317505e-02  1.99734140e-02  1.12377755e-01  8.76018479e-02
  7.16197072e-03 -5.99140264e-02  6.63581118e-02 -2.84604207e-02
 -4.47000787e-02 -2.15097945e-02 -7.68709853e-02 -2.71142833e-02
  4.68386263e-02  3.35728526e-02 -3.38368118e-02  4.55298275e-02
 -5.60589544e-02 -4.64964919e-02 -4.98078652e-02  1.03264205e-01
 -6.77920878e-03  6.47507384e-02 -1.03947505e-01 -4.59340625e-02
 -2.51746420e-02  9.44462419e-02  8.87503922e-02 -1.82735473e-02
 -3.60609479e-02 -8.62156786e-03  2.76575014e-02 -3.25715840e-02
  2.95462436e-03 -5.30999713e-02 -1.05484657e-01 -4.48453166e-02
  1.11365244e-02  3.17492336e-02 -3.77549231e-02  5.13579976e-03
 -1.33451134e-01  8.66992176e-02 -5.14234565e-02  3.20223197e-02
  1.96378026e-02  4.40242328e-02 -2.44829850e-03 -9.43679214e-02
 -2.97404779e-03  2.09076684e-02  4.99114878e-02  1.75275300e-02
  7.66772265e-03  2.97225751e-02 -2.66568251e-02 -1.20517081e-02
  2.35620178e-02  8.26925505e-03  3.36891375e-02  8.42136070e-02
  5.42104384e-03 -1.86014455e-02  4.06824751e-03 -1.97182912e-02
  1.88557748e-02  7.25688636e-02 -8.03918112e-04  7.28500560e-02
  1.87580213e-02  3.01868226e-02  2.12007761e-02  9.17943940e-03
 -1.17268146e-03 -1.23561220e-02  4.00339700e-02 -2.43021585e-02
  7.42420778e-02 -1.53223926e-03 -5.94249368e-02  3.10268346e-02
 -6.17516860e-02 -5.13809919e-02 -5.64859584e-02  4.39586267e-02
 -6.22980371e-02  2.86701564e-02 -5.39572425e-02  5.06476425e-02
  6.94213361e-02 -6.38212413e-02 -1.09073758e-01  1.28116682e-02
 -7.74747059e-02 -4.63573784e-02  1.22844890e-01  2.31299687e-32
 -7.88168162e-02 -8.24009813e-03  1.26088690e-02 -5.06507717e-02
  1.53979873e-02 -4.79602627e-02 -6.52426109e-03  1.41603919e-02
 -1.11942574e-01 -5.82021363e-02 -5.53306080e-02 -5.89893982e-02
 -2.98962649e-02 -4.10378575e-02  4.05819528e-02 -4.76578716e-03
 -3.80795985e-03 -5.32426313e-02  5.24330400e-02 -5.39254062e-02
  5.20480648e-02 -1.55983809e-02  3.00320331e-02 -4.52277809e-02
  2.55326256e-02  1.57657731e-02 -6.84618503e-02 -8.10025260e-02
  1.55983232e-02  5.35176545e-02  5.27930334e-02 -2.45951042e-02
 -2.31588073e-02 -2.36438159e-02 -2.24869605e-02 -3.33995335e-02
  3.08754835e-02 -5.08524440e-02 -3.77190411e-02 -3.71113941e-02
  3.32651287e-02  1.48509033e-02  4.86325808e-02 -6.48780586e-03
 -6.64480031e-02  3.36541259e-03  1.72323994e-02 -4.95577678e-02
  5.76929376e-02  4.32002917e-02 -1.73739381e-02 -4.26600827e-03
 -7.90164694e-02  3.04746721e-02  7.19242096e-02 -1.08524472e-01
  2.90901829e-02 -5.02723232e-02 -3.99878994e-03  7.29924664e-02
 -1.03006205e-02 -5.08736353e-03  3.72802876e-02  4.24584523e-02
 -8.40979069e-03 -9.20208395e-02  2.74875090e-02  1.79760605e-02
  1.92047693e-02 -2.64047198e-02 -5.94153106e-02  5.33592561e-03
  7.37931356e-02  3.16999070e-02 -1.35440037e-01 -6.84783161e-02
  4.85385954e-02 -2.47545093e-02 -6.54730275e-02  1.10646458e-02
  6.15913188e-03 -7.64729679e-02 -1.42760985e-02 -6.16288409e-02
 -3.05531546e-02  2.04687435e-02  2.85366718e-02 -7.08337352e-02
 -7.72817340e-03 -5.64491674e-02 -1.84466075e-02  4.89341654e-03
  9.11130160e-02  2.25562677e-02 -5.10230772e-02 -2.01594357e-32
 -1.08947614e-02 -3.28706275e-03 -1.81433223e-02  1.32192541e-02
 -3.90275158e-02 -1.37008179e-03  3.47496854e-04 -4.17993888e-02
 -1.13159902e-02  2.20036488e-02 -6.96914047e-02 -1.42197656e-02
  3.93925747e-03  5.29267266e-02  5.80027662e-02  9.21716690e-02
  4.22390476e-02  2.97193676e-02 -6.61209133e-03 -1.91642449e-03
 -2.58249473e-02 -8.79776757e-03  3.24346311e-02  8.45222324e-02
  5.24807489e-03  2.06582118e-02  4.42558005e-02  6.57522380e-02
  2.05445546e-03  3.16520520e-02  1.13714868e-02 -3.80801745e-02
 -6.67072758e-02  8.35059434e-02  1.78843904e-02 -1.56933457e-01
  5.75191602e-02  9.79152694e-02  1.96072813e-02  5.20257354e-02
  8.38136226e-02 -3.19295079e-02 -1.61995776e-02  3.01385559e-02
 -9.39686038e-03 -6.54950039e-03  9.26207229e-02 -8.85659549e-03
 -6.82033971e-02 -2.36139703e-03  1.40319079e-01 -9.76099260e-03
  3.00147980e-02  1.34280259e-02 -1.22930668e-02  8.13848898e-02
  3.97915319e-02 -2.54053194e-02 -9.35908780e-02 -1.41650021e-01
  5.56623116e-02 -1.99166108e-02 -1.09018940e-04 -1.55433575e-02
  7.80871063e-02 -2.16479041e-02 -2.93355249e-02  5.14153913e-02
 -3.78702432e-02 -8.34942535e-02 -4.25161384e-02 -4.87078987e-02
 -5.33483103e-02 -6.72853086e-03 -2.33570822e-02  3.61766368e-02
 -4.98542620e-04 -6.46727905e-03  2.54644677e-02  2.47757360e-02
 -1.09337404e-01  6.79960772e-02 -1.86947230e-02  4.77028964e-03
 -7.52008287e-03  4.02996503e-02 -3.24751511e-02  6.75866753e-02
  1.72542781e-02  1.44806020e-02 -2.16202904e-02  8.11457932e-02
  8.72412771e-02  7.32965916e-02  1.42890289e-02 -6.24498924e-08
 -3.22801024e-02 -1.43944621e-01 -4.95644920e-02  4.46292832e-02
  7.59794489e-02 -1.81354284e-02 -6.04794808e-02 -2.91423257e-02
  2.07200889e-02 -1.07757468e-02 -6.35190820e-03  1.05437459e-02
 -9.04918239e-02 -2.32937355e-02 -3.54473218e-02  4.52377200e-02
 -5.26127871e-03  7.95654021e-03 -1.07475417e-02 -4.95757796e-02
  2.25182809e-02  2.85799801e-02  1.18622025e-02  4.45074169e-03
 -4.80197966e-02 -7.22450623e-03  3.04079708e-03  8.68330896e-02
 -6.50180280e-02 -9.05656964e-02 -4.79041459e-03 -4.93483208e-02
  1.79069303e-02 -4.11522090e-02  5.11869043e-02  2.19083391e-02
  1.51586710e-02 -5.58792893e-03 -5.66524006e-02  8.64265785e-02
  4.81630936e-02  5.19212037e-02  3.22483890e-02 -2.90190917e-04
  3.48548330e-02  1.46547835e-02  2.80150063e-02 -2.08326392e-02
  1.05445743e-01  1.93210840e-02 -7.08095655e-02 -2.30547190e-02
  2.88919639e-03  7.56348744e-02 -9.92431026e-03  5.65383350e-03
 -7.14230835e-02  1.89551674e-02  3.76957655e-02  5.00929467e-02
  1.48162188e-03  1.04474850e-01 -3.01485620e-02 -3.34532633e-02]"
"}),
      RpcFilterType::DataSize(165),
  ]);

  let accounts = connection.get_program_accounts_with_config(
      &spl_token::ID,
      RpcProgramAccountsConfig {
          filters,
          account_config: RpcAccountInfoConfig {
              encoding: Some(UiAccountEncoding::Base64),
              commitment: Some(connection.commitment()),
              ..RpcAccountInfoConfig::default()
          },
          ..RpcProgramAccountsConfig::default()
      },
  ).unwrap();

  println!(""Found {:?} token account(s) for wallet {MY_WALLET_ADDRESS}: "", accounts.len());

  for (i, account) in accounts.iter().enumerate() {
      println!(""-- Token Account Address {:?}:  {:?} --"", i, account.0);

      let mint_token_account = Account::unpack_from_slice(account.1.data.as_slice()).unwrap();
      println!(""Mint: {:?}"", mint_token_account.mint);

      let mint_account_data = connection.get_account_data(&mint_token_account.mint).unwrap();
      let mint = Mint::unpack_from_slice(mint_account_data.as_slice()).unwrap();
      println!(""Amount: {:?}"", mint_token_account.amount as f64 /10usize.pow(mint.decimals as u32) as f64);
  }
}

/*
// Output

Found 2 token account(s) for wallet FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T: 
-- Token Account Address 0:  H12yCcKLHFJFfohkeKiN8v3zgaLnUMwRcnJTyB4igAsy --
Mint: CKKDsBT6KiT4GDKs3e39Ue9tDkhuGUKM3cC2a7pmV9YK
Amount: 1.0
-- Token Account Address 1:  Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb --
Mint: BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf
Amount: 3.0
*/
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162curl http://api.mainnet-beta.solana.com -X POST -H ""Content-Type: application/json"" -d '
  {
    ""jsonrpc"": ""2.0"",
    ""id"": 1,
    ""method"": ""getProgramAccounts"",
    ""params"": [
      ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
      {
        ""encoding"": ""jsonParsed"",
        ""filters"": [
          {
            ""dataSize"": 165
          },
          {
            ""memcmp"": {
              ""offset"": 32,
              ""bytes"": ""FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T""
            }
          }
        ]
      }
    ]
  }
'

# Output: 
# {
#   ""jsonrpc"": ""2.0"",
#   ""result"": [
#     {
#       ""account"": {
#         ""data"": {
#           ""parsed"": {
#             ""info"": {
#               ""isNative"": false,
#               ""mint"": ""BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf"",
# ","[-6.51279539e-02  6.97268397e-02 -8.11094642e-02  2.11759936e-02
 -1.48450229e-02  6.49764156e-03  5.40664531e-02  2.01566219e-02
 -8.18465203e-02 -6.80499747e-02  2.79194769e-02 -7.84833878e-02
 -3.66898323e-03  7.85573665e-03  1.73603389e-02  1.09610939e-02
 -1.09852754e-01  4.88229841e-02  1.93221085e-02 -4.35171425e-02
  6.13143444e-02 -1.33498721e-02 -1.67974690e-03  4.45995945e-03
  3.85420062e-02  3.17255296e-02 -1.77419540e-02 -4.47323248e-02
 -2.93745082e-02  2.19159964e-02  8.76435488e-02  3.76867875e-02
  4.05063406e-02  6.93209693e-02  7.34776482e-02  5.17541431e-02
 -1.23911295e-02  3.34535092e-02  1.07804351e-01 -1.06666051e-01
 -2.91851591e-02  6.02987297e-02 -3.44088525e-02  4.05027717e-02
  4.95113572e-03  5.17971925e-02 -6.78993613e-02  1.48223201e-02
 -1.75854973e-02 -9.11028683e-02 -2.78682355e-02  8.63891840e-02
 -5.68017960e-02 -8.54134385e-04  3.81411128e-02 -3.21430229e-02
 -5.59946820e-02 -3.49863432e-02  5.44179194e-02  2.29573678e-02
  3.24763311e-03 -9.49297547e-02 -1.15049363e-03  1.96751878e-02
 -7.65321329e-02 -5.00952918e-03  1.23740816e-02  6.12096451e-02
  8.70975778e-02  1.84350405e-02 -2.10337210e-02  2.02819314e-02
 -7.38118291e-02  3.71360831e-04 -2.39115320e-02  1.31900860e-02
 -1.41830165e-02  6.94370046e-02 -3.77405323e-02 -6.21460266e-02
 -2.13650577e-02 -1.60621665e-02  3.64263952e-02  1.18173391e-01
  1.88632570e-02  3.43482122e-02 -4.76403721e-02 -8.93660039e-02
 -9.53096431e-03  1.41504770e-02  3.07897404e-02  4.00713086e-02
 -3.34882643e-03 -1.27251996e-02 -4.53872868e-04 -6.61648344e-03
  2.18733456e-02  1.81939136e-02 -5.72652817e-02  7.26696327e-02
 -1.00242225e-02 -2.17649667e-03  5.56834266e-02  3.43324989e-02
  1.87271815e-02 -7.51258060e-03  2.67612357e-02 -1.20315757e-02
 -4.83306833e-02  3.21399495e-02 -3.28137889e-03  8.42415020e-02
 -8.16363618e-02 -3.23419605e-04 -9.71470959e-04  4.59258780e-02
 -5.38228713e-02  2.20467616e-02  3.00414898e-02  8.08990076e-02
  4.69184853e-02  3.93458147e-04 -5.57108372e-02 -2.95718424e-02
 -1.24901786e-01  4.50124182e-02  5.75269051e-02  7.34906358e-33
 -2.66815722e-02 -1.96434855e-02 -6.41538948e-02 -8.88039451e-03
 -5.95479086e-02  4.44288552e-02  3.74991857e-02  4.32462990e-02
 -3.04104332e-02  6.28400519e-02 -1.05280783e-02 -8.21255520e-03
 -3.01740654e-02  6.28521964e-02 -5.46418838e-02 -3.23699266e-02
 -1.55319897e-02  7.96897784e-02  6.55663759e-02  2.36009248e-02
 -2.88587995e-02 -1.76956020e-02 -4.35034558e-02 -5.37628643e-02
  5.62965348e-02  2.26193015e-03 -4.65242192e-02 -5.02681881e-02
 -4.86329868e-02  1.40743209e-02  4.03428078e-02  4.91737854e-03
  2.93957908e-03  4.02601026e-02  6.45890832e-02 -3.57038565e-02
  4.75580581e-02 -2.30566766e-02 -8.12541470e-02 -5.48443049e-02
  1.58739612e-02  5.19390851e-02 -1.97551213e-02  4.29042429e-03
 -3.79048884e-02 -4.79611987e-03 -1.45533206e-02  1.11008538e-02
  4.75243181e-02  6.40861169e-02 -1.69906523e-02  5.85394613e-02
 -5.23686707e-02 -4.39936295e-02  3.84635665e-02 -1.17587961e-01
  3.95016894e-02  7.48048574e-02  3.87771651e-02 -1.15297409e-02
 -7.02361614e-02 -3.09292949e-03 -2.16224454e-02 -8.48810840e-03
  5.31020872e-02  1.15301497e-01 -5.76789305e-02 -4.61031795e-02
 -1.45671014e-02  2.99841631e-02 -3.40160392e-02  3.28546762e-02
 -3.98313105e-02  8.75246897e-03 -4.68296558e-02 -7.52686411e-02
 -1.91909298e-02 -2.44825799e-02 -7.23012686e-02 -4.47491221e-02
 -3.71092185e-03  6.29988387e-02 -7.27776811e-02  1.08447723e-01
 -2.56859884e-02  2.78532822e-02  3.56734805e-02 -2.10147705e-02
  7.31751090e-03 -3.27659324e-02 -4.11566952e-03 -8.18409845e-02
  4.04610336e-02 -7.46929795e-02 -6.86219037e-02 -7.29484758e-33
  5.24806157e-02 -3.72940265e-02  5.22007123e-02 -8.24390054e-02
 -1.96945034e-02 -2.60602254e-02  8.99823904e-02  9.12960544e-02
  6.79664388e-02  3.92805524e-02 -7.22058397e-03 -3.91035974e-02
  2.60596070e-02 -2.23739014e-04  1.54269412e-02  5.22538461e-02
 -9.02540460e-02  4.83049639e-03  3.27739981e-04  1.83581360e-04
 -6.82153776e-02  3.67221907e-02  9.78640914e-02  4.82043698e-02
 -7.06466846e-03  4.81636673e-02  2.39358209e-02  1.43237254e-02
  7.84763098e-02 -5.56877963e-02  7.56343678e-02 -2.49655824e-02
 -5.85534722e-02  7.19835311e-02 -3.33618596e-02 -8.68550390e-02
 -1.56588536e-02  1.86989859e-01  2.59237159e-02  2.77112257e-02
  4.58634719e-02 -3.40685956e-02 -7.39645883e-02  3.64379548e-02
  3.16868685e-02 -2.86029559e-02  9.06759724e-02  7.76518583e-02
 -3.94042432e-02  1.19991181e-02  2.09049825e-02 -2.47266069e-02
 -9.31794941e-02  6.53644279e-02 -5.34667447e-02  1.20247267e-02
  9.62812155e-02 -3.85389477e-02  4.46617268e-02 -1.15883656e-01
 -1.85717288e-02 -1.01705551e-01 -1.74399663e-03  4.05704714e-02
  5.64000942e-02 -6.34936914e-02 -7.29086772e-02  3.28298323e-02
 -5.51044792e-02  2.85132002e-04 -1.15515776e-02 -1.18275240e-01
 -2.07278132e-02 -1.94293391e-02 -1.06156282e-02  8.62829760e-03
 -4.35468666e-02 -4.74969447e-02  6.25200719e-02  1.09746650e-01
 -8.64380896e-02  8.56358334e-02 -4.90607787e-03  9.42975804e-02
  5.82222641e-02 -8.16138387e-02  2.82915663e-02  2.83290222e-02
  1.66978464e-02  7.85417762e-03 -6.62111444e-03 -4.52596461e-03
 -2.22178400e-02  5.59398755e-02  4.63958010e-02 -5.62057600e-08
 -1.68928821e-02 -1.18572690e-01 -2.14986298e-02  5.78606278e-02
  8.14320147e-02  5.10751083e-02 -1.60097368e-02 -1.84745379e-02
 -8.72713178e-02  1.43437469e-02  3.68327321e-03  7.55791441e-02
 -1.23146839e-01 -2.56817210e-02 -2.19441708e-02 -7.25129917e-02
  8.37736670e-03  4.57263105e-02 -4.20628265e-02  3.37181352e-02
 -5.36637269e-02 -2.64965743e-02  7.12634064e-03 -4.59772348e-02
 -3.29247080e-02 -1.45020206e-02  7.46844187e-02  7.35519081e-02
  5.77600077e-02 -3.48573364e-02  1.33966813e-02  3.03647947e-03
  8.26161206e-02 -2.51466408e-02 -7.30118603e-02  1.27412640e-02
 -5.16193472e-02  9.90981236e-03  2.02311277e-02  3.40317152e-02
 -5.81591055e-02 -2.97634378e-02 -4.08323370e-02  2.72975899e-02
 -1.17823360e-02 -8.05395171e-02 -3.53012383e-02  3.69447283e-02
  7.78898075e-02  4.35380489e-02 -9.38352868e-02 -6.07939512e-02
  1.77657623e-02 -2.21767891e-02 -5.82023375e-02 -3.26458924e-02
 -9.47720036e-02 -3.91109809e-02  3.90457995e-02  1.27197672e-02
 -9.70389880e-03 -5.24671888e-03 -2.14095805e-02 -1.41048720e-02]"
"             ""owner"": ""FriELggez2Dy3phZeHHAdpcoEXkKQVkv6tx3zDtCVP8T"",
#               ""state"": ""initialized"",
#               ""tokenAmount"": {
#                 ""amount"": ""998999999000000000"",
#                 ""decimals"": 9,
#                 ""uiAmount"": 998999999,
#                 ""uiAmountString"": ""998999999""
#               }
#             },
#             ""type"": ""account""
#           },
#           ""program"": ""spl-token"",
#           ""space"": 165
#         },
#         ""executable"": false,
#         ""lamports"": 2039280,
#         ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 313
#       },
#       ""pubkey"": ""Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb""
#     }
#   ],
#   ""id"": 1
# }
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960# dataSliceNgoài 2 tham số bộ lọc được nhắc đến ở trên, một tham số thứ 3 cho getProgramAccounts cũng phổ biến không kém đó là dataSlice. Không giống như filters, dataSlice sẽ không giảm số lượng Account trả về. Thay vào đó, dataSlice sẽ giúp giới hạn số lượng dữ liệu trả về trên mỗi Account.Cũng giống với memcmp, dataSlice có 2 tham số con:offset: Vị trí bắt đầu của dữ liệu mong muốn trả vềlength: Số lượng bytes trả về tính từ vị trí bắt đầudataSlice rất hữu ích trong thực tế khi mà chúng ta có thể truy vấn một khối lượng lớn dữ liệu đồng thời bỏ qua các trường không cần thiết trong dữ liệu Account. Một ví dụ cho trường hợp này là khi chúng ta muốn tính số lượng Token Account (cụ thể là số người nắm giữ token) cho một mint cụ thể.TSRust ClientcURLimport { TOKEN_PROGRAM_ID } from ""@solana/spl-token"";
import { clusterApiUrl, Connection } from ""@solana/web3.js"";

(async () => {
  const MY_TOKEN_MINT_ADDRESS = ""BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf"";
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const accounts = await connection.getProgramAccounts(
    TOKEN_PROGRAM_ID, // new PublicKey(""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"")
    {
      dataSlice: {
        offset: 0, // number of bytes
        length: 0, // number of bytes
      },
      filters:","[-3.34289707e-02  3.02293450e-02 -8.90359432e-02 -3.96620575e-03
 -9.25799012e-02 -5.69723435e-02  7.53885731e-02  3.27480324e-02
  6.74969703e-02  1.52435610e-02  2.49893349e-02 -8.34292248e-02
  3.29342186e-02 -3.99985947e-02  3.98170538e-02  4.75222282e-02
 -8.54963288e-02 -1.71412732e-02  2.50595668e-03 -2.91864574e-02
  2.81973332e-02  3.52613740e-02 -2.59666499e-02 -2.73065250e-02
  5.26998304e-02 -2.73290137e-03 -3.87478061e-02  5.42442203e-02
 -6.10047579e-02  1.35178445e-02  5.95166385e-02 -2.88972706e-02
  4.57097143e-02  1.13248155e-02  1.38059735e-01  6.61585853e-02
 -2.05945205e-02 -6.86360151e-02  8.47220421e-02 -1.32117104e-02
  1.25659695e-02 -2.73513682e-02 -7.40118846e-02 -5.10001602e-03
 -2.61007845e-02  3.39794420e-02 -7.23566264e-02  9.66100488e-03
 -1.30055249e-02  9.46674962e-03  1.56045717e-03  2.62528677e-02
  3.01558431e-02  3.54470201e-02 -2.76352130e-02  2.50569195e-04
 -7.42317885e-02  9.41903144e-03  1.02143370e-01  2.36896961e-03
  5.75086884e-02  1.85863692e-02 -1.62040535e-02  8.46247887e-04
 -4.82290275e-02 -1.02441050e-02 -9.81028527e-02 -8.18416197e-03
 -1.35499490e-02  6.69951958e-04  3.37556191e-02 -1.77467205e-02
 -8.79602805e-02  3.81830595e-02 -1.42083708e-02  2.48153452e-02
 -1.27944546e-02 -2.50146333e-02 -4.88444902e-02 -5.99783920e-02
 -4.36650403e-02 -5.82154915e-02 -1.66088324e-02  1.16764769e-01
 -3.33428644e-02  3.90061140e-02  3.97508889e-02 -4.95510036e-03
  3.72017138e-02  3.84305716e-02 -9.63299070e-03  2.34192964e-02
  5.53980246e-02 -3.36564966e-02  1.99703854e-02  8.74284431e-02
 -2.35745385e-02  1.31939054e-02 -1.04633905e-01  9.57379043e-02
  8.49646144e-03  9.25411098e-03  3.28123532e-02 -3.68907340e-02
  7.16232732e-02 -2.18981449e-02  6.15726560e-02  4.08721566e-02
 -1.80709511e-02 -1.08570131e-02 -1.81063823e-02  3.79118286e-02
 -5.71206622e-02 -8.26176815e-03  3.09377006e-04  1.81061421e-02
 -2.11727456e-03  1.76710431e-02  4.62575182e-02  3.51965800e-02
  1.45244196e-01 -9.68147442e-03 -1.26446113e-01  2.20151823e-02
 -7.91290626e-02 -3.84049527e-02  4.10725102e-02  1.43984790e-32
 -2.26238202e-02 -2.10501272e-02  1.67271867e-02 -2.72635259e-02
  3.87568865e-03 -1.32718477e-02  1.10731730e-02  6.35800585e-02
 -8.75944793e-02  6.88683763e-02 -3.26654427e-02 -5.29698702e-03
  1.61381830e-02 -3.10571752e-02 -4.03797179e-02 -7.44531378e-02
 -2.52507813e-02  4.08489332e-02  3.05654835e-02 -3.20477150e-02
 -6.59605209e-03 -1.44807342e-02  6.69225072e-03 -2.15283446e-02
 -3.67050543e-02  2.10594479e-02 -3.65116820e-02 -7.28914812e-02
  5.45512401e-02  1.81353223e-02  5.48813343e-02  2.99383479e-04
 -6.68601915e-02 -7.98427965e-04 -5.20722824e-04 -3.62367146e-02
  3.66339684e-02 -2.21655834e-02 -7.53187165e-02 -2.02703271e-02
  3.14577296e-03 -2.90880892e-02 -4.05898839e-02  2.56286226e-02
 -8.85598287e-02  2.70979758e-02 -4.64566611e-02 -9.96292802e-04
  2.56875996e-02  1.06212176e-01 -6.12490587e-02  4.08017226e-02
 -9.56605598e-02  3.54631990e-02 -2.03213207e-02 -1.02590293e-01
 -6.46721795e-02 -3.13546360e-02  1.31747071e-02 -8.54854360e-02
 -5.27396984e-02  8.25470388e-02  5.82971536e-02 -3.12891528e-02
  3.86247113e-02 -6.10567592e-02  5.72268032e-02  1.38027137e-02
 -4.22779918e-02  9.41336993e-03 -2.76664719e-02  7.33619332e-02
  7.95258135e-02  2.21448578e-03 -6.29107431e-02 -8.33216384e-02
  3.04546077e-02 -4.70837951e-03 -2.85639279e-02  9.93574038e-03
  4.33439799e-02 -1.23124041e-01 -4.82120216e-02  1.38305752e-02
 -4.22509834e-02  3.25700901e-02 -1.96224451e-02 -1.95897892e-02
 -2.52824668e-02 -2.16977969e-02  1.15403384e-02 -3.86425778e-02
 -5.69263436e-02 -8.55874196e-02 -1.34942964e-01 -1.47844628e-32
  4.43413528e-03 -8.80669653e-02  4.99255373e-04 -5.39104044e-02
 -2.20041852e-02 -8.71672854e-03  5.44457808e-02 -6.17562421e-03
  4.30519730e-02  1.19500488e-01 -4.58262488e-03  5.56219816e-02
 -1.31776603e-02 -9.13196616e-03  5.61852828e-02  4.25230898e-02
 -8.02603513e-02 -1.40263680e-02  8.26310553e-03 -1.99920451e-03
 -7.48068541e-02  1.45005956e-01 -2.40678154e-02  1.61399528e-01
 -4.66758236e-02  2.39801649e-02 -2.40092576e-02  9.26096886e-02
 -1.07206916e-02  8.18391051e-03  2.26990059e-02  2.36962698e-02
 -9.80415568e-02  6.50864244e-02 -1.97666343e-02 -8.52135941e-02
  3.97187881e-02  1.57183334e-01 -1.72279421e-02  4.77235653e-02
  3.94867919e-02  1.13880616e-02 -1.78420916e-02 -1.39606884e-02
  7.06521124e-02 -1.14585748e-02  9.30402949e-02 -2.28316598e-02
 -2.42652297e-02  3.74822132e-02  7.37493038e-02  9.56241041e-03
 -1.65754464e-02  2.10946053e-02  8.02210718e-03 -1.42407161e-03
  6.03934787e-02 -7.09253922e-02 -4.99588624e-02 -1.28660411e-01
  9.65642685e-04 -1.95706394e-02  6.36962727e-02  5.54165915e-02
  9.29470509e-02 -8.91966373e-02 -9.03630331e-02 -5.53230848e-03
 -3.27323638e-02 -1.12997949e-01 -1.09345652e-02 -8.81727040e-02
 -1.79168675e-02 -2.40376592e-02  6.24795184e-02  2.43714154e-02
  3.86285558e-02  2.99234688e-03 -1.53317563e-02  8.54362696e-02
  2.39301138e-02  2.46650614e-02  4.87598814e-02  6.71697035e-02
 -2.26124562e-02 -8.70469436e-02 -1.38767622e-02  8.19904581e-02
 -3.09457369e-02  3.84556912e-02 -3.45277973e-02  3.08908038e-02
  5.25675304e-02  3.37935239e-02  2.05415674e-02 -6.18310665e-08
 -6.99252039e-02  1.06634647e-02 -4.14637215e-02  9.67539921e-02
  6.53906092e-02  1.92922764e-02  5.61753195e-03 -2.18547173e-02
 -3.89295369e-02 -9.88048911e-02 -1.56087577e-02  4.76318505e-03
 -7.66348019e-02 -1.87400226e-02 -4.78284247e-02 -5.31370789e-02
 -9.09834802e-02 -1.24784820e-02 -1.57015473e-02 -2.91875768e-02
 -1.97670925e-02  1.19533138e-02 -2.29040254e-02 -4.78524603e-02
 -1.92183850e-03 -1.38697773e-02  4.24474571e-03  8.68160948e-02
 -4.08025160e-02  3.88658093e-03 -3.26367095e-03  2.30723675e-02
 -1.54118221e-02 -6.48797005e-02 -6.12379275e-02 -1.58210925e-03
  3.30486544e-03  2.34354138e-02 -1.75429936e-02  7.15260860e-04
 -6.59347773e-02  3.59053239e-02 -5.38546219e-02  1.78671833e-02
 -3.47832441e-02  1.65137034e-02 -2.06837170e-02  3.33447307e-02
  1.68391943e-01 -8.62406492e-02 -4.51501310e-02 -4.69281152e-03
  8.92537925e-03  3.93925421e-02 -6.86834976e-02  7.70122558e-03
 -1.61122940e-02 -5.58983441e-03 -1.25939017e-02  4.23771814e-02
  8.54049921e-02 -9.82313213e-05  1.92839548e-03  1.79169513e-02]"
"[
        {
          dataSize: 165, // number of bytes
        },
        {
          memcmp: {
            offset: 0, // number of bytes
            bytes: MY_TOKEN_MINT_ADDRESS, // base58 encoded string
          },
        },
      ],
    }
  );
  console.log(
    `Found ${accounts.length} token account(s) for mint ${MY_TOKEN_MINT_ADDRESS}`
  );
  console.log(accounts);

  /*
  // Output (notice the empty <Buffer > at acccount.data)
  
  Found 3 token account(s) for mint BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf
  [
    {
      account: {
        data: <Buffer >,
        executable: false,
        lamports: 2039280,
        owner: [PublicKey],
        rentEpoch: 228
      },
      pubkey: PublicKey {
        _bn: <BN: a8aca7a3132e74db2ca37bfcd66f4450f4631a5464b62fffbd83c48ef814d8d7>
      }
    },
    {
      account: {
        data: <Buffer >,
        executable: false,
        lamports: 2039280,
        owner: [PublicKey],
        rentEpoch: 228
      },
      pubkey: PublicKey {
        _bn: <BN: ce3b7b906c2ff6c6b62dc4798136ec017611078443918b2fad1cadff3c2e0448>
      }
    },
    {
      account: {
        data: <Buffer >,
        executable: false,
        lamports: 2039280,
        owner: [PublicKey],
        rentEpoch: 228
      },
      pubkey: PublicKey {
        _bn: <BN: d4560e42cb24472b0e1203ff4b0079d6452b19367b701643fa4ac33e0501cb1>
      }
    }
  ]
  */
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576use solana_client::{
  rpc_client::RpcClient, 
  rpc_filter::{RpcFilterType, Memcmp, MemcmpEncodedBytes, MemcmpEncoding},
  rpc_config::{RpcProgramAccountsConfig, RpcAccountInfoConfig},
};
use solana_sdk::{commitment_config::CommitmentConfig};
use solana_account_decoder::{UiAccountEncoding, UiDataSliceConfig};

pub fn main() {
  const MY_TOKEN_MINT_ADDRESS: &str = ""BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf"";

  let rpc_url = String::from(""http://api.devnet.solana.com"");
  let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

  let filters = Some(vec![
      RpcFilterType::Memcmp(Memcmp {
          offset: 0, // number of bytes
          bytes: MemcmpEncodedBytes::Base58(MY_TOKEN_MINT_ADDRESS.to_string()),
       ","[-5.20891026e-02  5.65836094e-02 -6.59659728e-02  2.07107458e-02
  1.85873341e-02 -4.62132804e-02  1.52509147e-02  5.72177321e-02
  4.68947329e-02  1.23471590e-02 -6.54719956e-03 -5.55078276e-02
  1.25600398e-02 -2.19357759e-02  2.29971558e-02  4.09088135e-02
 -1.72223017e-01 -8.32687691e-03  3.42748277e-02 -4.29723896e-02
  6.08280376e-02 -2.56259069e-02 -1.84368026e-02 -8.50522742e-02
  2.92950496e-02  8.50365311e-02 -2.37536523e-02 -9.29526519e-03
 -3.06239221e-02  6.51803473e-03  9.33512449e-02 -1.17902057e-02
  5.97602017e-02 -2.20259391e-02  6.00388385e-02  5.26011698e-02
 -5.20036444e-02 -4.58236486e-02  1.00163117e-01 -1.23378649e-01
 -1.31627489e-02  8.46071988e-02 -2.15536878e-02 -3.79920891e-03
  2.58433726e-02  1.42673682e-02 -3.36060561e-02  4.86493595e-02
 -1.41216321e-02 -6.68008924e-02  2.49901470e-02 -3.03094788e-03
  2.81642005e-03  3.70609947e-02 -1.52010452e-02  1.32743064e-02
 -2.80505512e-02  1.34990579e-02  6.68157786e-02  9.09540951e-02
  5.38125038e-02 -3.11423708e-02 -1.98044814e-02 -1.94744524e-02
  1.43270777e-03  1.20104933e-02 -7.31373578e-02  2.19641905e-02
 -8.65304284e-03  8.27191491e-03  1.17142331e-02 -1.59965176e-02
 -9.38894376e-02  1.69241726e-02  4.09242883e-02 -4.04503457e-02
  5.41522726e-03  1.19399056e-02 -1.18979719e-02 -1.45592745e-02
 -4.76811901e-02 -3.52969728e-02  6.37198612e-02  1.01182178e-01
  8.49881321e-02  1.02826595e-01 -1.00157959e-02 -2.49722786e-02
 -3.29983458e-02 -3.73029895e-02  5.44938399e-03 -2.86405496e-02
  3.18059437e-02  2.13252548e-02  5.19032702e-02  2.12407373e-02
  6.91384152e-02  3.64909247e-02 -3.18576023e-02  1.06524877e-01
  2.71710623e-02  5.68893962e-02  5.13915345e-02  3.92967463e-02
  9.45282504e-02  4.01498191e-02  2.74926741e-02  4.87677902e-02
 -2.94171572e-02 -1.78270433e-02 -2.61344183e-02  2.73641236e-02
 -5.55042289e-02  1.22867357e-02 -3.28322663e-03 -2.83017941e-02
 -1.80127230e-02  3.32668759e-02 -5.50516732e-02  9.88169163e-02
  1.39305264e-01 -4.86815087e-02 -1.13845244e-01 -6.60221204e-02
 -7.83237815e-02  6.07101899e-03  7.31757209e-02  7.13999824e-33
 -3.38267498e-02 -4.78858389e-02 -3.80926556e-03 -6.64861947e-02
 -1.73077174e-02  3.75029556e-02 -2.51350272e-02  6.68932572e-02
 -1.75134763e-02  8.46534818e-02  5.73497042e-02 -5.30753322e-02
  6.93014869e-03  4.90316413e-02 -6.23075441e-02  2.51004263e-03
  2.34707468e-03  3.84501331e-02  6.37888908e-02  1.31809246e-02
 -6.18004091e-02  6.84187748e-03 -6.02629147e-02 -4.11858074e-02
  2.31606998e-02  6.27963170e-02  5.15158707e-03 -3.27642970e-02
 -3.13274674e-02  5.48806461e-03 -1.46220736e-02 -1.93607027e-03
 -2.99752224e-02 -2.52287071e-02  2.83894558e-02 -6.99813217e-02
  3.07367798e-02 -8.10262561e-02 -1.26505151e-01 -4.30668965e-02
  9.03604925e-02 -2.69276649e-03 -8.74901563e-02 -3.77520807e-02
 -6.41930103e-02  9.27552581e-03 -5.40206172e-02 -3.50674503e-02
  5.06093428e-02  5.65335080e-02 -7.32470527e-02  1.04897819e-01
 -8.19807202e-02  1.62200481e-02  7.43777826e-02 -4.60819006e-02
 -1.36008849e-02  1.11619150e-02  1.18130846e-02 -1.38933221e-02
  3.45663801e-02  6.64931955e-03  2.95515880e-02 -1.00546423e-02
 -2.42170766e-02 -1.89711526e-02 -7.08668306e-03 -2.36008558e-02
 -4.44541238e-02  5.66451773e-02 -1.41959712e-02 -1.11890007e-02
  2.83028763e-02  4.18699682e-02 -1.05953559e-01 -5.16238995e-02
 -1.54256588e-02  8.52947851e-05 -1.21882390e-02 -4.88511063e-02
  6.74688816e-02 -2.32060328e-02 -5.77471219e-02  3.30528319e-02
 -6.24801824e-03  2.08583493e-02 -8.71090405e-03 -1.04635254e-01
 -9.32813957e-02  9.52279835e-04 -5.14098853e-02 -3.88227105e-02
 -4.41262275e-02 -5.87037504e-02 -1.93857670e-01 -8.35244278e-33
  3.95999700e-02 -1.35939950e-02  1.51355714e-02 -4.80730310e-02
 -3.72167453e-02 -2.15113838e-03  4.22416255e-02  4.74136882e-02
  1.89744700e-02  4.33573537e-02 -1.47491666e-02  1.48123987e-02
 -2.60803429e-03  1.11907292e-02  7.08690733e-02  1.50249004e-01
 -5.84654137e-02 -3.41217816e-02 -2.30483692e-02 -1.79262813e-02
 -3.77492979e-02  5.02760224e-02  7.34279901e-02  9.17227492e-02
 -8.07026550e-02  2.55614799e-02  5.38745560e-02  1.45338932e-02
 -1.48398541e-02 -5.22949826e-03  4.91840877e-02 -1.08456751e-02
 -6.63488582e-02  2.74786036e-02  2.77082231e-02 -7.03732967e-02
  4.56127562e-02  8.97052288e-02  4.66277730e-03  4.36906982e-03
  3.51487547e-02  1.34368809e-02 -1.09687056e-02 -1.17486548e-02
  4.18034904e-02 -1.68232806e-02  5.22798486e-02  8.98523256e-02
  1.49969254e-02  2.59659085e-02  6.03153408e-02 -5.87151982e-02
 -6.36445507e-02  1.00112101e-02 -7.54281953e-02 -3.93176526e-02
  7.37319142e-02 -7.08708167e-02  8.01651031e-02 -9.08199176e-02
 -2.37046853e-02 -1.01793103e-01 -3.52863260e-02  7.61712268e-02
  1.46686630e-02 -9.95302051e-02 -6.99874088e-02  5.53920679e-02
 -2.68414617e-02  9.17736720e-03  4.64450708e-03 -3.38262282e-02
  9.16645862e-03  3.29919043e-03  4.30680811e-02  4.57205623e-02
  1.55014722e-02 -9.21931267e-02  3.00149843e-02  2.77485698e-03
 -2.54876669e-02  8.95549059e-02  2.25010309e-02  4.87672910e-03
 -1.97758991e-02 -7.39016533e-02 -2.49839704e-02  2.23088078e-02
 -2.34467611e-02 -4.79221111e-03 -4.97674197e-02  7.29928762e-02
 -4.63591143e-02  8.89327098e-03  5.37081361e-02 -5.86957114e-08
  1.15073435e-02 -9.51239616e-02  1.75203346e-02  7.09694698e-02
  6.63104951e-02  2.91687790e-02 -4.31937613e-02 -4.32222821e-02
 -2.87635345e-02 -3.24642844e-03  4.14288193e-02  1.92753077e-02
 -7.44626224e-02 -2.64089853e-02 -5.08688837e-02 -6.47007301e-02
 -6.88818321e-02 -1.55355847e-02 -4.41499837e-02 -5.53104747e-03
 -3.52999591e-03  5.04343212e-02  6.23227544e-02 -8.11234862e-02
  3.94682065e-02 -6.19863421e-02  1.79914024e-03  9.63717848e-02
 -5.14117517e-02 -3.60179623e-03 -2.38851998e-02  7.88786188e-02
  5.49352504e-02 -8.31281617e-02 -2.07944401e-02 -3.18811759e-02
 -9.48972709e-04 -2.03416925e-02 -5.56484275e-02 -4.54686657e-02
  1.70812779e-03 -1.03566796e-02 -8.16955324e-03  1.50736012e-02
 -4.04127352e-02 -5.37414700e-02  2.31808554e-02  9.94885862e-02
  9.23618972e-02 -9.79136601e-02 -2.13019196e-02 -5.61800078e-02
 -7.40103703e-03  3.88658978e-02 -3.21873575e-02 -7.40567222e-02
 -9.17241648e-02  6.35968149e-02  3.96682434e-02  5.23358630e-03
  3.85365710e-02  1.94173940e-02 -2.04659328e-02 -3.05915400e-02]"
"  encoding: Some(MemcmpEncoding::Binary),
      }),
      RpcFilterType::DataSize(165), // number of bytes
  ]);

  let accounts = connection.get_program_accounts_with_config(
      &spl_token::ID,
      RpcProgramAccountsConfig {
          filters,
          account_config: RpcAccountInfoConfig {
              data_slice: Some(UiDataSliceConfig {
                  offset: 0, // number of bytes
                  length: 0, // number of bytes
              }),
              encoding: Some(UiAccountEncoding::Base64),
              commitment: Some(connection.commitment()),
              ..RpcAccountInfoConfig::default()
          },
          ..RpcProgramAccountsConfig::default()
      },
  ).unwrap();

  println!(""Found {:?} token account(s) for mint {MY_TOKEN_MINT_ADDRESS}: "", accounts.len());
  println!(""{:#?}"", accounts);
}

/*
// Output (notice the empty <Buffer > at acccount.data)

Found 3 token account(s) for mint BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf: 
[
  (
      tofD3NzLfZ5pWG91JcnbfsAbfMcFF2SRRp3ChnjeTcL,
      Account {
          lamports: 2039280,
          data.len: 0,
          owner: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA,
          executable: false,
          rent_epoch: 319,
      },
  ),
  (
      CMSC2GeWDsTPjfnhzCZHEqGRjKseBhrWaC2zNcfQQuGS,
      Account {
          lamports: 2039280,
          data.len: 0,
          owner: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA,
          executable: false,
          rent_epoch: 318,
      },
  ),
  (
      Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb,
      Account {
          lamports: 2039280,
          data.len: 0,
          owner: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA,
          executable: false,
          rent_epoch: 318,
      },
  ),
]
*/
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081# Note: encoding only available for ""base58"", ""base64"" or ""base64+zstd""
curl http://api.mainnet-beta.solana.com -X POST -H ""Content-Type: application/json"" -d '
  {
    ""jsonrpc"": ""2.0"",
    ""id"": 1,
    ""method"": ""getProgramAccounts"",
    ""params"": [
 ","[-8.50315467e-02  5.10841087e-02 -1.00499079e-01  2.84472443e-02
 -2.59863082e-02 -2.77871843e-02  6.40933886e-02  3.60518624e-03
 -3.89632843e-02 -4.92154695e-02  1.27401603e-02 -5.88212721e-02
  4.53161933e-02  2.39932910e-02  1.92597620e-02  2.32653990e-02
 -7.76236579e-02  3.20036486e-02 -5.33682341e-03 -4.35281172e-02
  1.01584122e-01  1.23481629e-02  1.76082668e-03 -1.28057711e-02
  5.55259474e-02  1.34805599e-02 -3.22699756e-03 -1.18173705e-02
 -1.89512572e-03  3.42733227e-02  8.32019895e-02  4.15219888e-02
  2.23591886e-02  4.06019725e-02  7.20665082e-02  6.07177541e-02
  1.39061147e-02 -3.45712341e-02  1.11777231e-01 -1.11809656e-01
 -1.93986744e-02  7.03187883e-02 -6.75776750e-02  9.49581712e-02
 -2.76383664e-03  6.08637333e-02 -3.29852663e-02  1.99116226e-02
 -5.37422821e-02 -8.20896327e-02 -1.43484445e-03  9.21679661e-02
 -5.56575432e-02  7.48806372e-02  3.11360974e-02 -4.70673628e-02
 -7.51492083e-02  2.16170456e-02  4.07508202e-02  7.87871778e-02
 -2.41631474e-02 -4.17321026e-02 -9.70461126e-03  1.60200223e-02
 -8.08444396e-02 -1.75923035e-02 -2.42168573e-03  5.04405387e-02
  8.89256597e-02 -1.83113702e-02 -1.61310770e-02 -6.20597880e-03
 -8.38977098e-02  1.66665651e-02 -2.00637374e-02  2.39296164e-02
  2.12204214e-02  4.59138229e-02 -5.41513339e-02 -9.85933095e-02
 -3.73556167e-02 -2.34856848e-02  8.41587484e-02  1.10045917e-01
  6.99735656e-02  2.84905303e-02 -3.41332816e-02 -6.29978925e-02
 -1.08590992e-02  2.01720726e-02  1.13201188e-02 -1.10123772e-02
  2.84594414e-03 -2.80768629e-02  3.83319408e-02  3.12969647e-02
  1.76261179e-02  2.32702363e-02 -3.98018993e-02  7.47851804e-02
 -1.85674671e-02  2.22095475e-02  2.12856848e-02 -1.16664160e-03
  4.87562045e-02 -9.87311732e-03  1.33970566e-02  4.44720499e-02
 -4.48456369e-02  3.11962347e-02 -1.90775841e-02  5.39926663e-02
 -7.32621551e-02  1.11381942e-02  3.94669781e-03  4.36445437e-02
 -7.49170184e-02  4.92134579e-02  7.75193330e-03  4.93027195e-02
  2.56948192e-02 -3.07345726e-02 -6.50498867e-02 -3.68383788e-02
 -1.34809226e-01  2.02628784e-03  2.34740619e-02  6.66398474e-33
 -2.64481362e-02 -3.41533218e-03 -5.82772158e-02 -2.27668826e-02
 -9.17941257e-02  5.69681041e-02  2.71107815e-02  4.64401133e-02
 -7.08541193e-04  5.30095771e-02 -4.02110666e-02 -1.22978329e-03
 -4.21361513e-02  6.53703585e-02 -5.12715615e-02 -1.47124613e-02
 -4.12884206e-02  5.36544882e-02  9.95614454e-02  6.52705953e-02
 -1.85067449e-02  3.69816944e-02 -6.17100634e-02 -6.31211847e-02
  5.25788590e-02  1.05024576e-02 -2.98728198e-02 -8.04639384e-02
 -5.63150495e-02  1.66628845e-02  2.97660241e-03  9.38548800e-03
 -4.06795228e-03  2.73037236e-02  4.81468514e-02 -3.89920510e-02
  4.61700261e-02 -4.62224968e-02 -1.22558050e-01 -3.72074023e-02
  4.96591739e-02  5.15179262e-02 -6.78731576e-02 -9.77208000e-03
 -2.85126958e-02 -1.01532843e-02 -4.66533862e-02 -1.35228699e-02
  2.85186060e-02  5.24830781e-02 -9.11482330e-03  7.11469278e-02
 -2.50509605e-02 -1.60056483e-02  3.74788754e-02 -9.34790969e-02
  3.37770432e-02  1.47901811e-02  4.72479612e-02 -8.20214301e-03
 -5.66371903e-02 -3.21936458e-02 -2.26139799e-02 -6.52366830e-03
  3.69474404e-02  7.84707144e-02 -2.57303510e-02 -5.54745756e-02
 -2.39330996e-02  4.11091223e-02 -5.81831746e-02  2.15157960e-02
 -6.17659017e-02  4.56186803e-03 -8.60995278e-02 -6.53595626e-02
 -9.10734944e-03 -1.37485284e-02 -5.03944308e-02 -4.37550247e-02
  7.41337147e-03  3.24661434e-02 -7.72730559e-02  1.07642181e-01
 -2.72747129e-02  4.14839610e-02  2.82069109e-02 -5.80784716e-02
 -2.25581657e-02 -8.83342605e-03  7.62406411e-03 -6.71843365e-02
  1.06276153e-02 -6.52925372e-02 -1.07384652e-01 -6.94535327e-33
  4.26553749e-02 -3.31065618e-02  3.98980677e-02 -5.48533611e-02
 -4.17812541e-02 -2.17106231e-02  8.16197917e-02  4.20550220e-02
  4.32829559e-02  2.35543530e-02 -2.67910790e-02 -5.56298718e-02
 -5.29405312e-04 -1.06282867e-02 -3.23375389e-02  2.80698240e-02
 -9.22913328e-02 -1.04163289e-02 -2.34049396e-03  3.59582901e-02
 -7.79840574e-02  6.96127787e-02  1.13205373e-01  4.82007079e-02
  1.70407053e-02  3.69672179e-02 -1.66007802e-02  3.21782529e-02
  5.76912053e-02 -5.68563975e-02  5.02260439e-02 -4.29309495e-02
 -6.62496835e-02 -3.66839319e-02 -1.74454059e-02 -7.07394406e-02
  2.55147461e-02  1.78176209e-01  8.23128037e-03  4.63505723e-02
  7.13046566e-02  3.36513878e-03 -8.63057375e-02  7.81200901e-02
  5.69624826e-02 -2.34400388e-02  4.36055586e-02  4.32824269e-02
 -4.15239818e-02  1.11941742e-02  6.83871061e-02 -1.60851292e-02
 -9.02764201e-02  3.61371785e-02 -5.14481291e-02 -2.07288433e-02
  1.01846546e-01 -3.18194404e-02  4.53565940e-02 -9.90908518e-02
 -2.17794161e-03 -8.78229216e-02  3.40484502e-03  5.04212826e-02
  4.92132306e-02 -6.79138005e-02 -2.35129111e-02  3.22883800e-02
 -2.69056801e-02  3.42636928e-02  1.57801509e-02 -1.31702557e-01
  1.41702387e-02  3.84376780e-03  3.00030988e-02 -1.98374111e-02
 -5.13145886e-02 -6.64780140e-02  5.35922796e-02  1.14189714e-01
 -8.24759752e-02  8.94834623e-02  2.24556234e-02  9.22748074e-02
  4.08813171e-02 -6.64305314e-02  2.24897712e-02  4.27996702e-02
  2.14086100e-02 -6.61477214e-03 -2.10791118e-02  4.31015566e-02
 -3.29617970e-02  5.10608628e-02  3.21356580e-02 -5.45128884e-08
 -9.73501243e-03 -1.14798799e-01 -2.54232064e-02  6.76066950e-02
  7.18997717e-02  5.22960499e-02 -5.41362390e-02 -2.06195135e-02
 -4.63459790e-02 -7.64331967e-03  2.68443692e-02  5.47689274e-02
 -1.63494155e-01 -3.85505147e-02 -2.46193372e-02 -4.53336276e-02
  1.61444340e-02  7.48192891e-04 -3.20887119e-02  1.93569977e-02
 -5.13351783e-02  2.05165129e-02 -3.05134710e-02 -3.95683199e-02
 -9.71138570e-03 -1.22751091e-02  1.04060717e-01  1.05792068e-01
  2.57074591e-02 -2.38107704e-02  7.61528499e-03 -4.15604934e-03
  7.79596567e-02 -2.68897060e-02 -8.61124843e-02  2.22561676e-02
 -3.25922407e-02 -1.44508304e-02  5.86094195e-03  2.44111698e-02
 -1.59180537e-02 -3.37010138e-02 -2.70910580e-02  2.81313807e-02
  2.63864677e-02 -4.47769798e-02 -8.92092567e-03  5.13834357e-02
  6.11773096e-02  3.68058197e-02 -6.90108910e-02 -7.63732940e-02
 -1.37517136e-02  2.78161820e-02 -6.93884790e-02 -6.36476502e-02
 -9.30936113e-02 -3.05466447e-02  5.90301380e-02 -6.10393193e-03
  7.16609647e-03  1.92059241e-02 -1.39332295e-03 -1.47173358e-02]"
"    ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
      {
        ""encoding"": ""base64"",
        ""dataSlice"": {
          ""offset"": 0,
          ""length"": 0
        },
        ""filters"": [
          {
            ""dataSize"": 165
          },
          {
            ""memcmp"": {
              ""offset"": 0,
              ""bytes"": ""BUGuuhPsHpk8YZrL2GctsCtXGneL1gmT5zYb7eMHZDWf""
            }
          }
        ]
      }
    ]
  }
'

# Output:
# {
#   ""jsonrpc"": ""2.0"",
#   ""result"": [
#     {
#       ""account"": {
#         ""data"": [
#           """",
#           ""base64""
#         ],
#         ""executable"": false,
#         ""lamports"": 2039280,
#         ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 313
#       },
#       ""pubkey"": ""FqWyVSLQgyRWyG1FuUGtHdTQHrEaBzXh1y9K6uPVTRZ4""
#     },
#     {
#       ""account"": {
#         ""data"": [
#           """",
#           ""base64""
#         ],
#         ""executable"": false,
#         ""lamports"": 2039280,
#         ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 314
#       },
#       ""pubkey"": ""CMSC2GeWDsTPjfnhzCZHEqGRjKseBhrWaC2zNcfQQuGS""
#     },
#     {
#       ""account"": {
#         ""data"": [
#           """",
#           ""base64""
#         ],
#         ""executable"": false,
#         ""lamports"": 2039280,
#    ","[-1.37408357e-02  1.02868035e-01  1.53752661e-03 -2.12332653e-03
 -1.39403222e-02 -7.49157369e-02  1.44032156e-02  1.56341065e-02
  2.44630314e-02 -1.66437868e-02  1.84373204e-02 -8.26776251e-02
 -7.92173552e-04 -1.86119676e-02  2.10774001e-02  5.85692525e-02
 -1.19923174e-01  8.41384102e-03 -4.67987396e-02 -1.04800545e-01
  5.72664440e-02  4.82415222e-02 -4.49767858e-02 -6.98991045e-02
  1.62380505e-02  6.84948415e-02 -3.93196195e-02  4.39200997e-02
 -1.27030369e-02 -2.77914130e-03  3.07157543e-02 -9.32366401e-02
  3.42257135e-02  4.25321423e-02  9.59231481e-02  1.75284315e-02
  1.02099646e-02 -7.52743036e-02  8.77477601e-02 -3.22934799e-02
  3.20727527e-02  6.34281784e-02 -4.40726094e-02 -8.32390338e-02
 -1.22233983e-02  6.02241466e-03 -6.34560660e-02 -1.87193360e-02
 -4.70091105e-02  1.07126506e-02 -3.28024849e-02  4.26258100e-03
  1.18039539e-02  3.40201147e-02 -1.02129066e-03 -2.11829301e-02
 -1.55791983e-01  7.11760595e-02  3.98095474e-02 -5.86049110e-02
  2.46973652e-02 -6.49025217e-02 -6.27466803e-03 -1.48510262e-02
 -5.91360368e-02 -3.51320393e-02 -8.64489749e-02  2.03776974e-02
  4.09671552e-02 -6.95016840e-03 -1.89160358e-03 -1.99480429e-02
 -9.17964876e-02  1.70844998e-02  2.53566597e-02  5.67941740e-02
 -1.19908229e-02 -3.44112292e-02 -1.19751683e-02  5.45985904e-03
  2.10518274e-03 -1.19507015e-01 -5.63543364e-02  9.29421410e-02
 -4.89803441e-02  1.95683129e-02 -4.82189059e-02 -3.62939835e-02
 -1.30127091e-02  2.17469409e-03  1.13899205e-02 -3.32711264e-02
  1.17908027e-02 -4.47722059e-03  2.01612171e-02  3.70447673e-02
 -1.51122338e-04 -3.57158273e-03 -4.02461132e-03  9.52313617e-02
  9.48482193e-03  1.07657826e-02  4.37257849e-02  3.65632400e-02
  6.70409724e-02 -4.06756550e-02  5.92104830e-02  6.50364384e-02
 -4.79308665e-02 -6.34243200e-03 -3.40114497e-02  1.24781147e-01
 -7.57914707e-02 -1.83043722e-02 -1.29123516e-02  3.19541283e-02
  1.63396690e-02 -2.75571384e-02 -3.63590755e-02  2.74726469e-02
  1.46216735e-01 -6.97637945e-02 -9.81943607e-02  4.21440154e-02
  5.87529130e-03  3.49618099e-03  2.60089952e-02  1.27213233e-32
  3.76820862e-02 -2.06746515e-02  3.26967314e-02 -5.84668331e-02
  1.21530537e-02 -2.88375821e-02 -1.53647107e-03  3.27356234e-02
 -1.78558026e-02  3.33263725e-02 -6.28996342e-02 -1.99012291e-02
 -7.26637943e-03 -1.17987941e-03 -6.46271110e-02 -5.70232868e-02
 -2.23112088e-02  1.48503594e-02 -9.85255465e-03  3.47578973e-02
 -1.01402358e-04  9.56164021e-03  3.50871682e-02 -2.46069580e-02
 -4.39263768e-02 -1.09699219e-02 -4.39167880e-02 -1.67998783e-02
 -4.40615229e-02  2.73225121e-02 -7.01321429e-03  3.49299014e-02
 -2.40854565e-02  4.29548137e-03  3.22896503e-02 -3.20480987e-02
  1.71985198e-02 -6.65135160e-02 -1.55547913e-02 -3.05291694e-02
 -2.40303092e-02  4.63090045e-03 -6.23696484e-02 -4.67101820e-02
 -5.97976558e-02 -2.18601003e-02 -2.75772903e-02 -6.82072937e-02
 -6.43283781e-03  4.68208231e-02  2.21178271e-02  9.31791589e-02
 -5.32142222e-02  1.84932631e-02  4.97874990e-02 -1.06578581e-01
  5.98538555e-02 -1.07404348e-02 -1.15177101e-02 -1.38530027e-04
 -4.97660451e-02  7.03494996e-02  4.43457700e-02  5.93697792e-03
  9.47771221e-02 -7.04081506e-02  8.88838470e-02  8.97308439e-02
 -5.96469045e-02  3.82525027e-02  2.21005194e-02  5.12694707e-03
  9.16075632e-02  1.57238264e-02 -2.72774640e-02 -7.55427852e-02
 -3.71704902e-03  2.87223980e-02 -3.68114635e-02 -8.90726969e-03
  7.94433653e-02 -4.30256501e-02 -3.25537808e-02 -5.36742769e-02
 -4.37133014e-02  8.08948949e-02  5.64817805e-03 -4.04681675e-02
 -4.70664352e-03 -2.30611581e-02 -4.34479043e-02  2.82632485e-02
 -1.75022557e-02 -8.56469795e-02 -6.52913228e-02 -1.18935394e-32
  2.93105599e-02 -3.76946591e-02  2.45855115e-02 -2.67542060e-02
 -1.84651446e-02 -8.19530040e-02  8.55676010e-02  3.12313009e-02
  9.87953916e-02  9.33175161e-02 -3.41620930e-02 -4.07361016e-02
 -3.85099580e-03 -1.68441199e-02  5.82254604e-02  5.80967963e-02
 -5.29455356e-02 -1.49899535e-02  3.83735858e-02 -3.59253250e-02
 -4.69429009e-02  7.09363744e-02  3.32153253e-02  1.00993514e-01
 -5.34794964e-02 -2.97453105e-02  1.31437948e-04  3.49116437e-02
 -2.73518134e-02 -2.88439486e-02 -4.11961786e-02  3.82350236e-02
 -3.28124617e-03  3.63988355e-02  3.35277766e-02 -1.21390924e-01
  1.50085017e-02  1.63604528e-01  3.79444547e-02 -7.07386248e-03
 -6.13555498e-03  2.53218487e-02 -7.06006214e-02 -1.14370892e-02
  8.66584107e-02 -3.47647890e-02  1.02431394e-01  1.13822974e-01
 -2.36910507e-02  8.68987350e-04  2.11094897e-02  6.15002327e-02
 -1.91311128e-02  7.44067430e-02  2.89169955e-03  2.66230339e-03
  2.99988165e-02 -5.30119613e-02 -2.22459529e-02 -3.09025440e-02
 -4.22830023e-02 -1.19500577e-01  5.55877108e-03 -9.47755820e-04
  8.82352591e-02 -3.55217010e-02 -4.07382138e-02 -3.71696576e-02
 -3.17397676e-02 -4.80754972e-02  2.08474160e-03 -1.34352714e-01
 -1.19920354e-02  2.30254680e-02  4.31646183e-02 -3.76780108e-02
 -2.56678730e-04 -5.45441126e-03  4.38650213e-02  9.58214998e-02
 -4.03616130e-02  7.49251842e-02  1.64773737e-04  1.26603886e-01
  8.61147568e-02 -5.37334159e-02 -3.81958708e-02  4.78345640e-02
 -5.65620959e-02 -2.28817631e-02  1.69107853e-03  1.60156395e-02
 -1.08239483e-02  4.45542224e-02  7.08838999e-02 -6.36925321e-08
 -5.35722971e-02 -7.49112964e-02 -8.04398805e-02  1.04664288e-01
  1.28252581e-02  6.47612438e-02  7.93965068e-03 -2.24215840e-03
  6.75056549e-03 -3.82381342e-02  8.85540694e-02  8.02127570e-02
 -7.71131888e-02 -4.55742218e-02 -3.30733210e-02 -3.30247134e-02
 -1.15680672e-01  1.06057096e-02 -1.44382371e-02  4.07533646e-02
  3.47488448e-02  4.56575453e-02 -1.10696740e-02 -4.69142124e-02
  7.89689459e-03  2.97873002e-02  2.32973974e-02  6.72765300e-02
 -6.78131208e-02 -4.71421592e-02 -4.15565409e-02 -1.23966727e-02
  2.32784580e-02 -9.44364220e-02 -1.48862554e-02 -3.18212584e-02
  4.50238846e-02 -3.84784956e-03 -5.52895591e-02 -2.72560254e-04
  3.06393746e-02  9.19814929e-02 -4.66764048e-02  5.44767864e-02
 -2.28183419e-02 -4.47993819e-03  2.33595315e-02  1.04793318e-01
  9.26275924e-02  2.11176556e-03  2.98543796e-02 -4.36022766e-02
  2.00889576e-02 -3.83143388e-02 -5.18350303e-02 -6.43598959e-02
 -1.80571284e-02  2.33018491e-02 -2.10498702e-02  9.35339928e-02
  1.07421882e-01  2.45381761e-02  3.61260138e-02 -3.06687541e-02]"
"    ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 314
#       },
#       ""pubkey"": ""61NfACb21WvuEzxyiJoxBrivpiLQ79gLBxzFo85BiJ2U""
#     },
#     {
#       ""account"": {
#         ""data"": [
#           """",
#           ""base64""
#         ],
#         ""executable"": false,
#         ""lamports"": 2039280,
#         ""owner"": ""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"",
#         ""rentEpoch"": 313
#       },
#       ""pubkey"": ""Et3bNDxe2wP1yE5ao6mMvUByQUHg8nZTndpJNvfKLdCb""
#     }
#   ],
#   ""id"": 1
# }
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889Vời việc kết hợp giữ 3 tham số (dataSlice, dataSize, và memcmp), chúng ta có thể giới hạn phạm vi truy vấn một cách hiệu quả với chỉ các kết quả trả về mà chúng ta quan tâm.#  Các nguồn tài liệu khácRPC API Documentationopen in new windowWeb3js Documentationopen in new windowJSON-parsed Web3js Documentationopen in new window # Tuần tự hoá dữ liệuKhi nói đến tuần tự hoá nghĩa là tác giả đang muốn đề cập đến cả tuần tự và phi tuần tự hoá dữ liệu.Tuần tự hoá tham gia vào một vài điểm trong vòng đời của Solana Program và Program Account:Tuần tự hoá dữ liệu câu chỉ thị được gửi từ người dùngPhi tuần tự hoá dữ liệu chỉ thị trong ProgramTuần tự hoá dữ liệu Account trong ProgramPhi tuần tự hoá dữ liệu Account ở phía người dùngMột điều quan trọng là tất cả các quá trình bên trên đều được hỗ trợ bởi duy nhất một phương pháp tuần tự hoá. Một vài đoạn code mẫu trong bài sẽ sử dụng Borsh để làm ví dụ.Phần còn lại sẽ được trích dẫn hầu hết từ Solana CLI Program Template.# Cài đặt Tuần tự hoá BorshNhững thư viện lập trình cho Borsh phải được cài đặt tương thích với chương trình Rust, Node, và/hoặc Python.ProgramRust ClientNode ClientPython Client[package]
name = ""solana-cli-template-program-bpf""
version = ""0.1.0""
edition = ""2018""
license = ""WTFPL""

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
no-entrypoint = []

[dependencies]
borsh = ""0.9.0""
lazy_static = ""1.4.0""
num-derive = ""0.3""
num_enum = ""0.5.1""
num-integer = ""0.1.44""
num-traits = ""0.2""
sol-template-shared = {path = ""../shared""}
solana-program = ""1.8.2""
thiserror = ""1.0""

[dev-dependencies]
solana-program-test = ""1.8.2""
solana-sdk = ""1.8.2""

[lib]
crate-type = [""cdylib"", ""lib""]
12345678910111213141516171819202122232425262728[package]
name = ""cli-program-template""
version = ""0.1.5""
edition = ""2018""
license = ""WTFPL""
publish = false

[dependencies]
borsh = ""0.9.0""
clap = ""2.33.3""
lazy_static = ""1.4.0""
serde = { version = ""1.0.125"", features = [""derive""] }
serde_yaml = ""0.8.17""
sol-template-shared = {path = ""shared""}
solana-clap-utils = ""1.8.2""
solana-cli-config = ""1.8.2""
solana-client = ""1.8.2""
solana-logger = ""1.8.2""
solana-remote-wallet = ""1.8.2""
solana-sdk = ""1.8.2""
tokio = { version = ""1"", features = [""full""] }

[workspace]
members = [
    ""program"",
    ""shared"",
]
[dev-dependencies]
lazy_static = ""1.4.0""
solana-validator = ""1.8.2""
solana-streamer = ""1.8.2""
12345678910111213141516171819202122232425262728293031{
  ""name"": ""ts-program-template"",
  ""version"": ""0.1.0"",
  ""description"": ""Sample TS App"",
  ""main"": ""client/nmain.ts"",
  ""author"": """",
  ""keywords"":","[ 1.86891935e-03  8.42327401e-02 -3.53841558e-02 -4.16737385e-02
 -2.53848322e-02 -2.76575238e-02  8.62183720e-02 -2.40479852e-03
  2.96729151e-02  5.63013740e-02  4.81675714e-02 -3.78551669e-02
  4.92696837e-02 -1.08258992e-01  2.33819541e-02  4.27105390e-02
 -1.43019333e-01  5.19092306e-02 -6.17428944e-02 -1.12339467e-01
  1.08479699e-02  1.51891280e-02 -1.40066054e-02 -3.92151810e-02
  1.15653956e-02  6.08027726e-02 -1.14536555e-02  9.84857827e-02
 -4.17064503e-02 -8.19965824e-02  4.45177630e-02 -2.76156422e-03
  1.56161478e-02  4.06479724e-02  7.73246288e-02  5.34027889e-02
 -4.74991538e-02 -1.09854169e-01  6.26662523e-02  4.38755006e-02
  3.78228799e-02 -3.85066532e-02 -9.35122743e-03 -2.23021023e-02
  1.80252676e-03  8.30569863e-02 -7.37867877e-02  4.15694267e-02
  3.54764983e-03 -2.82985643e-02 -6.46186769e-02  2.59665418e-02
  2.02593841e-02  6.31460622e-02 -4.23005931e-02 -3.79588157e-02
 -5.75863831e-02 -2.26429533e-02  7.80521482e-02 -6.57512099e-02
  7.60760391e-03  3.05103883e-02  4.06003296e-02 -4.94072493e-03
 -3.45472507e-02 -8.03772137e-02 -8.32539424e-02  2.94453911e-02
 -1.57690868e-02  4.90864217e-02  4.87839431e-02 -6.41037896e-03
 -1.35840550e-01  6.08572438e-02 -1.71947498e-02  7.89299756e-02
 -2.01021861e-02 -6.37838170e-02 -1.96512248e-02 -1.47560518e-02
 -6.33429661e-02 -2.96386462e-02 -1.54089574e-02  5.18335626e-02
 -6.83009624e-02 -1.83189604e-02  2.79198382e-02  2.47639418e-02
 -4.93048399e-04 -4.19055000e-02 -8.30164831e-03  4.66538556e-02
  2.10608076e-02 -5.13822511e-02  6.24124445e-02  1.83682963e-02
  6.40220419e-02  2.40204073e-02 -4.38308828e-02  5.87138571e-02
  1.75057538e-02  5.68450009e-03  1.11354375e-02 -3.03003825e-02
 -6.97255274e-03  2.03785952e-02  7.59972706e-02  8.43096301e-02
 -2.48162262e-02 -7.06293359e-02 -5.04901148e-02  1.61849300e-03
 -4.62774485e-02 -2.85699051e-02  2.31328774e-02  1.99804548e-02
  7.47667206e-03 -3.88173312e-02  8.12631287e-03  1.76840872e-02
  1.16215192e-01 -1.55110508e-02 -3.07254530e-02  6.95364550e-02
 -8.70346949e-02 -4.84045111e-02  1.76468696e-02  1.46456913e-32
 -3.81708853e-02 -2.43162978e-02 -2.92674918e-02 -5.57911769e-02
  6.01572134e-02  1.75182503e-02 -2.93603186e-02  1.25455623e-03
 -1.10419519e-01  7.77082965e-02 -1.01044782e-01 -5.52000403e-02
 -2.22262442e-02 -4.14253026e-02 -4.65179235e-03 -6.79460540e-02
 -2.34897099e-02 -1.74835250e-02 -1.89608168e-02 -1.64788198e-02
  4.95335646e-02 -4.95088324e-02  2.46005598e-02  1.18795885e-02
 -4.16530222e-02 -2.07860190e-02 -5.42811379e-02 -6.79568946e-02
  2.34598219e-02  6.58404222e-03  2.56538205e-02  5.05352719e-03
 -7.80819580e-02 -7.36721903e-02 -3.59258056e-03 -3.57625894e-02
  3.56568657e-02 -3.96464253e-03 -7.32543096e-02  3.16896699e-02
 -7.25430623e-03 -7.65216444e-03 -1.41002545e-02 -9.04247724e-03
 -5.89643754e-02 -7.82274362e-03 -2.53901705e-02  2.15040836e-02
  1.62904598e-02  1.07542776e-01 -2.70933658e-02  1.62888560e-02
 -4.83241789e-02 -7.18630664e-03 -2.78662890e-03 -8.11017454e-02
 -5.58420047e-02  3.57826380e-03 -3.08463927e-02 -8.73551983e-03
 -2.56222263e-02  4.52092402e-02  2.99618039e-02 -1.61746319e-03
  9.19344500e-02 -7.67642111e-02  5.94571158e-02  9.48109776e-02
 -2.22418010e-02  2.14512907e-02  8.43167212e-03  1.64112002e-02
  7.71155506e-02 -1.98077429e-02 -3.61984372e-02 -6.76365346e-02
  8.65193922e-03  3.27785057e-03 -8.51981342e-03 -1.06983481e-03
  6.21583574e-02 -5.32691702e-02 -8.99461806e-02 -7.07022622e-02
 -7.42504671e-02  4.79993857e-02  9.00447741e-03 -5.54754883e-02
 -9.07865688e-02  1.78050075e-03 -2.12640651e-02  3.10098827e-02
  1.24350702e-02 -9.91302654e-02 -9.45719630e-02 -1.51038373e-32
  1.05666369e-02 -7.48560159e-03  4.74985726e-02 -1.43490946e-02
  6.62558377e-02 -2.61832923e-02  9.40651968e-02 -7.23741353e-02
  2.47320086e-02  8.01893398e-02 -1.51985176e-02  3.07378229e-02
  6.66743424e-03 -2.30403449e-02  1.42138481e-01  5.23422286e-02
 -3.91887836e-02  5.87320654e-03  2.42575873e-02  1.86573826e-02
 -6.27711862e-02  1.12347558e-01 -5.06221280e-02  1.58425689e-01
 -5.45987785e-02  2.86096502e-02  1.19473552e-02  7.16971681e-02
  9.87489801e-03 -1.98838604e-03 -2.71030888e-03  4.47141603e-02
 -1.08809032e-01  1.11546531e-01 -1.38503220e-02 -5.55073395e-02
  4.92145568e-02  1.57331422e-01 -5.07871397e-02  7.97804072e-02
  5.32012060e-02  3.78115997e-02 -1.50157604e-02 -2.33497983e-03
  7.83637390e-02  4.16177213e-02  1.02747858e-01 -1.15651397e-04
 -4.42505553e-02  4.26853485e-02  5.14882840e-02 -9.18347389e-04
 -9.52852145e-03  2.93757394e-02  3.79667208e-02 -4.24381904e-02
  1.75761618e-02 -4.31862734e-02 -6.30151331e-02 -1.10502124e-01
 -1.70981828e-02 -1.32739702e-02  3.47831659e-02  4.03948426e-02
  6.60265461e-02 -9.77551863e-02 -1.04189716e-01 -4.14199121e-02
 -1.62015036e-02 -1.09377734e-01 -7.72855477e-03 -7.34335482e-02
 -6.49871156e-02 -4.19697501e-02  3.14659439e-02  1.82602741e-02
 -1.63080897e-02  6.35599270e-02 -3.40112182e-03  7.38422945e-02
 -3.73731344e-03  3.84404771e-02  5.20909429e-02  2.15588789e-02
 -1.07717300e-02 -5.50879724e-02 -2.52994169e-02  7.57080838e-02
 -2.48811431e-02  1.24539724e-02 -7.37373345e-03  2.86170654e-03
  4.54375632e-02  2.49228124e-02  2.99236346e-02 -6.17404865e-08
 -4.04527970e-02 -2.40283627e-02 -3.79851162e-02  8.69803503e-02
  6.99299648e-02 -4.34036879e-03  1.46660442e-02 -3.16418745e-02
  1.10887550e-02 -5.24676964e-02  9.44093764e-02  3.20132710e-02
 -2.67801676e-02 -1.80816799e-02 -9.79518704e-03 -2.99261902e-02
 -1.28660813e-01 -3.52367619e-03  9.65513010e-03 -3.36696655e-02
 -3.40653514e-03 -2.94426852e-03 -2.41898075e-02 -1.25673730e-02
 -7.05504208e-04  2.24041771e-02 -4.66701156e-03  1.51354065e-02
 -2.18328815e-02  3.15321200e-02  8.18975619e-04 -7.72213610e-03
  2.63738795e-03 -8.29083472e-02 -2.16999208e-03 -1.00133486e-01
  4.04380970e-02  6.44866377e-02 -2.07220837e-02 -3.07183322e-02
 -8.40502232e-02  6.96989968e-02 -4.70858067e-02  4.20085806e-03
 -5.54047041e-02 -2.69351155e-02  2.81129498e-02  2.38422751e-02
  1.16344221e-01 -5.29823042e-02 -3.81202213e-02 -5.03646210e-02
  3.19421366e-02  1.88815873e-02 -1.01237046e-02 -3.06652486e-02
  2.32730750e-02  5.73415868e-02 -1.90973524e-02 -1.48374436e-03
  6.35843724e-02  3.46382707e-02  2.03500781e-02 -4.96904030e-02]"
"[],
  ""workspace"": ""client/"",
  ""repository"": {
    ""type"": ""git"",
    ""url"": ""https: //github.com/hashblock/solana-cli-program-template""
  },
  ""homepage"": ""https: //github.com/hashblock/solana-cli-program-template"",
  ""scripts"": {
    ""test:all"": ""npm run build:client && npm run test:client"",
    ""build:client"": ""rm -rf ./.dist/client && tsc "",
    ""start"": ""node ./node_modules/.bin/mocha .dist/client/main.js"",
    ""test:client"": ""npm run start"",
    ""lint"": ""eslint --ext .ts client/* && prettier --check \""client/**/*.ts\"""",
    ""lint:fix"": ""eslint --ext .ts client/* --fix"",
    ""pretty"": ""prettier --write '{,client/**/}*.ts'""
  },
  ""devDependencies"": {
    ""@tsconfig/recommended"": ""^1.0.1"",
    ""@types/chai"": ""^4.3.0"",
    ""@types/eslint"": ""^7.28.2"",
    ""@types/eslint-plugin-prettier"": ""^3.1.0"",
    ""@types/mkdirp"": ""^1.0.2"",
    ""@types/mocha"": ""^9.0.0"",
    ""@types/prettier"": ""^2.4.1"",
    ""@typescript-eslint/eslint-plugin"": ""^5.6.0"",
    ""@typescript-eslint/parser"": ""^5.6.0"",
    ""chai"": ""^4.3.4"",
    ""eslint"": ""^8.2.0"",
    ""eslint-config-google"": ""^0.14.0"",
    ""eslint-config-prettier"": ""^8.3.0"",
    ""eslint-plugin-prettier"": ""^4.0.0"",
    ""html-webpack-plugin"": ""^5.5.0"",
    ""mocha"": ""^9.1.3"",
    ""prettier"": ""^2.4.1"",
    ""start-server-and-test"": ""^1.14.0"",
    ""ts-node"": ""^10.4.0"",
    ""typescript"": ""^4.5.2""
  },
  ""dependencies"": {
    ""@solana/web3.js"": ""^1.31.0"",
    ""borsh"": ""^0.7.0"",
    ""env"": ""^0.0.2"",
    ""fs"": ""^0.0.1-security"",
    ""mkdirp"": ""^1.0.4"",
    ""npm-check-updates"": ""^12.0.3"",
    ""sync-request"": ""^6.1.0"",
    ""update"": ""^0.4.2""
  }
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455borsh-construct==0.1.0
solana==0.20.0
12# Làm thế nào để tuần tự hoá dữ liệu của các chỉ thị từ phía người dùngNếu bạn đang tuần tự hoá dữ liệu của một chỉ thị ở phía người dùng để gửi lên Program, bạn cần chắc chắn rằng Program sẽ phi tuần tự hoá chỉ thị đó và đúng nguyên bản ban đầu.Trong mẫu sau, một khối dữ liệu chỉ thị được chứa trong một mảng tuần tự như sau:Chỉ thị (Chỉ mục)Khoá tuần tựGiá trị tuần tựInitialize (0)Bất khả thi cho chỉ thịBất khả thi cho chỉ thịMint (1)""foo""""bar""Transfer (2)""foo""Bất khả thi cho chỉ thịBurn (3)""foo""Bất khả thi cho chỉ thịTrong ví dụ sau đây, giả sử Program sở hữu Account đã được khởi tạo từ trước.TS ClientPython ClientRust Client// Include borsh functionality

import { serialize, deserialize, deserializeUnchecked } from ""borsh"";
import { Buffer } from ""buffer"";

// Get Solana
import {
  Keypair,
  Connection,
  PublicKey,
  Transaction,
  TransactionInstruction,
  sendAndConfirmTransaction,
} from ""@solana/web3.js"";

// Flexible class that takes properties and imbues them
// to the object instance
class Assignable {
  constructor(properties) {
    Object.keys(properties).map((key) => {
      return (this[key] = properties[key]);
    });
  }
}

// Our instruction payload vocabulary
class Payload extends Assignable {}

// Borsh needs a schema describing the payload
const payloadSchema = new Map([
  [
    Payload,
    {
      kind: ""struct"",
      fields: [
        [""id"", ""u8""],
        [""key"", ""string""],
        [""value"", ""string""],
      ],
","[-6.30962551e-02 -1.71100125e-02 -4.87192646e-02  9.55494214e-03
  6.57053292e-02 -7.19528720e-02 -1.03741018e-02  3.91855165e-02
  6.15226058e-03  3.26103196e-02  1.58560313e-02 -1.87726002e-02
 -4.09592800e-02  1.22746751e-02  9.47618186e-02  7.99246877e-02
 -8.29641074e-02 -4.12320085e-02  7.99968392e-02  6.83702203e-03
  6.22954546e-03 -7.36658741e-03  5.11879884e-02 -4.03665602e-02
 -1.75388288e-02 -2.42687464e-02 -3.79381498e-04 -3.60504258e-03
 -7.05225114e-03  1.40039837e-02  2.77820285e-02  3.60369720e-02
 -4.58318368e-02  2.71148272e-02  6.20295405e-02  1.43501386e-01
  6.44485354e-02  4.16051708e-02 -4.31813039e-02  3.00679561e-02
  3.10683250e-02  9.62639824e-02 -3.71438675e-02 -1.16078742e-01
  6.25997111e-02 -1.38535708e-01 -9.84366089e-02 -6.06138594e-02
 -4.73947264e-02  3.30970101e-02 -6.03521392e-02 -7.93468058e-02
 -7.02241138e-02 -3.82951200e-02  6.94041699e-02  8.89961142e-03
 -2.55971048e-02  8.42211097e-02  9.06790122e-02  1.51584102e-02
  4.65212949e-02  1.36101684e-02  6.85263472e-03 -4.29506153e-02
  3.99123989e-02 -5.32532390e-03 -5.84109873e-02  2.38235928e-02
 -2.95588430e-02 -1.40434979e-02 -2.18039863e-02 -2.40838937e-02
 -3.45273130e-02  2.93565542e-02 -1.33318350e-01 -3.76453288e-02
  2.95014530e-02  6.74420521e-02 -3.46844387e-03  3.77439074e-02
 -1.67807210e-02 -1.55316684e-02  5.72637655e-03  6.22902773e-02
 -6.72739511e-03  8.66418406e-02 -5.16532473e-02 -2.14383230e-02
  1.34835184e-01  3.06648593e-02  6.67738356e-03 -8.26068446e-02
 -8.25061947e-02  6.15607612e-02  2.95661613e-02  1.89170614e-02
 -7.78171839e-03  8.13778862e-02 -5.85053489e-02  8.94818082e-02
 -2.04373412e-02 -9.08788964e-02  3.45087834e-02 -2.66713165e-02
 -1.70611031e-02  2.22969730e-03  1.27174377e-01 -5.27853845e-04
 -3.17045599e-02  4.00352897e-03 -6.04522275e-03  2.66228821e-02
  4.97858133e-03 -7.67356008e-02 -2.47586034e-02 -2.07340512e-02
  4.73518409e-02  2.90162787e-02  7.34204776e-04  8.25136304e-02
  8.75689760e-02  8.69031921e-02 -2.19135382e-03 -2.72124000e-02
 -6.29883725e-03 -1.17641794e-05  1.01680480e-01  2.55379160e-33
  1.00375429e-01 -3.28645930e-02 -6.14864081e-02  1.14419505e-01
  1.40964240e-01 -2.56736036e-02  6.33035302e-02 -2.45977826e-02
 -1.59548938e-01 -2.10711770e-02  7.00664567e-03  5.84870949e-03
 -3.80003415e-02 -5.70296682e-02 -3.80613171e-02 -3.75377461e-02
  1.29035627e-02 -2.30562910e-02 -1.80003990e-03 -1.85605604e-02
  1.59374624e-02 -7.80952442e-03 -2.15619244e-02  2.29293145e-02
 -2.59062424e-02 -3.92766856e-02 -3.94330807e-02  1.57795509e-03
 -8.98896530e-03 -9.80316661e-03  8.35930184e-02  7.89346918e-02
 -1.83843225e-02  9.81175825e-02 -3.19930874e-02 -2.66800374e-02
 -4.67078015e-02 -2.62672137e-02 -3.08370944e-02 -5.83243631e-02
 -3.02545987e-02  2.90681198e-02 -1.32923573e-02  7.63684884e-03
 -1.62946470e-02 -9.54664201e-02 -1.66773200e-02  6.87778695e-03
  1.27784222e-01 -1.89581700e-02 -9.30158347e-02  7.17640221e-02
 -5.60847782e-02  5.65482043e-02  1.30030196e-02  4.13479023e-02
 -3.89823951e-02 -3.34310159e-02  1.84858851e-02  1.65836290e-02
 -1.35336490e-02  8.87220632e-03  1.28350714e-02 -8.28304812e-02
  3.27087007e-02 -1.84433702e-02 -6.39796257e-02 -2.38018688e-02
  6.04290850e-02  1.21694868e-02  2.74587516e-02 -2.47720312e-02
  6.74571563e-03  4.43603471e-02  3.41607220e-02 -5.57290055e-02
  4.94687147e-02  5.96179254e-02 -6.57195821e-02 -4.02508341e-02
  3.43632884e-03 -7.25399107e-02 -4.93348204e-02  3.34012508e-02
  3.91250066e-02  4.49421164e-03  1.18069211e-02  4.52516079e-02
  4.57632681e-03 -4.18440774e-02  7.88888857e-02 -2.77319904e-02
 -3.58806886e-02 -1.16694130e-01 -7.71811754e-02 -3.57739188e-33
  5.29405475e-02 -1.32761719e-02 -6.83763251e-02 -4.62308228e-02
 -4.96519208e-02 -4.91278768e-02 -3.86631824e-02 -9.82376337e-02
 -2.91755982e-02  8.85519609e-02  2.94510275e-03 -7.30396528e-03
  4.03580330e-02  3.63874510e-02 -5.36903515e-02  8.37434605e-02
 -2.27838978e-02 -5.40248975e-02  3.25940736e-02 -1.20586216e-01
  1.30153531e-02  9.50110182e-02 -2.15736423e-02  1.57792063e-03
 -2.01891046e-02 -3.96336280e-02 -5.22868801e-03  3.54505107e-02
 -5.77347390e-02 -7.72477984e-02 -4.66430560e-03  1.98459551e-02
 -1.17655411e-01  2.81555876e-02 -9.10687074e-03 -1.33845974e-02
  2.18517687e-02  8.26587379e-02 -2.75813509e-02  1.56448409e-03
  8.75325873e-02 -3.88265848e-02 -9.31715146e-02  6.04566513e-03
 -7.11387908e-03  2.14279583e-03  6.27234504e-02  4.24692547e-03
 -3.02417576e-02 -3.82186379e-03  2.54568662e-02 -6.81535676e-02
  5.20747006e-02 -8.48885626e-02 -2.50374265e-02 -2.16869526e-02
  2.68464237e-02 -3.15965749e-02 -6.89074397e-02  5.79557754e-03
  8.16928297e-02 -5.21587171e-02 -3.09443250e-02 -2.02701073e-02
  1.06564248e-02 -7.42516443e-02 -8.63988176e-02  5.57840094e-02
  6.31063208e-02 -9.87429768e-02 -1.12961330e-01  2.92882305e-02
  2.56124139e-02 -4.59794421e-03  3.83235328e-02  2.79681012e-03
  1.52375717e-02  7.26920879e-03  4.50736731e-02  9.62931290e-03
 -3.70460823e-02  3.59348841e-02  2.39693951e-02  2.71495152e-02
 -3.99909951e-02  1.24168182e-02 -4.32031741e-03  5.08688502e-02
 -3.29532102e-02  3.99521627e-02 -4.40487303e-02  1.51546942e-02
  4.73338589e-02  4.93748374e-02  4.15628739e-02 -4.68985597e-08
 -9.27448273e-02 -5.80954878e-03 -1.43123046e-01 -2.88197920e-02
 -2.93543562e-02  3.54669727e-02  4.04915623e-02 -8.98542290e-04
  1.51477428e-02  3.44287208e-03 -3.80522534e-02  1.06440254e-01
 -1.97729506e-02  4.38560359e-02 -1.58685278e-02 -1.72718540e-02
  6.30917028e-04  9.57870036e-02  2.22348212e-03 -3.74336503e-02
  3.89638431e-02 -5.73912635e-03  9.07670939e-04  1.14538789e-01
  3.74949118e-03 -3.82630387e-03 -2.32895575e-02  5.41330688e-02
 -7.47659355e-02  8.94406717e-03 -6.12074733e-02  1.43548253e-03
  3.45711932e-02 -5.29415607e-02 -2.80579049e-02  2.27122083e-02
 -1.08845551e-02 -4.37169932e-02  1.07656587e-02  4.92779873e-02
  1.09860981e-02  3.36632505e-02  1.14390599e-02  2.05294285e-02
 -7.56623223e-02 -3.18947621e-02 -1.37556158e-03  7.32709244e-02
  6.66113123e-02 -3.97828780e-02  1.96527131e-02 -1.18772527e-02
 -1.08573753e-02  3.92249897e-02 -1.93545353e-02  2.85862200e-02
 -8.60453397e-03 -8.27857479e-03  3.40841077e-02  3.08158458e-03
 -1.91873207e-03 -2.51700524e-02  4.86663245e-02 -5.10247052e-03]"
"   },
  ],
]);

// Instruction variant indexes
enum InstructionVariant {
  InitializeAccount = 0,
  MintKeypair,
  TransferKeypair,
  BurnKeypair,
}

/**
 * Mint a key value pair to account
 * @param {Connection} connection - Solana RPC connection
 * @param {PublicKey} progId - Sample Program public key
 * @param {PublicKey} account - Target program owned account for Mint
 * @param {Keypair} wallet - Wallet for signing and payment
 * @param {string} mintKey - The key being minted key
 * @param {string} mintValue - The value being minted
 * @return {Promise<Keypair>} - Keypair
 */

export async function mintKV(
  connection: Connection,
  progId: PublicKey,
  account: PublicKey,
  wallet: Keypair,
  mintKey: string,
  mintValue: string
): Promise<string> {
  // Construct the payload
  const mint = new Payload({
    id: InstructionVariant.MintKeypair,
    key: mintKey, // 'ts key'
    value: mintValue, // 'ts first value'
  });

  // Serialize the payload
  const mintSerBuf = Buffer.from(serialize(payloadSchema, mint));
  // console.log(mintSerBuf)
  // => <Buffer 01 06 00 00 00 74 73 20 6b 65 79 0e 00 00 00 74 73 20 66 69 72 73 74 20 76 61 6c 75 65>
  // let mintPayloadCopy = deserialize(schema, Payload, mintSerBuf)
  // console.log(mintPayloadCopy)
  // => Payload { id: 1, key: 'ts key', value: 'ts first value' }

  // Create Solana Instruction
  const instruction = new TransactionInstruction({
    data: mintSerBuf,
    keys: [
      { pubkey: account, isSigner: false, isWritable: true },
      { pubkey: wallet.publicKey, isSigner: false, isWritable: false },
    ],
    programId: progId,
  });

  // Send Solana Transaction
  const transactionSignature = await sendAndConfirmTransaction(
    connection,
    new Transaction().add(instruction),
    [wallet],
    {
      commitment: ""singleGossip"",
      preflightCommitment: ""singleGossip"",
    }
  );
  console.log(""Signature = "", transactionSignature);
  return transactionSignature;
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108from borsh_construct import String, CStruct, U8
from enum import IntEnum
from solana.transaction import Transaction
from solders.pubkey import Pubkey
from solders.keypair import Keypair
from solders.instruction import Instruction, AccountMeta
from solders.rpc.responses import SendTransactionResp
from solana.rpc.api import Client


# Instruction variants for target program
class InstructionVariant(IntEnum):
    INITIALIZE = 0
    MINT = 1
    TRANSFER = 2
    BURN = 3


# Schema for sending instructionVariants to on-chain sample program
payload_schema = CStruct(""id"" / U8, ""key"" / String, ""value"" / String)


def construct_payload(instruction_variant: InstructionVariant, key: str, value: str):
    """"""Generate a serialized instructionVariant""""""
    return payload_schema.build({""id"": instruction_variant, ""key"": key, ""value"": value})


def mint_kv(
    client: Client,
    program_pk: Pubkey,
    account_pk: Pubkey,
    wallet_kp: Keypair,
    mint_key: str,
    mint_value: str,
) -> SendTransactionResp:
    """"""Mint with a key/value pair to an account""""""
    # Construct the program payload for Mint invariant
    payload_ser = construct_payload(InstructionVariant.MINT, mint_key, mint_value)

    # print(payload_ser)
    # => b'\x01\n\x00\x00\x00python key\x0c\x00\x00\x00python value'
 ","[-7.35546723e-02 -2.30176328e-03 -1.38425604e-01 -5.58983348e-03
 -6.68736696e-02 -3.22724469e-02  1.02775972e-02  7.59939328e-02
 -4.40060534e-03  1.51360249e-02  1.49170076e-02 -3.89954746e-02
 -2.34301221e-02 -2.94454526e-02  9.85885933e-02  2.13007280e-03
 -8.52466747e-02 -5.40378988e-02 -2.44444963e-02 -4.70223613e-02
  8.26216340e-02 -2.65601929e-02  1.30644972e-02 -8.66408180e-03
  2.61188745e-02 -2.11042780e-02  4.75388505e-02  4.97441962e-02
 -1.15042953e-02  5.35072163e-02  1.40783548e-01  4.14550640e-02
 -2.84284595e-02  3.29865627e-02  3.69473398e-02  2.03822553e-01
 -5.54910563e-02 -1.87922288e-02  6.70453757e-02 -9.63925645e-02
 -6.93506096e-03  6.80233538e-02 -1.11915946e-01  5.47549408e-03
  9.14379805e-02 -5.77047877e-02 -6.42707422e-02  3.18549573e-02
 -2.46746745e-02 -2.09515691e-02  1.58354901e-02  6.75187036e-02
 -6.78205043e-02  5.25940210e-03 -2.54518837e-02  1.13775441e-02
  1.15801441e-02 -1.22671900e-02  7.77515098e-02  2.48710085e-02
  9.34880052e-04 -1.39387185e-02  7.70911481e-03 -1.49689047e-02
 -6.46156445e-02 -1.12796472e-02 -3.51079963e-02 -4.70764004e-02
  1.59337893e-02 -5.35394298e-03  3.38212065e-02 -1.06145933e-01
 -9.08467397e-02  2.00751815e-02 -8.33411366e-02 -8.61821789e-03
  3.55622806e-02 -9.92693193e-03 -8.69878754e-02 -6.23136722e-02
  2.51070340e-03  7.72633962e-03  3.74186924e-03  7.67519996e-02
 -1.95695125e-02  3.16644758e-02  3.78556661e-02 -2.91701946e-02
  4.89618629e-02  1.19031277e-02  3.43343131e-02 -3.12928967e-02
 -1.38074160e-02 -2.50536911e-02  1.19746476e-01  4.34555374e-02
  4.03984711e-02  1.22920368e-02 -5.73926903e-02  3.94292325e-02
 -2.01531574e-02 -1.51156131e-02 -3.54372486e-02 -3.74143608e-02
  3.73833217e-02 -1.33358371e-02  7.38804191e-02  1.54455344e-03
 -9.28765461e-02 -9.41918604e-03 -5.85377291e-02  5.78312017e-02
  1.48602594e-02  5.49626071e-03 -3.76064666e-02  5.45219705e-02
  1.07593986e-03  2.83530280e-02  1.57013293e-02  6.36742711e-02
  9.92121920e-02  1.39697688e-02 -1.26699237e-02 -6.26952806e-03
 -6.55825809e-02 -1.31595461e-02  1.34788714e-02  1.16162785e-32
 -2.71895211e-02 -4.29800190e-02 -9.28706955e-03 -2.76870169e-02
 -3.03869117e-02  2.25428157e-02  1.39229789e-01 -8.14749114e-03
 -8.53343830e-02  2.37315036e-02 -6.05097339e-02 -3.23957168e-02
 -5.52009419e-02 -1.57131255e-02 -8.17442834e-02  3.50381481e-03
 -3.83608975e-02  2.00711060e-02  1.10676788e-01  6.62049428e-02
  1.73876435e-02 -4.43973690e-02 -4.14157249e-02  3.03130946e-03
  2.04946715e-02  1.17848879e-02 -3.42907086e-02 -4.16311547e-02
  4.48183250e-03 -5.28927520e-03  6.45604879e-02  3.49545330e-02
 -9.26731154e-02  3.37304967e-03  3.74820977e-02 -9.02678743e-02
 -1.92053907e-04 -7.92232691e-04 -1.25613943e-01 -3.40071507e-02
  9.83525440e-02  3.84512469e-02 -5.67407086e-02  6.88386941e-03
 -3.36388387e-02 -3.71241234e-02 -5.61919063e-03  6.08062223e-02
  1.55939594e-01  3.94237339e-02 -8.32436010e-02  4.69603725e-02
  3.86076309e-02 -1.00817427e-01  8.03804994e-02 -6.44479617e-02
  4.40353788e-02  5.71411103e-02  1.69269610e-02 -2.95107905e-02
 -5.53221218e-02 -1.62946265e-02 -2.42797211e-02 -6.24408247e-03
  9.54790786e-02  1.09301759e-02 -8.53054002e-02 -3.00199608e-04
 -1.34347761e-02 -1.90387946e-02 -5.82307242e-02 -7.21317949e-03
 -1.95957683e-02  2.56393272e-02 -3.65597988e-03  1.28143830e-02
 -1.65773742e-02  3.60793876e-03 -4.37256172e-02 -8.66911486e-02
 -4.22800817e-02  7.74799287e-02 -6.23108335e-02  1.04019031e-01
  7.95544684e-02  7.40296245e-02 -7.66160116e-02 -6.71774149e-02
 -3.22670005e-02  6.46393467e-03  4.09223102e-02 -4.44501787e-02
 -5.68737052e-02 -4.61554974e-02 -8.88818204e-02 -1.19850318e-32
  4.76820320e-02 -5.50458860e-03 -2.40789242e-02  7.55884945e-02
  7.58078368e-03  1.18984766e-02  3.32570225e-02 -1.16221393e-02
 -2.02311985e-02  6.98108077e-02 -5.71671490e-06 -2.64801929e-04
  2.62819789e-02  5.08369925e-03  1.80075988e-02  6.95889667e-02
 -3.92574109e-02  3.31396312e-02  4.70074788e-02 -1.92624591e-02
 -4.72617336e-02  9.18078423e-02  4.15689610e-02 -1.86626874e-02
 -9.97190550e-03  8.58677458e-03  2.51517985e-02  9.69226882e-02
 -2.60691606e-02 -7.45466503e-04  7.75736198e-02  3.98614369e-02
 -6.79682568e-02  1.14223294e-01 -2.59739198e-02 -5.00886962e-02
  7.93323368e-02  1.75991226e-02 -2.37819348e-02  8.77361149e-02
  5.88271432e-02 -7.46810343e-03  4.88329632e-03  7.08241342e-03
  3.22484858e-02 -8.94968212e-02  5.54929972e-02  4.55007609e-03
 -3.86294536e-02  6.94214879e-03  5.17877229e-02 -3.05826087e-02
 -1.16784520e-01 -3.00996681e-03 -2.24120934e-02 -3.08327023e-02
  6.60038888e-02 -5.43105938e-02  5.32616451e-02 -7.04464167e-02
  3.27494889e-02 -5.79021908e-02  1.09883159e-01  3.82184424e-02
  1.38312327e-02 -9.42272842e-02 -3.78200151e-02 -3.63012939e-03
 -1.03261173e-02  1.40393199e-02  4.05662321e-02 -6.90332949e-02
  4.85874340e-02 -1.04096523e-02  3.48164104e-02 -1.34079962e-03
 -3.24289948e-02 -4.03014906e-02  7.64898956e-02  3.87248807e-02
 -1.70613509e-02  5.73867522e-02  3.77550814e-03  2.68470328e-02
 -9.54664033e-03 -2.32092943e-02  6.86046248e-03  9.16849747e-02
 -6.00346886e-02  3.59114520e-02 -1.71850305e-02 -2.79186317e-03
  1.36460504e-02 -1.47108850e-03  5.62005080e-02 -6.21414813e-08
 -3.26303020e-02 -3.81271355e-02 -6.25019148e-02  4.66283448e-02
  5.35655320e-02  2.20927224e-02 -9.49184820e-02 -1.12945043e-01
  2.21328642e-02 -2.71473918e-02 -8.37141648e-03  3.64332949e-03
 -1.16725424e-02 -2.52668490e-03 -3.75216901e-02  3.38186920e-02
  1.37263210e-02  7.27282166e-02 -2.87002847e-02 -3.86920273e-02
  3.47592607e-02 -1.79048497e-02 -2.09567770e-02 -3.43453996e-02
  4.70388308e-02 -4.74602692e-02  4.81117852e-02  4.63801362e-02
  2.77789403e-02 -4.65514660e-02 -3.62441353e-02 -2.60922033e-02
  7.62132630e-02 -5.59263453e-02 -5.85123710e-02 -4.48553376e-02
  6.74877409e-03 -4.27093310e-03  6.49190098e-02  2.78692339e-02
 -9.52881481e-03 -2.89327670e-02 -1.19897649e-01 -1.00193238e-02
 -2.16111634e-02  3.50754708e-02 -5.97417355e-02  5.39003052e-02
 -1.11450562e-02  3.10466681e-02 -4.05319668e-02 -9.29459184e-02
  1.25414971e-02  9.24336165e-03  2.46329606e-02 -3.70987342e-03
 -7.68509135e-02 -1.27908057e-02  7.02547655e-02  2.39195372e-03
  8.17774143e-03  4.14411873e-02 -3.27385217e-02 -6.95094615e-02]"
"  # mint_payload_copy = payload_schema.parse(payload_ser)
    # print(mint_payload_copy)
    # => Container:
    # =>     initialized = 1
    # =>     key = u'python key' (total 10)
    # =>     value = u'python value' (total 12)

    # Construct the transaction with instructionVariant
    txn = Transaction().add(
        Instruction(
            accounts=[AccountMeta(account_pk, False, True)], program_id=program_pk, data=payload_ser
        )
    )
    return client.send_transaction(txn, wallet_kp)
    # => {'jsonrpc': '2.0', 'result': '4ZdpWNdovdVaLextWSiqEBWp67k9rNTTUaX3qviHDXWY9c98bVtaRt5sasPhYzMVXHqhex78gzNKytcBnVH5CSTZ', 'id': 2}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556
/// Instruction payload gets serialized
#[derive(BorshSerialize)]
pub struct Payload<'a> {
    variant: u8,
    key: &'a str,
    value: &'a str,
}

/// Perform a mint transaction consisting of a key/value pair
/// See submit_transaction below
pub fn mint_transaction(
    rpc_client: &RpcClient,
    accounts: &[AccountMeta],
    wallet_signer: &dyn Signer,
    mint_key: &str,
    mint_value: &str,
    mint_instruction_id: u8,
    commitment_config: CommitmentConfig,
) -> Result<Signature, Box<dyn std::error::Error>> {
    // Setup the payload. `mint_instruction_id` is instruction variant index = 1
    let data = Payload<`_> {
        variant: mint_instruction_id,
        key: mint_key,
        value: mint_value,
    };
    let instruction = Instruction::new_with_borsh(PROG_KEY.pubkey(), &data, accounts.to_vec());
    submit_transaction(rpc_client, wallet_signer, instruction, commitment_config)
}

/// Submits the program instruction as per the
/// instruction definition
pub fn submit_transaction(
    rpc_client: &RpcClient,
    wallet_signer: &dyn Signer,
    instruction: Instruction,
    commitment_config: CommitmentConfig,
) -> Result<Signature, Box<dyn std::error::Error>> {
    let mut transaction =
        Transaction::new_unsigned(Message::new(&[instruction], Some(&wallet_signer.pubkey())));
    let (recent_blockhash, _fee_calculator) = rpc_client
        .get_recent_blockhash()
        .map_err(|err| format!(""error: unable to get recent blockhash: {}"", err))?;
    transaction
        .try_sign(&vec![wallet_signer], recent_blockhash)
        .map_err(|err| format!(""error: failed to sign transaction: {}"", err))?;
    let signature = rpc_client
        .send_and_confirm_transaction_with_spinner_and_commitment(&transaction, commitment_config)
        .map_err(|err| format!(""error: send transaction: {}"", err))?;
    Ok(signature)
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# Làm thế nào để phi tuần tự hoá dữ liệu của các chỉ thị trên ProgramRust Program//! instruction Contains the main ProgramInstruction enum

use {
    crate::error::SampleError, borsh::BorshDeserialize, solana_program::program_error::ProgramError,
};

#[derive(Debug, PartialEq)]
/// All custom program instructions
pub enum ProgramInstruction {
    InitializeAccount,
    MintToAccount { key: String, value: String },
    TransferBetweenAccounts { key: String },
    BurnFromAccount { key: String },
    MintToAccountWithFee { key: String, value: String },
    TransferBetweenAccountsWithFee { key: String },
    BurnFromAccountWithFee {","[-3.15211453e-02  4.18473408e-02 -7.81359598e-02 -1.92682408e-02
 -9.40210968e-02 -7.52856582e-02  1.45620899e-02  8.74638185e-02
 -1.13194296e-03 -2.09536366e-02  1.46190980e-02 -1.76771171e-02
 -9.95172281e-03 -1.63144525e-02  7.01666772e-02 -2.55934484e-02
 -2.30750032e-02 -4.89604101e-02 -1.09052621e-02 -1.61771327e-02
  5.07784784e-02  5.11694551e-02  5.04864752e-02  7.07182288e-02
  3.56887877e-02 -1.52323702e-02 -3.64022865e-03  4.53719422e-02
 -1.27314534e-02  3.81232761e-02  5.80822229e-02  2.63987966e-02
 -1.40538039e-02  2.42719240e-03  8.18969682e-02  1.39004976e-01
 -7.77031714e-03 -5.63511252e-02  8.32308233e-02 -8.11320022e-02
 -2.65744906e-02  7.09629804e-03 -1.27070650e-01  1.88931488e-02
  1.70353185e-02 -1.83392502e-02  5.04216598e-03  3.77030522e-02
 -2.23308560e-02 -2.42982749e-02  1.32500380e-03  9.14179012e-02
  1.22538228e-02  4.00857367e-02 -4.76031192e-02 -1.61690209e-02
  4.79858834e-03  2.65998933e-02  3.17076966e-02  1.66836102e-02
 -4.75048907e-02  2.69925725e-02  3.23116891e-02 -9.62000224e-04
 -6.90999776e-02  7.07194814e-03 -7.22000301e-02 -1.70607958e-02
  1.87920481e-02  4.50061448e-03  4.50252406e-02 -1.10261939e-01
 -1.29759371e-01  3.03256828e-02 -4.43480760e-02 -4.28745225e-02
  5.65642230e-02  8.79176706e-03 -8.03550556e-02 -3.14154290e-02
 -2.35258639e-02 -4.19852324e-02 -1.44400634e-02  5.44150397e-02
 -6.94620311e-02 -6.00079782e-02 -1.02585983e-02  3.72313634e-02
  3.09523242e-03 -1.08838947e-02  7.21015856e-02 -1.59573350e-02
 -2.08158679e-02 -7.05983266e-02  7.30813220e-02  1.72173418e-02
  3.69303077e-02 -3.09050158e-02 -2.02291571e-02  3.49546298e-02
  2.60671228e-02 -9.68606211e-03  1.35765048e-02  3.10866479e-02
  6.31217584e-02  3.32025066e-02  6.67775199e-02  3.21947923e-03
 -5.08223027e-02 -2.68260408e-02  2.80900160e-04  6.78930655e-02
 -2.37959251e-02 -2.54572574e-02 -1.51670659e-02  9.31679904e-02
 -6.86039627e-02  1.24243703e-02 -4.36817147e-02  3.71272489e-02
  1.27696052e-01 -3.19256745e-02 -5.44135943e-02  3.61343324e-02
 -9.30215269e-02 -6.63139522e-02 -5.05111041e-03  1.19480339e-32
 -6.95803985e-02 -3.61188799e-02  4.54378873e-02 -4.27543484e-02
 -1.99577529e-02  1.41668618e-02  8.32407549e-02  1.08293863e-02
 -4.02662754e-02 -4.48619248e-03 -1.07991956e-01 -5.99396676e-02
 -6.20609708e-03  2.28784271e-02 -8.44523609e-02  3.85792111e-03
 -4.14736420e-02  4.31968272e-02  1.61469921e-01  8.88873786e-02
  6.01317883e-02 -2.90351454e-02 -6.14337102e-02  1.59479100e-02
 -5.55656515e-02  7.60911182e-02 -1.03887141e-01 -6.70278817e-02
 -4.66064513e-02  2.09571607e-02 -1.18338903e-02  9.20892507e-03
 -2.78715789e-02 -3.95821109e-02  1.78275947e-02 -1.19906351e-01
 -3.78184393e-02 -3.63383740e-02 -6.08591065e-02 -8.34405720e-02
  4.67046350e-02  7.18184456e-05 -7.63209760e-02  3.11807357e-02
 -2.70618256e-02 -6.62484486e-03 -6.04980029e-02  7.65699446e-02
  3.73636298e-02  6.34744614e-02 -1.17192958e-02 -1.97760519e-02
  3.92953828e-02 -9.72684659e-03  5.65712005e-02 -2.74362359e-02
  5.91242798e-02  7.48956390e-03  5.78723382e-03 -3.11501436e-02
  3.95802315e-03  1.68621354e-02 -1.77903045e-02 -2.33702846e-02
  6.79471716e-02 -1.27928788e-02 -3.41227762e-02  3.59606110e-02
 -4.96497974e-02  4.19918187e-02 -8.63753483e-02  7.77420402e-02
 -2.33146548e-02  4.17382494e-02  8.03272985e-03 -1.44494940e-02
  4.72184978e-02 -4.90185358e-02  2.13515181e-02 -4.08285521e-02
  9.03980434e-03  8.57764557e-02 -4.08379957e-02 -1.17070442e-02
 -8.88283271e-03  9.90258828e-02  9.61586658e-04  1.31690009e-02
 -5.92041723e-02  3.03493869e-02 -1.85203375e-04 -8.90945718e-02
 -3.38527188e-02 -2.36654356e-02 -9.36891213e-02 -1.38128962e-32
  1.88129004e-02 -9.19340702e-04  3.69167216e-02 -4.76957904e-03
 -4.17483859e-02  1.37027325e-02  3.14069656e-03  8.13607220e-03
 -2.94797458e-02  4.87070195e-02 -3.28322500e-02 -3.15206386e-02
 -3.69409062e-02  2.28407569e-02  6.21615797e-02  3.95898297e-02
 -7.72067085e-02  5.48608489e-02  2.89891064e-02  6.60552084e-03
 -3.49973328e-02  5.23933098e-02  1.54462159e-02  2.07159091e-02
 -4.65820357e-02 -3.16991843e-02 -4.67551462e-02  8.58216509e-02
  3.94353233e-02  2.11684089e-02  1.41351549e-02  4.03510295e-02
 -2.57346388e-02  1.22742496e-01  2.59017870e-02 -4.20629531e-02
  8.22829008e-02  6.10842742e-02  2.26066224e-02  1.92016677e-03
  4.22161259e-02  9.81013663e-03 -7.30316713e-02  4.63205464e-02
  5.73880933e-02 -5.03356420e-02 -4.59872931e-03  4.96839397e-02
  1.17541887e-02 -2.54133102e-02  4.41443846e-02  5.12558268e-03
 -6.72922656e-02  2.52538081e-02 -3.37196626e-02 -2.53095441e-02
  1.33811921e-01 -6.38536960e-02  2.02844925e-02 -1.40568107e-01
 -8.29384848e-03 -3.92787680e-02  4.88375537e-02  3.19126844e-02
  6.51254877e-02 -7.88939074e-02 -5.19225895e-02  2.46550292e-02
 -4.61051986e-02 -2.98285000e-02  2.19255444e-02 -5.93934730e-02
  5.14055118e-02  9.10110865e-03  8.45463276e-02  8.25308114e-02
 -7.07534105e-02 -4.05436829e-02  1.42325275e-02  7.01213628e-02
 -1.17768459e-02  3.30819413e-02  4.26628627e-02  5.28619736e-02
 -5.15379123e-02 -6.12712651e-02  2.21609641e-02  8.66090134e-02
 -4.25908901e-02 -2.13606860e-02  1.24700610e-02  1.48603348e-02
  1.50034735e-02 -9.92318150e-03  5.04523925e-02 -6.42612505e-08
 -2.68550199e-02 -1.09326400e-01 -4.00914438e-02  7.25601912e-02
  4.41839918e-02  9.86662954e-02 -9.41896886e-02 -9.77539420e-02
  1.22624328e-02 -5.50262146e-02 -4.88499589e-02 -2.49690283e-02
 -6.38568625e-02 -4.17602211e-02 -4.72596325e-02  5.04123457e-02
 -3.98820080e-02  2.19366257e-03 -1.65112526e-03 -4.03948314e-02
  4.70096543e-02 -4.99586649e-02  1.55252172e-02 -6.56736791e-02
  3.59430304e-03 -3.94971967e-02  9.72400885e-03  1.16962314e-01
  5.69666596e-03 -1.05952285e-01  5.73776253e-02 -7.96860233e-02
  4.13432643e-02 -3.68212759e-02 -1.03652198e-02 -3.15447040e-02
  4.59120721e-02 -2.60944776e-02  4.47982177e-03  2.23417282e-02
 -6.17078431e-02 -7.55178742e-03 -1.17518835e-01 -8.31186678e-03
  3.63086537e-02  1.46421203e-02 -9.98621583e-02  6.12283088e-02
  2.80817915e-02  1.91352069e-02 -8.53682682e-03 -8.00196007e-02
  1.13920094e-02 -1.62906442e-02 -4.41152863e-02 -7.44007975e-02
 -5.77757806e-02 -1.59229375e-02  5.74012622e-02 -3.67569327e-02
  6.38115555e-02  1.12919010e-01  4.46911603e-02 -7.37240985e-02]"
"key: String },
}

/// Generic Payload Deserialization
#[derive(BorshDeserialize, Debug)]
struct Payload {
    variant: u8,
    arg1: String,
    arg2: String,
}

impl ProgramInstruction {
    /// Unpack inbound buffer to associated Instruction
    /// The expected format for input is a Borsh serialized vector
    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {
        let payload = Payload::try_from_slice(input).unwrap();
        match payload.variant {
            0 => Ok(ProgramInstruction::InitializeAccount),
            1 => Ok(Self::MintToAccount {
                key: payload.arg1,
                value: payload.arg2,
            }),
            2 => Ok(Self::TransferBetweenAccounts { key: payload.arg1 }),
            3 => Ok(Self::BurnFromAccount { key: payload.arg1 }),
            4 => Ok(Self::MintToAccountWithFee {
                key: payload.arg1,
                value: payload.arg2,
            }),
            5 => Ok(Self::TransferBetweenAccountsWithFee { key: payload.arg1 }),
            6 => Ok(Self::BurnFromAccountWithFee { key: payload.arg1 }),
            _ => Err(SampleError::DeserializationFailure.into()),
        }
    }
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#  Làm thế nào để tuần tự hoá dữ liệu Account trên ProgramMột khối dữ liệu Account của Program (từ repo mẫu) được sắp xếp như sau:Byte 0Bytes 1-4Bytes còn lại (lên đến 1019)Cờ khởi tạoĐộ dài của BTreeMap đã được tuần tự hoáBTreeMap (nơi lưu trữ các cặp key-value)# Pack (Đóng gói)Từ Packopen in new window ở đây có nghĩa là một Trait (Đặc điểm) trong Rust.Pack giúp quá trình tuần tự và phi tuần hoá ẩn đi những chi tiết phức tạp bên dưới, đồng thời cung cấp tính dễ đọc cho quá trình xử lý các chỉ thị trong Program. Thay vì đặt tất cả các đoạn mã tuần tự và phi tuần tự hoá trực tiếp trong quá trình xử lý của Program, chúng nên được trừu tượng hoá và đóng gói lại thành những hàm chức năng (3):unpack_unchecked - Cho phép bạn phi tuần tự hoá dữ liệu Account mà không quan tấm Account đã khởi tạo hay chứa. Nó khá hữu ích khi bạn cần xử lý hàm Initialization (chỉ mục 0).unpack - Gọi unpack_from_slice trong hiện thực Pack của bạn và kiểm tra xem Account đã được khởi tạo","[-6.05820268e-02  4.22042981e-02 -1.58706438e-02 -3.67393345e-02
 -3.60817760e-02 -7.73665234e-02  1.93435587e-02  7.89536908e-02
 -4.58245836e-02 -6.32634237e-02 -1.53007824e-02 -5.22733666e-02
 -8.79474059e-02  2.66266875e-02  8.51330459e-02  6.47405861e-03
 -4.81465831e-02 -4.00036834e-02 -4.06592600e-02 -9.07879230e-03
  9.07423496e-02  7.90507868e-02 -2.51316000e-02  8.44573379e-02
 -2.54507009e-02  9.54328664e-03  8.30271095e-03  5.46245603e-03
  3.88562195e-02 -3.75390016e-02  9.60464701e-02  7.69920647e-03
 -1.19246226e-02  7.13378787e-02  4.25905883e-02  1.16527103e-01
  1.08484738e-02 -6.68341294e-02  1.65353809e-02 -8.03889483e-02
 -3.79064167e-03  7.58406967e-02 -1.10134162e-01  1.40172280e-02
  2.89632902e-02 -3.26481201e-02 -1.81437861e-02  2.81423330e-02
  1.76148023e-02  4.65124799e-03  6.50285324e-03  6.32942468e-02
 -2.16138493e-02  9.71137658e-02  5.20065762e-02  2.42102314e-02
 -2.98407357e-02  3.48667405e-03  3.11823823e-02  1.74189992e-02
 -8.05854648e-02 -2.27243751e-02  4.28678468e-02 -6.10603727e-02
 -2.50383448e-02  4.18689996e-02  2.08020937e-02  1.71779320e-02
  1.76832378e-02  1.10239210e-02  4.58204485e-02 -8.26866999e-02
 -6.78098649e-02  4.32951264e-02 -1.15684746e-02  6.15031496e-02
 -5.68521302e-03  1.99405812e-02 -5.41617051e-02 -5.59634939e-02
 -3.81160900e-02 -3.12927775e-02 -1.97205525e-02  7.27580264e-02
 -3.19787264e-02  6.18783496e-02 -3.47792283e-02 -4.97461297e-02
  5.69219403e-02  4.41277102e-02 -2.57942863e-02 -4.40128036e-02
 -6.30703568e-03  3.51470225e-02  6.32331967e-02 -1.40083702e-02
  7.61876032e-02 -3.05232108e-02 -2.42543756e-03  8.79603028e-02
 -5.93724623e-02  1.05715608e-02  4.27043065e-02 -9.51128663e-04
 -8.54167342e-03 -1.86159927e-02  2.09645797e-02 -2.26444677e-02
 -7.68333972e-02  2.44668336e-03  9.24039353e-03  6.86219633e-02
  2.98614930e-02 -1.47605119e-02 -4.64147702e-02  2.69373525e-02
 -6.09107986e-02 -1.47686759e-02  7.65409041e-03  1.70051903e-02
  8.27384964e-02  1.29557885e-02 -1.05295284e-02  7.70882741e-02
 -7.81498998e-02 -8.52919444e-02  6.87963096e-03  9.20643061e-33
 -7.13266581e-02  2.72765732e-03 -3.69781591e-02  1.62140802e-02
 -2.21292935e-02 -3.86083275e-02  6.25618994e-02  6.65695444e-02
 -5.21665066e-02 -1.44467112e-02 -8.53262693e-02 -4.46425118e-02
 -1.50851104e-02  3.43601778e-02  3.70389149e-02 -4.73642200e-02
  3.15394886e-02  5.46024702e-02  8.78710225e-02  8.16347450e-02
  8.55864361e-02  1.98198911e-02 -9.06345621e-02 -7.85932019e-02
 -3.01405825e-02  3.03117000e-02 -3.14945802e-02 -5.90288304e-02
 -3.90415516e-04  1.72270350e-02  2.18883511e-02 -3.54432408e-03
  4.10373919e-02 -3.35200243e-02  4.67962995e-02 -1.05089910e-01
 -2.33623926e-02  2.40663756e-02 -1.26052976e-01 -4.61500809e-02
  1.20600812e-01  2.18222719e-02 -6.24356270e-02  3.49040292e-02
  4.61167917e-02 -9.51092914e-02 -8.35580006e-03 -3.51525657e-02
  3.03164739e-02 -4.87656854e-02  4.76824678e-02  2.64516119e-02
 -9.83365346e-03 -6.07211851e-02  4.86509092e-02 -9.39281955e-02
  5.15664443e-02 -8.35181307e-03  4.20357473e-02  3.85298692e-02
 -2.88388971e-02  9.11610499e-02 -3.29750986e-03  1.03784092e-02
  2.66020484e-02 -6.56035636e-03 -7.41947368e-02 -7.99408276e-03
  8.45905766e-03 -1.35988686e-02 -5.92839904e-02  3.40164974e-02
 -7.10635483e-02  2.18094867e-02 -7.13105276e-02 -1.58401635e-02
  3.00709829e-02 -2.25391183e-02  4.72386815e-02 -8.88296589e-02
 -3.17277759e-02  4.52538878e-02 -2.37737242e-02  7.41503164e-02
 -6.30116686e-02  5.23419678e-02  2.88488134e-03 -9.93893072e-02
 -3.46777439e-02  4.67363074e-02 -3.68211456e-02 -1.06840312e-01
 -7.56456926e-02 -1.03552483e-01 -4.50640097e-02 -9.41539310e-33
  7.30251297e-02  1.68527551e-02 -2.39521079e-03  7.22832233e-03
 -6.13348186e-02  2.63779284e-03  3.47825997e-02  4.14906964e-02
 -8.99826642e-03  2.04325113e-02 -7.86726326e-02  6.22684462e-03
  4.74226736e-02 -5.34457760e-03 -3.49121098e-03  1.23099273e-03
 -8.99973586e-02 -7.37464577e-02  1.98089220e-02  1.62816998e-02
 -1.89477392e-02  4.05627862e-03  3.62992696e-02  1.95709318e-02
 -3.74273397e-02  5.01173139e-02  3.10337190e-02  8.20107982e-02
  7.30971843e-02  1.26905516e-02  1.13793630e-02  3.51860281e-03
 -7.39424839e-04  3.42250019e-02 -2.81864349e-02  3.87991569e-03
  7.37795383e-02  1.11944713e-01  5.19988476e-04 -3.21186334e-02
  2.12218743e-02  1.84364710e-02 -1.16607055e-01  5.68550499e-03
 -4.01558094e-02  4.23025861e-02  7.09190145e-02  6.98895454e-02
  9.07713268e-03  4.79228422e-03  1.05420798e-01 -2.37021479e-03
 -6.87071607e-02 -6.08290872e-03 -3.56786661e-02 -6.40651658e-02
  1.04381740e-01 -9.81769785e-02  1.45264892e-02 -4.00099680e-02
  2.40339320e-02 -5.33385240e-02  5.84620833e-02 -4.32155607e-03
  1.05210543e-01 -8.56907666e-02 -4.39183787e-02 -3.71089019e-02
 -4.07252125e-02 -1.75938662e-02  1.98738333e-02  3.84056079e-03
  9.21740476e-03 -2.40150914e-02  1.16762951e-01  3.14498879e-02
 -8.34959820e-02 -6.80001080e-02  5.74080348e-02  4.68183793e-02
 -9.44960862e-02  5.96332876e-03 -8.66381731e-03  1.34600297e-01
  3.43338251e-02 -9.23046190e-03  2.61504054e-02  6.20829016e-02
 -4.26109955e-02  3.40316109e-02 -2.16311608e-02  2.22104900e-02
 -1.74831487e-02 -6.66145002e-03  3.88426147e-02 -5.83372106e-08
 -4.71689403e-02 -5.00656180e-02 -6.75099716e-02  8.99742469e-02
  4.97330120e-03  4.44591977e-03 -9.05323476e-02 -8.29927176e-02
  4.59973551e-02 -6.02932945e-02 -1.00853942e-01  3.41123790e-02
 -8.62831548e-02 -4.88720797e-02  1.04744509e-02  2.10268367e-02
  2.44606622e-06 -1.31910471e-02 -4.32711877e-02 -6.76347762e-02
  1.70633104e-02 -1.26926294e-02 -1.76136941e-02 -7.53312558e-02
  1.46671850e-02 -1.38665689e-02  3.82028706e-02  8.15057009e-02
  6.80698156e-02 -1.54807847e-02  5.48040830e-02 -2.81492621e-02
  7.39965290e-02 -8.40150379e-03  1.43263824e-02 -3.22995819e-02
  2.58803531e-03  4.24433276e-02  2.60340162e-02 -1.72877382e-03
  1.86418928e-02  5.26014082e-02 -1.21016420e-01 -3.42962379e-03
 -9.44981817e-03 -3.64887118e-02 -4.23221253e-02  6.83824345e-02
 -9.12648067e-03  4.80822623e-02  3.35207097e-02 -6.91502094e-02
 -6.36542868e-03  4.68500778e-02 -6.22285418e-02 -9.02173445e-02
 -3.61624286e-02 -9.37561840e-02  4.22876589e-02  2.32301690e-02
  1.05776176e-01 -6.00611418e-03  2.57829558e-02  1.74794644e-02]"
"hay chưa.pack - Gọi pack_into_slice trong hiện thực Pack của bạn.Dưới đây là một hiện thực Pack cho chương tình mẫu của chúng ta. Theo sau đó là đoạn code mẫu xử lý dữ liệu Account thực bằng Borsh.Rust Program//! @brief account_state manages account data

use crate::error::SampleError;
use sol_template_shared::ACCOUNT_STATE_SPACE;
use solana_program::{
    entrypoint::ProgramResult,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack, Sealed},
};
use std::collections::BTreeMap;

/// Maintains global accumulator
#[derive(Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    btree_storage: BTreeMap<String, String>,
}

impl ProgramAccountState {
    /// Returns indicator if this account has been initialized
    pub fn set_initialized(&mut self) {
        self.is_initialized = true;
    }
    /// Adds a new key/value pair to the account
    pub fn add(&mut self, key: String, value: String) -> ProgramResult {
        match self.btree_storage.contains_key(&key) {
            true => Err(SampleError::KeyAlreadyExists.into()),
            false => {
                self.btree_storage.insert(key, value);
                Ok(())
            }
        }
    }
    /// Removes a key from account and returns the keys value
    pub fn remove(&mut self, key: &str) -> Result<String, SampleError> {
        match self.btree_storage.contains_key(key) {
            true => Ok(self.btree_storage.remove(key).unwrap()),
            false => Err(SampleError::KeyNotFoundInAccount),
        }
    }
}

impl Sealed for ProgramAccountState {}

// Pack expects the implementation to satisfy whether the
// account is initialzed.
impl IsInitialized for ProgramAccountState {
    fn is_initialized(&self) -> bool {
        self.is_initialized
    }
}

impl Pack for ProgramAccountState {
    const LEN: usize = ACCOUNT_STATE_SPACE;

    /// Store 'state' of account to its data area
    fn pack_into_slice(&self, dst: &mut [u8]) {
        sol_template_shared::pack_into_slice(self.is_initialized, &self.btree_storage, dst);
    }

    /// Retrieve 'state' of account from account data area
    fn unpack_from_slice(src: &[u8]) -> Result<Self, ProgramError> {
        match sol_template_shared::unpack_from_slice(src) {
            Ok((is_initialized, btree_map)) => Ok(ProgramAccountState {
                is_initialized,
                btree_storage: btree_map,
            }),
            Err(_) => Err(ProgramError::InvalidAccountData),
   ","[-1.04053587e-01  7.54257366e-02 -9.54743102e-02 -3.02633923e-02
 -2.05841213e-02 -4.95181279e-03  4.09443937e-02  1.16567671e-01
 -4.25871573e-02 -3.27261351e-02  1.06360696e-01 -1.38264820e-01
 -1.53708598e-02 -7.23746493e-02  4.98626418e-02  1.04170348e-02
 -1.04455099e-01 -1.81382317e-02  2.75354460e-02 -5.41312546e-02
  6.51322864e-03 -1.57585740e-03 -6.85032830e-02  7.01517388e-02
 -7.15888198e-03  2.19099540e-02 -3.29630412e-02  1.66539960e-02
  2.07537487e-02 -2.47288886e-02  3.51196304e-02  5.25937639e-02
  6.28196225e-02  2.19281130e-02  1.14490695e-01  1.07846372e-01
 -5.96598387e-02 -9.32334065e-02 -7.69280046e-02 -5.70813157e-02
 -5.55786341e-02  7.48012662e-02 -7.14357570e-02 -2.79881917e-02
  5.69926910e-02 -3.42974775e-02  9.07104812e-04  1.30174877e-02
 -4.90003116e-02 -1.64731313e-02  2.86514661e-03  8.86856019e-02
  1.09324846e-02  1.41401552e-02  1.84674039e-02  2.97530983e-02
  3.67885530e-02 -9.70036350e-03 -9.79856821e-04 -1.91689283e-02
 -3.81054468e-02  1.62280668e-02 -4.53989208e-03 -5.45198731e-02
 -2.29651332e-02  1.37964664e-02 -3.55967805e-02  3.78126949e-02
 -3.37163499e-03  1.32654039e-02 -3.64134982e-02  8.36026203e-03
 -9.50358510e-02  5.81300482e-02 -6.00711294e-02  3.74581888e-02
 -1.16357086e-02 -8.61684419e-03 -1.61430389e-02 -3.28499600e-02
 -7.25353956e-02  7.05022812e-02  2.71049514e-02 -5.15558198e-02
  3.25427740e-03  5.69597483e-02 -4.58895750e-02 -6.66562244e-02
  4.05484512e-02  1.00922734e-02  8.53816569e-02 -1.34939700e-02
 -3.11029945e-02  1.07969455e-02  4.80015613e-02 -1.66076294e-03
  1.00631416e-01  2.94729490e-02 -1.92802120e-02  7.45132715e-02
 -1.73661411e-02  4.90468144e-02  5.79892956e-02 -3.61437611e-02
 -5.54077998e-02 -2.02192049e-02  5.42266443e-02 -4.78173643e-02
 -6.41318187e-02  2.21685506e-02 -3.37983221e-02  3.62917781e-02
 -1.21768983e-02 -9.26970318e-02  3.13139707e-02  2.14409828e-02
 -6.20888397e-02  1.85361281e-02 -2.49484573e-02  3.85860018e-02
  9.26661938e-02 -7.36123323e-03  2.34003961e-02  3.56613286e-02
 -2.96348073e-02 -2.84508094e-02  6.49441704e-02  1.35126308e-32
  1.96349658e-02 -8.45315158e-02 -7.19298571e-02  9.27676633e-02
  1.22698573e-02 -6.39382303e-02  1.04261404e-02  5.98516269e-03
 -1.25806943e-01  3.75232361e-02 -3.07468548e-02 -7.87624437e-03
 -8.48013312e-02  2.52448469e-02  5.51389419e-02 -7.01689497e-02
  4.54924330e-02 -1.88862495e-02  9.00759175e-02 -4.69803885e-02
  7.60247409e-02 -1.11442273e-02  1.10444771e-02 -2.09997911e-02
  4.38462272e-02  4.62364368e-02 -3.59484516e-02 -2.02336796e-02
 -4.29489054e-02  2.51892544e-02  1.90126449e-02 -3.60070467e-02
  1.23763811e-02 -3.40260975e-02  5.35406880e-02 -4.34256438e-03
 -2.91364063e-02  6.21861639e-03 -9.28465426e-02 -3.63152474e-02
  1.20617732e-01  2.64047589e-02  4.57217507e-02  3.11423410e-02
  1.71971861e-02 -5.30146845e-02 -6.36051781e-03  2.62644067e-02
  2.31637917e-02 -1.85792577e-02 -2.83168126e-02  4.56012972e-03
 -1.14569865e-01  3.71859446e-02 -1.50412004e-02 -7.99338520e-02
  2.61146594e-02 -8.03064276e-03  4.69306409e-02  4.00248021e-02
  5.66284591e-03  8.25553909e-02  2.22668014e-02  5.26449978e-02
 -2.54319496e-02 -3.83527018e-02 -7.46115148e-02  2.50720736e-02
  4.81798053e-02  1.05180554e-02 -3.63824405e-02 -9.48268175e-03
 -7.59990960e-02  2.52680182e-02  1.82843897e-02 -1.06828250e-01
  1.00991495e-01 -2.85728406e-02 -4.42762710e-02 -7.12190568e-02
 -3.58403884e-02 -7.57372230e-02 -3.12391762e-02 -3.72743085e-02
 -9.41029564e-02  4.17317264e-03  2.40388867e-02  1.10716177e-02
 -2.82938667e-02 -5.18627837e-02 -1.01177823e-02 -2.81565953e-02
  6.45145550e-02 -3.82960662e-02 -1.78208761e-02 -1.37246165e-32
  6.19407818e-02 -5.73235527e-02  5.82899116e-02 -6.97307214e-02
 -6.39530845e-05  2.02385662e-03  4.08987806e-04 -4.05047387e-02
 -3.17728668e-02 -1.72765870e-02 -8.68261755e-02  2.38083061e-02
  5.96575029e-02  5.81540465e-02  1.09438084e-01  6.94320872e-02
 -2.44040359e-02 -2.21614186e-02 -3.88984457e-02  7.22552910e-02
 -1.14169478e-01  2.33401917e-02  3.16811539e-02 -7.52093270e-03
  5.07134805e-03  1.75844487e-02 -2.08023228e-02  1.78887006e-02
  6.99624568e-02  1.90658644e-02  4.04444821e-02 -2.64800377e-02
 -1.11638881e-01  7.75274560e-02 -5.18027768e-02 -1.09302439e-01
  5.16837090e-02  4.29246910e-02 -4.75876890e-02  4.36049402e-02
  1.10208020e-01 -1.84772015e-02 -1.11822121e-01  3.47237550e-02
 -1.81467906e-02  1.58959888e-02  4.48177904e-02  4.70148679e-03
 -9.90552362e-03 -3.63213494e-02  5.11983223e-02 -3.45952138e-02
  3.16501893e-02  1.96768809e-02  9.93173383e-03  9.58945230e-03
  5.37800789e-02 -8.03431422e-02 -4.11460772e-02 -7.06080049e-02
  3.12969461e-02 -5.88305518e-02 -2.02171728e-02 -5.39773330e-02
  4.66650240e-02 -6.10886849e-02 -3.85640413e-02  6.59464970e-02
 -2.51162536e-02 -4.71326709e-02  1.31681887e-02  1.92160979e-02
  1.85157172e-02 -1.84162725e-02 -2.90254951e-02  1.56467948e-02
 -4.02042791e-02  5.49111925e-02  6.39888123e-02  1.45639712e-02
 -1.13641135e-01  4.51246416e-03  4.71383426e-03  1.09273382e-02
  8.98075011e-03 -7.98502415e-02  6.33258820e-02  2.15249080e-02
 -2.75909938e-02 -2.42964830e-02 -2.45922543e-02  1.57805756e-02
  1.06957471e-02  1.16532385e-01  1.89149976e-02 -6.78589345e-08
 -8.68558511e-02 -1.04183316e-01 -4.82734181e-02  5.91401383e-02
  8.93605947e-02 -9.59071051e-03 -1.83517355e-02 -8.57837275e-02
 -2.02540830e-02 -4.18632738e-02 -1.09524140e-02  8.42784345e-02
 -9.06942785e-02 -9.20060202e-02 -1.28397066e-02  2.46271789e-02
 -4.29977104e-02  6.51540756e-02 -9.00977757e-03 -5.61119523e-03
  4.76349071e-02  1.30487664e-03  1.23044904e-02 -1.98933622e-03
 -6.05311804e-02  1.62004679e-02  2.40182187e-02  7.09914565e-02
  9.10654739e-02 -1.45427417e-02  7.59225860e-02 -7.40699051e-03
  7.22895190e-02  1.67455785e-02  9.01383683e-02  4.30185311e-02
  4.24796864e-02  6.45452812e-02  3.35576315e-03  1.26030277e-02
 -4.75688986e-02  2.77529340e-02 -9.86187905e-03 -2.08962001e-02
 -8.78455117e-02 -2.34584399e-02 -7.36823827e-02  2.14153919e-02
  8.68420154e-02  2.34556030e-02 -6.48439601e-02 -3.48630473e-02
  1.98543463e-02  1.17462017e-01  1.54624674e-02 -1.23031940e-02
 -1.22003704e-02 -3.81396115e-02  9.73431021e-03  6.23794785e-03
 -8.82434007e-03 -6.04755990e-02  1.29466376e-03  3.84087339e-02]"
"    }
    }
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# Tuần tự hoá và Phi tuần tự hoáĐể hoàn thành các hàm tuần tự và phi tuần tự hoá cơ sở:sol_template_shared::pack_into_slice - Điểm thực sự diễn ra quá trình tuần tự hoásol_template_shared::unpack_from_slice - Điểm thực sự diễn ra quá trình phi tuần tự hoáLưu ý rằng trong code mẫu bên dưới, chúng ta có một vùng nhớ 4 bytes cho u32 dành cho BTREE_LENGTH ngay trước BTREE_STORAGE. Việc này giúp Borsh, trong quá trình phi tuần tự hoá, có thể kiểm tra độ lớn của vùng nhớ mà nó cần phải trích xuất để xử lý, cũng như tái tạo lại đối tượng đã được tuần tự hoá trước đây. Phương pháp này được minh hoạ bên dưới khi mà BTREE_LENGTH được đọc trước tiên nhằm lấy được kích thước của slice ra khỏi con trỏ BTREE_STROAGE.Rust Programuse {
    arrayref::*,
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::program_memory::sol_memcpy,
    std::{collections::BTreeMap, error::Error},
};

/// Initialization flag size for account state
pub const INITIALIZED_BYTES: usize = 1;
/// Storage for the serialized size of the BTreeMap control
pub const BTREE_LENGTH: usize = 4;
/// Storage for the serialized BTreeMap container
pub const BTREE_STORAGE: usize = 1019;
/// Sum of all account state lengths
pub const ACCOUNT_STATE_SPACE: usize = INITIALIZED_BYTES + BTREE_LENGTH + BTREE_STORAGE;

/// Packs the initialized flag and data content into destination slice
#[allow(clippy::ptr_offset_with_cast)]
pub fn pack_into_slice(
    is_initialized: bool,
    btree_storage: &BTreeMap<String, String>,
    dst: &mut [u8],
) {
    let dst = array_mut_ref![dst, 0, ACCOUNT_STATE_SPACE];
    // Setup pointers to key areas of account state data
    let (is_initialized_dst, data_len_dst, data_dst) =
        mut_array_refs![dst, INITIALIZED_BYTES, BTREE_LENGTH, BTREE_STORAGE];
    // Set the initialized flag
    is_initialized_dst[0] = is_initialized as u8;
    // Store the core data length and serialized content
    let keyval_store_data = btree_storage.try_to_vec().unwrap();
    let data_len = keyval_store_data.len();
    if data_len < BTREE_STORAGE {
        data_len_dst[..].copy_from_slice(&(data_len as u32).to_le_bytes());
        sol_memcpy(data_dst, &keyval_store_data, data_len);
    } else {
        panic!();
    }
}

/// Unpacks the data from slice and return the initialized flag and data content
#[allow(clippy::ptr_offset_with_cast)]
pub fn unpack_from_slice(src: &[u8]) -> Result<(bool, BTreeMap<String, String>), Box<dyn Error>> {
    let src = array_ref![src, 0, ACCOUNT_STATE_SPACE];
    // Setup pointers to key areas of account state data
    let (is_initialized_src, data_len_src, data_src) =
        array_refs![src, INITIALIZED_BYTES, BTREE_LENGTH, BTREE_STORAGE];

    let is_initialized = match is_initialized_src {
        [0] => false,
        [1] => true,
        _ => {
            return Err(Box::<dyn Error>::from(format!(
                ""unrecognized initialization flag \""{:?}\"".","[-7.48037025e-02  3.47129256e-02 -4.21329588e-02 -9.04488713e-02
 -5.38431704e-02  4.39291168e-03  3.48744616e-02  4.08589002e-03
  3.48780565e-02  2.49134768e-02  1.58581123e-01 -9.07878280e-02
 -4.73620780e-02 -4.40409034e-02  8.39126483e-03 -3.22689526e-02
 -8.49318057e-02  2.67262943e-02 -1.05286814e-01 -6.22540787e-02
  1.45926781e-04 -4.91755083e-03 -1.89421587e-02  4.35872527e-04
  2.76401322e-02  5.60773537e-02 -2.48941779e-02  7.92805031e-02
  2.56732758e-02 -1.14194594e-01  4.87265736e-02  1.42417341e-01
  2.43309941e-02  1.47161856e-02  1.35458812e-01  6.54275715e-02
 -5.43149225e-02 -1.02062941e-01  1.85735822e-02  1.90204885e-02
 -5.34301139e-02 -1.28295580e-02 -3.49009894e-02 -3.06639373e-02
  8.90886411e-02  3.36386589e-03 -7.00572506e-02  1.61090717e-02
  1.17987990e-02 -6.48020059e-02 -4.66900617e-02  1.05587676e-01
 -8.02804977e-02  1.34127632e-01 -8.10371861e-02 -3.01502198e-02
 -3.39885913e-02  3.57128568e-02  2.22090930e-02 -1.76026188e-02
 -4.84827980e-02  3.68503593e-02 -2.79526338e-02 -1.41956126e-02
 -7.36156153e-03 -2.80326959e-02 -8.99906754e-02 -1.50881959e-02
 -4.76597138e-02  1.01759963e-01 -2.64300443e-02  1.74857099e-02
 -9.87665579e-02  1.07198954e-01 -1.95447672e-02  3.74365412e-02
  8.92398134e-03 -6.65023876e-03 -2.95629762e-02 -7.76347518e-02
 -5.02433442e-02  4.67346609e-02  5.11138327e-02 -3.65362987e-02
 -1.29185803e-02  3.01203821e-02 -5.06586060e-02  6.31544366e-02
 -1.54054370e-02 -6.30465969e-02  7.20687136e-02  6.65638521e-02
  1.65282525e-02  3.82134169e-02 -6.17933013e-02 -5.24764247e-02
  6.21378236e-03  4.97763604e-02 -2.74368878e-02  2.36047637e-02
  3.53009999e-02  3.28037851e-02  3.33416052e-02 -7.47813955e-02
 -6.91075251e-02 -5.70716243e-03  1.02536745e-01  1.69556160e-02
  5.16944602e-02  2.32927799e-02 -4.98865247e-02 -2.75678653e-02
 -2.02466305e-02 -1.26697645e-01 -3.06613036e-02  3.93219525e-03
 -3.71792018e-02 -2.50452361e-03  2.31026597e-02  2.56920084e-02
  4.75546420e-02 -6.58759847e-02 -5.82447387e-02  8.95155687e-03
 -7.09422901e-02 -6.14936575e-02  6.10685088e-02  2.20146435e-32
  6.45001186e-03  6.25926331e-02  1.69051234e-02 -1.71166137e-02
  5.37362136e-02 -4.00374867e-02 -3.45662907e-02 -4.26550135e-02
 -1.18062235e-01  1.01251993e-02 -2.95085143e-02 -3.40623818e-02
 -5.66874892e-02 -2.41024047e-03  2.72004474e-02 -2.16786731e-02
  2.92874463e-02 -6.30074888e-02 -2.88437176e-02  2.60548610e-02
  5.92095926e-02 -1.38053077e-03  1.53798601e-02 -1.74136497e-02
 -7.18932133e-03 -2.12295465e-02 -3.16382386e-02 -9.00857598e-02
  4.82283114e-03  4.67735305e-02  5.82693480e-02 -1.13983639e-02
 -4.28072400e-02 -6.62106052e-02 -7.95895308e-02 -1.58335865e-02
 -2.96441037e-02 -1.52992709e-02 -7.62799457e-02 -2.88481778e-03
  5.96503839e-02 -4.38930374e-03  3.31982113e-02  2.84280777e-02
  1.65692307e-02  1.27139632e-02  4.55180034e-02 -1.03066452e-02
 -6.09345408e-03 -3.16320658e-02  1.20500999e-03 -2.55931374e-02
 -7.99806491e-02  7.43068382e-02  4.23379615e-02 -7.24489093e-02
  5.96564226e-02 -1.30653465e-02  6.55825436e-02  3.84693071e-02
  5.36640000e-04  2.31514871e-02  2.92749610e-02  6.50425032e-02
 -2.88982857e-02 -1.11962050e-01 -4.10163309e-03 -1.47937601e-02
  7.08032446e-03 -2.59388816e-02 -6.96476549e-02 -7.21779168e-02
  2.58983020e-02  3.64257433e-02 -3.92948426e-02 -8.58059525e-02
  5.33483438e-02 -6.75548092e-02 -1.11198314e-02 -2.46734526e-02
 -3.35992612e-02 -5.40309064e-02  2.73510739e-02 -8.41357335e-02
 -9.37272608e-03  1.01267612e-02  3.14340405e-02 -6.15080409e-02
 -3.32319215e-02 -8.89718160e-03 -5.00709526e-02  3.61344181e-02
  4.97764610e-02 -8.86064395e-02 -4.91501950e-02 -1.95703191e-32
  1.51495496e-03  4.65168282e-02 -5.07877618e-02  1.28693460e-02
 -2.28128936e-02 -5.13502322e-02  2.39170548e-02  1.84266195e-02
  8.51056352e-02 -1.19040804e-02 -2.94845793e-02 -4.90565561e-02
  3.05314679e-02  1.75055452e-02  7.34988526e-02  2.60368995e-02
  5.29308580e-02  3.22753750e-02  3.50600556e-02  4.79739718e-02
 -5.36578894e-02 -2.62421332e-02  5.51653188e-03  6.27481043e-02
 -1.36116007e-02  5.87640665e-02  4.72412780e-02  5.76069914e-02
  3.92531455e-02  4.64123823e-02 -2.92060053e-04 -7.72583634e-02
 -9.15896147e-02  8.28720182e-02 -1.15197860e-02 -4.41391990e-02
  4.12058085e-02  2.06154510e-02 -1.51035888e-02  6.30615279e-02
  1.79558422e-03 -3.44225317e-02 -2.05902569e-02 -2.16914387e-03
 -5.79982586e-02 -7.46101215e-02  5.34944534e-02 -2.99679395e-03
 -7.39727244e-02  4.41821199e-03  1.54242650e-01  7.76307061e-02
 -4.31296192e-02  3.59491399e-03  4.58064564e-02  6.63970113e-02
 -7.36422241e-02 -8.46175775e-02 -9.21275541e-02 -1.01360850e-01
  1.63512211e-02 -1.62202457e-03  1.75984632e-02 -7.66873509e-02
  9.45209637e-02 -1.43445069e-02 -7.87202641e-03  5.54016307e-02
 -3.58086103e-03 -4.13023047e-02 -2.75023505e-02  1.70724560e-03
 -4.95236516e-02 -6.19217567e-03 -2.36775558e-02  3.37417866e-03
 -5.30772507e-02  2.69190054e-02  3.36446092e-02  8.86550825e-03
 -1.40001744e-01 -1.61197968e-02 -6.51735521e-04  2.54779775e-02
 -9.61836055e-03  3.88242304e-02  3.55534232e-03  4.07814421e-02
 -6.89491397e-03 -8.23303219e-03  4.46215719e-02  3.23508829e-02
  1.28554508e-01  1.34627312e-01  1.64098851e-02 -6.00941945e-08
  5.64579968e-04 -9.31976140e-02 -1.60618722e-02 -3.90134491e-02
  5.42210191e-02 -5.10232449e-02  2.49528326e-02 -3.34215127e-02
 -1.64523367e-02 -8.46175756e-03  6.70838133e-02  3.49648111e-02
 -8.00558701e-02 -1.21514359e-02 -3.26558016e-02  9.17249918e-02
  5.15100174e-03  5.23873158e-02 -3.42077413e-03 -7.79264942e-02
  7.69421086e-02  3.56835201e-02  1.79028772e-02  1.38987238e-02
 -7.39999339e-02  8.22663233e-02 -1.42923789e-02  7.47105852e-02
 -1.10640214e-03 -4.35677953e-02  8.35513547e-02 -6.02692366e-02
  2.35922518e-03  1.37617742e-03  7.28327259e-02 -4.31096926e-02
  1.13908583e-02  5.22469031e-03 -2.25926712e-02  2.63601989e-02
  5.66823557e-02  1.54449390e-02 -2.15817671e-02  1.88810918e-02
  7.43784290e-03 -4.75467592e-02  4.76443358e-02 -1.55950319e-02
  6.43424038e-03 -2.24658549e-02 -6.63897581e-03 -1.62327196e-02
  9.10391379e-03  3.74461003e-02  2.22088546e-02 -3.18902209e-02
 -3.00512125e-04  6.02959618e-02  5.31889275e-02  2.68898513e-02
  2.68587489e-02  6.34779707e-02 -4.42998558e-02 -1.64806983e-03]"
"in account"",
                is_initialized_src
            )))
        }
    };
    // Get current size of content in data area
    let data_len = u32::from_le_bytes(*data_len_src) as usize;
    // If emptry, create a default
    if data_len == 0 {
        Ok((is_initialized, BTreeMap::<String, String>::new()))
    } else {
        let data_dser = BTreeMap::<String, String>::try_from_slice(&data_src[0..data_len]).unwrap();
        Ok((is_initialized, data_dser))
    }
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# Cách dùngSau đây, chúng ta sẽ tổng hợp lại tất cả các đoạn code mẫu bên trên và giải thích cách mà Program tương tác với ProgramAccountState. Trong đó, ProgramAccountState là đóng gói của trạng thái khởi tạo của Account cũng như BTreeMap cho các cặp key-value.Đầu tiên, để khởi tạo một Account mới hoàn toàn:Rust/// Initialize a new program account, which is the first in AccountInfo array
fn initialize_account(accounts: &[AccountInfo]) -> ProgramResult {
    msg!(""Initialize account"");
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Here we use unpack_unchecked as we have yet to initialize
    // Had we tried to use unpack it would fail because, well, chicken and egg
    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;
    // We double check that we haven't already initialized this accounts data
    // more than once. If we are good, we set the initialized flag
    if account_state.is_initialized() {
        return Err(SampleError::AlreadyInitializedState.into());
    } else {
        account_state.set_initialized();
    }
    // Finally, we store back to the accounts space
    ProgramAccountState::pack(account_state, &mut account_data).unwrap();
    Ok(())
}
1234567891011121314151617181920Sau đó, chúng ta có thể dùng chúng trong quá trình xử lý của các chỉ thị. Ví như minh hoạ bên dưới có thể tiếp nhận chỉ thị từ phía người dùng và gán một cặp key-value vào trong ProgramAccountState đã khởi tạo bên trên.Rust/// Mint a key/pair to the programs account, which is the first in accounts
fn mint_keypair_to_account(accounts: &[AccountInfo], key: String, value: String) -> ProgramResult {
    msg!(""Mint to account"");
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Unpacking an uninitialized account state will fail
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    // Add the key value pair to the underlying BTreeMap
    account_state.add(key, value)?;
    // Finally, serialize back to the accounts data
    ProgramAccountState::pack(account_state, &mut account_data)?;
    Ok(())
}
1234567891011121314# Làm thế nào để tuần hoá dữ liệu Account ở","[-3.32848802e-02  4.44077626e-02 -5.90197146e-02 -3.34553942e-02
 -7.19931200e-02 -8.31625834e-02  1.96207296e-02  9.13062915e-02
 -2.68383417e-02  1.00040678e-02  6.57458901e-02 -8.65770206e-02
 -6.34238645e-02 -2.81970464e-02 -1.76741239e-02 -1.95908230e-02
 -6.46767095e-02 -3.16116922e-02 -3.20317633e-02 -1.09671764e-01
  6.85856938e-02  2.37814728e-02 -5.22484770e-04 -1.55235445e-02
  6.11285530e-02  4.02953736e-02 -7.78332539e-03  7.29715526e-02
  5.13222329e-02 -5.14428653e-02  6.67516589e-02  3.09511088e-03
  8.19149315e-02  7.51234442e-02  1.24897674e-01  1.96747277e-02
 -3.23767252e-02 -1.08375221e-01  2.86281295e-03  6.67418018e-02
 -4.92552109e-02  7.26664886e-02 -9.76618305e-02 -8.39703437e-03
  5.33926785e-02  4.53281999e-02 -5.30358069e-02  3.44044827e-02
 -1.38603654e-02 -4.05306704e-02 -1.65847540e-02  4.94767800e-02
 -7.80256540e-02  6.63867220e-02  2.50710305e-02 -3.48150954e-02
  2.88319830e-02  2.27361526e-02  3.23304906e-02  5.63440062e-02
 -5.54847904e-02  1.60989165e-02  3.16808820e-02 -4.76893112e-02
  4.15178053e-02  1.27906539e-02 -6.09442964e-02  1.80358328e-02
 -4.68629459e-03  3.37245762e-02 -5.50878011e-02  4.08448167e-02
 -1.51210288e-02  1.36510134e-01 -1.07283697e-01 -7.55949095e-02
 -3.19043957e-02  3.32494639e-02  5.58149116e-03 -6.44787848e-02
 -6.62799999e-02 -1.30006010e-02  7.59989098e-02  5.32916933e-02
 -1.31540596e-02  7.15226680e-02 -3.05700433e-02  6.79186583e-02
  3.17436941e-02 -2.03864966e-02 -1.98736265e-02  1.31413331e-02
 -1.02257930e-01  6.08649217e-02 -1.58615559e-02  8.82486813e-03
  1.51942680e-02 -5.75466193e-02  5.18667372e-03  3.89148807e-03
  1.12176538e-02  2.37131417e-02  4.89270128e-02 -3.82093154e-03
 -4.93341796e-02 -5.82467951e-02  7.57773370e-02  1.81445424e-02
 -1.67799890e-02  7.13099986e-02  4.96227778e-02  5.52357882e-02
 -6.61099106e-02 -2.06705630e-02 -9.05179977e-03 -5.02584837e-02
 -5.33813722e-02 -1.65550727e-02 -7.13334829e-02  3.89917418e-02
  4.79872748e-02 -1.32108815e-02 -1.04590639e-01  1.58725176e-02
 -8.15372765e-02 -5.62839061e-02  1.14000067e-01  1.13152601e-32
  5.70259849e-03 -4.63967249e-02  4.84283231e-02  3.31713818e-02
 -5.05754575e-02 -3.25648277e-03 -4.79151420e-02  1.99908148e-02
 -9.04409736e-02  5.03713824e-02 -3.55543569e-02 -2.79483870e-02
 -7.61743635e-02 -2.76772119e-03  5.91953844e-02 -1.36922393e-03
 -2.65197572e-03 -8.42181034e-03 -2.49810033e-02 -4.02324945e-02
  8.28927159e-02  1.87317133e-02  2.11155717e-03 -8.85443687e-02
 -3.36197554e-03 -2.29344163e-02 -7.95088932e-02 -4.89917248e-02
 -3.87124121e-02  1.65356528e-02 -1.72217749e-02 -4.43152264e-02
 -5.29945157e-02 -3.72085050e-02  6.26168326e-02 -5.60900792e-02
  1.74186809e-03  2.89686956e-02 -1.01121411e-01  4.34701592e-02
  1.51259616e-01  4.00220603e-02  5.41604087e-02 -5.04738465e-02
 -3.75176221e-02 -1.42185083e-02  1.33433556e-02 -3.69289480e-02
  1.00781871e-02 -4.31469120e-02  6.21428713e-02  1.60538573e-02
 -4.00955714e-02  3.12500596e-02  7.68570378e-02 -7.40993321e-02
  4.53828759e-02 -7.24695399e-02  5.85427955e-02  6.73088357e-02
 -4.76306900e-02 -1.16874762e-02  3.23173441e-02  7.77853951e-02
  2.91123260e-02 -4.17065136e-02  5.24735190e-02  2.64159287e-03
 -2.26071477e-02 -7.51757473e-02 -3.32800001e-02 -7.94592947e-02
  5.62524460e-02  3.98152620e-02 -7.92638436e-02 -4.39048111e-02
 -1.63999069e-02 -3.12092751e-02 -8.98907557e-02 -4.15971540e-02
 -5.97246587e-02 -1.06316298e-01  1.82221401e-02 -7.15676621e-02
  2.25142459e-03  1.24390023e-02  4.34750207e-02 -6.99766502e-02
 -1.52519513e-02  1.50186010e-03 -8.92857984e-02 -4.98624295e-02
  1.35838566e-02 -8.63023773e-02 -2.15914864e-02 -1.11288179e-32
  9.28457826e-02  2.93328632e-02  2.42711734e-02  2.58376971e-02
 -6.99664503e-02 -3.05926576e-02  7.56072551e-02  8.97403657e-02
  1.39081720e-02 -1.79197844e-02 -5.93622997e-02  1.12819849e-02
  3.65323685e-02 -6.86966581e-03  6.04687892e-02  6.29753321e-02
 -4.48341146e-02  4.54105735e-02  1.91305969e-02  6.37222007e-02
 -2.51139160e-02 -3.41817588e-02  3.79505083e-02  4.24631834e-02
  4.77474444e-02  5.38397506e-02  5.52724525e-02  3.25917415e-02
  4.10891771e-02 -4.35330831e-02 -9.60423518e-03 -4.12663370e-02
 -1.76781695e-02  2.41081528e-02 -3.60676162e-02 -8.54245573e-02
  8.93064961e-02  4.83693592e-02  1.05247898e-02  7.63823986e-02
  5.80217354e-02  9.33919568e-04 -1.19133897e-01 -2.21063066e-02
 -4.11115736e-02 -4.59311344e-03  3.50225791e-02  8.50474164e-02
 -2.88988501e-02 -6.89625219e-02  6.63572103e-02 -2.04714686e-02
  3.63578759e-02 -7.61986012e-03  4.12433408e-02  3.55155542e-02
 -8.79161339e-03 -1.88454632e-02 -6.30793795e-02 -9.23743472e-02
 -3.77851608e-03 -6.33091554e-02  1.13948667e-02 -8.56585503e-02
  6.45719171e-02 -5.47143212e-03 -5.56720607e-02 -5.53490035e-03
 -7.29678851e-03 -5.12687750e-02  2.60598958e-02 -1.43371448e-02
 -2.57312227e-02 -2.34050676e-02 -9.62995067e-02  1.73226669e-02
 -3.58715132e-02  1.11292396e-02  7.04705343e-02  5.60189709e-02
 -4.13469337e-02  6.61892667e-02  4.97230235e-03  1.81817580e-02
  7.17538297e-02  7.91270807e-02 -3.65634891e-03 -3.90464067e-02
 -3.47125839e-04 -2.57145073e-02 -8.09351653e-02  3.12798359e-02
  2.05874369e-02  1.16997175e-01 -4.53962432e-03 -5.81226409e-08
 -5.01983427e-02 -1.01205148e-01 -2.29048971e-02  5.79062402e-02
  1.92305166e-02 -5.24050221e-02 -6.15999848e-03  2.22019316e-03
  1.57285891e-02 -8.58010799e-02  4.15837839e-02  7.57927820e-02
 -5.70219755e-02 -1.76730826e-02 -1.49560990e-02  8.33720714e-03
  5.31767011e-02 -4.23526205e-02  7.33235525e-03  3.19725927e-03
  3.49097289e-02  2.10567731e-02 -1.32321548e-02  2.58260849e-03
 -5.25764248e-04  2.05518715e-02 -3.15625221e-02  9.35928524e-02
  3.27305496e-02 -3.89740616e-02  1.17530331e-01 -4.28582542e-02
  5.90697341e-02  5.90659082e-02  3.38545665e-02 -4.72899526e-02
  2.35026721e-02  9.98464879e-03  2.09245998e-02 -6.03959784e-02
  8.69313255e-02  6.09889627e-02 -2.97922501e-03 -7.79137854e-03
 -1.46508934e-02 -3.18350531e-02  7.10996846e-03  4.51829582e-02
  7.30125308e-02  1.34056332e-02 -1.18626524e-02 -1.46395676e-02
 -7.49934614e-02  3.37698944e-02  1.03596170e-02 -2.85694636e-02
 -4.20450745e-03  2.15632580e-02 -9.15902480e-02  9.92107093e-02
 -2.69080456e-02  2.58329213e-02 -9.03420430e-03 -2.52721943e-02]"
"phía người dùngNgười dùng có thể gọi Solana để lấy dữ liệu dưới dạng các khối dữ liệu đã được tuần tự hoá. Quá trình phi tuần tự hoá dữ liệu này cần người dùng phải hiểu được cấu trúc của dữ liệu gốc.Cấu trúc của dữ liệu Account được định nghĩa ở đâyTSPythonRustimport { serialize, deserialize, deserializeUnchecked } from ""borsh"";
import { Buffer } from ""buffer"";
import {
  Keypair,
  AccountMeta,
  Connection,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
  sendAndConfirmTransaction,
} from ""@solana/web3.js"";

// Flexible class that takes properties and imbues them
// to the object instance
class Assignable {
  constructor(properties) {
    Object.keys(properties).map((key) => {
      return (this[key] = properties[key]);
    });
  }
}

export class AccoundData extends Assignable {}

const dataSchema = new Map([
  [
    AccoundData,
    {
      kind: ""struct"",
      fields: [
        [""initialized"", ""u8""],
        [""tree_length"", ""u32""],
        [""map"", { kind: ""map"", key: ""string"", value: ""string"" }],
      ],
    },
  ],
]);

/**
 * Fetch program account data
 * @param {Connection} connection - Solana RPC connection
 * @param {PublicKey} account - Public key for account whose data we want
 * @return {Promise<AccoundData>} - Keypair
 */
export async function getAccountData(
  connection: Connection,
  account: PublicKey
): Promise<AccoundData> {
  let nameAccount = await connection.getAccountInfo(account, ""processed"");
  return deserializeUnchecked(dataSchema, AccoundData, nameAccount.data);
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253from borsh_construct import CStruct, U8, U32, HashMap, String
from solana.rpc.commitment import Confirmed
from solders.pubkey import Pubkey
from solana.rpc.api import Client


# Schema to deserialize program's account data
account_schema = CStruct(
    ""initialized"" / U8,
    ""map_length"" / U32,
    ""map"" / HashMap(String, String)
)


def get_account_info(client: Client, account_pk: Pubkey):
    """"""Fetch account information from RPC, parse out the data and deserialize""""""
    res = client.get_account_info(account_pk, Confirmed, encoding='base64')
    return account_schema.parse(res.value.data)

# Results in or similar
# => Container:
# =>     initialized = 1
# =>     map_length = 109
# =>     map = {'Happy': 'New Year!', 'newKey': 'A new value',
# =>            'python key': 'python value', 'ts key': 'ts first value'}
12345678910111213141516171819202122232425use {
    arrayref::*,
    borsh::{BorshDeserialize, BorshSerialize},
    std::{collections::BTreeMap, error::Error},
};

#[allow(clippy::ptr_offset_with_cast)]
pub fn unpack_from_slice(src: &[u8]) -> Result<(bool, BTreeMap<String, String>), Box<dyn Error>> {
    let src = array_ref![src, 0, ACCOUNT_STATE_SPACE];
    // Setup pointers to key areas of account state data
    let (is_initialized_src, data_len_src, data_src) =
        array_refs![src, INITIALIZED_BYTES, BTREE_LENGTH, BTREE_STORAGE];

    let is_initialized = match is_initialized_src {
        [0] => false,
        [1] => true,
        _ => {
            return Err(Box::<dyn Error>::from(format!(
   ","[-5.69326691e-02  4.20805402e-02 -1.03452168e-01 -7.22052306e-02
 -1.23798363e-01 -6.27857745e-02  9.80168730e-02  4.53979746e-02
  6.08013235e-02 -1.24868020e-04  7.42752776e-02 -5.88409863e-02
 -7.23653808e-02 -5.39498031e-02  8.82395133e-02 -1.92550998e-02
 -5.78339249e-02  1.70678701e-02 -1.02629580e-01  2.02316996e-02
  6.72804788e-02 -4.49139364e-02 -3.50881442e-02  5.40316384e-03
 -9.76951569e-02  1.01301353e-02  4.54578511e-02 -1.91176217e-02
 -6.19180724e-02 -4.31722887e-02  1.46613522e-02  1.04505457e-02
 -6.85599148e-02 -2.70445757e-02 -2.70254747e-03  8.73655081e-02
  3.62856016e-02 -2.49361359e-02  4.01828475e-02 -2.34348327e-02
 -1.46049941e-02  5.81919961e-02 -2.84739751e-02 -8.83150399e-02
  7.94818178e-02 -4.84635048e-02 -5.31523488e-02 -2.71645328e-03
 -3.71362492e-02 -7.39204958e-02 -1.17819406e-01  6.65293112e-02
 -5.44854552e-02  1.01224624e-01 -5.44448048e-02 -1.21271862e-02
  9.89932567e-03  2.53424216e-02  1.82617307e-02 -3.26997973e-02
  2.81380732e-02  2.70787161e-02  1.09458074e-01 -3.30467224e-02
  3.36906686e-03 -4.68549915e-02 -1.68075711e-02 -2.01887041e-02
  3.51612270e-02 -2.37873220e-03 -1.62812583e-02 -4.22652848e-02
 -7.91351721e-02  6.89676329e-02 -1.70996524e-02  1.34790121e-02
 -1.78586077e-02  6.73097298e-02 -3.60495932e-02 -2.86159143e-02
  2.79795267e-02 -6.94170222e-02  3.00614722e-02  6.20723777e-02
  9.22753010e-03  5.76373115e-02 -6.21169135e-02 -2.16530170e-02
 -5.25655784e-03  4.45770770e-02 -4.47593778e-02  1.41718925e-03
  1.64891295e-02  3.12874839e-02  4.39002067e-02 -3.03513613e-02
  2.33370066e-03  1.19008198e-02 -1.45687899e-02  9.26012397e-02
  5.48553355e-02  1.18862633e-02  3.49964388e-02  2.51965616e-02
 -2.58534513e-02 -5.37148975e-02  9.05290991e-02 -5.12332395e-02
 -1.92248579e-02  3.96665455e-05 -4.82006371e-02  8.26339647e-02
 -4.18567210e-02 -4.27826643e-02 -4.52759154e-02  3.78880575e-02
 -1.82170719e-02 -9.12395597e-04  2.79258490e-02  2.97442209e-02
  1.02150083e-01 -7.38891773e-03 -5.36065549e-02 -1.70817189e-02
  3.82040739e-02 -4.57413718e-02  6.06831498e-02  1.46110980e-32
 -4.27737786e-03 -2.01814529e-02 -3.30307260e-02  3.28572914e-02
  1.68671645e-02 -4.09700572e-02  2.46929796e-03  2.08878089e-02
 -4.83932421e-02 -6.23031668e-02 -2.97826510e-02 -1.82335898e-02
 -2.39381175e-02 -4.39089574e-02  1.50685962e-02  6.86471313e-02
  2.70886011e-02 -8.73393659e-03  8.31630081e-02 -6.43486623e-03
  5.39610870e-02  1.98121611e-02  3.04111596e-02 -4.04892191e-02
  4.69883271e-02  1.48153491e-02 -9.75245684e-02  2.68189833e-02
 -8.79657716e-02  1.73186548e-02  1.44066066e-01  1.17047215e-02
  1.19210826e-02 -6.31868467e-03  6.33497983e-02 -3.18332762e-02
 -2.64315512e-02 -3.92814800e-02 -7.01280236e-02 -4.75196838e-02
  1.37340603e-02 -3.29195596e-02 -5.82049340e-02  5.10263592e-02
 -5.01961261e-02 -1.12805488e-02 -2.29207519e-02  3.92393172e-02
  3.40660922e-02  1.83117930e-02 -9.61377323e-02  4.32513319e-02
 -7.75727183e-02  4.51555252e-02  5.60389981e-02 -3.68590355e-02
  4.47750613e-02  3.42053175e-02 -2.79158186e-02  1.13163562e-02
 -5.32908030e-02  2.89794407e-03 -2.07716972e-02 -5.02764899e-03
 -9.95635986e-03 -7.25098252e-02 -2.06349716e-02 -1.31047633e-03
  3.39639820e-02 -9.44750309e-02 -2.14367136e-02 -4.99990070e-03
 -4.03617918e-02  7.20233470e-02 -3.90079990e-02 -4.50484157e-02
  3.81790660e-02 -4.23308611e-02 -4.87843752e-02 -2.46167425e-02
  1.82956960e-02 -4.45247209e-03 -4.93824333e-02  5.12770601e-02
 -6.52100667e-02  9.22716632e-02  1.06291594e-02 -1.96837801e-02
  5.59422709e-02  5.05156703e-02 -1.55446483e-02  1.32469116e-02
  1.09505774e-02 -6.08523898e-02 -1.67042241e-02 -1.41720714e-32
  5.22424802e-02 -6.53426498e-02 -9.09951553e-02  3.56375426e-02
  9.89775173e-03 -3.41296196e-02 -1.45363919e-02  5.71928453e-03
 -2.91054640e-02  2.90091126e-03 -1.35371750e-02 -2.20592469e-02
  3.18050086e-02  3.73285040e-02  4.25482690e-02  3.96908559e-02
 -4.31332085e-03 -1.12072431e-01  4.06179465e-02 -2.84932014e-02
  1.31376693e-02  7.40485266e-02  4.18155268e-02  1.62138026e-02
 -1.02029555e-01 -1.40255142e-03 -4.53460664e-02  6.34119734e-02
 -6.31553754e-02  5.02500625e-04  2.08611768e-02  1.15628252e-02
 -5.86393848e-02  1.87738594e-02 -5.78578226e-02 -1.16410367e-01
  8.38473439e-02  2.02156659e-02 -1.62131786e-02  8.69340450e-02
  3.79401520e-02 -7.31437816e-04 -8.48639198e-03 -5.43650389e-02
  1.27594024e-02 -3.78316231e-02  4.06679809e-02  6.97988272e-02
  1.54413348e-02  5.24245612e-02  1.13016166e-01 -6.21246360e-02
  2.38688737e-02 -6.51448444e-02  5.34673743e-02  5.89994453e-02
  1.19972520e-01 -1.38872236e-01 -2.47380883e-02  9.32365749e-03
  1.88821685e-02 -9.31687355e-02  8.89137213e-04  2.11284664e-02
  6.08907007e-02  1.10721635e-03  1.44675383e-02  2.19029598e-02
  7.03275204e-02 -6.46097884e-02 -4.62246835e-02 -2.18494143e-02
  7.06347637e-03  5.31020202e-03  8.43241438e-02 -1.96934454e-02
 -9.68184471e-02 -3.40587758e-02  1.01617545e-01 -3.09328679e-02
 -4.83351760e-02  4.37799422e-03  4.94330935e-03  2.47445777e-02
  3.15346792e-02 -4.25825156e-02 -4.98410314e-02 -2.99052466e-02
 -4.50114533e-02 -4.48575951e-02  3.05449311e-02  1.76507179e-02
 -4.46570143e-02  1.37985945e-02 -1.82258766e-02 -6.40538786e-08
 -8.03693831e-02 -6.33511990e-02 -8.30211490e-02  7.99960047e-02
 -3.10012116e-03 -4.01328504e-02 -3.43223964e-03 -5.46560735e-02
  7.72297382e-02 -1.09974956e-02 -1.08949319e-02  7.44462088e-02
  3.59688327e-02 -2.31492557e-02  3.59391123e-02 -2.98704114e-02
  1.70943681e-02 -3.77798714e-02 -6.39720857e-02 -4.03086506e-02
  1.54579461e-01 -4.09080125e-02 -2.71294061e-02  8.25873669e-03
  1.12983540e-01  1.91065595e-02  3.03227492e-02  7.22522289e-02
 -5.96666001e-02  2.03510001e-02 -5.00058271e-02 -2.10922044e-02
  9.16030258e-02  4.09509316e-02  4.65957746e-02 -1.09637938e-02
  1.96176916e-02 -1.15302159e-02 -5.08958399e-02  1.71111971e-02
  1.03603773e-01  6.98963925e-02 -7.92523846e-02  4.80336472e-02
  7.75919780e-02 -1.69072188e-02  9.38145816e-03  3.44982035e-02
  4.62119058e-02 -6.42313203e-03 -6.61234930e-02 -2.63373330e-02
  1.16311550e-01  9.40008759e-02 -8.05868581e-02 -4.49210703e-02
  2.53459625e-02  5.15856110e-02 -1.45393296e-03  4.96057533e-02
  8.17193538e-02  7.04662502e-02  9.66161676e-03 -5.18786348e-02]"
"            ""unrecognized initialization flag \""{:?}\"". in account"",
                is_initialized_src
            )))
        }
    };
    // Get current size of content in data area
    let data_len = u32::from_le_bytes(*data_len_src) as usize;
    // If emptry, create a default
    if data_len == 0 {
        Ok((is_initialized, BTreeMap::<String, String>::new()))
    } else {
        let data_dser = BTreeMap::<String, String>::try_from_slice(&data_src[0..data_len]).unwrap();
        Ok((is_initialized, data_dser))
    }
}
123456789101112131415161718192021222324252627282930313233# Mapping cơ bản bằng TS/JS cho SolanaMô tả của Borsh chứa hầu hết các mapping cho các dữ liệu nguyên thuỷ và các dữ liệu phức.Mấu chốt trong TS/JS, và kể cả Python, là tạo ra một Borsh Schema với các định nghĩa chính xác sao cho việc tuần tự và phi tuần tuận hoá có thể vận hành được trên dữ liệu đầu vào.Sau đây là một minh hoạ về tuần tự hoá dữ liệu nguyên thuỷ (numbers, strings) và dữ liệu phức (array với kích thức cố định, Map) trong Typescript hoặc Python. Tiếp đến là phi tuần tự hoá dữ liệu đó bằng Rust.TSPythonRust#!/usr/bin/env node

import { serialize, deserialize, deserializeUnchecked } from ""borsh"";
import { Buffer } from ""buffer"";
import { expect } from ""chai"";
import { PublicKey, Struct } from ""@solana/web3.js"";

/**
 * Primitive extends the Struct type from Solana Library
 * for convenience of dynamic property setting
 * @extends {Struct} Solana JS Struct class
 */

class Primitive extends Struct {
  constructor(properties) {
    super(properties);
  }
}

/**
 * Entry point for script *
 */
async function entry() {
  // Emulate BTreeMap
  let map = new Map();
  map.set(""cookbook"", ""recipe"");
  map.set(""recipe"", ""ingredient"");

  // Setup a Primitive for all basic and a few
  // compound types
  const value = new Primitive({
    U8: 255,
    U16: 65535,
    U32: 4294967295,
    FIXED_STRING_ARRAY: [""hello"", ""world""],
    FIXED_U8_ARRAY: [1, 2, 3, 4, 5],
    MAP_STRING_STRING: map,
  });
  // Define our schema
  const schema = new Map([
    [
      Primitive,
      {
        kind: ""struct"",
        fields: [
          [""U8"", ""u8""],
          [""U16"", ""u16""],
          [""U32"", ""u32""],
          [""FIXED_STRING_ARRAY"", [""string"", 2]],
          [""FIXED_U8_ARRAY"", [""u8"", 5]],
          [
           ","[ 1.07757803e-02  3.41154300e-02 -2.41481476e-02 -1.45266810e-02
 -5.93698658e-02 -9.75872949e-02  2.03074813e-02  5.93287572e-02
 -6.21094927e-02  5.62336016e-03  6.03254810e-02 -3.80493626e-02
 -6.66217506e-02  6.80435263e-03 -4.48398665e-03  1.77873522e-02
 -7.23129958e-02 -2.32071672e-02 -4.30991203e-02 -8.55035558e-02
  9.15450677e-02  6.36601970e-02  7.71983387e-03 -7.83908088e-03
  5.72420210e-02  7.58489966e-02 -4.01444249e-02  5.31257838e-02
  1.81098655e-02 -7.43386447e-02  7.72104487e-02 -3.84660214e-02
  6.32137209e-02  5.73672801e-02  9.84856114e-02  2.22199950e-02
 -6.27805246e-03 -3.90590169e-02  5.42084463e-02  2.83971298e-02
 -2.94482261e-02  6.69540614e-02 -6.10626340e-02  1.32941622e-02
  4.56945822e-02  1.46617210e-02 -6.12131208e-02  6.62995651e-02
 -1.25681702e-02 -2.57445537e-02 -2.84981485e-02  3.08751389e-02
 -5.34871705e-02  5.13808876e-02  3.45862135e-02 -3.68081257e-02
 -1.88073684e-02 -4.56040166e-02  6.91639259e-02  3.18112038e-02
 -6.54718131e-02 -8.85313284e-03  7.29004219e-02 -5.60565330e-02
  2.87250262e-02  1.67392492e-02 -3.25379334e-02  2.14005504e-02
 -7.44244130e-03  3.31482813e-02  5.81134297e-03  5.12538999e-02
  6.05731085e-03  1.33825988e-01 -4.77462001e-02 -4.33771461e-02
 -4.98247780e-02  7.15979422e-03  6.95416844e-03 -3.15056629e-02
 -5.32264896e-02 -2.97649428e-02  6.01731464e-02  1.05129965e-01
 -4.56030220e-02  6.04642779e-02 -5.38170449e-02  2.68270113e-02
 -6.31729141e-03 -3.09623824e-03 -3.74624096e-02 -2.44091284e-02
 -1.06748261e-01  7.65659288e-02  1.16091585e-02 -2.85749370e-03
 -1.84111055e-02 -6.95735365e-02 -1.08365444e-02  1.94200240e-02
  3.16883884e-02  1.82461273e-02  3.00665293e-02  8.64135474e-03
 -5.03900871e-02 -9.12540630e-02  7.39149302e-02  9.11854859e-03
 -1.31766852e-02  7.65949786e-02  7.96922147e-02  6.56975359e-02
 -4.56938297e-02  2.71072369e-02 -6.61112089e-03 -7.95332640e-02
 -3.89263816e-02 -2.03966219e-02 -3.56429480e-02  7.65101239e-02
  5.53109832e-02  1.73910090e-03 -9.84762534e-02  3.41512151e-02
 -9.84217301e-02 -5.53737059e-02  8.06012526e-02  8.76141931e-33
 -1.11066693e-04 -2.55043283e-02  5.57523780e-02  7.44839236e-02
 -3.38044129e-02  7.46839796e-04 -7.01597854e-02  1.58257317e-02
 -8.63042548e-02  5.20368814e-02 -4.94807661e-02 -1.22058569e-02
 -3.41086760e-02 -1.81408005e-03  6.19339012e-02 -4.30547073e-02
 -3.31251882e-03 -3.17015243e-03 -8.17469209e-02 -3.77298295e-02
  2.43927017e-02  5.05257845e-02  4.64873388e-03 -8.71865302e-02
 -5.11506647e-02 -2.36766767e-02 -8.98471028e-02 -1.03766834e-02
 -4.18428779e-02  1.96174309e-02 -2.69803088e-02 -3.18130106e-02
 -2.28742678e-02 -9.57774185e-03  1.08857483e-01 -4.71941642e-02
  2.06984859e-02  5.52737445e-04 -1.48915693e-01  5.12733683e-02
  8.06231648e-02  5.39431907e-02  1.46205481e-02 -5.64874597e-02
 -3.54291685e-02 -1.72258168e-02  2.12149378e-02 -2.28349138e-02
 -1.17163826e-02 -3.10111395e-03  7.56631270e-02  4.60519455e-02
 -8.00925791e-02 -1.89507362e-02  4.83361855e-02 -5.86397387e-02
  3.69369909e-02 -6.35236204e-02  6.13060370e-02  6.93438947e-02
 -4.77853306e-02  2.63400022e-02  3.57932337e-02  5.05791195e-02
  2.28414126e-02 -4.72113267e-02  5.42474352e-02 -2.30815653e-02
 -7.74448738e-02 -6.65625185e-02 -1.53696612e-02 -5.35978228e-02
  2.14589275e-02  4.41342555e-02 -8.02402869e-02 -4.20169085e-02
 -1.77519638e-02 -6.52730092e-03 -7.93561190e-02 -5.35840243e-02
 -6.45184715e-04 -1.13545552e-01  1.71957333e-02 -5.70340827e-02
 -3.35733145e-02 -2.41470300e-02  3.30217890e-02 -6.29184246e-02
 -3.48908566e-02 -1.04689552e-02 -6.93162605e-02 -1.09126670e-02
 -1.52030522e-02 -1.14673801e-01 -3.50541361e-02 -9.40997334e-33
  7.58488923e-02 -3.27117890e-02  4.59269397e-02  2.61914320e-02
 -7.62480125e-02 -4.86691110e-02  9.52547193e-02  1.20100312e-01
  2.54384466e-02  4.43917466e-03 -6.15973361e-02  2.05062460e-02
  4.57530767e-02 -2.19756234e-02  8.71244073e-02  1.63504630e-02
 -5.91687225e-02  4.99822423e-02  2.37031318e-02  6.26002848e-02
  1.84392016e-02 -6.44207560e-03  4.11734022e-02  8.30500051e-02
  2.64666751e-02  8.58551264e-02  3.19063105e-02 -1.40982796e-03
 -6.20443281e-03 -3.73580642e-02 -2.26982534e-02 -3.23322751e-02
  1.33864023e-02  1.51826600e-02 -6.97114244e-02 -8.57459977e-02
  6.99068680e-02  5.29808179e-02  3.15215215e-02  2.10517216e-02
  2.23223120e-02  6.23268113e-02 -1.22950040e-01 -6.34079203e-02
 -6.60186633e-02 -1.23950345e-02  7.08926991e-02  1.30933970e-01
 -5.63800428e-03 -2.05921959e-02  5.22886664e-02 -7.44687673e-03
  1.94049887e-02 -1.95011438e-03  3.21431234e-02  6.73813140e-03
 -1.96740478e-02 -3.55922878e-02 -1.68241560e-02 -8.20676833e-02
 -3.79993878e-02 -6.57035485e-02  2.54026265e-03 -3.85863557e-02
  8.38802457e-02 -2.04454176e-03 -4.51614074e-02 -2.60250699e-02
 -2.01043114e-02 -1.86085869e-02  1.07405391e-02 -7.30467588e-03
 -3.43311839e-02 -2.52520982e-02 -2.44602151e-02 -5.94503805e-03
 -5.14627583e-02  1.07663441e-02  4.26886268e-02  4.85884324e-02
 -3.29468660e-02  6.72634467e-02  7.46346894e-04  8.74077380e-02
  1.19134106e-01  3.51918340e-02 -5.59109263e-03 -3.78914848e-02
 -1.30851148e-02  9.58036806e-04 -5.99355586e-02  2.55878940e-02
 -3.36222872e-02  9.61660519e-02 -6.01338455e-03 -6.11582323e-08
 -8.06281790e-02 -6.33303002e-02 -4.27634679e-02  8.67154822e-02
  3.44168246e-02 -4.78401259e-02  5.06205065e-03 -1.49068655e-02
  3.06391325e-02 -5.89157715e-02  2.75369864e-02  9.81746614e-02
 -7.62368515e-02 -4.67993952e-02 -2.56155450e-02 -2.23962124e-02
  4.14644480e-02 -7.14700669e-02 -8.67883582e-03  2.84415912e-02
  1.76442210e-02  1.36264879e-02 -2.95434594e-02 -3.18951719e-03
  1.36313234e-02  1.39862653e-02 -4.67767678e-02  7.09454417e-02
  5.45765013e-02 -6.44350871e-02  9.97063816e-02 -3.30862589e-02
  6.44988194e-02  2.19008233e-02 -3.88175696e-02 -4.51038331e-02
  2.16329359e-02  3.84498574e-02  4.67569381e-03 -5.69085740e-02
  5.57312369e-02  8.30189213e-02  3.67260911e-02 -1.74860979e-04
 -4.40970026e-02 -4.17889915e-02 -2.65262853e-02  1.07595660e-01
  6.88815787e-02 -3.04541141e-02 -5.04555926e-03  8.16390663e-03
 -5.68231940e-02  5.81438318e-02 -6.45709550e-03 -5.95294200e-02
  5.69788134e-03  2.46256217e-02 -1.37969717e-01  9.66259241e-02
  4.87265736e-02  2.28580553e-03 -9.72890120e-04 -2.63650361e-02]"
"""MAP_STRING_STRING"",
            { kind: ""map"", key: ""string"", value: ""string"" },
          ],
        ],
      },
    ],
  ]);
  console.log(""Value = "", value);
  // Serialize then deserialize
  const dser = Buffer.from(serialize(schema, value));
  console.log(dser);
  const newValue = deserialize(schema, Primitive, dser);
  // Viola!
  console.log(""New value = "", newValue);
  console.log(""Fixed string array = "", newValue[""FIXED_STRING_ARRAY""]);
  console.log(""Fixed u8 array = "", newValue[""FIXED_U8_ARRAY""]);
  console.log(""Map = "", newValue[""MAP_STRING_STRING""]);
}

entry();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071from borsh_construct import U8, U16, U32, String, HashMap

# Schema to deserialize various types
primitive_schema = CStruct(
        ""U8"" / U8,
        ""U16"" / U16,
        ""U32"" / U32,
        ""FIXED_STRING_ARRAY"" / String[2],
        ""FIXED_U8_ARRAY"" / U8[5],
        ""MAP_STRING_STRING"" / HashMap(String, String)
)


def common():
    mapping = {""cookbook"": ""recipe"", ""recipe"": ""ingredient""}

    # Serialize
    dser = primitive_schema.build({
        'U8': 255,
        'U16': 65535,
        'U32': 4294967295,
        ""FIXED_STRING_ARRAY"": ['hello', 'world'],
        ""FIXED_U8_ARRAY"": [1, 2, 3, 4, 5],
        ""MAP_STRING_STRING"": mapping})
    print(dser)
    # => b'\xff\xff\xff\xff\xff\xff\xff\x05\x00\x00\x00hello\x05\x00\x00\x00world\x01\x02\x03\x04\x05\x02\x00\x00\x00\x08\x00\x00\x00cookbook\x06\x00\x00\x00recipe\x06\x00\x00\x00recipe\n\x00\x00\x00ingredient'
    # Deserialize
    new_value = primitive_schema.parse(dser)
    # Viola
    print(new_value)
    # => Container:
    # =>    U8 = 255
    # =>    U16 = 65535
    # =>    U32 = 4294967295
    # =>    FIXED_STRING_ARRAY = ListContainer:
    # =>        hello
    # =>        world
    # =>    FIXED_U8_ARRAY = ListContainer:
    # =>        1
    # =>        2
    # =>        3
    # =>        4
    # =>        5
    # =>    MAP_STRING_STRING = {'cookbook': 'recipe', 'recipe': 'ingredient'}
1234567891011121314151617181920212223242526272829303132333435363738394041424344fn main() {}

#[cfg(test)]
mod tests {
    use borsh::{BorshDeserialize, BorshSerialize};
    use std::collections::BTreeMap;

    #[test]
    fn primitives() {
        let prim = [
            255u8, 255, 255, 255, 255, 255, 255, 5, 0, 0, 0,","[ 8.85139257e-02  5.33338636e-02 -2.11739391e-02 -8.58475491e-02
 -1.50787309e-01 -4.88855131e-02  2.34233718e-02  7.64421821e-02
 -7.62006119e-02 -8.02763849e-02  3.50727816e-04 -3.24081220e-02
 -8.07306990e-02 -4.51357402e-02  3.70752066e-02  3.84417217e-04
 -5.09699136e-02  1.61639825e-02 -9.40901041e-02 -2.42723972e-02
  6.37050793e-02 -2.44793724e-02 -7.17413500e-02  3.96026485e-02
 -1.10460268e-02  6.29908964e-02  5.59424162e-02  6.14054948e-02
 -8.05339217e-03  4.97358404e-02 -2.59793620e-03 -3.50703858e-02
  1.31520024e-02 -3.41844931e-02  2.96541229e-02  8.40344653e-02
  2.14515254e-04 -4.93492419e-03  4.10144702e-02 -2.14319266e-02
  7.84670282e-03  3.00496090e-02 -6.95093498e-02  5.89123853e-02
  4.07148227e-02 -2.83889063e-02  2.35553328e-02  5.20783141e-02
 -7.87616801e-03  3.77543792e-02 -6.77619781e-03  8.80581513e-02
 -1.03699425e-02  1.97098535e-02 -7.81808980e-03 -2.21509989e-02
 -4.69181798e-02 -5.85098974e-02  2.96361633e-02 -2.58039329e-02
 -4.09642532e-02 -3.93043794e-02  1.14108004e-01 -1.86055172e-02
  3.10619920e-02 -4.14959118e-02  3.97338755e-02  1.74038205e-02
  7.45707750e-02  1.58914342e-03  3.21774036e-02 -4.99300174e-02
 -6.29980564e-02  6.00759536e-02 -3.25263590e-02  3.20115574e-02
 -2.82196105e-02 -7.82545507e-02  4.89159413e-02 -4.51968145e-03
  3.11860871e-02 -7.35871568e-02 -1.69929815e-03  3.42245325e-02
 -2.67383140e-02  3.04630399e-02 -8.84381905e-02  4.77616936e-02
 -3.09739169e-03  5.64272255e-02 -8.67201164e-02 -3.52577642e-02
 -1.74512796e-03 -3.66268819e-03  4.87985313e-02 -3.51417763e-03
  1.10752303e-02  1.14560463e-02  1.21041797e-02  6.34136274e-02
 -1.36144403e-02 -9.56872571e-03  6.21802732e-02 -3.58160585e-02
 -9.12780091e-02 -3.63129675e-02  1.55526353e-02  9.09709651e-03
 -1.30913883e-01  2.12682988e-02 -3.04729259e-03  3.33582088e-02
 -1.67775503e-03  1.41895460e-02 -6.51125461e-02  6.69520162e-03
 -7.26433918e-02 -3.58710475e-02  1.00974403e-02  3.55440453e-02
  8.96674767e-02 -2.07598060e-02 -1.49160661e-02  4.09603715e-02
 -6.87531522e-03 -7.66394958e-02 -3.21394503e-02 -4.06550185e-34
  4.45506759e-02 -1.80976186e-02  4.42409255e-02  4.24464829e-02
  2.24403292e-02 -3.32165658e-02 -1.78733282e-02  8.13858658e-02
 -6.41110316e-02 -1.41471755e-02 -4.45454530e-02  1.88326444e-02
  2.51426250e-02  9.81302932e-03  2.29590591e-02 -1.78681053e-02
  7.34224990e-02 -5.96279185e-03  2.01655109e-03 -9.10669193e-03
  5.22525683e-02  1.15631558e-01  1.41515229e-02 -5.47511317e-02
  2.46726200e-02 -5.81616908e-03 -7.73326159e-02 -7.51612801e-03
 -1.13131059e-02 -5.67469280e-03  5.91357090e-02  1.71650238e-02
  9.70300287e-03  2.68220920e-02  9.49927345e-02 -4.12097238e-02
 -4.76651452e-02  5.35479933e-02 -6.17615804e-02 -7.39860833e-02
  9.02715977e-03 -7.62463734e-03 -3.14201526e-02  2.03754362e-02
  6.38067275e-02 -8.93020257e-02 -5.03715612e-02  9.56276245e-03
  7.13143311e-03 -2.78781597e-02  6.61210641e-02  3.94594409e-02
 -9.49785039e-02  7.95297697e-02 -1.04745170e-02 -3.93034853e-02
  1.77705567e-02 -4.12497148e-02 -6.30523339e-02  6.39435574e-02
 -5.83860911e-02  8.01103935e-02  5.79148717e-02  1.65211055e-02
  4.68787551e-02 -6.66454062e-02  4.43935171e-02  1.29287383e-02
 -3.93238850e-02 -2.64251251e-02 -4.21178192e-02  1.76307037e-02
 -2.82286201e-02  4.08815816e-02 -7.54036829e-02  3.36690247e-02
 -4.98262681e-02 -1.36666559e-02 -8.80084708e-02 -1.07259206e-01
 -4.45768870e-02 -2.57424004e-02 -2.97153890e-02  7.34888166e-02
 -7.00650811e-02  4.42336500e-02 -1.34279514e-02  1.69691665e-03
  7.22836778e-02  4.86854138e-03 -7.53428042e-02 -6.79887831e-02
 -9.55104828e-02 -6.38159737e-02  2.44401079e-02 -3.40324569e-33
 -2.76286621e-02 -5.19380867e-02  1.65115204e-02  9.85504165e-02
 -1.90319996e-02 -2.05618870e-02  7.40852952e-02  2.40510553e-02
 -3.43587771e-02  1.85438357e-02 -3.12898420e-02  2.52799336e-02
  3.76489833e-02  4.09791842e-02  5.65813258e-02  2.45457888e-03
 -7.77925700e-02  4.60615493e-02  5.34077473e-02 -3.78649198e-02
  7.04605281e-02  7.58803859e-02  3.90773639e-02  2.17217039e-02
 -1.22243641e-02 -3.89483720e-02 -1.06042298e-02  2.37117596e-02
  2.91357823e-02  6.51707947e-02  4.14576009e-03  4.50615063e-02
  4.41007353e-02  4.96916696e-02 -1.11264624e-02 -2.33678091e-02
  1.33126497e-01  5.22934310e-02  1.80749800e-02  5.33246472e-02
 -4.20995131e-02 -3.09090931e-02 -5.34691028e-02  5.19732479e-03
  2.14490928e-02  2.61627473e-02  5.47947409e-03  6.01704344e-02
 -2.60182489e-02 -5.27045177e-03  1.18034266e-01 -7.69581869e-02
 -5.14393859e-02 -7.74341449e-02  3.80216166e-02 -5.05198026e-03
 -7.89049082e-03 -1.04308292e-01 -1.95390452e-02  3.90582508e-03
 -5.13905287e-02 -8.36120099e-02  7.74315521e-02  5.97097352e-03
  5.90425543e-02 -2.29667891e-02 -6.21157475e-02 -7.34970868e-02
 -3.96372825e-02 -5.89090399e-02 -1.55225825e-02  1.97562333e-02
 -5.60033731e-02  7.05086589e-02  1.03960030e-01 -8.91353935e-02
 -1.04446672e-01 -2.65440233e-02  5.25541306e-02  2.59714462e-02
 -3.19389477e-02 -1.78610627e-02  1.10599073e-02  1.42506167e-01
  4.91505414e-02 -2.02831533e-02  3.79833691e-02  2.84040850e-02
 -5.96278943e-02 -1.68457460e-02 -3.93143948e-03  7.92386457e-02
 -1.28840208e-01 -5.53124072e-03 -2.74813864e-02 -4.72529713e-08
 -3.00440006e-02 -2.40687430e-02 -1.11932673e-01  9.08836499e-02
  9.89854429e-03 -1.98026597e-02 -6.20078631e-02 -4.96110134e-02
  8.50709900e-02 -6.92890212e-02 -4.20634598e-02  6.74069580e-03
  2.32870951e-02 -8.35166872e-02  1.70369372e-02 -1.73464082e-02
  3.09350481e-03 -5.39567471e-02 -3.76067534e-02 -5.34891784e-02
  8.62933546e-02  2.31623482e-02 -8.03673193e-02 -5.13339713e-02
  5.62882759e-02 -2.35628267e-03  1.68513488e-02  2.54507065e-02
 -5.86339179e-03  2.32543051e-02  8.93272907e-02 -1.91368237e-02
  5.99985942e-02  2.67665397e-04 -3.80580984e-02 -3.18779647e-02
 -2.93528177e-02 -2.23822948e-02  2.85879783e-02 -3.32363183e-03
  7.46366531e-02  7.55770728e-02 -7.60904476e-02  2.39182655e-02
  2.64934767e-02 -5.44059798e-02  7.12979259e-03  1.62094891e-01
  4.04633507e-02  1.69939622e-02 -3.55673283e-02  4.88538407e-02
  8.29501972e-02 -1.96548738e-02 -6.12258911e-02 -6.16782978e-02
 -4.20076540e-04 -2.97055915e-02  3.84185575e-02  3.22291441e-02
  5.09835705e-02 -5.89491315e-02 -4.53927666e-02 -5.65304756e-02]"
"104, 101, 108, 108, 111, 5, 0, 0, 0,
            119, 111, 114, 108, 100, 1, 2, 3, 4, 5, 2, 0, 0, 0, 8, 0, 0, 0, 99, 111, 111, 107, 98,
            111, 111, 107, 6, 0, 0, 0, 114, 101, 99, 105, 112, 101, 6, 0, 0, 0, 114, 101, 99, 105,
            112, 101, 10, 0, 0, 0, 105, 110, 103, 114, 101, 100, 105, 101, 110, 116,
        ];
        #[derive(BorshDeserialize, BorshSerialize, Debug)]
        struct Primitive(
            u8,
            u16,
            u32,
            String,
            String,
            [u8; 5],
            BTreeMap<String, String>,
        );
        let x = Primitive::try_from_slice(&prim).unwrap();
        println!(""{:?}"", x);
    }
}
1234567891011121314151617181920212223242526272829# Kiểu dữ liệu nâng caoChúng ta đã đi qua nội dung cơ bản ở các ví dụ trước. Nhưng ngoài ra, Solana còn có một vài kiểu dữ liệu tự định nghĩa khác. Trong phần này, chúng ta tìm hiểu qua các xử lý chúng bằng TS/JS và Rust.# COptionTSRust#!/usr/bin/env node

import { serialize, deserialize, deserializeUnchecked } from ""borsh"";
import { Buffer } from ""buffer"";
import { PublicKey, Struct } from ""@solana/web3.js"";

/**
 * COption is meant to mirror the
 * `solana_program::options::COption`
 *
 * This type stores a u32 flag (0 | 1) indicating
 * the presence or not of a underlying PublicKey
 *
 * Similar to a Rust Option
 * @extends {Struct} Solana JS Struct class
 * @implements {encode}
 */
class COption extends Struct {
  constructor(properties) {
    super(properties);
  }

  /**
   * Creates a COption from a PublicKey
   * @param {PublicKey?} akey
   * @returns {COption} COption
   */
  static fromPublicKey(akey?: PublicKey): COption {
    if (akey == undefined) {
      return new COption({
        noneOrSome: 0,
        pubKeyBuffer: new Uint8Array(32),
      });
    } else {
      return new COption({
        noneOrSome: 1,
        pubKeyBuffer: akey.toBytes(),
      });
    }
  }
  /**
   * @returns {Buffer} Serialized COption (this)
   */
  encode(): Buffer {
 ","[-2.36307811e-02  1.13584429e-01 -2.88033877e-02 -6.97610676e-02
 -1.97624862e-02 -2.60021128e-02  4.76038782e-03  3.63710634e-02
 -1.58620045e-01 -5.42128570e-02  4.38163802e-02 -7.47138411e-02
 -5.80304600e-02  1.20269498e-02 -2.65585929e-02  7.08037103e-03
 -1.05532594e-01 -9.51080676e-03 -4.51237559e-02 -3.48728485e-02
  3.88168506e-02  1.09413140e-01 -1.47097725e-02  2.67580226e-02
  6.41449243e-02  1.85338687e-02  7.07486644e-02  3.46497782e-02
  1.05064869e-01 -2.88351905e-02 -5.97071368e-04  4.15897375e-04
  9.10491347e-02 -4.78246278e-04  6.36793002e-02  2.03045774e-02
  3.32309455e-02 -4.20961820e-04  4.15425887e-03  9.89816636e-02
 -3.34587842e-02  3.21101164e-03 -1.96709298e-02  4.07170877e-02
  1.75091214e-02 -2.97899079e-02  1.40113495e-02  7.31341019e-02
  1.33026027e-04  1.93464961e-02  2.94338465e-02  1.10256806e-01
  7.62994494e-03 -9.84021812e-04  3.31271552e-02 -3.54524851e-02
 -3.51310186e-02 -1.15569204e-01  4.08596769e-02  1.49251260e-02
 -3.42182405e-02  7.98505824e-03  3.68194133e-02 -6.04384840e-02
  3.69864590e-02 -7.25649763e-03  2.79833768e-02  1.36836832e-02
  1.04670720e-02  3.71686108e-02  5.19311205e-02 -3.58062498e-02
 -3.32669914e-02  1.09498724e-01  1.59959607e-02  4.81683575e-02
  4.03963439e-02 -6.98756725e-02 -1.83332171e-02  1.69648807e-02
 -6.38532266e-02 -5.74904047e-02 -2.06649415e-02  4.55690138e-02
 -4.96633537e-02 -5.04803136e-02 -8.12545866e-02  2.56354026e-02
  2.50871945e-03  5.15173376e-02 -5.15605556e-03 -3.71088572e-02
 -1.03169121e-01 -4.75725159e-03 -1.54763935e-02  5.43721952e-02
  3.36276107e-02  3.98518145e-02 -2.04173699e-02  1.10216223e-01
 -3.25843282e-02 -3.93617041e-02  1.42596560e-02 -2.08036695e-02
 -5.12106568e-02 -4.53623012e-02  4.53426465e-02  4.58905734e-02
 -1.57092474e-02 -5.02382554e-02  3.99170034e-02 -3.08783203e-02
  3.16999219e-02  1.94071345e-02 -7.23018963e-03 -9.51468796e-02
 -7.09053278e-02  1.13606518e-02 -2.64878087e-02 -5.48858978e-02
  8.06514174e-02  3.16100032e-03 -1.26384553e-02  1.05190873e-01
 -4.09915075e-02 -2.70215832e-02 -5.70403561e-02 -1.72261056e-33
  3.35480943e-02  3.27656604e-02 -1.64069552e-02 -3.35185267e-02
 -1.54699683e-02  4.12726169e-03 -5.86821549e-02  4.49124426e-02
 -6.63805827e-02  1.26139838e-02 -4.96838205e-02 -2.49160873e-03
  6.13271855e-02 -3.25214416e-02  5.99154755e-02 -2.39708815e-02
  5.73357716e-02  7.26052700e-03 -3.49956304e-02 -1.24014670e-03
  6.41974136e-02  9.10592899e-02 -8.25154129e-03 -6.35094196e-02
  4.52981284e-03  3.50041427e-02 -4.61787218e-03 -8.52490440e-02
 -2.61519719e-02  3.08996271e-02  1.95290856e-02  9.86776128e-03
  1.99138895e-02 -1.30945230e-02  8.08115080e-02 -2.60567926e-02
 -2.45773382e-02 -9.64665413e-03 -6.10074513e-02 -9.78137404e-02
 -5.59201241e-02  5.33973938e-03 -5.14696864e-03  4.36069298e-04
  8.41692910e-02 -7.03435689e-02  1.81525499e-02  3.28048207e-02
 -4.66435365e-02  8.46752618e-03  3.97974066e-02  3.94698679e-02
 -7.91165233e-02  4.62775379e-02 -1.16297789e-02 -3.46709788e-02
  6.55368939e-02  5.22259101e-02 -1.49402535e-02  9.74991471e-02
  3.54593173e-02  9.22864601e-02  1.09304646e-02  1.83737483e-02
 -1.76935252e-02 -1.01030814e-02  1.69398598e-02 -8.08015242e-02
 -4.01605405e-02 -1.34538077e-02 -8.67147967e-02  3.36128771e-02
  5.31050330e-03  1.65505074e-02 -5.28923012e-02 -4.90887240e-02
  1.98693387e-02 -1.36429640e-02 -2.95160916e-02 -1.18811041e-01
  1.50548015e-02  2.04446297e-02  5.99504076e-02  4.53515165e-03
 -6.48887455e-02 -2.90584806e-02 -1.52769936e-02 -9.19036753e-03
  6.60165818e-03 -1.47826374e-02 -1.20807821e-02 -8.20235983e-02
 -2.25575808e-02 -8.53442773e-02 -2.59709675e-02  8.61819377e-34
 -1.16588846e-02 -3.45535204e-02  4.69988212e-02 -3.31464410e-02
 -4.31844108e-02 -2.31363326e-02  9.82018039e-02  2.87650861e-02
 -2.29777135e-02 -1.13803037e-02  4.83360551e-02  1.49505567e-02
  2.10579373e-02  1.08814249e-02  1.23630077e-01 -3.68751995e-02
 -2.69573089e-02  1.07135393e-01 -3.53569537e-02 -1.16027137e-02
  4.45214324e-02  1.43408179e-01 -5.44571504e-03  2.22300868e-02
 -1.71897840e-02  3.37898955e-02 -4.85880207e-03  5.22017740e-02
  2.83494145e-02  2.91900933e-02 -1.17706945e-02 -9.17936489e-03
 -1.21255582e-02 -2.41202256e-03  1.07862344e-02  1.29161533e-02
  4.48630266e-02  7.40514398e-02  3.64911295e-02  4.41894494e-02
  2.08030045e-02  2.42684819e-02 -2.40995064e-02  1.78459808e-02
 -2.99452133e-02  8.37414786e-02  3.03484723e-02  8.40514228e-02
 -4.89098914e-02  1.52795557e-02  7.10893497e-02 -1.21352822e-02
  4.57767723e-03  2.42239144e-02  9.24955774e-03  4.07579169e-03
 -8.57584700e-02 -6.13097250e-02  5.76519668e-02 -3.87334116e-02
 -5.60939871e-02 -2.16603782e-02  7.45232180e-02  7.76475528e-03
  9.14788321e-02 -2.83682216e-02 -9.04409662e-02 -2.89962497e-02
 -8.62293318e-02 -5.33882193e-02  2.35416535e-02  1.68890879e-02
 -8.00332949e-02 -2.04530433e-02  2.54817903e-02  6.48165215e-03
 -7.68084154e-02  6.99274184e-04 -1.86193362e-02  3.52034830e-02
 -6.12188317e-02  7.74941687e-03 -1.59127340e-02  1.25901937e-01
  6.64719194e-02 -8.20636302e-02  7.59452283e-02  1.04918256e-01
 -2.49206554e-02 -6.64653629e-02  6.66241453e-04  4.53782678e-02
  8.48011486e-03  8.96899626e-02  7.25314617e-02 -4.98638606e-08
 -8.91512930e-02 -9.94051695e-02 -8.08330551e-02  1.49565237e-02
  5.94840832e-02 -3.37229632e-02 -3.44289094e-02 -8.76316503e-02
  6.24615094e-03 -6.76932782e-02  3.91290449e-02  7.66757876e-03
 -8.57058913e-02 -6.80815056e-02  3.44684161e-02 -2.61167213e-02
 -7.48905074e-03 -4.67758663e-02 -5.76210395e-02  4.41205734e-03
  1.70356762e-02  1.16187874e-02 -5.05352691e-02  1.41960699e-02
 -8.88844430e-02 -9.81165562e-03 -1.29900537e-02  2.60050427e-02
  1.08918779e-01 -1.89709887e-02  8.89020264e-02  1.20945303e-02
  1.70308892e-02  7.79252425e-02 -8.76186565e-02  4.28369530e-02
 -3.55806351e-02  7.26528317e-02  2.96109878e-02  1.07067162e-02
 -5.84734529e-02  2.75320420e-03 -1.08505256e-01  3.52676585e-02
  2.38126074e-03 -1.18916467e-01 -5.22193313e-02  3.21463868e-02
 -4.81438870e-03  1.25180800e-02 -4.73628640e-02  1.12206209e-02
  9.97141749e-03 -1.82679761e-02 -1.14362016e-02 -1.35244146e-01
 -9.20200162e-03 -6.31463006e-02 -4.40421477e-02  1.45617053e-01
  6.11328520e-02 -1.07241301e-02  6.85767457e-02  1.48170153e-02]"
"  return Buffer.from(serialize(COPTIONSCHEMA, this));
  }
  /**
   * Safe deserializes a borsh serialized buffer to a COption
   * @param {Buffer} data - Buffer containing borsh serialized data
   * @returns {COption} COption object
   */
  static decode(data): COption {
    return deserialize(COPTIONSCHEMA, this, data);
  }

  /**
   * Unsafe deserializes a borsh serialized buffer to a COption
   * @param {Buffer} data - Buffer containing borsh serialized data
   * @returns {COption} COption object
   */
  static decodeUnchecked(data): COption {
    return deserializeUnchecked(COPTIONSCHEMA, this, data);
  }
}

/**
 * Defines the layout of the COption object
 * for serializing/deserializing
 * @type {Map}
 */
const COPTIONSCHEMA = new Map([
  [
    COption,
    {
      kind: ""struct"",
      fields: [
        [""noneOrSome"", ""u32""],
        [""pubKeyBuffer"", [32]],
      ],
    },
  ],
]);

/**
 * Entry point for script *
 */
async function entry(indata?: PublicKey) {
  // If we get a PublicKey
  if (indata) {
    // Construct COption instance
    const coption = COption.fromPublicKey(indata);
    console.log(""Testing COption with "" + indata.toBase58());
    // Serialize it
    let copt_ser = coption.encode();
    console.log(""copt_ser "", copt_ser);
    // Deserialize it
    const tdone = COption.decode(copt_ser);
    console.log(tdone);
    // Validate contains PublicKey
    if (tdone[""noneOrSome""] == 1) {
      console.log(""pubkey: "" + new PublicKey(tdone[""pubKeyBuffer""]).toBase58());
    }
    /*
            Output:
            Testing COption with A94wMjV54C8f8wn7zL8TxNCdNiGoq7XSN7vWGrtd4vwU
            copt_ser  Buffer(36) [1, 0, 0, 0, 135, 202, 71, 214, 68, 105, 98, 176, 211, 130, 105, 2, 55, 187, 86, 186, 109, 176, 80, 208, 77, 100, 221, 101, 20, 203, 149, 166, 96, 171, 119, 35, buffer: ArrayBuffer(8192), byteLength: 36, byteOffset: 1064, length: 36]
            COption {noneOrSome: 1, pubKeyBuffer: Uint8Array(32)}
            pubkey: A94wMjV54C8f8wn7zL8TxNCdNiGoq7XSN7vWGrtd4vwU
        */
  } else {
    console.log(""Testing COption with null"");
    // Construct COption instance
    const coption = COption.fromPublicKey();
    // Serialize it
    const copt_ser = coption.encode();
    console.log(copt_ser);
    // Deserialize it
    const tdone1 = COption.decode(copt_ser);
    console.log(tdone1);
    // Validate does NOT contains PublicKey
    if (tdone1[""noneOrSome""] == 1) {
      throw Error(""Expected no public key"");
    } else console.log(""pubkey: null"");
   ","[ 4.52214926e-02  5.23491949e-02 -8.23889002e-02 -5.05851023e-02
 -5.96978925e-02 -5.83692826e-02  4.65160608e-02  1.96730308e-02
 -6.41305223e-02 -4.48733270e-02  2.07915679e-02 -2.95851678e-02
 -8.29466134e-02 -2.66810916e-02  3.08852885e-02 -1.45306988e-02
  5.27573042e-02  8.27936362e-03  1.68447942e-02  2.91569456e-02
  7.89759532e-02  5.40469810e-02 -2.21290309e-02  1.79449189e-02
 -7.45007098e-02  2.18963530e-02  4.64504724e-03 -4.18684147e-02
 -1.77647490e-02  7.00200500e-04  1.53614888e-02  3.44065875e-02
 -2.67176367e-02 -1.08970217e-02  3.01706791e-02  4.87941541e-02
  8.65551755e-02 -5.16800657e-02  1.71180293e-02 -2.49803392e-03
  3.73005457e-02  9.59382802e-02 -1.04759976e-01 -1.95368789e-02
  2.72614490e-02 -6.66339770e-02  2.45522205e-02 -1.38234366e-02
 -5.96983731e-02  3.20569500e-02  3.41972746e-02  7.97297433e-02
 -2.72660032e-02  7.17462152e-02 -8.72904621e-03 -1.18622817e-02
 -5.81046827e-02 -3.57790589e-02  2.37173159e-02  3.90258362e-03
 -8.15607700e-03 -5.04983542e-03  5.92737785e-03 -2.32697148e-02
  2.94056293e-02 -3.94290760e-02  2.97999773e-02  2.52358560e-02
  8.11371133e-02 -1.22997602e-02  1.69688445e-02 -6.29106760e-02
 -1.12261716e-02  7.48712569e-03  3.91277522e-02  9.72803012e-02
 -2.85399258e-02 -6.77992776e-02 -1.76617131e-02 -9.96545181e-02
  7.38722011e-02 -7.33522698e-02  5.70049649e-03  1.89109426e-02
 -2.47083995e-02  8.05074200e-02 -6.56394288e-02 -2.94864886e-02
  2.77023390e-03 -2.70416215e-02 -5.50389960e-02 -5.64964488e-02
 -3.23228799e-02  2.92558111e-02 -7.42002949e-02 -4.89232726e-02
 -2.61704661e-02 -8.71322211e-03  7.46848956e-02  3.84984016e-02
 -3.17219645e-02  8.86651967e-03  6.24950044e-02 -3.25148068e-02
 -1.03583328e-01 -7.67298490e-02 -1.67345512e-03  3.44690401e-03
 -6.57148883e-02  5.69098592e-02 -9.34544206e-03  8.50316733e-02
  7.74732679e-02 -1.30314287e-02 -1.78985391e-02  4.16359752e-02
 -1.06338814e-01 -3.63783650e-02  3.55391130e-02  1.26438634e-02
  9.31560844e-02 -1.21823605e-02 -1.49110621e-02  5.53584471e-03
  2.51928866e-02 -6.41775057e-02 -1.52894547e-02  4.94222898e-33
  7.83134550e-02 -3.63401920e-02  5.63048087e-02  6.70700818e-02
  2.49664839e-02 -4.37071025e-02  1.85971297e-02 -3.07323392e-02
 -8.32405500e-03  3.14220600e-02 -1.01767024e-02 -1.07795328e-01
 -1.96859296e-02  4.92214039e-02  2.05171369e-02  1.51636079e-02
 -8.10965337e-03  1.68491155e-02  2.52699032e-02  5.14744893e-02
  3.01436912e-02  1.00040041e-01 -1.01145901e-01 -2.99989544e-02
  5.95764406e-02  4.58176655e-05 -7.20691532e-02 -1.46083999e-02
 -4.25427817e-02  3.37408520e-02  4.54715900e-02  6.34666011e-02
  4.65328917e-02  2.43039429e-02  2.72155516e-02 -1.86153464e-02
 -2.89778821e-02  2.79174466e-02 -1.17767274e-01 -9.62644741e-02
  8.48876983e-02 -5.09520322e-02 -8.54559317e-02  6.01098575e-02
  3.32689621e-02 -1.26308218e-01 -1.26888808e-02 -6.67816401e-02
  6.90375045e-02 -4.13921895e-03  4.12530936e-02  2.27906462e-02
 -5.34297042e-02  2.42907498e-02  1.37664862e-02 -2.65797712e-02
  1.07291238e-02 -7.95110967e-03  4.89802519e-03  1.13255642e-01
 -3.42639014e-02  3.55633125e-02 -3.65576819e-02 -2.67402977e-02
  1.09051280e-02 -1.64095946e-02 -3.28197740e-02 -3.75762433e-02
 -1.67250319e-03 -3.48509178e-02 -4.93182018e-02  3.67403515e-02
  3.97473434e-03 -2.31581721e-02  9.05200560e-03  3.26479226e-02
 -3.71616445e-02 -5.01809642e-03 -2.65023373e-02 -1.27311751e-01
 -2.39691455e-02  7.09893554e-03 -5.36330827e-02  8.32718760e-02
 -7.28769228e-02  5.92935123e-02  8.11727159e-03 -5.23206452e-03
  4.46750186e-02  5.19928560e-02 -3.81073505e-02 -4.11427692e-02
 -3.24577354e-02 -6.67338669e-02 -7.11254077e-03 -6.88990741e-33
  2.79300958e-02 -1.93753690e-02 -3.41153741e-02  7.68426210e-02
 -1.05333082e-01 -2.52563488e-02  4.80700433e-02  7.99716357e-03
 -3.36272456e-02 -4.23049293e-02 -6.77383170e-02 -8.29093345e-03
  5.77246137e-02  5.21720480e-03  5.92024922e-02 -1.76615361e-02
 -4.87814210e-02 -1.05841167e-01 -1.82297099e-02  2.40093898e-02
  6.22113682e-02 -1.87715665e-02  7.24356845e-02  2.05859542e-02
 -1.26265343e-02  1.46112880e-02 -3.22078876e-02  2.45201625e-02
  1.35274231e-01  2.99088061e-02 -3.84696131e-03  4.59862351e-02
  5.26979119e-02 -2.60509085e-02 -4.16609272e-03 -1.55299045e-02
  9.36615244e-02  1.00147896e-01 -1.39668658e-02  4.57131937e-02
 -9.46427956e-02 -9.22673568e-03 -8.86737928e-02 -5.21305390e-02
  5.30804135e-02 -1.74648762e-02  4.38295342e-02 -4.59530298e-03
  5.72108738e-02  4.07976098e-03  5.22377640e-02 -7.28275394e-03
 -1.21459207e-02 -2.82593928e-02  4.15366180e-02 -1.21260928e-02
  6.22578189e-02 -1.44511968e-01  3.67659889e-02  3.66103500e-02
  2.68005836e-03 -8.03665817e-02  8.15744791e-03  3.40353348e-03
  5.59742674e-02 -6.58190623e-02 -4.35049050e-02 -9.38916132e-02
  2.19824798e-02  1.23066194e-02 -4.24267538e-02  6.01206310e-02
  7.67033687e-03  5.63900769e-02  1.58627957e-01 -1.02477096e-01
 -8.13425779e-02 -4.73938175e-02  5.46032935e-02  8.68046880e-02
 -9.68353674e-02  2.48608296e-03  2.12851558e-02  1.01226822e-01
  9.16687846e-02 -3.09654828e-02 -2.17440706e-02 -2.56647486e-02
 -3.93875055e-02 -3.23427841e-02 -3.71567048e-02 -3.66371460e-02
 -5.05534299e-02 -4.62509468e-02 -2.98224334e-02 -4.83733444e-08
 -8.21060389e-02 -8.04207399e-02 -4.53942977e-02  1.01495549e-01
 -4.14112024e-02 -1.02903554e-02 -2.34962441e-02 -3.00691370e-02
  7.69496709e-02 -1.08208075e-01 -2.79236510e-02  3.06773353e-02
  2.91257221e-02 -4.83591408e-02  6.20242693e-02 -3.66757736e-02
  6.35011122e-02 -7.88938925e-02 -6.24909662e-02 -1.05508137e-02
  5.14372438e-03 -2.96540582e-03 -8.06881785e-02  6.36537140e-03
  6.36702552e-02  5.39476238e-02  5.22256345e-02  6.11159764e-02
  1.58642009e-02  3.95043008e-02  5.66013716e-03 -2.29277089e-02
  4.78894822e-02  3.91383320e-02 -2.71100234e-02 -7.06703588e-02
  3.08920676e-03  4.87795137e-02  2.48254626e-03  6.26195073e-02
  1.01066627e-01 -3.43460054e-03 -1.17677972e-01  4.81506214e-02
  7.56981149e-02  4.86116065e-03  2.60679238e-02  5.54151312e-02
  2.20670756e-02  5.11222146e-03 -2.04055849e-02 -3.49658728e-02
  5.71450181e-02  4.87186164e-02 -4.56322208e-02 -5.27329557e-02
  4.61263256e-03 -5.16869649e-02  4.90337312e-02  2.37966627e-02
  4.19187881e-02  1.65523659e-03  6.70320727e-03 -2.46008020e-02]"
"/*
            Output:
            Testing COption with null
            Buffer(36)[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, buffer: ArrayBuffer(8192), byteLength: 36, byteOffset: 2272, length: 36]
            COption { noneOrSome: 0, pubKeyBuffer: Uint8Array(32) }
            pubkey: null
        */
  }
}

// Test with PublicKey
entry(new PublicKey(""A94wMjV54C8f8wn7zL8TxNCdNiGoq7XSN7vWGrtd4vwU""));
console.log("""");
// Test without PublicKey
entry();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138fn main() {}

#[cfg(test)]
mod tests {
    use arrayref::{array_ref, array_refs};
    use solana_program::{program_option::COption, pubkey::Pubkey};

    /// Emulate how COption is 'unpacked'
    fn deser_option(data: &[u8]) -> COption<Pubkey> {
        // Map the data block
        let ain = array_ref![data, 0, 36];
        let (base, key) = array_refs![ain, 4, 32];
        // Get the SOME or NONE u32
        let nos = u32::from_le_bytes(*base);
        // Construct the COption accordingly
        let opt: COption<Pubkey> = if nos == 0 {
            COption::None
        } else {
            COption::Some(Pubkey::new_from_array(*key))
        };
        opt
    }
    #[test]
    fn btest() {
        // From Typescript with borsh'ing
        let copt = [
            1u8, 0, 0, 0, 135, 202, 71, 214, 68, 105, 98, 176, 211, 130, 105, 2, 55, 187, 86, 186,
            109, 176, 80, 208, 77, 100, 221, 101, 20, 203, 149, 166, 96, 171, 119, 35,
        ];
        // Emulate COption deserialization
        let coption = deser_option(&copt);
        if coption.is_some() {
            println!(""{:?}"", coption.expect(""Uh-oh""));
        }
        // As a Borsh Struct
        #[derive(BorshDeserialize, BorshSerialize, Debug)]
        struct TOption(u32, [u8; 32]);
        let toption = TOption::try_from_slice(&copt).unwrap();
     ","[ 5.32196797e-02  1.00075128e-02 -1.61999762e-01 -3.48537974e-02
 -6.14148751e-02 -2.94065811e-02  3.92599851e-02 -7.05315592e-03
 -4.03631665e-03  1.72239670e-05  5.42979725e-02 -4.28921841e-02
 -3.71687370e-03 -1.82200503e-02 -9.60345101e-03 -2.10110727e-03
 -1.13341652e-01 -5.48570417e-02 -2.02210229e-02  4.00596745e-02
  6.87225088e-02 -2.29619537e-02 -6.57504648e-02 -7.08804876e-02
 -1.42307645e-02  3.72860171e-02  5.55749051e-03  3.38223279e-02
  1.99186970e-02 -2.55459268e-02  5.76783940e-02  5.40853590e-02
  2.28537507e-02  6.66765170e-03  4.64427471e-02  6.41111657e-02
  8.48879665e-02 -2.84900945e-02  1.39731094e-02 -8.89822654e-03
 -3.90947312e-02  2.39473619e-02 -3.30441631e-02  6.91640675e-02
  5.23408614e-02 -3.57821435e-02 -1.09385569e-02  6.16051145e-02
 -6.58849766e-03 -2.57338863e-02 -6.14485592e-02  8.45672339e-02
 -1.89165007e-02  3.30602340e-02  3.76463979e-02 -9.35649052e-02
 -4.03080732e-02 -3.23617719e-02  7.96798095e-02  2.79317424e-02
 -3.27846780e-02 -2.36916263e-02 -8.52278806e-03 -4.97230589e-02
 -2.61633866e-03  2.27447320e-02  9.95906591e-02 -8.48937482e-02
  3.67985368e-02 -7.17191845e-02 -5.81472628e-02 -1.02132708e-02
  1.89889129e-02  5.93857951e-02 -5.02834059e-02  2.91885398e-02
 -5.89210950e-02 -4.97720912e-02  5.49770892e-02  3.20378169e-02
  2.10296060e-03 -5.28902039e-02  6.90670609e-02  6.13107979e-02
  2.25807186e-02  6.92272484e-02 -1.02301344e-01 -2.73632556e-02
 -1.35340523e-02  3.92176583e-02 -4.93066870e-02  4.49413471e-02
 -7.92789832e-02  8.59329030e-02  9.48817879e-02 -3.00579984e-02
  1.09083377e-01  5.72871137e-03 -5.08930311e-02  1.23444006e-01
  4.03794134e-03  2.50304043e-02 -5.83787188e-02 -2.18784809e-03
  6.38118293e-03  2.97161117e-02  9.02438760e-02  2.12947559e-02
 -9.47653204e-02 -7.38419069e-04 -3.30953859e-02  5.18271737e-02
  4.45995107e-02 -2.04426143e-02  2.32623946e-02 -2.30063647e-02
 -4.38346304e-02  3.32316831e-02 -7.04654679e-03 -2.15035491e-02
  2.52944194e-02  3.19503918e-02 -4.47292142e-02  2.92879939e-02
 -1.03756581e-02  4.13351171e-02 -3.91018875e-02  4.71999516e-33
  4.44385707e-02  9.61619336e-03  4.29451689e-02  2.52222139e-02
 -2.26057228e-02  9.68441740e-03  2.87078377e-02  7.71842971e-02
  1.02340197e-02 -4.06294651e-02 -2.49984550e-05 -7.24058375e-02
  2.78681386e-02 -4.20201048e-02  3.99327129e-02  1.77966207e-02
 -8.92782025e-03  9.40415822e-03 -1.36596905e-02 -3.32492031e-02
 -2.50218306e-02  1.99869107e-02 -1.56581458e-02 -5.91626950e-02
 -8.42274819e-03 -1.42180081e-02 -2.25671474e-02 -6.91479146e-02
 -5.40444534e-03  1.49158854e-02 -1.09373806e-02  1.12333558e-01
 -8.29186291e-02 -3.09823155e-02  4.91527580e-02 -5.94400354e-02
  9.14716721e-03  4.26671794e-03 -1.11340784e-01 -1.84445363e-02
 -2.71587651e-02 -4.91333678e-02 -2.65299855e-03 -2.82428274e-03
 -1.64009966e-02 -1.17739215e-01 -6.13461658e-02  4.36589196e-02
  3.51239275e-03  2.06330009e-02 -3.02859358e-02  1.46141484e-01
 -6.44014329e-02  2.92789424e-03 -5.66782914e-02 -6.09475784e-02
  4.86705359e-03  2.05841847e-02 -1.56803839e-02  1.13756157e-01
 -5.23894764e-02  3.63779515e-02 -3.19377072e-02  6.70341700e-02
 -3.97414602e-02 -5.92889916e-03 -8.86616185e-02 -4.36471589e-02
  5.39303645e-02  1.77396263e-03 -4.81803576e-03  1.51377348e-02
  1.05204841e-03  3.18077207e-02 -2.65265722e-02 -5.97336181e-02
 -1.65599305e-02 -5.24921296e-03 -2.65562143e-02 -1.54302880e-01
  1.43031269e-01  6.95243180e-02  1.21469991e-02  1.37172663e-03
 -1.46509046e-02 -1.94768291e-02 -2.68190000e-02 -6.68589920e-02
  9.19456885e-04 -1.14684947e-01 -8.39890912e-03  3.88585962e-02
 -1.47832362e-02 -1.24922223e-01  1.22705474e-02 -5.51617916e-33
  7.86391124e-02  2.90346611e-02 -7.73619413e-02  3.97796966e-02
 -3.01924068e-02 -1.98596269e-02  9.70956534e-02 -4.69922684e-02
 -1.78735554e-02 -3.34683768e-02  3.28113325e-02  1.85946394e-02
  5.30434251e-02  3.49225216e-02  1.91553719e-02 -1.73008628e-02
 -5.00554033e-02  9.43992846e-03  2.73295939e-02 -1.78471897e-02
  3.05598229e-02  5.33555970e-02  2.48184986e-02  1.55916596e-02
 -6.76903054e-02 -3.69694680e-02 -4.66933437e-02  7.67350793e-02
  3.00637186e-02  3.14653739e-02  1.12383135e-01  6.63323924e-02
 -4.88126203e-02 -2.75314506e-03  5.44670038e-02 -2.12607272e-02
  4.48298864e-02  1.96996015e-02  3.97740602e-02  9.18587819e-02
  3.92518565e-02 -1.84708051e-02  1.70369186e-02 -1.85096287e-03
  5.60698211e-02  2.75177485e-03  9.25022215e-02 -4.01456840e-04
  1.75930141e-03 -6.19635209e-02  4.43111956e-02 -2.28697136e-02
 -3.59714366e-02 -9.39687062e-03  3.61795537e-02  1.05894944e-02
 -1.50502054e-02 -3.28638963e-02  8.62636939e-02  2.47601029e-02
  1.98702458e-02 -1.01345452e-02  2.50786394e-02  4.68580192e-03
  1.26434773e-01 -1.46353796e-01 -2.80785970e-02  4.18083407e-02
  2.56626103e-02 -1.77509859e-02  3.21545675e-02 -3.17764282e-02
 -2.12027524e-02  3.72009203e-02  4.23008129e-02  2.55057905e-02
 -2.08288990e-02  9.88788251e-03  1.29831228e-02  6.76812679e-02
  6.38559321e-03  1.50716752e-02  6.00303523e-03  3.24228667e-02
  4.66203690e-02  3.46493274e-02  1.17444396e-01  8.83931667e-03
 -9.34661105e-02 -1.57696214e-02 -2.96631362e-03  4.98918332e-02
  6.38628053e-03  3.90524268e-02  8.68181437e-02 -6.04991897e-08
  7.54612451e-03 -3.78040224e-02 -6.76107034e-02  7.62742609e-02
 -3.11640417e-03 -2.85771750e-02 -4.14974801e-03 -1.46616876e-01
 -1.89101752e-02 -1.61723211e-01 -5.73977377e-05 -1.38723850e-02
 -1.64230820e-02 -4.67234198e-03  3.63160530e-03 -1.01601131e-01
 -5.49838394e-02 -8.24975818e-02 -4.27743569e-02 -2.87656430e-02
 -5.37312366e-02 -4.80042771e-02 -1.29544334e-02  1.66484434e-02
 -4.46193516e-02 -7.48300832e-03  4.50535677e-02  4.14547734e-02
  6.15831614e-02  2.18210425e-02 -1.45697803e-03  5.12617677e-02
  6.52613938e-02 -1.02440514e-01 -8.29667673e-02  7.71767572e-02
  4.91208658e-02  4.08631861e-02  5.21210656e-02  1.54417539e-02
 -2.11326629e-02 -5.11246920e-02 -9.06249806e-02 -1.96660403e-02
  4.27727476e-02 -4.64015491e-02 -1.15124159e-03  3.04189902e-02
 -1.52661465e-02 -8.13675374e-02  2.94324607e-02  1.95055157e-02
  3.45124006e-02  3.09705660e-02  2.49198247e-02 -4.02355716e-02
 -8.37972313e-02  5.04906252e-02  4.14171405e-02  1.01680838e-01
  2.25948542e-02  3.83373052e-02 -4.46206443e-02 -3.25094424e-02]"
"  let pkey = Pubkey::new_from_array(toption.1);
        println!(""Some = {:?} Pubkey = {:?}"", toption.0, pkey);
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142#  Các nguồn tài liệu khácBorsh Specificationopen in new windowRust Borshopen in new windowTS/JS Borshopen in new windowPython Borshopen in new windowPython Borsh Documentationopen in new windowSolana CLI Program Template2open in new window # Nâng cấp dữ liệu một Program Account# Làm thế nào để có thể nâng cấp dữ liệu trong Program Account?Khi bạn tạo một Program, mỗi Account dữ liệu sẽ được gán cho Program đó với cấu trục dữ liệu cụ thể. Nếu bạn từng nâng cấp Program và Program này dùng để suy ra các PDA, bạn chắc hẳn đã phải đau đầu với hàng tá những Account với cấu trúc gắn với Program cũ.Với việc đánh phiên bản cho Account, bạn có thể dễ dàng nâng cấp cấu trúc mới cho các Account cũ .Lưu ýĐây chỉ là một trong rất nhiều cách khác nhau để nâng cấp dữ liệu trong Program Owned Accounts (POA).# Ngữ cảnhĐể đánh phiên bản và nâng cấp dữ liệu trong Account, chúng ta sẽ phải cung cấp một id cho từng Account. Id này sẽ cho phép chúng ta định rõ phiên bản của Account khi truyền nó cho Program, và như vậy có thể xử lý Account một cách chính xác.Quan sát trạng thái bên dưới của Account và Program:AccountInstructionProcessorPress </> button to view full source//! @brief account_state manages account data

use arrayref::{array_ref, array_refs};
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    msg,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack, Sealed},
};
use std::{io::BufWriter, mem};

/// Currently using state. If version changes occur, this
/// should be copied to another serializable backlevel one
/// before adding new fields here
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentCurrent {
    pub somevalue: u64,
}

/// Maintains account data
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    data_version: u8,
    account_data: AccountContentCurrent,
}

impl ProgramAccountState {
    /// Signal initialized
    pub fn set_initialized(&mut self) {
        self.is_initialized = true;
    }
    /// Get the initialized flag
    pub fn initialized(&self) -> bool {
        self.is_initialized
    }
    /// Gets the current data version
    pub fn version(&self) -> u8 {
        self.data_version
    }
    /// Get the reference to content structure
    pub fn content(&self) -> &AccountContentCurrent {
        &self.account_data
    }
    /// Get the mutable reference to content structure
    pub fn content_mut(&mut self) -> &mut AccountContentCurrent {
        &mut self.account_data
    }
}

/// Declaration of the current data version.
pub const DATA_VERSION: u8 = 0;
/// Account allocated size
pub const ACCOUNT_ALLOCATION_SIZE: usize = 1024;
/// Initialized flag is 1st byte of data block
const IS_INITIALIZED: usize","[-2.82382406e-02 -2.87202392e-02 -3.62807065e-02 -9.42280218e-02
 -4.00604457e-02  9.66002047e-03  1.00954197e-01  5.07013947e-02
  4.41633463e-02  8.16090684e-03 -9.81384423e-04 -6.53991228e-05
  1.57350544e-02 -5.42474724e-02  4.15214673e-02 -3.82272862e-02
 -1.60030425e-01 -2.31450871e-02 -2.35620886e-02 -5.77096790e-02
 -4.28825989e-03  1.18939904e-02 -4.81341742e-02 -3.07743233e-02
 -3.65407914e-02  3.57034616e-02 -4.22748737e-03  9.70004573e-02
  3.04650441e-02 -1.67843811e-02  2.66590044e-02  2.24651117e-03
  3.94223112e-04 -2.68711871e-03  8.14624280e-02  5.03699072e-02
 -5.21081164e-02 -1.30328098e-02  1.54061373e-02 -4.49738093e-02
 -2.89440136e-02  1.51608642e-02 -1.36040822e-01 -6.19182969e-03
  5.98604716e-02 -8.92004278e-03 -9.55956578e-02 -1.00389346e-02
 -4.18863334e-02  9.73989815e-03 -6.54549375e-02  2.31644399e-02
 -1.70141961e-02 -2.60608029e-02 -1.30882217e-02 -3.51998955e-02
 -4.56883200e-03 -2.51433626e-02  3.37661617e-02  2.61888038e-02
 -9.21712071e-02  1.81399956e-02 -7.79225901e-02 -1.63090359e-02
  1.32358456e-02  3.22774500e-02 -9.27194729e-02  2.60060951e-02
  3.72827612e-02  2.22426676e-03 -1.42746970e-01 -1.73454965e-03
 -4.54316735e-02  8.96590296e-03 -1.24588996e-01 -6.18751384e-02
 -4.56402786e-02 -6.73983432e-03  1.91974584e-02 -2.34397817e-02
  2.06903126e-02 -4.80448194e-02  9.25189629e-03 -2.67899828e-03
  3.62071693e-02  3.53666581e-02 -1.05989128e-01 -1.06634041e-02
  3.45893241e-02  1.72347680e-03 -3.32062505e-02 -4.87942360e-02
 -2.43198760e-02  8.12864155e-02  5.75101674e-02  9.99086723e-03
  7.52416998e-02  2.82082222e-02 -4.72959131e-03  8.41406733e-02
 -5.36631187e-03  6.18384257e-02  1.02915421e-01 -1.24684898e-02
 -7.20688142e-03  3.47244404e-02  9.25656557e-02 -2.49539316e-02
 -3.94859724e-02 -6.30288273e-02 -2.74910443e-02  1.67543720e-02
  6.13197014e-02 -8.77961665e-02  2.54647937e-02  2.70711742e-02
  4.77453182e-03  3.50130163e-02  4.52703889e-03  3.65923531e-02
  5.55198118e-02 -4.38199341e-02 -4.13998775e-02 -3.57958511e-03
 -9.82356593e-02 -1.15532223e-02  1.13996817e-02  2.10981253e-32
  1.71627272e-02 -5.10816649e-02 -1.09694377e-02 -2.93308329e-02
  8.34102258e-02  3.16432677e-02  5.52167557e-03  4.50884998e-02
 -1.19854584e-01 -2.32523419e-02 -4.46310872e-03 -7.84585029e-02
 -4.02238965e-02 -4.86532599e-02  6.27398640e-02 -4.04218808e-02
  1.64446663e-02  4.81953993e-02 -5.13540953e-02 -4.97319251e-02
  5.53055143e-04  5.92205524e-02  1.10595021e-02  2.35736053e-02
  3.77872139e-02  2.17825063e-02 -5.73874116e-02 -6.24563247e-02
 -2.77094413e-02  3.17280628e-02  9.09454655e-03  7.10038319e-02
 -9.67584029e-02 -4.72315513e-02 -4.33891714e-02 -5.35769342e-03
 -3.21359374e-02 -6.16626292e-02  7.80531252e-03 -7.05319420e-02
  4.80074547e-02 -5.66021027e-03  4.43693474e-02  3.91470790e-02
 -4.88504581e-02 -3.20339911e-02 -2.22188141e-02  9.66273099e-02
  3.50428047e-03  2.71160025e-02 -4.07323912e-02  1.54723544e-02
 -1.75924733e-01  1.23708369e-02 -1.14303911e-02 -1.02079771e-01
 -4.85549010e-02  6.59609810e-02  1.85839217e-02  1.95681583e-02
  2.37948112e-02  5.20401448e-02  3.46666761e-02  8.38676095e-02
 -1.67440064e-03 -7.20858872e-02  1.27525534e-02  6.71848729e-02
  3.45145850e-06  1.49340509e-02 -5.41524962e-02  1.56374127e-02
 -6.38457760e-02  2.36772094e-02 -3.39473435e-03 -4.99331914e-02
  5.42185567e-02  3.04619828e-03  3.90182212e-02 -2.62649767e-02
  1.23853676e-01  4.46899934e-03 -4.66175973e-02 -6.45079613e-02
  3.30513198e-04  1.40126878e-02  5.00762761e-02 -2.44211853e-02
 -1.25501756e-04 -6.00652359e-02 -4.12952676e-02 -2.62414981e-02
  4.46618125e-02 -3.38549763e-02 -7.77757391e-02 -2.05320263e-32
  9.82938558e-02 -2.59838905e-02 -9.98047180e-03  6.60364423e-03
 -8.96678343e-02  2.22342499e-02  7.58722723e-02 -5.94209246e-02
  5.08875540e-03 -1.19008329e-02  7.13492557e-03  4.83421274e-02
  4.33458015e-02  4.58008088e-02  1.07195504e-01 -4.23025377e-02
 -2.99660973e-02  7.37252012e-02 -5.75572513e-02 -3.25911865e-02
  5.16916290e-02 -5.38302995e-02 -4.48672883e-02  9.75041613e-02
  8.02752469e-03 -2.58464329e-02 -3.15649458e-03  1.02906646e-02
  1.66730024e-02  6.15941063e-02 -1.49675622e-03  9.11626779e-03
 -8.42314512e-02  1.11492582e-01  3.19934003e-02 -9.11082476e-02
  9.91140455e-02 -1.72192100e-02 -4.64640334e-02  6.13084286e-02
  9.07044262e-02 -1.66418571e-02  8.31430592e-03  3.60232033e-02
  3.40878288e-03  1.09577542e-02  3.84127274e-02  1.68287512e-02
 -2.55718008e-02 -9.94179174e-02  7.26572201e-02 -6.02374785e-02
  1.24756498e-02 -4.67657149e-02 -4.06530015e-02 -1.19072106e-03
  5.33723757e-02 -3.42680775e-02 -7.55629987e-02 -1.08376123e-01
  4.59659845e-02 -5.68135008e-02 -4.22511697e-02 -1.02000562e-02
  7.30904937e-02 -8.30825940e-02 -6.12482354e-02  2.46472079e-02
  3.65392934e-03 -1.47484377e-01 -3.08841392e-02 -9.22817290e-02
  1.08411498e-02  2.23580319e-02 -2.33524852e-02  8.89941305e-02
  4.87497114e-02 -3.71073559e-02 -2.95379497e-02  2.64302175e-02
 -2.04745401e-02  3.11668292e-02  9.06280056e-03 -3.04358173e-02
 -2.71511115e-02 -2.95468629e-03  3.10820714e-02  1.68156922e-02
 -4.58135866e-02 -3.34108025e-02 -1.58968493e-02  4.83464338e-02
  6.69561774e-02  7.67423660e-02  8.29347002e-04 -6.94126783e-08
 -3.70679498e-02 -7.30724856e-02  1.93264298e-02  5.04575931e-02
 -7.93001708e-03  1.42915873e-03 -3.44667807e-02 -5.06241210e-02
 -2.66832076e-02 -9.06775594e-02  3.18087265e-02  5.25386482e-02
 -1.22258039e-02 -2.53770780e-02  3.91473901e-03  8.41991678e-02
  3.21907620e-03  1.12786319e-03  1.93606485e-02 -1.45687591e-02
  2.25374233e-02  2.97630858e-02  9.83930454e-02  7.28666782e-02
 -9.26701054e-02  1.73323210e-02 -4.21938635e-02  1.14472136e-01
  2.72754692e-02 -3.77264358e-02  1.14149466e-01 -3.38884145e-02
  5.24528436e-02  1.38061086e-03  2.67520938e-02  5.42129837e-02
  5.47462283e-03  1.83513965e-02 -2.90963966e-02 -2.12803297e-02
  4.35345992e-02 -1.13583878e-01 -4.24140058e-02  6.52590394e-03
 -4.61497046e-02  2.12980658e-02 -3.78309265e-02  2.50698552e-02
  6.14595637e-02 -6.90284520e-02 -5.07623330e-02  1.59032438e-02
  1.26408175e-01 -1.14913331e-02 -1.72000509e-02  4.57677916e-02
  4.87861736e-03 -5.86893735e-03  5.86675294e-02  8.63030460e-03
  5.28247170e-02  6.58834204e-02 -4.57140803e-03  2.69742329e-02]"
"= 1;
/// Data version (current) is 2nd byte of data block
const DATA_VERSION_ID: usize = 1;

/// Previous content data size (before changing this is equal to current)
pub const PREVIOUS_VERSION_DATA_SIZE: usize = mem::size_of::<AccountContentCurrent>();
/// Total space occupied by previous account data
pub const PREVIOUS_ACCOUNT_SPACE: usize =
    IS_INITIALIZED + DATA_VERSION_ID + PREVIOUS_VERSION_DATA_SIZE;

/// Current content data size
pub const CURRENT_VERSION_DATA_SIZE: usize = mem::size_of::<AccountContentCurrent>();
/// Total usage for data only
pub const CURRENT_USED_SIZE: usize = IS_INITIALIZED + DATA_VERSION_ID + CURRENT_VERSION_DATA_SIZE;
/// How much of 1024 is used
pub const CURRENT_UNUSED_SIZE: usize = ACCOUNT_ALLOCATION_SIZE - CURRENT_USED_SIZE;
/// Current space used by header (initialized, data version and Content)
pub const ACCOUNT_STATE_SPACE: usize = CURRENT_USED_SIZE + CURRENT_UNUSED_SIZE;

/// Future data migration logic that converts prior state of data
/// to current state of data
fn conversion_logic(src: &[u8]) -> Result<ProgramAccountState, ProgramError> {
    let past = array_ref![src, 0, PREVIOUS_ACCOUNT_SPACE];
    let (initialized, _, _account_space) = array_refs![
        past,
        IS_INITIALIZED,
        DATA_VERSION_ID,
        PREVIOUS_VERSION_DATA_SIZE
    ];
    // Logic to uplift from previous version
    // GOES HERE

    // Give back
    Ok(ProgramAccountState {
        is_initialized: initialized[0] != 0u8,
        data_version: DATA_VERSION,
        account_data: AccountContentCurrent::default(),
    })
}
impl Sealed for ProgramAccountState {}

impl IsInitialized for ProgramAccountState {
    fn is_initialized(&self) -> bool {
        self.is_initialized
    }
}

impl Pack for ProgramAccountState {
    const LEN: usize = ACCOUNT_STATE_SPACE;

    /// Store 'state' of account to its data area
    fn pack_into_slice(&self, dst: &mut [u8]) {
        let mut bw = BufWriter::new(dst);
        self.serialize(&mut bw).unwrap();
    }

    /// Retrieve 'state' of account from account data area
    fn unpack_from_slice(src: &[u8]) -> Result<Self, ProgramError> {
        let initialized = src[0] != 0;
        // Check initialized
        if initialized {
            // Version check
            if src[1] == DATA_VERSION {
                msg!(""Processing consistent data"");
                Ok(
                    ProgramAccountState::try_from_slice(array_ref![src, 0, CURRENT_USED_SIZE])
                        .unwrap(),
                )
       ","[ 6.05077483e-02  5.87105192e-02 -4.94186506e-02  2.96800975e-02
  4.16794010e-02 -6.96346983e-02  1.70267969e-02  7.77600333e-02
 -1.58356428e-02  6.39581233e-02 -2.14534234e-02 -1.51824160e-02
  2.60659419e-02 -7.10370466e-02 -6.56216666e-02  2.02682018e-02
 -6.29547760e-02 -1.21643953e-02 -2.80880812e-03  7.13084359e-03
  1.67279001e-02 -3.11938711e-02 -9.45507176e-03 -1.72009002e-02
  9.32141989e-02  5.45952991e-02 -5.50356098e-02  6.56225085e-02
  5.93713336e-02 -8.36057588e-02  9.02727172e-02  1.32481782e-02
  1.15004377e-02  5.04909307e-02 -1.64552277e-03  2.13228315e-02
 -4.32668999e-02 -8.61430988e-02 -7.72022828e-03  3.26287560e-02
 -2.47786008e-02  9.67853144e-02 -4.77229320e-02  5.69643714e-02
  3.10309120e-02  1.04976632e-01 -1.08828150e-01  4.56623584e-02
 -2.15844437e-02  2.40405761e-02  2.77330317e-02  6.80117914e-03
 -5.12939766e-02  4.92519364e-02  3.31244245e-02 -2.24058516e-02
 -2.62450781e-02  4.62691933e-02 -4.07573059e-02  9.61056352e-02
 -3.68046910e-02  8.07296112e-03  3.77132595e-02 -3.44307981e-02
 -1.01559106e-02  3.20494897e-03  1.97030883e-02  5.28709628e-02
 -2.46393606e-02  1.82855297e-02 -7.15479180e-02  5.61160967e-02
 -1.05112053e-01 -9.90754366e-03 -6.67975545e-02 -4.20234539e-02
  1.73649825e-02  3.94096375e-02 -3.76159661e-02 -7.41282776e-02
 -3.36720496e-02  1.51700689e-03 -6.53895549e-03 -5.02713881e-02
 -5.81944687e-03  1.33278519e-02  1.88782997e-02 -3.51443365e-02
 -6.20391266e-03 -1.73789803e-02  4.86863777e-03  5.85908368e-02
 -4.98640875e-04  4.99487072e-02  7.70334229e-02  1.24115637e-02
 -4.02912982e-02  3.71922329e-02  1.83644816e-02  5.85845932e-02
  2.05736645e-02  8.59346092e-02  7.79960211e-03  4.05550711e-02
  4.32171253e-03 -7.10365698e-02  3.81094776e-02  8.11801404e-02
 -6.44024387e-02  3.87569405e-02  4.30395752e-02  6.18031062e-02
 -6.82619512e-02 -1.70340706e-02  1.27139121e-01 -3.77652533e-02
  1.71535350e-02 -2.07794420e-02  3.47418375e-02  3.17817368e-02
  1.12093695e-01 -1.16682854e-02 -3.45477387e-02 -3.70116644e-02
 -1.39851540e-01 -2.38857735e-02  3.35821137e-02  7.65263647e-33
  3.47948335e-02 -7.96675757e-02 -4.20286953e-02  1.10640131e-01
 -1.13389175e-02  5.43112829e-02  1.17194746e-02  7.42734447e-02
 -1.17930613e-01  5.08546317e-03  2.34366953e-02  5.63393198e-02
 -7.76865780e-02 -3.54850315e-03  4.76399548e-02 -7.18868971e-02
  2.36385223e-02  8.37067366e-02  3.26428860e-02  4.90202149e-03
  1.76355299e-02  1.83490720e-02  3.89100402e-03 -2.23964490e-02
  7.63216615e-02 -5.44278771e-02 -1.51654389e-02 -1.98079553e-02
 -1.27880201e-01 -3.97212319e-02 -1.01563046e-02  1.10813826e-02
 -4.61334921e-02 -7.95718096e-03  7.17895776e-02 -1.00778528e-02
  7.08643626e-03 -2.23612655e-02 -2.93180067e-02 -3.42247002e-02
  7.97588229e-02  6.34031594e-02  7.48168305e-02 -1.11972623e-01
 -1.29390508e-01 -6.13400303e-02 -6.16670772e-03 -8.37614834e-02
 -2.86560394e-02 -2.52274722e-02  8.01896453e-02  5.29051051e-02
 -6.98341876e-02  4.49450733e-03  9.29929316e-03 -3.97314392e-02
 -1.85210295e-02 -2.18279641e-02  4.89098839e-02  7.61518404e-02
 -2.35697348e-02 -1.45108706e-05  2.96794940e-02  5.73952943e-02
  2.98108440e-02  1.98195390e-02 -1.29070058e-02 -8.41479283e-03
  5.75448275e-02  1.73394494e-02 -4.87814844e-03 -5.87935857e-02
  4.25996780e-02  1.15716550e-02 -1.82885351e-03 -5.58613129e-02
 -2.35543009e-02 -2.84184050e-03 -1.02443308e-01 -6.08483963e-02
  3.51421162e-02 -8.26390833e-03  1.83323072e-03 -1.64381210e-02
 -2.99436077e-02 -3.61436829e-02  9.07645375e-02 -3.31641473e-02
 -7.01617897e-02  1.75287761e-02 -4.92923297e-02 -7.68529624e-02
  7.86160305e-02 -1.05197303e-01 -6.80910721e-02 -7.14365476e-33
 -3.92769054e-02  1.26619032e-02 -1.19750283e-03  2.90291775e-02
 -5.13128974e-02  1.59043614e-02  5.47034293e-02  3.46638747e-02
 -3.06935292e-02 -6.52681803e-03 -1.33646857e-02  1.27977571e-02
  2.26522628e-02 -2.54103094e-02 -1.62404892e-03  4.54063080e-02
 -5.56136556e-02 -1.01335354e-01 -6.75575528e-03 -1.29043059e-02
 -3.58990841e-02  4.05004732e-02  1.39900029e-01  3.30930501e-02
 -7.94472452e-03  1.58369634e-02 -4.81951460e-02  1.90635696e-02
  4.88508027e-03 -1.02677524e-01 -3.75285000e-02 -6.15337752e-02
 -7.07737133e-02 -9.46365763e-03 -3.22458148e-02 -1.38747036e-01
  2.98235863e-02  1.14720695e-01  3.25691365e-02  4.52949107e-02
  8.18175450e-02  2.85474584e-02 -5.42909727e-02 -4.93051782e-02
  6.08932320e-03  3.73648405e-02  2.85194889e-02  4.66668792e-02
  2.90077385e-02 -4.73643243e-02  2.11293679e-02 -4.04200256e-02
  2.15217732e-02  1.55657681e-03 -2.40014913e-03 -8.54042359e-03
  2.66945157e-02  9.36264824e-03  2.75634062e-02 -6.12443276e-02
  4.40270677e-02 -5.41423783e-02  4.69574146e-03 -5.19163907e-02
 -9.22112074e-03 -1.54296709e-02 -7.17046112e-02 -1.42353075e-02
 -8.27849209e-02  8.24702531e-02 -6.97175879e-03  5.04319184e-02
  4.16896529e-02 -1.16432654e-02  9.67864133e-03 -1.36496583e-02
  2.73231510e-02 -6.45503849e-02  8.10737610e-02  5.08286096e-02
 -1.29578561e-01  9.70041454e-02 -3.80457528e-02 -1.74112041e-02
  2.51282100e-03 -4.84926905e-03 -4.60096542e-03 -1.75149776e-02
 -3.62768844e-02 -4.97290026e-03 -8.03893730e-02  1.96594466e-02
 -9.12061334e-02 -6.93077296e-02 -1.98019315e-02 -5.06413151e-08
 -2.51362827e-02 -9.25895050e-02  4.49649896e-03  1.03117861e-01
  9.27218199e-02 -1.87642854e-02 -1.16247579e-03  3.81461643e-02
  3.23626585e-02 -5.07915691e-02  9.44694504e-02  3.70254181e-02
 -4.53458577e-02 -8.47567320e-02 -6.17914982e-02 -2.29249671e-02
 -4.43259301e-03 -9.43193063e-02 -2.56443582e-02 -4.24921094e-03
 -4.37877811e-02  5.78796901e-02 -1.82682686e-02  7.73843797e-03
  6.20503388e-02 -4.31039035e-02  7.87791237e-02  1.06599450e-01
  8.79446045e-03 -2.27622855e-02  6.40974194e-02  2.73298938e-02
 -9.80243669e-04 -7.25587308e-02  1.03507226e-03 -2.47860290e-02
 -1.88517780e-03  6.42010123e-02  2.08278578e-02  3.96087840e-02
  2.04642713e-02 -3.47127134e-05  8.18989873e-02  6.94070160e-02
 -3.47772017e-02 -1.07367458e-02 -7.88210034e-02  2.36102734e-02
  2.43533980e-02 -7.08872974e-02  5.42093590e-02 -3.90859954e-02
  1.25391046e-02  1.13091268e-01 -1.82738397e-02 -7.46873096e-02
 -2.40863096e-02  4.73056994e-02  1.62244542e-04  2.19861250e-02
  1.88875236e-02  6.85963605e-05 -3.06661241e-02  4.06216923e-03]"
"    } else {
                msg!(""Processing backlevel data"");
                conversion_logic(src)
            }
        } else {
            msg!(""Processing pre-initialized data"");
            Ok(ProgramAccountState {
                is_initialized: false,
                data_version: DATA_VERSION,
                account_data: AccountContentCurrent::default(),
            })
        }
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentCurrent {
    pub somevalue: u64,
}

#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    data_version: u8,
    account_data: AccountContentCurrent,
}
1234567891011//! instruction Contains the main ProgramInstruction enum

use {
    crate::error::DataVersionError,
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::program_error::ProgramError,
};

#[derive(BorshDeserialize, BorshSerialize, Debug, PartialEq)]
/// All custom program instructions
pub enum ProgramInstruction {
    InitializeAccount,
    SetU64Value(u64),
    FailInstruction,
}

impl ProgramInstruction {
    /// Unpack inbound buffer to associated Instruction
    /// The expected format for input is a Borsh serialized vector
    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {
        let payload = ProgramInstruction::try_from_slice(input).unwrap();
        match payload {
            ProgramInstruction::InitializeAccount => Ok(payload),
            ProgramInstruction::SetU64Value(_) => Ok(payload),
            _ => Err(DataVersionError::InvalidInstruction.into()),
        }
    }
}
12345678910111213141516171819202122232425262728impl ProgramInstruction {
    /// Unpack inbound buffer to associated Instruction
    /// The expected format for input is a Borsh serialized vector
    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {
        let payload = ProgramInstruction::try_from_slice(input).unwrap();
        match payload {
            ProgramInstruction::InitializeAccount => Ok(payload),
            ProgramInstruction::SetU64Value(_) => Ok(payload),
            _ => Err(DataVersionError::InvalidInstruction.into()),
        }
    }
}
123456789101112//! Resolve instruction and execute

use crate::{
    account_state::ProgramAccountState, error::DataVersionError, instruction::ProgramInstruction,
};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack},
    pubkey::Pubkey,
};

/// Checks each tracking account to confirm it is","[-1.49065573e-02  5.72422333e-02 -3.65469046e-02 -2.70012654e-02
 -1.98420119e-02 -4.69761975e-02 -3.22537101e-03  6.10802397e-02
 -7.33487457e-02  1.10605843e-02  3.46644176e-03 -8.77149925e-02
 -2.00026184e-02 -2.80925073e-02  5.08540720e-02  7.94670545e-03
 -6.06120154e-02 -1.14875464e-02  1.18271438e-02  3.83087061e-03
  1.78311765e-02  6.70556277e-02 -7.22314492e-02  1.06942460e-01
 -6.75107259e-03  9.39184707e-03 -8.33852123e-03  2.41631269e-02
  5.45403957e-02 -4.06097695e-02 -2.65235826e-03  8.41488782e-03
  2.26755976e-03  2.11310666e-02  8.68485421e-02  7.95515478e-02
  1.97108812e-03 -9.30017829e-02  1.13742668e-02 -2.77704690e-02
 -4.39446047e-02  3.49755734e-02 -1.12752855e-01 -1.42067755e-02
  3.20678167e-02 -3.42559591e-02  1.77977537e-03  5.99918142e-02
 -4.20777090e-02  2.68793497e-02  3.42284292e-02  4.24343236e-02
 -3.62070021e-03 -2.61094049e-02  4.90610972e-02  1.01044707e-01
 -4.49383855e-02  1.09100537e-02 -1.89001975e-03 -1.26476483e-02
 -1.12228788e-01 -2.75360513e-02  1.59085647e-03 -6.24082014e-02
  2.78006885e-02  4.61593866e-02 -2.01414302e-02  6.34196401e-03
  2.83377757e-03  2.40938049e-02  8.88017414e-04 -5.09938896e-02
 -6.34611323e-02  1.02195866e-01 -3.77892517e-02  6.94739074e-02
  4.98126484e-02 -2.53043929e-03  6.33220747e-03 -6.22330233e-02
 -8.60413164e-03 -1.96405500e-02 -6.51941225e-02  1.46847041e-02
  2.22759228e-02 -3.52631416e-03 -1.03392536e-02 -6.12787977e-02
  3.51824798e-02  4.49972413e-02  3.97642329e-02 -3.22505794e-02
 -3.33531797e-02 -6.72621140e-03  1.11551739e-01  5.33252489e-03
 -3.22743207e-02 -7.08472799e-05  8.41474906e-02  5.70757017e-02
 -4.26305905e-02  4.09400947e-02  8.89085829e-02  4.68317494e-02
  3.64632644e-02 -7.99697936e-02  9.37244967e-02  2.43085604e-02
 -9.57508758e-02 -6.45709336e-02  3.86251025e-02  4.28793691e-02
  4.26705144e-02 -5.42499200e-02  4.27974649e-02  1.57478056e-03
  4.09645401e-02 -2.30126716e-02 -8.00827593e-02 -4.87566963e-02
  9.02798399e-02  1.17649129e-02  2.68587712e-02  5.54176494e-02
 -6.98359981e-02 -1.29399762e-01 -5.32346964e-03  1.02823679e-32
  1.71934124e-02 -9.42448974e-02 -1.72244869e-02 -4.51416429e-03
 -2.95083714e-03  4.77464274e-02  9.28249583e-03  1.14601264e-02
 -1.14856511e-01  5.08850068e-02 -4.30815294e-02 -2.05149110e-02
 -5.33229746e-02 -1.28578572e-02  9.75166261e-02 -3.70851085e-02
  2.53592298e-04  4.08927649e-02  6.96983114e-02  3.27048339e-02
  8.18130374e-02  8.18112341e-04 -8.74976367e-02 -2.02151984e-02
 -5.74208144e-03  4.20859009e-02 -4.04181927e-02 -1.76381245e-02
 -4.50625084e-02 -1.47236772e-02 -9.91328154e-03 -2.40933802e-02
  2.47892961e-02  1.62793547e-02  4.10932079e-02 -7.13760033e-02
  2.10390724e-02 -1.26537925e-03 -3.00184786e-02 -3.77602726e-02
  8.80815536e-02  4.55036499e-02 -2.21949350e-03 -1.94038860e-02
 -3.05293091e-02 -1.03440695e-01 -6.59970613e-03 -1.36699723e-02
  5.57442047e-02 -7.07691386e-02  7.78399482e-02  5.33935279e-02
 -2.80892551e-02 -4.05937023e-02 -1.80555647e-03 -6.47992268e-02
 -2.29931017e-03  6.47555292e-02  2.51384135e-02  6.84920251e-02
  1.39982579e-02  2.96518244e-02 -3.72470245e-02  3.11477087e-03
  4.35948605e-03 -6.62806630e-02 -9.40318182e-02 -4.83245365e-02
  2.06842367e-02 -4.08979394e-02 -4.06695306e-02  2.08738502e-02
 -2.88305655e-02  4.74222116e-02 -6.83945109e-05 -1.49957733e-02
 -1.02982381e-02  3.28064226e-02  1.28575685e-02 -1.09086722e-01
 -3.40484269e-02  6.84311762e-02 -5.13977259e-02  7.27522075e-02
 -2.52667256e-02  7.08554685e-02  8.84392206e-03 -4.20880914e-02
 -6.13312311e-02  3.15514617e-02  1.45710232e-02 -1.07971653e-01
  2.86287162e-02 -5.09114601e-02 -5.32861799e-02 -1.00307504e-32
  6.15232810e-02 -1.75652746e-02 -8.82804301e-03 -7.18225464e-02
 -8.90970826e-02 -2.85858847e-03  8.85217786e-02 -5.53566962e-02
  9.28644673e-04  1.75516568e-02  3.33398581e-02  1.59038063e-02
  7.41478875e-02 -1.54279312e-03  5.31383827e-02  6.19531469e-03
 -4.85074595e-02 -6.90302178e-02 -3.43396626e-02  2.32938565e-02
  2.60796677e-02  8.95259827e-02  6.05349988e-02 -2.38402411e-02
 -8.39024596e-03  4.39062901e-02 -3.36913355e-02  7.86469504e-02
  7.04130530e-02  2.58037783e-02 -4.99448255e-02  2.55646575e-02
 -3.19355750e-03  1.95641778e-02 -7.04465881e-02 -7.25635588e-02
  7.85276815e-02  3.10117174e-02 -7.17751775e-03 -3.12173758e-02
  3.68769430e-02  4.14821133e-02 -1.00917697e-01 -1.62508674e-02
  2.47837231e-02  5.67132384e-02  7.86861926e-02  6.97560888e-03
  3.45604382e-02 -3.86164077e-02  4.34842817e-02 -4.20617387e-02
  1.91672444e-02  2.79612821e-02 -4.59381267e-02 -7.77440295e-02
  1.13973461e-01 -1.36304006e-01 -2.85316783e-04 -6.64568972e-03
  1.49090262e-02 -3.09336334e-02  4.13191468e-02 -2.88603995e-02
  3.60602923e-02 -1.31456163e-02 -5.91135249e-02 -6.72737323e-03
  2.97717955e-02 -6.74866959e-02 -3.75651149e-03  3.95709043e-03
 -4.56769094e-02 -1.60897039e-02  7.56421089e-02  5.07393666e-02
 -5.41085303e-02 -2.62731723e-02  7.91483149e-02  5.20805307e-02
 -1.46963909e-01  7.94035266e-04 -1.47563592e-02  7.38415718e-02
  2.07853150e-02 -1.27575621e-01  3.40689979e-02  3.41273360e-02
 -6.60023615e-02  2.98229139e-02 -6.56481460e-02 -6.30041435e-02
  3.62978987e-02  5.65539785e-02 -1.84077751e-02 -5.86767079e-08
 -1.08084686e-01 -7.88361728e-02 -1.44267762e-02  8.60696435e-02
  6.39576018e-02  9.69829597e-03 -5.22458702e-02 -8.92165005e-02
  7.31896609e-02 -1.26155511e-01 -5.76858930e-02  7.11799636e-02
 -3.58041041e-02 -8.28952938e-02  2.39822175e-02  1.04326243e-02
 -5.95469400e-02 -2.66922079e-02 -1.55247301e-02 -4.36963700e-02
  1.34005983e-04  1.36790276e-02 -5.38393296e-02 -1.38614345e-02
  6.51627779e-02 -5.31394035e-04  4.01257984e-02  1.08595073e-01
  6.79283813e-02 -6.33597653e-03  6.00046962e-02 -2.31443159e-02
  5.48751540e-02  3.26727629e-02  1.68892872e-02 -5.49132004e-03
  5.88764176e-02  1.07843779e-01 -5.69643453e-04 -1.51008973e-02
 -6.76003657e-03  2.47105993e-02 -1.14297256e-01  3.87527198e-02
 -1.45122863e-03  8.68252385e-03 -8.02350044e-02  8.78927410e-02
  4.72621545e-02 -2.54634898e-02 -1.29857762e-02 -1.22035909e-02
  4.20983024e-02  3.29802856e-02 -2.70012524e-02 -7.34808147e-02
  2.57423688e-02 -4.14382517e-02 -3.40428539e-02  4.04368900e-02
  6.52264580e-02  4.29497249e-02  5.61668128e-02 -3.48684043e-02]"
"owned by our program
/// This function assumes that the program account is always the last
/// in the array
fn check_account_ownership(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {
    // Accounts must be owned by the program.
    for account in accounts.iter().take(accounts.len() - 1) {
        if account.owner != program_id {
            msg!(
                ""Fail: The tracking account owner is {} and it should be {}."",
                account.owner,
                program_id
            );
            return Err(ProgramError::IncorrectProgramId);
        }
    }
    Ok(())
}

/// Initialize the programs account, which is the first in accounts
fn initialize_account(accounts: &[AccountInfo]) -> ProgramResult {
    msg!(""Initialize account"");
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Just using unpack will check to see if initialized and will
    // fail if not
    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;
    // Where this is a logic error in trying to initialize the same account more than once
    if account_state.is_initialized() {
        return Err(DataVersionError::AlreadyInitializedState.into());
    } else {
        account_state.set_initialized();
        account_state.content_mut().somevalue = 1;
    }
    msg!(""Account Initialized"");
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}

/// Sets the u64 in the content structure
fn set_u64_value(accounts: &[AccountInfo], value: u64) -> ProgramResult {
    msg!(""Set new value {}"", value);
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    account_state.content_mut().somevalue = value;
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}
/// Main processing entry point dispatches to specific
/// instruction handlers
pub fn process(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!(""Received process request"");
    // Check the account for program relationship
    if let Err(error) = check_account_ownership(program_id, accounts) {
        return Err(error);
    };
    // Unpack the inbound data, mapping instruction to appropriate structure
    let instruction = ProgramInstruction::unpack(instruction_data)?;
    match instruction {
        ProgramInstruction::InitializeAccount => initialize_account(accounts),
        ProgramInstruction::SetU64Value(value) => set_u64_value(accounts, value),
     ","[-5.65290079e-02  2.87097506e-02 -5.51577620e-02 -4.54335362e-02
 -1.25574730e-02 -3.86312306e-02  1.08543620e-01  5.56498766e-02
 -4.41544354e-02  3.46489437e-02  4.14546812e-03 -5.58279380e-02
  5.05592003e-02 -2.26700306e-02 -2.87084859e-02  3.35812457e-02
 -6.27492070e-02 -9.56990104e-03  2.03422997e-02 -3.89826484e-03
 -4.47813906e-02 -3.17799821e-02  2.48696189e-02  7.26802200e-02
 -1.09990798e-02 -7.67574236e-02 -5.65098003e-02  2.79060360e-02
 -5.97209064e-03 -2.62693278e-02  6.00361712e-02 -8.07276666e-02
 -1.36206122e-02  5.88521250e-02  3.00412066e-02  8.97391438e-02
 -1.75755974e-02 -1.35449678e-01  4.16298211e-02 -5.06263897e-02
 -2.40066554e-02  7.09601343e-02 -5.21440953e-02  2.47416226e-03
 -7.85037584e-04  2.98006106e-02  3.09466966e-03  4.07048389e-02
  3.54854134e-03  5.84946088e-02 -2.67462991e-02  2.63948692e-03
  1.84743963e-02 -4.66335565e-02  2.90568806e-02  1.21558033e-01
  4.36750799e-02  2.10761409e-02  1.73594281e-02  5.87243214e-02
  5.28597273e-03 -2.12063137e-02  2.08541960e-03 -1.17504541e-02
 -1.10030966e-02  2.82801222e-02 -1.73612554e-02 -5.02063660e-03
 -1.71442106e-02  6.78119296e-03  4.02043872e-02  1.45384353e-02
 -4.10801508e-02  4.44714874e-02 -7.33144134e-02 -4.99477088e-02
 -3.92498337e-02  5.69725856e-02 -5.45428246e-02 -7.52700046e-02
 -3.62787545e-02  4.08998318e-03  1.90673564e-02  4.65913713e-02
  2.56599784e-02  3.88074629e-02 -1.96245927e-02 -2.40638461e-02
  1.08999513e-01  8.69306549e-02 -1.25718089e-02 -8.87205941e-04
  6.05898090e-02  2.49837711e-02  1.30252331e-01  6.20385595e-02
  8.00499879e-03  1.71416011e-02 -7.93103427e-02  7.68663287e-02
 -8.71487111e-02 -1.38743753e-02  6.27693385e-02  2.13781334e-02
  1.06148534e-01  2.72310637e-02  5.90101741e-02 -3.37530971e-02
 -1.20432355e-01 -6.59891516e-02  1.56159734e-03  6.75409436e-02
  2.61928188e-04  7.69341066e-02  2.36421525e-02  3.44026387e-02
 -7.85827115e-02  7.83903971e-02 -4.74013239e-02  1.03225708e-02
  6.36154935e-02  1.79930255e-02  1.37512805e-02 -1.04504004e-02
 -5.93507364e-02  2.93712188e-02  1.88148469e-02  3.16249196e-33
 -3.59405316e-02  5.70940669e-04 -7.41477683e-02 -2.11147848e-03
  1.16756540e-02  1.87433045e-02  1.02694482e-02  7.45355263e-02
 -1.32308975e-01  2.96727642e-02  5.89179285e-02 -1.76248010e-02
 -4.53710295e-02 -4.83006425e-02  4.85444628e-02 -1.36314249e-02
  3.18394117e-02  5.54968230e-02  6.07833825e-02  5.55301225e-03
  4.94710505e-02 -1.76328737e-02 -2.80155540e-02 -5.51577806e-02
  4.18266281e-02 -8.64555873e-03 -7.29387179e-02  5.89239597e-02
  3.83393429e-02  6.35641860e-03  2.42533516e-02 -3.04234847e-02
  1.23126954e-02 -1.96160213e-03  3.94009203e-02 -5.06310947e-02
 -1.53108016e-02 -1.13449739e-02 -8.09399262e-02  1.71104446e-02
  7.55682513e-02 -2.45031118e-02 -2.17706785e-02 -3.62292267e-02
 -6.90716580e-02 -6.35300353e-02 -6.35972917e-02  3.30781862e-02
  4.83123101e-02  7.47875124e-02 -4.40455861e-02  1.74217895e-02
 -7.33224154e-02 -5.41937351e-02 -1.77172180e-02 -1.07010879e-01
 -5.90870455e-02 -3.77563834e-02 -6.81075500e-03 -7.50891045e-02
  5.43896407e-02  1.64554268e-02 -1.85492467e-02  3.03370021e-02
 -2.95243599e-02 -1.63361859e-02 -1.39231598e-02 -1.41565399e-02
  8.98241252e-02 -2.96869385e-03 -2.67794784e-02  1.22013530e-02
 -7.92117119e-02  4.26988043e-02 -3.48425098e-03 -5.38351052e-02
 -2.55226325e-02 -6.96737925e-03 -6.71345964e-02 -4.05258872e-02
  4.53832932e-02 -7.22339824e-02 -9.43681598e-02  7.99021795e-02
 -1.03700995e-01  7.63676241e-02 -3.28641981e-02 -2.52655381e-03
 -3.74270827e-02  1.17981300e-01  2.61878129e-02 -5.16444780e-02
 -3.48353060e-03  4.23374698e-02 -5.47566228e-02 -5.33641779e-33
 -7.66886258e-03 -6.45208880e-02  4.68794852e-02 -7.33867139e-02
 -3.82652245e-02 -3.79758403e-02  6.36103451e-02 -4.26139385e-02
 -3.71000655e-02  1.08274049e-03 -4.38488573e-02 -2.90360767e-02
  1.57320332e-02  1.09148091e-02  5.86347394e-02  7.16718892e-03
 -4.27759774e-02 -8.45616907e-02  1.21554872e-02 -3.92685607e-02
 -3.03932521e-02  1.01968214e-01  5.21776676e-02  5.19020036e-02
 -6.44611614e-03  4.64427471e-02 -1.20929154e-02  3.59392688e-02
  6.94116950e-03 -3.23879421e-02  4.37508263e-02 -5.07345051e-02
 -8.05267021e-02  3.58861163e-02 -3.16752447e-03 -1.14061080e-01
  8.56949657e-04  6.90701082e-02 -3.45636830e-02  1.28558427e-02
  1.28714100e-01  1.55565767e-02  2.56732386e-02  6.47216104e-03
  1.22720040e-02  4.65052575e-02  6.90590218e-02 -3.43113653e-02
  7.98857771e-03  1.50395604e-02 -5.48230251e-03 -5.95004633e-02
  8.97680521e-02 -1.73822846e-02 -2.46059038e-02  2.45241802e-02
  2.40702406e-01 -2.78582387e-02  3.51305008e-02 -4.26172912e-02
  9.50004533e-03 -9.69757140e-02  1.35335764e-02  6.47845268e-02
 -2.50226259e-02 -6.18104152e-02 -3.70488316e-02  3.65636423e-02
  1.20396517e-01  4.79098856e-02 -1.60911158e-02 -3.59379724e-02
 -2.38594543e-02 -6.58401623e-02 -1.26870098e-02  9.07695144e-02
 -3.58461998e-02 -2.37733517e-02 -1.44909639e-02  1.81433596e-02
  4.21778153e-04  1.91028472e-02  4.85526882e-02 -3.33467908e-02
 -3.53514701e-02 -6.84699863e-02  5.73569834e-02 -5.71673252e-02
 -4.69121188e-02  2.25121770e-02 -4.87374095e-03  5.09098172e-03
 -4.04213332e-02 -7.39518628e-02 -3.94917689e-02 -5.88285971e-08
 -1.10612057e-01 -2.36110631e-02  1.64421387e-02  7.89993033e-02
  8.40778872e-02 -4.42483090e-02  2.48422008e-02 -5.47354855e-02
 -4.07595523e-02 -6.45217597e-02 -1.07876442e-01  6.79040328e-02
 -9.22942534e-03 -1.97233297e-02 -2.39879675e-02 -1.38049558e-01
 -3.13103944e-02  4.91760932e-02 -3.14774625e-02  8.30443203e-03
 -4.16783728e-02 -1.95122454e-02  2.86127105e-02  8.89012776e-03
 -9.26612541e-02 -1.16664788e-03  4.10132259e-02  5.40552922e-02
  7.52508268e-02  4.07209136e-02  3.00959069e-02  5.59259728e-02
  3.69855911e-02 -1.16833178e-02 -5.02143241e-02  1.23546191e-03
  6.27097953e-03  2.69473419e-02  2.93230228e-02 -2.33545378e-02
 -2.62199389e-03  7.04089105e-02  3.20456922e-02  1.29437093e-02
 -5.04533090e-02 -3.98934372e-02  1.76645778e-02 -1.68411173e-02
  1.13486484e-01 -2.71040536e-02  1.91268817e-04 -5.35978638e-02
 -3.12487651e-02  7.97451138e-02 -1.03000868e-02 -2.57715881e-02
 -9.05245170e-03 -7.26108029e-02 -6.78712651e-02  1.51436822e-02
  1.90339815e-02  7.60014588e-03 -1.66171566e-02 -3.36428992e-02]"
"  _ => {
            msg!(""Received unknown instruction"");
            Err(DataVersionError::InvalidInstruction.into())
        }
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687fn check_account_ownership(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {
    // Accounts must be owned by the program.
    for account in accounts.iter().take(accounts.len() - 1) {
        if account.owner != program_id {
            msg!(
                ""Fail: The tracking account owner is {} and it should be {}."",
                account.owner,
                program_id
            );
            return Err(ProgramError::IncorrectProgramId);
        }
    }
    Ok(())
}

/// Initialize the programs account, which is the first in accounts
fn initialize_account(accounts: &[AccountInfo]) -> ProgramResult {
    msg!(""Initialize account"");
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Just using unpack will check to see if initialized and will
    // fail if not
    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;
    // Where this is a logic error in trying to initialize the same account more than once
    if account_state.is_initialized() {
        return Err(DataVersionError::AlreadyInitializedState.into());
    } else {
        account_state.set_initialized();
        account_state.content_mut().somevalue = 1;
    }
    msg!(""Account Initialized"");
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}

/// Sets the u64 in the content structure
fn set_u64_value(accounts: &[AccountInfo], value: u64) -> ProgramResult {
    msg!(""Set new value {}"", value);
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    account_state.content_mut().somevalue = value;
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}
/// Main processing entry point dispatches to specific
/// instruction handlers
pub fn process(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!(""Received process request"");
    // Check the account for program relationship
    if let Err(error) = check_account_ownership(program_id, accounts) {
        return Err(error);
    };
    // Unpack the inbound data, mapping instruction to appropriate structure
    let instruction = ProgramInstruction::unpack(instruction_data)?;
    match instruction {
 ","[-4.89991494e-02  3.76157127e-02 -5.47703840e-02 -4.61443663e-02
 -6.43221661e-03 -3.41507308e-02  1.15459926e-01  5.09641543e-02
 -5.35817444e-02  2.90292930e-02  2.40114387e-02 -5.77673391e-02
  4.47726622e-02 -2.40982734e-02  9.67998989e-03  3.80238369e-02
 -4.28733975e-02 -5.11828391e-03  1.62083488e-02 -2.03307439e-02
 -1.10710859e-02  6.51068753e-03  2.93434598e-02  9.67613533e-02
 -1.85774080e-02 -7.37129599e-02 -4.85180132e-02  7.12926826e-03
 -1.32826436e-02 -8.48587044e-03  7.78827891e-02 -7.20202103e-02
 -3.40673029e-02  8.67166743e-02  4.68875803e-02  9.59461629e-02
  7.01399334e-03 -1.15957558e-01  7.81861413e-03 -5.35775274e-02
 -6.19092360e-02  7.06738606e-02 -6.88318238e-02  5.43964095e-04
  2.02351138e-02  1.49943382e-02 -4.75992747e-02 -1.92306552e-03
  1.66554786e-02  4.45549414e-02 -3.23431566e-02 -1.89347416e-02
  2.62131654e-02 -5.74215241e-02  1.06457630e-02  1.08971037e-01
  2.80531701e-02  2.86461283e-02  2.12983545e-02  4.41619381e-02
  2.98455777e-03 -2.95179375e-02  1.63324084e-02 -2.69610267e-02
 -4.44251485e-02  2.80386899e-02 -3.95904556e-02 -1.81547087e-03
  1.73225906e-02  6.05138997e-03  1.42385717e-02 -1.40260868e-02
 -3.52274403e-02  5.05645722e-02 -1.01166159e-01 -5.42101488e-02
 -2.89205629e-02  3.82576175e-02 -5.28349988e-02 -5.73404692e-02
 -4.44635451e-02 -1.53267113e-02  9.01137758e-03  7.50292763e-02
  1.16257910e-02  4.05694619e-02 -4.25108476e-03 -1.26020126e-02
  9.37991068e-02  7.63125345e-02 -1.25997327e-02 -1.07315416e-02
  3.02534662e-02  4.80389111e-02  1.56583622e-01  8.22927505e-02
  4.88084648e-03 -1.58889908e-02 -6.58861324e-02  5.39841652e-02
 -6.55064508e-02 -1.81806684e-02  4.23700325e-02  9.71369911e-03
  6.62950724e-02  2.59775389e-02  5.44795729e-02 -4.58795391e-02
 -1.12790890e-01 -5.52390069e-02  6.10857690e-03  5.07425256e-02
 -1.13654118e-02  4.73809466e-02  3.47422436e-02  5.70819378e-02
 -7.36805648e-02  8.34014192e-02 -6.21600784e-02  3.11814044e-02
  7.20195398e-02  3.96759026e-02  5.80006884e-03 -2.51554009e-02
 -6.83769062e-02 -2.32763588e-02  3.17789987e-02  4.07608176e-33
 -1.69996247e-02  6.99829450e-03 -8.42361450e-02  3.97856534e-02
  2.86372229e-02  2.73208171e-02  1.52492700e-02  6.25247881e-02
 -1.09487198e-01  4.18184586e-02  5.61866611e-02 -4.15081754e-02
 -4.42056879e-02 -2.06610132e-02  4.62882444e-02 -1.26984473e-02
  4.28307950e-02  5.60563691e-02  8.58475044e-02 -4.35321080e-03
  4.23578508e-02 -2.86870953e-02 -3.93263474e-02 -4.49342169e-02
  5.66716865e-02  2.03482229e-02 -6.63017333e-02  6.20876849e-02
  3.62803563e-02 -9.35349904e-04  1.12668350e-02 -4.46906686e-02
 -3.97200091e-03 -4.34345845e-03  4.12053615e-02 -7.18733370e-02
 -1.91508606e-02  7.88818765e-03 -7.80827105e-02  7.01919850e-03
  8.13938454e-02 -4.14334647e-02 -4.15098257e-02 -2.29120441e-02
 -4.07831073e-02 -3.46890427e-02 -2.50653140e-02  4.16985527e-03
  7.60051832e-02  4.85845767e-02 -6.10685199e-02  2.38969028e-02
 -4.73366678e-02 -5.57110086e-02  1.09313512e-02 -7.58834854e-02
 -4.40212637e-02 -2.36935746e-02 -1.79820899e-02 -8.38459805e-02
  2.02549249e-02  3.56160514e-02 -2.14295536e-02  1.30722495e-02
 -3.63588496e-03 -3.37133408e-02 -4.54433337e-02 -2.94360742e-02
  8.20687786e-02 -7.08772382e-03 -7.25667998e-02 -1.36706159e-02
 -2.08460148e-02  5.04331924e-02 -4.79259761e-03 -6.83642775e-02
 -2.63071563e-02 -1.44954247e-03 -5.64151891e-02 -5.97950555e-02
  2.83244606e-02 -7.84647465e-02 -8.15391615e-02  7.02276230e-02
 -1.00896865e-01  1.11837208e-01 -1.74448378e-02  2.47380454e-02
 -3.09328884e-02  1.71342671e-01  1.83507055e-02 -4.89059053e-02
 -5.19178957e-02  3.61606553e-02 -7.45343566e-02 -6.93057804e-33
 -8.21969938e-03 -1.27180582e-02  1.68314371e-02 -8.83148238e-02
 -3.21217403e-02 -3.71174216e-02  6.52381107e-02 -3.49057913e-02
 -3.42802033e-02 -1.27432290e-02 -7.04649836e-02 -2.38524079e-02
  2.06900686e-02 -3.34098726e-03  3.05276588e-02  2.82841753e-02
 -7.54738525e-02 -5.69136292e-02  1.71648581e-02 -2.01826766e-02
 -2.51896232e-02  8.77178535e-02  4.71740849e-02  7.92953931e-03
  7.05230702e-03  3.81422937e-02  2.37857550e-02  4.15760167e-02
  2.21919436e-02 -2.06794124e-02  9.63615552e-02 -2.67587490e-02
 -5.07909395e-02  6.35320023e-02  1.00895949e-02 -1.25816688e-01
  4.55113538e-02  4.00235392e-02 -5.37675731e-02  1.88261259e-03
  1.42690346e-01  1.42609226e-02  1.48852752e-03 -2.15713717e-02
  1.43771367e-02  3.20346653e-02  5.04038818e-02 -4.20841767e-04
 -7.17073865e-03 -6.29218481e-03 -8.64153542e-03 -8.26830715e-02
  6.27695173e-02 -3.09057143e-02 -1.56029025e-02  3.60589251e-02
  2.25694910e-01 -4.47735339e-02  3.85598987e-02 -2.45306380e-02
  2.00697519e-02 -9.45706069e-02  8.93978402e-03  7.72596076e-02
 -1.06318959e-03 -4.24406007e-02 -5.51928282e-02  5.05969487e-02
  1.01011626e-01  7.31683969e-02 -2.54184194e-02 -2.74614152e-02
 -1.57549959e-02 -8.94942507e-02  2.68023461e-02  7.86323398e-02
 -7.80613348e-02 -2.89868787e-02 -3.69355716e-02  2.16753799e-02
  1.84911974e-02  2.33451687e-02  5.01875132e-02 -3.19043063e-02
 -9.30430088e-03 -7.35683441e-02  4.77849394e-02 -6.37031742e-04
 -4.95143048e-02 -1.61024779e-02 -1.67269465e-02 -6.22301269e-03
 -3.96062508e-02 -4.00552303e-02 -4.66677248e-02 -6.36957083e-08
 -1.00862436e-01 -1.62478313e-02  3.50152850e-02  5.26189469e-02
  7.66842291e-02 -6.06730431e-02  1.00844121e-03 -6.27291799e-02
 -2.56366860e-02 -6.76216185e-02 -1.19849369e-01  5.30149825e-02
 -3.91146950e-02  6.28398452e-03  4.35040286e-03 -1.25249714e-01
 -4.96213175e-02  5.28371148e-02 -6.04839344e-03  4.32327809e-03
  1.31115597e-03 -4.06367444e-02  1.67130921e-02  2.41182372e-02
 -5.55569492e-02  2.42944043e-02  5.34084514e-02  7.82919154e-02
  4.91010882e-02  3.85799780e-02  3.21291722e-02  2.97096651e-02
  6.55376539e-02 -2.23974362e-02 -1.87073890e-02  5.95448120e-03
  1.66172087e-02 -7.57305231e-03  6.26170561e-02 -4.06617522e-02
 -7.18173047e-04  7.67712891e-02  1.74792279e-02  1.77571699e-02
 -4.79304753e-02 -4.61762883e-02  1.00226765e-02 -3.90354618e-02
  1.00015491e-01 -2.74132211e-02 -2.96927877e-02 -5.60929365e-02
 -5.72985820e-02  7.44870827e-02 -2.99997758e-02 -7.07271183e-03
 -1.39179444e-02 -8.35718662e-02 -9.01163667e-02  5.04144281e-03
  4.55973223e-02  2.40357053e-02  4.52630105e-04 -5.07991128e-02]"
"      ProgramInstruction::InitializeAccount => initialize_account(accounts),
        ProgramInstruction::SetU64Value(value) => set_u64_value(accounts, value),
        _ => {
            msg!(""Received unknown instruction"");
            Err(DataVersionError::InvalidInstruction.into())
        }
    }
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970Trong phiên bản đầu tiên của Account, chúng ta thực hiện các bước sau:#Mô tả1Thêm trường data_version vào dữ liệu. Nó có thể đơn giản là số thứ tự (u8) hoặc có thể phức tạp hơn thế.2Phân phát một vùng nhớ đủ để chứa dữ liệu3Khởi tạo một hằng số biễu diễn phiên bản cho các Program khác nhau4Thêm một hàm cập nhật Account với tên fn conversion_logic cho các nâng cấp trong tương laiGiả sử, chúng ta muốn nâng cấp các Account của Program bằng cách thêm một trường mới với tên somestring.Nếu chúng ta không phân phát đủ vùng nhớ cho trường mới thêm cho các Account trước đó, quá trình nâng cấp Account sẽ bị mắc kẹt.# Nâng cấp AccountTrong Program mới, chúng ta muốn thêm một thuộc tính mới cho nội dung của Account. Những thay đổi bên dưới trình bày cách chúng ta tận dụng cơ cấu Program ban đầu cho phiên bản hiện tại.# 1. Thêm luận lý để chuyển đổi AccountAccountPress </> button to view full source//! @brief account_state manages account data

use arrayref::{array_ref, array_refs};
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    borsh::try_from_slice_unchecked,
    msg,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack, Sealed},
};
use std::{io::BufWriter, mem};

/// Current state (DATA_VERSION 1). If version changes occur, this
/// should be copied to another (see AccountContentOld below)
/// We've added a new field: 'somestring'
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentCurrent {
    pub somevalue: u64,
    pub somestring: String,
}

/// Old content state (DATA_VERSION 0).
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentOld {
    pub somevalue: u64,
}

/// Maintains account data
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    data_version: u8,
    account_data: AccountContentCurrent,
}

impl ProgramAccountState {
    /// Signal initialized
    pub fn set_initialized(&mut self) {
        self.is_initialized = true;
    }
    /// Get the initialized flag
    pub fn initialized(&self) -> bool {
        self.is_initialized
    }
    /// Gets the current data version
    pub fn version(&self) -> u8 {
        self.data_version
    }
    /// Get the reference to content structure
    pub fn content(&self) -> &AccountContentCurrent {
        &self.account_data
    }
    /// Get the mutable reference to content structure
    pub fn content_mut(&mut self) -> &mut AccountContentCurrent {
        &mut self.account_data
    }
}

/// Declaration","[-4.80702035e-02  3.52874175e-02 -3.97922583e-02 -9.52486172e-02
 -7.64257088e-02 -3.56799103e-02  5.25733121e-02  3.28880250e-02
  1.50619121e-02  3.38233411e-02  9.53289941e-02 -8.11180770e-02
  2.90187839e-02 -1.30406186e-01  1.95965935e-02 -4.84723933e-02
 -1.13547988e-01  3.00085102e-03 -3.34727019e-02 -5.62964641e-02
  1.89342778e-02 -5.01571642e-03 -4.81536239e-02  5.72457947e-02
 -1.28564821e-03  5.18865930e-03 -4.10932750e-02  6.29899949e-02
  3.34420204e-02 -6.87190145e-02  2.81278770e-02  7.43973404e-02
 -4.37059766e-03  2.82706413e-03  1.07801914e-01  9.74029526e-02
 -1.24114975e-02 -6.10708632e-02 -1.13951946e-02 -3.22530419e-02
 -9.63766947e-02  4.86559682e-02 -4.62955981e-02 -2.11432464e-02
  4.70185056e-02  3.08464617e-02 -3.76537740e-02 -1.92720052e-02
 -3.39559801e-02  8.67552683e-03 -2.19934359e-02  7.12824911e-02
  2.04383507e-02  4.82559763e-03 -7.83862695e-02 -9.44125280e-03
 -7.57100235e-04  3.93743291e-02  2.12564301e-02  9.98097751e-03
 -1.28602952e-01  2.79390197e-02  3.82024981e-03  9.43048764e-03
 -1.53485071e-02 -2.56255306e-02 -3.53721529e-02 -6.19416684e-02
  3.02900523e-02  4.48811352e-02 -9.40027684e-02 -7.01887384e-02
 -9.79387164e-02  1.01038784e-01 -4.40631099e-02  7.84804970e-02
 -4.03463840e-02 -1.40944254e-02  2.12668199e-02 -8.59223157e-02
  9.48471855e-03 -1.96926799e-02  2.77901608e-02 -9.65639390e-03
 -5.52634988e-03  4.68380526e-02 -2.12709568e-02 -5.50320605e-04
  7.69888088e-02  6.94210222e-03  2.30326923e-03  3.03540751e-02
  1.11197066e-02  2.26508863e-02  8.88976380e-02 -2.13861782e-02
  3.44843082e-02 -2.44402490e-03 -2.44709454e-03  3.67157087e-02
  4.34420481e-02  8.21052939e-02  7.03379214e-02 -5.76427253e-03
 -2.11107582e-02 -3.94757949e-02  8.36237594e-02  3.18402983e-02
 -1.88931040e-02 -6.36474416e-02 -1.73871238e-02  1.30196055e-02
 -1.27443997e-02 -1.60345614e-01  5.23679741e-02  3.17742452e-02
 -6.11936301e-02 -4.49880734e-02 -7.30905607e-02  4.93075028e-02
 -1.33285159e-02 -3.19682211e-02 -9.10235569e-02  7.06422725e-05
 -1.06441714e-01 -8.45018476e-02  1.42184310e-02  1.48262061e-32
 -1.99598074e-02 -1.59088690e-02 -5.55506954e-03 -3.77426818e-02
  2.60241888e-02 -1.35046775e-02 -5.74937090e-03 -1.97296124e-03
 -1.28333211e-01  7.56356120e-03  3.69224958e-02 -9.25193503e-02
 -8.45684260e-02  3.08490638e-02  1.04172744e-01 -3.60413864e-02
  5.46044447e-02 -5.67097701e-02  6.40157750e-03 -5.71791939e-02
  8.84104446e-02 -1.71150528e-02  2.19398085e-02 -2.81553417e-02
  5.82080707e-02  8.57511982e-02 -7.24495202e-02  4.68583182e-02
 -1.09068025e-02 -4.28041723e-03  2.51573492e-02 -5.37936427e-02
 -7.39172772e-02 -2.64429841e-02  1.81744015e-03 -6.71484694e-02
  3.69652659e-02 -2.46721860e-02  1.93256233e-02  3.45564559e-02
  1.23802967e-01  2.35018600e-02  7.84331262e-02  6.40917942e-03
  3.43023203e-02  4.88647167e-03  3.43384850e-03  6.27262518e-02
  8.39285329e-02  1.71239302e-02 -4.52301688e-02  2.24540266e-03
 -7.85710216e-02  3.23145017e-02  2.29460020e-02 -4.95309606e-02
  1.34343775e-02 -4.19701487e-02  6.32828614e-03 -8.51528253e-03
  2.98576010e-03  4.10889089e-02  1.16549274e-02  7.58099258e-02
 -2.56706122e-02 -4.18865494e-02 -3.30062434e-02 -5.35623077e-03
  7.27554597e-03 -3.48540395e-03 -9.94169861e-02 -9.84894410e-02
 -1.82229746e-02  6.11003451e-02 -1.10366670e-02 -4.14727293e-02
  2.48975828e-02 -2.46779397e-02  9.31981392e-03  5.92983048e-03
  2.62201224e-02 -2.84398776e-02 -4.58213948e-02 -2.85076723e-02
 -2.58701686e-02  3.41474451e-02  5.90821989e-02 -7.37950727e-02
 -8.35023168e-03  6.88236952e-02  9.31410934e-04 -5.14985237e-04
  2.08838321e-02  3.96906883e-02 -7.14939386e-02 -1.58325086e-32
  1.89708248e-02  4.30193692e-02 -2.07703952e-02 -1.08536631e-02
 -5.46591217e-03 -2.36892216e-02  3.66152590e-03 -3.29176486e-02
  1.55823436e-02 -7.13817924e-02 -2.69497037e-02 -3.67230666e-03
 -5.32984268e-03 -5.15609141e-03  5.72804324e-02  2.23887134e-02
  1.20154945e-02  5.33651449e-02 -3.44626396e-03  9.18096304e-02
 -4.45506535e-02  5.95929734e-02 -2.06689704e-02  2.27851141e-02
  3.13519835e-02 -1.06759723e-02  2.88251676e-02  5.31603508e-02
  7.18151852e-02  6.17595501e-02 -1.31076118e-02 -1.92193233e-03
 -4.72722128e-02  1.57686010e-01 -4.44294475e-02 -1.48358420e-01
  1.32223591e-01 -1.77827869e-02 -3.81453000e-02  1.74125750e-02
  1.08228661e-01 -6.71609817e-03 -6.35305569e-02 -2.18410827e-02
  1.80644859e-02  2.01627976e-04  8.07998255e-02  7.54866190e-03
 -7.89348781e-02 -2.68746931e-02  8.40758085e-02 -1.55584337e-02
  2.14893334e-02 -1.49510261e-02 -6.42927969e-03  5.19903861e-02
  1.21928841e-01 -4.16473672e-02 -3.54238413e-02 -1.31474808e-01
 -6.01757504e-03 -9.61114280e-03  3.18685845e-02 -2.24065706e-02
  7.58390054e-02  4.05598339e-03 -7.97012541e-03  1.08036242e-01
  1.27623854e-02 -8.29221979e-02 -4.35393602e-02 -4.17254865e-02
 -1.91838582e-04 -8.27462152e-02 -2.39151297e-03  2.17476338e-02
 -1.37432203e-01  2.77837925e-02  3.09993024e-03 -1.43193789e-02
 -2.73173451e-02  9.59365908e-03  1.27715049e-02  9.76172928e-03
  2.96391714e-02 -4.76865061e-02 -3.98946404e-02 -3.48434746e-02
 -1.67592075e-02 -2.47880481e-02 -1.79149583e-02 -2.53631789e-02
  3.08980439e-02  1.22555993e-01 -4.25233394e-02 -6.01461281e-08
  1.14649320e-02 -7.28183687e-02 -1.26581511e-03  3.93658504e-02
  8.95716399e-02 -5.22194803e-02 -7.78145045e-02 -9.85202491e-02
 -2.04365682e-02 -3.36879864e-02 -1.04003102e-02  2.59304829e-02
 -4.87245433e-02 -2.52905339e-02 -3.59141417e-02  3.99225391e-02
  2.97842291e-03  9.25414786e-02  1.25981309e-02 -1.07987225e-02
  8.40331241e-03  1.01372879e-02 -4.95936070e-03  1.43284313e-02
 -9.83973220e-03  6.31254688e-02 -7.47563178e-03  1.19421840e-01
  6.60503097e-03 -3.14866900e-02  4.80440557e-02 -5.54602779e-02
  4.10146788e-02 -3.05955652e-02  8.34982395e-02 -6.39101490e-03
  2.89022680e-02 -1.11713796e-03 -1.77286565e-02 -2.18111109e-02
  6.67171786e-03  6.39792010e-02  1.81770010e-03  6.81937486e-03
 -2.11080052e-02 -3.28216739e-02 -5.22182956e-02  1.55716343e-02
  1.01511262e-01 -1.23849213e-02 -7.33547062e-02  2.65146941e-02
 -2.21805032e-02  2.66781002e-02  3.97290066e-02 -2.13183295e-02
 -4.39760722e-02  2.40366254e-02 -8.61649364e-02  1.77176651e-02
  6.47715107e-02  6.50144294e-02  1.00430259e-02 -7.59690627e-02]"
"of the current data version.
const DATA_VERSION: u8 = 1; // Adding string to content
                            // Previous const DATA_VERSION: u8 = 0;

/// Account allocated size
const ACCOUNT_ALLOCATION_SIZE: usize = 1024;
/// Initialized flag is 1st byte of data block
const IS_INITIALIZED: usize = 1;
/// Data version (current) is 2nd byte of data block
const DATA_VERSION_ID: usize = 1;

/// Previous content data size (before changing this is equal to current)
const PREVIOUS_VERSION_DATA_SIZE: usize = mem::size_of::<AccountContentOld>();
/// Total space occupied by previous account data
const PREVIOUS_ACCOUNT_SPACE: usize = IS_INITIALIZED + DATA_VERSION_ID + PREVIOUS_VERSION_DATA_SIZE;

/// Current content data size
const CURRENT_VERSION_DATA_SIZE: usize = mem::size_of::<AccountContentCurrent>();
/// Total usage for data only
const CURRENT_USED_SIZE: usize = IS_INITIALIZED + DATA_VERSION_ID + CURRENT_VERSION_DATA_SIZE;
/// How much of 1024 is used
const CURRENT_UNUSED_SIZE: usize = ACCOUNT_ALLOCATION_SIZE - CURRENT_USED_SIZE;
/// Current space used by header (initialized, data version and Content)
pub const ACCOUNT_STATE_SPACE: usize = CURRENT_USED_SIZE + CURRENT_UNUSED_SIZE;

/// Future data migration logic that converts prior state of data
/// to current state of data
fn conversion_logic(src: &[u8]) -> Result<ProgramAccountState, ProgramError> {
    let past = array_ref![src, 0, PREVIOUS_ACCOUNT_SPACE];
    let (initialized, _, account_space) = array_refs![
        past,
        IS_INITIALIZED,
        DATA_VERSION_ID,
        PREVIOUS_VERSION_DATA_SIZE
    ];
    // Logic to upgrade from previous version
    // GOES HERE
    let old = try_from_slice_unchecked::<AccountContentOld>(account_space).unwrap();
    // Default sets 'somevalue' to 0 and somestring to default """"
    let mut new_content = AccountContentCurrent::default();
    // We copy the existing 'somevalue', the program instructions will read/update 'somestring' without fail
    new_content.somevalue = old.somevalue;

    // Give back
    Ok(ProgramAccountState {
        is_initialized: initialized[0] != 0u8,
        data_version: DATA_VERSION,
        account_data: new_content,
    })
}
impl Sealed for ProgramAccountState {}

impl IsInitialized for ProgramAccountState {
    fn is_initialized(&self) -> bool {
        self.is_initialized
    }
}

impl Pack for ProgramAccountState {
    const LEN: usize = ACCOUNT_STATE_SPACE;

    /// Store 'state' of account to its data area
    fn pack_into_slice(&self, dst: &mut [u8]) {
        let mut bw = BufWriter::new(dst);
        self.serialize(&mut bw).unwrap();
    }

    /// Retrieve 'state' of account from account data area
    fn unpack_from_slice(src: &[u8]) -> Result<Self, ProgramError> {
        let initialized = src[0] != 0;
        // Check initialized
        if initialized {
            // Version check
          ","[ 3.70038971e-02  2.84882039e-02 -4.28490601e-02  4.49161455e-02
  8.91942251e-03 -7.08530173e-02  1.75515413e-02  8.19014832e-02
 -4.02997173e-02  4.46863510e-02  1.01426737e-02  1.54921990e-02
 -2.92732520e-03 -6.81730136e-02 -6.43075109e-02  3.66406925e-02
 -4.31255624e-02 -1.79763678e-02 -3.51787619e-02 -1.51360054e-02
  6.06201030e-02 -6.50170520e-02 -7.97158945e-03 -1.54610090e-02
  9.40783173e-02  8.15894380e-02 -5.93540967e-02  5.19007072e-02
  6.98979273e-02 -6.66228980e-02  5.86288050e-02  1.49070332e-02
  1.15959123e-02  2.75548585e-02 -2.47723860e-04  3.10648605e-02
 -5.51677644e-02 -7.66573399e-02  3.50652146e-03  2.63201427e-02
 -3.17061096e-02  1.29882783e-01 -4.82896641e-02  6.54198825e-02
 -2.67048879e-03  6.78436086e-02 -8.88493732e-02  4.03256565e-02
 -4.07149643e-03  2.03712415e-02  4.22555767e-02  3.46774347e-02
 -5.14355600e-02  3.28667760e-02  2.85801496e-02 -3.70652825e-02
 -1.54582057e-02  3.36886980e-02 -3.57403867e-02  1.05188094e-01
 -1.43747693e-02  1.29167233e-02  9.73751917e-02 -3.05697247e-02
 -1.39795011e-03 -7.10581802e-03 -1.19981577e-03  4.99550216e-02
 -2.84509230e-02  6.80317963e-03 -6.96830004e-02  6.55814186e-02
 -9.45879593e-02  2.90700272e-02 -5.67608587e-02 -1.63540468e-02
  2.26203036e-02  2.31682304e-02 -3.81197743e-02 -8.12935606e-02
 -2.69086920e-02  3.58956237e-03  1.85301583e-02 -6.37953356e-02
  8.99199024e-03  9.70480405e-03  3.57220508e-03 -1.59298743e-05
 -2.31637806e-02 -1.83649398e-02  1.04845185e-02  3.03341374e-02
 -9.32105444e-03  5.83810583e-02  4.53428775e-02  1.41510181e-02
 -7.82162324e-02  3.76837105e-02  2.45399550e-02  2.77933031e-02
  3.21116149e-02  7.59209096e-02  2.96751428e-02  7.08766654e-02
  1.90615747e-02 -9.18162540e-02  6.46378770e-02  6.51178807e-02
 -7.96743259e-02  3.06523815e-02  5.54325990e-02  9.85515341e-02
 -4.39215302e-02 -3.21776345e-02  7.70322382e-02 -6.28404245e-02
  7.05850683e-03 -2.65232809e-02  3.44056673e-02  5.85241951e-02
  1.28033683e-01 -2.50221305e-02 -5.03938831e-02 -4.10379320e-02
 -1.00104064e-01 -5.10150567e-02  2.43853051e-02  6.76538141e-33
  5.18574985e-03 -8.14732462e-02 -2.88050324e-02  9.82332230e-02
 -2.65659429e-02  3.23122628e-02  1.02389893e-02  7.98750296e-02
 -1.19737737e-01  2.00060457e-02  2.01487355e-02  4.68568839e-02
 -7.24289045e-02 -7.09102396e-03  2.54647937e-02 -9.51319262e-02
  9.49765462e-03  7.18759894e-02  2.30549015e-02 -1.51115311e-02
  1.88658964e-02  2.30862815e-02  1.40373493e-02 -3.97551395e-02
  8.50716680e-02 -5.93779497e-02 -2.72343531e-02 -8.72227456e-03
 -1.16106905e-01 -5.84620796e-02 -7.65089737e-03 -3.09938993e-02
 -2.85783876e-02  6.73961081e-03  6.50373548e-02 -5.24693122e-03
  1.42823039e-02 -2.25504134e-02 -1.37365367e-02 -2.51295883e-02
  9.26854536e-02  7.58380443e-02  5.31774238e-02 -1.03001349e-01
 -1.09216347e-01 -4.67148647e-02  6.41582720e-03 -4.70607840e-02
 -2.37437245e-02 -6.02892227e-02  1.06217593e-01  5.96453175e-02
 -8.03979039e-02  3.58747347e-04  5.66740939e-03 -3.70711349e-02
 -5.17578050e-03 -7.20871985e-02  4.03381772e-02  8.11205059e-02
 -3.20010968e-02 -2.26084259e-03  3.56428046e-03  6.06419146e-02
  1.89647097e-02  2.56136768e-02  1.31151674e-03 -1.83937252e-02
  4.17683199e-02  1.65550020e-02 -3.44693661e-02 -9.04778317e-02
  1.21755181e-02  3.51540782e-02  8.49796738e-03 -5.22025190e-02
 -3.07087936e-02 -2.16902532e-02 -1.22280702e-01 -4.27667834e-02
  2.95109972e-02 -5.26620746e-02 -1.28210979e-02 -6.93877088e-03
 -1.79469157e-02 -1.07301353e-02  6.60737008e-02 -4.49198224e-02
 -2.37456262e-02 -7.78105983e-04 -3.77340652e-02 -8.21727961e-02
  7.68441558e-02 -9.25908610e-02 -4.17803377e-02 -6.53262986e-33
 -3.20738107e-02  1.95020046e-02  1.95467453e-02  4.00686935e-02
 -2.13999413e-02  2.35811137e-02  5.08509651e-02  5.73559403e-02
 -2.98122019e-02 -1.42837903e-02 -1.72711257e-02  1.85480248e-02
  3.84109132e-02 -2.13422589e-02 -8.70958436e-03  5.08578345e-02
 -5.79821952e-02 -4.70853299e-02  2.17249840e-02 -9.61582270e-03
 -3.37346122e-02  7.05365166e-02  1.42268091e-01  9.19261016e-03
 -2.71284040e-02  2.27117557e-02 -4.56067584e-02  1.96864102e-02
  2.51178555e-02 -1.06845535e-01 -4.20888513e-02 -5.41201644e-02
 -3.49423215e-02  8.91526788e-03 -2.93318629e-02 -1.42996117e-01
  3.22660804e-02  8.23233649e-02  3.49793956e-02  6.16186894e-02
  7.55114257e-02 -4.24280204e-03 -3.36053036e-02 -1.93819832e-02
 -1.63585541e-03  3.23693119e-02  2.29443479e-02  5.50559163e-02
  8.94103869e-05 -4.66914997e-02 -2.69347662e-03 -3.72064188e-02
 -3.52256745e-03 -1.52419705e-03  1.69221256e-02  6.29022392e-03
  2.39452440e-02 -1.03024859e-02  2.97205262e-02 -6.08521961e-02
  1.04460865e-03 -5.67138530e-02  6.43805638e-02 -8.46673623e-02
  4.47970070e-03  4.10569320e-03 -5.97379133e-02 -2.76619140e-02
 -7.24995285e-02  9.43665132e-02 -5.18743368e-03  6.36183470e-02
  4.72795963e-03 -2.16368586e-02  2.03333376e-03 -1.35710286e-02
  2.91780978e-02 -4.89011444e-02  8.95645246e-02  3.39370631e-02
 -1.10341795e-01  7.55477697e-02 -2.03794776e-03  1.08910049e-03
  7.13081285e-03  3.04691941e-02 -2.30225027e-02 -1.85422432e-02
 -2.27627996e-02 -3.15394183e-03 -1.03513815e-01  1.90091468e-02
 -7.47049451e-02 -8.22170228e-02 -4.27961051e-02 -5.08492839e-08
 -5.04491329e-02 -9.47532505e-02 -9.13005974e-03  9.57424790e-02
  9.56093296e-02 -2.98327282e-02 -2.06570923e-02  4.87080365e-02
  1.80865936e-02 -3.56556401e-02  1.02479666e-01  6.05604984e-02
 -2.98670307e-02 -8.94823745e-02 -8.25345516e-02 -7.25114020e-03
  6.07387535e-03 -1.08948641e-01  1.56043191e-03  1.71489660e-02
 -3.37845534e-02  8.11536610e-02 -1.81985646e-02  1.89292468e-02
  7.78546780e-02 -2.59689428e-02  5.41968159e-02  1.06288619e-01
  2.36158315e-02 -1.44545930e-02  9.42448527e-02  1.70036573e-02
  1.87632386e-02 -5.21226637e-02  1.45955402e-02 -6.19621202e-02
 -9.19111166e-03  6.27180189e-02  3.09423208e-02  9.71106347e-03
  6.26926795e-02  3.49164419e-02  7.37046897e-02  8.38081464e-02
 -2.22610068e-02 -2.86362171e-02 -1.10666163e-01 -1.82988541e-03
  3.23093049e-02 -7.35677481e-02  4.37420458e-02 -4.82073240e-02
 -1.00793019e-02  8.47691149e-02 -3.51087051e-03 -7.98191428e-02
 -4.82999310e-02  5.83083965e-02 -8.91933590e-03  3.94104123e-02
  6.55628229e-03 -2.47851107e-02 -2.72740126e-02 -1.37420297e-02]"
" if src[1] == DATA_VERSION {
                msg!(""Processing consistent version data"");
                Ok(try_from_slice_unchecked::<ProgramAccountState>(src).unwrap())
            } else {
                msg!(""Processing backlevel data"");
                conversion_logic(src)
            }
        } else {
            msg!(""Processing pre-initialized data"");
            Ok(ProgramAccountState {
                is_initialized: false,
                data_version: DATA_VERSION,
                account_data: AccountContentCurrent::default(),
            })
        }
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148/// Current state (DATA_VERSION 1). If version changes occur, this
/// should be copied to another (see AccountContentOld below)
/// We've added a new field: 'somestring'
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentCurrent {
    pub somevalue: u64,
    pub somestring: String,
}

/// Old content state (DATA_VERSION 0).
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct AccountContentOld {
    pub somevalue: u64,
}

/// Maintains account data
#[derive(BorshDeserialize, BorshSerialize, Debug, Default, PartialEq)]
pub struct ProgramAccountState {
    is_initialized: bool,
    data_version: u8,
    account_data: AccountContentCurrent,
}
12345678910111213141516171819202122DòngMô tả6Chúng ta đã thêm solana_program::borsh::try_from_slice_unchecked của Solana để đơn giản hoá việc đọc các tập dữ liệu con từ khối dữ liệu cha13-26Ở đây, chúng ta phải giữ lại phiên bản cũ, AccountContentOld tại dòng 24, trước khi mở rộng nó thành AccountContentCurrent tại dòng 17.60Nâng cấp lại hằng số DATA_VERSION71Chúng ta giờ đã có một phiên bản cũ, đồng thời lưu lại kích thước của nó86Cuối cùng là thêm logic cho quá trình nâng cấp phiên bản dữ liệu cũ thành phiên bản hiện hànhSau đó chúng ta cập nhật hàm mới để thêm vào trường somestring và khai báo luận lý của chỉ thị mới trong processor. Lưu ý việc nâng cấp cấu trúc dữ liệu đã được đóng gói trong pack/unpack.InstructionProcessor//! instruction Contains the main VersionProgramInstruction enum

use {
    crate::error::DataVersionError,
    borsh::{BorshDeserialize, BorshSerialize},
    solana_program::{borsh::try_from_slice_unchecked, msg, program_error::ProgramError},
};

#[derive(BorshDeserialize, BorshSerialize, Debug, PartialEq)]
/// All custom program instructions
pub enum VersionProgramInstruction {
    InitializeAccount,
    SetU64Value(u64),
    SetString(String), // Added with data version change
    FailInstruction,
}

impl VersionProgramInstruction {
    /// Unpack inbound buffer to associated Instruction
    /// The expected format for input is a Borsh serialized vector
    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError>","[-4.88831475e-02  2.91221160e-02 -3.88596654e-02 -1.63580030e-02
  1.53927719e-02 -4.25889231e-02  8.39825906e-03  2.58330870e-02
 -4.24037017e-02  3.26518454e-02  2.79846080e-02 -7.35324398e-02
  7.36505724e-03 -7.29412585e-02  1.07384305e-02  3.12939333e-03
 -5.39955758e-02 -3.77492495e-02  3.03920340e-02 -3.26060541e-02
  5.92425466e-03  4.72683944e-02 -6.22463003e-02  7.76946768e-02
  8.79840180e-02  2.87380591e-02 -1.20059457e-02 -4.98486869e-03
  1.33098569e-02 -1.91185120e-02  1.46676423e-02 -3.49482079e-03
 -2.22613122e-02  2.43926817e-03  8.77079442e-02  8.47147256e-02
 -5.50149754e-02 -5.20027392e-02  1.32030835e-02 -1.65256262e-02
 -2.46673469e-02  1.67677144e-03 -7.70609379e-02  7.10668368e-03
 -6.92563644e-03 -3.73322666e-02 -1.10337874e-02  6.91928938e-02
 -5.68920821e-02  4.24739905e-02  2.11708713e-03 -1.49537334e-02
 -5.28521352e-02  1.87738780e-02  6.36705682e-02  8.37598592e-02
 -9.98432375e-03  3.46347839e-02 -7.50398785e-02  1.78108420e-02
 -8.90777558e-02 -3.90762202e-02 -1.04510654e-02 -6.12838343e-02
  1.52525250e-02  5.72534092e-02 -2.05779597e-02  3.37502244e-03
  7.96976835e-02 -1.05607184e-02 -6.33890331e-02  4.22092043e-02
 -5.01851737e-02  1.46030355e-02 -8.08197930e-02  4.29034159e-02
 -2.44315974e-02  2.53453944e-03 -2.44819243e-02 -1.13589041e-01
 -3.03015579e-02 -6.87636584e-02 -9.84466542e-03  1.13324365e-02
  1.90755315e-02 -2.04504989e-02  1.46609740e-02 -4.97825854e-02
  5.79939187e-02 -3.90602578e-03  2.42387298e-02  2.60788016e-02
  7.55663738e-02  1.55824302e-02  4.74933088e-02  5.92734590e-02
 -3.77662294e-02  3.82311568e-02  1.03978880e-01  7.43768588e-02
 -1.47033799e-02  2.66226269e-02  5.77667542e-02  6.88314065e-02
  2.39497125e-02 -6.86885640e-02  6.89922720e-02  1.66416690e-02
 -1.27672672e-01 -3.37645598e-02  3.97209451e-02  1.10164635e-01
  5.41670062e-03 -4.36955690e-02  1.98143236e-02 -5.87043799e-02
  3.92827131e-02 -6.10560179e-03 -1.06709696e-01 -2.19393871e-04
  1.08814150e-01  1.05559791e-03  2.81503759e-02  3.21200229e-02
 -7.30083659e-02 -7.96057656e-02  5.30333631e-02  7.06474382e-33
  5.71904443e-02 -7.83206671e-02  4.24646598e-04 -5.78091480e-03
 -1.64749995e-02  4.13980000e-02  1.42795537e-02 -4.27755713e-03
 -9.69959870e-02  3.41534428e-02  6.95773307e-03 -1.61169916e-02
 -6.32283986e-02 -4.57346551e-02  2.94845514e-02 -1.02176405e-01
 -1.55844577e-02  5.12549281e-02  1.00082107e-01  3.51047032e-02
  7.68945217e-02 -2.65395129e-03 -8.39410350e-02 -2.24100184e-02
  2.74357703e-02  2.99727581e-02 -6.42581061e-02  3.23067345e-02
 -9.26880836e-02 -1.94861144e-02  3.55314426e-02 -2.65171025e-02
  3.86026502e-02  5.36782993e-03  2.34225318e-02 -3.97376865e-02
  1.10000577e-02 -2.30734348e-02  5.74848708e-03 -3.76323871e-02
  1.25634804e-01  4.20427695e-02  4.59136814e-02 -1.41244270e-02
 -3.19678821e-02 -1.02075294e-01 -6.15833551e-02  3.30836736e-02
  3.63314077e-02 -6.30150363e-02  1.20380878e-01  5.86360916e-02
 -3.49513255e-02 -6.17305040e-02 -2.56274566e-02 -8.77890363e-02
 -3.06321178e-02  1.39323883e-02  3.81860845e-02  2.58977115e-02
  5.75238988e-02  3.24555561e-02 -6.68316483e-02  2.14265175e-02
  6.02204632e-03  3.81370261e-02 -4.15746076e-03 -5.18001541e-02
  1.11359656e-02  1.57150126e-03 -3.84033620e-02  1.30682939e-03
 -4.59229946e-02  3.69361192e-02  2.55929958e-02 -1.23407710e-02
 -2.43635681e-02  4.43211989e-03 -1.55569436e-02 -8.17652270e-02
 -5.96330725e-02  8.06962606e-03 -1.13298230e-01  1.95356291e-02
  1.37670769e-03  7.86997005e-02 -1.98142286e-02 -3.44214700e-02
 -7.01133385e-02  8.10693309e-04  3.75923403e-02 -9.80368182e-02
  1.52685037e-02 -7.39059523e-02  5.80291301e-02 -6.82733952e-33
  9.78148207e-02 -3.23535204e-02  6.13679029e-02 -1.88250262e-02
 -2.08998751e-02 -2.84930263e-02  8.21325481e-02 -8.10892880e-03
 -5.25115198e-03  3.64563172e-03 -2.77792513e-02  1.25823691e-02
  9.96296294e-03 -4.72665438e-03  2.76409276e-02  2.94778571e-02
 -5.44523932e-02 -5.90447374e-02 -4.78114113e-02  6.23320006e-02
  3.33941798e-03  1.20100498e-01  5.12675717e-02  5.81525788e-02
  8.43043905e-03 -7.55246263e-04 -5.05774003e-03  5.23693152e-02
  4.40859087e-02 -7.18824416e-02 -2.98218913e-02 -3.62478085e-02
 -1.92424394e-02  1.41654648e-02 -3.41813602e-02 -6.44400865e-02
  5.11472151e-02  3.08265397e-03  1.18517759e-03  7.23327920e-02
  4.72864397e-02 -1.56036140e-02 -1.14514194e-01  2.74421624e-03
  5.39157316e-02  4.62555997e-02  6.74206316e-02  9.21978280e-02
  6.28943881e-03 -7.24292472e-02  1.65843463e-03 -1.41201150e-02
  1.70812160e-02  3.42454500e-02  7.20661646e-03 -3.40752974e-02
  7.36488700e-02 -8.48702639e-02 -5.53334430e-02 -7.04149976e-02
 -3.41058187e-02 -4.87075709e-02  7.32664242e-02 -2.79403236e-02
  7.52744749e-02 -7.35683041e-03 -3.79923917e-02 -7.97406863e-03
  1.98795758e-02  7.00237509e-03  1.92593019e-02 -2.80382317e-02
 -3.22462469e-02 -5.54588698e-02  4.17327471e-02 -2.53525302e-02
 -5.67323640e-02  1.22288370e-03  3.00296098e-02  4.88071181e-02
 -1.12310238e-01  2.88111698e-02  3.28298248e-02  2.24990565e-02
 -1.23535516e-04 -4.14699353e-02  2.33846996e-02 -1.47894130e-03
  6.49717730e-03  3.83351534e-03 -1.07863188e-01 -4.91973348e-02
 -2.56153699e-02 -1.60926264e-02 -1.56741738e-02 -5.61501956e-08
 -9.77741927e-02 -2.63505336e-02 -3.22925858e-02  1.24495327e-01
  7.65272751e-02  3.91582958e-02 -1.25179753e-01 -8.38646665e-02
  4.29570265e-02 -1.18772760e-01 -1.65152662e-02  7.62194246e-02
 -8.37399345e-03 -8.16331208e-02 -1.99983008e-02 -2.24486943e-02
  9.86315869e-03  6.35903794e-03 -9.02892184e-03  2.41397582e-02
 -3.94092649e-02  3.83944958e-02 -3.45045747e-03 -1.56565197e-02
  6.99374825e-02  1.01332134e-03  8.11271078e-04  1.15136661e-01
  8.82707909e-02 -1.49939712e-02  1.33281022e-01 -1.18057840e-02
  9.23355594e-02  1.81409083e-02  3.15856040e-02 -1.86921507e-02
  8.82757306e-02  9.26339775e-02  3.80021818e-02 -1.61380041e-02
  7.83961788e-02  6.01541288e-02 -1.25396654e-01  7.84353688e-02
 -5.91751486e-02 -5.04018813e-02 -7.23987669e-02  4.25277557e-03
  8.35671276e-02 -2.96331979e-02 -1.42179765e-02 -1.68990102e-02
 -1.31605426e-02  6.11931160e-02 -1.20537113e-02 -7.07654804e-02
  4.53271940e-02 -3.99766117e-03 -2.21875422e-02  6.52485117e-02
  6.91570193e-02 -2.45232116e-02  1.49870859e-02 -2.91401614e-02]"
"{
        let payload = try_from_slice_unchecked::<VersionProgramInstruction>(input).unwrap();
        // let payload = VersionProgramInstruction::try_from_slice(input).unwrap();
        match payload {
            VersionProgramInstruction::InitializeAccount => Ok(payload),
            VersionProgramInstruction::SetU64Value(_) => Ok(payload),
            VersionProgramInstruction::SetString(_) => Ok(payload), // Added with data version change
            _ => Err(DataVersionError::InvalidInstruction.into()),
        }
    }
}
12345678910111213141516171819202122232425262728293031//! Resolve instruction and execute

use crate::{
    account_state::ProgramAccountState, error::DataVersionError,
    instruction::VersionProgramInstruction,
};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    program_pack::{IsInitialized, Pack},
    pubkey::Pubkey,
};

/// Checks each tracking account to confirm it is owned by our program
/// This function assumes that the program account is always the last
/// in the array
fn check_account_ownership(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {
    // Accounts must be owned by the program.
    for account in accounts.iter().take(accounts.len() - 1) {
        if account.owner != program_id {
            msg!(
                ""Fail: The tracking account owner is {} and it should be {}."",
                account.owner,
                program_id
            );
            return Err(ProgramError::IncorrectProgramId);
        }
    }
    Ok(())
}

/// Initialize the programs account, which is the first in accounts
fn initialize_account(accounts: &[AccountInfo]) -> ProgramResult {
    msg!(""Initialize account"");
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    // Just using unpack will check to see if initialized and will
    // fail if not
    let mut account_state = ProgramAccountState::unpack_unchecked(&account_data)?;
    // Where this is a logic error in trying to initialize the same account more than once
    if account_state.is_initialized() {
        return Err(DataVersionError::AlreadyInitializedState.into());
    } else {
        account_state.set_initialized();
        account_state.content_mut().somevalue = 1;
    }
    msg!(""Account Initialized"");
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}

/// Sets the u64 in the content structure
fn set_u64_value(accounts: &[AccountInfo], value: u64) -> ProgramResult {
    msg!(""Set new value {}"", value);
    let account_info_iter = &mut accounts.iter();
   ","[-2.65654773e-02  2.33565420e-02  9.95030627e-03  1.20956274e-02
 -9.05838609e-03 -5.57112619e-02 -4.04563695e-02  1.00105740e-02
 -2.83482764e-02 -1.58875454e-02  1.31237525e-02 -5.69876842e-02
 -9.97299552e-02 -1.37964422e-02  5.26472740e-02  2.00810307e-03
 -5.10162003e-02 -1.49517469e-02 -5.37588894e-02 -3.18156406e-02
  6.02288991e-02  9.73987021e-03 -7.93673936e-03  3.75081263e-02
 -2.30263057e-03 -4.58854511e-02 -3.97433639e-02  2.02006544e-03
  2.64193807e-02 -1.34768160e-02  5.52250668e-02 -3.48880934e-03
 -5.09976856e-02  6.80416003e-02  6.34376854e-02  1.06597871e-01
 -2.23119035e-02 -6.26287982e-02  1.01793632e-02 -7.07101375e-02
  1.50503567e-03  7.05628246e-02 -8.57885256e-02  1.31643564e-02
  1.38053447e-02 -4.66273278e-02 -5.77278882e-02 -3.43640670e-02
  4.80466383e-03  1.35718295e-02 -2.90033761e-02  2.79934928e-02
 -2.11647246e-02  4.38665114e-02  1.00900792e-01 -1.91230066e-02
  1.76364779e-02  2.41900645e-02  4.69699576e-02  2.82344762e-02
 -4.10583727e-02 -6.06887005e-02  2.92512923e-02 -1.15270630e-01
  3.48913623e-03 -2.76923794e-02 -3.25836614e-03 -2.39375532e-02
  2.25537829e-02 -2.07001474e-02  1.39823072e-02 -3.08966935e-02
 -1.55881355e-02  2.88598482e-02 -6.97978735e-02  1.82830077e-02
  6.72282791e-03 -3.72201367e-03 -1.66244842e-02 -3.89028899e-02
 -6.45263866e-02 -4.38513942e-02  3.95492613e-02  1.06400877e-01
 -3.51283848e-02  1.92950871e-02 -4.72072996e-02 -3.48460712e-02
  7.25623593e-02  1.66750345e-02 -2.59226523e-02 -4.49516401e-02
  4.98321727e-02  8.54704008e-02  8.32238868e-02  4.28305082e-02
  3.01406085e-02 -1.50223693e-03 -2.19983608e-02  8.84145647e-02
 -7.90763088e-03 -2.64597405e-02  6.26047328e-03 -2.37122383e-02
  5.87555394e-02 -3.44075114e-02  9.58874449e-02 -4.27352227e-02
 -9.41890851e-02  1.01169348e-02  5.60729131e-02  5.12005948e-02
 -2.35894006e-02  7.07981829e-03  1.92392722e-03 -7.69693553e-02
 -5.72964363e-02  3.23019437e-02 -3.44882086e-02  5.29873520e-02
  1.25579759e-01  2.44372338e-02  2.46655568e-02  3.98230664e-02
 -8.48592818e-02 -6.96607083e-02  7.65337795e-02  1.12765842e-32
  4.50707227e-03 -6.80134520e-02 -6.57965913e-02  4.62265946e-02
  3.65040451e-02 -2.51505431e-02  3.36003713e-02  4.87442017e-02
 -1.45198867e-01  3.01021785e-02 -4.12445478e-02 -3.65810916e-02
 -3.28390934e-02 -2.71536335e-02  3.41905355e-02 -8.85646865e-02
  1.46980053e-02  4.22593318e-02  4.11397777e-02  5.38939908e-02
  8.55364427e-02 -4.27706912e-02 -4.55422848e-02 -8.01415220e-02
  7.17475486e-04 -2.37230062e-02 -9.81443524e-02 -3.43661085e-02
  9.34028253e-03 -3.00805201e-03 -2.69783903e-02  1.46361180e-02
  3.28851677e-02  2.24144049e-02  4.39726971e-02 -7.27297738e-02
  2.24678069e-02  1.17106643e-02 -1.24425627e-01 -1.24909552e-02
  1.28289178e-01  4.36532646e-02 -2.59255152e-02  1.46826599e-02
  5.89596741e-02 -4.77606617e-02 -8.49367771e-03  1.58868115e-02
  4.70378511e-02 -3.92277278e-02  1.79336742e-02  8.45366120e-02
 -4.27957103e-02 -8.10143128e-02  3.27331992e-03 -1.04038499e-01
  5.96778467e-02 -5.12666106e-02  6.28240407e-02 -1.74676087e-02
 -2.50844043e-02  6.04354665e-02 -4.82782722e-03 -7.91851152e-03
  3.41150649e-02  2.44231243e-02 -6.61983788e-02 -4.66543902e-03
 -6.53524976e-03  8.96700751e-03 -8.84551033e-02  5.62385097e-02
 -5.61764129e-02  2.82335933e-02 -2.41939612e-02 -7.46222660e-02
  1.34331360e-03 -1.04518920e-04 -2.58972328e-02 -9.88091379e-02
  1.65004581e-02 -3.57871279e-02 -1.02698058e-01  6.41483590e-02
 -3.57894488e-02  3.80046107e-02 -1.44689325e-02 -1.11238137e-02
 -2.58512292e-02  1.76151972e-02  6.50665537e-03 -8.49532783e-02
 -4.24733013e-02 -1.24535911e-01 -1.77523103e-02 -1.15335494e-32
  4.43902910e-02  8.12051445e-03 -3.85135263e-02 -3.01260389e-02
 -2.24751271e-02 -7.87765384e-02  5.10671735e-02  7.61373341e-02
 -3.23215649e-02 -1.18621057e-02 -4.67069447e-02 -3.34210545e-02
  3.40852067e-02  1.54656265e-02 -5.14095202e-02  6.27379119e-02
 -1.05558559e-01 -8.34064558e-02  2.86089554e-02 -9.42566153e-03
 -4.58348691e-02  3.01275961e-02  1.09064709e-02  9.24071521e-02
 -4.47065395e-04  3.66588049e-02  4.84159254e-02  4.14160080e-02
  7.47725070e-02 -5.35915494e-02  4.40093093e-02 -4.96232510e-02
 -5.12858033e-02  4.93008494e-02 -3.12549784e-03 -4.85461690e-02
  8.08788761e-02  1.66294184e-02 -5.38685173e-02  2.42103599e-02
  7.45046139e-02  8.53326079e-03 -1.08944297e-01  4.68807817e-02
 -2.49357820e-02  5.70644177e-02  1.03542931e-01  9.77995247e-02
 -9.87220928e-03 -6.58741593e-02  9.14067030e-02 -4.49220054e-02
 -5.15406765e-02  2.59528849e-02 -7.22082146e-03 -3.78368311e-02
  9.04176906e-02 -3.00344303e-02 -2.15710849e-02 -2.37099435e-02
 -3.40560218e-03 -5.27395830e-02  7.68040717e-02 -4.94531915e-02
  8.43366683e-02 -2.84513328e-02 -1.01533435e-01  2.43712626e-02
  9.15738195e-03  6.56397715e-02  2.02627927e-02 -7.81593472e-03
 -1.28733693e-02 -9.47033018e-02  3.13189365e-02 -2.87754997e-03
 -2.23002620e-02 -4.94174249e-02  3.55803072e-02  7.00073913e-02
 -5.93138374e-02  5.70186116e-02  4.51194458e-02  1.01015247e-01
  5.74868247e-02  7.67088495e-03  5.09165227e-02  8.00113082e-02
 -6.35896549e-02  6.81628520e-03  1.46525155e-03 -4.68764454e-02
 -6.28852323e-02  2.90774927e-02 -5.08582452e-03 -5.99351608e-08
 -9.91184935e-02  2.09304634e-02 -8.03179070e-02  7.01402053e-02
  2.69938055e-02  2.46566124e-02 -2.79582124e-02 -6.24518692e-02
  3.74480663e-03 -7.21309483e-02 -3.95597927e-02  5.76646738e-02
 -8.72613862e-02 -4.73339017e-03  4.34968099e-02 -1.21528907e-02
 -5.58101758e-03  6.58418536e-02  3.82647407e-03 -4.50685807e-02
 -4.27126139e-02 -3.96166444e-02  7.34039070e-03 -5.67343943e-02
 -2.59943567e-02  3.57484408e-02 -7.33302161e-03  1.08038545e-01
  3.45046818e-02 -3.75285186e-02  6.19444437e-02 -3.17428596e-02
  9.42081660e-02  5.39231598e-02  2.46140864e-02  1.12611465e-02
 -1.89825555e-03  2.89123189e-02  1.20487034e-01 -2.21362021e-02
  2.75114216e-02  6.23179413e-02 -6.05774000e-02  5.26325889e-02
 -6.82985857e-02 -6.40865862e-02 -1.82389040e-02  1.99743006e-02
  6.20547682e-02  1.40251219e-02 -1.74605772e-02 -3.74187566e-02
 -4.10198495e-02  9.74677056e-02  3.30185629e-02 -3.83868590e-02
 -2.14741770e-02 -5.81738949e-02 -5.97722344e-02  7.61813000e-02
  1.04437433e-01 -3.33159752e-02  1.95299685e-02  3.96757619e-03]"
"let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    account_state.content_mut().somevalue = value;
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}

/// Sets the string in the content structure
fn set_string_value(accounts: &[AccountInfo], value: String) -> ProgramResult {
    msg!(""Set new string {}"", value);
    let account_info_iter = &mut accounts.iter();
    let program_account = next_account_info(account_info_iter)?;
    let mut account_data = program_account.data.borrow_mut();
    let mut account_state = ProgramAccountState::unpack(&account_data)?;
    account_state.content_mut().somestring = value;
    // Serialize
    ProgramAccountState::pack(account_state, &mut account_data)
}
/// Main processing entry point dispatches to specific
/// instruction handlers
pub fn process(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!(""Received process request 0.2.0"");
    // Check the account for program relationship
    if let Err(error) = check_account_ownership(program_id, accounts) {
        return Err(error);
    };
    // Unpack the inbound data, mapping instruction to appropriate structure
    msg!(""Attempting to unpack"");
    let instruction = VersionProgramInstruction::unpack(instruction_data)?;
    match instruction {
        VersionProgramInstruction::InitializeAccount => initialize_account(accounts),
        VersionProgramInstruction::SetU64Value(value) => set_u64_value(accounts, value),
        VersionProgramInstruction::SetString(value) => set_string_value(accounts, value),
        _ => {
            msg!(""Received unknown instruction"");
            Err(DataVersionError::InvalidInstruction.into())
        }
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102Sau khi xây dựng và áp dụng chỉ thị VersionProgramInstruction::SetString(String), chúng ta sẽ thấy dữ liệu Account được cập nhật sẽ được sắp xếp như sau:#  Các nguồn tài liệu khácMô tả Borshopen in new windowSolana try_from_slice_uncheckedopen in new windowReference Implementationopen in new window # Account MapsMap là một kiểu cấu trúc thường dùng trong lập trình và bao gồm một key tương ứng với một value. Cặp key-value có thể là bất kỳ kiểu dữ liệu nào trong đó key như là chìa khoá định danh dữ liệu được lưu trong value. Do đó, với mỗi key, chũng ta có thể thêm, xoá, cập nhật dữ liệu vào value một cách hiệu quả.Mô hình Account trong Solana, như đã biết, yêu cầu dữ liệu của Program và các trạng thái của nó phải được lưu ở những Account riêng biệt. Những Account này có một địa chỉ định danh tương ứng và mô hình đó rất giống với map! Tìm hiểu thêm về mô hình Account trong Solana tại đâyopen in new window.Như vậy, dễ hiểu khi mà ta lưu values vào những Account tách biệt và dùng key để truy vấn dữ liệu trong values. Tuy nhiên, điều này lại gây ra một số vấn đề như là:Những địa chỉ đề cập hầu hết không phải là một keys lý tưởng, khi","[-2.71713287e-02  6.36822805e-02 -6.28727451e-02 -2.32225526e-02
 -8.09932649e-02  3.52910459e-02  7.89111629e-02  1.06839076e-01
 -1.79844070e-02 -4.51316573e-02  2.87890155e-02 -1.02501221e-01
  3.90090719e-02 -5.03152683e-02  6.69018030e-02  4.48205285e-02
 -5.22626899e-02 -8.17689579e-04 -2.70770490e-02 -1.82333943e-02
  9.21015367e-02 -3.18165938e-03  1.36547964e-02  2.52662916e-02
  4.31006178e-02  7.76186511e-02 -2.37085856e-02  1.02643184e-02
  3.53986062e-02  1.88380748e-03  6.08140044e-02 -1.02172066e-02
 -2.06161644e-02  4.06245776e-02  6.20830543e-02  1.06068999e-01
 -3.14322859e-02 -6.56388327e-02  6.13517547e-03 -5.19040823e-02
 -3.98328900e-02  7.55513981e-02 -6.44647628e-02  4.83633429e-02
 -1.87320877e-02 -3.35236802e-03 -3.11368089e-02 -1.95384827e-02
 -9.94594675e-03 -2.75033526e-04 -2.97080800e-02  2.14827750e-02
 -4.91385981e-02 -1.58572122e-02  2.16295980e-02  9.03189927e-02
  3.79188620e-02 -1.71121843e-02  4.95574623e-03  7.21284822e-02
 -1.58051755e-02 -1.49556231e-02  4.09057513e-02  2.82526202e-03
  3.08809546e-03  3.02817561e-02 -2.75498591e-02  3.68926749e-02
 -2.47944165e-02 -8.21249709e-02 -2.06554439e-02  1.24099171e-02
 -1.54636353e-02  5.87769821e-02 -2.34374236e-02 -7.03495508e-03
 -5.87895960e-02  3.16433096e-03 -6.02597781e-02 -6.72562718e-02
 -3.16058844e-02  1.66504998e-02  3.23809758e-02  4.87531312e-02
  4.08008844e-02  3.21398377e-02 -1.98159609e-02 -1.33115696e-02
 -4.37603407e-02  8.06724876e-02 -3.85667533e-02 -4.48369533e-02
  4.71384488e-02  5.93589470e-02  2.30084341e-02  9.06513706e-02
 -3.40534672e-02 -1.99314905e-04 -1.95341036e-02  5.48180901e-02
 -3.88533957e-02  5.87678514e-02  8.87596235e-02  6.42224178e-02
 -4.52778675e-02 -8.46295357e-02  6.44669756e-02 -3.90805118e-02
 -1.08432330e-01 -1.38379214e-02 -5.61952731e-03  1.48223653e-01
 -3.08581349e-02 -2.13241167e-02 -5.26757203e-02 -8.24723579e-03
 -4.40958403e-02 -3.24845221e-03 -2.40722653e-02  6.70149252e-02
  1.08295001e-01 -2.29137652e-02 -5.04661985e-02  9.39847529e-03
 -8.84007365e-02 -5.99731542e-02  4.24211435e-02  4.37941257e-33
 -3.21401469e-02 -8.74147490e-02 -2.31522247e-02  6.37661368e-02
 -5.50519526e-02  1.37812970e-02  2.63595511e-03  3.83593850e-02
 -9.15411636e-02  2.93442663e-02  1.77958366e-02 -3.73951346e-02
 -3.78754847e-02  3.55002172e-02 -5.26710646e-03 -1.09385297e-01
  2.37983037e-02  2.53291223e-02  9.61739793e-02 -1.58250071e-02
  6.43838421e-02  3.87683772e-02  4.04764316e-04 -9.22510251e-02
  2.56647859e-02  4.86222729e-02 -4.63862121e-02 -8.53498839e-03
 -6.16213679e-02 -2.42739432e-02  4.91808578e-02 -6.54834360e-02
  7.10489079e-02  2.44396515e-02  7.62889013e-02 -2.01192033e-02
  1.39041757e-02  7.20397057e-03 -5.40705770e-02  9.53308831e-04
  1.19299904e-01 -1.32405106e-02  6.40539676e-02  3.27700153e-02
 -3.10343318e-02 -4.11708280e-02  1.30516272e-02 -1.26979442e-03
 -4.59711887e-02 -5.82127236e-02  4.51666191e-02  9.05525014e-02
 -1.12506315e-01 -4.27235700e-02 -2.24636998e-02 -5.46390116e-02
 -3.15921046e-02 -8.37370381e-02 -5.49080707e-02 -3.18161696e-02
 -9.97697003e-03  7.16434047e-02  9.01594665e-03  4.32201475e-02
 -6.47352124e-03  3.85947898e-02 -4.38347086e-02 -8.33085328e-02
  7.65773132e-02 -6.11934485e-03 -5.69031984e-02  7.51369586e-03
 -7.81967714e-02  4.68116719e-03 -5.95416985e-02  9.81633458e-03
 -5.03097326e-02 -6.47290125e-02 -4.54667099e-02 -4.86610271e-02
  3.22365239e-02 -5.94789051e-02 -9.99142155e-02  9.98374820e-02
 -2.69478485e-02  7.18759224e-02 -4.98874020e-03 -7.04920292e-02
  1.79697517e-02  1.83795877e-02 -1.53434770e-02 -1.13719910e-01
 -5.04488535e-02 -7.99606740e-02  2.80150231e-02 -6.29711222e-33
  7.47952759e-02 -5.69839291e-02  1.35554457e-02 -2.50009336e-02
  3.06020789e-02 -5.92434173e-03  6.51847348e-02  6.51803017e-02
 -3.41447592e-02  6.16378486e-02 -7.25347176e-02  1.66855771e-02
  2.30896454e-02 -5.17755449e-02  5.27700856e-02  1.04038864e-01
 -4.98636663e-02 -1.90606415e-02  6.36729449e-02 -4.55820374e-02
 -2.96486448e-02  1.06818065e-01  3.09086852e-02  4.21020144e-04
  1.24505721e-02  2.27255430e-02 -1.72172766e-02  1.23509308e-02
  4.62054387e-02 -5.40324021e-03  1.52313802e-02 -4.80109043e-02
 -3.11651882e-02  4.67994139e-02 -4.70060483e-02 -1.22086257e-01
  6.67833313e-02  2.22313721e-02 -3.16094905e-02  5.45060784e-02
  1.05584972e-01 -2.97376513e-02 -6.41244873e-02  1.98783707e-02
  9.88316070e-03  2.08449215e-02  1.09234247e-02  2.19342671e-02
  2.34156456e-02 -1.70788951e-02  2.14845613e-02 -8.33048895e-02
 -5.64245097e-02 -4.95865904e-02  2.48230491e-02 -6.05676432e-05
  7.37314150e-02 -6.73071593e-02  3.79090197e-02 -1.02263570e-01
 -2.04844140e-02 -4.11678366e-02  6.22070441e-03  4.35078284e-03
  9.08608213e-02 -4.03693244e-02 -4.58810516e-02 -5.42905182e-02
 -1.20591568e-02 -1.95095036e-02 -4.43763137e-02 -4.41881046e-02
  1.71153620e-02 -8.50197077e-02  4.98978607e-02  4.33496609e-02
 -5.50323576e-02  1.39341718e-02  3.71526442e-02  5.21021858e-02
 -4.08205427e-02  4.60645109e-02 -2.80300481e-03  5.22511452e-02
  5.13022430e-02 -4.91329581e-02  2.99301781e-02  4.00762856e-02
 -2.18475889e-02 -3.07808407e-02 -5.32735251e-02  5.89594245e-02
 -1.35370661e-02 -3.47578190e-02 -5.28365001e-02 -5.61480853e-08
 -1.06778570e-01 -1.32961228e-01 -4.37093899e-02  9.74767357e-02
  3.13113742e-02 -7.75162596e-03 -4.30577546e-02 -4.88281697e-02
 -3.61832976e-02 -7.74846599e-02 -2.02030744e-02  5.50661422e-02
 -5.25196865e-02 -3.95991430e-02 -3.53581905e-02 -4.40338068e-02
  2.44060531e-02 -2.59383004e-02  3.06492532e-03  1.12086609e-02
 -1.55174537e-02  4.45161164e-02  4.78054601e-04  3.24497535e-03
  3.15406695e-02  3.16168345e-03  1.00413077e-02  9.13920030e-02
  1.08163893e-01  6.08570911e-02  1.06086440e-01  9.40906443e-03
  1.79048739e-02 -1.48561299e-02 -4.68757302e-02 -2.77295001e-02
  5.46118692e-02 -3.24873254e-03  5.37837036e-02 -1.34349884e-02
  9.81416181e-02  2.45100204e-02 -2.82920934e-02  6.62104413e-02
  3.60713527e-02 -6.18962049e-02 -3.38676795e-02 -6.58821827e-03
  1.44318044e-01  8.35533626e-03 -7.46672228e-02 -5.81834801e-02
 -3.57511453e-03  2.78449599e-02 -3.20559591e-02 -8.25782269e-02
 -1.88804860e-03  2.08996190e-03 -1.47649627e-02  2.11167838e-02
 -3.63422632e-02 -6.22637123e-02  4.17425251e-03 -4.43504602e-02]"
"mà bạn cần phải ghi nhớ tất cả chúng để truy vấn các dữ liệu tương ứng.Những địa chỉ đề cập bên trên được tham chiếu bằng khoá công khai của những Keypairs (cặp khoá) khác nhau, trong đó khoá công khai bắt buộc phải có khoá riêng tư tương ứng. Khoá riêng tư lại cần thiết để ký các chỉ thị và lại bắt buộc chúng ta phải lưu ở một nơi nào đó, điều mà thật sự không được khuyến khích trong thực tiễn.Điếu đó dẫn đến rất nhiều vấn đề cho lập trình viên muốn hiện thực Map trực tiếp vào Program trên Solana. Giờ hãy quan sát một vài cách để giải quyết vấn đề trên.# Tìm PDAPDA là viết tắt Program Derived Addressopen in new window. Chúng là những địa chỉ được tìm thấy thông qua tập hợp gồm seeds và program_id.Điểm đặc biệt của PDA là chúng không tồn tại khoá riêng tư tương ứng. Điều này bởi vì những địa chỉ này không nằm trên đường cong ED25519. Vì vậy, duy nhất Program sinh ra PDA mới có thể ký lên các chỉ thị cho các PDA đó bằng seeds. Tìm hiểu thêm tại đâyopen in new window.Sau khi đã nắm được khái niệm PDA, chúng ta có thể sử dụng để tạo kiểu Map! Hãy lấy ví dụ một Blog Program để hiểu rõ hơn cách sử dụng.Trong Blog Program, chúng ta muốn mỗi User sẽ có một trang Blog. Bài blog có thể có nhiều Posts. Cụ thể hơn, mỗi User sẽ map đến một trang Blog. Nhiều bài Posts sẽ được map về một trang Blog.User sẽ có kết nối 1:1 với Blog trong khi Blog sẽ có kết nối 1:N với Posts.Với 1:1, chúng ta mong mốn địa chỉ của trang blog có thể được suy ra độc nhất từ địa chỉ người dùng. Cơ chế này sẽ giúp chúng ta lấy được dữ liệu của blog khi biết được địa chỉ chử sở hữu blog đó. Hiển nhiên, seeds cho Blog phải chứa địa chỉ chủ sở hữu, và có thể thêm một tiền tố như ""blog"" để giúp chú thích.Với 1:N, chúng ta mong muốn địa chỉ mỗi bài post sẽ được suy ra từ không chỉ địa chỉ trang blog mà còn từ cách thành tố khác giúp tạo ra N địa chỉ bài post trong một trang blog. Trong ví dụ bên dưới, mỗi địa chỉ bài post được suy ra bằng địa chỉ trang blog, một thành tố phụ - slug - để định danh cho mỗi bài post, và tiền tố ""post"" để chú thích.Code mẫu được viết như sau:AnchorRustPress </> button to view full sourceuse anchor_lang::prelude::*;

declare_id!(""2vD2HBhLnkcYcKxnxLjFYXokHdcsgJnyEXGnSpAX376e"");

#[program]
pub mod mapping_pda {
    use super::*;
    pub fn initialize_blog(ctx: Context<InitializeBlog>, _blog_account_bump: u8, blog: Blog) -> ProgramResult {
        ctx.accounts.blog_account.set_inner(blog);
        Ok(())
    }

    pub fn create_post(ctx: Context<CreatePost>, _post_account_bump: u8, post: Post) -> ProgramResult {
  ","[-7.92503953e-02 -5.70647372e-03 -1.83121231e-03 -1.22312710e-01
 -9.13811401e-02  5.14516188e-03  5.73741123e-02  6.51628245e-03
  4.52502519e-02  4.43134271e-02  1.40780941e-01 -6.92416057e-02
 -3.01534068e-02 -5.03680781e-02  5.49734496e-02 -9.60291550e-03
 -5.92398308e-02  2.89192200e-02 -8.48081782e-02 -4.41058315e-02
 -1.09395385e-02  1.22936466e-03 -3.61771397e-02 -2.55840756e-02
 -4.36008647e-02  1.91550758e-02  3.39081585e-02  1.01387769e-01
  1.92311984e-02 -8.59098583e-02 -2.21082345e-02  1.07476167e-01
 -3.01718741e-04  1.91967916e-02  9.64988619e-02  4.98195179e-02
 -3.65082212e-02 -1.44346338e-02  5.01914099e-02 -7.59165909e-04
 -8.68446752e-02 -2.94182412e-02 -4.18803357e-02 -9.81232226e-02
  6.67494312e-02  3.94290872e-03 -6.36021644e-02  8.40293430e-03
 -4.86642383e-02 -4.23706658e-02 -5.47935627e-02  1.03389502e-01
 -3.62296514e-02  4.89144921e-02 -5.24494424e-02  1.31914029e-02
 -5.03110215e-02  5.81632033e-02  3.33298743e-02 -1.94551982e-02
 -3.64213400e-02  2.18109749e-02 -8.13864619e-02 -4.13407311e-02
 -5.19257691e-03 -1.39202492e-03 -7.74087235e-02 -5.74043468e-02
  1.59907620e-02  2.47713793e-02 -2.14066226e-02 -1.55482171e-02
 -7.68314824e-02  1.74787082e-02 -4.64849994e-02  7.38428384e-02
 -7.37612247e-02  4.73421179e-02  2.49560736e-02 -8.96846280e-02
  4.33087274e-02  2.80747116e-02  1.15692606e-02 -3.44869159e-02
 -6.58421516e-02  6.01097643e-02 -4.85253893e-02  1.78057645e-02
  1.76197402e-02  4.38034907e-03  4.57333550e-02  6.73777685e-02
  1.24093294e-02  1.67577714e-02 -6.14963938e-03 -4.51963618e-02
  2.47037467e-02  8.50796923e-02  3.48651595e-03  4.95766066e-02
  4.11404148e-02  3.73007469e-02 -1.52749429e-02 -6.69904128e-02
 -4.14498635e-02 -5.43711998e-04  9.14164484e-02 -5.42552769e-02
  3.13954018e-02 -1.50869670e-03 -7.15812296e-02 -2.03077290e-02
 -7.39530055e-03 -1.52309805e-01 -5.53700067e-02  4.11732793e-02
 -2.13165153e-02 -6.00825436e-03 -1.46784214e-02  1.96516626e-02
  1.28720589e-02 -5.89412525e-02 -7.07235187e-02 -2.01425646e-02
 -9.07848850e-02 -2.70413794e-02  8.01701024e-02  2.18836023e-32
  1.45511441e-02  8.84229131e-03  1.86884906e-02 -1.01524673e-01
  4.05588001e-02 -1.70178190e-02 -3.62443365e-02  3.26859229e-03
 -1.17435388e-01 -9.53846052e-02  6.95135212e-03 -5.06511591e-02
 -4.96445857e-02 -1.01902910e-01  5.06897718e-02  2.28210371e-02
  6.18453473e-02 -4.04043570e-02 -1.87357627e-02 -4.31112153e-03
  5.48603050e-02  1.30197620e-02  2.58576032e-02  8.81536584e-03
  6.69990256e-02  2.12959331e-02 -3.32012065e-02 -5.27559370e-02
 -7.92003330e-03  5.97943515e-02  6.91080093e-02  2.08067559e-02
 -5.92972375e-02 -2.58070901e-02 -7.60313496e-02 -5.25921676e-03
 -3.58663648e-02 -5.53128310e-02 -7.05908388e-02 -3.25004160e-02
  6.72208816e-02  2.18854975e-02 -6.21302426e-03  5.03079173e-05
 -2.66927630e-02  9.50295758e-03  2.23018625e-03 -1.29878456e-02
  8.93249065e-02  3.67302224e-02  2.73894258e-02 -3.61427814e-02
 -1.71464100e-01  2.40998473e-02  5.05592115e-02 -3.98273654e-02
 -9.70230624e-03  8.74554738e-03  4.00494486e-02  5.86386584e-02
 -1.88255068e-02 -5.04017435e-03  9.78960283e-03  6.99596033e-02
 -1.93377547e-02 -9.43892375e-02 -2.15463489e-02 -8.38082470e-03
  1.90244224e-02 -5.62899858e-02 -3.62831391e-02 -1.03290223e-01
 -2.07544435e-02  5.17396517e-02 -9.02362689e-02 -1.40580470e-02
  4.40440327e-02 -4.66721738e-03 -2.10739207e-02  5.97987790e-03
  5.13592623e-02 -2.02600267e-02 -1.68426465e-02 -5.95077872e-02
 -7.06565625e-04 -3.24340141e-03  3.30587365e-02 -4.65009175e-02
  4.49590646e-02  3.79807651e-02 -4.74322923e-02  2.37173717e-02
  3.58507372e-02  2.27255877e-02 -2.91628614e-02 -1.99470386e-32
  3.69875245e-02  1.60280745e-02 -8.39042142e-02  6.16974151e-03
 -3.60079482e-03  3.11443536e-03  1.07204635e-03 -3.50722149e-02
  4.73653860e-02 -3.36622596e-02 -3.96063998e-02 -3.81041467e-02
  6.78234845e-02  6.36776611e-02  2.67780181e-02  2.10983194e-02
  7.28416145e-02  3.88030931e-02 -2.16797963e-02  6.76689893e-02
 -5.31543838e-03 -4.92636077e-02 -3.09282746e-02  3.73055041e-02
 -9.18359309e-03  7.77947530e-03  2.53798347e-02  7.80515447e-02
  8.82140454e-03  6.18770085e-02  2.44925208e-02 -7.14060813e-02
 -1.08161263e-01  1.34855866e-01  3.15441936e-02 -9.93004441e-02
  9.40044597e-02  2.49470584e-02 -2.17931103e-02  9.11877379e-02
  4.79723662e-02 -1.06233694e-02  7.02591473e-03 -1.08276969e-02
 -2.37269886e-02 -4.05110717e-02  8.01949054e-02 -3.69348526e-02
 -9.36525464e-02 -6.52691796e-02  1.41676575e-01  2.35326570e-02
 -1.58011692e-03 -9.31403972e-03  2.45145708e-02  1.04225405e-01
  3.70277539e-02 -6.75882548e-02 -5.69608994e-02 -9.76404175e-02
  2.41048764e-02 -2.23251283e-02 -6.21996727e-03 -7.53166503e-04
  7.22798854e-02 -8.93150736e-03 -5.39572071e-03 -1.41292876e-02
 -1.16519965e-02 -1.17924199e-01 -6.67637307e-03 -1.11232199e-01
  2.67695612e-03 -2.32375395e-02  2.63748970e-03  2.29343381e-02
 -3.40645239e-02  4.96855266e-02 -5.03674336e-03 -8.27643368e-03
 -1.02735184e-01  3.87133239e-03 -2.91799866e-02 -1.33406848e-03
  7.45446188e-03  8.21967274e-02 -6.97258580e-03 -1.50519772e-03
  2.36354005e-02  5.86717948e-03  5.08497544e-02  2.44096369e-02
  6.83063939e-02  8.16905349e-02 -5.58027159e-03 -5.55499788e-08
  1.82305742e-02 -1.48854166e-01 -4.49777693e-02  1.13013610e-02
  9.66450199e-02 -3.34320031e-02  1.55754704e-02 -2.41125487e-02
  4.98670619e-03  2.90416274e-02  5.72007038e-02  5.57783470e-02
 -6.61906078e-02  1.71264522e-02 -1.77520346e-02  9.17868689e-02
  3.79677936e-02  1.96777284e-02  6.18591066e-03 -1.80858914e-02
  2.20719110e-02 -9.01776645e-03  3.89366411e-02  5.98349385e-02
 -7.49643967e-02  5.61362505e-02 -9.62107815e-03  3.07423361e-02
 -4.99207824e-02  2.43831091e-02  5.75842671e-02 -3.22439522e-02
  2.92243492e-02 -2.41528973e-02  3.75349484e-02 -5.46196522e-03
  4.43962961e-02 -2.86285281e-02 -4.32231538e-02  1.03412449e-01
  9.41820890e-02  9.57151037e-03 -2.98823044e-03  7.53211137e-03
  5.27874306e-02 -6.72078226e-04  5.89494631e-02 -5.47022969e-02
  2.43940409e-02 -1.57602802e-02 -1.15320764e-01 -1.80453975e-02
  6.54975474e-02  2.12712511e-02 -5.05438400e-03  2.80944947e-02
 -1.81628410e-02  4.42652144e-02  1.99479647e-02  2.16765627e-02
  3.56527716e-02  7.00188503e-02 -4.56676595e-02  1.12995729e-02]"
"     if (post.title.len() > 20) || (post.content.len() > 50) {
            return Err(ErrorCode::InvalidContentOrTitle.into());
        }

        ctx.accounts.post_account.set_inner(post);
        ctx.accounts.blog_account.post_count += 1;

        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(blog_account_bump: u8)]
pub struct InitializeBlog<'info> {
    #[account(
        init,
        seeds = [
            b""blog"".as_ref(),
            authority.key().as_ref()
        ],
        bump = blog_account_bump,
        payer = authority,
        space = Blog::LEN
    )]
    pub blog_account: Account<'info, Blog>,

    #[account(mut)]
    pub authority: Signer<'info>,

    pub system_program: Program<'info, System>
}

#[derive(Accounts)]
#[instruction(post_account_bump: u8, post: Post)]
pub struct CreatePost<'info> {
    #[account(mut, has_one = authority)]
    pub blog_account: Account<'info, Blog>,

    #[account(
        init,
        seeds = [
            b""post"".as_ref(),
            blog_account.key().as_ref(),
            post.slug.as_ref(),
        ],
        bump = post_account_bump,
        payer = authority,
        space = Post::LEN
    )]
    pub post_account: Account<'info, Post>,

    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub system_program: Program<'info, System>
}

#[account]
pub struct Blog {
    pub authority: Pubkey,
    pub bump: u8,
    pub post_count: u8,
}

#[account]
pub struct Post {
    pub author: Pubkey,
    pub slug: String, // 10 characters max
    pub title: String, // 20 characters max
    pub content: String // 50 characters max
}

impl Blog {
    const LEN: usize = 8 + 32 + 1 + (4 + (10 * 32));
}

impl Post {
    const LEN: usize = 8 + 32 + 32 + (4 + 10) + (4 + 20) + (4 + 50); 
}

#[error]
pub enum ErrorCode {
    #[msg(""Invalid Content or Title."")]
    InvalidContentOrTitle,
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#[derive(Accounts)]
#[instruction(blog_account_bump: u8)]
pub struct InitializeBlog<'info> {
    #[account(
        init,
        seeds = [
            b""blog"".as_ref(),
            authority.key().as_ref()
        ],
    ","[ 5.10551175e-03  5.01801968e-02 -4.83477935e-02 -7.49188010e-03
 -9.39919241e-03 -4.19649631e-02  8.37589204e-02  3.38592194e-02
 -3.71811241e-02  3.32437493e-02  5.44434004e-02 -3.72006632e-02
  8.58658776e-02 -4.30115163e-02  4.99766087e-03  9.98813845e-03
 -1.43535331e-01 -1.32718990e-02 -2.31502236e-05  5.03959460e-03
  5.74331172e-02  6.97600543e-02 -3.87615315e-03  1.08493991e-01
  3.07023656e-02 -4.84430082e-02 -1.20696872e-01 -1.78467091e-02
  3.20561528e-02 -7.48137310e-02  8.35148990e-02 -3.42870168e-02
  1.31731201e-02  5.03590032e-02  1.01349846e-01  1.72067545e-02
  4.86090034e-03 -1.09364137e-01 -3.46127199e-03  2.42552608e-02
 -2.16293056e-02 -2.57510487e-02 -6.65855110e-02  3.03070433e-02
 -1.22638922e-02  8.25452581e-02  2.33858125e-03  5.51919118e-02
  1.40123572e-02 -3.28482799e-02 -4.52309139e-02 -2.15164963e-02
  1.24181723e-02 -6.00611940e-02 -1.44938631e-02  7.48104304e-02
 -3.88909876e-02 -6.20121835e-03  3.02272709e-03 -8.32101479e-02
 -7.22917821e-03 -2.00686455e-02 -2.18943711e-02 -6.52074441e-02
 -5.19408509e-02  9.87346284e-03 -2.97197932e-03  4.06623147e-02
 -1.23784458e-02  1.18474094e-02 -4.87399660e-03  5.72901145e-02
 -6.22934438e-02  1.11440070e-01 -5.85796498e-02  5.18860742e-02
 -4.15285639e-02  3.97549756e-02 -5.73750213e-02 -5.99215925e-02
  2.45824852e-03  1.54392270e-03 -3.77675728e-03  4.06053588e-02
  2.11538021e-02 -2.63458267e-02  6.55073375e-02 -4.48720530e-02
  3.22749838e-02  3.93136740e-02  3.62413414e-02 -2.50293482e-02
  2.59594824e-02  7.32558407e-03  4.98282239e-02  4.16098572e-02
  3.21244597e-02  1.83717569e-03 -2.77250055e-02  1.14553362e-01
  1.27382269e-02  4.33709808e-02  6.49929745e-03  3.28032784e-02
  1.68574806e-02 -9.81579907e-03 -2.85593811e-02  8.18162132e-03
 -2.52258759e-02 -5.55135533e-02  4.40534353e-02  6.77164942e-02
 -2.86506247e-02 -1.19489953e-02  1.12304814e-01  3.57274488e-02
  7.57040679e-02 -4.52774242e-02  6.07080432e-03 -5.03079072e-02
  1.08953051e-01  3.09107937e-02 -2.07027756e-02  1.16687389e-02
 -1.04167394e-01 -6.57256767e-02  2.20184755e-02  4.86021143e-33
  2.11037286e-02  2.74489988e-02 -7.87726119e-02  7.67353177e-02
  2.52985638e-02  5.00046983e-02 -3.14236321e-02  2.92269187e-03
 -1.55958593e-01  1.57906283e-02 -4.41219360e-02 -1.01669535e-01
  6.72046021e-02 -3.79782766e-02  3.59548740e-02 -7.47321397e-02
  6.16526529e-02  4.80643287e-02  1.02325976e-01  9.23606008e-03
  6.23921715e-02 -1.50066428e-02 -4.15621772e-02 -2.26692632e-02
 -2.71949712e-02  9.42260120e-03 -5.60272299e-02 -1.59051102e-02
 -6.83716461e-02 -2.04905253e-02 -5.39562665e-02 -6.88751880e-03
 -3.59582203e-03 -3.37649882e-03  7.77680054e-02 -7.77072385e-02
  8.03323276e-03 -3.02145537e-02 -5.55537753e-02 -6.12251088e-02
 -9.27840639e-03  1.03149284e-02  1.84558518e-02 -1.48944287e-02
 -2.15815362e-02  4.39491943e-02 -5.58492392e-02  5.92523068e-02
 -4.65650558e-02  9.08192247e-03  3.80570479e-02  5.33596314e-02
 -3.67077291e-02  2.76154187e-03 -9.47815087e-03 -1.31259635e-02
 -3.64046823e-03  3.16735581e-02  4.54690941e-02  2.25256123e-02
  7.43299350e-02  5.13313338e-02 -1.15105882e-02  1.49715208e-02
  1.88162923e-02  4.83429767e-02 -5.70139214e-02  3.98270041e-02
  1.37658998e-01  1.31003903e-02 -3.35399993e-03 -4.12698882e-03
 -9.59963500e-02 -4.35987767e-03 -8.99755880e-02 -4.37796675e-02
 -6.34223595e-02 -3.49888764e-02 -4.85499352e-02  4.01299745e-02
  4.84212004e-02  7.57171353e-03 -5.53827658e-02 -2.22111121e-03
 -1.99623089e-02 -5.68515994e-02  9.80229899e-02  6.91984268e-03
 -7.89513811e-02 -1.93566233e-02  1.50976945e-02 -1.29813105e-02
  9.10236910e-02 -5.54565862e-02 -7.38700153e-03 -5.66217005e-33
  2.70499252e-02 -2.02835575e-02  1.01337489e-02 -1.46961855e-02
 -1.59820430e-02 -2.45734379e-02  9.48340222e-02  5.85164316e-03
 -1.40553638e-02 -1.15979218e-03 -3.53691280e-02  3.17382328e-02
  6.66037202e-02  6.97744414e-02  1.23568341e-01  1.94367729e-02
 -5.67431822e-02 -7.74847418e-02 -6.04339242e-02  5.72846085e-02
 -3.67122926e-02  6.91265017e-02 -3.57325263e-02  5.55377677e-02
  3.27015705e-02  3.62413190e-02  1.73752457e-02  5.95809035e-02
 -9.10917670e-03 -8.00551102e-02  3.20714936e-02  3.35906856e-02
 -6.45873994e-02  8.64643604e-02 -1.53488861e-02 -7.53924474e-02
  1.19761629e-02  3.86296026e-02  2.39265990e-02 -9.20081220e-04
  9.52164680e-02  6.10410273e-02  3.47703025e-02 -3.33399661e-02
 -3.72867510e-02 -1.96647905e-02  4.81172353e-02  4.78509068e-03
  1.94187416e-03 -1.58875324e-02 -2.65035988e-03 -1.18373118e-01
  4.12374102e-02  1.64501555e-03 -1.19413051e-03 -8.41393769e-02
  4.34805453e-02 -1.08852997e-04  3.45044769e-02 -5.59274890e-02
 -3.27190422e-02  1.13007668e-02 -5.38252778e-02  5.58110364e-02
  3.94176841e-02 -1.44633085e-01 -8.35487470e-02 -5.89691475e-02
 -3.14334631e-02 -5.40336967e-02  4.82327230e-02  7.97432661e-02
  1.01002827e-02 -5.72145879e-02  4.93516363e-02  9.16076079e-02
  5.54638775e-03  2.59741191e-02 -1.79939196e-02  3.11823580e-02
 -1.05892293e-01  2.94607729e-02  4.16246280e-02  5.90207800e-03
 -4.81278300e-02 -1.15853198e-01  5.38812019e-02  3.30444425e-02
 -2.29139980e-02 -1.95662044e-02  2.14393213e-02 -5.15354685e-02
  5.41800968e-02  5.46078049e-02  5.44657465e-04 -5.44483783e-08
 -1.36377051e-01 -8.17553028e-02 -2.55374275e-02  1.00816995e-01
  1.22286715e-01  1.10153696e-02  3.18232477e-02 -9.02398750e-02
 -2.04772577e-02 -5.21923155e-02 -3.49023230e-02  1.31366374e-02
 -1.21485032e-02 -1.42599288e-02  2.50326120e-03 -8.83162320e-02
 -8.46730843e-02 -4.97153141e-02 -2.09135190e-02 -1.17380125e-02
  1.24573791e-02 -5.39488904e-02 -1.50773244e-03 -4.22180742e-02
  1.27217127e-02 -8.99254680e-02 -1.36938179e-02  4.06199247e-02
  3.46928686e-02  1.89328156e-02  1.04447968e-01 -1.66020058e-02
 -4.22779806e-02  1.40864693e-03  4.14903201e-02  2.75560524e-02
  5.48639484e-02  3.95898484e-02 -1.47336647e-02  2.06994563e-02
 -4.75014523e-02 -4.94076498e-02 -2.02686507e-02 -2.47804299e-02
 -2.50109676e-02 -4.26924415e-02 -9.22961384e-02 -2.22396143e-02
  6.79438859e-02 -4.95744124e-02  1.57646947e-02  8.39135703e-03
  6.05245158e-02  3.14917602e-02 -5.74494191e-02 -8.85497704e-02
  4.14984003e-02  3.32185291e-02 -6.71900064e-02  3.43496464e-02
  2.78406721e-02  4.16627713e-02  6.06088638e-02 -3.81144285e-02]"
"   bump = blog_account_bump,
        payer = authority,
        space = Blog::LEN
    )]
    pub blog_account: Account<'info, Blog>,

    #[account(mut)]
    pub authority: Signer<'info>,

    pub system_program: Program<'info, System>
}

#[derive(Accounts)]
#[instruction(post_account_bump: u8, post: Post)]
pub struct CreatePost<'info> {
    #[account(mut, has_one = authority)]
    pub blog_account: Account<'info, Blog>,

    #[account(
        init,
        seeds = [
            b""post"".as_ref(),
            blog_account.key().as_ref(),
            post.slug.as_ref(),
        ],
        bump = post_account_bump,
        payer = authority,
        space = Post::LEN
    )]
    pub post_account: Account<'info, Post>,

    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub system_program: Program<'info, System>
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445use std::convert::TryInto;
use borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    sysvar::{rent::Rent, Sysvar},
    borsh::try_from_slice_unchecked,
    account_info::{AccountInfo, next_account_info},
    entrypoint,
    entrypoint::ProgramResult, 
    pubkey::Pubkey, 
    msg,
    program_error::ProgramError, system_instruction, program::invoke_signed,
};
use thiserror::Error;


entrypoint!(process_instruction);
fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    Processor::process(program_id, accounts, instruction_data)
}

pub enum BlogInstruction {

    /// Accounts expected:
    /// 
    /// 0. `[signer]` User account who is creating the blog
    /// 1. `[writable]` Blog account derived from PDA
    /// 2. `[]` The System Program
    InitBlog {},

    /// Accounts expected:
    /// 
    /// 0. `[signer]` User account who is creating the post
    /// 1. `[writable]` Blog account for which post is being created
    /// 2. `[writable]` Post account derived from PDA
    /// 3. `[]` System Program
    CreatePost {
        slug: String,
        title: String,
        content: String,
    }
}

pub struct Processor;
impl Processor {
    pub fn process(program_id: &Pubkey, accounts: &[AccountInfo], instruction_data: &[u8]) -> ProgramResult {
        
        let instruction = BlogInstruction::unpack(instruction_data)?;

        match instruction {
            BlogInstruction::InitBlog {} => {
                msg!(""Instruction: InitBlog"");
                Self::process_init_blog(accounts, program_id)
 ","[-4.78471741e-02  3.54852639e-02 -5.19563481e-02 -1.27633307e-02
  9.72702820e-03 -8.23155940e-02  8.29581246e-02  1.70523804e-02
 -5.51851951e-02  1.71270203e-02  6.78033084e-02 -3.51950973e-02
  9.73150209e-02 -4.08753939e-02  3.80932577e-02  5.70484139e-02
 -1.40997171e-01 -4.43987083e-03  2.37156507e-02 -8.37567821e-03
  3.85882077e-03  7.39239827e-02 -5.27164724e-04  7.74382800e-02
  2.68265270e-02 -7.75076747e-02 -3.84478010e-02  4.67679501e-02
  1.12463674e-02 -8.60918984e-02  1.00108184e-01 -2.89828368e-02
 -5.75495558e-03  4.67412882e-02  1.08734190e-01  4.85868640e-02
  6.31017536e-02 -4.69512641e-02 -2.60781706e-03  2.75882483e-02
  1.91277396e-02 -3.51131037e-02 -3.08253057e-02  1.28647676e-02
 -2.59303767e-02  6.52290359e-02  2.95545422e-02  8.28837156e-02
 -5.95179200e-03 -6.04406632e-02 -6.68313801e-02 -7.19106346e-02
 -4.90035582e-03 -3.21315527e-02 -2.35758703e-02  1.48784127e-02
 -3.22507247e-02 -1.93793345e-02 -3.45792202e-03 -1.07859194e-01
 -2.73623932e-02 -1.04101310e-02  1.21155437e-02 -6.61168322e-02
 -4.07252908e-02  1.42809525e-02 -2.08693147e-02  2.70139687e-02
  2.41296217e-02  2.85994224e-02 -4.61326865e-03  4.43554595e-02
 -8.26001242e-02  3.10680158e-02 -4.56672199e-02  3.75219733e-02
 -5.56189194e-02  5.12175076e-02 -5.12136668e-02 -5.54690547e-02
 -1.32251112e-02 -6.67687878e-03 -3.67199630e-02  4.01172712e-02
  4.49818280e-03 -5.59355617e-02  4.76625785e-02 -7.45111182e-02
  4.30532880e-02  1.08322278e-02  1.16865812e-02 -1.26017136e-02
  5.51511124e-02 -2.42789946e-02  4.96182330e-02  4.36249860e-02
  8.87427628e-02 -6.57681841e-03 -1.01794330e-02  1.27999485e-01
 -3.42897549e-02  3.49493027e-02 -1.30985733e-02  1.18061071e-02
  2.59145629e-02  1.61229186e-02 -4.09619845e-02 -1.12189762e-02
 -1.46961203e-02 -6.38687983e-02 -5.88508323e-03  3.74920852e-02
 -5.28539531e-02 -1.48299686e-03  8.75960961e-02  3.88527811e-02
  5.42391762e-02 -1.63515285e-02 -1.06521761e-02 -5.57853952e-02
  1.04433350e-01  1.96381211e-02  1.40595017e-02 -3.37762525e-03
 -1.03403069e-01 -6.97820634e-02 -3.49291116e-02  4.97226764e-33
  2.70117968e-02  1.93786081e-02 -7.86815807e-02  3.59290503e-02
  2.91139949e-02  3.98727171e-02  7.90358707e-03 -9.31790285e-03
 -1.38658911e-01  9.52432118e-03 -7.64391646e-02 -5.16314022e-02
  5.08569777e-02 -3.67168225e-02 -2.40911802e-04 -6.55613989e-02
  4.45476398e-02  5.24643436e-02  8.46464336e-02  2.13287771e-02
  6.70747533e-02  5.45147248e-03 -5.71631119e-02 -4.16972004e-02
 -3.85301746e-02  1.91589873e-02 -3.15551385e-02 -2.67066285e-02
 -4.49384712e-02 -2.87433825e-02 -4.27641831e-02  2.78164335e-02
  1.21893315e-02 -3.29152006e-03  4.23839018e-02 -7.18906224e-02
  1.24111455e-02 -5.50305396e-02 -3.49169858e-02 -6.41301796e-02
  1.08356681e-02  2.01918967e-02  1.43585270e-02 -1.18521079e-02
 -3.82135287e-02  4.68278527e-02 -7.90183172e-02  6.36140928e-02
 -2.01870594e-02  2.98356991e-02  5.57447842e-04  1.85736772e-02
 -6.64445665e-03 -1.41126439e-02 -6.13094829e-02 -4.93245199e-02
 -1.70593746e-02  2.83349324e-02  3.89377102e-02  1.44422753e-02
  2.94952672e-02  4.60922159e-02  5.59931679e-04 -6.14814041e-03
 -2.13137409e-03 -1.59664992e-02 -3.63362804e-02  7.17891231e-02
  1.62028387e-01  6.49931058e-02  2.46230736e-02  5.75842187e-02
 -1.09447993e-01 -8.77333060e-03 -8.82968977e-02 -4.15711738e-02
 -6.08527027e-02  1.18540651e-04 -3.71440984e-02  8.09185393e-03
  3.62897217e-02  2.16002166e-02 -8.30364972e-02 -1.37363691e-02
 -1.57259777e-02 -6.91285208e-02  6.89957440e-02 -5.24856223e-05
 -9.69986767e-02 -5.78020439e-02 -5.63457906e-02  9.89849120e-03
  9.17388424e-02 -5.56619428e-02 -1.06248921e-02 -6.37459419e-33
  1.19851278e-02 -5.24203815e-02  1.38508277e-02 -3.37445905e-04
 -1.86218601e-02 -3.74917239e-02  8.45956951e-02 -4.60472330e-02
  1.25597394e-03  3.44519205e-02 -8.22404772e-02  1.06210355e-02
  9.05130059e-02  2.64477432e-02  1.58998862e-01  2.22653151e-02
 -5.55111393e-02 -5.35884164e-02 -4.95055839e-02  2.98753716e-02
 -7.22097829e-02  9.33332741e-02 -5.87352775e-02  6.49905503e-02
  2.38715708e-02  1.59148779e-02  1.85793154e-02  7.00998679e-02
 -2.27976236e-02 -4.59471121e-02 -1.15420409e-02  4.41109277e-02
 -8.24618489e-02  6.99796975e-02 -4.59730551e-02 -5.69502339e-02
  8.36602040e-03  7.83786997e-02  1.50840823e-02 -1.22562200e-02
  1.11770995e-01  8.07253048e-02 -1.66291781e-02  2.02683471e-02
 -1.61705464e-02  1.08213499e-02  5.54111153e-02  2.30669025e-02
 -7.54958484e-03  2.30488647e-02  2.06684656e-02 -9.49411020e-02
  6.95051998e-02 -2.77951024e-02 -7.39803677e-03 -6.74060956e-02
  3.64309214e-02 -1.46243963e-02  5.21179242e-03 -4.11245376e-02
 -2.30652597e-02 -2.24764980e-02 -5.43912388e-02  7.36869425e-02
  5.04998975e-02 -1.52457893e-01 -8.36271420e-02 -1.15160845e-01
 -7.95199499e-02 -5.94501942e-02  4.46410440e-02  4.42130193e-02
  3.80241200e-02 -6.09352477e-02  8.75047445e-02  7.38952830e-02
 -7.73862121e-04  2.86968984e-02  6.38179760e-03  4.85549942e-02
 -1.17332034e-01  3.20036476e-03  5.03978878e-02  6.90796063e-04
 -6.97927624e-02 -1.10829242e-01  4.14223708e-02  7.30282068e-02
  2.75377389e-02 -4.22005281e-02  1.87342260e-02 -2.82284874e-03
  5.69717251e-02  4.85814214e-02  1.35680670e-02 -4.44285533e-08
 -8.17512944e-02 -5.27606644e-02 -2.99116187e-02  1.45364866e-01
  5.65725565e-02 -9.78186447e-03  2.21268460e-02 -5.50164506e-02
 -3.19194514e-03 -7.36502707e-02 -3.07564382e-02  7.62445061e-03
  4.36800346e-03  6.56628376e-03  2.80381925e-02 -3.83207984e-02
 -6.54404685e-02 -3.69805917e-02 -4.61964235e-02 -3.07521205e-02
 -3.59619744e-02 -3.70973386e-02  2.58819712e-03 -1.94686744e-03
  2.13298872e-02 -8.43789950e-02  1.34666953e-02  2.86689159e-02
  5.37956990e-02  2.80260257e-02  8.98929983e-02 -4.34966013e-02
 -9.92918294e-03 -2.59454339e-03  3.14648263e-02  1.51207931e-02
  5.12152985e-02  4.48310338e-02  8.45528208e-03  5.82396016e-02
 -6.28389567e-02 -3.83124836e-02 -1.52578149e-02 -3.86301577e-02
 -3.43846576e-03 -1.76690575e-02 -1.16960764e-01  5.76448115e-03
  5.08698188e-02 -1.71581730e-02  3.19915498e-03  1.40677858e-03
  6.68181628e-02  3.05235740e-02 -4.27171774e-02 -7.72576183e-02
  2.89756488e-02  4.28931341e-02  5.80590079e-03  2.00989209e-02
  5.65475747e-02  6.05086144e-03  7.63370469e-02 -2.00391194e-04]"
"          },
            BlogInstruction::CreatePost { slug, title, content} => {
                msg!(""Instruction: CreatePost"");
                Self::process_create_post(accounts, slug, title, content, program_id)
            }
        }
    }

    fn process_create_post(
        accounts: &[AccountInfo],
        slug: String,
        title: String,
        content: String,
        program_id: &Pubkey
    ) -> ProgramResult {
        if slug.len() > 10 || content.len() > 20 || title.len() > 50 {
            return Err(BlogError::InvalidPostData.into())
        }

        let account_info_iter = &mut accounts.iter();

        let authority_account = next_account_info(account_info_iter)?;
        let blog_account = next_account_info(account_info_iter)?;
        let post_account = next_account_info(account_info_iter)?;
        let system_program = next_account_info(account_info_iter)?;

        if !authority_account.is_signer {
            return Err(ProgramError::MissingRequiredSignature);
        }

        let (blog_pda, _blog_bump) = Pubkey::find_program_address(
            &[b""blog"".as_ref(), authority_account.key.as_ref()],
            program_id
        );
        if blog_pda != *blog_account.key || !blog_account.is_writable || blog_account.data_is_empty() {
            return Err(BlogError::InvalidBlogAccount.into())
        }

        let (post_pda, post_bump) = Pubkey::find_program_address(
            &[b""post"".as_ref(), slug.as_ref(), authority_account.key.as_ref()],
            program_id
        );
        if post_pda != *post_account.key {
            return Err(BlogError::InvalidPostAccount.into())
        }

        let post_len: usize = 32 + 32 + 1 + (4 + slug.len()) + (4 + title.len()) + (4 + content.len());

        let rent = Rent::get()?;
        let rent_lamports = rent.minimum_balance(post_len);

        let create_post_pda_ix = &system_instruction::create_account(
            authority_account.key,
   ","[-1.33014219e-02  1.99772436e-02 -9.03549120e-02 -3.46745513e-02
 -5.40702976e-02 -3.42247412e-02  3.60508300e-02  8.27253535e-02
 -2.33350396e-02  3.97807285e-02  2.30907723e-02 -5.79963066e-02
  7.51906782e-02 -1.15030603e-02  5.23484871e-03  2.07604580e-02
 -5.72772250e-02 -5.41535281e-02 -2.17491593e-02  1.54268723e-02
  9.99995172e-02  2.99260952e-02  3.10252961e-02  7.92562440e-02
 -9.11466498e-03 -9.08886865e-02 -7.56564289e-02 -5.14750648e-03
  4.63371165e-03 -3.91217023e-02  1.42369762e-01 -8.86282027e-02
 -4.52624522e-02  4.17909101e-02  1.24622308e-01  3.80624570e-02
  5.19321971e-02 -1.10579610e-01  3.73144299e-02 -6.97358027e-02
 -3.28950286e-02  1.62721872e-02 -8.52455944e-02  2.66452376e-02
  1.19493194e-02  5.65707218e-03 -4.21672761e-02 -3.06010470e-02
 -1.08226258e-02  8.82384274e-03 -9.66795310e-02 -6.41958788e-02
 -3.54699567e-02 -5.63987978e-02 -2.52944864e-02  7.40116090e-02
 -2.72331145e-02 -5.89098828e-03 -4.75810561e-03 -5.20300912e-03
  5.05693071e-02 -2.25611329e-02  5.63298585e-04 -1.79755446e-02
 -2.76017319e-02 -4.38344181e-02 -9.37056467e-02  1.91390011e-02
 -1.52472137e-02 -1.05728786e-02 -1.20090079e-02  3.57589237e-02
 -9.06428173e-02  5.76023348e-02 -7.57044628e-02 -2.81292461e-02
 -5.62464409e-02  3.83899249e-02 -8.86640772e-02 -6.52390197e-02
  4.46194857e-02  5.29438369e-02 -8.28860793e-03  7.03319982e-02
  2.57575549e-02  3.66551541e-02  1.68011729e-02 -5.49646001e-03
 -1.77474711e-02  7.66365677e-02 -2.49416083e-02 -1.71031803e-03
  5.48900589e-02  3.61785777e-02  8.42095315e-02  3.67826223e-02
 -1.69844329e-02 -1.04667107e-03 -2.33174637e-02  7.20457509e-02
 -2.39822939e-02  1.66284293e-02  2.16103401e-02  1.16945170e-02
  4.54906449e-02 -3.32380682e-02  5.20032197e-02 -1.02211740e-02
 -2.26013158e-02 -1.60507336e-02  7.74910208e-03  9.40458849e-02
 -6.98408782e-02 -4.68260469e-03  6.53096884e-02  3.62521820e-02
  1.70357432e-02 -5.74279169e-04  2.07326543e-02 -3.63630475e-03
  8.18027705e-02  1.89894009e-02 -4.66346294e-02 -1.06741041e-02
 -6.09853193e-02 -1.00634791e-01  4.54718843e-02  3.29638077e-33
  2.73512695e-02  1.52870053e-02  2.07068771e-03  1.00706473e-01
  2.95744464e-02  2.67183147e-02 -3.77477333e-03  3.20108123e-02
 -8.18180591e-02  1.11025907e-02 -1.19086271e-02 -1.22228935e-01
  2.34379768e-02 -4.80487496e-02  1.91520322e-02 -8.42609406e-02
  5.71498536e-02  4.55096588e-02  9.03293863e-02  5.96349919e-03
  9.28955376e-02 -1.09154014e-02 -3.94640304e-02 -6.27185702e-02
  3.13107893e-02  3.11145857e-02 -6.90505579e-02  7.35340314e-03
 -7.37049878e-02 -1.42997634e-02 -2.02639098e-03 -1.73865333e-02
 -6.05557300e-03 -4.03146259e-03  8.58376548e-02 -8.08912441e-02
  2.70149596e-02 -3.96380480e-03 -7.51345828e-02 -2.04342455e-02
  4.06354256e-02 -2.27899756e-02 -2.90104598e-02  2.99634226e-02
 -1.42492009e-02  5.98318689e-02 -4.47997376e-02  1.92699721e-04
 -8.13189428e-03  2.98341308e-02  1.22602116e-02  3.34608257e-02
 -1.31783374e-02 -2.39197835e-02  3.53799039e-03 -2.93367151e-02
 -4.78478633e-02 -7.52803385e-02  8.04651994e-03 -1.88389737e-02
  3.30846421e-02  4.98846211e-02 -5.24755307e-02  2.23717205e-02
  2.84052901e-02 -1.70508102e-02 -5.16286632e-03  3.46594164e-03
  1.61509991e-01 -1.33249993e-02 -3.88214514e-02 -5.38516566e-02
 -1.08922131e-01 -5.09255007e-03 -1.19565520e-02 -6.12874627e-02
 -5.26072271e-02 -7.25600496e-02 -8.05168524e-02 -7.17172399e-03
  4.50266413e-02 -9.23851058e-02 -1.20694198e-01 -2.63763629e-02
 -3.67443934e-02  1.53409299e-02  1.65063969e-03  8.54450837e-03
 -1.60999577e-02  5.93913794e-02  1.12746181e-02 -9.04817879e-03
  1.02927089e-02 -2.20477302e-02 -4.34280783e-02 -5.80889158e-33
  1.39688626e-02 -3.41764614e-02 -5.89397512e-02 -1.44584607e-02
  1.45557132e-02 -5.31589566e-03  6.10623695e-02  2.20147856e-02
 -1.44656084e-03  1.07514765e-02 -1.17026903e-01  2.96374992e-03
  6.81646466e-02  3.56790535e-02  4.55028638e-02  1.63264740e-02
 -6.36702180e-02 -5.41416071e-02 -2.54439171e-02  1.31564736e-02
 -4.56403308e-02  1.23916946e-01  1.41515266e-02  4.79993150e-02
  4.66673747e-02  4.65046167e-02  5.99325337e-02  7.62237385e-02
 -2.54314829e-04 -2.35118568e-02  4.44638617e-02  1.26970103e-02
 -1.31770102e-02  8.94851536e-02 -3.38113867e-02 -1.36564717e-01
  1.11058876e-02  5.08534648e-02  1.23368856e-02  9.37259663e-03
  1.36253223e-01 -6.62910892e-03  3.77731286e-02  8.07146356e-03
 -4.48384061e-02 -1.27395466e-02  3.45259979e-02  1.98507551e-02
  1.76945366e-02  6.20612353e-02 -1.07678389e-02 -1.51164293e-01
 -2.27502566e-02 -4.08838466e-02  3.61450054e-02 -3.10143493e-02
  1.20030016e-01 -4.13353033e-02  4.48668674e-02 -5.06960414e-02
  3.59305032e-02  7.02816062e-03 -2.10070517e-02  6.41575530e-02
  1.01722792e-01 -1.15539163e-01 -1.44718615e-02 -5.63829439e-03
  1.97268184e-02  1.09266369e-02 -6.12991024e-03  2.84956265e-02
  1.99401844e-02 -5.12166880e-02  4.26297002e-02  5.19606583e-02
  3.33082601e-02  2.70628510e-03 -3.19839641e-02  3.34081911e-02
 -5.24417125e-02  4.59441096e-02  4.30881493e-02  7.45996647e-03
  9.27482732e-03 -6.68400750e-02  5.25920652e-02  1.78063679e-02
 -8.44376311e-02 -7.56439706e-03  3.40482071e-02  1.31682055e-02
  2.19441410e-02 -3.74961272e-02 -5.73210269e-02 -5.91487996e-08
 -1.09272122e-01 -4.70466651e-02 -2.01461874e-02  1.35330766e-01
  3.87289748e-02 -1.64975431e-02  5.72409108e-02 -8.94026682e-02
  1.39332209e-02 -5.02730533e-02 -9.69807431e-02  5.22965267e-02
 -1.28969308e-02  9.90106072e-03 -6.79827295e-03 -1.30860239e-01
 -1.28144221e-02 -4.33829874e-02  4.51982487e-04 -6.83473423e-02
 -5.15613519e-02 -6.24612644e-02 -2.57243570e-02 -5.60410880e-02
  1.28767332e-02 -2.79838964e-03 -4.81404625e-02  7.33283386e-02
  6.49259686e-02  5.49187511e-02  1.01622991e-01  1.20053710e-02
 -4.78928722e-03  6.03498286e-03 -2.85391249e-02  2.30198522e-04
  4.19123471e-02  1.69159926e-03  2.29677856e-02 -6.06135651e-02
  2.92326026e-02  3.61130722e-02  1.24687336e-01 -2.73055863e-02
 -5.05303107e-02 -6.87622977e-03 -8.29066709e-03 -2.35213116e-02
  9.92390886e-02 -1.07612712e-02 -5.58646172e-02 -2.11539697e-02
  3.75751816e-02  4.78511378e-02 -5.16058020e-02 -6.15950814e-03
  4.87171188e-02 -2.10882090e-02 -6.24613389e-02  2.60411371e-02
  9.09878835e-02  4.00598869e-02  5.23288026e-02 -5.17409807e-03]"
"        post_account.key,
            rent_lamports,
            post_len.try_into().unwrap(),
            program_id
        );
        msg!(""Creating post account!"");
        invoke_signed(
            create_post_pda_ix, 
            &[
                authority_account.clone(),
                post_account.clone(),
                system_program.clone()
            ],
            &[&[
                b""post"".as_ref(),
                slug.as_ref(),
                authority_account.key.as_ref(),
                &[post_bump]
            ]]
        )?;

        let mut post_account_state = try_from_slice_unchecked::<Post>(&post_account.data.borrow()).unwrap();
        post_account_state.author = *authority_account.key;
        post_account_state.blog = *blog_account.key;
        post_account_state.bump = post_bump;
        post_account_state.slug = slug;
        post_account_state.title = title;
        post_account_state.content = content;

        msg!(""Serializing Post data"");
        post_account_state.serialize(&mut &mut post_account.data.borrow_mut()[..])?;


        let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;
        blog_account_state.post_count += 1;

        msg!(""Serializing Blog data"");
        blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;

        Ok(())
    }

    fn process_init_blog(
        accounts: &[AccountInfo],
        program_id: &Pubkey
    ) -> ProgramResult {
        let account_info_iter = &mut accounts.iter();
        
        let authority_account = next_account_info(account_info_iter)?;
        let blog_account = next_account_info(account_info_iter)?;
        let system_program = next_account_info(account_info_iter)?;

        if !authority_account.is_signer {
            return Err(ProgramError::MissingRequiredSignature);
        }

","[-6.71904311e-02  2.16393080e-02 -7.39281774e-02  5.08350693e-03
 -3.31309885e-02 -4.52948585e-02  3.24130850e-03  1.31745916e-02
 -4.67328914e-02  3.13182548e-02  1.02221459e-01 -7.79831186e-02
  7.46650547e-02 -8.68553147e-02  2.23847907e-02  6.66987896e-02
 -1.07297644e-01 -1.72775034e-02  2.28365753e-02  5.58632612e-02
  6.01309463e-02 -3.28365192e-02 -1.22782513e-02  6.17673285e-02
  6.38716519e-02 -6.16982393e-02 -3.72717865e-02  3.84549685e-02
  1.47770792e-02 -3.77930254e-02  7.33726248e-02 -5.25262579e-02
 -2.95792203e-02 -7.11637270e-03  1.33173272e-01  7.41260126e-02
  5.30400723e-02 -5.30650951e-02  3.83165255e-02 -4.09148112e-02
  2.01022346e-02 -4.57283109e-03 -1.78515911e-02  3.56065761e-03
 -5.26932292e-02  3.06801982e-02  4.79001217e-02  2.82206386e-02
 -9.19855107e-03 -7.56904632e-02 -4.66729067e-02 -2.02359483e-02
 -6.27576038e-02 -1.20221348e-02 -2.76128557e-02  5.26004992e-02
 -2.97873421e-03  1.26330396e-02  3.64003051e-03 -5.06430678e-02
  3.64581210e-04  4.52601351e-02 -1.84700207e-03 -1.07929604e-02
 -2.56573912e-02 -1.61677022e-02 -4.85527255e-02 -1.73663143e-02
 -1.08659677e-02 -1.81463715e-02 -1.71846338e-02 -8.38668179e-03
 -1.02393091e-01  1.05100544e-02  5.20636048e-03  3.82400081e-02
 -6.83209002e-02  3.93340066e-02 -4.78778817e-02 -9.32609290e-02
 -6.23296648e-02  5.21123037e-03 -4.98625124e-03  9.94281247e-02
  4.31051254e-02  1.84376705e-02  5.48531720e-03 -6.27639666e-02
  1.62972864e-02  4.97092903e-02  3.55527550e-03 -1.24518834e-02
  7.74793327e-02  1.92390196e-03  5.76505624e-03  3.13306116e-02
  4.17817198e-02  2.22470239e-02 -7.38654239e-03  1.28789470e-01
 -1.97646469e-02 -1.71902031e-03 -2.14591473e-02  2.51624435e-02
  4.26035672e-02 -4.16855700e-02  4.31546532e-02 -5.44937924e-02
 -1.90731008e-02  1.06368894e-02  3.59390937e-02  7.02667311e-02
 -4.04401906e-02 -4.72996794e-02  4.47543673e-02  3.82113531e-02
 -3.90188880e-02  3.35708004e-03  1.01489499e-02 -2.03814022e-02
  6.51466995e-02 -4.85025980e-02 -3.27939205e-02 -3.43266269e-03
 -4.31422293e-02  6.47739216e-04  5.01694866e-02 -2.10794606e-33
  6.24574833e-02 -1.29188667e-03 -7.19566690e-03  7.47867674e-02
 -3.60642672e-02  2.99884509e-02  5.51280705e-03  3.47994245e-03
 -1.07881725e-01  3.09975408e-02  1.35825695e-02 -8.65861475e-02
  2.66758241e-02 -2.03243154e-03 -4.53511477e-02 -8.57002512e-02
  5.33656888e-02  7.40306824e-02  7.29897246e-02  2.01163720e-02
  5.86677454e-02  3.84766385e-02 -1.84781682e-02 -6.82509243e-02
 -9.48938355e-03  3.10011990e-02 -9.40796658e-02  2.48433147e-02
 -5.15617095e-02  2.45755836e-02 -3.21919881e-02  1.71027414e-03
 -9.48436931e-03  8.21712241e-03  5.99154085e-02 -3.91475409e-02
  1.48854479e-02 -4.67602052e-02 -1.04110256e-01 -2.09826455e-02
  6.69796839e-02  9.56508855e-04 -8.18002690e-03 -1.24174571e-02
 -2.70649567e-02  3.47186252e-02 -2.48994585e-02  3.45115140e-02
  1.80163942e-02  2.56816279e-02  1.93384581e-03  4.71103452e-02
 -5.05305789e-02 -3.75844017e-02 -7.17567503e-02 -4.17838879e-02
 -9.87920631e-03 -5.04616573e-02  5.50872907e-02 -3.78900878e-02
  1.53086632e-02  5.59936687e-02 -2.54063569e-02 -5.62825589e-05
  5.52419908e-02 -1.02293352e-02  2.59360112e-02  3.57161239e-02
  8.16973820e-02 -3.27497832e-02 -2.84250011e-03 -5.72561659e-03
 -1.50502741e-01 -2.70341691e-02 -3.35424244e-02 -6.09948672e-02
 -1.97870973e-02  2.48482265e-03 -4.72716801e-02 -1.11278379e-02
  4.03605355e-03 -1.12819206e-02 -1.55340120e-01 -7.41882324e-02
 -3.79918180e-02 -1.14034070e-02  4.92450111e-02  1.19843921e-02
 -6.16818182e-02 -1.69148054e-02  4.73404350e-03 -2.45733801e-02
  8.78156051e-02 -6.93150684e-02 -2.37411093e-02 -7.81878874e-34
 -1.27584664e-02 -1.19405322e-01  2.86112744e-02 -6.18944615e-02
 -3.50509724e-03 -4.71568247e-03  6.17047697e-02  2.44258922e-02
 -4.37180102e-02  1.55258849e-02 -6.39691278e-02 -3.02158222e-02
  4.37802747e-02  8.03633034e-02  8.98803249e-02  6.80324715e-03
 -8.05082843e-02  6.40751421e-03 -3.86483595e-02  6.03732020e-02
 -5.36211282e-02  1.30404159e-01 -2.50900462e-02  1.58930302e-01
 -6.97795348e-03  1.12740807e-02 -3.13655511e-02  9.17789191e-02
 -1.55764483e-02 -6.40338138e-02  7.17107356e-02  4.51722182e-02
 -1.15409859e-01  8.94380659e-02 -1.09186552e-01 -5.09303324e-02
 -2.29683369e-02  6.18853569e-02 -2.17950530e-02  5.26105165e-02
  7.42025003e-02 -3.68848406e-02 -3.16688605e-03  1.13957440e-02
 -2.94428726e-04 -1.23310788e-02  8.68148878e-02  6.16407469e-02
 -4.27110456e-02  1.12686232e-01 -1.68221537e-02 -5.22610396e-02
  1.79643985e-02 -2.78302692e-02  1.55722499e-02 -2.88153179e-02
  1.04704864e-01  2.10587941e-02  6.20364398e-02 -7.99980089e-02
  2.33672317e-02 -1.05124855e-04 -1.52885728e-03  6.25827461e-02
  7.15987757e-02 -1.07418954e-01  3.55019756e-02 -3.84589136e-02
 -2.11832710e-02 -1.67879052e-02 -2.96358764e-02  4.22539301e-02
  2.61015315e-02 -1.09012805e-01  8.73100236e-02 -8.52959603e-03
  4.53262730e-03  2.53601037e-02  2.09938781e-03 -2.86279749e-02
 -7.68514201e-02 -4.04067012e-03  4.42271046e-02  1.67863816e-02
 -1.32493228e-02 -8.79657194e-02  1.30215734e-02 -4.83632423e-02
 -3.89074646e-02 -1.55619094e-02 -4.18856591e-02 -2.61191092e-02
 -1.71940830e-02  3.13503742e-02 -1.88895408e-02 -6.16686933e-08
 -5.66975921e-02 -1.35460710e-02 -6.30312487e-02  1.24958046e-01
  3.59765626e-02 -4.10473198e-02 -1.04192877e-02 -8.04907903e-02
 -2.74089561e-03 -8.56244117e-02  2.05906238e-02  1.20484028e-02
  2.18519978e-02 -2.19734479e-02 -3.05113588e-02 -1.23432361e-01
  7.87970796e-03 -2.21127793e-02 -3.43070030e-02 -3.18903625e-02
 -7.89055154e-02 -4.80473861e-02  5.20592835e-03 -2.06473246e-02
  5.15647382e-02  6.47843024e-03 -2.70431526e-02  1.09690502e-01
  1.27834544e-01  4.22178283e-02  1.03168212e-01  1.26452260e-02
  1.14368582e-02 -4.77891997e-04 -5.69453789e-03  2.56563984e-02
  6.76050633e-02  6.29963949e-02  5.08573838e-02  3.03067639e-03
  2.60397624e-02  6.44883662e-02  7.39006838e-03 -5.03456825e-03
 -6.42778203e-02 -8.33280757e-03 -2.68013179e-02  1.37890894e-02
  9.72157046e-02  1.81038063e-02 -8.03362727e-02 -3.43646854e-02
  4.94162627e-02  9.01605189e-02 -3.60145308e-02 -6.31450266e-02
  4.78538461e-02  5.53017408e-02 -2.66406201e-02  5.63013554e-02
  1.06557675e-01 -1.41264312e-02  2.04741824e-02 -7.42857577e-03]"
"       let (blog_pda, blog_bump) = Pubkey::find_program_address(
            &[b""blog"".as_ref(), authority_account.key.as_ref()],
            program_id 
        );
        if blog_pda != *blog_account.key {
            return Err(BlogError::InvalidBlogAccount.into())
        }

        let rent = Rent::get()?;
        let rent_lamports = rent.minimum_balance(Blog::LEN);
        
        let create_blog_pda_ix = &system_instruction::create_account(
            authority_account.key,
            blog_account.key,
            rent_lamports,
            Blog::LEN.try_into().unwrap(),
            program_id
        );
        msg!(""Creating blog account!"");
        invoke_signed(
            create_blog_pda_ix, 
            &[
                authority_account.clone(),
                blog_account.clone(),
                system_program.clone()
            ],
            &[&[
                b""blog"".as_ref(),
                authority_account.key.as_ref(),
                &[blog_bump]
            ]]
        )?;

        let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;
        blog_account_state.authority = *authority_account.key;
        blog_account_state.bump = blog_bump;
        blog_account_state.post_count = 0;
        blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;
        

        Ok(())
    }
}



#[derive(BorshDeserialize, Debug)]
struct PostIxPayload {
    slug: String,
    title: String,
    content: String
}


impl BlogInstruction {
    pub fn unpack(input: &[u8]) -> Result<Self, ProgramError> {
        let (variant, rest) = input.split_first().ok_or(BlogError::InvalidInstruction)?;
        let payload = PostIxPayload::try_from_slice(rest).unwrap();

        Ok(match variant {
     ","[-3.42834927e-02 -1.02691101e-02 -7.24330842e-02  2.86043640e-02
 -3.13014202e-02 -2.54557915e-02  4.83644493e-02  3.56712402e-03
  4.12574317e-03  6.26017302e-02  8.33827257e-02 -5.61832041e-02
  4.82378080e-02 -6.24864176e-03  5.12297451e-02  8.09179619e-02
 -6.71565682e-02 -1.71289239e-02  2.16582548e-02  3.26953605e-02
  5.74813299e-02  2.84781517e-03  1.86303910e-02  3.44868191e-02
  3.80943269e-02 -1.13070741e-01 -6.84663504e-02  4.01884085e-03
  4.31713499e-02 -2.94772610e-02  8.04015845e-02  3.87100643e-03
 -3.84074450e-02 -1.72270450e-03  1.92582965e-01  8.62380043e-02
  1.14824266e-04 -1.00475952e-01  4.90123359e-03  2.06738804e-02
  7.62737310e-03  2.99530756e-02 -7.86465779e-03 -1.83775537e-02
 -6.34097084e-02  1.03120580e-02 -3.28004882e-02  8.10260326e-02
  4.20954078e-02 -6.46792650e-02 -5.19469799e-03 -9.55977663e-03
 -9.07768309e-02 -6.60422212e-03 -2.29289159e-02  5.45508973e-02
  4.42311279e-02 -6.84871804e-03  2.40651555e-02 -5.05737104e-02
  7.39285275e-02  2.92016808e-02 -1.43689720e-03 -2.76986603e-02
 -1.72127690e-02 -2.05129031e-02 -5.25857992e-02  2.16874070e-02
 -1.29980389e-02  1.44519079e-02 -5.72962081e-03  6.71525049e-05
 -7.35306069e-02  2.74647828e-02 -1.36255575e-02 -5.23393881e-03
 -5.26146637e-03  6.36349544e-02  1.08634364e-02 -9.09980759e-02
 -7.20170066e-02  2.86164954e-02  6.83065178e-03  8.05709884e-02
 -1.66062545e-02 -1.54784033e-02  2.42350269e-02 -7.67109394e-02
  8.58745053e-02  5.19636795e-02  4.91388887e-02 -6.63283980e-03
  5.44760264e-02 -1.07463135e-03  3.43425758e-02  3.77880931e-02
  4.97659333e-02 -4.50617261e-02 -1.20028490e-02  9.28079858e-02
 -7.47699738e-02  8.51849280e-03  2.59973691e-03 -4.59800055e-03
  2.39903368e-02 -8.49318865e-04  5.53235374e-02 -6.92290068e-02
 -3.91586758e-02  1.50164543e-02  7.17552425e-03  5.81154823e-02
  2.57446337e-02  1.11914566e-02  6.28110319e-02  2.84345318e-02
  1.71773564e-02 -3.11842281e-02 -1.70036294e-02  2.96335667e-03
  9.90531072e-02  7.31614185e-03  9.77097359e-03 -5.21878060e-03
 -5.99730983e-02  1.22129414e-02  3.50829624e-02  1.71349056e-34
  4.19582874e-02  8.13859794e-03 -5.21472842e-02  7.82904923e-02
 -5.00310725e-03  7.04587922e-02  2.80787461e-02  7.63464198e-02
 -1.71980590e-01  8.98529291e-02  9.00096353e-03 -3.13725807e-02
 -1.68236252e-02 -4.00028676e-02 -5.81917306e-03 -1.50708007e-02
  6.61997646e-02  4.43587825e-02  9.41168889e-02  1.13431981e-03
  7.07535818e-02  4.60347580e-03  1.48033397e-02 -6.76825717e-02
  6.47683535e-03 -2.51394301e-03 -4.71634157e-02  1.83742177e-02
  1.35279475e-02 -4.33856668e-03  6.53622812e-03 -2.21626386e-02
 -4.03172858e-02  6.91422383e-06  3.67702432e-02 -7.71984234e-02
 -8.49577715e-04 -3.46234976e-03 -9.30934474e-02 -2.04037614e-02
  2.44409498e-02  2.43248977e-02 -1.71250384e-02 -5.47078215e-02
  3.85730602e-02  3.78064103e-02  4.60399967e-03  7.32030626e-03
  1.09944744e-02  6.56049773e-02 -3.32882181e-02  1.65722016e-02
 -9.62169170e-02  2.59347484e-02 -8.57740864e-02 -4.96563502e-02
  1.18039399e-02 -7.13753924e-02  5.91630228e-02 -9.58755165e-02
  2.29964033e-02  5.27692437e-02 -2.29053785e-05 -2.49182861e-02
  1.26783829e-02 -2.87790354e-02  1.36481249e-03  3.03010065e-02
  9.87147316e-02 -3.58449258e-02  2.32280549e-02 -3.13943177e-02
 -5.75986728e-02 -3.20464489e-03 -6.61176294e-02 -1.11061588e-01
 -7.07480982e-02 -1.32213691e-02 -7.03977868e-02  3.25425551e-03
  3.94397825e-02 -2.91279536e-02 -7.26640970e-02  3.53582054e-02
 -5.46086729e-02  2.14058626e-02  3.49598564e-02  1.24858059e-02
 -7.37039298e-02  4.28482257e-02  3.82437580e-03 -1.29298475e-02
  2.72312835e-02 -8.13355595e-02 -4.57175709e-02 -2.36152058e-33
 -1.36420541e-02 -6.68252781e-02  3.52742523e-03 -1.06613830e-01
 -2.13819109e-02 -2.12762766e-02  1.70140844e-02 -2.87791137e-02
 -1.81794930e-02  3.30894180e-02 -5.17800711e-02 -5.80289261e-03
  2.89279241e-02  4.88568544e-02  8.89027640e-02  4.01696973e-02
 -1.04434624e-01 -1.05821237e-01 -1.70294065e-02  7.46500939e-02
 -4.80903983e-02  9.97683853e-02 -5.77371530e-02  1.31687433e-01
  2.01429594e-02  1.91266853e-02 -2.05818806e-02  9.01795551e-02
  2.01949570e-02 -4.66585346e-02  5.66834807e-02  4.47405386e-04
 -1.41838267e-01  1.07098237e-01 -3.36349234e-02 -1.05434440e-01
  4.64406656e-03  6.18409030e-02 -1.05067529e-01  3.19261290e-02
  1.72895283e-01 -3.59236374e-02 -3.73833589e-02 -4.32007685e-02
 -9.58172325e-03 -1.62159314e-03  5.29176854e-02 -1.17871985e-02
 -1.02019962e-02  2.16084532e-02  3.48518677e-02 -1.09091781e-01
 -4.94045380e-04  2.40958296e-02 -6.38410822e-03  4.50311694e-03
  1.29334018e-01  4.23239358e-03  8.37632716e-02 -2.48133112e-02
  6.71445429e-02 -1.38729485e-02 -3.31811272e-02  5.63942753e-02
 -2.59730276e-02 -1.02728702e-01 -5.48967421e-02  1.67415291e-03
 -1.48977875e-03  2.92378534e-02  3.95115837e-03  5.50220497e-02
  6.77654445e-02 -9.54313502e-02  2.57715583e-02  6.04942627e-02
  5.03185131e-02 -2.49095708e-02  2.52871383e-02 -3.59191112e-02
 -8.28037933e-02  5.00551648e-02  5.96503019e-02 -3.00945155e-02
 -4.54276688e-02 -9.37921777e-02  4.50166054e-02 -3.14579606e-02
 -9.72015858e-02  4.64446396e-02 -3.83894183e-02 -5.88672534e-02
  1.88908987e-02 -2.51461882e-02  1.12839937e-02 -5.11873814e-08
 -8.73814747e-02 -5.63386735e-03 -1.51411612e-02  4.88347523e-02
  3.90497372e-02 -1.25335142e-01  4.21588346e-02 -1.95134357e-02
 -2.91166920e-02  2.61515938e-03  1.76762193e-02  2.39501186e-02
  1.73279010e-02  5.58018088e-02 -5.39535619e-02 -3.92379202e-02
 -1.16434917e-02 -5.14221713e-02 -1.91130713e-02 -2.98735928e-02
 -3.10979616e-02 -4.70999144e-02  1.57533213e-02 -5.75167798e-02
  2.01812815e-02 -7.58720413e-02 -2.32279468e-02  6.70742467e-02
  4.67617922e-02  2.92566065e-02  6.22112043e-02  1.59305916e-03
 -2.33384948e-02 -2.18400471e-02  1.88529715e-02  3.67624462e-02
  1.78773459e-02  1.22374818e-02  3.05451639e-02 -2.71787047e-02
 -1.96791980e-02  4.44748476e-02  1.04914475e-02 -3.43425833e-02
 -1.41504752e-02 -8.95303581e-03 -3.10726222e-02 -4.85221334e-02
  1.17216326e-01  1.45936506e-02 -7.15588480e-02 -6.15285002e-02
  4.49577793e-02  4.54889871e-02 -6.94741905e-02 -5.72812967e-02
  1.89140309e-02  2.68414207e-02 -5.22515513e-02  1.77079979e-02
  6.19303659e-02  1.26113221e-02  3.70557420e-03 -5.25984727e-02]"
"      0 => Self::InitBlog {},
            1 => Self::CreatePost {
                slug: payload.slug,
                title: payload.title,
                content: payload.content
            },
            _ => return Err(BlogError::InvalidInstruction.into()),
        })
    }
}

#[derive(BorshSerialize, BorshDeserialize, Debug, Clone)]
pub struct Blog {
    pub authority: Pubkey,
    pub bump: u8,
    pub post_count: u8 // 10 posts max
}

#[derive(BorshSerialize, BorshDeserialize, Debug, Clone)]
pub struct Post {
    pub author: Pubkey,
    pub blog: Pubkey,
    pub bump: u8,
    pub slug: String, // 10 chars max
    pub title: String, // 20 chars max
    pub content: String, // 50 chars max
}

impl Blog {
    pub const LEN: usize = 32 + 1 + 1;
}

#[derive(Error, Debug, Copy, Clone)]
pub enum BlogError {
    #[error(""Invalid Instruction"")]
    InvalidInstruction,

    #[error(""Invalid Blog Account"")]
    InvalidBlogAccount,

    #[error(""Invalid Post Account"")]
    InvalidPostAccount,

    #[error(""Invalid Post Data"")]
    InvalidPostData,

    #[error(""Account not Writable"")]
    AccountNotWritable,
}

impl From<BlogError> for ProgramError {
    fn from(e: BlogError) -> Self {
        return ProgramError::Custom(e as u32);
    }
}
fn process_create_post(
    accounts: &[AccountInfo],
    slug: String,
    title: String,
    content: String,
    program_id: &Pubkey
) -> ProgramResult {
    if slug.len() > 10 || content.len() > 20 || title.len() > 50 {
        return Err(BlogError::InvalidPostData.into())
    }

    let account_info_iter = &mut accounts.iter();

    let authority_account = next_account_info(account_info_iter)?;
    let blog_account = next_account_info(account_info_iter)?;
    let post_account = next_account_info(account_info_iter)?;
    let system_program = next_account_info(account_info_iter)?;

    if !authority_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature);
    }

    let (blog_pda, _blog_bump) = Pubkey::find_program_address(
        &[b""blog"".as_ref(), authority_account.key.as_ref()],
        program_id
    );
    if blog_pda != *blog_account.key || !blog_account.is_writable || blog_account.data_is_empty() {
        return Err(BlogError::InvalidBlogAccount.into())
    }

    let (post_pda, post_bump) = Pubkey::find_program_address(
        &[b""post"".as_ref(), slug.as_ref(), authority_account.key.as_ref()],
        program_id
    );
    if post_pda != *post_account.key {
        return Err(BlogError::InvalidPostAccount.into())
   ","[-4.53174151e-02  1.21548604e-02 -1.88928097e-02 -1.17346002e-02
 -3.24610546e-02 -8.79145712e-02 -2.04648487e-02  3.04426495e-02
 -3.28861326e-02  2.84988489e-02  2.66301297e-02 -6.76821545e-02
  2.58226022e-02  2.23492589e-02  5.09471856e-02  5.98497391e-02
 -7.55155236e-02 -2.80408654e-02 -6.32316945e-03  7.02035278e-02
  6.85365126e-02  1.07477099e-01 -3.48923057e-02  1.33915737e-01
  2.98367310e-02 -8.08106512e-02 -7.35593885e-02 -6.99399458e-03
  1.66299734e-02 -5.30427769e-02  8.94925818e-02 -2.93310750e-02
  1.01012122e-02  3.46999057e-02  1.01030856e-01  7.42770359e-02
  8.34005773e-02 -8.35765675e-02  6.08328730e-02  2.28431565e-03
  1.75028816e-02  1.80720929e-02 -9.80499759e-02 -9.92718246e-03
 -3.88381840e-03 -2.05089711e-02  2.63085384e-02  3.55315022e-02
 -2.01319903e-02  3.13088745e-02 -4.99603003e-02  8.62905232e-04
  1.71974266e-03  1.53294660e-03  2.15920079e-02  5.13436981e-02
 -1.01813473e-01  5.06637543e-02  2.57346947e-02 -5.86730279e-02
 -3.38638225e-03  1.67229194e-02  8.31720792e-03 -4.53049354e-02
  7.20946025e-03 -2.48377007e-02  2.89603998e-03  4.34392914e-02
 -2.95912079e-03  6.76386952e-02  5.14506027e-02 -3.22189890e-02
 -6.76141679e-02  8.39485899e-02 -2.73081264e-03  8.67846608e-02
 -2.56564002e-02  1.63296666e-02 -5.34855537e-02 -5.00901639e-02
 -1.62966251e-02 -7.22902874e-03 -3.03910468e-02  6.33168370e-02
 -1.91322342e-02 -1.50583414e-02  5.66538908e-02 -2.02031489e-02
  1.05377156e-02  5.97024448e-02 -2.58746333e-02 -6.20795302e-02
 -2.00254307e-03 -1.59319099e-02  3.67858745e-02 -1.88490879e-02
  6.68623811e-03  1.42446086e-02  2.80258618e-02  7.57219195e-02
 -4.21571396e-02  2.00274121e-02  3.35365981e-02 -2.02685385e-03
 -7.75930611e-03 -8.36159661e-02 -4.30059247e-03  1.33446194e-02
 -2.52473187e-02  2.57365163e-02  5.20886816e-02  5.78390583e-02
 -3.14749032e-03 -4.47083898e-02  6.79711998e-02  4.49841917e-02
  1.91893484e-02 -7.26316497e-02  3.16367261e-02 -6.83422312e-02
  8.58957469e-02 -1.86705105e-02  5.42727187e-02  5.13203368e-02
 -5.18496148e-02 -6.18149042e-02 -7.00286869e-03  6.74341877e-33
  8.68565962e-02  4.85239066e-02 -6.39648875e-03  1.17297791e-01
  3.52138206e-02  1.97980013e-02  2.51932498e-02  1.03526469e-02
 -1.35684758e-01 -6.11622967e-02 -7.50456527e-02 -5.15577719e-02
  5.08951545e-02 -3.93213145e-02  8.81175399e-02 -1.82044450e-02
  9.35945660e-03  5.39917797e-02  1.04023814e-01  3.91972736e-02
  9.61435586e-02  2.73714354e-03 -6.99101910e-02 -3.03112362e-02
 -1.02635333e-03  3.62363830e-02  4.29789769e-03 -5.82633838e-02
 -6.87527657e-02  1.46973766e-02  4.95737903e-02  2.08921097e-02
  4.27335454e-03  1.59439873e-02  4.97501642e-02 -1.04713164e-01
  5.95913874e-03 -1.12838121e-02 -1.12514608e-01 -1.03091754e-01
  1.54148825e-02  2.05678344e-02 -6.22814670e-02  1.24503183e-03
  2.93278787e-02 -3.13399434e-02 -4.99955155e-02 -1.93184894e-02
 -1.66600235e-02 -1.70350242e-02  3.14572379e-02  3.86734158e-02
 -3.22217355e-03 -2.09700037e-02  2.41636187e-02 -3.13719809e-02
  1.52903534e-02 -1.99321136e-02  6.77475184e-02  6.49570525e-02
  5.12855835e-02  8.99400413e-02  9.65930149e-03  5.54742932e-04
  5.99033162e-02 -2.65757032e-02 -5.42388745e-02  2.86292452e-02
  8.60201940e-02 -1.23654194e-02 -7.38556171e-03 -3.25889862e-03
 -1.22867636e-01 -1.85357388e-02 -8.13900083e-02 -2.55410951e-02
 -2.90839635e-02 -5.16560674e-02 -1.21376077e-02 -3.51868160e-02
 -2.41459403e-02  3.73976165e-03 -3.12434603e-02 -1.30306426e-02
 -5.80021665e-02 -1.32816220e-02  6.53207600e-02 -7.36765284e-03
 -5.93076199e-02  3.65873352e-02  1.14386417e-02 -5.65455742e-02
 -1.63793354e-03 -9.57980081e-02 -6.83026761e-02 -6.63091955e-33
 -1.06310965e-02 -4.52949516e-02 -3.19984742e-04  1.17599824e-02
 -4.89230976e-02 -4.03076261e-02 -4.02937783e-03  1.26211913e-02
  1.71470996e-02  8.81218445e-03 -3.47406492e-02  1.67385526e-02
  5.82822338e-02  3.83219309e-02  2.78580021e-02 -4.94327694e-02
 -6.65297508e-02 -1.44046634e-01 -6.37655556e-02 -3.29537666e-03
  1.12295495e-02  5.31808995e-02  7.76908826e-03  4.59840894e-02
  5.85623644e-03  3.26444544e-02  8.00393696e-04  8.83768499e-02
  5.38072363e-02 -2.89009530e-02  1.85368378e-02  7.59518817e-02
 -3.41584347e-02  4.04917896e-02 -3.99591327e-02  2.03587431e-02
  2.65830662e-02  6.56559244e-02  4.37980630e-02 -4.62985709e-02
  2.40449850e-02  2.52278298e-02 -5.93192428e-02 -5.30875735e-02
 -1.43372063e-02 -5.07422835e-02  6.69543147e-02  2.66613271e-02
  6.65008351e-02  3.01297680e-02  8.36029947e-02 -8.97663459e-02
  1.04695186e-02 -1.15491562e-02 -6.81045372e-03 -1.17119394e-01
  2.72136480e-02 -5.13638370e-02  2.61048209e-02 -2.00141165e-02
  2.10068580e-02 -1.48441410e-02 -2.89428793e-02  6.76992759e-02
  3.60653587e-02 -1.48250297e-01 -7.77031705e-02 -5.22009097e-02
 -4.96534072e-02 -4.59732488e-02  2.30759643e-02  3.08503229e-02
  1.08736278e-02  1.29022580e-02  1.56183079e-01  5.64225065e-03
 -3.36835980e-02  8.89911409e-03  3.64209786e-02  1.63593777e-02
 -1.45012096e-01 -4.14960599e-03  4.11590040e-02  8.48471597e-02
  3.44411917e-02 -1.30546987e-01  5.96393682e-02  9.16201472e-02
 -5.93223795e-02 -9.53764655e-03 -1.48724047e-02 -1.71123948e-02
  1.63691142e-03  6.37825653e-02  1.05519230e-02 -5.15740588e-08
 -1.28852919e-01 -4.44469489e-02 -7.27921799e-02  1.10547557e-01
  6.87003583e-02  5.91860432e-03  5.18738292e-03 -8.94767791e-02
  6.31456822e-02 -5.02687283e-02 -7.30114505e-02  3.78769748e-02
 -2.30611544e-02 -2.80294511e-02  1.11908093e-02 -7.07409531e-02
 -4.46818322e-02 -5.15005812e-02 -4.91049699e-02 -5.65897264e-02
 -1.38466191e-02 -4.45973910e-02 -4.84528691e-02 -5.69603592e-02
  4.38938923e-02 -6.37333095e-02 -2.00150721e-02  2.80498043e-02
  1.34125669e-02  2.96092173e-03  5.67074046e-02 -6.51369151e-03
 -1.89702790e-02  1.67798735e-02  2.42235716e-02  2.72320230e-02
  3.01969089e-02  7.28686526e-02 -1.64240617e-02  1.63140204e-02
 -9.69275367e-03 -4.65564057e-02 -7.80751705e-02 -5.77639090e-03
 -1.37806144e-02  2.26406436e-02 -5.90937845e-02  6.80427030e-02
 -1.93832032e-02  5.92730846e-03  1.31837577e-02 -3.01373731e-02
  7.56045058e-02  3.22326086e-02 -9.05629769e-02 -5.69990724e-02
  3.56773846e-02 -1.72309447e-02  3.40716429e-02  3.27693522e-02
  1.14737853e-01  3.89247164e-02  9.29707140e-02  1.62946563e-02]"
"}

    let post_len: usize = 32 + 32 + 1 + (4 + slug.len()) + (4 + title.len()) + (4 + content.len());

    let rent = Rent::get()?;
    let rent_lamports = rent.minimum_balance(post_len);

    let create_post_pda_ix = &system_instruction::create_account(
        authority_account.key,
        post_account.key,
        rent_lamports,
        post_len.try_into().unwrap(),
        program_id
    );
    msg!(""Creating post account!"");
    invoke_signed(
        create_post_pda_ix, 
        &[
            authority_account.clone(),
            post_account.clone(),
            system_program.clone()
        ],
        &[&[
            b""post"".as_ref(),
            slug.as_ref(),
            authority_account.key.as_ref(),
            &[post_bump]
        ]]
    )?;

    let mut post_account_state = try_from_slice_unchecked::<Post>(&post_account.data.borrow()).unwrap();
    post_account_state.author = *authority_account.key;
    post_account_state.blog = *blog_account.key;
    post_account_state.bump = post_bump;
    post_account_state.slug = slug;
    post_account_state.title = title;
    post_account_state.content = content;

    msg!(""Serializing Post data"");
    post_account_state.serialize(&mut &mut post_account.data.borrow_mut()[..])?;


    let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;
    blog_account_state.post_count += 1;

    msg!(""Serializing Blog data"");
    blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;

    Ok(())
}

fn process_init_blog(
    accounts: &[AccountInfo],
    program_id: &Pubkey
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();
    
    let authority_account = next_account_info(account_info_iter)?;
    let blog_account = next_account_info(account_info_iter)?;
    let system_program = next_account_info(account_info_iter)?;

    if !authority_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature);
    }

    let (blog_pda, blog_bump) = Pubkey::find_program_address(
        &[b""blog"".as_ref(), authority_account.key.as_ref()],
        program_id 
    );
    if blog_pda != *blog_account.key {
        return Err(BlogError::InvalidBlogAccount.into())
    }

    let rent = Rent::get()?;
    let rent_lamports = rent.minimum_balance(Blog::LEN);
    
    let create_blog_pda_ix = &system_instruction::create_account(
        authority_account.key,
        blog_account.key,
        rent_lamports,
        Blog::LEN.try_into().unwrap(),
        program_id
    );
    msg!(""Creating blog account!"");
    invoke_signed(
 ","[-4.99796867e-02  4.98506241e-02 -1.00756586e-01 -2.20071618e-02
 -8.36131126e-02 -3.17219459e-02 -4.43774462e-03  4.11175601e-02
 -2.35177595e-02  4.57623862e-02  1.02506123e-01 -9.34531912e-02
  8.75229463e-02 -7.13878796e-02 -2.11878810e-02  8.06020126e-02
 -5.67634106e-02 -9.67079494e-03 -6.60964381e-03  1.12309866e-02
  8.92433375e-02 -4.09621298e-02  1.73911285e-02  4.66390289e-02
  4.07436453e-02 -3.52267735e-02 -4.83121686e-02  4.91339229e-02
  2.98208352e-02 -6.87061250e-02  7.38983899e-02 -3.49163227e-02
  4.72933538e-02 -2.04717200e-02  1.49868235e-01  8.83349776e-02
  1.60595085e-02 -8.80856663e-02  2.44222786e-02 -3.78096551e-02
 -2.18074210e-02  4.59020287e-02  9.27009806e-03  3.87726501e-02
 -8.88895169e-02  5.36597036e-02 -9.13595967e-03  5.58826365e-02
  2.32681036e-02 -8.24493915e-02 -1.28379427e-02 -8.07013921e-03
 -5.85847162e-02  8.87715444e-03  5.96351875e-03  7.06864335e-03
  9.19192564e-03 -7.16629717e-03  1.63516458e-02 -3.09684295e-02
  2.01939829e-02  6.18318543e-02  2.62542386e-02 -1.23437215e-02
 -4.36815340e-03  1.14034265e-02 -5.81217408e-02 -2.49892864e-02
 -8.50706026e-02  1.06988894e-03 -2.86721271e-02  8.55928008e-03
 -7.88284242e-02  5.51545881e-02 -3.01093776e-02  5.22411764e-02
 -5.36188595e-02  4.52390537e-02 -2.42689755e-02 -7.59859160e-02
 -6.64332286e-02  3.36641516e-03 -2.72166985e-03  7.48151541e-02
  5.00094797e-03  6.49756100e-03  1.60689503e-02 -6.98614046e-02
  7.17155114e-02  5.48499785e-02  2.14225389e-02  1.66772772e-02
  4.28276137e-02  2.62531620e-02  2.08423138e-02  3.45286839e-02
  7.29915081e-03 -1.89250037e-02 -5.98800741e-02  1.07246876e-01
 -8.44502007e-04  8.74113943e-03 -9.43976268e-03  1.09949540e-02
  1.98952314e-02 -3.90887931e-02  4.51325178e-02 -3.80979739e-02
 -1.98060852e-02  3.61742936e-02  2.77030095e-02  5.10347933e-02
 -1.85179636e-02 -1.58310775e-02  3.62679549e-02  5.80014810e-02
 -3.11886035e-02 -7.15278136e-03  3.59634645e-02 -7.32051022e-03
  1.01227283e-01 -2.07362161e-03 -5.99271767e-02 -3.94178294e-02
 -2.15702206e-02  1.16623268e-02  5.82458749e-02 -1.60780040e-33
  2.03377735e-02 -2.86456998e-02 -1.23099843e-03  9.20804664e-02
 -1.48202358e-02  2.41612103e-02  4.55877604e-03  9.56838429e-02
 -1.11166991e-01  1.68720633e-02  3.06905396e-02 -9.80724543e-02
  2.99335402e-02 -6.11479580e-02 -2.03337166e-02 -1.06170297e-01
  8.65365863e-02  7.25289509e-02  5.80221638e-02  9.15631931e-03
  1.57492775e-02 -5.33437449e-03 -3.88569594e-03 -8.06855932e-02
  2.10030712e-02 -2.90805171e-03 -8.40879828e-02  3.55568598e-03
 -2.65102424e-02  9.87621024e-03 -5.15832528e-02 -6.37999177e-03
 -2.48211939e-02 -1.52779918e-03  5.12727089e-02 -5.42825498e-02
  4.15572291e-03 -2.00657416e-02 -1.03646182e-01 -2.11586915e-02
  3.69800627e-02 -1.15433913e-02  3.42880841e-03 -2.31753699e-02
 -4.10587341e-02  1.83750894e-02  1.40743637e-02 -1.25285853e-02
 -1.62589904e-02  6.70912266e-02  1.51206143e-02  4.68276478e-02
 -8.55360180e-02 -1.30641852e-02 -4.87537757e-02 -5.35679050e-02
 -3.18732485e-02 -6.38949051e-02  3.78771387e-02 -2.24203486e-02
  7.15275947e-03  8.24123919e-02 -3.17220874e-02  1.65596958e-02
  4.37129326e-02 -1.69205219e-02 -3.61828767e-02  1.02970833e-02
  8.23345780e-02 -2.98042875e-02 -1.49942329e-02 -5.45343757e-02
 -7.71420300e-02  3.36325504e-02 -5.35577796e-02 -1.08690701e-01
  6.11811830e-03 -2.67307693e-03 -5.61618060e-02 -5.73235974e-02
  3.01953033e-02 -1.40585443e-02 -5.75119630e-02 -2.25972272e-02
 -1.83931682e-02 -2.51073316e-02  5.15979826e-02  2.48979870e-02
 -7.26303831e-02 -1.21709909e-02 -1.18669607e-02 -7.88834020e-02
  5.99927455e-02 -6.85600489e-02 -3.58978915e-03 -1.27829234e-33
  2.33571068e-03 -1.20569706e-01 -6.88975584e-03 -8.15357789e-02
  1.84243973e-02 -1.17473360e-02  2.65899729e-02  1.09961573e-02
 -4.92077544e-02  7.58495228e-03 -1.22072063e-01  1.66205759e-03
  2.01975070e-02  6.33184463e-02  6.72813728e-02  2.56023044e-03
 -8.46542865e-02 -3.12957317e-02  1.08051312e-03  8.29048604e-02
 -1.65880134e-03  1.36987329e-01 -6.13928027e-03  1.55773044e-01
 -7.53804063e-03  2.26351265e-02 -2.47125980e-03  8.15356895e-02
 -2.19048723e-03  1.55512092e-03  1.70948077e-02 -2.04245932e-02
 -1.14973851e-01  1.24483421e-01 -8.81158188e-02 -1.10851839e-01
 -3.39376507e-03  9.46015269e-02 -3.30492258e-02  1.01221614e-01
  1.19597092e-01 -5.41057251e-02 -5.26575977e-03 -2.30736900e-02
  2.24231873e-02 -2.34126914e-02  7.79127255e-02  1.15108257e-02
 -3.41211930e-02  8.00737664e-02 -4.05953266e-02 -5.61178923e-02
 -2.30193529e-02 -8.68599117e-03 -8.29720497e-03 -4.04138975e-02
  9.75611210e-02  3.41353044e-02  1.19776048e-01 -6.83845356e-02
  1.95802134e-02 -1.49265854e-02  8.67905375e-03  2.97302939e-02
  6.67928904e-02 -6.78126290e-02 -6.47334522e-03 -3.27507704e-02
 -2.21998803e-02  3.10607464e-03 -3.70207205e-02  3.47139798e-02
 -4.52324189e-03 -8.26395601e-02  4.55285534e-02  8.47654976e-03
  4.14692461e-02 -1.17082614e-03  1.11363167e-02 -2.29087491e-02
 -1.09822690e-01  2.84780320e-02  5.54721430e-02  2.88728569e-02
 -1.65491365e-02 -5.79719171e-02  3.00657116e-02 -4.79904450e-02
 -4.41213138e-02  5.84660247e-02 -6.84491247e-02  3.36727127e-02
  2.40402389e-02 -6.60799583e-03 -4.32199314e-02 -5.62247671e-08
 -5.98905794e-02 -2.16469355e-02 -2.27195900e-02  1.13062844e-01
  5.38145714e-02 -5.81033453e-02  1.67128034e-02 -3.25705372e-02
 -1.11736422e-02 -8.36326703e-02  1.92214306e-02  5.86310066e-02
  6.95286551e-03  3.97186726e-03 -5.40268421e-02 -8.87212530e-02
 -4.00282927e-02 -5.27872257e-02 -4.60561141e-02 -4.51799966e-02
 -6.74029887e-02 -3.19757536e-02  9.13694128e-03 -1.20258629e-02
  9.06243362e-03 -2.08242387e-02  1.48256430e-02  1.10607855e-01
  1.25401855e-01  4.59184982e-02  9.36718434e-02  2.38286518e-02
 -3.47091327e-03 -3.57161388e-02 -2.31063012e-02 -3.89616238e-03
  3.54854837e-02  3.06945704e-02  3.77145670e-02  4.23724316e-02
  1.85283658e-03  6.55501261e-02 -5.48451487e-03 -2.21971069e-02
 -1.96568808e-03  2.37576086e-02 -4.68206108e-02 -7.34974910e-03
  7.83335939e-02 -2.22522896e-02 -6.61548302e-02 -3.38834077e-02
  1.18521573e-02  8.76485184e-02  5.02781617e-03 -8.47996697e-02
  6.08746037e-02  2.53978465e-02 -4.41988148e-02  7.05655888e-02
  6.34472370e-02  2.32346077e-02  1.88379753e-02 -4.22638617e-02]"
"      create_blog_pda_ix, 
        &[
            authority_account.clone(),
            blog_account.clone(),
            system_program.clone()
        ],
        &[&[
            b""blog"".as_ref(),
            authority_account.key.as_ref(),
            &[blog_bump]
        ]]
    )?;

    let mut blog_account_state = Blog::try_from_slice(&blog_account.data.borrow())?;
    blog_account_state.authority = *authority_account.key;
    blog_account_state.bump = blog_bump;
    blog_account_state.post_count = 0;
    blog_account_state.serialize(&mut &mut blog_account.data.borrow_mut()[..])?;
    

    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143Ở phía người dùng, họ có thể sử dụng PublicKey.findProgramAddress() để tìm ra địa chỉ của Blog và Post mong muốn thông qua địa chỉ ví đầu vào. Các địa chỉ vừa tìm thấy có thể được truyền vào connection.getAccountInfo() để truy vấn dữ liệu trong Account tương ứng. Ví dụ bên dưới sẽ minh hoạ điều đó:TSPress </> button to view full sourceimport * as borsh from ""@project-serum/borsh"";
import { PublicKey } from ""@solana/web3.js"";

export const BLOG_ACCOUNT_DATA_LAYOUT = borsh.struct([
  borsh.publicKey(""authorityPubkey""),
  borsh.u8(""bump""),
  borsh.u8(""postCount""),
]);

export const POST_ACCOUNT_DATA_LAYOUT = borsh.struct([
  borsh.publicKey(""author""),
  borsh.publicKey(""blog""),
  borsh.u8(""bump""),
  borsh.str(""slug""),
  borsh.str(""title""),
  borsh.str(""content""),
]);

async () => {
  const connection = new Connection(""http://localhost:8899"", ""confirmed"");

  const [blogAccount] = await PublicKey.findProgramAddress(
    [Buffer.from(""blog""), user.publicKey.toBuffer()],
    MY_PROGRAM_ID
  );

  const [postAccount] = await PublicKey.findProgramAddress(
    [Buffer.from(""post""), Buffer.from(""slug-1""), user.publicKey.toBuffer()],
    MY_PROGRAM_ID
  );

  const blogAccountInfo = await connection.getAccountInfo(blogAccount);
  const blogAccountState = BLOG_ACCOUNT_DATA_LAYOUT.decode(
    blogAccountInfo.data
  );
  console.log(""Blog account state: "", blogAccountState);

  const postAccountInfo = await connection.getAccountInfo(postAccount);
  const postAccountState = POST_ACCOUNT_DATA_LAYOUT.decode(
    postAccountInfo.data
  );
  console.log(""Post account state: "", postAccountState);
};
12345678910111213141516171819202122232425262728293031323334353637383940414243async () => {
  const connection = new Connection(""http://localhost:8899"", ""confirmed"");

  const [blogAccount] = await PublicKey.findProgramAddress(
    [Buffer.from(""blog""), user.publicKey.toBuffer()],
    MY_PROGRAM_ID
  );

  const [postAccount] = await PublicKey.findProgramAddress(
    [Buffer.from(""post""), Buffer.from(""slug-1""), user.publicKey.toBuffer()],
    MY_PROGRAM_ID
  );

  const blogAccountInfo = await connection.getAccountInfo(blogAccount);
  const blogAccountState = BLOG_ACCOUNT_DATA_LAYOUT.decode(
    blogAccountInfo.data
  );
  console.log(""Blog account state: "", blogAccountState);

  const postAccountInfo = await connection.getAccountInfo(postAccount);
  const postAccountState = POST_ACCOUNT_DATA_LAYOUT.decode(
    postAccountInfo.data
  );
  console.log(""Post account state: "", postAccountState);
};
12345678910111213141516171819202122232425# Map bằng Account đơnMột cách khác hơn đển hiện thực map là dùng cấu trúc BTreeMap để lưu dữ liệu lên một Account duy nhất. Địa chỉ của Account này có thể là PDA, hoặc có thể là khoá công khai của một cặp khoá được sinh ra thủ công.Phương pháp này thường có một vài hạn chế:Bước đầu tiên phải khởi tạo Account để lưu BTreeMap trước khi có thể thêm bất kỳ key-value","[-8.91507939e-02  2.70388611e-02 -8.32562745e-02 -5.08666821e-02
 -6.53798133e-02 -2.09202021e-02  4.30488475e-02  4.03488837e-02
  1.08673954e-02  3.82677913e-02  1.15211263e-01 -1.02258317e-01
  3.81361023e-02 -8.85297507e-02  7.59661049e-02  6.10616580e-02
 -9.27896053e-02 -4.30892259e-02 -3.26911584e-02  7.64219463e-03
  9.52878967e-02  1.14137540e-02  2.42108037e-03  3.72969322e-02
  2.99462974e-02 -5.88182025e-02 -3.73374075e-02 -1.66757200e-02
  7.89844245e-02 -3.09644882e-02  7.16202781e-02  2.12841444e-02
 -1.00144923e-01  7.15545891e-03  1.02134041e-01  9.50134769e-02
  7.79730640e-03 -6.53229281e-02  1.98527612e-02  1.39922174e-02
  2.80317664e-02  3.07700839e-02 -7.66618475e-02 -6.51886463e-02
  5.55800786e-03  1.60547476e-02  1.46474149e-02  5.68285659e-02
  3.54138091e-02 -6.43429533e-02 -9.46009606e-02  1.11209210e-02
 -5.13041317e-02  1.88640133e-02  8.68657604e-03  1.26119079e-02
  6.34278264e-03  5.25485352e-02  1.50229624e-02 -4.91945483e-02
 -2.95773633e-02  2.06494033e-02 -1.74273029e-02 -3.79698090e-02
  1.58057883e-02 -4.67271693e-02 -6.90195560e-02  4.48109470e-02
  1.81568302e-02  5.77022228e-03 -5.16074859e-02  1.21771581e-02
 -6.06522486e-02  5.57894297e-02 -2.11024862e-02 -2.36331988e-02
 -6.24179095e-02 -2.24004500e-03 -4.77224849e-02 -1.23366907e-01
 -2.85110455e-02  3.92880961e-02  3.17918397e-02  6.77069277e-02
  1.94620322e-02  1.53831793e-02 -1.69032160e-02  2.70103035e-03
  5.29849455e-02  2.88406033e-02  4.58584353e-02 -2.46295761e-02
  3.02881785e-02 -1.71507914e-02  1.65423844e-02  1.65678915e-02
  2.49621049e-02  1.28351403e-02  1.80192944e-02  7.23249912e-02
 -2.76694894e-02  4.96006720e-02  2.30485741e-02  3.90558466e-02
 -3.56519734e-03 -2.30878480e-02  2.35534497e-02 -6.05438352e-02
 -5.57912067e-02  2.41509080e-02 -1.81091055e-02  8.62914994e-02
 -4.67385761e-02 -7.09713027e-02  7.56043494e-02  1.04941148e-02
 -4.72284593e-02 -4.91202809e-02 -7.80653656e-02  1.19294571e-02
  4.36893404e-02  1.11987267e-03 -3.61720994e-02  3.80354226e-02
 -6.62064180e-02 -3.07840854e-02  6.45543858e-02  1.95059329e-33
  8.02596658e-02  3.00356001e-02  1.46679464e-03  1.37461238e-02
  1.95019727e-03  5.25984801e-02  1.52989849e-02 -3.86363803e-03
 -1.33918598e-01  2.01258585e-02 -2.83219907e-02 -5.53102605e-02
 -1.35650896e-02 -3.60870063e-02 -2.40344275e-02 -2.58209649e-02
  4.55762818e-02  2.81312782e-02  9.81743559e-02  2.75897812e-02
  1.27734795e-01  4.65377979e-02 -6.26883423e-03 -4.16712426e-02
  4.28484473e-03 -1.06084598e-02 -6.45791143e-02  8.09720438e-03
 -1.42938951e-02  6.32151868e-03 -1.43175256e-02  7.24416459e-03
 -8.28732178e-02 -1.02072647e-02  1.13593359e-02 -5.16141392e-02
  3.96219678e-02 -2.63744779e-02 -8.41736123e-02 -5.16013838e-02
  7.59775937e-02  3.74614261e-02  1.02397697e-02  2.23313533e-02
  1.05149318e-02  8.54088180e-03 -4.49277051e-02  3.63165289e-02
  4.82254736e-02  4.72254567e-02 -3.04130185e-02 -1.71872489e-02
 -7.30404770e-03 -2.23123990e-02 -4.41501550e-02 -6.30898923e-02
  2.19609775e-02 -5.28048649e-02  6.41791150e-02 -5.58045283e-02
 -9.55446344e-03 -5.81396651e-03  1.04536768e-03  5.77940345e-02
  3.09941676e-02  1.54256783e-02 -1.34086134e-02  7.57160969e-03
  1.24231361e-01 -4.05191146e-02 -2.30247267e-02 -2.99673397e-02
 -8.75863284e-02 -3.28375539e-03 -3.15068997e-02 -7.07251579e-02
 -5.92087619e-02 -7.78660253e-02 -8.64562690e-02  1.10638575e-05
 -3.99526693e-02 -3.55907157e-03 -1.57621205e-01 -1.33514982e-02
  1.61518846e-02  2.65352745e-02  4.22282815e-02 -3.09529006e-02
 -2.10261587e-02  3.71267572e-02 -6.04307167e-02  9.00634332e-04
  5.11511602e-02 -4.22208831e-02 -3.92442830e-02 -3.00884163e-33
  3.40173095e-02 -3.00213192e-02  2.93203518e-02 -1.95290297e-02
 -2.41098739e-02 -2.08330490e-02  5.95855825e-02  2.17706431e-02
 -4.62992936e-02  3.27584743e-02 -6.40218332e-02 -6.46301359e-02
  5.97620569e-02  7.45959282e-02  1.04612194e-01  5.41933253e-02
 -6.25950247e-02  7.18220789e-03  3.85207753e-03  1.43275317e-02
 -8.61620829e-02  1.01935841e-01 -3.27952579e-02  1.15436286e-01
 -1.46808792e-02  2.15509180e-02 -1.76775530e-02  5.93831986e-02
  5.44667356e-02 -8.60299617e-02  5.51721826e-02 -2.27472223e-02
 -1.23356760e-01  1.36589646e-01 -5.52487448e-02 -4.51139957e-02
  3.79769094e-02  5.05267344e-02 -3.57786231e-02 -5.90844825e-03
  1.16216123e-01 -4.67942804e-02 -3.91545743e-02  5.69092482e-03
 -2.28722151e-02 -2.44979318e-02  5.56320846e-02  5.34959249e-02
 -4.07280885e-02 -1.47072067e-02  6.82879314e-02 -9.42854211e-02
  3.64155672e-03  1.55931870e-02  6.33072713e-03 -4.31752810e-03
  1.34368062e-01 -3.95859629e-02  1.83557475e-03 -9.23872143e-02
  4.58358452e-02 -3.38001549e-02 -3.34809385e-02  2.31567137e-02
  7.62099847e-02 -9.94251668e-02  4.01945896e-02  1.54089015e-02
  6.88429251e-02 -5.80706373e-02 -2.35838275e-02  8.65426436e-02
  8.31212252e-02 -9.43253934e-02  6.00317717e-02  6.54812828e-02
 -3.71993594e-02  6.89770794e-04  4.14919034e-02  2.22289208e-02
 -1.12984240e-01 -1.11043677e-02  4.13018726e-02 -9.05660540e-03
 -3.21808532e-02 -3.22194397e-02  5.21305688e-02 -2.94417143e-03
 -4.55835573e-02 -3.15487459e-02 -5.41693792e-02 -2.62428354e-02
  4.16939855e-02  1.16687268e-01  9.25363321e-03 -5.96443570e-08
 -6.60201386e-02 -2.58942004e-02 -3.55079374e-03  1.15566671e-01
  4.00695167e-02 -5.21248095e-02 -6.18832093e-03 -8.74375328e-02
 -7.36203650e-03 -4.99614030e-02 -2.01376583e-02  1.05716232e-02
  1.38864871e-02  4.86300103e-02 -1.95955485e-02 -1.01903781e-01
  5.49641140e-02 -1.37586379e-02 -1.17541645e-02 -4.14526910e-02
  5.40516246e-03 -5.33409864e-02  4.48305439e-03 -5.95238339e-03
  4.28575836e-02 -2.24064756e-02 -3.20995972e-02  6.84900731e-02
  1.77061036e-02  4.54540625e-02  8.37184042e-02 -2.71416735e-02
  2.09937114e-02  1.90154798e-02  3.19204889e-02 -2.42648106e-02
  4.50207926e-02  4.37848680e-02  3.03842407e-02 -4.98963259e-02
  6.48838133e-02 -1.29514188e-03 -1.94362085e-02 -2.30271854e-02
  2.49197446e-02 -5.74446432e-02  2.39134654e-02 -1.46047659e-02
  1.31178424e-01  1.24797365e-02 -6.90880120e-02 -2.45781746e-02
  7.73594528e-02  4.75487895e-02 -7.92128146e-02 -3.70633602e-02
 -8.67776864e-04  4.83484827e-02  4.75104712e-03  1.95665509e-02
  9.52311978e-02  3.11588962e-02 -1.39545463e-02 -1.59731582e-02]"
"nào vào bên trong nó. Sau đó, bạn sẽ phải lưu địa chỉ này một nơi nào đó để dùng cho việc cập nhật dữ liệu về sau.Có nhiều giới hạn lưu trữ cho một Account như là dung lượng tối đa của một Account là 10 megabytes và không thể cho phép BTreeMap có thể lưu trữ một số lượng lớn các cặp key-value.Tuy vào tính huống của riêng ứng dụng, bạn có thể cân nhắc sử dụng nó như sau:RustPress </> button to view full sourceuse std::{collections::BTreeMap};
use thiserror::Error;
use borsh::{BorshSerialize, BorshDeserialize};
use num_traits::FromPrimitive;
use solana_program::{sysvar::{rent::Rent, Sysvar}, entrypoint, entrypoint::ProgramResult, pubkey::Pubkey, account_info::{AccountInfo, next_account_info}, program_error::ProgramError, system_instruction, msg, program::{invoke_signed}, borsh::try_from_slice_unchecked};

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    msg!(""instruction_data: {:?}"", instruction_data);
    Processor::process(program_id, accounts, instruction_data)
}

pub struct Processor;

impl Processor {
    pub fn process(
        program_id: &Pubkey,
        accounts: &[AccountInfo],
        instruction_data: &[u8]
    ) -> ProgramResult {
        let instruction = FromPrimitive::from_u8(instruction_data[0]).ok_or(ProgramError::InvalidInstructionData)?;

        match instruction {
            0 => {
                msg!(""Initializing map!"");
                Self::process_init_map(accounts, program_id)?;
            },
            1 => {
                msg!(""Inserting entry!"");
                Self::process_insert_entry(accounts, program_id)?;
            },
            _ => {
                return Err(ProgramError::InvalidInstructionData)
            }
        }
        Ok(())
    }

    fn process_init_map(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {
        let account_info_iter = &mut accounts.iter();

        let authority_account = next_account_info(account_info_iter)?;
        let map_account = next_account_info(account_info_iter)?;
        let system_program = next_account_info(account_info_iter)?;

        if !authority_account.is_signer {
            return Err(ProgramError::MissingRequiredSignature)
        }

        let (map_pda, map_bump) = Pubkey::find_program_address(
            &[b""map"".as_ref()],
            program_id
     ","[-5.77652119e-02  1.25418920e-02 -1.00463934e-01 -5.08793555e-02
  1.70980152e-02 -2.48366017e-02  4.67859432e-02  5.00305891e-02
  5.30384202e-03  2.90800333e-02  7.47186467e-02 -1.07907802e-01
 -8.95001460e-03 -5.73803224e-02  2.01411243e-03  8.34073778e-03
 -1.00171931e-01  9.45533044e-04 -4.36651818e-02 -2.49255523e-02
  4.82431948e-02  1.48663549e-02 -1.88933183e-02 -1.25455996e-02
 -2.72270516e-02 -2.40597874e-02  1.57799795e-02  6.22237511e-02
 -2.26387493e-02 -7.35818148e-02  2.73073670e-02  9.85675603e-02
  4.91607971e-02 -6.38559554e-03  4.54706401e-02  8.12293962e-02
  2.17993148e-02 -6.27597272e-02 -2.91024595e-02 -1.42313596e-02
 -1.01348437e-01  6.11594580e-02 -8.43284428e-02 -6.37896359e-02
  7.77557865e-02 -2.15394199e-02 -4.09005843e-02 -1.74332373e-02
  1.12776393e-02 -1.84885561e-02 -7.53057599e-02  1.20130435e-01
 -6.47226647e-02  3.54123563e-02 -4.98199277e-02  2.47065024e-03
 -5.38672917e-02 -3.25758085e-02  3.79032232e-02 -3.38773467e-02
 -4.03634310e-02  2.36549173e-02 -8.84721056e-03 -3.86569872e-02
  1.84326265e-02 -1.43096726e-02  1.14872120e-03  2.10797787e-03
 -2.98730731e-02 -6.00614876e-04 -2.31834576e-02 -5.32249399e-02
 -1.25091553e-01  4.24142554e-02 -7.55037740e-02  2.88446955e-02
 -3.24680209e-02 -2.26774462e-03  5.21839317e-03 -4.71357629e-02
 -3.99801768e-02  4.75371145e-02  3.05150114e-02 -4.05302830e-02
  5.89130027e-03  5.09691238e-02 -4.39384095e-02 -4.16125953e-02
  2.76516639e-02  9.47074313e-03  6.82950765e-03 -5.68174571e-03
  1.14381099e-02  4.67460304e-02  5.00755683e-02 -1.91533696e-02
  9.03867856e-02  5.24452962e-02 -1.73181426e-02  9.93830636e-02
  4.52961102e-02  4.28439155e-02 -2.34926715e-02 -8.06229934e-02
 -2.12388616e-02 -2.63431389e-02  1.24680653e-01  2.49985000e-03
 -2.42309738e-02  3.65536213e-02 -3.37026343e-02  4.85144407e-02
 -5.32245561e-02 -1.18163876e-01  7.34872138e-03  2.36642081e-02
 -1.30442102e-02 -2.39579603e-02 -4.61679362e-02  3.08078434e-02
  8.51518512e-02 -8.71312767e-02 -8.51258487e-02  2.02972945e-02
 -4.05809470e-02 -1.64921191e-02  6.52969778e-02  2.17045569e-32
  5.68437912e-02 -6.15078174e-02 -3.53751481e-02 -5.86779416e-02
  7.16327410e-03  2.27938034e-03 -2.56565623e-02  4.05130535e-02
 -1.42092481e-01 -2.47370377e-02 -4.14472595e-02 -1.02909710e-02
 -4.85343896e-02 -6.60519600e-02  5.11711538e-02 -2.38568913e-02
  8.78225192e-02 -2.48641223e-02 -2.79830256e-03 -4.53463569e-02
  1.44044766e-02  7.03141233e-03  3.03138718e-02 -4.76751756e-03
  3.64722982e-02  3.65140885e-02 -9.09855738e-02 -5.24261594e-02
 -2.47782674e-02  3.29600275e-02  9.11413655e-02  3.70628014e-03
 -5.49993142e-02 -3.57119963e-02 -4.74457331e-02 -2.61121728e-02
 -5.82782552e-02 -6.03477769e-02 -5.43074012e-02 -9.51843858e-02
  4.29511778e-02  3.08989696e-02  1.18495552e-02 -5.10758534e-03
 -6.14434779e-02  3.81627455e-02 -1.75397098e-03 -4.48071351e-03
 -2.84834001e-02  5.10017341e-03 -7.44525269e-02  2.61156186e-02
 -1.63879186e-01  2.76451502e-02  6.67791069e-02 -3.81156988e-02
  3.94577906e-03  1.19776540e-02  3.56052667e-02  6.63903281e-02
 -1.85845718e-02  1.57066640e-02  7.60577172e-02  5.49454056e-02
 -1.56242242e-02 -5.63136041e-02 -1.06130808e-03  7.68615678e-02
  7.21038133e-02 -6.70988262e-02 -2.82063391e-02 -2.66079474e-02
  1.52107538e-03  6.67739883e-02 -6.00777976e-02 -9.40969884e-02
  1.25481054e-01 -5.06305397e-02 -4.98962849e-02  2.19432078e-02
  3.71297002e-02 -3.94357294e-02 -1.09030614e-02 -1.89850274e-02
 -4.19788575e-03  1.53934136e-02  1.67331379e-02 -6.08646423e-02
 -1.30578056e-02 -2.55227741e-02 -1.43795032e-02  3.63588296e-02
  1.13144852e-02 -1.11257993e-01 -1.02216460e-01 -1.98579082e-32
  5.94345927e-02 -6.05407804e-02 -7.79281408e-02 -3.69478166e-02
 -3.16921994e-02 -2.91629378e-02 -9.41293873e-03 -2.11383514e-02
 -3.14949304e-02 -3.48555669e-02 -1.85894836e-02 -4.44652252e-02
  3.16184834e-02  2.70105852e-03  4.43652868e-02  5.64725064e-02
  3.91832925e-02 -1.47238802e-02 -5.03284223e-02  3.67699675e-02
 -8.98464173e-02  4.52578329e-02  1.88654903e-02  1.01441164e-02
 -3.30867693e-02 -1.76840853e-02 -2.41772514e-02  3.96617278e-02
 -4.63696606e-02  2.74523254e-02  6.41736165e-02  3.97203267e-02
 -1.14260092e-01  7.54128024e-02 -6.16127858e-03 -9.07297730e-02
  6.75381720e-02  3.66175771e-02 -5.27152009e-02  1.30858049e-01
  9.49219167e-02  3.01447436e-02  3.12594324e-03 -6.77820072e-02
 -6.21639658e-03 -4.16678563e-02  3.84355858e-02  7.47182872e-03
 -1.07892146e-02  5.41286450e-03  1.67301267e-01 -3.27890553e-02
  1.99286565e-02 -3.16504426e-02  6.31164014e-02  9.67347436e-03
  2.16334146e-02 -8.66457522e-02 -6.94525763e-02 -9.07104537e-02
  5.78450486e-02 -5.35308458e-02 -2.92383954e-02  1.82797816e-02
  8.30363780e-02 -1.21344039e-02 -1.97248577e-04  1.62944384e-02
 -4.48287325e-03 -7.07061663e-02  2.45672446e-02 -4.44251709e-02
  2.98697446e-02  4.41086814e-02  1.76426116e-02 -8.51250719e-03
 -4.30196784e-02  4.99096327e-02  2.40154006e-03 -3.95095274e-02
 -6.68352991e-02  1.64346071e-03  3.70995626e-02  2.39100214e-02
  2.73003313e-03 -2.39596721e-02 -3.54239382e-02  8.81556980e-03
 -4.99199936e-03 -2.50713415e-02 -2.15475764e-02 -2.23986041e-02
  1.69020034e-02  1.20359622e-01  3.05259041e-02 -7.12062089e-08
 -7.75228217e-02 -1.02254257e-01 -1.28263503e-03  5.84395640e-02
  3.32234465e-02  4.29814830e-02  8.30546953e-03 -6.79608807e-02
 -1.88081544e-02 -1.89402569e-02  3.64526473e-02  6.82347640e-02
 -4.24131081e-02 -2.99834460e-02  3.32592055e-02  2.36034617e-02
  4.03941050e-02  4.19185869e-02 -1.05611142e-02  4.29768208e-03
  9.98589993e-02 -2.19470193e-03 -3.45939696e-02  7.13961720e-02
  3.38914283e-02  3.13730724e-02 -4.23393697e-02  1.14344835e-01
  6.09169975e-02 -3.57165709e-02  7.28643686e-02 -3.06939539e-02
  7.43833035e-02 -1.06563605e-02  7.93811902e-02  1.87554024e-02
  1.35862408e-02  6.61540031e-02 -9.36854482e-02  7.05936179e-02
  3.28744613e-02  1.37136048e-02 -8.69504828e-03  1.69141721e-02
 -1.48171335e-02  1.57987699e-02  6.98558893e-03  2.89500877e-02
  1.01882577e-01 -1.95120089e-02 -2.93155443e-02 -3.63921002e-02
  8.81787464e-02  8.78250524e-02  1.14760390e-02 -5.33631910e-03
  3.30917090e-02  4.82901707e-02  3.97344604e-02  3.81322913e-02
  6.59054443e-02  4.26228903e-02 -9.56382826e-02  3.28376889e-02]"
"  );

        if map_pda != *map_account.key || !map_account.is_writable || !map_account.data_is_empty() {
            return Err(BlogError::InvalidMapAccount.into())
        }

        let rent = Rent::get()?;
        let rent_lamports = rent.minimum_balance(MapAccount::LEN);

        let create_map_ix = &system_instruction::create_account(
            authority_account.key, 
            map_account.key, 
            rent_lamports, 
            MapAccount::LEN.try_into().unwrap(), 
            program_id
        );

        msg!(""Creating MapAccount account"");
        invoke_signed(
            create_map_ix, 
            &[
                authority_account.clone(),
                map_account.clone(),
                system_program.clone()
            ],
            &[&[
                b""map"".as_ref(),
                &[map_bump]
            ]]
        )?;

        msg!(""Deserializing MapAccount account"");
        let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow()).unwrap();
        let empty_map: BTreeMap<Pubkey, Pubkey> = BTreeMap::new();

        map_state.is_initialized = 1;
        map_state.map = empty_map;

        msg!(""Serializing MapAccount account"");
        map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;

        Ok(())
    }

    fn process_insert_entry(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {
        
        let account_info_iter = &mut accounts.iter();

        let a_account = next_account_info(account_info_iter)?;
        let b_account = next_account_info(account_info_iter)?;
        let map_account = next_account_info(account_info_iter)?;

        if !a_account.is_signer {
            return Err(ProgramError::MissingRequiredSignature)
        }

        if map_account.data.borrow()[0] == 0 || *map_account.owner != *program_id {
  ","[ 1.71487108e-02  2.41674501e-02 -3.00770849e-02 -1.70257948e-02
 -5.25794886e-02 -4.36967425e-02 -8.71310662e-03  4.29143831e-02
 -4.93390821e-02  4.29115444e-02  1.26124308e-01 -1.02053449e-01
  2.53278669e-02 -3.95968035e-02  2.44550519e-02  8.36453438e-02
 -5.48240542e-02  6.24041120e-03  3.81409563e-02  1.54148275e-02
  8.31766129e-02 -1.05685303e-02 -1.57707615e-03  1.30957887e-02
  2.74998788e-02  5.32246334e-03 -3.24099064e-02  5.47855021e-03
  1.59806362e-03 -3.98034342e-02  3.61601450e-02  3.25681339e-03
 -1.49116628e-02  1.01913391e-02  1.68297872e-01  1.35674819e-01
  9.36916750e-03 -1.02439784e-01  3.06269922e-03 -5.06218709e-02
 -4.43103947e-02  4.56820987e-02 -3.85100134e-02  2.77737696e-02
 -5.38726635e-02  4.42603230e-02  4.93321195e-03  2.68927645e-02
 -3.20504094e-03  2.54971273e-02 -1.03100669e-02  5.68872280e-02
 -7.38951340e-02 -1.57803055e-02  5.46309166e-03  2.85373442e-02
  2.17227004e-02 -5.14293872e-02  4.58177440e-02 -3.21940556e-02
 -1.11098355e-02  3.65784168e-02  7.26864561e-02 -5.00458330e-02
  1.23635167e-02  1.97612271e-02 -4.89211008e-02 -6.56956201e-03
 -1.42888753e-02 -8.91351700e-03  4.02146690e-02 -3.27096805e-02
 -4.77754213e-02 -2.35681119e-03 -3.12821977e-02  2.41668988e-02
 -7.07766190e-02  3.53057310e-02  1.68897808e-02 -7.24180713e-02
 -6.86073676e-02 -1.41525827e-02  1.59441512e-02  5.34555539e-02
 -2.12370083e-02 -3.04145366e-03 -2.01912187e-02 -8.07093084e-02
  8.13601986e-02  6.53134510e-02  4.18345295e-02 -3.88018717e-03
  2.81364620e-02  6.36360869e-02  8.15669596e-02  3.87798151e-04
 -1.23495143e-02 -1.99326798e-02 -3.87507677e-02  5.23920879e-02
 -4.19800878e-02  1.06184767e-03  4.01797285e-03 -6.41094223e-02
 -2.37854291e-02 -5.60674705e-02  6.82275072e-02 -1.41032353e-01
 -1.25295371e-01  3.75334248e-02  2.04202719e-02  2.79824212e-02
 -1.43250683e-03  3.96709852e-02 -7.61961192e-03  4.30797518e-04
 -5.09079732e-02  2.16353070e-02 -7.92325102e-03  9.25092995e-02
  9.19177756e-02 -1.20287044e-02 -2.77802255e-02 -5.53306304e-02
 -8.38120207e-02 -1.19887311e-02  2.07534637e-02  1.60685578e-33
  2.48644296e-02 -4.55151163e-02 -3.87524776e-02  1.18204720e-01
  2.45616771e-02  4.22793766e-03  1.09489560e-02  5.62027059e-02
 -1.63322479e-01  3.91645506e-02  4.27352488e-02  1.33727060e-03
 -4.92869616e-02  2.93201171e-02 -2.52812654e-02  5.97769581e-03
  1.05247751e-01 -1.63146555e-02  3.43838967e-02 -2.60575991e-02
  3.17877494e-02  1.96631663e-02 -3.60623794e-03 -8.97506848e-02
  2.37380341e-02  3.01049389e-02 -1.21201620e-01  3.26548703e-02
  1.29487161e-02  1.44103542e-02  1.38373468e-02 -2.61845738e-02
 -7.87690654e-03 -1.04026671e-03  8.58250707e-02 -3.36646959e-02
 -2.54966808e-03  2.40411852e-02 -1.31501526e-01 -1.46098454e-02
  3.54969837e-02 -4.06866074e-02 -1.51851242e-02 -4.29048277e-02
  1.10486299e-02 -3.49244811e-02  5.75267375e-02  2.65991911e-02
  4.59508784e-02  8.69518891e-02  3.12937722e-02 -8.99441354e-03
 -1.52910575e-01  1.06318099e-02 -5.63015454e-02 -7.41635039e-02
 -5.60781546e-02 -5.69389462e-02  2.03323867e-02 -2.07674187e-02
 -5.53663820e-02  3.99398059e-02  1.60085410e-02  1.48238381e-03
  3.05974297e-02 -2.97852028e-02 -3.10951304e-02  1.33935492e-02
  1.10695967e-02 -6.89684153e-02  1.47917364e-02 -3.78454924e-02
 -6.47751391e-02  7.02070594e-02 -7.44113773e-02 -1.18761837e-01
 -5.04998863e-03 -1.61574632e-02 -1.02746457e-01 -2.65789405e-02
 -2.19538119e-02 -3.18022892e-02 -6.09457158e-02  4.58158553e-02
 -5.19672334e-02  3.07402574e-02  6.53265836e-03  4.16137464e-02
 -1.30760772e-02  5.02642393e-02 -8.61460809e-03 -5.06477393e-02
 -3.41484882e-02 -5.81603944e-02 -3.75007652e-02 -4.00026752e-33
 -4.38100984e-03 -1.04497917e-01  1.62348263e-02 -5.04390225e-02
 -1.45834954e-02 -3.81350592e-02  1.09847330e-01 -1.39685217e-02
 -2.80300714e-02  5.18021137e-02 -1.17714494e-01 -1.97199527e-02
  2.81480402e-02  3.84540707e-02  5.66623807e-02  2.47923229e-02
 -6.61446154e-02 -3.64817195e-02  2.87440270e-02  7.72967562e-02
  2.17776839e-02  1.00603074e-01  3.21899354e-02  1.05816193e-01
 -3.81255103e-03  5.10394238e-02 -4.64299619e-02  4.97766547e-02
  2.05363724e-02  4.17923322e-03  2.95792576e-02 -1.27226096e-02
 -5.67094423e-02  5.25526218e-02 -1.00130374e-02 -9.52909961e-02
  8.21585283e-02  9.16117653e-02 -1.04895763e-01  5.22606969e-02
  5.91670088e-02 -2.28633787e-02 -5.87919056e-02 -7.05810860e-02
  3.55750136e-02  4.89077754e-02  1.27288744e-01 -9.14922042e-04
 -1.33392997e-02  5.24974130e-02  4.74542305e-02 -7.47997314e-02
  1.30874626e-02  3.28442035e-03  1.96874384e-02  2.09613610e-02
  1.08445644e-01  8.64092784e-04  8.63407180e-02 -5.88737279e-02
  3.65773924e-02 -9.43336263e-02  3.24393138e-02  6.10912889e-02
  4.50465977e-02 -5.32758795e-02 -3.43922675e-02 -2.16684137e-02
  1.39506245e-02  2.59236619e-02 -3.91580127e-02  1.73191186e-02
 -1.07124960e-02 -7.34288171e-02  9.87013429e-03  3.92613560e-02
 -4.80272248e-03 -1.04517173e-02  5.68377152e-02 -4.22170386e-02
 -6.85500056e-02  3.31006870e-02  4.90872702e-03  5.78374676e-02
  1.17963133e-02  3.49410635e-04  9.35361311e-02 -5.18851429e-02
 -5.94158024e-02  4.69698124e-02 -5.94219146e-03 -9.59893782e-03
 -6.94886222e-02  1.49996197e-02 -3.11436597e-02 -5.02948652e-08
 -6.35685101e-02 -2.43323259e-02 -1.41757093e-02  4.72632982e-02
  7.78994802e-03 -1.31634668e-01  8.16268921e-02 -7.34434579e-05
 -4.20258660e-03 -1.06599573e-02  2.01212633e-02  6.20431006e-02
 -2.35921815e-02 -2.84735486e-02 -9.89057869e-03 -5.12971617e-02
 -1.23495404e-02 -1.14871105e-02 -1.92098357e-02 -7.66401831e-03
 -5.22317886e-02 -1.52717438e-02 -1.09069590e-02 -4.71804943e-03
  2.70167906e-02  2.16774340e-03  5.01372963e-02  3.84367369e-02
  5.22240587e-02 -2.40303054e-02  8.80615041e-02 -5.10198437e-03
  5.42827733e-02 -2.93767033e-03 -8.31898525e-02 -2.76602078e-02
  7.03804046e-02 -1.34024145e-02  1.28646744e-02  3.50575969e-02
 -6.44875970e-03  1.10986315e-01  2.07800549e-02 -3.46918888e-02
 -3.61571722e-02  8.17046128e-03 -1.65410470e-02  3.54024060e-02
  8.46351534e-02  1.94991529e-02 -8.85522962e-02  9.19765094e-04
 -2.13213842e-02  7.58387893e-02 -3.75563167e-02 -6.07802980e-02
  3.98343578e-02  1.52742974e-02 -7.18264058e-02  2.72540841e-02
  6.70989677e-02  1.67369638e-02 -3.82342339e-02 -1.08291328e-01]"
"         return Err(BlogError::InvalidMapAccount.into())
        }

        msg!(""Deserializing MapAccount account"");
        let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow())?;

        if map_state.map.contains_key(a_account.key) {
            return Err(BlogError::AccountAlreadyHasEntry.into())
        }

        map_state.map.insert(*a_account.key, *b_account.key);
        
        msg!(""Serializing MapAccount account"");
        map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;

        Ok(())
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug)]
pub struct MapAccount {
    pub is_initialized: u8,
    pub map: BTreeMap<Pubkey, Pubkey> // 100
}

impl MapAccount {
    const LEN: usize = 1 + (4 + (10 * 64)); // 10 user -> blog
}

#[derive(Error, Debug, Copy, Clone)]
pub enum BlogError {
    #[error(""Invalid MapAccount account"")]
    InvalidMapAccount,

    #[error(""Invalid Blog account"")]
    InvalidBlogAccount,

    #[error(""Account already has entry in Map"")]
    AccountAlreadyHasEntry,
}

impl From<BlogError> for ProgramError {
    fn from(e: BlogError) -> Self {
        return ProgramError::Custom(e as u32);
    }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160fn process_init_map(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();

    let authority_account = next_account_info(account_info_iter)?;
    let map_account = next_account_info(account_info_iter)?;
    let system_program = next_account_info(account_info_iter)?;

    if !authority_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature)
    }

    let (map_pda, map_bump) = Pubkey::find_program_address(
        &[b""map"".as_ref()],
        program_id
    );

    if map_pda != *map_account.key || !map_account.is_writable || !map_account.data_is_empty() {
        return Err(BlogError::InvalidMapAccount.into())
    }

    let rent = Rent::get()?;
    let rent_lamports = rent.minimum_balance(MapAccount::LEN);

    let create_map_ix = &system_instruction::create_account(
        authority_account.key, 
        map_account.key, 
        rent_lamports, 
        MapAccount::LEN.try_into().unwrap(), 
        program_id
    );

    msg!(""Creating MapAccount account"");
    invoke_signed(
        create_map_ix, 
        &[
            authority_account.clone(),
            map_account.clone(),
            system_program.clone()
        ],
        &[&[
            b""map"".as_ref(),
            &[map_bump]
  ","[-1.24069387e-02  2.82626338e-02  2.80685723e-02 -5.34183942e-02
 -4.12268154e-02 -3.95600498e-02  2.37122606e-02  2.27406621e-02
 -6.35724217e-02  8.23702011e-03  7.21920580e-02 -1.08091816e-01
  1.63534656e-02 -3.84279266e-02  5.81605658e-02  4.94702868e-02
 -7.23587722e-02  2.32230332e-02  4.13879054e-03  3.49256620e-02
  6.31336495e-02  3.01817637e-02 -1.00387363e-02  6.74206614e-02
  2.65658386e-02  1.94485374e-02  2.55752425e-03 -2.52755359e-02
 -2.20612455e-02 -2.62121949e-02  3.54421278e-03  5.69352275e-03
 -2.48895381e-02  1.85923446e-02  1.03797987e-01  6.75837994e-02
 -2.74070742e-04 -5.57563677e-02  3.18615548e-02 -4.97903638e-02
 -1.59432460e-02  4.44730334e-02 -5.92593551e-02  3.41643579e-02
  1.34736951e-03  6.84896298e-03  4.00927328e-02  4.11254168e-02
 -3.76938209e-02  6.80700094e-02 -4.39377539e-02  1.04560181e-01
 -3.79814766e-02  1.47327380e-02  3.55435275e-02  4.57360297e-02
 -3.68381739e-02 -5.00680059e-02  3.43577117e-02 -2.39608120e-02
 -6.98207617e-02 -2.05074828e-02  5.08881062e-02 -7.35071748e-02
  2.85812411e-02  3.56598385e-02 -3.28463018e-02  1.00807901e-02
  3.06806322e-02  1.91407744e-02  8.30080956e-02 -8.21654499e-02
 -4.55189571e-02  2.40993034e-02 -9.06237960e-03  4.98480760e-02
 -3.33211049e-02 -5.20473570e-02 -3.53990197e-02 -2.88906135e-02
 -6.90730065e-02 -6.86034560e-02  7.71960570e-03  2.61633154e-02
 -1.09507674e-02 -2.49811020e-02 -2.22573634e-02 -1.00321397e-01
  1.26212016e-02  5.06833941e-02  2.20365915e-02 -3.21943834e-02
  1.35849072e-02  1.70734245e-02  1.33385912e-01 -1.85814165e-02
 -3.37693654e-02  1.00421114e-02  5.60627729e-02  6.58291876e-02
 -3.41752544e-02  2.16702092e-02  4.04409170e-02 -2.23543551e-02
 -3.73251811e-02 -6.76507801e-02  6.24051206e-02 -1.13319218e-01
 -9.16995183e-02  1.17303319e-02  7.78764784e-02  6.05682284e-02
  6.17499575e-02  4.26966138e-02 -3.21198106e-02  8.14677030e-03
 -1.74065754e-02  1.38122933e-02  4.15195385e-03  3.19325402e-02
  8.59834850e-02 -1.48891173e-02  3.81493941e-02 -1.14914626e-02
 -9.89509299e-02 -5.25635667e-02 -1.61441211e-02  3.83156792e-33
  2.34891661e-02 -2.16833018e-02 -6.58431090e-03  5.99268079e-02
  8.18010885e-03 -2.94316141e-03  1.68205251e-03 -3.78873688e-03
 -1.50170520e-01 -2.58071348e-02 -2.74247602e-02  1.84229226e-03
 -2.66002640e-02  4.02369164e-02  2.16247253e-02  2.19992772e-02
  5.92843927e-02  4.74030618e-03  2.60870270e-02  2.83886530e-02
  6.00802451e-02  5.71447983e-03 -2.43302602e-02 -5.46546392e-02
 -1.65768173e-02  3.86208780e-02 -1.03051811e-01  1.24068884e-02
 -7.81383272e-03  2.43048612e-02  5.99975958e-02  8.58636666e-03
  7.53807230e-03  1.95663720e-02  1.05202280e-01 -4.12098132e-02
 -8.06799810e-03 -8.22657719e-03 -1.17791407e-01 -1.27654314e-01
  2.04205699e-02 -1.20931081e-02 -5.38837910e-02  1.30972806e-02
 -2.44059041e-02 -1.10460505e-01  4.32938337e-02  3.39405425e-03
  6.40129149e-02  7.09594637e-02  7.76375309e-02 -2.09212080e-02
 -1.14259288e-01 -1.87289547e-02 -4.01941240e-02 -3.10827978e-02
  5.48458891e-04  3.79244506e-04  5.51354215e-02  7.25575536e-02
 -1.65140796e-02 -2.03851480e-02  5.09677827e-03  2.14933269e-02
  5.08827157e-02 -6.82201516e-03 -2.71263700e-02  2.85576135e-02
 -3.25829946e-02 -8.57162178e-02  2.42999233e-02  3.89102474e-03
 -9.06460360e-02  2.61915009e-02 -5.77997826e-02 -5.10854237e-02
  1.19010210e-02 -1.86565686e-02 -7.26699382e-02 -8.01233202e-02
 -3.48598734e-02 -1.90133078e-03 -7.16612339e-02  4.78647053e-02
 -9.53699797e-02  1.01029471e-01 -1.38682937e-02 -7.18723703e-03
  4.13578898e-02  6.44415990e-02 -1.14197573e-02 -7.74310976e-02
 -6.47310689e-02 -5.89576289e-02 -5.95906936e-02 -4.88779477e-33
  5.55308070e-03 -1.09759480e-01  4.78664674e-02  1.56335335e-03
 -4.81181480e-02 -6.99093267e-02  1.30803436e-01 -2.45156027e-02
 -1.72023848e-02  1.21612260e-02 -6.08268715e-02  5.68932574e-03
  7.77940676e-02  1.39999241e-02  7.75999129e-02 -1.72911063e-02
 -1.08134151e-02 -3.94535549e-02 -3.17420997e-02  2.67036017e-02
  4.90614288e-02  6.32929578e-02  5.53277396e-02  3.92552316e-02
 -3.99145335e-02  9.09091160e-02 -6.43496364e-02  4.80370931e-02
  3.46234366e-02 -3.06141656e-02  1.34164011e-02  6.63109496e-02
  1.99449318e-03  9.86684300e-03  1.37744630e-02 -1.93796176e-02
  1.12253644e-01  6.32525831e-02 -5.67069128e-02  3.18159200e-02
 -4.28389721e-02  1.43461982e-02 -6.48974031e-02 -9.60914120e-02
  4.44688983e-02  1.60398111e-02  1.14367925e-01  7.72804096e-02
  3.34641933e-02  3.70535888e-02  9.90169868e-02 -3.45819518e-02
  6.69915322e-03 -1.23588508e-02 -6.15942525e-03 -1.52576547e-02
  4.00169641e-02 -7.74613842e-02  4.70598266e-02 -9.89103615e-02
 -3.05479690e-02 -1.04231246e-01  2.10703760e-02  8.54513347e-02
  7.43389949e-02 -3.58942039e-02 -3.07531878e-02 -3.21368501e-02
  6.08187877e-02 -2.12184563e-02 -3.75823155e-02  3.27421129e-02
 -1.78395361e-02 -2.03653127e-02  4.88586128e-02  2.55697663e-03
 -6.83122873e-02 -2.73680817e-02  6.30656406e-02 -1.94009170e-02
 -1.37015685e-01  3.50039639e-03  1.45496838e-02  6.96290210e-02
  3.60328853e-02 -4.53297570e-02  9.80465412e-02 -1.68928911e-03
 -6.23143874e-02 -1.60857160e-02 -1.74710043e-02 -3.63023058e-02
 -8.14568922e-02  4.14578468e-02 -9.37687233e-03 -5.07309359e-08
 -8.43371525e-02 -5.70019800e-03 -1.67671628e-02  9.38848257e-02
  3.54008041e-02 -5.04317731e-02  1.01603940e-02 -4.01909165e-02
  4.08593677e-02 -6.96079060e-02 -2.54285801e-02  6.22927547e-02
 -2.48219408e-02 -9.88586023e-02  3.02088819e-02 -7.93431625e-02
 -3.35313380e-02 -6.69480627e-03 -5.08765727e-02 -7.83656817e-03
  1.50856934e-02  1.71751454e-02 -2.71001831e-02  2.92901658e-02
 -4.80286451e-03  4.71389927e-02  5.95182851e-02  5.76198772e-02
  8.04522261e-02 -6.05264790e-02  8.05138573e-02 -3.93245509e-03
  4.95574400e-02  1.69581156e-02 -6.84746280e-02 -3.18700597e-02
  8.10784921e-02  3.01233884e-02 -1.97195653e-02  3.96166444e-02
  1.38790170e-02  2.85022091e-02 -4.90102395e-02  2.30051130e-02
 -6.99218661e-02  2.22014636e-02 -5.89497201e-02  1.06170617e-01
  6.36341050e-02  1.69079434e-02 -4.48328517e-02  2.85828346e-03
  4.50641289e-03  7.46992156e-02 -8.59533250e-02 -5.68604916e-02
  4.59718145e-02 -2.18684468e-02 -2.01852303e-02  3.21330130e-02
  1.19551025e-01 -2.15182975e-02 -2.61382591e-02 -5.98881803e-02]"
"     ]]
    )?;

    msg!(""Deserializing MapAccount account"");
    let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow()).unwrap();
    let empty_map: BTreeMap<Pubkey, Pubkey> = BTreeMap::new();

    map_state.is_initialized = 1;
    map_state.map = empty_map;

    msg!(""Serializing MapAccount account"");
    map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;

    Ok(())
}

fn process_insert_entry(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult {
    
    let account_info_iter = &mut accounts.iter();

    let a_account = next_account_info(account_info_iter)?;
    let b_account = next_account_info(account_info_iter)?;
    let map_account = next_account_info(account_info_iter)?;

    if !a_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature)
    }

    if map_account.data.borrow()[0] == 0 || *map_account.owner != *program_id {
        return Err(BlogError::InvalidMapAccount.into())
    }

    msg!(""Deserializing MapAccount account"");
    let mut map_state = try_from_slice_unchecked::<MapAccount>(&map_account.data.borrow())?;

    if map_state.map.contains_key(a_account.key) {
        return Err(BlogError::AccountAlreadyHasEntry.into())
    }

    map_state.map.insert(*a_account.key, *b_account.key);
    
    msg!(""Serializing MapAccount account"");
    map_state.serialize(&mut &mut map_account.data.borrow_mut()[..])?;

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788Về phía người dùng có thể kiểm tra Program trên bằng đoạn code mẫu bên dưới:TSPress </> button to view full sourceimport {
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";

import * as borsh from ""@project-serum/borsh"";

const MY_PROGRAM_ID = new PublicKey(
  ""FwcG3yKuAkCfX68q9GPykNWDaaPjdZFaR1Tgr8qSxaEa""
);

const MAP_DATA_LAYOUT = borsh.struct([
  borsh.u8(""is_initialized""),
  borsh.map(borsh.publicKey(""user_a""), borsh.publicKey(""user_b""), ""blogs""),
]);

async () => {
  const connection = new Connection(""http://localhost:8899"", ""confirmed"");

  const userA = Keypair.generate();
  const userB = Keypair.generate();
  const userC = Keypair.generate();

  const [mapKey] = await PublicKey.findProgramAddress(
    [Buffer.from(""map"")],
    MY_PROGRAM_ID
  );

  const airdropASig = await connection.requestAirdrop(
    userA.publicKey,
    5 * LAMPORTS_PER_SOL
  );
  const airdropBSig = await connection.requestAirdrop(
    userB.publicKey,
    5 * LAMPORTS_PER_SOL
  );
  const airdropCSig = await connection.requestAirdrop(
    userC.publicKey,
    5 * LAMPORTS_PER_SOL
  );
  const promiseA = connection.confirmTransaction(airdropASig);
  const promiseB = connection.confirmTransaction(airdropBSig);
  const promiseC = connection.confirmTransaction(airdropCSig);

  await Promise.all([promiseA, promiseB, promiseC]);

  const initMapIx = new TransactionInstruction({
    programId: MY_PROGRAM_ID,
    keys: [
      {
        pubkey: userA.publicKey,
        isSigner: true,
        isWritable: true,
      },
      {
        pubkey: mapKey,
        isSigner: false,
        isWritable: true,
      },
      {
        pubkey: SystemProgram.programId,
        isSigner: false,
        isWritable: false,
      },
   ","[ 1.61455162e-02  3.66050526e-02 -1.68524124e-03 -4.88507301e-02
 -8.94458443e-02  5.83894690e-03  2.94745602e-02  4.95390855e-02
 -8.25194791e-02  9.84470127e-04  5.89388870e-02 -1.12903684e-01
  6.70972792e-03 -4.45467941e-02  6.42541051e-02  5.60863800e-02
 -5.23297526e-02 -4.04877821e-03 -2.95843463e-02 -1.19827525e-03
  6.06566072e-02  2.65781470e-02 -1.16817215e-02  2.27979422e-02
 -9.21612419e-03 -1.20366048e-02  1.24658346e-02 -7.15987012e-03
 -1.24642868e-02 -2.15749089e-02  2.85097342e-02 -2.03184728e-02
 -5.02633117e-02  4.94883507e-02  1.01830699e-01  2.54761185e-02
  1.78611614e-02 -7.67925382e-02  1.62767004e-02 -4.80326638e-02
 -2.36491393e-03  3.16450633e-02 -8.47089291e-02  3.23172323e-02
  2.02850103e-02 -1.34888226e-02 -1.97058730e-02  4.30388004e-02
 -3.89806964e-02  4.83703949e-02 -6.87168986e-02  6.21235110e-02
 -2.57831272e-02  4.03619036e-02 -1.44145433e-02  6.07680529e-02
  1.26254428e-02 -9.61174369e-02  1.87909305e-02  3.83125134e-02
 -3.74845900e-02 -1.16953161e-02  2.76246164e-02 -2.85498071e-02
 -1.12392986e-02  4.74845134e-02 -4.96653356e-02  2.44229157e-02
  5.90179674e-02 -2.78993207e-03  6.58691153e-02 -6.37507662e-02
 -6.28224686e-02  1.24568341e-03  7.43487244e-03 -3.63031439e-02
 -7.39045963e-02 -2.56211534e-02 -8.10627937e-02 -2.44027115e-02
 -3.33378688e-02 -1.73598789e-02  1.42637976e-02  3.01020555e-02
 -2.63757855e-02  8.32801288e-06 -5.14972806e-02 -6.16412647e-02
  2.30354187e-03  1.83645356e-02 -2.15181205e-02  6.26868336e-03
 -2.93366350e-02  3.19958292e-02  9.03704464e-02 -1.47329265e-04
 -1.87042467e-02 -1.80168375e-02  4.35084570e-03  4.97608706e-02
 -2.62579191e-02  5.77368774e-03  5.31313941e-03 -9.00429487e-03
 -3.51244435e-02 -7.43858218e-02  7.42867813e-02 -8.63219500e-02
 -9.91720483e-02  9.61631164e-03  3.64845395e-02  9.07078162e-02
  2.02321801e-02  6.80345818e-02 -7.90716633e-02  2.79100612e-02
 -6.20404966e-02  4.68488410e-02  6.29179738e-03  7.68605322e-02
  7.25509375e-02 -3.06203328e-02 -2.90815588e-02  7.20410747e-03
 -1.08057335e-01 -7.57592469e-02 -2.82693305e-03  3.84810308e-33
  1.33096687e-02 -6.69976249e-02 -1.09667154e-02  7.07944185e-02
  1.06415180e-02 -3.38019477e-03 -2.20302381e-02 -5.15643833e-03
 -1.14808224e-01 -6.97380770e-03 -1.68896690e-02 -5.85712604e-02
 -4.60570715e-02  3.60910520e-02 -2.05875859e-02 -4.68246117e-02
  6.11410215e-02  4.14789990e-02  2.48740856e-02  2.51513254e-02
  8.08979571e-02  7.51115382e-02 -3.00154611e-02 -9.01821777e-02
  3.60562690e-02  8.64174813e-02 -1.16688415e-01  1.62537191e-02
  7.08010048e-03  3.01569421e-02  7.79151618e-02  1.79636404e-02
  9.70631838e-03 -1.34546298e-03  1.08161375e-01 -2.40800679e-02
 -2.11802814e-02  1.78236968e-03 -9.74505246e-02 -7.73620456e-02
  6.62081167e-02 -1.37523012e-02 -3.68333869e-02 -9.38464422e-03
 -4.90430929e-02 -9.76378098e-02  2.80230343e-02 -9.28935129e-03
  2.63737161e-02  3.86056490e-02  8.61346796e-02  1.29654333e-02
 -1.40274838e-01 -1.62410922e-02 -3.75493355e-02 -6.04336299e-02
 -1.94724500e-02 -4.24745902e-02 -6.59192726e-03  3.28080505e-02
 -5.18572666e-02  2.06123036e-03 -1.26409885e-02  2.05800273e-02
  3.67774963e-02 -1.79488752e-02  2.14155414e-04 -5.77148283e-03
 -2.07823096e-03 -9.41561162e-02 -3.45541425e-02  3.40877585e-02
 -6.46492243e-02  2.93927807e-02 -4.85233776e-02 -2.27574576e-02
  8.11375957e-03 -1.23042390e-02 -9.57277864e-02 -4.35497724e-02
  1.32990545e-02 -1.95082184e-02 -1.12671979e-01  3.80947515e-02
 -3.54229324e-02  7.72530809e-02 -1.73085686e-02 -1.10276300e-03
  3.57024148e-02  5.97770587e-02  1.44012328e-02 -5.14276437e-02
 -6.11860752e-02 -4.47267555e-02 -1.34308012e-02 -6.78676880e-33
  1.47699919e-02 -1.19180568e-01  1.66195221e-02 -1.64556634e-02
 -2.35075485e-02 -5.74546643e-02  1.61305547e-01  1.96556351e-03
 -3.71711031e-02  6.53663576e-02 -7.40791783e-02  1.72588241e-03
  3.69027704e-02  1.69336218e-02  6.09068274e-02 -1.48586207e-03
  1.99861042e-02  1.73317303e-03 -1.02031473e-02  1.52605185e-02
  2.83610933e-02  7.56136850e-02  7.44750574e-02  1.43871941e-02
 -8.59199930e-03  5.53577282e-02 -2.20619161e-02  8.85389969e-02
  3.33817373e-03 -5.45132682e-02  3.39910239e-02  1.34851327e-02
  2.36361530e-02  1.50784524e-02  2.37849019e-02 -5.26557080e-02
  8.22026655e-02  7.11041093e-02 -3.69883478e-02  5.89075759e-02
  2.54399832e-02  2.04792805e-03 -6.36195391e-02 -5.43477423e-02
  2.04588454e-02  1.37463743e-02  7.27710649e-02  3.75275984e-02
  1.17372079e-02  5.71288392e-02  4.54702638e-02 -1.42338006e-02
 -5.70284063e-03 -2.88095940e-02  2.72549000e-02 -2.24849656e-02
  9.52375084e-02 -1.00208916e-01  7.31999874e-02 -1.03000276e-01
 -1.83445346e-02 -1.00644059e-01  2.89752260e-02  5.81049137e-02
  1.18316628e-01 -6.03048317e-02 -3.78283225e-02 -6.00285530e-02
  4.25033867e-02 -1.68234613e-02 -2.10087113e-02  3.01988907e-02
 -1.95374712e-04 -4.09340784e-02  4.06018496e-02 -3.07914633e-02
 -5.40878586e-02 -4.13410403e-02  5.32809963e-06  3.74940154e-03
 -9.87661779e-02  2.00949796e-02  3.56511236e-03  7.85745829e-02
  4.54274341e-02 -2.22091097e-02  1.10580444e-01 -1.59466192e-02
 -5.48296943e-02 -2.10571121e-02 -1.43840825e-02 -9.57736932e-03
 -6.63515255e-02  2.65772007e-02 -5.99367842e-02 -5.71744359e-08
 -7.96415135e-02 -1.94312260e-02 -1.24256564e-02  1.29624367e-01
  2.46686656e-02 -5.22476807e-02 -7.06944335e-03 -1.98799185e-02
  6.54800655e-03 -1.05904505e-01 -5.10287061e-02  9.06853154e-02
 -2.96410620e-02 -5.90605661e-02  2.74325423e-02 -8.96903574e-02
  1.67161729e-02 -8.40216354e-02 -1.27712917e-02  1.85045227e-02
 -2.07880028e-02  2.18170024e-02 -2.60731373e-02  5.47219999e-02
 -3.92496921e-02  8.10818523e-02  8.19621235e-02  7.18701631e-02
  1.06756188e-01 -3.68471704e-02  7.84397349e-02  7.26234401e-03
  4.18693982e-02  7.67094940e-02 -1.28593251e-01 -2.20093671e-02
  4.64488342e-02  3.69273387e-02 -1.28804659e-02 -1.35666393e-02
  7.79578164e-02  4.76836376e-02 -2.64943615e-02  2.67065577e-02
 -3.52200717e-02  7.79782236e-03 -1.28657278e-02  4.45226990e-02
  1.16914734e-01  2.57596727e-02 -1.04275092e-01 -2.84045581e-02
  2.09222063e-02  8.65100548e-02 -5.11448979e-02 -6.19341321e-02
  3.24557461e-02 -3.75443883e-02 -1.04091885e-02  7.79504776e-02
  6.12717532e-02 -3.09109502e-02 -5.06164879e-02 -3.09198238e-02]"
"],
    data: Buffer.from(Uint8Array.of(0)),
  });

  const insertABIx = new TransactionInstruction({
    programId: MY_PROGRAM_ID,
    keys: [
      {
        pubkey: userA.publicKey,
        isSigner: true,
        isWritable: true,
      },
      {
        pubkey: userB.publicKey,
        isSigner: false,
        isWritable: false,
      },
      {
        pubkey: mapKey,
        isSigner: false,
        isWritable: true,
      },
    ],
    data: Buffer.from(Uint8Array.of(1)),
  });

  const insertBCIx = new TransactionInstruction({
    programId: MY_PROGRAM_ID,
    keys: [
      {
        pubkey: userB.publicKey,
        isSigner: true,
        isWritable: true,
      },
      {
        pubkey: userC.publicKey,
        isSigner: false,
        isWritable: false,
      },
      {
        pubkey: mapKey,
        isSigner: false,
        isWritable: true,
      },
    ],
    data: Buffer.from(Uint8Array.of(1)),
  });

  const insertCAIx = new TransactionInstruction({
    programId: MY_PROGRAM_ID,
    keys: [
      {
        pubkey: userC.publicKey,
        isSigner: true,
        isWritable: true,
      },
      {
        pubkey: userA.publicKey,
        isSigner: false,
        isWritable: false,
      },
      {
        pubkey: mapKey,
        isSigner: false,
        isWritable: true,
      },
    ],
    data: Buffer.from(Uint8Array.of(1)),
  });

  const tx = new Transaction();
  tx.add(initMapIx);
  tx.add(insertABIx);
  tx.add(insertBCIx);
  tx.add(insertCAIx);

  const sig = await connection.sendTransaction(tx, [userA, userB, userC], {
    skipPreflight: false,
    preflightCommitment: ""confirmed"",
  });
  await connection.confirmTransaction(sig);

  const mapAccount = await connection.getAccountInfo(mapKey);
  const mapData = MAP_DATA_LAYOUT.decode(mapAccount.data);
  console.log(""MapData: "", mapData);
};
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155const insertABIx = new TransactionInstruction({
  programId: MY_PROGRAM_ID,
  keys: [
    {
    ","[ 3.42676677e-02  4.42275740e-02 -7.54767135e-02  2.50868429e-03
 -1.48901135e-01 -1.72797013e-02  9.81002674e-02  2.70109754e-02
  1.82854943e-03 -6.24084799e-03 -9.01893526e-03  5.19188074e-03
 -1.27419103e-02 -3.39237414e-02  1.30541073e-02 -3.67431268e-02
 -2.20828578e-02 -1.62307248e-02 -3.03533860e-02  1.14462767e-02
  4.90598753e-03 -3.97825204e-02  2.95091304e-03 -1.98802501e-02
  4.53505479e-03  1.77948456e-02  2.17151903e-02 -3.38770077e-02
 -8.22269265e-03  2.16201623e-03  3.16541865e-02 -2.29049716e-02
 -6.22558258e-02  2.81473827e-02 -8.62162467e-03  5.27129434e-02
  1.39865242e-02 -4.99134697e-02  2.12691873e-02 -5.16401641e-02
  2.79434118e-02  8.01515803e-02 -1.07069910e-01  7.76149035e-02
  4.58263867e-02 -3.20594124e-02 -7.81004801e-02 -7.13739404e-03
  9.67128947e-03  4.23795767e-02 -9.91846323e-02  6.86136112e-02
 -1.98244806e-02  1.03367776e-01  3.01162321e-02  4.24774624e-02
  2.82417447e-03 -3.18309069e-02  4.49919812e-02  3.28395180e-02
  4.82144952e-02  1.19041663e-03  9.41279009e-02 -1.24872997e-02
  3.96229327e-03  4.03628796e-02  5.43970354e-02  4.40537930e-02
  3.43049690e-02  1.60800368e-02  1.57363638e-02  1.53003996e-02
 -1.20657086e-01  1.00220996e-03 -4.26378027e-02 -7.81578347e-02
 -2.78378651e-02  4.05003577e-02 -1.04274511e-01  2.30112957e-04
 -2.75639780e-02 -7.52190873e-02  6.19457327e-02 -1.88758858e-02
 -8.98993667e-03  6.84118941e-02 -2.44165827e-02 -8.12139139e-02
 -5.28445914e-02  2.46690270e-02 -1.54183414e-02  6.80338815e-02
  1.50381373e-02 -4.05864753e-02  1.30752489e-01 -6.32453710e-03
  3.35005820e-02 -2.60764509e-02  2.66733449e-02  2.35996321e-02
 -1.75453059e-03 -5.72187593e-04 -5.30881137e-02  3.28419171e-02
  3.27036381e-02 -1.59066487e-02  5.46207465e-02 -7.36908168e-02
 -1.81662425e-01  4.02087793e-02  2.17789765e-02  1.31770626e-01
  4.86218929e-02  4.26598862e-02 -5.93678281e-02  5.49644083e-02
 -9.50071737e-02  4.22051623e-02  1.43077224e-02  3.30440775e-02
  3.54338102e-02 -8.48735962e-03 -2.13375241e-02  7.04742819e-02
 -8.78254846e-02 -6.53527305e-02 -4.36860044e-03  3.02451390e-33
 -8.64633825e-03 -6.89914525e-02 -4.79027592e-02  1.63930859e-02
 -1.04204174e-02  9.97885689e-03  7.79037457e-03 -1.84357949e-02
 -6.60948977e-02 -4.16110083e-02 -5.50221503e-02 -3.55865695e-02
 -2.74560191e-02  1.90136898e-02  1.49456309e-02  1.23143988e-02
 -3.95485908e-02  5.51937856e-02  5.73899932e-02  2.67425994e-03
  2.74760723e-02  2.10346710e-02 -2.79361587e-02 -3.93384658e-02
 -1.54318903e-02 -1.21793812e-02 -1.11717083e-01 -2.33991574e-02
 -3.49169075e-02 -5.25663933e-03  2.25985236e-02  3.66626009e-02
 -4.59915958e-03  4.18548249e-02  7.78512955e-02 -2.10337285e-02
  5.48233453e-04 -2.70711649e-02 -4.72353660e-02 -6.57764375e-02
  4.02946770e-02 -1.31736288e-03 -1.36923287e-02  9.01367050e-03
 -8.10552239e-02 -3.22238766e-02 -3.19147445e-02 -1.72517579e-02
  3.62504795e-02 -3.29530127e-02 -2.45624762e-02  6.81451410e-02
 -4.35839109e-02 -5.84762879e-02 -8.60121995e-02 -6.54433519e-02
  2.00450197e-02 -5.78479748e-03  9.32489708e-03  8.63341093e-02
 -8.91131014e-02  5.29427901e-02 -1.57882292e-02  3.22321691e-02
 -2.70508789e-02  1.95467342e-02 -3.38605084e-02 -1.04019698e-02
  2.80742571e-02 -6.79680556e-02 -4.22072709e-02  1.52936764e-02
 -3.35232578e-02  2.84935925e-02 -3.48811224e-02 -4.37645540e-02
 -6.39295578e-02 -9.74632148e-03 -3.18871401e-02 -1.18255943e-01
  2.74045989e-02 -4.27697115e-02 -5.74791729e-02  4.00041379e-02
 -2.87138075e-02  5.01162373e-02 -5.11972159e-02 -2.94197653e-03
  2.43705604e-02  4.67075706e-02 -3.79817514e-03 -1.59151927e-02
  5.05405851e-02 -5.88943288e-02  3.32690179e-02 -6.61599812e-33
  5.44555448e-02 -3.13212089e-02  1.01502724e-02  1.73321888e-02
 -4.21245061e-02  2.71553732e-02  6.02652393e-02 -6.06389064e-03
 -2.58348733e-02 -1.35138538e-02 -1.87969506e-02  4.11468670e-02
  6.57633245e-02  6.29149470e-03 -3.38941738e-02 -4.29626107e-02
 -3.52972448e-02 -2.28004996e-02  1.37581239e-02 -1.12472311e-01
  4.91436012e-02 -1.20878601e-02  5.49878180e-02  1.01716220e-01
 -4.66708988e-02 -7.83563498e-03 -3.96005623e-02  6.05420023e-02
 -2.79326662e-02 -6.97690398e-02  2.10525524e-02  4.33569448e-03
 -2.26736665e-02  6.93515455e-03  5.24909273e-02 -7.65932724e-02
  6.55099750e-02  9.24601257e-02 -3.48639786e-02  4.37551364e-02
  5.47551587e-02 -1.36660002e-02 -7.11229444e-02  1.94295086e-02
  3.58148515e-02  1.79510377e-02 -4.67917463e-03  3.88984345e-02
  3.12115867e-02  4.55274172e-02  3.20572220e-02 -1.22178327e-02
  1.64084956e-02 -3.61284390e-02  3.14428285e-02  1.97357722e-02
  1.39378682e-01 -1.23981886e-01  9.68411192e-02  4.47626552e-03
 -4.17997967e-03 -5.92375547e-02  1.22207351e-01  1.85657907e-02
  8.33687484e-02 -9.71718058e-02 -3.34413275e-02 -2.68046111e-02
 -1.20668244e-02  1.22002382e-02  1.92761701e-02  9.86791123e-03
  2.71815853e-03 -2.79571256e-03  1.01890780e-01 -2.44655497e-02
 -1.93479806e-02 -8.41469765e-02  3.71878892e-02  2.97377426e-02
 -2.95687653e-02  4.76304963e-02  5.39510064e-02  6.29513785e-02
 -1.36109451e-02 -2.45957635e-02  4.88988161e-02  6.18845690e-03
 -4.37593572e-02 -1.02313161e-02 -4.46964279e-02  2.37650541e-03
 -1.18092105e-01 -1.38269171e-01 -8.13828595e-03 -5.21389296e-08
 -6.14587888e-02 -3.84955667e-02 -7.22640455e-02  1.24235086e-01
  2.92176418e-02 -9.10776854e-02 -2.07332652e-02 -3.70653942e-02
  2.91249808e-02 -1.55029550e-01 -5.11594787e-02  6.41455054e-02
 -1.66638140e-02 -6.57230318e-02  1.86318215e-02 -7.87387490e-02
 -2.59604282e-03 -1.21009715e-01 -1.43905096e-02 -6.37833914e-03
  2.58596428e-02 -2.05648560e-02  5.02314009e-02  2.90354528e-02
  7.31474310e-02 -4.69543302e-04  9.24597457e-02  9.35998708e-02
  8.66741985e-02  1.76390149e-02 -2.12210882e-03 -5.54326773e-02
  1.09862328e-01  4.86930497e-02 -3.82362530e-02 -1.48567429e-03
  9.46802720e-02  5.41264527e-02  4.82619973e-03 -2.35737618e-02
  6.14867173e-03 -3.10450979e-02 -2.80649327e-02  2.38560922e-02
  8.21887399e-04  2.10186243e-02 -4.28037122e-02  9.29639563e-02
  6.91766143e-02  3.20988037e-02 -2.94619668e-02 -3.24680097e-02
  5.33073694e-02  3.06455567e-02 -4.64486815e-02 -3.96964066e-02
 -5.15565053e-02 -1.26903700e-02  8.93483683e-02  3.49242752e-03
  9.50641260e-02  3.71501246e-03 -3.23236571e-03 -4.68936712e-02]"
" pubkey: userA.publicKey,
      isSigner: true,
      isWritable: true,
    },
    {
      pubkey: userB.publicKey,
      isSigner: false,
      isWritable: false,
    },
    {
      pubkey: mapKey,
      isSigner: false,
      isWritable: true,
    },
  ],
  data: Buffer.from(Uint8Array.of(1)),
});

const insertBCIx = new TransactionInstruction({
  programId: MY_PROGRAM_ID,
  keys: [
    {
      pubkey: userB.publicKey,
      isSigner: true,
      isWritable: true,
    },
    {
      pubkey: userC.publicKey,
      isSigner: false,
      isWritable: false,
    },
    {
      pubkey: mapKey,
      isSigner: false,
      isWritable: true,
    },
  ],
  data: Buffer.from(Uint8Array.of(1)),
});

const insertCAIx = new TransactionInstruction({
  programId: MY_PROGRAM_ID,
  keys: [
    {
      pubkey: userC.publicKey,
      isSigner: true,
      isWritable: true,
    },
    {
      pubkey: userA.publicKey,
      isSigner: false,
      isWritable: false,
    },
    {
      pubkey: mapKey,
      isSigner: false,
      isWritable: true,
    },
  ],
  data: Buffer.from(Uint8Array.of(1)),
});

const tx = new Transaction();
tx.add(initMapIx);
tx.add(insertABIx);
tx.add(insertBCIx);
tx.add(insertCAIx);
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071 #
Soát lỗi chương trình trên Solana

Có một vài lựa chọn và công cụ hỗ trợ cho việc kiểm thử và soát lỗi một chương trình trên Solana.

#
Có thể bạn chưa biết

Những điều có thể bạn chưa biết

Crate solana-program-test cho phép tạo nên một môi trường tiêu chuẩn local runtime để bạn có thể kiểm thử và soát lỗi chương trình một cách trực quan (ví dụ như trong vscode).
Crate solana-validator cho phép sử dụng solana-test-validator để chạy các bước kiểm thử một cách tin cậy trên local validator node. Bạn có thể chạy từ trình biên tập tuy nhiên các điểm dừng trong chương trình sẽ bị bỏ qua.
Công cụ CLI solana-test-validator giúp khởi chạy và tải Program cũng như thực thi các Transaction từ Rust CLI hoặc từ web3js.
Trong tất cả các trường hợp trên, việc sử dụng macro msg! được khuyến khích tại thời điểm phát triển ban đầu, tuy nhiên cần xoá chúng một khi đã hoàn tất kiểm thử. Nên nhớ rằng msg! cũng tiêu tốn tài nguyên tính toán hay còn gọi là Compute Units. Program của bạn có thể bị lỗi một khi đạt đến giới hạn trần của Compute Unit.

Những ví dụ ở các phần tiếp theo sẽ sử dụng solana-program-bpf-template. Vui lòng tải về máy bằng câu lệnh:

git clone git@github.com:mvines/solana-bpf-program-template.git
cd solana-bpf-program-template
code .

1
2
3

#
Môi","[ 1.03553468e-02  6.41438589e-02 -9.47116911e-02 -1.79230201e-03
 -1.17148839e-01 -2.44179852e-02  1.01050407e-01  1.80394631e-02
 -9.67312977e-03  2.58240178e-02  9.29727219e-03 -9.24775377e-03
  6.17021089e-03 -3.95686552e-02  3.65499556e-02 -7.28169782e-03
 -4.66442406e-02 -1.84441898e-02 -1.96391214e-02  1.56626310e-02
  5.27145620e-03 -3.76524813e-02  7.18873832e-03 -3.35069024e-03
 -7.33072171e-03 -1.99593678e-02  1.12382453e-02 -2.95237731e-02
 -2.14758646e-02 -6.06649183e-03  4.41030562e-02 -1.49981389e-02
 -4.96365242e-02  4.53577079e-02  1.58728845e-02  8.95558074e-02
  2.73672696e-02 -7.08865225e-02  9.35284328e-03 -5.59695996e-02
  2.61414656e-03  7.77674019e-02 -1.16253972e-01  6.64008260e-02
  2.99617928e-02 -2.80910451e-02 -8.09679106e-02 -2.17096247e-02
 -3.80936079e-03  5.70949763e-02 -9.67768207e-02  6.91876635e-02
 -3.73207182e-02  8.67401063e-02  3.82066332e-02  5.92585541e-02
  1.49143231e-03 -2.26750001e-02  4.10133488e-02  8.43950640e-03
  3.70450094e-02 -7.66179152e-03  6.33689612e-02 -2.70206854e-02
  1.32405227e-02  4.97831851e-02  4.24039811e-02 -2.03208858e-03
  4.63479273e-02  1.27589954e-02  2.86272056e-02 -1.15216326e-03
 -1.23788729e-01 -6.55685924e-03 -5.62681556e-02 -7.53287226e-02
 -3.52547541e-02  3.77529636e-02 -8.38332474e-02 -6.19199709e-04
 -4.17883247e-02 -6.87550232e-02  4.24355268e-02 -2.95402650e-02
 -1.98085234e-02  6.18994683e-02 -2.91282497e-02 -1.14034325e-01
 -3.61837745e-02  6.27445728e-02 -7.97142368e-03  3.71549316e-02
  5.43830469e-02 -3.21417190e-02  1.37530789e-01  1.20902536e-02
  4.72928360e-02 -1.75345670e-02  2.40769307e-03  2.85540130e-02
 -1.53681217e-02  5.94358135e-04 -2.87750922e-02  1.13612204e-03
  5.84746599e-02 -3.04748770e-03  5.29649146e-02 -9.30028260e-02
 -1.65169224e-01  1.11494493e-02  3.35648982e-03  1.23788133e-01
  2.52407193e-02  3.39632668e-02 -5.55747747e-02  6.50650635e-02
 -8.97823945e-02  3.61730494e-02  1.52924436e-03  3.89246680e-02
  4.41351272e-02 -1.00215767e-02 -9.42913815e-03  5.24597205e-02
 -1.24623895e-01 -6.90748319e-02 -7.30802864e-03  3.76135637e-33
  7.73195177e-03 -5.14349826e-02 -7.28797019e-02  2.65203603e-02
  1.22521156e-02  2.38133632e-02  2.64217835e-02 -9.21134604e-04
 -8.35508481e-02 -4.81743366e-02 -4.47583199e-02 -1.04932413e-02
 -2.08800379e-02  2.50334144e-02  3.26039195e-02  1.47345671e-02
 -2.77101565e-02  6.45454600e-02  4.88051847e-02 -1.58936139e-02
  3.82471979e-02  2.07341742e-02 -2.55661439e-02 -1.92651972e-02
  1.24155162e-02 -1.78506337e-02 -9.82084945e-02  2.75341142e-03
 -2.49961372e-02  1.73799857e-03  1.75906904e-02  4.06810492e-02
  5.58270793e-03  5.23859076e-02  7.30598792e-02 -1.11169415e-02
  1.13859614e-02 -2.21067704e-02 -6.08151369e-02 -8.76244605e-02
  5.99282831e-02 -1.02732191e-02 -2.08337866e-02  7.57403811e-03
 -8.83685499e-02 -5.49319312e-02 -2.89779548e-02 -7.90217146e-03
  3.49597000e-02 -5.51975053e-03 -3.57627571e-02  7.60078728e-02
 -5.36218584e-02 -6.60547763e-02 -6.36490732e-02 -9.45118591e-02
  1.20995045e-02  3.50833451e-03  1.11948885e-02  5.27521186e-02
 -6.47696629e-02  4.42003682e-02  6.42908690e-03  2.05920227e-02
 -3.58178839e-02 -1.26579124e-03 -5.52042723e-02 -1.68919992e-02
  3.43336128e-02 -5.14945835e-02 -4.16977108e-02  2.07006168e-02
 -3.71264741e-02  2.54283138e-02 -5.39415814e-02 -6.47813082e-02
 -4.99805622e-02 -6.73277257e-03 -4.41606082e-02 -1.02066949e-01
  2.58663483e-02 -1.80332437e-02 -7.46226460e-02  6.34097755e-02
 -6.45837486e-02  6.09724522e-02 -5.16462512e-02 -4.22853191e-05
  2.04728842e-02  4.77025919e-02 -6.95381139e-04 -1.26946541e-02
  4.75443676e-02 -5.40167838e-02  2.84553110e-03 -7.50755769e-33
  4.04963829e-02 -3.85338962e-02 -1.84590779e-02 -9.92340065e-05
 -4.87707593e-02  1.44890733e-02  4.33528833e-02 -1.72465313e-02
 -3.21815275e-02 -1.49393100e-02 -1.18056079e-02  1.80630814e-02
  7.93968886e-02 -4.90094163e-03 -2.81606545e-03 -3.83950435e-02
 -4.62911986e-02 -3.86728272e-02  4.45731031e-03 -9.22380686e-02
  2.30820645e-02 -2.49192264e-04  4.27890345e-02  1.11142479e-01
 -3.66225801e-02 -1.15698501e-02 -6.53792396e-02  3.26303057e-02
 -1.29789412e-02 -4.94875610e-02  3.46889794e-02  1.40719349e-02
 -5.19902930e-02 -7.57845212e-03  3.54741365e-02 -8.78155977e-02
  5.06594889e-02  1.18133418e-01 -1.74097959e-02  6.22001253e-02
  8.15962330e-02  2.43750037e-04 -5.37153743e-02  2.02881061e-02
  4.94820364e-02  1.32002053e-03  1.97143313e-02  1.49078192e-02
  3.86850648e-02  3.71636152e-02  5.20255864e-02 -2.58573219e-02
  3.68324593e-02 -5.20021282e-02 -6.52918406e-03  1.30787278e-02
  1.25885382e-01 -1.27480254e-01  8.30697939e-02  7.53095187e-03
  7.09232362e-03 -6.55735210e-02  1.07308619e-01  6.14273213e-02
  5.50277382e-02 -1.14884190e-01 -4.66973260e-02 -1.48626482e-02
  1.29796509e-02 -1.25025783e-03  2.76648495e-02 -9.14862566e-03
  3.36733460e-03 -1.17648756e-02  1.14470072e-01 -3.84139083e-02
 -2.10956745e-02 -6.64012879e-02  4.64509875e-02  1.51112704e-02
 -8.89237877e-03  5.98209538e-02  5.11683226e-02  4.75408547e-02
 -2.93625537e-02 -6.22771084e-02  5.09615578e-02  2.09991131e-02
 -6.99937120e-02  2.74742655e-02 -3.58699411e-02 -5.41254738e-03
 -1.26954868e-01 -1.07871599e-01  3.78719973e-03 -4.89183414e-08
 -8.38783309e-02 -5.20435069e-03 -6.27008528e-02  1.33817658e-01
  3.41729783e-02 -8.11666623e-02  2.95256032e-03 -3.14498059e-02
  2.82532182e-02 -1.45892501e-01 -6.66120797e-02  6.14689216e-02
 -2.90192999e-02 -5.93859740e-02  2.73937155e-02 -6.74074888e-02
 -3.33900675e-02 -6.65392578e-02 -2.58667059e-02  1.94275770e-02
  1.67376120e-02 -2.10233461e-02  4.10937257e-02  3.48427966e-02
  5.24626672e-02  1.52999945e-02  1.11058600e-01  1.09562404e-01
  7.66310468e-02  4.26392034e-02 -1.75911933e-02 -3.41347009e-02
  1.09632038e-01  2.73482259e-02 -3.45980190e-02  2.09379457e-02
  8.00721198e-02  4.58114035e-02 -2.20657121e-02 -1.79700330e-02
 -3.28325829e-03 -3.13594937e-02 -5.27981706e-02  3.99267673e-02
 -2.98732091e-02  1.05335284e-02 -8.20757076e-03  9.97485965e-02
  5.38389087e-02  4.51069809e-02 -3.16906869e-02 -3.36632766e-02
  4.65638675e-02  4.37654480e-02 -6.79955408e-02 -1.93022434e-02
 -2.22134106e-02 -6.11194316e-03  8.22731256e-02 -2.86357384e-02
  1.07218169e-01  6.89020427e-03 -7.91343953e-03 -2.87909992e-02]"
"trường kiểm thử và soát lỗi trong trình biên tập

Mở tệp src/lib.rs

Bạn sẽ thấy ngay một Program khá đơn giản và chỉ in ra nội dụng nhận được từ điểm tiếp nhận chỉ thị: process_instruction

Vào mục #[cfg(test)] và chọn Run Tests. Nó sẽ chạy trình biên dịch sau dó thực thi bài kiểm thử async fn test_transaction() ngay sau đó. Bạn sẽ thấy một thông báo đơn gian in ra ở cửa sổ lệnh (Terminal) của vscode như dưới:
running 1 test
""bpf_program_template"" program loaded as native code
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke [1]
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: 1 accounts, data=[1, 2, 3]
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success
test test::test_transaction ... ok
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 33.41s

1
2
3
4
5
6
7

Thiết lập các điểm dừng tại msg! trong (11) trong chương trình
Quay lại mô-đun kiểm thử, chọn Debug và trong khoảng vài giây trình soát lỗi sẽ dừng tại điểm đánh dấu. Bây giờ bạn có thể kiểm tra dữ liệu dần các hàm, các biến, vân vân.

Các bước kiểm thử cũng có thể được khởi chạy bằng câu lệnh: cargo test hoặc cargo test-bpf. Tất nhiên các điểm đánh dấu dừng sẽ bị bỏ qua.

Chúc mừng bạn đã hoàn thành quá trình kiểm thử và sát lỗi.

Lưu ý

Nhớ rằng bạn đang dùng một nốt local (địa phương) validator cho nên các System Program, blockhash, vân vân, sẽ không phản ánh hoặc xử lý đúng như trên các validator thuộc mạnh chính. Đó là lý do tại sao Solana gọi chúng là kiểm thử bằng nốt Local Validator!

#
Kiểm thử bằng nốt Local Validator trong trình biên tập

Các tập tin khai báo trong tests/integration.rs sẽ được quá trình kiểm thử đọc và tải vào nốt local validator.

Mặc định, các mẫu có sẵn cho việc tích hợp các bài kiểm thử sẽ chỉ có thể chạy từ câu lệnh cargo test-bpf. Các bước sau đây sẽ tìm hiểu cách chạy chúng trong trình biên tập cũng như in kết quả nhật ký của validator và lệnh in msg! từ Program của bạn.

Trong thư mục gốc của dự án, chạy cargo build-bpf để biên dịch chương trình mẫu
Trong trình biên tập, mở tập tin tests/integration.rs
Chuyển dòng 1 thành câu nhận xét -> // #![cfg(feature = ""test-bpf"")]
Để tải chương trình đã biên dịch, ở dòng 19 thay bằng: .add_program(""target/deploy/bpf_program_template"", program_id)
Thêm câu lệnh sau vào dòng 22 solana_logger::setup_with_default(""solana_runtime::message=debug"");
Chọn Run Test phí trên hàm test_validator_transaction()

Quá trình này sẽ khởi chạy nốt validator sau đó cho phép bạn tạo một Transaction (bằng Rust) và gửi nó đến nốt bằng RcpClient.

Kết quả đầu ra của chương trình sẽ in ra cửa sổ lệnh của trình biên tập. Ví dụ:

running 1 test
Waiting for fees to stabilize 1...
Waiting for fees to stabilize 2...
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke [1]
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: 1 accounts, data=[1, 2, 3]
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM consumed 13027 of 200000 compute units
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success

test test_validator_transaction ... ok
test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 6.40s

1
2
3
4
5
6
7
8
9
10


Soát lỗi ở đây sẽ cho phép bạn dò được các hàm, phương thức đã sử dụng trong nội dung bài kiểm thử ngoại","[-2.58523673e-02 -1.21775568e-02 -1.01194784e-01 -7.92989656e-02
 -5.66204339e-02 -4.35149632e-02  1.25163188e-03  6.31745607e-02
  4.69809510e-02  3.56178619e-02  9.80794728e-02 -3.34497355e-02
 -5.72219603e-02 -8.12459439e-02  2.69670747e-02 -7.29085132e-02
 -7.94558972e-03 -7.07999021e-02 -9.79491249e-02 -5.81926182e-02
 -2.39908379e-02 -7.57001201e-03 -2.72875410e-02  8.73041991e-03
 -3.63641270e-02 -2.50621960e-02 -4.59812954e-02  4.01677750e-02
  3.92072462e-02 -1.07899167e-01  4.02459502e-02  1.46382362e-01
 -1.91907045e-02  6.64697811e-02  1.07027560e-01  8.74282941e-02
  2.03000773e-02 -1.03254370e-01 -3.86037715e-02 -2.02428922e-02
 -8.11503306e-02 -1.67943798e-02 -1.00966811e-01 -2.62091514e-02
  5.94271570e-02 -2.21237317e-02 -4.41267826e-02 -2.97330730e-02
 -2.04477701e-02 -1.93754248e-02 -7.28165135e-02  1.10727750e-01
 -1.61108896e-02 -3.13051976e-02 -4.50752266e-02 -2.91114599e-02
  5.58545664e-02  1.95260178e-02  2.94807516e-02  3.05392370e-02
 -6.76657930e-02  7.96994939e-02 -5.19633628e-02  2.54616514e-02
  9.36383847e-03  1.80775262e-02 -4.33288217e-02 -3.59810553e-02
  4.71148528e-02 -1.84262581e-02 -9.15934294e-02 -5.29548759e-03
 -1.20796002e-01  6.34900928e-02 -7.52408504e-02  2.57878494e-03
  3.50484252e-03 -8.08310229e-03 -3.30209136e-02 -1.30010888e-01
 -2.00690106e-02 -1.82191579e-04 -8.05318449e-03 -4.06036749e-02
  6.09562872e-03  5.12994379e-02 -1.66632906e-02  1.07668284e-02
  5.41706458e-02 -3.51334387e-03  6.75852299e-02  7.16089979e-02
  3.31317511e-04 -6.85205683e-03  4.35944609e-02  7.20329629e-03
  3.51786502e-02  5.36348820e-02 -2.99642589e-02  4.70702276e-02
  1.52840288e-02  1.57409552e-02  5.24061099e-02  1.55293709e-02
 -1.97618006e-04  3.54677141e-02  9.52672884e-02  1.17308982e-02
  4.67665493e-02 -6.86192587e-02 -3.55314128e-02  2.47738902e-02
 -7.54053099e-03 -1.00904636e-01  8.21736827e-03  3.36581729e-02
 -5.90469837e-02 -6.70910580e-03 -3.96656506e-02  1.02558888e-01
  4.02072482e-02 -3.09945294e-03 -1.24728195e-01  3.80604342e-02
 -9.41898227e-02 -6.94495738e-02  5.46219870e-02  2.43677025e-32
 -1.34253325e-02 -5.49462251e-02 -4.18639146e-02 -9.22153369e-02
  5.11253625e-02  2.37849094e-02  1.46860881e-02  2.25966312e-02
 -8.58067125e-02  3.34076909e-03 -7.86332879e-03 -1.14174634e-01
 -6.05650619e-02 -2.56887581e-02  5.70351593e-02 -4.42496203e-02
  2.54176930e-02 -4.72197533e-02 -5.89071121e-03  3.43087837e-02
  7.98671395e-02 -3.31049003e-02 -6.10852102e-03 -4.68258634e-02
  9.48829018e-03  3.68550420e-02 -2.34182701e-02 -3.65182459e-02
 -1.35295978e-02  3.13502885e-02  6.75013363e-02 -3.00318729e-02
 -7.48681575e-02  2.25432534e-02 -3.06761470e-02 -8.06375965e-02
 -7.97302183e-03  8.25366937e-03 -4.97162789e-02 -3.10178585e-02
 -1.26844961e-02 -2.33184919e-03 -3.23035866e-02  4.88805259e-03
  1.30378576e-02 -5.07947020e-02 -5.64069711e-02 -1.55031402e-02
  4.68689576e-02 -5.95670473e-03  2.22340431e-02  3.41864862e-02
 -2.15893108e-02  1.16162989e-02  5.17322533e-02 -3.33979838e-02
  3.98779958e-02 -5.87920845e-02  2.89365090e-03  9.05712470e-02
 -1.92985276e-03  2.06051581e-02 -3.03640794e-02  1.63761210e-02
  2.70849653e-02 -1.16193265e-01  1.82556361e-02  3.64506472e-04
  8.23486224e-02  1.65087711e-02 -9.27142277e-02 -7.09272027e-02
  8.01692009e-02  7.42373317e-02 -6.64364966e-03 -3.01631223e-02
  2.62598339e-02 -2.47356892e-02 -2.08191089e-02 -2.27964222e-02
  2.25362815e-02  1.69938244e-03  2.02706289e-02 -1.02516524e-01
  2.84807421e-02 -2.14455742e-03  1.84804369e-02 -5.34886420e-02
  1.23564228e-02  1.91025231e-02 -1.73966065e-02  5.01796007e-02
  5.51860072e-02 -1.12101492e-02 -2.87981075e-03 -2.40370345e-32
  9.54733044e-03  1.67017635e-02 -7.96775222e-02  4.66864184e-02
 -2.74834409e-02  5.84537443e-03  1.47763556e-02 -9.76566672e-02
 -1.37615195e-02  2.96350401e-02 -7.68227875e-03 -6.17488213e-02
 -3.06005985e-03  4.62291539e-02  8.48620981e-02  2.44270843e-02
  3.54666710e-02  2.26799473e-02 -8.39105621e-03  7.81999752e-02
 -2.74249129e-02  8.03012326e-02  1.28183253e-02  3.59292924e-02
 -7.01024756e-02 -3.92009355e-02 -1.44553150e-03  3.81003320e-02
 -2.09084786e-02  8.13541282e-03  1.50940409e-02  3.66016105e-02
 -1.03563555e-01  1.03939012e-01  3.73488367e-02 -9.52513888e-02
  8.05261135e-02  5.83801568e-02 -8.01415183e-03  3.38778012e-02
  1.01593092e-01  4.36812527e-02 -2.09770165e-02  9.81948245e-03
 -5.12299128e-02 -5.67250478e-04 -1.20189320e-02 -1.26229703e-01
 -4.99348193e-02 -4.01979648e-02  6.75616562e-02  2.72295009e-02
  3.10915336e-02 -8.94084200e-03  2.64763329e-02  2.58368179e-02
  7.96673745e-02 -1.01419218e-01 -9.39521790e-02 -5.39669655e-02
  7.16371983e-02 -2.01711543e-02  6.04592599e-02 -9.82508808e-02
  1.08213820e-01 -1.78686362e-02 -2.76180021e-02  5.44360243e-02
  2.48139817e-02 -6.45201057e-02 -9.61653888e-03  6.07049512e-03
 -3.41491774e-02  1.48168150e-02 -2.34543551e-02 -4.45721344e-05
 -6.50102496e-02 -5.16128577e-02 -2.48809960e-02  6.78778738e-02
 -4.68479954e-02  1.68555044e-02 -8.50729868e-02  2.03080215e-02
 -8.52204114e-02 -4.29048017e-03 -2.85762362e-02  3.31630483e-02
  2.85674501e-02 -3.79819050e-02  5.05229197e-02  4.49076034e-02
  4.02271226e-02  6.40313923e-02  2.67593693e-02 -7.05143535e-08
 -6.22157985e-03 -1.56785667e-01  2.10514255e-02  3.07609830e-02
  9.12796482e-02 -2.73428317e-02 -2.22858861e-02 -6.99604899e-02
 -2.80066729e-02 -4.52605262e-02 -3.56973186e-02  1.21438531e-02
 -5.32580353e-02 -1.76813100e-02  4.78649847e-02  1.61462612e-02
  3.44281318e-03  8.87631252e-03  1.38574354e-02 -8.67726654e-02
  7.72975236e-02  2.49786526e-02 -1.33187026e-02  7.05621317e-02
 -9.14179385e-02  2.53605042e-02  7.12266415e-02  8.60660225e-02
  6.48081489e-03 -2.00745780e-02  8.62650946e-02 -4.20977511e-02
 -2.27216911e-03 -8.22732821e-02  3.43318880e-02  1.29194409e-02
  8.45845044e-02 -1.31062465e-02 -9.03724134e-03  1.08049605e-02
  2.22130306e-02  3.25421132e-02  2.83968858e-02  4.75013023e-03
  2.98393909e-02 -4.52645235e-02  1.68921780e-02 -5.33357263e-02
  5.98761514e-02 -6.42900616e-02 -2.14417037e-02 -1.00027611e-02
 -1.29219405e-02  6.79582655e-02  4.79372256e-02  2.19222577e-03
 -2.68569365e-02 -3.90997641e-02  7.07312766e-03  5.43722101e-02
  5.81750013e-02  4.14856933e-02  3.59686688e-02 -6.45398274e-02]"
"trừ các điểm dừng được đánh dấu trong chương trình.

Điều này có vẻ lời hơi phiền nhỉ!

#
Kiểm thử bằng nốt Local Validator trên ứng dụng người dùng

Cuối cùng, bạn có thể khởi chạy một nốt local validator và tải lên Program của bạn cũng như bất kỳ Account bằng câu của solana-test-validator.

Bằng cách này, bạn sẽ cần một ứng dụng người dùng, hoặc là bằng Rust với RcpClient, hoặc là bằng ứng dụng JavaScript/Typescript

Chạy solana-test-validator --help để hiểu thêm về các chi tiết cũng như tham số truyền vào. Ví dụ bên dưới là một cài đặt đơn giản nhất:

Mở cửa sổ lệnh tại vị trí thử mục gốc của dự án
Chạy solana config set -ul để trỏ cài đặt về môi trường địa phương
Chạy solana-test-validator --bpf-program target/deploy/bpf_program_template-keypair.json target/deploy/bpf_program_template.so
Mở một cửa sổ lệnh khác và chạysolana logs để bắt đầu theo dõi kết quả trả ra.
Bạn có thể chạy ứng dụng người sau đó và quan sát kết quả đầu ra chửa chương trình bằng cửa sổ lệnh được khởi chạy ở bước 4

Giờ đây bạn đã thành thạo mọi thứ rồi đấy!

#
Các nguồn tài liệu khác

solana-program-bpf-template
open in new window

RcpClient
open in new window

JavaScript/Typescript Library
open in new window #
Thử lại Transaction

Trong một vài tính huống, một Transaction trông có vẻ hợp lệ có thể bị hết hạn ngay trước khi được chấp nhận (thêm vào block). Điều đó thường diễn ra nhất là khi mạng lưới bị nghẽn và một nốt RPC không thể truyền Transaction đến leader
open in new window
. Dưới góc độ người dùng, bạn có thể nhận ra trường hợp này khi Transaction biến mất hoàn toàn. Trong khi các nốt RPC được trang bị một thuật toán lan truyền chung, ứng dụng của các lập trình viên vẫn có khả năng phát triển các luận lý lan truyền tuý chỉnh.

#
Có thể bạn chưa biết

Những điều có thể bạn chưa biết

Các nốt RPC sẽ thử lan truyền lại Transaction khi sử dụng một thuật toán chung
Ứng dụng riêng có thể hiện thực các luận lý lan truyền tuỳ chỉnh
Lập trình viên nên hiểu rõ tham số maxRetries của phương thức sendTransaction trong JSON-RPC.
Lập trình viên nên kích hoạt preflight để kiểm tra các tình huống lỗi trước khi gửi Transaction đi
Trước khi ký lại bất kỳ một Transaction nào, là rất quan trọng khi đảm bảo rằng blockhash của Transaction đã hết hạn
#
Hành trình của một Transaction
#
Làm thế nào để người dùng gửi Transactions

Trong Solana, không tồn tại khái niệm mempool. Tất cả các Transaction, dù là được tạo nên từ các Program hay là từ người dùng, đều được điều hướng hiệu quả đến các leader để họ có thể xử lý và ghi nhận chúng vào block. Có 2 cách mà một Transaction có thể được gửi đến các leader:

Uỷ quyền cho các máy chủ RPC bằng phương thức sendTransaction
open in new window
 trong JSON-RPC.
Gửi trực tiếp đến các leader thông qua TPU Client
open in new window

Phần lớn người dùng sẽ gửi Transaction thông qua máy chủ RPC. Khi một người dùng gửi Transaction đi, nốt RPC sẽ","[-9.94221196e-02 -3.03710401e-02 -5.69497095e-03 -7.90404156e-02
 -3.29185873e-02 -3.61739728e-03  6.79344535e-02 -1.11071803e-02
  1.45167345e-02 -1.13743274e-02  9.75388438e-02 -1.18399397e-01
  2.23584622e-02 -2.15331111e-02  2.08234712e-02 -4.07388359e-02
 -5.52846268e-02  9.16278083e-03 -8.14523473e-02 -8.50756988e-02
 -3.14438045e-02 -2.76595764e-02 -3.85616049e-02 -4.75597102e-04
 -7.49888420e-02  3.94725725e-02  9.19105299e-03  4.93445210e-02
  9.30106174e-03 -7.45284185e-02  4.12865989e-02  1.35721534e-01
 -6.26155809e-02 -1.15307774e-02  1.12051807e-01  4.99151498e-02
 -1.26683032e-02  3.32575552e-02  5.72488923e-03  4.47512381e-02
 -7.59321004e-02 -2.06603054e-02 -2.64829528e-02 -7.16895461e-02
  7.86449984e-02 -5.71083277e-02 -3.49144936e-02 -1.14953090e-02
 -2.19587740e-02 -5.42083904e-02 -4.87283356e-02  1.14662975e-01
 -1.13539221e-02  7.17176720e-02 -5.85831515e-02 -3.71559337e-02
 -4.10707807e-03  4.15534861e-02  5.28703891e-02 -8.11752975e-02
 -4.33798097e-02  2.33411398e-02 -1.93769746e-02 -2.19319779e-02
  2.35580653e-02 -1.01118265e-02 -8.71388540e-02 -6.08551465e-02
  4.77756148e-05  5.89440130e-02 -6.69521093e-02  4.30887658e-03
 -7.25689679e-02  1.23583399e-01 -8.58737603e-02  8.75944719e-02
 -2.75414363e-02 -1.28487796e-02  5.71870618e-02 -6.72226697e-02
 -1.28755579e-02  4.02065180e-02  9.25627276e-02 -3.36061455e-02
  3.84676717e-02  1.07794650e-01 -3.34021896e-02  1.59849115e-02
  3.11972518e-02 -7.74078723e-03  1.29860207e-01  5.78397922e-02
  1.67070189e-03  2.17304472e-02  4.54809843e-03 -4.33439575e-02
  1.85016159e-03  6.73243627e-02 -1.54101744e-03  6.19519725e-02
  4.78171594e-02 -9.99917183e-03 -5.27274143e-03 -4.51428480e-02
  1.98108307e-03  1.51727190e-02  1.01818196e-01 -1.81244928e-02
  7.33036697e-02  4.65107001e-02 -2.70962007e-02  4.93133552e-02
  2.64684146e-04 -1.01370692e-01 -5.33271208e-03  8.15722346e-02
  4.02261429e-02  2.49794796e-02 -8.66656099e-03  4.11397852e-02
 -3.13754231e-02 -8.34288727e-03 -3.09504885e-02 -1.06326696e-02
 -1.99799649e-02 -5.56120574e-02  5.86047433e-02  2.21764312e-32
  2.22734194e-02 -2.77336687e-03  2.81805042e-02 -7.94696510e-02
 -1.27452696e-02  6.35077013e-03 -5.22964634e-02  4.95610908e-02
 -1.10116705e-01 -1.77442506e-02  2.79707666e-02 -3.72404344e-02
 -5.56768738e-02 -6.16530888e-02  8.58630165e-02 -5.76745626e-03
  6.92738146e-02 -1.14643298e-01 -3.04845627e-02  9.48827900e-03
  7.15425164e-02 -4.45396751e-02  6.31653443e-02 -1.11266412e-02
 -1.94780715e-02 -1.80975534e-02 -1.04851993e-02  4.12998125e-02
 -1.38933714e-02  1.43014267e-02  4.28726561e-02 -6.15109131e-02
 -2.57624369e-02 -1.30582741e-02 -4.22292054e-02 -2.40012091e-02
  2.18705391e-04 -3.06117944e-02 -1.90621112e-02 -3.35498080e-02
  9.00546263e-04 -9.36175790e-03  1.30157694e-02  5.45272082e-02
  1.44507606e-02  4.10556328e-03 -7.06628989e-03 -1.12148654e-02
  5.43202013e-02 -4.29481920e-03 -3.82275917e-02  1.38368327e-02
 -9.68820602e-02  1.89603399e-02  3.82323191e-02 -8.74289684e-03
  1.70893837e-02 -2.13709418e-02  5.00102080e-02  6.02033269e-03
  2.94526238e-02 -3.57054770e-02 -1.50573328e-02  2.33892109e-02
 -6.20957464e-02 -1.09906487e-01 -4.81121317e-02 -2.90443003e-02
  9.06372517e-02 -3.79584506e-02 -6.29115552e-02 -6.02293909e-02
  2.35680054e-05  7.89446235e-02 -2.85116676e-02 -8.22691172e-02
  5.01456596e-02  3.35493274e-02 -5.32084405e-02  1.35140279e-02
  4.41313609e-02 -6.40278831e-02 -2.94557586e-02  3.03283092e-02
  4.91033904e-02 -1.60288811e-02  7.42599135e-03 -1.41202211e-02
 -3.55911441e-02  2.72846897e-03 -2.29574777e-02  5.98758459e-02
  3.14312354e-02 -2.52368972e-02 -2.87036002e-02 -1.82198877e-32
  2.85153110e-02  5.46005648e-03 -6.03544191e-02  6.08966872e-02
  1.16774412e-02 -6.27967119e-02 -2.77758949e-03 -5.61800748e-02
  5.47332466e-02 -6.98719248e-02  2.67220698e-02 -3.66456620e-02
  3.30515616e-02  1.76326875e-02  3.62221850e-03  4.36518341e-02
 -2.66762543e-02  6.32247031e-02  7.53229950e-03  4.82680947e-02
  2.75714579e-03  3.04390527e-02 -1.25120208e-02  3.36223794e-03
 -1.13996707e-01  9.32064187e-03  5.93416160e-03  3.94421704e-02
 -2.25015283e-02  8.62486139e-02  3.05097550e-02  3.72854550e-03
 -8.61903280e-02  1.23317614e-01 -9.00382735e-03 -1.54657736e-01
  5.94708920e-02  9.67652816e-03 -3.60223316e-02  1.02053061e-01
  4.15161215e-02  5.67129999e-02 -4.44603451e-02 -9.03795939e-03
 -8.28808025e-02  2.02103220e-02  6.80071935e-02 -8.11633170e-02
 -9.31465402e-02  3.18577536e-03  1.11690424e-01 -5.04125990e-02
  1.17249731e-02  2.33792961e-02  4.52760048e-02  4.58056480e-02
  3.39884833e-02 -8.13420415e-02 -1.00694671e-01 -2.05354337e-02
  2.63655046e-03  1.79810692e-02 -1.18476180e-02 -2.38319989e-02
  8.78884494e-02  1.21029383e-02 -3.86354327e-03  1.25529125e-01
  5.86474352e-02 -9.14717168e-02 -6.77992329e-02 -5.59490882e-02
 -4.89334343e-03 -9.00804438e-03 -1.85140446e-02  3.40342335e-03
 -5.26159741e-02  3.77353583e-03  7.62627944e-02 -4.00895439e-02
 -7.46770203e-02 -2.28544101e-02 -3.90229039e-02 -1.93423424e-02
 -5.74382069e-03  7.50968754e-02 -4.63574640e-02  2.00008452e-02
  2.47095823e-02  4.28643115e-02  4.61063012e-02  4.55749556e-02
  9.55771357e-02  3.85220721e-02 -2.44630557e-02 -5.93098513e-08
 -5.57677485e-02 -1.35556221e-01 -5.60612641e-02  2.06756946e-02
  4.07144539e-02 -3.53970416e-02 -7.49025843e-04 -1.00475326e-01
  6.83937827e-03 -3.59161547e-03  5.91528937e-02  3.09495348e-02
 -6.33989424e-02 -3.26358154e-02 -3.07988049e-03  5.28887101e-02
  4.82245050e-02  8.34163874e-02 -5.18912543e-03 -4.93859611e-02
  5.95632866e-02  1.96300764e-02  2.14951560e-02  1.10398710e-01
 -8.13042652e-03  8.65840614e-02 -1.69404559e-02  6.17438257e-02
 -4.40547690e-02  1.03851082e-02  2.71540359e-02 -8.21015015e-02
  3.37530784e-02 -6.94693625e-02  6.41190484e-02  3.84691842e-02
 -4.31172289e-02 -3.31353731e-02 -2.85205375e-02  8.16678479e-02
  7.48390853e-02  3.85982841e-02  1.90910939e-02 -2.41704956e-02
 -9.12190229e-03 -2.80874781e-02  9.67312884e-03 -4.69103009e-02
  3.54797468e-02 -2.66757440e-02 -5.03825471e-02  1.73066673e-03
  3.89520265e-02  4.00492996e-02 -1.23066586e-02 -6.76542101e-03
 -2.29270495e-02  4.60679270e-02 -4.16143145e-03  7.05754338e-03
  6.42479360e-02  7.20572919e-02 -2.60433974e-03 -5.70965894e-02]"
"tiếp nhận và cố gắng truyền lần lượt các Transaction đến leader hiện tại cũng như leader tiếp theo. Cho đến khi Transaction được xử lý bởi một leader, sẽ không tồn tại bất kỳ bản sao nào của Transaction được lưu trữ ngoại trừ người dùng và các nốt RPC trung chuyển. Trong trường hợp TPU Client, quá trình lan truyền và điều hướng đến leader sẽ được xử lý toàn bộ bởi người dùng.

#
Làm thế nào để các nốt RPC lan truyền Transaction

Ngay sau khi một nốt RPC tiếp nhận Transaction thông qua sendTransaction, nó sẽ chuyển Transaction đó thành một gói tin UDP
open in new window
 trước khi truyền đến các leader thích hợp. UDP cho phép validator có thể giao tiếp nhanh chóng với nhau, nhưng không đảm bảo gói tin có thể chắc chắn được chuyển đi đúng hướng.

Bởi vì lịch trình của các leader trong Solana là biết trước cho mỗi epoch
open in new window
 (~2 ngày), một nốt RPC sẽ lan truyền Transaction của nó trực tiếp đến leader hiện tại cũng như tiếp sau. Điều này trái ngược với các giao thức gossip khác, ví dụ như Ethereum truyền Transaction một cách ngẫu nhiên và phủ khắp trên toàn mạng. Mặc định, các nốt RPC sẽ thử chuyển Transaction đến các leader cứ mỗi 2 giây cho để khi, hoặc Transaction thành công, hoặc blockhash của Transaction bị quá hạn (150 blocks hoặc ~1 phút 19 giây tại thời điểm viết bài). Nếu hàng đợi các Transaction cần được truyền đi lớn hơn 10,000 transactions
open in new window
, các Transaction đến sau sẽ bị từ chối. Để điều chỉnh cài đặt mặc định, tham khảo các tham số cho câu lệnh tại đây
open in new window
.

Khi một nốt RPC lan truyền một Transaction, nó sẽ cố gắng chuyển Transaction đó để Transaction Processing Unit (TPU)
open in new window
 của một leader.

TPU xử lý các Transaction trong 5 pha riêng biệt:

Fetch Stage
open in new window
SigVerify Stage
open in new window
Banking Stage
open in new window
Proof of History Service
open in new window
Broadcast Stage
open in new window

Hình ảnh được cho phép bởi Jito Labs

Trong 5 pha này, Fetch Stage chịu trách nhiệm cho việc tiếp nhận Transaction. Trong phạm vi Fetch Stage, validator sẽ phân loại các Transaction mới đến dựa theo 3 cổng:

tpu
open in new window
 xử lý các Transaction bình thường như là chuyển token, tạo NFT, và các chỉ thị cho các Program
tpu_vote
open in new window
 tập trung hoàn toàn vào Transaction bỏ phiếu
tpu_forwards
open in new window
 điều hướng các gói tin chưa xử lý đến các leader tiếp theo nếu leader hiện tại không đủ khả năng xử lý hết tất cả các Transaction

Chi tiết hơn về TPU, vui lòng tham khảo bài viết rất xuất sắc của Jito Labs
open in new window
.

#
Khi nào các Transaction bị huỷ

Xuyên suốt hành trình của một Transaction, luôn có một vài tình huống Transaction đó có thể bị làm mất một cách tình cờ do mạng.

#
Trước khi Transaction được xử lý

Nếu mạng làm mất một Transaction, khả năng","[-7.15122074e-02 -3.99498791e-02 -3.74563597e-02 -1.19959205e-01
 -6.98790997e-02 -2.66046561e-02  9.07557458e-02  2.41211690e-02
  3.65175456e-02  5.91858178e-02  1.46562129e-01 -3.50565799e-02
 -9.35745705e-03 -1.13328910e-02  5.88686811e-03 -4.28087898e-02
 -1.69911701e-02  2.96613742e-02 -9.16618854e-02 -7.85795078e-02
 -8.57446492e-02 -7.82507136e-02 -7.06383064e-02 -3.20874304e-02
 -6.03098944e-02 -4.05256413e-02  1.99299250e-02  2.38152798e-02
 -2.29206197e-02 -1.34034500e-01  1.87485553e-02  9.36996266e-02
 -3.94744501e-02  1.17680691e-02  5.75089343e-02  1.61093846e-02
  1.82278901e-02  1.99438836e-02  4.73798960e-02  2.81161367e-04
 -1.05278157e-02 -4.24311906e-02 -5.79032116e-02 -7.26722628e-02
  6.75641447e-02 -1.90072786e-02 -7.82182887e-02  1.39090894e-02
 -3.88255678e-02 -1.43119060e-02 -4.85614501e-02  1.10342525e-01
 -3.13336030e-02  1.23893663e-01 -6.50336966e-02 -1.68171693e-02
 -1.90252345e-02  3.74350901e-04  2.41864938e-02 -7.14682490e-02
 -4.44488376e-02  5.48094586e-02 -3.20557207e-02 -1.67737082e-02
 -4.04004334e-03  6.60929410e-03 -6.17532283e-02 -5.05561307e-02
 -1.03593739e-02  6.77943379e-02  3.87494639e-03 -6.36384189e-02
 -1.04752652e-01  6.61737397e-02 -7.43398815e-02  1.34464391e-02
 -2.30265036e-02  8.85333121e-03  8.08424037e-03 -4.63754497e-02
  9.85604152e-03  6.61540627e-02  2.03207601e-02 -5.44343106e-02
 -1.65600516e-02  6.68985397e-02 -6.46066517e-02  1.49371913e-02
 -4.54838611e-02 -4.46651243e-02  7.95624554e-02  1.25335202e-01
 -2.47449279e-02 -3.61497924e-02  4.13924409e-03 -7.78575763e-02
  6.10575546e-03  9.20046195e-02  3.74422455e-03  3.33062559e-02
  6.36851192e-02  1.61819495e-02 -5.32198772e-02 -6.94552436e-02
 -4.63998765e-02  1.18815759e-02  8.17253739e-02 -9.75370687e-03
  4.81260009e-02  1.41840102e-02 -1.22255564e-01  6.42349757e-03
 -7.62737310e-03 -1.39691114e-01 -4.94739041e-02  5.01915589e-02
 -3.86794843e-02  6.39357343e-02 -3.76488604e-02  3.92610133e-02
  2.40210984e-02  1.58321690e-02 -3.07366308e-02  1.17355846e-02
 -4.49140444e-02 -6.27761260e-02  7.97533914e-02  2.37299440e-32
 -2.21194085e-02  2.41899136e-02 -3.71954292e-02 -7.01151714e-02
  1.47171570e-02  5.93283698e-02 -1.64332762e-02 -3.05819605e-02
 -8.23717415e-02 -3.43234725e-02 -4.53966781e-02 -8.41898173e-02
 -7.95471519e-02 -8.55024159e-02  3.72165293e-02 -4.16756654e-03
  3.00067645e-02 -7.32922927e-02 -1.10033555e-02 -6.29378250e-03
  2.40822230e-02 -8.95933993e-03  4.13737819e-02  1.57798622e-02
  2.27646828e-02 -1.99966691e-02 -7.43966103e-02 -3.59469205e-02
  1.86423603e-02  5.17653935e-02  8.55860859e-02 -5.17637022e-02
 -4.89624664e-02  2.27217078e-02 -1.06722191e-01 -5.10255760e-03
 -2.02979390e-02 -7.77493790e-02 -1.79457869e-02 -6.17711730e-02
 -6.91591948e-02 -2.02780347e-02 -2.04271656e-02  5.55589199e-02
 -3.61052305e-02  4.68346737e-02  1.83185209e-02 -7.87871331e-03
  1.15537606e-02  3.33877467e-02 -3.21836248e-02 -4.59409580e-02
 -3.85537371e-02  2.86961943e-02  4.11624685e-02 -3.75976413e-02
 -1.18803252e-02 -2.99948119e-02  2.37025321e-02  5.61360158e-02
  1.09047825e-02  1.76120903e-02 -9.07785669e-02  3.06296051e-02
 -3.93169150e-02 -7.09368214e-02  3.07489410e-02 -5.22475727e-02
  8.87389556e-02 -9.32183042e-02 -6.48065135e-02 -1.75306220e-02
  6.57574646e-03  8.45216438e-02 -4.65154089e-02 -5.31546324e-02
  1.92677043e-02  7.38454866e-04 -4.36573476e-03  2.00321060e-02
 -2.72223204e-02 -3.96554619e-02  3.63691300e-02 -6.65831473e-03
  6.50046542e-02  1.92082413e-02  3.77035104e-02 -2.73070969e-02
  1.92078538e-02  5.65254241e-02 -1.44287702e-02  3.59636955e-02
  9.27648619e-02  6.54919446e-02  3.38080674e-02 -2.05861255e-32
  4.23597218e-03 -4.20035189e-03 -7.40796104e-02  7.96056017e-02
  1.81231406e-02  7.00611621e-03 -1.49855390e-02 -8.08887631e-02
  6.87408671e-02 -5.48435040e-02  4.00335295e-03 -2.85431463e-02
  4.83831428e-02  4.95823771e-02  5.56190088e-02 -3.67073119e-02
  2.95136832e-02  4.67536822e-02 -6.54842891e-03  4.77163717e-02
  2.25193938e-03 -3.40506695e-02 -2.12425403e-02  8.36014599e-02
 -2.08096374e-02  4.61171865e-02  1.21692913e-02  1.46554997e-02
  1.17974225e-02  7.30968490e-02  3.74254398e-02 -4.00234461e-02
 -9.45276543e-02  5.84942736e-02  9.65443847e-04 -1.14758365e-01
  7.67106488e-02  4.24368829e-02 -3.72421592e-02  8.86341631e-02
  5.49848117e-02  1.97507371e-03 -1.48488916e-02 -6.34748414e-02
 -9.92105156e-02 -5.01835346e-02  3.97906750e-02 -3.20548005e-02
 -7.98551738e-02 -1.45447273e-02  9.35387090e-02  5.70084043e-02
  1.10256821e-02 -4.38147224e-03  3.37211639e-02  1.56766027e-01
  3.93315740e-02 -4.76576202e-02 -6.81651607e-02 -3.44700627e-02
  2.16037277e-02  4.19048332e-02 -2.39933794e-03  2.77439095e-02
  1.10696115e-01  4.91209924e-02  4.38727364e-02  3.07326280e-02
  1.84395965e-02 -6.74410537e-02 -5.90465777e-02 -9.14925784e-02
 -1.84284765e-02 -2.44183335e-02  7.05149844e-02 -3.86564410e-03
 -5.33019044e-02 -2.51507084e-03  6.50255829e-02 -2.62286142e-02
 -8.98405910e-02  1.86735336e-02 -2.57446524e-02 -7.02873245e-03
 -1.93719845e-03  1.19400292e-03 -2.55503263e-02 -4.32833564e-03
  5.53624742e-02 -1.75762381e-02  6.18613474e-02 -2.92939786e-02
  4.82511371e-02  4.27584872e-02 -2.05090195e-02 -5.93879825e-08
 -1.20262410e-02 -6.85259774e-02  4.08083647e-02  2.13681962e-02
  8.08465630e-02 -1.66494120e-02  5.10062277e-02 -4.99158576e-02
  1.52275311e-02  6.73013031e-02  5.12561873e-02  4.02659029e-02
 -7.14276358e-02 -5.92113063e-02  3.59693579e-02  4.35251370e-02
  4.06771339e-02  1.83041189e-02  3.52901267e-03 -8.08996409e-02
  6.72914311e-02  1.69657711e-02 -1.02515640e-02  6.96475878e-02
 -4.30125296e-02  1.97765473e-02  1.74899399e-02  7.50497878e-02
 -1.56808347e-02  2.65070107e-02  4.97321365e-03 -6.70267716e-02
  2.73709781e-02 -4.18916307e-02  7.22632855e-02  3.78342941e-02
  2.58421199e-03 -1.03952652e-02 -2.26891283e-02  9.41361934e-02
  6.31252453e-02  2.19523106e-02  3.04772910e-02 -1.94171499e-02
  4.30441797e-02  2.74974741e-02  2.86169630e-03 -6.72529042e-02
  2.44001262e-02 -2.83487123e-02 -3.72463427e-02 -3.66220549e-02
  1.17035814e-01  2.33365074e-02 -4.45470214e-03 -2.81601194e-02
  3.70040014e-02  3.10040992e-02  3.63916717e-02 -1.54947340e-02
  3.01591959e-02  8.28715712e-02  1.74157985e-03 -3.06628123e-02]"
"gần như nó sẽ bị huỹ trước khi được xử lý bởi một leader. Mất gói tin
open in new window
 trong UDP là một nguyên nhân đơn giản nhất dẫn đến tình trạng trên. Trong thời gian mạng nghẽn, các validator có thể đã bị quá tải với số lượng khổng lồ các Transaction cần xử lý. Trong khi các validator được trang bị tpu_forwards để điều hướng các Transaction đến sau, thì vẫn luôn có một giới hạn số lượng các gói tin được điều hướng
open in new window
. Hơn nữa, mỗi lần điều hướng sẽ bị giới hạn trong phạm vị một đơn vị kết nối (hop) giữa các validator. Bởi vậy mà các Transaction được nhận thông qua cổng tpu_forwards sẽ không bao giờ được điều hướng thêm cho các validator khác.

Ngoài ra, cũng có 2 lý do được ghi nhận khác dẫn đến một Transaction bị đánh mất trước khi nó được xử lý. Trường hợp đầu tiên là những Transaction được gửi từ một RPC pool. Thi thoảng, một phần của RPC pool có thể đi nhanh hơn đáng kể phần còn lại của pool. Vấn đề này thường gặp khi các nốt trong pool cần làm việc kết hợp cùng nhau. Trong ví dụ này, recentBlockhash
open in new window
 của Transaction được truy vấn từ phần đi nhanh hơn của pool (Máy chủ A). Khi Transaction được gửi đến phần đi chậm của pool (Máy chủ B), các nốt này sẽ không nhận ra blockhash và sẽ vô hiệu hoá Transaction đó. Chúng ta có thể phát hiện lỗi này, nếu lập trình viên kích hoạt việc kiểm tra preflight
open in new window
 lúc gọi sendTransaction.

Một mạng bị rẽ nhánh tạm thời cũng có thể dẫn đến Transaction không hợp lệ. Nếu một validator bị chậm trong quá trình trung chuyển các block tại pha Banking Stage, rất có thể nó sẽ rẽ sang một nhánh thiểu số. Khi một Transaction được tạo, có khả năng Transaction tham chiếu đến recentBlockhash mà chỉ hợp lên trên nhánh thiểu số. Sau khi Transaction này được gửi đi, mạng lưới có thể nhảy về nhánh chính từ nhánh thiểu số trước khi Transaction được xử lý. Trong tình huống đó, Transaction sẽ không hợp lệ vì mạng không thể tìm thấy blockhash.

#
Sau khi Transaction được xử lý và trước khi được ghi vào block

Trong trường hợp một Transaction tham chiếu recentBlockhash từ một nhánh thiểu số, nó vẫn có thể được xử lý bính thường. Tuy nhiên trong trường hợp đó, nó chỉ được tiếp nhận bởi leader trên nhánh thiểu số. Khi leader này cố gắng chia sẻ những Transaction mà nó đã xử lý với phần còn lại của mạng, lỗi đồng thuận sẽ xảy ra với phần cồng các validator khác đang duy trì trên nhánh chính và không hề nhận ra nhánh thiểu số. Lúc đó, Transaction sẽ bị xem là không hợp lên trước khi được đóng vào block.

#
Xử trí với Transaction bị huỷ

Trong khi các nốt RPC sẽ cố gắng lan truyền","[-7.81090632e-02 -2.69285664e-02 -2.63677053e-02 -1.10315822e-01
 -6.83545172e-02 -2.21003406e-02  3.61196436e-02  1.50160501e-02
  9.32587460e-02  5.95431812e-02  1.33874133e-01 -7.22773597e-02
 -3.25306803e-02  4.98013943e-03  2.16534976e-02 -3.31763662e-02
 -5.09194285e-02  4.46175784e-02 -6.44536018e-02 -4.73580584e-02
 -4.80283573e-02 -3.40359844e-02 -6.48480952e-02 -1.54132862e-02
 -4.75373156e-02 -2.51242239e-02 -1.05801818e-03  5.85356280e-02
  2.64203958e-02 -1.31178886e-01  1.19444132e-02  1.50708184e-01
 -4.53000516e-02 -3.44229932e-03  8.55071023e-02  4.84088175e-02
 -1.37150846e-02 -2.74944231e-02  3.86324190e-02 -1.19116167e-02
 -1.41597521e-02 -5.04433177e-02 -3.91425453e-02 -1.23105824e-01
  3.25946882e-02 -3.04427650e-02 -5.62296063e-03  4.90473867e-05
 -3.95835303e-02 -2.53946390e-02 -7.36288726e-02  8.51999372e-02
 -3.61446775e-02  7.11034909e-02 -8.52496102e-02  5.58553590e-03
  1.50771486e-02  1.71111003e-02  2.92525981e-02 -4.06801626e-02
 -3.56356315e-02  3.46787870e-02 -5.25146797e-02 -4.44079824e-02
 -1.64421108e-02  5.48130274e-03 -7.76182264e-02 -4.06306945e-02
 -2.66133901e-02  4.66454811e-02 -1.09376265e-02 -4.82554734e-02
 -9.27977115e-02  4.32591103e-02 -7.03869462e-02  1.24243945e-02
 -2.62704119e-02  3.09318583e-03  1.79252680e-03 -9.00175944e-02
  4.82380316e-02  7.89334178e-02  5.53233363e-02 -8.78102556e-02
 -1.09181097e-02  6.81357533e-02 -7.39833862e-02  3.82975154e-02
  5.15142456e-03 -1.81668065e-02  9.49132517e-02  8.79483819e-02
  7.35005783e-03 -2.87478045e-03  6.91927895e-02 -8.28326941e-02
 -1.91127101e-03  8.95213634e-02  3.11339237e-02  2.24466808e-02
  7.11190030e-02  4.05772328e-02  1.56327542e-02 -2.41993442e-02
 -2.72201169e-02  4.47931066e-02  9.14069414e-02  7.89190549e-03
  5.48518486e-02  1.47861289e-02 -9.26104635e-02  2.30736309e-03
  9.46763065e-03 -1.49801672e-01 -5.10744750e-02  5.78190275e-02
 -6.88319206e-02  3.33884172e-02 -5.38052469e-02  1.62215568e-02
  1.06796352e-02 -2.69034300e-02 -3.34459096e-02 -8.26725643e-03
 -3.43111828e-02 -9.66803357e-02  8.76804143e-02  2.25643899e-32
  1.31684486e-02  4.47873436e-02 -2.71166041e-02 -5.05988263e-02
  3.33560072e-02  4.93222661e-02 -4.02712077e-02 -4.94105555e-02
 -7.11027160e-02 -6.38471544e-02 -4.01316881e-02 -1.32465623e-02
 -7.31580108e-02 -7.70387352e-02  3.30868810e-02 -8.24155007e-03
  4.06543836e-02 -7.06092268e-02  1.17638335e-02  2.86344741e-03
  5.49313203e-02 -3.15829776e-02  3.12615819e-02 -3.97310406e-03
  1.56149743e-02  8.20548739e-03 -2.68781837e-02 -4.70219590e-02
 -4.50535901e-02  4.71288487e-02  5.39242998e-02 -2.21287385e-02
 -2.15683151e-02 -5.75421564e-03 -4.95034270e-02  1.96204986e-02
 -3.29004228e-02 -5.32118306e-02 -8.06853548e-03 -4.33928147e-02
 -3.08713038e-02 -3.29913618e-03 -1.62995292e-03  8.07189196e-02
 -3.43663134e-02  9.60587338e-03  1.07040955e-02 -1.01138931e-02
  5.07770404e-02  6.26442805e-02 -3.78391407e-02 -5.62275909e-02
 -1.40912473e-01  2.09805882e-03  3.10289208e-02 -5.69014549e-02
 -2.53679212e-02  9.68324393e-03  2.55772052e-03  5.82392253e-02
  3.05937231e-02  1.53060639e-02 -6.50280118e-02  5.45916446e-02
 -1.86587926e-02 -8.95769522e-02 -3.24441753e-02 -3.24634947e-02
  5.37581332e-02 -9.26187560e-02 -5.27164303e-02 -4.16602604e-02
  1.23520531e-02  8.30311179e-02 -2.15714071e-02 -6.70324415e-02
  3.93477939e-02  5.05571224e-05 -1.82451773e-02 -1.27508678e-02
 -4.11350429e-02 -2.42293514e-02  9.27862991e-03 -2.82920878e-02
  6.43168911e-02  4.01607156e-02  3.88284028e-02 -1.50583349e-02
 -2.22633518e-02  3.86418775e-02 -3.87904197e-02  3.68360989e-02
  8.62628594e-02  7.25022629e-02 -5.74452989e-03 -1.99308755e-32
  3.71343992e-03  2.53646844e-03 -6.20027483e-02  7.23306984e-02
 -1.81438029e-02  4.46158927e-03  4.09680158e-02 -5.74519671e-02
  7.24750385e-02 -5.62366610e-03 -3.22069228e-02 -3.80432755e-02
  7.70479515e-02  2.84532607e-02  4.80412655e-02 -5.15342504e-02
  2.28260700e-02  2.38683950e-02 -2.96532977e-02  5.45246936e-02
  4.16637249e-02 -3.99823710e-02 -3.54308710e-02  7.22618774e-02
 -5.49436174e-02  5.89334667e-02  2.81121433e-02  4.55063162e-03
 -3.00134579e-03  9.99613777e-02  2.86312737e-02 -6.41851947e-02
 -8.87037218e-02  9.57775488e-02  4.24033031e-02 -1.16898917e-01
  7.88072720e-02  4.62188125e-02 -1.09743606e-02  9.40592885e-02
  3.29268798e-02 -1.19603099e-02 -5.61074074e-03 -3.69828418e-02
 -8.72250795e-02 -4.94536906e-02  3.83265875e-02 -4.10607457e-02
 -7.42980316e-02 -5.60467057e-02  1.26041368e-01  6.89553544e-02
  2.17813756e-02 -1.58576686e-02  2.04125326e-02  9.42372754e-02
  7.35115334e-02 -3.44286077e-02 -9.38284695e-02 -4.33092229e-02
  1.87509842e-02  5.89282811e-02  3.99761740e-03  3.16376053e-03
  1.11904338e-01  2.05875635e-02 -4.59004019e-04  2.12118924e-02
  4.07995619e-02 -1.04093619e-01 -7.55645754e-03 -9.28584486e-02
 -6.41237348e-02 -5.18700182e-02  5.76023087e-02 -3.52057330e-02
 -2.71746218e-02 -2.67731771e-02  6.06706068e-02 -4.78060693e-02
 -6.94062114e-02  2.78833346e-03 -9.73224174e-03 -2.28838082e-02
 -1.85027272e-02  2.78575774e-02  5.48735443e-05 -8.13010987e-03
  4.46890071e-02  1.78848561e-02  7.17160255e-02  8.84498190e-03
  7.48833790e-02  4.02439833e-02 -3.60143068e-03 -5.80720467e-08
 -5.75057678e-02 -9.89959687e-02  3.79172899e-03  1.80824231e-02
  6.28928989e-02 -4.23781089e-02  3.81307118e-02 -4.40551676e-02
  1.47457281e-02  7.38853589e-03  3.79834808e-02  3.08841188e-02
 -4.38257903e-02 -6.33322969e-02  2.98607890e-02  6.73409253e-02
  3.24590988e-02 -1.48833543e-03 -8.37486051e-03 -7.61692673e-02
  5.69513403e-02 -1.42672108e-02  1.52334599e-02  6.92799240e-02
 -7.24450946e-02  2.84046978e-02 -7.31470250e-03  8.62525403e-02
 -2.26295032e-02  2.57742051e-02  1.75646003e-02 -5.99705987e-02
  4.61493572e-03 -2.40013152e-02  6.22663982e-02  1.57827139e-02
  1.38101196e-02 -3.75094861e-02 -5.21291420e-02  8.79762247e-02
  5.63369058e-02  1.31601067e-02  4.48574498e-03 -1.94144081e-02
  6.87303441e-03  5.99082978e-03  2.34276466e-02 -8.22461098e-02
  3.22822444e-02 -8.37974530e-03 -2.81739552e-02 -3.31247002e-02
  7.38191977e-02  5.59010617e-02 -2.93798000e-02 -1.20416563e-02
 -5.30840969e-03  3.68610658e-02  6.59650192e-02 -3.47269047e-03
  5.93549646e-02  1.10561967e-01 -1.42054481e-03 -4.06146459e-02]"
"các Transaction, thuật toán được dùng thường chỉ đáp ứng các nhu cầu phổ biến và không tương thích với các nhu cầu đặc biệt. Để dự phòng trong tình huống mạng nghẽn, các lập trình viên sẽ phải tuỳ chỉnh thuật toán lan truyền trong ứng dụng của họ.

#
Nghiên cứu sendTransaction

Khi cần gửi Transaction, phương thức sendTransaction trong RPC là công cụ cơ bản nhất sẵn có cho lập trình viên. sendTransaction chỉ chịu trách nhiệm cho việc trung chuyển từ người dùng đến một nốt RPC. Nếu nốt đó nhận được Transaction, sendTransaction sẽ trả về id của Transaction và có thể dùng nó để theo dõi tiến độ của Transaction. Một phản hồi thành công từ RPC không đồng nghĩa với việc Transaction đó đã được tiếp nhận, xử lý và đóng vào một block trên mạng lưới Solana.

TIP

#
Tham số của Request
transaction: string - Transaction đã được ký đầy đủ và được mã hoá lại thành chuỗi ký tự
(optional) configuration object: object
skipPreflight: boolean - Nếu true, bỏ qua quá trình kiểm tra Transaction bằng preflight (Mặc định: false)
(optional) preflightCommitment: string - Cấp độ Commitment
open in new window
 được dùng cho mô phỏng preflight trong ngân hàng chỗ trống (Mặc định: ""finalized"").
(optional) encoding: string - Mã hoá được dùng cho dữ liệu trong Transaction. Hoặc ""base58"" (chậm), hoặc ""base64"". (Mặc định: ""base58"").
(optional) maxRetries: usize - Số lượng tối đa lần thử lại cho nốt RPC gửi Transaction đến các leader. Nếu tham số này không được đề cập, nốt RPC sẽ thử lại cho đến khi Transaction thành công hoặc blockhash bị hết hạn.
#
Response
transaction id: string - Chữ ký đầu tiên được nhúng vào trong Transaction. Id của transaction có thể được dùng với getSignatureStatuses
open in new window
 để cập nhật trạng thái mới nhất của Transaction.
#
Tuỳ chỉnh thuật toán lan truyền

Để phát triển thuật toán lan truyền của riêng mình, lập trình viên cần hiểu rõ tham số maxRetries trong sendTransaction. Nếu được khai báo, maxRetries sẽ ghi đè lên giá trị mặc định của nốt RPC và cho phép lập trình viên điều khiển thủ công quá trình thử lại trong phạm vi giới hạn hợp lý
open in new window
.

Một cài đặt phổ biến cho việc thử lại thủ công là tạm lưu lastValidBlockHeight được truy vấn từ getLatestBlockhash
open in new window
. Sau khi lưu lại, một ứng dụng có thể theo dõi blockheight của mạng lưới
open in new window
 và lan truyền Transaction thủ công thông qua thuật toán tuỳ chỉnh. Có một vài ứng dụng sử dụng giải thuật exponential backoff
open in new window
, thì một vài ứng dụng khác ví như Mango
open in new window
 chọn liên tục tái gửi
open in new window
 Transaction với một khoảng thời gian lặp định trước cho đến khi quá hạn.

TS
Press </> button to view full source
import {
  Keypair,
  Connection,
  LAMPORTS_PER_SOL,
  SystemProgram,
  Transaction,
} from ""@solana/web3.js"";
import * as nacl from ""tweetnacl"";

const sleep = async (ms: number) => {
  return new Promise((r) => setTimeout(r, ms));
};

(async () => {
  const payer = Keypair.generate();
  const","[-5.53001128e-02 -3.21772993e-02  1.11409929e-02 -7.42135718e-02
 -8.80221128e-02 -6.89977640e-03  7.73037970e-02 -6.73691928e-03
  1.25284314e-01  6.13204651e-02  1.43296346e-01 -6.04673699e-02
 -2.57678013e-02  1.69091448e-02  2.42597684e-02 -8.60285312e-02
 -3.36498804e-02  1.23443548e-04 -9.99517441e-02 -1.77274626e-02
 -3.55528034e-02 -7.97775947e-03 -1.12718837e-02 -1.12819588e-02
 -3.45796421e-02 -2.38463227e-02 -1.43752899e-02  1.09188491e-02
 -2.07105628e-03 -9.00245383e-02  1.33668156e-02  1.21068627e-01
 -3.84181589e-02  1.19252317e-02  4.03803438e-02  3.70605662e-02
  1.19533176e-02 -4.75238524e-02  2.67069936e-02 -1.38214035e-02
 -6.58147633e-02 -2.90562175e-02 -4.67954241e-02 -7.17164427e-02
  2.23896317e-02 -9.68208257e-03 -3.83975320e-02 -4.03993996e-03
 -9.46430955e-03 -4.09320183e-02 -6.07769266e-02  1.01477377e-01
 -1.66754406e-02  1.41757339e-01 -9.16791186e-02 -3.10639348e-02
 -1.02313254e-02 -6.42292434e-04  2.08393261e-02 -8.36688057e-02
 -7.48029817e-03  6.33929521e-02 -2.42330059e-02 -4.85768616e-02
 -1.20000932e-02 -1.71798356e-02 -4.40018140e-02 -2.13694163e-02
 -2.19204538e-02  5.86039498e-02 -1.07324664e-02 -4.63136025e-02
 -1.31216139e-01  6.53513968e-02 -6.01246320e-02  3.95320691e-02
 -3.55133507e-03 -1.86361764e-02 -1.31887048e-02 -9.31344032e-02
 -1.10144308e-02  6.50996789e-02  4.62720431e-02 -8.15818682e-02
 -2.76567023e-02  5.08274734e-02 -7.14041591e-02  5.64306453e-02
 -5.61609119e-02 -5.60812205e-02  7.67014995e-02  5.89707047e-02
  2.33445764e-02 -5.56585863e-02  1.67174712e-02 -1.07826591e-01
 -9.77567118e-03  1.02472335e-01  2.19798740e-02  3.19385119e-02
  8.26954916e-02  8.39210302e-02 -2.83033550e-02 -7.98571557e-02
 -5.95478166e-04  5.54182865e-02  6.31818399e-02 -3.75423133e-02
  3.32339965e-02 -1.78095070e-03 -1.13132581e-01  3.75994295e-02
 -3.56421806e-02 -1.19673215e-01 -7.72485510e-02  9.87572297e-02
 -5.54346479e-02  1.96596216e-02 -5.98085038e-02  8.73156451e-03
 -1.45102795e-02 -3.96656543e-02 -8.77531171e-02  3.72983813e-02
 -6.01058118e-02 -1.06249034e-01  7.40524977e-02  2.27428681e-32
 -6.81348285e-03 -2.61888932e-03  2.00344268e-02 -7.16226622e-02
  2.05822811e-02  9.39736608e-03 -3.57615724e-02 -2.45690420e-02
 -3.78306732e-02 -1.18890442e-02 -2.84878146e-02 -8.11559930e-02
 -5.52629307e-02 -6.21563494e-02  3.76962125e-02 -1.86743475e-02
  1.42232724e-03 -9.04625654e-02  7.34478384e-02  1.15058925e-02
  2.01196317e-02  8.93730577e-03  3.01140901e-02 -8.19201581e-03
  2.45058760e-02 -3.43037359e-02 -6.88356310e-02 -5.34648970e-02
 -2.14819461e-02  3.93572226e-02  7.47058243e-02  6.93774968e-03
 -1.64389256e-02 -1.83630711e-03 -7.76968747e-02 -2.64301039e-02
 -2.86563803e-02 -5.15708663e-02 -1.89471003e-02 -4.27241391e-03
 -1.02562911e-03  1.27476146e-02 -5.03099002e-02  5.62786385e-02
 -1.85867064e-02  8.42097774e-02  2.84771174e-02 -3.74378562e-02
  3.10933869e-02  1.86989643e-02  4.15717810e-02 -2.43852902e-02
 -4.28455733e-02 -1.27508305e-02  3.97563390e-02 -5.29901199e-02
 -1.12013033e-04 -7.28233233e-02  1.82416793e-02  5.57846054e-02
  1.86607875e-02  1.26587115e-02 -1.61817353e-02  4.39369567e-02
 -7.04068765e-02 -9.30164158e-02 -1.37573397e-02 -9.01192706e-03
  3.04101855e-02 -5.45688011e-02 -2.99226604e-02 -3.06025352e-02
 -1.82401091e-02  2.76543107e-02 -1.63393524e-02 -4.61756103e-02
  3.85242477e-02 -6.15471676e-02  4.17034095e-03  5.92359602e-02
 -2.47864351e-02 -1.68089382e-02  2.82297060e-02 -3.00485939e-02
  5.70489578e-02  7.88013116e-02  5.31024933e-02 -3.22648436e-02
 -1.25014279e-02  2.00997218e-02  6.25700084e-03  6.31078705e-02
  8.77646059e-02  5.11691114e-03  4.49874923e-02 -2.02366848e-32
 -9.18613456e-04  3.60213369e-02 -9.41393301e-02  7.72018805e-02
 -4.22705822e-02 -1.21008037e-02  1.58036035e-02 -4.98537123e-02
  9.08964872e-02 -2.97801290e-02 -2.84835650e-03 -6.27902821e-02
  4.15350012e-02  3.07424720e-02  5.12168668e-02 -9.14029125e-03
  5.28975204e-02  2.49082539e-02 -3.15728560e-02  2.15968229e-02
  2.56443280e-03 -5.01803607e-02 -3.40251774e-02  5.39139472e-02
 -3.81063670e-02  3.23847495e-02  1.09607521e-02  4.90052216e-02
  9.86419618e-03  2.92075798e-02  4.23815437e-02 -4.40129414e-02
 -6.05055429e-02  8.68719444e-02  1.73380058e-02 -1.42089725e-01
  1.02970652e-01  5.61700799e-02 -1.68491062e-02  4.45394590e-02
  2.63770111e-02  5.29031828e-03 -1.53844375e-02  2.86569148e-02
 -9.20983553e-02 -5.86575381e-02  8.64905678e-03 -5.85974529e-02
 -1.36998640e-02 -1.40715912e-02  1.32268831e-01  3.84694152e-02
 -6.76156487e-03 -2.45402902e-02  5.88209704e-02  1.57126248e-01
  2.51474082e-02 -8.14585462e-02 -7.35227242e-02 -2.79938709e-02
 -1.78087445e-03  6.45172298e-02 -2.33120215e-03 -1.33246807e-02
  1.38435885e-01  1.21540669e-02  1.58911161e-02  1.50060384e-02
  2.85769626e-02 -7.70028532e-02 -2.44237967e-02 -4.22586910e-02
 -4.69956547e-02 -5.70034571e-02  6.38177171e-02  1.53779015e-02
  2.34958120e-02 -7.26471795e-03  5.14916517e-02 -2.01271884e-02
 -5.13828546e-02 -1.32212387e-02 -2.91708820e-02 -1.03868684e-03
 -2.71004066e-03  3.84244956e-02 -6.45739436e-02 -2.33059891e-05
  2.79007424e-02  6.88157929e-03  3.16990763e-02  1.82428397e-03
  1.07594028e-01 -9.64440126e-03  1.28970537e-02 -5.61284814e-08
  8.60901491e-04 -1.10026978e-01  1.19225858e-02  6.67943200e-03
  9.79261324e-02 -1.65224336e-02  3.26399170e-02 -2.29077097e-02
 -6.75181439e-03  5.24175502e-02 -2.64716847e-03  4.30645570e-02
 -6.63285851e-02 -3.95477861e-02 -2.93789040e-02  3.19780707e-02
  6.68348819e-02 -3.80087793e-02  4.27967450e-03 -8.54495764e-02
  4.81588654e-02 -5.89649100e-03 -2.15652473e-02  3.37793641e-02
 -5.50958924e-02  8.40746518e-03  3.86491790e-02  1.05122767e-01
 -4.26766127e-02 -2.52266154e-02  1.70207974e-02 -8.94770771e-02
 -2.53836382e-02 -2.08055843e-02  9.70963612e-02 -3.53076719e-02
  3.81219983e-02 -1.27996914e-02 -4.12866473e-02  2.70382650e-02
  8.30826908e-02  2.23088171e-02  1.76325049e-02  9.00087040e-03
  5.91434427e-02  2.09473297e-02  6.37925509e-03 -4.54836152e-02
 -1.16053829e-03  1.37073232e-03  9.06766101e-04 -4.69077006e-03
  1.14699759e-01  5.69966584e-02 -2.78517306e-02 -1.89844556e-02
  2.07881555e-02  7.33103678e-02  5.02597466e-02  3.64228385e-03
  7.48412088e-02  7.74153918e-02 -4.80739921e-02 -4.35005203e-02]"
"toAccount = Keypair.generate().publicKey;

  const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");

  const airdropSignature = await connection.requestAirdrop(
    payer.publicKey,
    LAMPORTS_PER_SOL
  );

  await connection.confirmTransaction(airdropSignature);

  const blockhashResponse = await connection.getLatestBlockhashAndContext();
  const lastValidBlockHeight = blockhashResponse.context.slot + 150;

  const transaction = new Transaction({
    feePayer: payer.publicKey,
    blockhash: blockhashResponse.value.blockhash,
    lastValidBlockHeight: lastValidBlockHeight,
  }).add(
    SystemProgram.transfer({
      fromPubkey: payer.publicKey,
      toPubkey: toAccount,
      lamports: 1000000,
    })
  );
  const message = transaction.serializeMessage();
  const signature = nacl.sign.detached(message, payer.secretKey);
  transaction.addSignature(payer.publicKey, Buffer.from(signature));
  const rawTransaction = transaction.serialize();
  let blockheight = await connection.getBlockHeight();

  while (blockheight < lastValidBlockHeight) {
    connection.sendRawTransaction(rawTransaction, {
      skipPreflight: true,
    });
    await sleep(500);
    blockheight = await connection.getBlockHeight();
  }
})();

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54


Khi gọi getLatestBlockhash, ứng dụng nên chỉ rõ mức commitment
open in new window
 mong muốn. Bằng cách đặt commitment là confirmed (đã được bỏ phiếu chọn) hoặc finalized (~30 block sau khi confirmed), ứng dụng có thể tránh được trường hợp đọc blockhash từ một nhánh rẽ thiểu số.

Nếu một ứng dụng truy cập vào những nốt RPC thông qua một máy chủ cân bằng tải, nó có lựa chọn các nốt cụ thể để chia nhỏ tải lượng. Các nốt RPC đáp ứng các yêu cầu thiên về dữ liệu như là getProgramAccounts có thể dễ bị quá tải và bị đồng bộ chậm, cũng như là không thích hợp cho việc điều hướng Transaction. Với những ứng dụng đòi hỏi thời gian đáp ứng Transaction nhanh, nên có một máy chủ chuyên để xử lý duy nhất cho sendTransaction.

#
Cân nhắc khi bỏ qua Preflight

Mặc định, sendTransaction sẽ thực hiện preflight kiểm tra 3 bước trước khi gửi Transaction đó đi. Cụ thể, sendTransaction sẽ:

Xác nhận tất cả các chữ ký là hợp lệ
Kiểm tra blockhash được tham chiếu có nằm trong phạm vi 150 block không
Chạy giải lập transaction trong ngân hàng chỗ trống được định nghĩa bởi preflightCommitment.

Nếu một trong 3 bước trên bị lỗi, sendTransaction sẽ đẩy ra lỗi trước khi gửi transaction đi. Kiểm tra preflight sẽ không đảm bảo các trường hợp mất transaction hoặc là cho phép người dùng xử lý lỗi. Thay vào đó nó đảm bảo các lỗi cơ bản sẽ được kiểm tra trước và khuyến khích các lập trình viên nên giữ nó lại bằng cách gán false cho skipPreflight.

#
Khi nào nên tái ký transaction

Dù cho tất cả nỗ lực gửi lại, thì vẫn có một xác suất mà người dùng bị yêu cầu ký lại transaction đó. Trước khi tái ký bất kỳ một transaction nào, bạn cần đảm bảo rằng transaction trước đó đã hết hạn đối với blockhash. Nếu transaction vẫn còn hiệu lực, cả hai transaction có thể sẽ được xử lý bởi mạng lưới. Điều tương tự cũng có thể xảy ra trong trường hợp người dùng không may gửi","[-9.13780183e-02 -3.32113653e-02 -3.15542817e-02  1.80691909e-02
 -1.15721133e-02 -2.37972289e-02  9.87023339e-02  5.25317043e-02
  4.26433869e-02  8.10146555e-02  8.65059868e-02 -7.03372285e-02
 -3.52510437e-02 -3.81061397e-02 -3.73869389e-02  1.14406468e-02
 -4.20667306e-02 -1.14139803e-01 -3.83195095e-02 -1.12303048e-02
  4.41018082e-02 -7.86279812e-02  3.35556269e-02 -3.19225378e-02
  7.32317269e-02 -6.22746237e-02 -2.51509659e-02 -3.11113447e-02
 -3.31855267e-02 -2.56247856e-02  9.71561223e-02  3.72786485e-02
 -7.38492459e-02 -3.19910385e-02 -2.04410477e-04  4.24351804e-02
  1.67115014e-02  6.35658391e-03  1.23962751e-02 -4.32954133e-02
  5.32987388e-03  2.86588594e-02 -5.84941655e-02  6.33836463e-02
  2.62144976e-03  8.71771295e-03  2.80455798e-02  1.28619686e-01
  2.87867095e-02  9.23788697e-02 -8.62371735e-03  5.45091666e-02
 -6.29069749e-04  5.38997985e-02 -5.62139414e-02  3.17506902e-02
 -1.62137188e-02 -2.49596965e-03  2.60819923e-02 -5.68440408e-02
  6.92476332e-02 -8.22281372e-03 -3.70728411e-03 -7.61701092e-02
 -2.06137449e-02  2.55776774e-02  1.30279837e-02 -3.99430990e-02
 -2.86027957e-02 -1.35779185e-02  3.35869305e-02 -1.43122897e-02
 -3.03167440e-02  7.10880086e-02 -4.01775278e-02 -1.13452114e-02
 -1.17268572e-02  1.72841605e-02 -1.07170500e-01  4.11889516e-02
  1.96799375e-02 -5.06992489e-02 -4.09875959e-02  1.22944228e-02
  7.99320545e-03  1.89703871e-02 -5.08553302e-03 -3.22075607e-03
 -3.12439557e-02 -4.50768583e-02  2.93478696e-03  2.15233099e-02
 -2.12623011e-02 -1.88825056e-02  3.97726893e-02  8.81060865e-03
 -1.46672234e-03  2.28987895e-02 -3.80523726e-02  6.55184835e-02
  6.49884194e-02 -5.21856993e-02 -8.18748921e-02 -2.48947218e-02
  2.74154246e-02 -4.15715948e-02  7.86301941e-02 -4.88172881e-02
 -2.97306944e-02  4.86694761e-02 -1.37772569e-02  4.88734655e-02
  2.53182668e-02  1.11210039e-02 -5.16454056e-02  1.05140820e-01
 -5.50854877e-02 -7.47213233e-03  5.95688336e-02 -1.42923314e-02
 -1.35740899e-02  4.95521501e-02 -6.42464161e-02 -5.36941104e-02
 -2.58225072e-02 -6.05009384e-02  5.47356941e-02  1.20412954e-32
 -2.59783156e-02  1.72635783e-02 -3.33893262e-02 -2.99184695e-02
  1.35407867e-02 -1.40937734e-02  1.32860020e-01  1.68438293e-02
 -3.50618213e-02  9.18528531e-03 -1.07389621e-01 -1.42402634e-01
  5.02868593e-02 -6.82066977e-02 -7.86347464e-02 -3.02034132e-02
  2.40101106e-02  3.19884233e-02  5.47282882e-02  4.85041961e-02
 -5.61984740e-02 -5.49617596e-02 -6.79796143e-03 -1.57487933e-02
  2.22284794e-02  1.52989815e-03 -7.20399767e-02  1.76063217e-02
  3.51314694e-02  3.43291624e-03  7.36136883e-02  3.79511639e-02
  3.09256790e-03  9.02453214e-02  2.22065765e-02 -1.97368860e-03
  2.94089620e-03 -2.02352852e-02 -6.46962300e-02 -5.93542010e-02
  2.98126619e-02 -2.91046891e-02 -1.27689898e-01  5.78020662e-02
 -7.29288682e-02 -5.47708236e-02  2.36928556e-02 -7.22007593e-03
  8.06052461e-02  9.10793990e-03 -4.85675260e-02  2.83151795e-03
  4.57936386e-03 -9.91998985e-02  5.74072674e-02 -1.64030418e-02
 -1.52815869e-02  3.02344784e-02  2.40342487e-02 -2.95052156e-02
 -7.20171304e-03 -4.00367789e-02  1.32139586e-02 -4.49917801e-02
  5.74373920e-03 -2.80555021e-02 -7.80612677e-02 -2.90865358e-02
  6.72389613e-03 -2.57598702e-02 -5.70195876e-02  3.77937481e-02
  2.67547425e-02  6.74909875e-02  9.25132632e-03 -2.64834166e-02
 -4.72446047e-02 -2.33077947e-02 -3.68622802e-02 -3.74002457e-02
  4.04491797e-02  2.01838557e-02 -2.35696114e-03  4.11262140e-02
  2.13848595e-02  1.09356001e-01  3.85738201e-02  5.16261123e-02
 -9.64404549e-03  6.00800896e-03 -3.55148762e-02 -5.43359742e-02
  7.66659295e-03 -9.53375101e-02  6.69917390e-02 -1.04730419e-32
 -1.70444511e-02 -2.95211431e-02 -9.98372138e-02  4.67963852e-02
  1.72359776e-02  6.71715885e-02  3.72477733e-02  5.62131889e-02
 -4.93944995e-02  1.95773821e-02  2.74898726e-02  5.23334779e-02
  9.88978660e-04 -2.33864151e-02  4.84582819e-02 -3.98247689e-02
  9.73297469e-03 -5.15730307e-02  5.15478738e-02 -2.08375100e-02
  3.04081943e-02  3.86114721e-03 -1.54775316e-02  2.44045053e-02
 -1.50834769e-01  1.41804609e-02 -2.57375445e-02  1.13156736e-01
 -4.35263664e-03  9.13266838e-03  3.03266235e-02  5.57428971e-02
 -5.94308972e-02  6.22952953e-02 -7.32035143e-03 -9.39696804e-02
  7.01442212e-02  8.84534717e-02 -3.54003198e-02  6.82706386e-02
  4.35419934e-04 -7.66965970e-02  2.79276557e-02 -4.35151681e-02
  5.94105572e-03 -6.96860850e-02  3.49033959e-02 -2.08390597e-02
  1.47773363e-02 -1.70008105e-03  6.78655282e-02 -6.52594352e-03
 -1.79958586e-02  6.56245798e-02  6.87265396e-02  1.23335339e-01
  8.83983299e-02 -6.87228069e-02  6.16813190e-02 -3.98963615e-02
 -4.08999762e-03 -7.14118034e-02  1.08525261e-01 -4.59810067e-03
  1.34721026e-01 -6.58199831e-04 -1.79142673e-02  2.98204757e-02
  4.24272865e-02  6.27230108e-02 -9.28987041e-02  1.02415541e-02
  3.92714776e-02  2.10394189e-02  1.60504624e-01 -1.08965253e-02
  2.39170510e-02  2.27051266e-02  5.84293082e-02  1.33630708e-02
 -1.04653696e-02 -3.35580483e-02 -7.42965378e-04  5.28611336e-03
  6.03230223e-02 -1.65102966e-02 -2.91985683e-02  1.48991728e-02
 -4.69464995e-02 -8.12988449e-03 -7.34319538e-02 -1.00325264e-01
 -6.47711847e-03 -4.98330891e-02 -2.87642051e-02 -6.74876333e-08
 -3.45320962e-02  8.16534683e-02 -1.87024493e-02  1.87336300e-02
  1.83565672e-02  6.73113391e-02  2.19990611e-02 -6.32771477e-02
 -1.94103699e-02 -1.27600670e-01 -5.17908596e-02  7.85837974e-03
  5.67251705e-02  2.65744124e-02  3.79079916e-02 -1.10303886e-01
 -1.26401857e-02 -4.86260764e-02 -3.09944805e-02 -5.38618825e-02
  4.72473875e-02 -3.02588120e-02 -1.67955384e-02 -3.90698761e-02
  2.48546526e-02  3.88141759e-02  1.01197973e-01  1.21113129e-01
  3.41211557e-02 -6.91323215e-03 -1.02699950e-01 -2.89210700e-03
  4.07185033e-02 -8.85794237e-02 -5.08445613e-02  2.73236763e-02
  2.20125876e-02 -3.86390463e-03  3.90576534e-02  7.03385100e-02
  8.04537535e-02  5.33700138e-02 -9.04784575e-02  4.23965463e-03
  3.36003443e-03  5.43555729e-02  7.78817851e-03  4.00846750e-02
 -2.12494303e-02  6.64172396e-02 -3.83178592e-02 -3.22777070e-02
  4.01545689e-02  4.78670448e-02 -5.17851561e-02 -7.43217841e-02
  5.11206733e-03 -6.27799481e-02 -2.35871729e-02  9.56654828e-03
  9.97226685e-02 -2.92357281e-02 -9.85109806e-02 -1.96536165e-02]"
"2 lần với 2 transaction giống nhau.

Trong Solana, một transaction được xem là đã vô hiệu hoá và an toàn khi giá trị blockhash được tham chiếu đã quá hạn so với lastValidBlock trả về từ hàm getRecentBlockhash. Lập trình viên có thể kiểm tra nhanh chóng giá trị blockhash thông qua hàm isBlockhashValid
open in new window
. Một khi blockhash đã quá hạn, người dùng có thể tái ký trên giá trị blockhash mới và hợp lệ.

#
Lời cảm ơn

Rất cảm ơn Trent Nelson, Jacob Creech
open in new window
, White Tiger, Le Yafo, Buffalu
open in new window
, và Jito Labs
open in new window
 vì đã đọc và góp ý cho bài viết. # Đề xuất Kiểm thử ParityKhi kiểm thử chương trình, chúng ta muốn chắc rằng chương trình sẽ chạy như nhau trên mọi môi trường nhằm đảm bảo về cả chất lượng sản phẩm cũng như ta tạo giá trị kỳ vọng.# Có thể bạn chưa biếtNhững điều có thể bạn chưa biếtĐề xuất là không bắt buộc cho các validator trên Solana và cần được validator kích hoạt để có thể được sử dụng.Đề xuất có thể được kích hoạt bởi một mạng (ví dụ như testnet) trong khi vẫn vô hiệu trên mạng khác (ví dụ như mainnet-beta).Tuy nhiên, khi chạy chế độ mặc định solana-test-validator dưới máy, tất cả các đề xuất sẽ được tự động kích hoặt và sẵn sàng thực thi. Kết quả là khi kiểm thử trên máy có thể sẽ sai khác với khi triển khai chương trình và kiểm thử trên các mạng Solana khác!# Tình huống giả địnhGiả sử bạn có một Transaction chưa 3 chỉ thị và mỗi chỉ thị sẽ tiêu tốn xấp xỉ khoảng 100,000 đơn vị tính toán (CU). Khi chạy trên phiên bản Solana 1.8.x, bạn sẽ thấy mức tiêu thụ CU của các chỉ thị như sau:Chỉ thịCU lúc bắt đầuThực thiCU còn lại1200,000-100,000100,0002200,000-100,000100,0003200,000-100,000100,000Trong phiên bản Solana 1.9.2, có một đề xuất được gọi là 'transaction wide compute cap'. Để xuất này nói rằng một Transaction bắt đầu với 200,000 CU mặc định và tất cả các chỉ thị trong Transaction sẽ tiêu thu cộng dồn ngân sách CU đó. Thử chạy lại cùng Transaction nhưng với phiên bản mới sẽ cho ra kết quả rất khác:Chỉ thịCU lúc bắt đầuThực thiCU còn lại1200,000-100,000100,0002100,000-100,000030FAIL!!!FAIL!!!Vãi! Nếu bạn không biết cái này thì có khả năng cao là bạn sẽ cảm thấy cực dị khi mà bạn chả thay đổi gì trong Transction nhưng devnet thì hoạt động ngon lành còn trên máy thì toàn là lỗi?!?Thực ra vẫn có các để tăng ngân sách CU cho một Transaction, giả dụ như là 300,000 CU, để làm giải pháp tình thế. Nhưng điều đó cho thấy đề xuất Kiểm thử Parity sẽ cho phép bạn chủ động tránh những phiền hà trên.There is the ability to increase the overall Transaction budget, to lets say 300_000 CU, and salvage your sanity but this demonstrates why testing with Feature Parity provides a proactive way to avoid any confusion.#  Đề","[-1.08304031e-01 -3.70857045e-02 -2.59595865e-04 -1.34737849e-01
 -8.37461054e-02  2.46758317e-03  1.11923195e-01 -7.26712542e-03
  7.22314268e-02  2.68205255e-02  1.47412211e-01 -9.20550898e-02
 -4.66150381e-02 -2.92999651e-02  3.67177464e-02 -2.34675799e-02
 -2.35169334e-03  1.33798225e-02 -8.33914503e-02 -6.16192706e-02
 -2.25788578e-02 -5.07613569e-02 -4.53621782e-02 -1.84661467e-02
 -6.92727640e-02  4.52216901e-02 -3.15675922e-02  3.91977429e-02
  5.98386601e-02 -5.68542555e-02  1.71716642e-02  1.66421086e-01
 -4.07677665e-02  2.06628256e-02  7.54579902e-02  6.99534360e-03
  5.23533626e-03  1.24230923e-03  3.77850905e-02  3.45645659e-02
 -1.94420349e-02 -2.93437447e-02 -3.08656190e-02 -1.11478403e-01
  8.77793878e-02 -6.55959267e-03 -1.64800305e-02  3.39879692e-02
  1.10712452e-02 -3.48952562e-02 -8.51463675e-02  9.42489058e-02
  2.00373810e-02  1.12816937e-01 -5.28392233e-02 -2.85355281e-02
 -1.35361655e-02  3.58701795e-02  1.85951442e-02  2.38603423e-03
 -4.98423092e-02  3.29745002e-02 -1.39125986e-02 -2.83198711e-02
  1.48174949e-02 -2.13243067e-02 -6.16634414e-02 -3.05998363e-02
 -4.23678942e-03  8.54566321e-02 -6.41683862e-03 -1.63841620e-02
 -8.66169035e-02  5.83303533e-02 -6.49338067e-02  9.46424808e-03
 -3.45798656e-02  1.14232523e-03 -2.95521691e-03 -1.36425212e-01
  3.35856304e-02  1.44386785e-02  7.63583332e-02 -7.78515339e-02
 -4.81682308e-02  4.54055555e-02 -7.68065453e-02  3.90394293e-02
  3.75277060e-03 -3.16031128e-02  5.42897508e-02  8.57704505e-02
 -2.52784863e-02  8.21716432e-03  7.40341330e-03 -8.31454396e-02
  1.34005612e-02  8.20380598e-02  4.59235907e-03  6.89869449e-02
  7.43507296e-02  3.82565446e-02 -9.32377856e-03 -6.35528564e-02
 -3.79590616e-02  3.08387401e-03  7.68770874e-02  1.27434218e-02
  5.46731167e-02 -4.98770876e-03 -7.84037039e-02  1.70848556e-02
  2.09431853e-02 -9.51817259e-02 -4.47275750e-02  1.91474687e-02
  9.41757392e-03 -1.14914831e-02 -3.07691768e-02  6.33154958e-02
  2.46332027e-02 -3.68990302e-02 -1.03441194e-01 -2.77057122e-02
 -7.60439262e-02 -6.02651648e-02  1.00732945e-01  2.15144295e-32
  5.25872409e-02  4.53096479e-02  2.14431202e-03 -7.22543821e-02
  3.29944789e-02  2.44719945e-02 -4.12010141e-02 -4.11121286e-02
 -8.59909505e-02 -5.96289430e-03 -8.02748092e-03 -1.10412113e-01
 -8.92164186e-02 -7.12185130e-02  7.08564324e-03  1.92932542e-02
  8.81522149e-03 -1.07130334e-01  1.72813889e-02 -3.56060117e-02
  4.06781361e-02  2.42812820e-02  2.03346759e-02  1.31243765e-02
  5.47305942e-02  1.54740978e-02 -1.34740202e-02 -9.96690243e-02
 -1.85773186e-02  7.06007108e-02  4.59399223e-02 -2.17049289e-02
 -1.70620810e-02 -1.08529562e-02 -1.04184590e-01 -1.20576005e-02
 -1.90688614e-02 -6.41154423e-02 -2.01793984e-02 -5.62346317e-02
 -2.51654945e-02 -3.35309729e-02 -5.20464554e-02  6.24837773e-03
 -3.99804488e-02  1.20822415e-02 -3.51661793e-03 -4.38026674e-02
  9.81201511e-03  5.96951053e-04 -9.90294572e-03 -5.67882732e-02
 -1.07097961e-01  1.82794984e-02 -2.41875136e-03 -5.79331145e-02
  5.49737085e-03 -3.70865613e-02  2.26059798e-02  5.39312251e-02
  5.16439322e-03 -1.69945080e-02 -4.77928817e-02  3.81075181e-02
 -2.88285147e-02 -6.72698393e-02 -2.96442807e-02 -3.86217572e-02
  1.43967883e-03 -4.01513986e-02 -5.53172156e-02 -6.77079931e-02
  2.63829455e-02  3.56206410e-02  1.40899001e-02 -3.37570496e-02
  2.20169909e-02 -2.44938899e-02 -1.42697366e-02  6.89434558e-02
 -1.21062780e-02 -7.10820779e-03  2.75578769e-03 -3.91190313e-02
 -3.04449961e-04  5.74233867e-02  9.13709849e-02 -7.99737871e-02
 -3.64079587e-02  5.21899387e-02 -6.85821995e-02  5.19070029e-02
  1.13837264e-01 -1.56222889e-02 -1.43616460e-02 -1.84696920e-32
 -2.47550011e-02  6.57236949e-02 -6.66866302e-02  5.49953729e-02
 -1.67812612e-02 -1.38768023e-02  3.88699397e-02 -1.94336884e-02
  8.00586492e-02 -1.48714324e-02 -1.75540743e-03 -4.74144816e-02
  1.73436757e-02  7.02735335e-02  4.64314632e-02  4.96920086e-02
  9.55408663e-02  2.91646924e-02  2.00932170e-03  3.21239941e-02
  3.02428957e-02 -4.62051965e-02 -2.25257967e-02  9.73205790e-02
 -4.52971831e-02  3.24585550e-02  6.82388097e-02  4.48982716e-02
  1.75092779e-02  5.32545038e-02 -5.02635539e-03 -1.12296700e-01
 -8.10644999e-02  7.91331604e-02  3.18772830e-02 -8.07521716e-02
  1.03401944e-01  6.52900571e-03 -8.89158696e-02  2.18111351e-02
  1.83303794e-03 -3.15391459e-02 -3.80820632e-02 -1.59473624e-02
 -5.96484356e-02 -2.02450491e-02 -9.56470467e-05 -2.55194376e-03
 -1.18719354e-01 -5.96697852e-02  1.26718819e-01  4.05249260e-02
 -1.44655723e-02  4.11312841e-02  5.15561877e-03  5.88978454e-02
  4.16028453e-03 -4.06517796e-02 -7.55363479e-02 -6.95512667e-02
  1.67588666e-02  1.63373239e-02 -4.52095270e-02 -6.24945946e-02
  9.52423215e-02  2.36061867e-02  5.22255488e-02  3.24378386e-02
  2.69882437e-02 -8.14843029e-02 -2.05568597e-02 -2.44216826e-02
 -3.17244716e-02 -2.63210144e-02 -5.85443387e-03  3.28164883e-02
 -6.03891211e-03 -3.41756386e-03  3.78085487e-02 -1.46921556e-02
 -6.30784035e-02 -1.46922078e-02 -1.42510878e-02  5.02416049e-04
  3.60849835e-02  7.15653151e-02 -2.94259582e-02  4.29419950e-02
  6.16994798e-02 -3.31472605e-02  4.72500809e-02 -3.54213663e-03
  3.92228849e-02  2.72494201e-02 -2.70522367e-02 -5.72813832e-08
 -4.79566120e-02 -1.19067028e-01  2.55719433e-03  5.37199713e-03
  3.81907038e-02 -6.55415058e-02  6.06564581e-02 -2.09424775e-02
  3.26413214e-02  8.44202470e-03  7.27513209e-02  4.78547662e-02
  2.90813670e-02 -1.88657511e-02  8.04079883e-03  7.19308779e-02
  3.20896432e-02 -1.96297979e-03  2.00622883e-02 -6.42982647e-02
  8.30705613e-02  3.57159995e-03  3.99499945e-02  6.47462159e-02
 -7.26609528e-02  5.40673062e-02 -1.96271092e-02 -1.38280746e-02
 -2.91413516e-02 -1.82434283e-02  1.91698465e-02 -1.02311587e-02
  2.23054551e-02 -7.47552048e-03  6.19714670e-02 -1.02507137e-02
 -7.78872380e-03 -1.62931923e-02 -1.15406737e-02  6.85930103e-02
  7.93351308e-02 -6.80226972e-03  1.46141406e-02 -1.09444680e-02
  1.56538896e-02 -1.47919534e-02  5.40715642e-02 -3.31960544e-02
  4.34908457e-02 -4.13273349e-02 -5.69910780e-02 -9.68361553e-03
  1.25410706e-01  4.66925912e-02  1.16504729e-02 -4.66006584e-02
  3.64237875e-02  3.04372273e-02  4.80581038e-02  1.85579844e-02
  7.65969455e-02  6.79961815e-02 -8.11932907e-02 -1.37817040e-02]"
"xuất Trạng tháiRất dễ để kiểm tra những đề xuất nào đang được kích hoạt cho từng môi trường với câu lệnh solana feature status.solana feature status -ud   // Displays by feature status for devnet
solana feature status -ut   // Displays for testnet
solana feature status -um   // Displays for mainnet-beta
solana feature status -ul   // Displays for local, requires running solana-test-validator
1234Khác hơn, bạn cũng có thể sử dụng công cụ scfsd để quan sát cùng lúc trạng thái của tất cả các môi trường. Bên dưới là một phần kết quả trả ra, bạn cũng không cần solana-test-validator để chạy công cụ trên:# Kiểm thử ParityNhư đã lưu ý bên trên, solana-test-validator sẽ tự động kích hoạt tất cả các để xuất. Để trả lời cho câu hỏi ""Làm thế nào tôi có thể kiểm thử chương trình dưới máy với môi trường địa phương như là môi trường devnet, testnet, hay kể cả mainnet-beta?"".Lời đáp: Một cài đặt trong phiên bản Solana 1.9.6 cho phép bạn vô hiệu hoá các đề xuất:solana-test-validator --deactivate-feature <FEATURE_PUBKEY> ...
1# Ví dụ đơn giảnGiả sử bạn có một chương trình đơn giản chỉ in ra những gì nó nhận. Bạn đa kiểm thử một Transaction với 2 chỉ thị cho chường trình đó.# Khi tất cả các đề xuất đều kích hoạtBạn khởi chạy một validator trên của sổ lệnh:solana config set -ul
solana-test-validator -l ./ledger --bpf-program target/deploy/PROGNAME.so --reset`
12Ở một cửa sổ lệnh khác, bạn in kết quả đầu ra:solana logs
1Sau đó bạn thử gửi một Transaction. Bạn sẽ thấy kết quả in ra ở cửa sổ lệnh tương tự như sau (đã được điều chỉnh để dễ đọc hơn):Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[1]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 187157 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success[
12345678Bởi vì đề xuất 'transaction wide compute cap' được mặc định tự động bật, bạn sẽ thấy rằng mỗi chỉ thị sẽ trừ tiếp vào CU từ ngân sách 200,000 CU cho một Transaction từ đầu.# Vô hiệu một vài đề xuấtTrong lần này, chúng ta muốn chạy với cơ chế quản lý CU giống y với chạy trên devnet. Sử dụng công cụ được mô tả trong Feature Status để vô hiệu hoá transaction wide compute cap và gán cờ --deactivate-feature trong lúc khởi chạy validator.solana-test-validator -l ./ledger --deactivate-feature 5ekBxc8itEnPv4NzGJtr8BVVQLNMQuLMNQQj7pHoLNZ9 --bpf-program target/deploy/PROGNAME.so --reset`
1Giờ chúng ta sẽ thấy kết quả trả ra cho từng chỉ thị sẽ có ngân sách CU riêng và bằng 200,000 CU (đã được điều chỉnh để dễ dọc) và cũng chính là cài đặt hiện hành trên các môi trường khác.Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
12345678# Kiểm thử Parity Đầy đủBạn có thể cài đặt Parity Đầy đủ với một môi trường cụ thể bằng cách chỉ rõ đề xuất","[-8.40500072e-02 -5.81687242e-02 -6.16636453e-03 -7.79816583e-02
  2.77151112e-02 -2.49530654e-02  4.19644974e-02  1.65871978e-02
 -2.26082318e-02 -8.79457314e-03  8.71147513e-02 -9.13939476e-02
 -3.29018757e-03  4.27109562e-03  5.27486205e-02 -2.48775184e-02
 -4.36826646e-02  1.22350492e-02 -8.21920261e-02 -4.76675704e-02
  1.44779971e-02 -5.12598082e-02 -7.49613196e-02 -3.58498804e-02
 -6.53998777e-02  2.85909958e-02  5.97906252e-03  1.05424067e-02
  5.45003451e-02 -8.25497285e-02  1.25279790e-02  1.55763656e-01
 -1.79713275e-02  4.10056151e-02  9.56462920e-02  8.94665811e-03
  4.14828444e-03 -3.23021263e-02 -3.60312089e-02 -2.35581994e-02
 -1.67340357e-02 -5.76608591e-02 -2.28718631e-02 -9.51608717e-02
  1.11672856e-01 -7.14840442e-02 -1.57667566e-02 -3.08257639e-02
 -1.63610224e-02 -4.06760052e-02 -2.60722302e-02  5.60374632e-02
  6.75777555e-04  1.00466542e-01 -1.00108841e-02  1.17729614e-04
 -6.31995965e-03  9.96682420e-03  5.74668832e-02 -4.00818586e-02
  3.48078739e-03  2.39307042e-02 -3.89107689e-02 -3.40730548e-02
  2.70738099e-02 -2.38007978e-02 -3.61856855e-02 -9.83338729e-02
  2.07927488e-02  1.98382828e-02 -4.71209995e-02 -4.42581670e-03
 -4.93977368e-02  8.05259198e-02 -8.76579434e-02  4.69888337e-02
  1.47014987e-02 -1.49042974e-03  2.76000053e-03 -5.37965074e-02
  1.86630134e-02  6.13835566e-02  6.29031584e-02 -3.29240151e-02
  3.76059152e-02  5.53228669e-02 -6.26003072e-02 -1.82138616e-03
 -7.67130824e-03 -1.38246072e-02  8.91191140e-02  6.26395643e-02
 -6.09138561e-03  3.96274105e-02 -1.90804489e-02 -3.97205949e-02
  2.99554747e-02  3.06111276e-02 -3.09707597e-02  1.02406427e-01
  5.40780649e-02  3.36674997e-03 -3.00926454e-02 -3.42974290e-02
 -1.98348183e-02 -7.30362255e-04  8.97626579e-02  7.53416773e-03
  2.21827235e-02  5.95287643e-02 -4.33111563e-02  9.25763417e-03
 -6.73711952e-03 -8.89667869e-02  3.17064440e-03  8.17238633e-03
 -1.36591010e-02  2.48132274e-02  2.33972203e-02 -1.79100636e-04
 -6.23406493e-04  2.62746029e-02  1.08289151e-02 -3.83807458e-02
  4.63277735e-02  9.20696091e-03  3.13455015e-02  1.79756390e-32
  3.09898183e-02  1.56094711e-02  3.01765203e-02 -9.95918885e-02
  1.84472837e-02 -3.64611372e-02  2.17319783e-02  4.95450534e-02
 -3.81612144e-02 -5.46771586e-02 -2.26323158e-02  3.17068584e-02
 -9.52967256e-02 -1.03851184e-01  6.48609772e-02 -1.97583064e-02
  5.07664122e-02 -4.29739058e-02 -5.37434258e-02  2.74009095e-03
  3.46221887e-02 -1.04740091e-01  4.64601368e-02 -3.70089523e-02
 -1.38200056e-02 -5.34370169e-02 -1.10486792e-02  9.23275016e-03
 -5.09615848e-03  2.46312041e-02  1.11059221e-02  1.23028411e-03
  3.15151811e-02  3.01326755e-02 -6.16535619e-02 -2.67933551e-02
  7.88315781e-04 -3.11381761e-02 -2.46957112e-02  2.79224943e-03
  1.19866841e-02 -9.85827018e-03  1.28312809e-02  1.90963391e-02
  1.77256390e-02  3.31966840e-02 -1.51667008e-02 -5.01428323e-04
  6.51920363e-02  1.46803381e-02 -4.14435118e-02 -3.15177888e-02
 -9.76463780e-02 -3.38572673e-02  7.07654655e-02  1.21664326e-03
  2.95817610e-02 -1.25787584e-02  1.68528426e-02 -6.04287488e-03
 -6.39167652e-02 -5.70574030e-02 -7.31981499e-03  2.51560826e-02
 -7.54980370e-02 -3.99809889e-02 -2.99223345e-02 -3.29673775e-02
 -7.72291422e-03 -9.20634046e-02 -1.13345452e-01 -2.18553152e-02
 -2.54599713e-02  4.40119579e-03  1.44219482e-02 -8.78823027e-02
  5.89293130e-02  7.32328370e-02 -6.88863099e-02  3.61944884e-02
  4.14238162e-02 -3.56843621e-02 -1.54944090e-02  2.61372812e-02
  5.94058782e-02 -1.15666389e-02  1.21016949e-02 -2.37171166e-02
  3.14323208e-03 -3.80460918e-02  1.61477062e-03  5.51881157e-02
  1.01729408e-02 -2.21191831e-02 -1.72693916e-02 -1.36896338e-32
  6.10682089e-03  2.40833070e-02 -1.23632841e-01  5.60240373e-02
  4.62768553e-03 -7.11677372e-02  1.61446799e-02 -4.92654070e-02
  2.91461740e-02 -7.22667128e-02  1.72551777e-02 -5.61060235e-02
  2.13596709e-02 -1.13483788e-02 -5.79648428e-02  4.23177853e-02
  1.47123002e-02  2.73838434e-02 -1.32840418e-04  4.87815067e-02
 -1.13500236e-03  6.50637746e-02 -3.88389379e-02 -1.41693326e-02
 -8.25913697e-02 -3.78577895e-02  5.42735904e-02  4.65815403e-02
  8.63793120e-03  3.23912203e-02  8.93476456e-02 -2.50594597e-02
 -8.43886957e-02  1.09560110e-01  2.07551606e-02 -1.38000801e-01
  6.06575161e-02 -2.52411496e-02 -3.61608788e-02  1.50116220e-01
  6.90009817e-02  5.24635799e-02 -4.80372198e-02  2.46754270e-02
 -5.16891703e-02 -1.57592036e-02  1.04444005e-01 -1.09210953e-01
 -7.06177801e-02 -2.76404209e-02  1.71481565e-01 -3.21060270e-02
  1.95962787e-02  1.98567696e-02  2.07880773e-02  5.91183081e-02
 -1.43007422e-03 -1.31925903e-02 -1.33790419e-01  7.92649295e-03
  6.88299835e-02  7.14863744e-03 -1.87824052e-02 -3.64852846e-02
  9.49306637e-02 -3.15483217e-03  1.81571040e-02  1.27195150e-01
  4.35620397e-02 -8.19956437e-02 -3.97958653e-03 -1.04997218e-01
 -1.91651359e-02  2.06674971e-02  3.21256295e-02 -4.15474698e-02
 -3.84623371e-02  1.72879789e-02  6.85925633e-02 -1.55475121e-02
 -1.20768182e-01 -6.28228299e-03  2.02607829e-03 -3.03606596e-02
  6.36347709e-03  6.13296479e-02 -1.16095869e-02  3.04697920e-02
  2.73493864e-02  2.84780990e-02  3.63455862e-02  6.01559430e-02
  3.59826274e-02  1.04584493e-01  3.25837992e-02 -5.46837100e-08
 -4.37570959e-02 -9.24307927e-02 -1.07980028e-01 -4.05153213e-03
  2.26531662e-02 -2.27716956e-02  4.20891643e-02 -7.98152685e-02
  2.17625983e-02 -4.19849455e-02 -3.64698237e-03  1.56684313e-02
 -8.84229839e-02 -2.18345840e-02  4.26064767e-02  4.86318246e-02
  3.12978067e-02  6.66772127e-02 -1.65315550e-02 -2.59817317e-02
  7.39326254e-02 -1.81351625e-03  7.42777511e-02  4.62752655e-02
 -3.80809717e-02  8.40687156e-02 -3.42704210e-04  6.31599054e-02
 -2.42377203e-02  3.40399705e-02  1.48624182e-03 -7.13626519e-02
  4.74364050e-02 -6.91155419e-02  1.18331395e-01  6.38596863e-02
 -6.03236537e-03 -1.70323085e-02  7.82139376e-02  1.46116570e-01
  4.80955169e-02  3.25970910e-02 -5.38562331e-03  3.85420187e-03
  4.24573570e-03 -1.07640885e-02  9.61469114e-03 -4.49823998e-02
  3.30793820e-02 -5.71237728e-02 -4.32370370e-03 -4.80581932e-02
  2.74157189e-02  1.61427874e-02  3.72091532e-02  4.74342816e-02
  5.47139347e-03  8.23042691e-02 -1.23090846e-02  4.11574878e-02
  9.49539021e-02  1.13254644e-01 -3.27395312e-02  3.12667787e-02]"
"nào sẽ bị vô hiệu với cờ --deactivate-feature <FEATURE_PUBKEY> cho mỗi lần chạy solana-test-validator:solana-test-validator --deactivate-feature PUBKEY_1 --deactivate-feature PUBKEY_2 ...
1Cách khác, scfsd có cung cấp các câu lệnh để chuyển đổi để giúp nhanh chóng vô hiệu hoá một tập các đề xuất cho một môi trường và truyền vào trực tiếp lúc solana-test-validator khởi chạy:solana-test-validator -l ./.ledger $(scfsd -c devnet -k -t)
1Nếu bạn mở một cửa sổ lệnh khác và chạy solana feature status trong khi validator đang chạy thì bạn sẽ thấy các đề xuất bị tắt sẽ giống với cài đặt đè xuất trên môi trường devnet.# Cài đặt tự động cho Kiểm thử Parity Đầy đủVới những lập trình viên hay kiểm soát quá trình khởi chạy validator để kiểm thử bằng code, việc chỉnh sửa các cài đặt đề xuất cho validator là khả thi với TestValidatorGenesis. Với phiên bản Solana 1.9.6, một chức năng đã được thêm vào trong validator để hỗ trợ điều đó.Tại thư mục gố của chương trình, tạo một thư mục với tên tests và thêm tập tin parity_test.rs. Bên dưới là một vài hàm mẫu bạn có thể sử dụng chúng cho mỗi bài kiểm thử.Test Boiler PlatePress </> button to view full source#[cfg(test)]
mod tests {
    use std::{error, path::PathBuf, str::FromStr};

    // Use gadget-scfs to get interegate feature lists from clusters
    // must have `gadgets-scfs = ""0.2.0"" in Cargo.toml [dev-dependencies] to use
    use gadgets_scfs::{ScfsCriteria, ScfsMatrix, SCFS_DEVNET};
    use solana_client::rpc_client::RpcClient;
    use solana_program::{instruction::Instruction, message::Message, pubkey::Pubkey};
    use solana_sdk::{
        // Added in Solana 1.9.2
        compute_budget::ComputeBudgetInstruction,
        pubkey,
        signature::{Keypair, Signature},
        signer::Signer,
        transaction::Transaction,
    };
    // Extended in Solana 1.9.6
    use solana_test_validator::{TestValidator, TestValidatorGenesis};

    /// Location/Name of ProgramTestGenesis ledger
    const LEDGER_PATH: &str = ""./.ledger"";
    /// Path to BPF program (*.so) change if needed
    const PROG_PATH: &str = ""target/deploy/"";
    /// Program name from program Cargo.toml
    /// FILL IN WITH YOUR PROGRAM_NAME
    const PROG_NAME: &str = ""PROGRAM_NAME"";
    /// Program public key
    /// FILL IN WITH YOUR PROGRAM'S PUBLIC KEY str
    const PROG_KEY: Pubkey = pubkey!(""PROGRAMS_PUBLIC_KEY_BASE58_STRING"");
    /// 'transaction wide compute cap' public key
    const TXWIDE_LIMITS: Pubkey = pubkey!(""5ekBxc8itEnPv4NzGJtr8BVVQLNMQuLMNQQj7pHoLNZ9"");

    /// Setup the test validator passing features
    /// you want to deactivate before running transactions
    pub fn setup_validator(
        invalidate_features: Vec<Pubkey>,
    ) -> Result<(TestValidator, Keypair), Box<dyn error::Error>> {
        // Extend environment variable to include our program location
        std::env::set_var(""BPF_OUT_DIR"",","[-4.54883054e-02 -5.27741872e-02 -2.02885270e-02 -7.90262297e-02
  2.81759612e-02 -3.46165672e-02  8.11162814e-02 -1.85688790e-02
  1.63912605e-02  1.73770003e-02  1.26064628e-01 -4.64712791e-02
  9.67554096e-03 -1.23277511e-02  2.97091547e-02 -1.36246625e-02
 -7.57030845e-02  2.31751017e-02 -7.21144900e-02 -1.88350882e-02
 -7.58471480e-03 -1.31969750e-02 -8.73838887e-02  2.43167076e-02
 -2.29036454e-02 -4.33823233e-03  2.10761980e-04  6.09278940e-02
 -3.77997495e-02 -8.87504965e-02  2.73829531e-02  1.47558570e-01
 -1.69369541e-02 -1.36282621e-02  1.20354876e-01  6.45593740e-03
 -8.69286247e-03 -9.57166031e-03  2.85589267e-02 -2.43096743e-02
 -3.50058451e-02 -8.72417688e-02 -3.02965250e-02 -9.71618444e-02
  1.04925916e-01 -3.95216122e-02 -6.94421306e-02 -2.95554325e-02
 -2.69077290e-02 -3.63383554e-02 -5.22874743e-02  6.62583560e-02
 -5.34621626e-02  6.64784908e-02 -5.18412814e-02 -2.82841595e-03
 -4.01859842e-02  3.43537033e-02  7.81327561e-02 -6.95036799e-02
  2.45676562e-03 -2.49821600e-03 -5.68930767e-02 -1.59047786e-02
  2.40450297e-02 -9.06026922e-03 -2.36308258e-02 -9.49368179e-02
 -1.47497188e-02  7.08948150e-02 -6.14555702e-02 -8.17709230e-03
 -7.06760213e-02  2.68380288e-02 -5.04395366e-02  4.04327102e-02
 -1.45439673e-02  1.88089088e-02  3.29641476e-02 -1.03901163e-01
 -9.27044265e-03  3.68925370e-02  6.72960132e-02 -4.30974029e-02
 -1.22062238e-02  1.11827187e-01 -1.96770802e-02 -3.28111239e-02
 -1.93690415e-03 -4.72973287e-02  6.20179474e-02  8.65698308e-02
  1.45090176e-02  5.80913562e-04 -6.71196543e-03 -5.99921085e-02
  2.91591957e-02  3.77843417e-02 -6.10418105e-03  1.12889990e-01
  4.40925658e-02  7.48435315e-03 -3.34530845e-02 -7.48267025e-02
 -1.03484024e-03  5.71848154e-02  8.62355828e-02  1.55480420e-02
  4.41406742e-02  2.80095171e-02 -5.38027808e-02  3.25759239e-02
  2.14208756e-02 -1.27766639e-01  2.27371920e-02  1.01715989e-01
 -5.14521683e-03  5.46775907e-02  1.70705486e-02  2.59297099e-02
 -3.05191823e-03 -7.43951881e-03 -1.91343371e-02 -4.43075038e-02
 -5.52452430e-02  1.79222338e-02  1.20201027e-02  1.88074409e-32
  2.12441087e-02  1.29791843e-02 -1.91625243e-03 -7.55422413e-02
  3.17925848e-02  7.44744064e-03 -9.48093366e-03  1.63115170e-02
 -1.06878012e-01 -2.66837887e-02 -1.96056105e-02 -1.19472966e-02
 -9.42902043e-02 -6.29171282e-02  7.76195377e-02 -2.54366864e-02
  3.67897861e-02 -7.00838491e-02  6.57194015e-03 -5.98040130e-03
  4.38112952e-02 -7.37455040e-02  2.56471895e-02 -2.46083317e-03
  4.47734520e-02 -6.75994605e-02 -2.35684775e-02  1.39620760e-02
 -1.49394423e-02  4.35069688e-02  4.69596274e-02  2.60791183e-02
 -3.88427675e-02 -2.56624501e-02 -5.50895631e-02 -2.78252717e-02
  9.18695051e-03 -5.13407923e-02 -3.40862796e-02 -3.01537700e-02
  1.25068976e-02 -9.31487419e-03  1.14901047e-02  9.95824765e-03
 -5.08770626e-03  1.13036297e-02 -8.19776580e-03  4.52972297e-03
  7.83576816e-02  3.12369019e-02 -4.54962738e-02 -3.17841209e-02
 -7.71516412e-02 -2.51131989e-02  6.89345121e-04 -2.46627256e-02
 -5.14315590e-02 -2.05331445e-02  3.89852822e-02  5.53572401e-02
 -2.13142987e-02 -2.72859372e-02 -2.40384936e-02  1.44893778e-02
 -3.88403349e-02 -2.24102084e-02 -3.23630497e-03 -2.90919971e-02
  6.46480098e-02 -9.40278322e-02 -9.52410474e-02 -4.97278012e-02
 -5.61877666e-03  2.77081355e-02 -3.13582011e-02 -8.25270861e-02
  3.03710531e-02  3.06055825e-02 -3.02835684e-02  3.10676601e-02
 -1.72598083e-02 -8.50879773e-03 -4.15455140e-02  1.42660756e-02
  1.00190155e-01  6.20583259e-03  1.51335010e-02 -6.28249124e-02
 -3.04228105e-02 -8.37535877e-03 -4.77529615e-02  7.02240989e-02
  3.32159325e-02 -2.84762867e-02 -2.09270511e-02 -1.59651646e-32
 -4.42368211e-03 -1.42178209e-02 -9.91833583e-02  6.99084625e-02
 -2.06030812e-02 -3.19102332e-02  2.79101338e-02 -7.65893832e-02
  5.09332754e-02 -6.83170855e-02  3.39167193e-02 -4.58715558e-02
  1.52033968e-02 -4.45410162e-02 -1.62658170e-02  4.72711585e-02
 -4.68232930e-02 -1.15376785e-02  1.40873240e-02  8.93310681e-02
  4.00299672e-03  5.19617572e-02 -1.37115996e-02  6.45477176e-02
 -7.27368295e-02 -8.58689565e-03 -1.49382465e-02  4.26654927e-02
  4.82323878e-02  5.49621917e-02  5.39903343e-02 -1.64148510e-02
 -1.11209437e-01  1.01749472e-01 -7.34305102e-03 -1.16961680e-01
  5.05191013e-02 -1.59577075e-02 -2.71950942e-03  1.32616371e-01
  4.07184213e-02  1.19992541e-02 -2.36327518e-02 -3.21457274e-02
 -2.68360786e-02 -2.90435050e-02  1.11317366e-01 -5.84916025e-02
 -9.84928161e-02 -2.22019237e-02  1.28863648e-01 -1.76990069e-02
 -1.92962901e-03  2.62501519e-02  2.68776175e-02  7.17579350e-02
  6.03277124e-02 -2.11942848e-02 -1.40801609e-01 -1.10701593e-02
  5.91912605e-02  5.03307842e-02 -1.35891587e-02  1.90160982e-02
  1.41247332e-01 -3.69046666e-02 -1.46921398e-03  8.94645900e-02
  2.02482194e-02 -1.10008687e-01 -6.01482876e-02 -8.94667134e-02
 -2.17588264e-02 -2.26057116e-02  3.42835672e-02 -6.58729300e-02
 -6.15097806e-02  3.24107632e-02  4.45575230e-02 -2.11745128e-02
 -7.06602111e-02  7.44526228e-03 -1.98513130e-03 -1.77570619e-02
 -1.66733544e-02  2.88817082e-02 -3.01980153e-02  1.33911688e-02
  5.70798442e-02  4.78253365e-02  2.73333415e-02  1.24978488e-02
  6.58967644e-02  1.08567640e-01  4.32318039e-02 -5.92543223e-08
 -2.29860432e-02 -6.75852075e-02 -5.72730936e-02 -1.50742382e-02
  8.00072998e-02 -2.93467604e-02  2.47051828e-02 -1.79762673e-02
 -1.00513063e-02 -8.06950480e-02  2.76216827e-02  5.65586314e-02
 -8.91671255e-02 -1.72399376e-02  1.08536426e-02  4.37568538e-02
  2.00566594e-02  9.61905494e-02 -2.37535127e-02 -4.59138639e-02
  6.42387643e-02 -1.86745189e-02  1.35894502e-02  5.62291518e-02
 -2.49126721e-02  2.29409318e-02  3.08115017e-02  7.32748806e-02
 -1.39354700e-02  3.78262885e-02  2.18036305e-03 -8.23886767e-02
  3.31767797e-02 -7.10595474e-02  9.25726891e-02  4.17876914e-02
  3.20618204e-03 -1.78007651e-02  1.97158400e-02  1.49201438e-01
  5.10530137e-02  4.13727947e-02 -2.66943090e-02 -2.33473275e-02
 -1.27036730e-02 -2.83984933e-02  8.10176972e-03 -2.43593976e-02
  5.49772009e-02 -3.82811911e-02 -3.20629627e-02 -1.22529373e-03
  4.69491109e-02  3.96531112e-02  2.68557761e-03  4.95973341e-02
  1.06749218e-02  8.79980698e-02  7.17800902e-03  5.15877409e-03
  1.08760856e-01  1.18264094e-01 -7.43334927e-03 -4.47711721e-02]"
"PROG_PATH);
        // Instantiate the test validator
        let mut test_validator = TestValidatorGenesis::default();
        // Once instantiated, TestValidatorGenesis configuration functions follow
        // a builder pattern enabling chaining of settings function calls
        let (test_validator, kp) = test_validator
            // Set the ledger path and name
            // maps to `solana-test-validator --ledger <DIR>`
            .ledger_path(LEDGER_PATH)
            // Load our program. Ignored if reusing ledger
            // maps to `solana-test-validator --bpf-program <ADDRESS_OR_PATH BPF_PROGRAM.SO>`
            .add_program(PROG_NAME, PROG_KEY)
            // Identify features to deactivate. Ignored if reusing ledger
            // maps to `solana-test-validator --deactivate-feature <FEATURE_PUBKEY>`
            .deactivate_features(&invalidate_features)
            // Start the test validator
            .start();
        Ok((test_validator, kp))
    }

    /// Convenience function to remove existing ledger before TestValidatorGenesis setup
    /// maps to `solana-test-validator ... --reset`
    pub fn clean_ledger_setup_validator(
        invalidate_features: Vec<Pubkey>,
    ) -> Result<(TestValidator, Keypair), Box<dyn error::Error>> {
        if PathBuf::from_str(LEDGER_PATH).unwrap().exists() {
            std::fs::remove_dir_all(LEDGER_PATH).unwrap();
        }
        setup_validator(invalidate_features)
    }

    /// Submits a transaction with programs instruction
    /// Boiler plate
    fn submit_transaction(
        rpc_client: &RpcClient,
        wallet_signer: &dyn Signer,
        instructions: Vec<Instruction>,
    ) -> Result<Signature, Box<dyn std::error::Error>> {
        let mut transaction =
            Transaction::new_unsigned(Message::new(&instructions, Some(&wallet_signer.pubkey())));
        let recent_blockhash = rpc_client
            .get_latest_blockhash()
            .map_err(|err| format!(""error: unable to get recent blockhash: {}"", err))?;
        transaction
            .try_sign(&vec![wallet_signer], recent_blockhash)
            .map_err(|err| format!(""error: failed to sign transaction: {}"", err))?;
   ","[-6.92333058e-02  1.50283957e-02 -6.67513907e-02 -1.51458206e-02
 -5.63404616e-03 -9.88983363e-02  1.33735714e-02  1.19937630e-02
 -1.10655501e-02 -2.20599174e-02  7.91466534e-02 -6.11454211e-02
 -3.15152295e-02  1.78681519e-02  5.56937791e-02  6.68845996e-02
 -1.99981257e-02  8.43406375e-03  2.77440082e-02  4.17613760e-02
  3.60739380e-02 -4.11023200e-02 -3.05219553e-03  3.67807820e-02
 -7.40040988e-02 -7.45137557e-02 -4.85797003e-02  5.49547374e-02
 -4.64113941e-03 -3.40657942e-02  1.08681828e-01  7.59353414e-02
 -5.85792437e-02  3.54338787e-03  1.06962755e-01  1.30725518e-01
  4.15219404e-02  3.34194712e-02 -3.56161110e-02 -6.72282577e-02
  3.14292163e-02 -8.08215793e-03 -4.15131710e-02 -5.56252562e-02
  1.39133120e-02 -5.83959371e-02  5.95071726e-03 -3.24556008e-02
 -2.92070583e-02 -5.86716607e-02 -1.34231141e-02  1.85489077e-02
 -5.15009947e-02 -1.14809559e-03  5.02063297e-02  7.77092353e-02
 -1.21336292e-04  4.54982650e-03  6.05654418e-02 -2.21562758e-03
  2.52692979e-02  3.89728658e-02  3.82242687e-02 -2.76340246e-02
 -3.90998051e-02  1.83817539e-02  2.96769803e-03 -1.10578351e-02
  7.99379591e-03  4.84243371e-02  2.51814425e-02 -5.10144979e-02
 -2.09321883e-02 -3.18619385e-02  1.18859140e-02  1.45524479e-02
 -4.21511941e-02  1.27145154e-02 -3.84612777e-03 -1.48739919e-01
 -3.76305194e-03  1.23931812e-02  5.50640374e-02  4.43602726e-02
 -5.93771785e-03  5.29145896e-02  1.30428700e-02 -8.37055817e-02
  1.65672287e-01  4.35435167e-03  1.05165802e-01 -6.55534044e-02
 -3.14750448e-02 -2.54995171e-02  5.53986914e-02 -2.59684622e-02
  7.56289763e-03 -2.25289986e-02  1.40632540e-02  8.88544172e-02
 -1.12900129e-02 -4.10277471e-02 -9.64143034e-03 -2.89211608e-02
 -8.93385056e-03  3.22320908e-02 -6.99709309e-03 -2.32639760e-02
 -5.73219918e-02  6.35393932e-02  5.62581159e-02  3.98728177e-02
  7.58277848e-02 -6.49320381e-03 -2.03221478e-02  9.51654464e-02
 -6.91012815e-02  5.73810190e-02 -4.27899249e-02  1.04713917e-01
 -5.37497690e-03  9.76875797e-03  7.45513365e-02 -5.15980572e-02
 -4.91688587e-02  5.37407547e-02 -4.01515998e-02  1.48425062e-33
  9.03173932e-04 -6.19202629e-02  2.92846616e-02  5.04858792e-04
  6.92307800e-02 -7.64793530e-03  4.57763188e-02  9.25968587e-02
 -9.71705914e-02 -1.16126435e-02  2.24118102e-02 -3.94784547e-02
 -1.29131526e-01 -3.59751135e-02 -1.04498966e-02 -3.34683806e-02
 -6.13632239e-02  5.19837486e-04  1.20541323e-02 -4.24137823e-02
  4.88908552e-02 -2.73091886e-02 -5.67039326e-02 -9.17739943e-02
 -6.96318675e-05 -9.07268189e-03  1.04323840e-02  2.09868867e-02
  3.70832942e-02  2.29397975e-02  2.43389327e-02  2.91022239e-03
 -9.12200660e-03  8.68032649e-02 -4.82103613e-04  6.68639392e-02
 -4.30749059e-02  2.63064727e-02 -8.81322026e-02 -1.79744549e-02
  6.33959249e-02 -9.92497522e-03 -2.12352425e-02  3.21975388e-02
  2.50084065e-02 -5.20539284e-02  1.77978594e-02  4.96422425e-02
  1.20107502e-01  3.14374156e-02 -5.32938242e-02 -1.85146593e-02
  5.74349612e-03 -5.45183271e-02 -1.06880218e-01 -3.14477794e-02
 -6.02563918e-02 -6.65558651e-02 -1.58033911e-02 -8.96308478e-03
 -5.80687076e-02  4.57716659e-02 -6.25454783e-02  3.23871896e-02
 -3.95047180e-02  3.76313627e-02 -5.18519729e-02 -3.08394507e-02
 -3.80076142e-03 -4.71868888e-02 -1.52165266e-02 -4.39063646e-02
  2.14785268e-03  1.32950246e-02  2.03415062e-02 -6.53605610e-02
 -3.77536118e-02  8.27522203e-02 -1.53658390e-01 -7.39208162e-02
 -2.48388853e-02  4.42792149e-03 -8.79874229e-02  1.46274090e-01
  4.45020907e-02 -3.45711522e-02 -1.58355832e-02 -4.64630425e-02
 -4.34603207e-02 -2.68802289e-02  5.11596538e-02  1.56633719e-03
  1.33760022e-02 -1.43490965e-02 -4.92361337e-02 -2.61917976e-33
  2.61229500e-02 -2.69337688e-02  2.48954147e-02 -9.63641983e-03
 -1.31796114e-02 -3.79456431e-02  5.41150533e-02 -3.02168038e-02
 -5.02966046e-02 -2.72590518e-02 -2.65374966e-02  3.03795259e-03
  6.04081824e-02 -1.52334021e-02 -9.51250121e-02  6.90111145e-02
 -9.69403535e-02 -1.47045841e-02 -3.21430750e-02  6.45374320e-03
  4.33344692e-02  8.55656862e-02  1.47179305e-03  9.03120786e-02
 -5.65797649e-02  4.14276868e-03 -1.84943248e-02  9.41549987e-02
  5.16517349e-02  8.20481405e-03  4.67911810e-02  3.76923345e-02
 -6.29222468e-02 -3.13635319e-02 -4.47476376e-03 -7.76258856e-02
 -2.53564306e-03  2.80446075e-02 -3.16806212e-02  6.21329024e-02
  2.87796874e-02  4.45932373e-02 -8.31322595e-02  3.03824581e-02
  1.22157047e-02  1.14099108e-01  1.12834252e-01 -5.92113361e-02
 -1.50885414e-02 -7.32871965e-02 -6.22313702e-03 -2.00032331e-02
 -1.62006672e-02 -1.48029225e-02 -2.15419102e-03  1.19460754e-01
  6.24508671e-02  7.07064271e-02 -5.98770306e-02  1.82286445e-02
  2.80197822e-02 -2.21540988e-03  5.85681386e-02  5.80308065e-02
  6.16855957e-02 -5.88751994e-02 -1.65097672e-03  1.67129654e-02
  3.04356664e-02 -4.10807095e-02 -7.36358613e-02  6.07296601e-02
 -3.14580426e-02 -3.51492092e-02  3.42042483e-02  3.25545967e-02
 -3.22357230e-02 -1.01232260e-01  1.87058635e-02 -4.50075194e-02
 -4.76272702e-02 -4.89509739e-02 -3.18096555e-03 -4.69400547e-02
 -3.91697362e-02 -1.24099534e-02  3.93634737e-02  5.46840718e-03
  5.57950651e-03  1.01931773e-01  2.71263923e-02  4.21172976e-02
 -2.22117044e-02  6.41614664e-03 -8.82508531e-02 -5.19441841e-08
 -2.77893227e-02 -9.80194360e-02 -5.43009639e-02  4.18950483e-04
 -1.21768946e-02 -4.47737351e-02  9.52910185e-02  2.28871219e-02
 -3.23540196e-02 -8.16191956e-02 -6.08072034e-04  5.55239804e-02
 -9.54603404e-02  2.29569841e-02 -2.24630088e-02 -8.73498768e-02
  3.75884846e-02  8.00057575e-02 -7.36401454e-02 -3.99772525e-02
  6.64224569e-03 -2.86348183e-02 -6.46755844e-03  5.05977720e-02
  4.00923826e-02 -5.51167987e-02  5.40125147e-02 -2.20530666e-03
  4.53283899e-02  4.53417888e-03  6.36108313e-03 -4.43437835e-04
  7.03441799e-02  7.41944388e-02 -1.28924521e-02  1.10509455e-01
 -5.19767292e-02 -2.44239601e-03  5.40925376e-02  9.51037109e-02
 -3.08162882e-03  8.51116404e-02 -2.01657470e-02 -2.82512214e-02
 -2.92153587e-03 -6.75050542e-02 -6.14761412e-02  3.42421606e-02
  4.54586595e-02  2.95601692e-02 -1.78583097e-02  3.19499969e-02
 -3.27679887e-02  1.52068818e-02  5.13737230e-03  4.55244584e-03
 -4.90418971e-02  3.72674875e-02 -3.79436687e-02  3.23969848e-03
  8.42973366e-02  4.06243932e-03  1.08346052e-01 -3.44195142e-02]"
"    let signature = rpc_client
            .send_and_confirm_transaction(&transaction)
            .map_err(|err| format!(""error: send transaction: {}"", err))?;
        Ok(signature)
    }
    // UNIT TEST FOLLOWS
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192/// Setup the test validator passing features
/// you want to deactivate before running transactions
pub fn setup_validator(
    invalidate_features: Vec<Pubkey>,
) -> Result<(TestValidator, Keypair), Box<dyn error::Error>> {
    // Extend environment variable to include our program location
    std::env::set_var(""BPF_OUT_DIR"", PROG_PATH);
    // Instantiate the test validator
    let mut test_validator = TestValidatorGenesis::default();
    // Once instantiated, TestValidatorGenesis configuration functions follow
    // a builder pattern enabling chaining of settings function calls
    let (test_validator, kp) = test_validator
        // Set the ledger path and name
        // maps to `solana-test-validator --ledger <DIR>`
        .ledger_path(LEDGER_PATH)
        // Load our program. Ignored if reusing ledger
        // maps to `solana-test-validator --bpf-program <ADDRESS_OR_PATH BPF_PROGRAM.SO>`
        .add_program(PROG_NAME, PROG_KEY)
        // Identify features to deactivate. Ignored if reusing ledger
        // maps to `solana-test-validator --deactivate-feature <FEATURE_PUBKEY>`
        .deactivate_features(&invalidate_features)
        // Start the test validator
        .start();
    Ok((test_validator, kp))
}

/// Convenience function to remove existing ledger before TestValidatorGenesis setup
/// maps to `solana-test-validator ... --reset`
pub fn clean_ledger_setup_validator(
    invalidate_features: Vec<Pubkey>,
) -> Result<(TestValidator, Keypair), Box<dyn error::Error>> {
    if PathBuf::from_str(LEDGER_PATH).unwrap().exists() {
        std::fs::remove_dir_all(LEDGER_PATH).unwrap();
    }
    setup_validator(invalidate_features)
}

/// Submits a transaction with programs instruction
/// Boiler plate
fn submit_transaction(
    rpc_client: &RpcClient,
    wallet_signer: &dyn Signer,
    instructions: Vec<Instruction>,
) -> Result<Signature, Box<dyn std::error::Error>> {
    let mut transaction =
        Transaction::new_unsigned(Message::new(&instructions, Some(&wallet_signer.pubkey())));
    let recent_blockhash = rpc_client
        .get_latest_blockhash()
        .map_err(|err| format!(""error: unable to get recent blockhash: {}"", err))?;
    transaction
        .try_sign(&vec![wallet_signer], recent_blockhash)
        .map_err(|err| format!(""error: failed to sign transaction: {}"", err))?;
    let signature = rpc_client
        .send_and_confirm_transaction(&transaction)
        .map_err(|err| format!(""error: send transaction: {}"", err))?;
    Ok(signature)
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657Chúng ta có thể thêm các bài kiểm thử bên trong mod test {...} để chạy với cài đặt mặc định của validator (với tất cả các đề xuất được kích hoạt) và sau đó có thể vô hiệu hoá đề xuất transaction wide compute cap","[-9.34313517e-03  1.88039709e-02 -7.10477307e-02  8.24778434e-03
 -3.36060300e-02 -7.22076818e-02  9.06297064e-04  5.05201966e-02
 -1.02904545e-04 -1.45665007e-02  6.34140298e-02 -2.22232714e-02
 -1.71485525e-02  2.90233456e-02  6.03181459e-02  1.21665222e-03
  2.44543441e-02  3.34040895e-02  1.90739501e-02  4.38272916e-02
 -4.94832657e-02 -3.73552106e-02  3.70499715e-02  6.80895746e-02
 -4.05146740e-02 -1.22743875e-01 -1.62774846e-02  3.13506909e-02
 -7.95658038e-04 -2.91051921e-02  1.47199929e-01  9.63225588e-03
 -3.97095755e-02  3.32068615e-02  6.48064837e-02  1.05573185e-01
  8.78422409e-02 -3.86591884e-03 -1.92682613e-02 -1.50764911e-02
  2.36312449e-02 -4.12948430e-02 -7.98596442e-02 -3.27134095e-02
  5.93459085e-02 -2.32819747e-02 -2.88010463e-02  1.60377901e-02
 -6.14800602e-02 -9.54511017e-03  6.93075173e-03  5.14614210e-02
 -7.09662884e-02 -5.44696068e-03  2.08340697e-02  1.90946460e-02
  5.85868433e-02 -1.27656776e-02  2.32589152e-02 -3.08946725e-02
  3.55652459e-02 -2.46929340e-02  5.31970821e-02 -6.43468127e-02
 -4.59646471e-02  8.17992389e-02  1.59056075e-02 -3.20176557e-02
  4.84604910e-02  3.99206802e-02  1.52168190e-02 -5.13585694e-02
 -5.72525412e-02 -6.50545508e-02 -3.46101448e-02  2.14402676e-02
 -6.75293356e-02  2.91216988e-02 -1.60954911e-02 -6.83392808e-02
 -1.39218131e-02 -1.57590285e-02  4.35062312e-02 -2.33069659e-05
 -2.40355339e-02  6.98867291e-02 -3.03832162e-03 -7.98845440e-02
  5.43345734e-02  2.99170730e-03  9.54877585e-02  2.02544406e-02
 -5.73562086e-02 -4.24438044e-02  8.78742933e-02 -3.03287189e-02
  6.28694147e-03 -5.15090860e-02  5.34713753e-02  4.38801423e-02
 -2.48612072e-02 -1.79484431e-02 -1.77809261e-02 -5.65964654e-02
  1.77478872e-03  2.33034045e-03  2.89611500e-02 -6.88690916e-02
 -6.27524406e-02 -2.28602830e-02  2.32624523e-02  7.93651044e-02
  4.91560921e-02  2.84332521e-02 -1.09076770e-02  9.15978700e-02
 -2.85647716e-02  6.13398850e-02 -1.14851324e-02  3.80768441e-03
  1.28420833e-02  1.08306948e-03  1.16293551e-02  1.74394771e-02
 -4.25585434e-02 -3.07069309e-02 -8.61185370e-04  3.98614359e-33
 -7.39606796e-03 -6.67508394e-02 -4.83014062e-02  1.96244176e-02
  4.14337441e-02  3.54304798e-02  8.30162987e-02  5.81327081e-02
 -9.18523520e-02 -5.73670939e-02  1.48280291e-02 -9.84539166e-02
 -4.61084954e-02 -5.39572798e-02  7.38088600e-03 -9.10585653e-03
 -4.58023809e-02  1.03145838e-02  8.79840776e-02  4.07552673e-03
  9.22495648e-02 -7.14410469e-02 -1.40838260e-02 -4.68020849e-02
 -2.96125431e-02 -3.12411617e-02 -7.05933645e-02 -8.86763353e-03
 -2.42257509e-02 -2.33304948e-02 -8.45873356e-03  2.22304687e-02
  3.06521114e-02  1.29899353e-01  6.93078898e-03 -1.64694600e-02
 -3.42829339e-02  9.11777373e-03 -8.75356123e-02 -1.72769949e-02
  9.79346596e-03 -3.28192255e-03 -4.40436974e-02  5.41253649e-02
 -9.54843778e-03  4.30424418e-03  8.26309435e-03  2.41524186e-02
  1.24564327e-01 -5.78132132e-03 -2.54222061e-02  1.83095522e-02
 -1.03343604e-03 -9.43157896e-02 -2.49628052e-02 -5.06299324e-02
 -8.91540479e-03 -4.14167792e-02 -5.40750064e-02  6.00327365e-03
 -6.61332533e-02  2.43980605e-02 -4.48745862e-02 -2.46379729e-02
 -2.09616907e-02 -2.29435284e-02 -8.80131051e-02 -7.16713294e-02
  4.97219758e-03 -4.47451584e-02  1.03644002e-02  7.77815981e-03
 -3.87339070e-02  8.37413780e-03  3.38952988e-02 -7.82118812e-02
 -1.89908724e-02  9.42373946e-02 -5.13787568e-02 -8.79180729e-02
 -6.90796273e-03  3.23045105e-02 -8.61641914e-02  1.35207027e-01
  9.64213386e-02 -2.78937295e-02 -3.59785161e-04 -4.16010469e-02
 -5.13303690e-02 -6.13422226e-03  1.34551972e-02 -3.14525180e-02
  5.27607985e-02 -5.76343806e-03  1.91756301e-02 -4.01907433e-33
  4.74047698e-02 -6.68372884e-02 -5.55491373e-02  9.88655761e-02
 -1.13276020e-02 -9.00386646e-03  4.76604179e-02 -3.32451388e-02
 -3.31556574e-02  1.00231385e-02  3.26363407e-02 -6.93807751e-02
  5.40285036e-02  4.20340076e-02 -1.01026207e-01 -3.12531665e-02
 -1.01513080e-01 -2.34706607e-02  1.15401309e-03  2.44317651e-02
  3.04984916e-02  9.34040267e-03  5.49632236e-02  1.06929615e-01
 -1.08094484e-01  2.91443914e-02 -3.44927348e-02  6.23819642e-02
  6.53773546e-03 -2.46150084e-02  2.00194474e-02  1.08457364e-01
 -2.96165179e-02  1.84036829e-02  4.37327735e-02 -7.04939812e-02
  4.80063520e-02  3.67067419e-02 -4.16774862e-03  7.75746554e-02
  8.81976932e-02  8.19753632e-02 -1.13631181e-01  1.41606377e-02
  1.41112125e-02  8.85580033e-02  9.79421213e-02 -3.59675623e-02
 -7.76224211e-03  9.80801694e-03  2.07041800e-02 -2.26729196e-02
  1.96384620e-02  1.18583813e-02 -1.34256147e-02  9.14838165e-02
  9.40944701e-02  5.64891193e-03  5.72977308e-03  7.37939551e-02
  2.18213839e-03 -2.78795026e-02  9.54756737e-02  6.93469495e-02
  6.18569069e-02 -6.49700239e-02  8.47411249e-03  8.26841593e-02
  7.15418532e-02  1.45589318e-02 -3.68992612e-02 -2.18149330e-02
 -2.84435619e-02  3.71603817e-02  7.33722523e-02 -2.02872641e-02
 -4.41963635e-02 -1.29078761e-01  8.26109275e-02  1.55998114e-03
 -7.50450045e-02 -7.99851585e-03 -1.46532478e-02  5.44318743e-02
 -8.69885460e-03  1.03468355e-02  4.12097648e-02  3.41648571e-02
 -1.70985833e-02  6.65312484e-02  5.68735935e-02 -1.66583434e-03
 -2.28551477e-02 -5.51809743e-02 -1.54612791e-02 -5.54806086e-08
 -9.06430632e-02 -9.02507603e-02 -4.71240841e-02  3.06720124e-03
 -9.34335403e-03 -5.76660931e-02  9.46500450e-02 -5.01185320e-02
 -5.77152669e-02 -1.03332728e-01 -3.67353410e-02  6.31575985e-03
 -7.54175112e-02 -8.89335722e-02 -1.76831149e-03 -6.60822690e-02
  7.09352642e-03  2.86998916e-02 -4.89674024e-02 -4.43557575e-02
  1.14155682e-02 -1.20229563e-02 -1.98322907e-02  3.12091480e-03
  1.62592307e-02 -8.52489378e-03  1.13916412e-01  1.17027469e-01
  9.57216322e-02 -4.95331101e-02  4.74593528e-02 -5.96023574e-02
  8.19717348e-02  5.65892980e-02 -7.50712454e-02  5.95469661e-02
  3.31698507e-02  4.86080907e-03  7.04912916e-02  1.05778322e-01
 -7.17348009e-02  5.69261499e-02 -5.59948608e-02 -4.67023067e-02
 -5.24563529e-02  1.60708148e-02 -6.68094456e-02  5.10591306e-02
  1.24213761e-02  5.66024845e-03  2.40640671e-04  9.55459138e-04
  1.41191920e-02  6.24883659e-02 -2.50349157e-02 -2.52363458e-02
 -2.00446956e-02 -1.20262401e-02  8.50810017e-03 -3.87228816e-03
  7.34684318e-02  1.66692771e-02  5.47007136e-02 -6.38516471e-02]"
"với mỗi ví dụ chạy solana-test-validator bằng lệnh.All Features TestDisable Tx CU Test#[test]
fn test_base_pass() {
    // Run with all features activated (default for TestValidatorGenesis)
    let inv_feat = vec![];
    // Start validator with clean (new) ledger
    let (test_validator, main_payer) = clean_ledger_setup_validator(inv_feat).unwrap();
    // Get the RpcClient
    let connection = test_validator.get_rpc_client();
    // Capture our programs log statements
    solana_logger::setup_with_default(""solana_runtime::message=debug"");

    // This example doesn't require sending any accounts to program
    let accounts = &[];
    // Build instruction array and submit transaction
    let txn = submit_transaction(
        &connection,
        &main_payer,
        // Add two (2) instructions to transaction to demonstrate
        // that each instruction CU draws down from default Transaction CU (200_000)
        // Replace with instructions that make sense for your program
        [
            Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
            Instruction::new_with_borsh(PROG_KEY, &1u8, accounts.to_vec()),
        ]
        .to_vec(),
    );
    assert!(txn.is_ok());
}
12345678910111213141516171819202122232425262728#[test]
fn test_deactivate_tx_cu_pass() {
    // Run with all features activated except 'transaction wide compute cap'
    let inv_feat = vec![TXWIDE_LIMITS];
    // Start validator with clean (new) ledger
    let (test_validator, main_payer) = clean_ledger_setup_validator(inv_feat).unwrap();
    // Get the RpcClient
    let connection = test_validator.get_rpc_client();
    // Capture our programs log statements
    solana_logger::setup_with_default(""solana_runtime::message=debug"");

    // This example doesn't require sending any accounts to program
    let accounts = &[];
    // Build instruction array and submit transaction
    let txn = submit_transaction(
        &connection,
        &main_payer,
        [
            // This instruction adds CU to transaction budget (1.9.2) but does nothing
            // when we deactivate the 'transaction wide compute cap' feature
            ComputeBudgetInstruction::request_units(400_000u32),
            // Add two (2) instructions to transaction
            // Replace with instructions that make sense for your program
            // You will see that each instruction has the 1.8.x 200_000 CU per budget
            Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
     ","[-6.37885034e-02 -7.40928762e-03 -1.15330987e-01  1.71750889e-03
 -2.24360526e-02 -1.05950654e-01 -1.28554488e-02  7.67908394e-02
 -5.17832078e-02  2.30488814e-02  6.44308180e-02 -7.69423395e-02
 -4.05371934e-02  9.54080001e-03  3.34362611e-02 -1.22422464e-02
 -1.50236599e-02 -6.62730215e-03  4.10339853e-04  2.07612780e-03
  4.47353953e-03 -5.08220270e-02 -1.33508109e-02  4.17489782e-02
 -6.19395301e-02 -5.47753908e-02 -1.49769774e-02  3.60881612e-02
 -1.92600284e-02 -1.93620957e-02  1.23948172e-01  6.79643750e-02
 -2.37727463e-02  6.40887842e-02  9.81347859e-02  7.18596354e-02
  5.10766916e-02 -9.77657922e-03 -2.11458374e-02 -9.39429104e-02
 -3.37309912e-02 -6.30199770e-03 -4.87119257e-02  4.79681715e-02
  7.63831809e-02 -6.01254478e-02 -3.66223268e-02  3.75853502e-03
 -1.14920521e-02 -8.42021927e-02 -4.20852900e-02  5.10350876e-02
 -1.58465952e-02  5.35454787e-02  1.11254109e-02  2.51567513e-02
  2.33385060e-02 -6.11479580e-02  6.26543909e-02 -1.99216697e-02
  6.63005142e-03  5.17836772e-03 -1.28386803e-02 -2.18505934e-02
 -5.96228987e-02 -4.64342535e-03  2.34361570e-02  8.49543512e-03
  1.78402960e-02  2.84206793e-02 -1.66615210e-02 -3.38428505e-02
 -9.50832143e-02  3.35809612e-03 -6.06510192e-02  1.90871377e-02
  3.23588662e-02  2.34826729e-02 -2.73493044e-02 -8.64324570e-02
 -1.55311851e-02  3.19221653e-02  4.17949818e-02  5.50453588e-02
 -1.06512882e-04  4.95289676e-02  2.40998156e-02 -2.34161690e-02
  9.44809839e-02 -1.91171337e-02  1.37202412e-01  4.73188199e-02
 -8.13293159e-02 -5.62486351e-02  2.64667664e-02  5.89454919e-03
  6.24970607e-02  1.43401709e-03 -3.86619046e-02  9.12726596e-02
  2.37184335e-02 -4.85783219e-02 -1.98114812e-02 -7.12185213e-03
 -2.53464114e-02  1.26147578e-02  9.15186107e-02 -6.96128607e-03
 -4.36442606e-02  3.61378826e-02  4.66885343e-02  8.09779540e-02
  4.81634168e-03  9.77721997e-03  1.35145858e-02  1.26530811e-01
 -9.46064889e-02  4.66271825e-02 -5.17630652e-02  4.80467081e-02
  2.22683456e-02  8.65563005e-02 -3.69362682e-02 -3.64906862e-02
 -2.98558027e-02 -1.81596912e-02  3.91413309e-02  7.70022342e-33
 -1.99143328e-02  9.46228486e-03 -1.22755561e-02  5.46189398e-03
  3.51999737e-02  1.72395222e-02  5.94180375e-02  1.00100078e-01
 -1.13794573e-01  2.41862237e-02 -2.00250205e-02 -4.95933741e-02
 -5.04009016e-02 -5.63988201e-02 -1.85821205e-02 -4.78026755e-02
 -5.00615090e-02 -1.16163800e-02  6.16637431e-02  3.03682294e-02
  6.10352531e-02 -9.81052145e-02  1.11841289e-02 -7.46208057e-02
 -2.12605428e-02 -1.74762160e-02 -4.20676544e-02 -3.19823325e-02
  4.38349470e-02  1.40817277e-02 -2.50224099e-02  1.09939848e-03
  3.95889254e-03  6.68873116e-02  4.04558703e-02  6.42889831e-03
 -3.20474468e-02 -2.87122484e-02 -4.77796495e-02 -8.49210657e-03
  1.30046047e-02 -2.68727192e-03 -1.82742216e-02  1.30290650e-02
 -1.49419308e-02 -1.72921957e-03 -2.35693250e-02  7.99796730e-02
  7.43066296e-02  1.08420707e-01 -6.99854121e-02  7.25187361e-03
 -2.61417907e-02 -7.69451782e-02 -1.85659304e-02 -9.64502152e-03
  4.18407395e-02 -5.58386296e-02  6.21180004e-03  3.75736207e-02
 -3.84074897e-02 -7.00646639e-03 -7.41974115e-02 -5.06355539e-02
 -7.21276700e-02  3.50044183e-02 -6.57458901e-02 -2.81026885e-02
  2.42967643e-02 -1.95770003e-02 -6.54136166e-02 -1.27234086e-02
 -1.47696706e-02  6.19280804e-03  3.12584043e-02 -4.04468141e-02
  6.12976030e-03  5.54414093e-02 -1.03813000e-01 -5.03076948e-02
  7.53000891e-03 -1.34289321e-02 -5.59720881e-02  9.77933407e-02
  3.87855209e-02  2.02126727e-02  8.48581549e-03  1.59661956e-02
 -1.36278970e-02 -9.88136418e-03  6.48811087e-02 -1.26294885e-02
  7.72974640e-02 -7.22338185e-02  1.79587789e-02 -6.43015099e-33
  4.97921603e-03 -4.45936397e-02 -8.13964307e-02  4.44349311e-02
  1.75697729e-03 -7.31474981e-02  2.70714182e-02 -8.03641696e-03
 -1.98507234e-02 -5.17607890e-02  2.08790805e-02 -5.33766784e-02
  1.21036579e-03  5.13075804e-03 -5.43024950e-02  2.17163227e-02
 -8.99611339e-02  2.01459546e-02  5.29411584e-02  2.96820588e-02
  1.10851675e-02  1.29560143e-01  9.94757656e-03  6.65354589e-03
 -4.73931320e-02 -1.37646468e-02  1.54257147e-02  1.27545685e-01
  3.89737003e-02 -1.29695889e-02  1.08524553e-01 -2.96445517e-03
 -8.46481249e-02  8.38667825e-02  2.50051394e-02 -9.98179838e-02
  7.31236711e-02  2.10843887e-02  6.21766970e-03  7.89598376e-02
  1.17285728e-01  2.62571387e-02 -1.35227755e-01  3.33603807e-02
 -2.05457322e-02  3.98400910e-02  1.22777130e-02 -4.70001325e-02
 -5.92361577e-03 -3.89385112e-02  2.30608750e-02 -7.44064972e-02
  2.23526675e-02  3.23543251e-02 -2.63628978e-02  7.34622404e-02
  1.47961065e-01  1.70655586e-02 -1.28222927e-02 -1.74380522e-02
 -6.39892300e-04 -7.08536303e-04  5.58593981e-02  2.13693064e-02
  1.03555955e-01 -5.04787266e-02 -2.97849579e-03  7.54237473e-02
  2.47957446e-02 -9.67741013e-03 -4.51002121e-02 -3.21260281e-02
 -2.03396333e-03 -3.70580144e-02  4.21731286e-02  4.60725725e-02
 -8.66710544e-02 -1.09029137e-01  3.62243340e-03  2.80093048e-02
 -2.85176225e-02 -2.74167978e-03  3.35524939e-02  6.04169257e-02
 -4.02528346e-02 -1.99535023e-02  4.39115018e-02  6.20342419e-03
 -4.57810052e-02  5.38793057e-02 -1.25088515e-02 -8.51859152e-03
  2.20601428e-02  4.76877838e-02 -1.16211949e-02 -6.11188611e-08
 -6.59023225e-02 -1.20592877e-01 -6.44359961e-02  6.07660264e-02
  6.49481788e-02 -1.44342408e-02  3.73025127e-02 -9.09349471e-02
 -4.89187874e-02 -1.17287822e-02 -6.06549904e-02 -2.54518073e-03
 -9.88608599e-02 -2.68891677e-02  1.13620944e-02 -1.29290866e-02
  3.22158821e-02  5.41592240e-02 -6.01154603e-02 -8.34790319e-02
  3.42459232e-02 -1.22441654e-03  1.42520433e-02 -1.17643289e-02
 -3.40405921e-03  1.24248909e-03  9.79085118e-02  1.12683825e-01
  4.81374748e-03 -6.84296936e-02  3.95914614e-02 -5.59978485e-02
  8.80878344e-02 -5.40097943e-03 -3.12262904e-02  7.31233060e-02
 -2.43124105e-02 -7.83926994e-03  1.05431505e-01  2.83657592e-02
 -8.02457109e-02  9.84206125e-02 -4.32840362e-02 -1.32275624e-02
 -2.27886997e-03 -5.27831204e-02 -1.36583671e-01  4.58494091e-04
  5.74616157e-02  1.10526532e-02 -2.11878885e-02 -4.96466644e-03
  1.34241115e-02  5.93986101e-02  1.59038194e-02 -1.74196512e-02
 -4.43818942e-02  3.26920338e-02 -2.19424441e-02  3.45087126e-02
  7.92784840e-02  4.63025719e-02  7.27144778e-02 -6.35024533e-02]"
"      Instruction::new_with_borsh(PROG_KEY, &1u8, accounts.to_vec()),
        ]
        .to_vec(),
    );
    assert!(txn.is_ok());
}
12345678910111213141516171819202122232425262728293031Ngoài ra, scfs engine gadget có thể tạo ra một vec-tơ hoàn chỉnh để vô hiệu hoá các đề xuất cho một môi trường cụ thể. Ví dụ bên dưới cho thấy cơ chế để liệt kê toàn bộ các để xuất đã bị vô hiệu trên devnet.Devnet Parity#[test]
fn test_devnet_parity_pass() {
    // Use gadget-scfs to get all deactivated features from devnet
    // must have `gadgets-scfs = ""0.2.0"" in Cargo.toml to use
    // Here we setup for a run that samples features only
    // from devnet
    let mut my_matrix = ScfsMatrix::new(Some(ScfsCriteria {
        clusters: Some(vec![SCFS_DEVNET.to_string()]),
        ..Default::default()
    }))
    .unwrap();
    // Run the sampler matrix
    assert!(my_matrix.run().is_ok());
    // Get all deactivated features
    let deactivated = my_matrix
        .get_features(Some(&ScfsMatrix::any_inactive))
        .unwrap();
    // Confirm we have them
    assert_ne!(deactivated.len(), 0);
    // Setup test validator and logging while deactivating all
    // features that are deactivated in devnet
    let (test_validator, main_payer) = clean_ledger_setup_validator(deactivated).unwrap();
    let connection = test_validator.get_rpc_client();
    solana_logger::setup_with_default(""solana_runtime::message=debug"");

    let accounts = &[];
    let txn = submit_transaction(
        &connection,
        &main_payer,
        [
            // Add two (2) instructions to transaction
            // Replace with instructions that make sense for your program
            Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
            Instruction::new_with_borsh(PROG_KEY, &1u8, accounts.to_vec()),
        ]
        .to_vec(),
    );
    assert!(txn.is_ok());
}
123456789101112131415161718192021222324252627282930313233343536373839Chúc bạn có thời gian kiểm thử vui vẻ!#  Các nguồn tài liệu khácscfsdopen in new windowgadget-scfsopen in new window # Lập trình ở Local# Khởi chạy Local ValidatorKiểm thử program của bạn trên máy cá nhân sẽ nhanh và đáng tin cậy hơn nhiều so với devnet. Quá trình này giúp bạn có thể kiểm tra chương trình trước khi triển khai và kiểm thứ chúng trên devnet.Bạn có thể thiết lập local-test-validator bằng cách cài đặt bộ công cụ solana và chạy lệnh sau:solana-test-validator
1Lợi ích của việc chạy local-test-validator gồm:Không giới hạn truy vấn RPCKhông giới hạn số lượng SOL nhận được để kiểm thửTriển khai trực tiếp program lên on-chain (--bpf-program ...)Sao chép account từ các mạng công cộng, bao","[-4.45964709e-02 -4.78703976e-02 -1.01676106e-01 -3.70334536e-02
  1.48177221e-01 -4.92605828e-02  7.66234919e-02  5.35948947e-02
 -7.48640895e-02 -8.14045407e-03  1.24068499e-01 -9.26280115e-03
  1.87230855e-02 -5.95222339e-02  2.73426436e-03 -3.58730517e-02
 -3.98839861e-02 -5.15747182e-02  8.76733474e-03 -4.48981337e-02
 -2.22431310e-02  1.56189231e-02 -2.06666067e-02  3.38586383e-02
 -7.83416536e-03 -8.63473862e-02  4.08937745e-02  4.03447077e-02
 -5.24968430e-02 -1.08025521e-02  5.45041747e-02  1.43378302e-01
 -6.15879819e-02  4.04777995e-04  9.80649814e-02  5.56411706e-02
 -4.21181060e-02 -3.19919810e-02 -3.96009088e-02 -4.60634157e-02
 -1.14285825e-02 -3.28632034e-02 -7.22405538e-02 -1.08100073e-02
  3.46928500e-02  1.70345744e-03 -3.90158705e-02 -3.10820248e-02
 -9.99183673e-03 -2.75294594e-02 -1.42324921e-02  1.01760522e-01
 -7.90562034e-02 -4.24953140e-02  2.75004599e-02 -2.95666028e-02
 -4.98749465e-02 -1.09623196e-02  1.38050131e-02 -7.74243381e-03
  4.53326758e-03 -2.03214157e-02  1.57559980e-02 -5.41962571e-02
  6.80807093e-03 -1.68221518e-02  1.45070162e-03 -2.55701933e-02
 -3.89830694e-02  2.34579593e-02 -2.21736748e-02  4.42734808e-02
 -7.84923062e-02  3.51876952e-02 -5.64288571e-02  2.94498634e-02
 -4.70690876e-02  9.25828982e-03  5.06387139e-03 -8.89379233e-02
 -4.72720936e-02  1.33128064e-02  4.30018350e-04  1.13012211e-03
  1.27642835e-02  5.69774546e-02 -5.10220230e-03  4.11105938e-02
  4.23524901e-03  2.42405608e-02  5.07064797e-02  4.57875468e-02
  7.42003275e-03  1.81426145e-02  1.94904879e-02 -1.56333651e-02
  2.13155020e-02  1.00361984e-02 -1.72465779e-02  8.80108029e-02
 -9.87825915e-03 -1.51041429e-02  6.19307347e-02  4.21398506e-02
 -3.02490741e-02  6.43943101e-02  4.35019806e-02 -8.05217493e-03
  7.93731119e-03 -1.50352893e-02 -1.15009090e-02  6.78321198e-02
  6.26855763e-03 -8.81665125e-02 -1.62789933e-02  3.65311615e-02
 -9.70600098e-02  2.64162328e-02 -6.66901618e-02  3.35889645e-02
  4.06907015e-02  2.19869427e-02 -2.26589590e-02 -8.11627787e-03
 -3.61371450e-02  3.67557891e-02  1.20186908e-02  1.30486720e-32
 -5.05930670e-02 -7.89244026e-02 -4.42046346e-03  4.77851415e-03
 -3.64828855e-02 -1.02174552e-02  4.58866544e-02  8.97819474e-02
 -7.51044154e-02  2.73370743e-02 -1.15156509e-01 -1.16936974e-02
 -2.25276090e-02 -7.05484226e-02  2.53117997e-02 -4.82684597e-02
  8.23596939e-02 -3.11995838e-02  8.66268203e-02  7.01523479e-03
  7.46720508e-02 -6.38670996e-02 -4.16332670e-02 -3.86102311e-02
  5.89975901e-02 -1.24169491e-01 -6.33731261e-02 -4.82629687e-02
 -1.90864820e-02  5.03982939e-02 -4.11544442e-02  1.68285277e-02
  1.85899585e-02  6.72180951e-02 -4.26908284e-02 -1.08593248e-01
 -7.83414487e-03 -5.95325567e-02 -5.03673740e-02 -3.96103933e-02
  9.66678858e-02 -1.81494784e-02  1.01358974e-02 -4.06525806e-02
 -8.95895660e-02  2.92295273e-02  2.76287496e-02  4.96369936e-02
  3.36278267e-02  5.77644221e-02 -1.87781844e-02  5.44202467e-03
 -2.56848522e-02 -4.21946049e-02  1.16876801e-02 -8.41419026e-03
  7.69309886e-03 -7.66397268e-02  4.33703065e-02  7.83014446e-02
 -8.43411386e-02  5.72654940e-02 -2.43021804e-03 -1.11126173e-02
  3.10068354e-02 -2.19193753e-02 -1.95519943e-02 -6.28684759e-02
  3.30601409e-02 -3.29263955e-02 -2.17503998e-02 -2.27174498e-02
 -2.38703229e-02 -7.04770535e-03  3.39379977e-03 -4.31186408e-02
  2.89208516e-02  1.16174901e-02 -1.04685828e-01  3.66960540e-02
 -1.30064832e-02  2.85280887e-02 -8.25716406e-02 -1.40264686e-02
  6.44216361e-03  3.94208962e-03  1.37486181e-03 -1.18289441e-01
  3.81158032e-02 -5.56995906e-02 -1.76170934e-02 -3.81803215e-02
 -2.91161565e-03 -6.92026392e-02 -4.66921180e-02 -1.06855941e-32
 -1.66645776e-02 -6.92548463e-04 -1.41104124e-02  5.02032340e-02
  1.99103523e-02  4.75247391e-03  7.70902336e-02 -9.49558914e-02
  9.46077425e-03 -3.64754163e-03  6.85285218e-03 -2.13552881e-02
 -2.02976353e-03 -9.16386172e-02  7.35808462e-02  4.75147106e-02
 -8.52277651e-02 -5.53498156e-02  4.63380739e-02  7.01013431e-02
 -4.96459529e-02  1.07803479e-01  4.04734947e-02 -3.29871476e-02
 -1.33388266e-02  2.99724620e-02 -2.04907488e-02  8.85324031e-02
 -4.35272418e-03  9.38054826e-03  9.72865243e-03 -1.46040628e-02
 -1.38998851e-01  1.07741795e-01  8.26000143e-03 -9.65049714e-02
  7.43405893e-02  1.17474459e-01 -3.13027687e-02  2.14993395e-02
  5.18908426e-02  5.69006987e-02 -5.91424331e-02  9.60565284e-02
 -3.80356424e-02 -2.43559387e-03  1.03848264e-01 -1.69555831e-03
  1.07105058e-02 -3.15394774e-02  8.75097737e-02  3.02380119e-02
  3.43954712e-02  1.37325525e-02  4.29945299e-03  6.13180026e-02
  8.49417523e-02 -1.25946430e-02 -6.91290051e-02 -2.55272468e-03
  1.62180915e-01 -2.46729236e-02 -9.17369686e-03 -6.00027898e-03
  8.56030509e-02 -7.81949908e-02 -5.51769212e-02  1.09732591e-01
  1.45377284e-02 -6.32278323e-02 -6.65271804e-02  6.97529502e-03
  2.87759565e-02  3.41056250e-02 -1.06299380e-02  9.01439972e-03
 -6.17918447e-02 -3.64944451e-02  3.70254032e-02  5.47843687e-02
 -3.72338593e-02  3.33025679e-02 -2.10889075e-02  7.95304962e-03
 -1.62451677e-02  7.56958220e-03 -3.14145535e-02  4.75236811e-02
  9.89290252e-02 -2.56411750e-02 -3.68429907e-02  2.31332909e-02
  3.49178426e-02  1.36386484e-01  4.51544262e-02 -6.49273915e-08
 -4.58400063e-02 -3.93469185e-02 -3.64303999e-02  9.04517528e-03
  5.15266247e-02 -4.96988557e-02  2.66083591e-02 -2.57937089e-02
  3.30551118e-02 -6.61360770e-02 -1.05342558e-02 -6.05522934e-03
 -9.46800411e-02  8.49957578e-03 -1.23577444e-02  6.24441914e-03
  2.49324702e-02  5.46633601e-02 -3.17610167e-02 -2.23788153e-02
  3.95690724e-02 -4.11525555e-02 -6.02680519e-02  3.25553492e-02
 -5.28748818e-02 -3.43524627e-02  5.93876839e-02  8.01244080e-02
  4.71287891e-02  3.29942331e-02  5.80509193e-03 -1.04318194e-01
  3.24355923e-02  2.53511360e-03  7.80219138e-02  7.09614009e-02
 -1.54409418e-03  7.08351359e-02  4.65337671e-02  3.43248285e-02
  5.74626401e-03  5.03132828e-02 -9.72004328e-03 -2.07712594e-02
 -2.69867275e-02 -9.17795673e-02 -4.42763716e-02 -4.56593465e-03
  1.15410417e-01 -9.68478713e-03 -8.77177343e-03  3.12800566e-03
 -2.74281222e-02  1.19823106e-01  9.65985879e-02 -3.61047126e-02
  1.19184870e-02  2.68341973e-02 -5.19825480e-05  3.31723914e-02
  1.09576918e-02  1.00002214e-01  1.67697258e-02 -4.70805392e-02]"
"gồm cả các program (--clone ...)Có thể điều chỉnh số lượng lịch sử transaction (--limit-ledger-size ...)Có thể điều chỉnh độ dài epoch (--slots-per-epoch ...)Nhảy đến bấy kỳ chỗ trống nào (--warp-slot ...)# Kết nối đến môi trườngMột khi bắt đầu làm việc với môi trường phát triển ứng dụng trên Solana, bạn sẽ cần phải kết nối ứng dụng của bạn đến một điểm RPC API cụ thể. Solana có 3 môi trường công cộng cho quá trình phát triển ứng dụng:mainnet-beta: https://api.mainnet-beta.solana.comdevnet: https://api.devnet.solana.comtestnet: https://api.testnet.solana.comTSPythonC++RustCLIPress </> button to view full sourceimport { clusterApiUrl, Connection } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
})();
12345const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
1from solana.rpc.api import Client

client = Client(""https://api.mainnet-beta.solana.com"")
123client = Client(""https://api.mainnet-beta.solana.com"")
1#include ""solana.hpp""

using namespace many::solana;

int main() {
    Connection connection(""https://api.mainnet-beta.solana.com"");
    return 0;
}
12345678Connection connection(""https://api.mainnet-beta.solana.com"");
1use solana_client::rpc_client::RpcClient;
use solana_sdk::commitment_config::CommitmentConfig;

fn main() {
    let rpc_url = String::from(""https://api.mainnet-beta.solana.com"");
    let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
}
1234567let rpc_url = String::from(""https://api.mainnet-beta.solana.com"");
let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
12solana config set --url https://api.mainnet-beta.solana.com
1solana config set --url https://api.mainnet-beta.solana.com
1Cuối cùng bạn cũng có thể kết nối đến các mạng riêng, hoặc từ một điểm truy cập cá nhân, hoặc từ một dịch vụ từ xa ví dụ như:TSPythonC++RustCLIPress </> button to view full sourceimport { Connection } from ""@solana/web3.js"";

(async () => {
  // This will connect you to your local validator
  const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");
})();
123456const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");
1from solana.rpc.api import Client

client = Client(""http://127.0.0.1:8899"")
123client = Client(""http://127.0.0.1:8899"")
1#include ""solana.hpp""

using namespace many::solana;

int main() {
    Connection connection(""http://127.0.0.1:8899"");
    return 0;
}
12345678Connection connection(""http://127.0.0.1:8899"");
1use solana_client::rpc_client::RpcClient;
use solana_sdk::commitment_config::CommitmentConfig;

fn main() {
    let rpc_url = String::from(""http://127.0.0.1:8899"");
    let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
}
1234567let rpc_url = String::from(""http://127.0.0.1:8899"");
let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
12solana config set --url http://privaterpc.com
1solana config set --url http://privaterpc.com
1# Lắng nghe các sự kiệnWebsockets cung cấp một giao diện pub/sub để bạn có thể lắng nghe các sự kiện cụ thể. Thay vì liên tục gọi vào các điểm thông tin thông qua HTTP để thường xuyên cập nhật dữ liệu, bạn có thể nhận được dữ liệu cập nhật mỗi khi có thay đổi xảy ra.Connectionopen in new window trong web3 của Solana sẽ chủ động tạo ra một kết nối websocket mỗi khi bạn tạo mới Connection (chi tiết mã nguồn tại đâyopen in new window).Lớp Connection sẽ cung cấp các phương thức pub/sub - tất cả chúng đều bắt đầu với tiền tố on, giống như các emitter. Khi bạn gọi vào một phương thức nghe, nó sẽ đăng ký một sự kiện mới vào websocket người dùng của Connection vừa tạo. Ví dụ cho phương thức pub/sub bên dưới sẽ sử dụng onAccountChangeopen in new window. Hàm gọi lại (callback) sẽ nhận các tham số và cập nhật lại trạng thái mới (tham khảo ví dụ AccountChangeCallbackopen in new window).TSPythonC++RustPress </> button to view full sourceimport { clusterApiUrl, Connection, Keypair } from ""@solana/web3.js"";

(async () => {
  // Establish new connect to devnet - websocket client connected to devnet will also be registered here
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // Create a test","[-7.89543539e-02 -2.90265642e-02 -1.27441615e-01 -2.69194581e-02
 -1.02014476e-02 -2.51895413e-02  2.05024406e-02  3.46233137e-02
  4.86170202e-02  2.12542061e-02  1.29394367e-01 -1.00901976e-01
 -6.00499287e-02 -5.99898258e-03  4.45454270e-02 -5.74953817e-02
 -3.18600759e-02 -3.22222970e-02 -2.87532397e-02 -4.21888195e-02
 -5.26078185e-03 -3.30232605e-02 -6.40471727e-02 -1.61986090e-02
 -7.45873749e-02 -2.43263822e-02 -3.05239614e-02  1.47314128e-02
  2.83830613e-02 -2.65121553e-02 -3.81007567e-02  1.23931699e-01
  3.17052589e-03  4.75491583e-02  7.95698613e-02  4.95016202e-02
  1.09073203e-02 -7.62942210e-02 -3.14039178e-02 -3.38160470e-02
  1.62719861e-02  4.75084260e-02 -4.84756157e-02 -6.33725747e-02
  6.94121048e-02 -3.61426994e-02 -3.81109640e-02 -1.74394064e-02
 -4.54911850e-02 -5.20049110e-02 -7.29997978e-02  9.48144794e-02
 -4.08278331e-02  1.01964198e-01 -1.44039243e-02  2.29877029e-02
  4.53832652e-03  6.27571866e-02  5.89800775e-02 -5.16686253e-02
  4.22809161e-02  4.30492451e-03 -3.81004736e-02 -6.28859475e-02
 -3.97570133e-02 -3.78396213e-02 -1.90140698e-02 -1.69447530e-02
  1.69993583e-02 -2.39900500e-02 -6.98932484e-02 -4.67938073e-02
 -1.01414882e-01  1.82245784e-02 -1.42258471e-02  3.40568945e-02
  1.70096345e-02  5.50287552e-02 -1.25314966e-02 -1.16928369e-01
  2.78494824e-02  6.53688610e-02  6.04045279e-02  1.36672170e-04
 -4.08463664e-02  6.63751215e-02 -5.33905961e-02  7.98751251e-04
  7.44150952e-02 -7.95095116e-02  8.74720961e-02  9.30111930e-02
 -4.19037603e-02 -7.74523336e-03  1.18707214e-02 -2.47873887e-02
  3.73269804e-02  2.59888880e-02  4.27941466e-03  7.06049427e-02
  9.94844660e-02  3.43222637e-03 -3.28366756e-02  1.31323254e-02
 -6.74000010e-02  1.59701053e-02  4.53251638e-02  3.19723748e-02
  8.88125680e-04  8.94640237e-02 -3.12952064e-02  9.10003111e-02
 -1.13879293e-02 -1.14014357e-01 -7.13565350e-02  1.38516396e-01
 -3.59335430e-02 -1.43819079e-02 -1.08269388e-02  8.23732540e-02
  3.34359482e-02 -2.63671819e-02 -4.55139093e-02 -2.35548764e-02
 -1.02641126e-02  5.96445892e-03  4.25482281e-02  1.14843469e-32
  2.72484720e-02 -1.30367018e-02 -4.19214042e-03 -8.71533006e-02
  1.97135229e-02 -3.32681425e-02  3.98757011e-02 -2.93008308e-03
 -5.69308139e-02 -8.58888850e-02 -3.18983383e-02 -1.07026787e-03
 -8.15932974e-02 -8.36776942e-02  2.50257924e-03 -1.28577417e-02
  2.24591196e-02  2.51351530e-03  6.00092039e-02 -1.04041276e-02
  1.88987862e-04 -8.79968554e-02  2.57752445e-02 -4.63838950e-02
  7.42907226e-02  1.30793853e-02 -4.64129411e-02 -7.45543987e-02
  8.34894460e-03  3.67199928e-02  8.46832991e-02 -2.29762075e-03
 -2.39254758e-02  3.02989352e-02 -5.82400523e-03 -3.11068315e-02
 -5.16965613e-02 -2.64009889e-02 -5.92805631e-02 -4.18374166e-02
 -3.01717059e-03  1.62904710e-02  3.11716134e-03 -9.91060305e-03
 -1.85363356e-03  2.92454716e-02  1.01675326e-02  2.37809625e-02
  1.12920463e-01  5.89725375e-02 -7.74943009e-02 -4.77948412e-02
 -7.23152608e-02 -1.29761677e-02  3.60394493e-02 -1.53573172e-03
  3.18685472e-02 -2.01444589e-02 -2.53017265e-02  3.05321775e-02
 -3.80555764e-02 -7.84247890e-02 -2.92164981e-02  5.01382584e-03
 -1.76547784e-02  1.86265968e-02 -5.70478290e-02  2.96410900e-02
  3.90246846e-02 -1.93916331e-03 -8.88058320e-02 -3.49737555e-02
  5.24462573e-02  7.99134746e-02 -1.28200250e-02 -4.80803140e-02
  6.37073889e-02  4.01892811e-02 -1.28252238e-01  2.23657303e-02
 -4.49005961e-02 -5.97680965e-03 -4.18140888e-02  2.56414455e-03
 -3.19959782e-02  3.06938794e-02  5.43307774e-02 -1.58830993e-02
  4.61361371e-02 -4.70914282e-02  3.45022753e-02  4.31733914e-02
  6.56176582e-02 -2.75470829e-03 -6.93928897e-02 -8.94700121e-33
  1.76127236e-02 -2.16760579e-03 -1.02821231e-01 -1.85320247e-02
  7.27686007e-03 -5.45173213e-02 -8.31425469e-03 -1.87053438e-02
  1.82776377e-02 -1.57864019e-02  3.69029380e-02 -2.16247849e-02
  3.30199488e-02 -1.42658344e-02 -2.08725315e-02  7.65936077e-02
  2.91649755e-02 -1.70166250e-02  2.67910697e-02  3.32262702e-02
 -6.73740637e-03  1.18909804e-02  9.46662854e-03 -2.94939391e-02
 -3.03386264e-02 -1.96651407e-02  2.03299765e-02  8.29220936e-02
 -2.86358502e-02  4.35554329e-03  5.35565466e-02 -5.45902960e-02
 -9.85252708e-02  8.33948180e-02 -8.57747276e-04 -1.08426198e-01
  3.95843834e-02  9.34814289e-02 -1.58189156e-03  2.94324756e-02
  4.67472784e-02 -2.52496004e-02 -8.13242495e-02 -7.08186021e-03
 -3.62296519e-03 -3.66250984e-02  7.72398859e-02  2.82451068e-03
 -7.92583600e-02 -4.74149659e-02  1.05028778e-01 -1.17305228e-02
  4.52970751e-02  2.65987236e-02  2.57933140e-02  1.26891941e-01
  7.53790140e-02  2.87127439e-02 -7.89014921e-02 -7.47597665e-02
  7.73651451e-02 -2.16027349e-02 -3.51442210e-02  1.31516752e-03
  1.24260895e-01 -2.36546760e-03  2.37681754e-02  4.87173796e-02
 -6.91414718e-03 -3.88486199e-02 -2.94038840e-02 -9.72336903e-03
  5.81074804e-02  3.66307870e-02 -5.98222092e-02 -2.62530968e-02
 -4.14473116e-02 -1.73102207e-02  3.93945388e-02  1.43675804e-02
 -8.83248299e-02  3.49854566e-02  4.26384769e-02  1.70158576e-02
  2.93942466e-02  6.65385649e-03 -2.81747291e-03  5.37557565e-02
  1.43968500e-02  4.35768394e-03 -7.80823976e-02  5.99218020e-03
 -1.08981561e-02  1.11480311e-01  9.29486100e-03 -6.27108321e-08
  7.87334051e-03 -1.02486327e-01 -1.23824432e-01  5.29441461e-02
  5.54624908e-02  2.22462602e-02  2.54085548e-02  1.18400631e-02
  2.56914715e-03  6.72927275e-02 -4.19513788e-03 -3.99939250e-03
 -1.04212008e-01 -1.03143230e-02  1.15500791e-02 -3.83765134e-03
 -1.68316122e-02  5.57455234e-02 -2.57015005e-02 -9.99232009e-02
  6.03142120e-02 -4.77356836e-02  2.50321422e-02  3.64315766e-03
  2.95178890e-02 -5.93407822e-05  3.48656215e-02  9.08318833e-02
 -4.79899421e-02 -7.30122998e-02 -4.13278453e-02 -8.10056329e-02
  8.10912475e-02 -3.44203003e-02  6.76833987e-02  8.12186375e-02
 -3.75205390e-02  2.79400963e-02  5.48779778e-03  9.92341638e-02
  5.03624119e-02  6.91778213e-02  1.85444113e-02 -7.88414292e-03
  7.03867897e-02  1.01652220e-02  2.15575099e-02 -4.89640282e-03
  1.46444708e-01  2.31927112e-02 -3.13297696e-02 -5.18239588e-02
  5.95535934e-02  2.48115938e-02 -1.24305664e-02  4.13764939e-02
 -6.84703663e-02  3.58014554e-02  2.60876808e-02  7.02091083e-02
  2.77277380e-02  8.48368555e-02 -1.44900074e-02  6.90366654e-03]"
"wallet to listen to
  const wallet = Keypair.generate();

  // Register a callback to listen to the wallet (ws subscription)
  connection.onAccountChange(
    wallet.publicKey(),
    (updatedAccountInfo, context) =>
      console.log(""Updated account info: "", updatedAccountInfo),
    ""confirmed""
  );
})();
1234567891011121314151617// Establish new connect to devnet - websocket client connected to devnet will also be registered here
const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

// Create a test wallet to listen to
const wallet = Keypair.generate();

// Register a callback to listen to the wallet (ws subscription)
connection.onAccountChange(
  wallet.publicKey(),
  (updatedAccountInfo, context) =>
    console.log(""Updated account info: "", updatedAccountInfo),
  ""confirmed""
);
12345678910111213import asyncio
from solders.keypair import Keypair
from solana.rpc.websocket_api import connect

async def main():
    async with connect(""wss://api.devnet.solana.com"") as websocket:
        # Create a Test Wallet
        wallet = Keypair()
        # Subscribe to the Test wallet to listen for events
        await websocket.account_subscribe(wallet.pubkey())
        # Capture response from account subscription 
        first_resp = await websocket.recv()
        print(""Subscription successful with id {}, listening for events \n"".format(first_resp.result))
        updated_account_info = await websocket.recv()
        print(updated_account_info)
        
asyncio.run(main())
1234567891011121314151617async with connect(""wss://api.devnet.solana.com"") as websocket:
    # Create a Test Wallet
    wallet = Keypair()
    # Subscribe to the Test wallet to listen for events
    await websocket.account_subscribe(wallet.pubkey())
    # Capture response from account subscription 
    first_resp = await websocket.recv()
    print(""Subscription successful with id {}, listening for events \n"".format(first_resp.result))
    updated_account_info = await websocket.recv()
    print(updated_account_info)    
12345678910// clang++ on_account_change.cpp -o on_account_change -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  Connection connection(""https://api.devnet.solana.com"");

  auto key_pair = Keypair::generate();

  int subscriptionId = connection.on_account_change(key_pair.public_key, [&](Result<Account> result) {
    Account account = result.unwrap();
    std::cout << ""owner = "" << account.owner.to_base58() << std::endl;
    std::cout << ""lamports = "" << account.lamports << std::endl;
    std::cout << ""data = "" << account.data << std::endl;
    std::cout << ""executable = "" << (account.executable ? ""true"" : ""false"") << std::endl;
  });

  sleep(1);

  std::string tx_hash = connection.request_airdrop(key_pair.public_key).unwrap();
  std::cout << ""tx hash = "" << tx_hash << std::endl;

  for (int i = 0; i < 10; i++) {
    connection.poll();
    sleep(1);
  }

  connection.remove_account_listener(subscriptionId);

  return 0;
}
123456789101112131415161718192021222324252627282930313233auto key_pair = Keypair::generate();

int subscriptionId = connection.on_account_change(key_pair.public_key, [&](Result<Account> result) {
    Account account = result.unwrap();
    std::cout << ""owner = "" << account.owner.to_base58() << std::endl;
    std::cout << ""lamports = "" << account.lamports << std::endl;
    std::cout << ""data = "" << account.data << std::endl;
    std::cout << ""executable =","[-5.58523163e-02 -5.96113764e-02 -7.00937808e-02  1.53468354e-02
 -1.94457993e-02 -4.91265282e-02  6.34383410e-02  4.18717600e-02
  5.72678149e-02  6.87200157e-03 -1.42318513e-02 -1.24867363e-02
  1.22234728e-02  8.17935634e-03  1.29141686e-02 -3.43343951e-02
  2.04305388e-02 -3.06277219e-02  5.95839061e-02 -2.18961630e-02
 -7.05059841e-02 -4.12052497e-02  1.93612203e-02 -5.03956564e-02
  2.92466544e-02 -4.11266908e-02  5.60686141e-02 -2.02454496e-02
  6.38790196e-03  6.42382205e-02  9.52953920e-02 -5.14654070e-02
  5.94167365e-03 -5.13220876e-02 -2.07913201e-02  3.45354825e-02
  6.60336167e-02  5.99162057e-02 -6.14219755e-02  2.35007126e-02
  7.44108409e-02  4.19854559e-02 -5.75007610e-02  4.97225225e-02
  2.37428136e-02 -2.81596910e-02 -1.39017761e-01  8.25441629e-02
 -4.95084859e-02  3.76832858e-02 -8.29547364e-03 -6.51928559e-02
 -6.50930479e-02  3.59474309e-02 -4.39817645e-02  2.40215398e-02
  3.47211398e-02  4.08041961e-02  8.53037983e-02 -1.32899016e-01
  9.33179781e-02 -9.52850878e-02  6.53520003e-02 -3.61468061e-03
 -8.73313472e-02  5.93725108e-02  1.50278443e-02  4.99980077e-02
  3.05437744e-02 -3.97205465e-02 -2.10000295e-03  7.47570693e-02
  8.76615476e-03 -4.53068949e-02 -1.33421822e-02  2.34540794e-02
  4.81814854e-02  1.80108771e-02 -6.62802905e-03  6.70985505e-02
 -3.04005798e-02  5.59288403e-03 -2.25288253e-02  2.81009153e-02
  1.88852921e-02  1.06187403e-01 -5.87880015e-02 -5.89338429e-02
 -4.34302203e-02 -4.08460610e-02 -7.95876160e-02 -1.71502754e-02
 -5.41120172e-02 -1.61640458e-02 -1.55990152e-02  6.85651228e-02
  1.30932312e-02  3.17884050e-02  3.21731181e-03  6.28223224e-03
 -2.33472493e-02 -1.03851473e-02 -4.76165526e-02 -1.35350386e-02
  2.36072894e-02 -4.36698198e-02 -1.22068990e-02 -5.11316722e-03
  3.74051668e-02  4.49352227e-02 -7.49262571e-02  3.94999161e-02
  5.13421036e-02  2.93327421e-02 -1.23116076e-02  1.08160183e-01
  4.04574983e-02  5.20393513e-02 -4.17151983e-04  7.25937262e-02
  8.70212987e-02  2.22831368e-02 -2.75009070e-02 -3.17314044e-02
 -3.05356905e-02  2.97939051e-02  4.03643362e-02  5.98110334e-33
 -1.14307404e-02 -2.77743321e-02  1.49407899e-02  2.77023092e-02
  1.11994341e-01 -8.00030604e-02  9.74768996e-02 -4.49749269e-02
 -5.34359179e-02 -2.75526084e-02 -4.86304611e-02  9.40447301e-03
  4.56932746e-02 -5.94934635e-02 -8.09767619e-02 -4.82969433e-02
  1.17208157e-02  8.00898820e-02  7.12709501e-02  3.51316966e-02
 -7.15358257e-02 -7.73470923e-02  7.97678530e-02 -3.67065780e-02
  2.17157174e-02 -2.21277848e-02 -2.21994277e-02  1.24600992e-01
  4.20794860e-02 -2.39019021e-02  3.59534137e-02 -1.00665251e-02
 -1.63770020e-02  5.19029982e-02 -3.12660225e-02 -1.05227083e-01
 -4.99071134e-03 -2.53597721e-02 -7.40749091e-02 -3.51501629e-02
  4.21243683e-02 -6.96439072e-02 -8.60077292e-02 -5.39128436e-04
  1.87769979e-02 -3.41381207e-02  1.88713591e-03 -2.86962073e-02
  1.03797168e-01 -3.41228768e-02 -3.37054655e-02  1.29003981e-02
 -6.89483657e-02 -6.99597225e-02  5.74024068e-03 -2.14384999e-02
  3.13287191e-02 -4.85091005e-03 -4.96903434e-02 -6.36501312e-02
 -4.74425368e-02  3.48918629e-03  2.70613208e-02 -5.74134365e-02
  4.51869033e-02  1.40060042e-03 -4.30668369e-02 -1.42698297e-02
 -4.82699834e-02 -1.24182021e-02  6.45530373e-02  4.98619378e-02
 -1.02131471e-01  5.66439889e-02 -5.48139811e-02  4.97233234e-02
  2.24479642e-02  5.27070910e-02 -5.81167415e-02  3.58759332e-03
  5.49957827e-02  7.35421702e-02 -6.04899377e-02  1.07532158e-01
  1.99335646e-02  7.57706463e-02 -3.21956202e-02 -2.94534415e-02
  9.27696191e-03  4.20720242e-02 -3.65726240e-02  1.53990649e-03
  4.01629172e-02 -7.67132193e-02 -4.67208959e-02 -6.16355843e-33
 -3.22104171e-02 -2.30328143e-02 -4.68934327e-02 -4.65749577e-03
 -3.67635041e-02  1.01393908e-02 -5.34226894e-02  2.33486444e-02
  2.06776732e-03 -4.62647304e-02  1.03563659e-01 -1.21303843e-02
  1.99092459e-02  3.46872620e-02 -6.77022571e-03  2.91264113e-02
  5.79058267e-02 -6.26868382e-02  2.87658516e-02 -5.15662879e-02
  3.14104632e-02 -3.56197432e-02  1.02499565e-02 -2.36820579e-02
 -8.87288526e-02  1.92972668e-03  6.47898065e-03  4.92320918e-02
 -6.00577481e-02 -2.96866950e-02  2.24586483e-02  3.42315212e-02
 -2.94841826e-02  5.27282767e-02  4.84079719e-02 -1.65782422e-02
  7.08379224e-02  2.14623921e-02  4.30415273e-02 -3.16695645e-02
  4.89867106e-02 -5.06979488e-02 -1.89283639e-02 -2.04518363e-02
  4.00081947e-02 -3.74113619e-02  6.46233037e-02 -8.71010416e-05
 -3.79205197e-02  5.52715659e-02  2.38940120e-02 -2.27303766e-02
  4.55682352e-03  8.62617120e-02 -2.55485214e-02  1.58489183e-01
  4.29841541e-02  1.22749088e-02  7.47278258e-02 -5.97199760e-02
  3.13599259e-02 -1.38170958e-01 -9.07653850e-03  4.60758284e-02
  1.18673425e-02 -1.11523140e-02 -9.04542282e-02  3.51378880e-02
  3.15805562e-02  2.84463093e-02 -6.78560734e-02  3.44357789e-02
 -9.26053710e-03  3.10099516e-02  1.54959233e-02 -7.48824477e-02
 -2.68854760e-02 -8.46823603e-02  7.52243493e-03  1.85862079e-03
 -5.78069948e-02  4.10882682e-02 -1.41034573e-02 -8.38493034e-02
  3.84039767e-02  1.28552001e-02  3.43743637e-02  4.63366918e-02
  4.11559008e-02 -2.66324170e-02 -6.84617832e-02 -3.95761617e-02
 -6.62929341e-02 -6.69324398e-02  4.74701449e-02 -5.15590521e-08
 -2.59373174e-03  7.63787851e-02 -4.42807414e-02  7.01580942e-03
 -4.74226065e-02  4.66766544e-02 -3.99626903e-02 -1.68005466e-01
 -1.68666132e-02  2.13569365e-02 -1.03044041e-01  1.81606226e-02
  1.10528916e-02  1.12154651e-02  1.71328634e-02 -4.34632134e-03
 -1.60551313e-02 -4.87564653e-02  4.63895239e-02 -1.03731148e-01
  1.03701755e-01 -1.48148295e-02  5.63802496e-02  5.28135560e-02
  5.51662967e-03 -1.24727841e-02  1.12712815e-01  4.44550961e-02
 -2.34134439e-02 -6.95949644e-02 -9.22098905e-02 -2.28832085e-02
 -6.01779204e-03 -2.68088430e-02 -7.09918328e-03 -1.04283309e-02
 -5.09661436e-02 -2.15517562e-02  5.60632274e-02  1.20930061e-01
  2.23651435e-02  4.16496657e-02 -3.45176645e-02  4.07474227e-02
 -1.02147080e-01  6.60989583e-02  1.82159282e-02  6.36935681e-02
  4.51340675e-02  1.33773889e-02  1.45101016e-02 -7.00018480e-02
  7.05218390e-02 -4.20931838e-02 -4.48190644e-02 -2.45311094e-04
 -2.82627977e-02 -5.36223687e-02 -8.86938795e-02  2.92487945e-02
 -2.04423722e-02  7.05498829e-02  1.80111397e-02 -5.15589230e-02]"
""" << (account.executable ? ""true"" : ""false"") << std::endl;
});

for (int i = 0; i < 10; i++) {
    connection.poll();
    sleep(1);
}

connection.remove_account_listener(subscriptionId);
12345678910111213141516use solana_client::pubsub_client::PubsubClient;
use solana_client::rpc_config::RpcAccountInfoConfig;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let wallet = Keypair::new();
    let pubkey = Signer::pubkey(&wallet);
    let ws_url = String::from(""wss://api.devnet.solana.com/"");
    println!(""{}"", ws_url);
    if let Ok(subscription) = PubsubClient::account_subscribe(
        &ws_url,
        &pubkey,
        Some(RpcAccountInfoConfig {
            encoding: None,
            data_slice: None,
            commitment: Some(CommitmentConfig::confirmed()),
        }),
    ) {
        let (mut ws_client, receiver) = subscription;
        println!(""Subscription successful, listening for events"");
        let handle = std::thread::spawn(move || loop {
            println!(""Waiting for a message"");
            match receiver.recv() {
                Ok(message) => println!(""{:?}"", message),
                Err(err) => {
                    println!(""Connection broke with {:}"", err);
                    break;
                }
            }
        });
        handle.join().unwrap();
        ws_client.shutdown().unwrap()
    } else {
        println!(""Errooooor"");
    }
}
12345678910111213141516171819202122232425262728293031323334353637let ws_url = String::from(""wss://api.devnet.solana.com/"");
let (mut client, receiver) = PubsubClient::account_subscribe(
    &ws_url,
    &pubkey,
    Some(RpcAccountInfoConfig {
        encoding: None,
        data_slice: None,
        commitment: Some(CommitmentConfig::confirmed()),
    }),
).unwrap();
let message = match receiver.recv().unwrap();
println!(""{:?}"", message)
123456789101112# Nhận SOL để kiểm thửKhi bạn làm việc trên môi trường địa phương, bạn sẽ phải cần một ít SOL để gửi transaction. Trong các môi trường không phải mainnet, bạn có thể nhận được SOL miễn phí.TSPythonC++RustCLIPress </> button to view full sourceimport { Connection, Keypair, LAMPORTS_PER_SOL } from ""@solana/web3.js"";

(async () => {
  const keypair = Keypair.generate();

  const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");

  const signature = await connection.requestAirdrop(
    keypair.publicKey,
    LAMPORTS_PER_SOL
  );
  const { blockhash, lastValidBlockHeight } = await connection.getLatestBlockhash();
 ","[-3.28358151e-02  2.78554522e-02 -1.43699288e-01  2.19751312e-03
 -2.63170227e-02 -3.25246044e-02  3.19729559e-02 -3.45056653e-02
  4.60245796e-02 -8.04643240e-03  8.66478682e-03 -4.42502610e-02
 -2.20399047e-03 -1.47690931e-02  4.25234102e-02  2.08795406e-02
 -1.10996000e-01 -2.10121647e-02  1.91312637e-02  1.35008888e-02
 -3.91894914e-02  3.10881902e-02 -4.70728911e-02 -3.23655526e-03
  1.04051027e-02 -9.80150178e-02  5.74516319e-02 -2.83635370e-02
 -3.62091847e-02  6.55006841e-02  1.49978340e-01  2.48541776e-02
 -2.55487822e-02  9.98453889e-03  2.08292156e-03  7.49301985e-02
  1.04688201e-02 -1.53701883e-02 -3.58149894e-02 -4.05033231e-02
  5.89041151e-02 -4.34831902e-03 -9.14977118e-02 -6.64945226e-03
  2.75375452e-02 -4.19250838e-02 -1.38572946e-01  5.22702485e-02
 -8.18155799e-03  2.02403404e-02 -1.16104204e-02 -9.43719503e-03
 -9.35578868e-02  3.34929414e-02  6.23182468e-02 -1.71773450e-03
 -2.76814643e-02  2.64859684e-02  7.60997236e-02 -2.70714946e-02
  5.68483323e-02 -1.25742601e-02  1.43558057e-02 -4.75853831e-02
 -7.09289834e-02 -2.31679110e-03 -4.58925776e-02  4.10664789e-02
  5.90556487e-02  2.93021966e-02 -1.08655458e-02 -9.02843382e-03
 -4.40321229e-02 -8.03350657e-02 -4.63460684e-02 -1.97617486e-02
 -2.03638561e-02 -4.93476540e-03 -1.77632589e-02  1.31256655e-02
 -1.05054798e-02 -5.20529263e-02 -1.14101917e-02  6.99507073e-02
  1.45551646e-02  9.84424800e-02 -5.38337231e-02 -1.29883617e-01
  1.18479608e-02 -4.17348742e-03  2.63425726e-02  4.72383723e-02
 -5.03972806e-02 -2.12175250e-02  7.65165240e-02  5.14103174e-02
 -9.42062866e-03  1.50471916e-02 -1.11127742e-01  1.19012177e-01
 -3.28279175e-02 -1.63032534e-03 -5.77054322e-02 -3.57976742e-03
 -2.20855083e-02 -9.60300341e-02  7.61161521e-02  1.57001673e-03
 -7.89241120e-02  3.53607014e-02 -4.05386388e-02  2.56589539e-02
  5.08054812e-03  5.27385697e-02  2.65944358e-02  9.00010020e-02
  6.87933266e-02  1.06146932e-01 -1.27716968e-02  3.67048569e-02
  3.82942855e-02  5.61699495e-02 -6.26965892e-03 -4.38373759e-02
 -4.40404564e-02 -9.38680489e-03  7.79667944e-02  8.97448280e-33
  4.54262868e-02 -3.72743234e-02 -5.29889762e-02 -1.18196318e-02
  8.37785527e-02 -3.48022133e-02  6.34105951e-02  5.04844356e-04
 -4.59923334e-02 -6.97592273e-03 -1.58232581e-02 -1.36758424e-02
 -5.62861841e-03 -1.02035396e-01 -2.08267607e-02 -3.75721939e-02
  1.63502749e-02  4.03131619e-02  4.81596924e-02  4.64258017e-03
  5.13558462e-03 -6.85276017e-02  3.23590934e-02 -2.98222862e-02
  1.48364939e-02 -3.14554833e-02 -5.51433973e-02  1.02120324e-03
  2.85800863e-02 -1.22557413e-02  4.43740636e-02  4.48526256e-02
 -4.27587666e-02  5.17273620e-02  1.98274199e-02 -3.52791548e-02
 -2.19042934e-02 -2.92245299e-02 -1.16545014e-01 -4.76889648e-02
 -6.04998367e-03 -5.71611896e-03 -5.05876802e-02  6.37992248e-02
 -6.06678706e-03  4.86444756e-02  1.15839066e-02  1.85532384e-02
  6.49649128e-02  2.86850636e-03 -5.72876334e-02  4.63050492e-02
 -5.74404746e-02 -3.97301726e-02  1.29626160e-02 -5.96602559e-02
 -4.63140896e-03  9.17838700e-03 -7.50520378e-02 -5.94501346e-02
 -6.83005676e-02 -1.25806183e-02  4.79516983e-02 -2.85585951e-02
  2.81949108e-03  3.07534318e-02 -1.03367865e-01  1.77851447e-03
 -5.96593320e-03 -4.66309115e-02 -1.36256183e-03  4.82267216e-02
 -3.94163653e-02  1.13718621e-02 -6.12693653e-02 -4.00455818e-02
  2.67832428e-02  5.58350161e-02 -8.49524066e-02  7.74691906e-03
  8.08509588e-02  2.20595649e-03 -5.91953024e-02  1.10124767e-01
  7.33895823e-02  3.92238284e-03  2.30085198e-02 -7.98697472e-02
 -4.34370078e-02  2.67319772e-02  6.84173107e-02  4.39020135e-02
  2.46898364e-02 -1.01561226e-01 -1.20495558e-02 -9.35655594e-33
  1.33704673e-03 -4.27619815e-02 -5.61994612e-02 -5.74164167e-02
  8.40426981e-03 -1.76580772e-02 -2.33479924e-02 -1.29773766e-02
 -8.85317195e-03 -2.15897826e-03  5.00472598e-02 -7.59504735e-04
  5.15319183e-02  1.71395354e-02 -2.22266223e-02  5.09017669e-02
  5.46554103e-03 -2.13018786e-02 -2.79452838e-02 -4.91445810e-02
 -1.72901805e-02  8.32318291e-02  6.52217865e-02 -5.54075390e-02
  5.65421395e-03 -5.52345589e-02  1.74961165e-02  1.16131626e-01
 -6.87955543e-02 -8.24342966e-02  1.14899464e-01  1.01981666e-02
 -6.70700893e-02  7.28023611e-03  2.01541297e-02 -5.63059114e-02
  2.59277653e-02  9.88700390e-02 -2.01526731e-02  2.54260227e-02
  1.48293868e-01 -4.94794324e-02 -9.36136171e-02  4.99376422e-03
  1.06094955e-02 -3.81168984e-02  9.58580151e-02 -3.92876863e-02
 -4.96766381e-02 -5.70919737e-03  4.89112288e-02 -9.08372998e-02
  9.92294587e-03  2.16431376e-02  1.30862268e-02  1.11361593e-01
  1.07817784e-01  4.41370048e-02  4.53013852e-02 -3.69379222e-02
  6.49158210e-02 -8.26045349e-02  9.69189976e-04  8.53242427e-02
  9.70658287e-02 -8.59719813e-02  3.84766199e-02  9.35738981e-02
  5.49484044e-02 -5.34796016e-03  2.24373993e-02  9.64576320e-04
 -1.21294996e-02  5.84164858e-02  2.52761822e-02 -1.35928374e-02
 -2.26624999e-02 -3.57807502e-02 -1.15672881e-02  1.66635364e-02
 -7.67206997e-02  4.92387041e-02  4.16414021e-03 -2.01836266e-02
  3.12765781e-03 -8.91911089e-02  5.43313175e-02  2.19515874e-03
 -6.96627572e-02  6.86389133e-02  9.64598171e-03  2.49954425e-02
 -1.70809461e-03  2.76440755e-02 -1.09057957e-02 -5.64065523e-08
 -8.97970200e-02 -5.44031039e-02 -7.87886232e-02  9.04134288e-03
  5.31845763e-02  3.98590118e-02  8.34802352e-03 -8.62004086e-02
 -6.07855618e-02 -6.36950415e-03 -9.59165692e-02  3.59986573e-02
 -9.09252185e-03 -2.78825294e-02  2.09700912e-02 -1.08751938e-01
  1.90820396e-02 -1.09493565e-02 -2.36157123e-02 -7.13611692e-02
  2.23265006e-03 -6.74358197e-03 -1.37784157e-03 -6.87924074e-03
 -9.02730227e-03 -2.13321541e-02  7.87609592e-02  6.25887588e-02
  4.28169705e-02 -4.59984802e-02 -3.90560105e-02 -3.82529162e-02
  7.21066222e-02 -2.33218204e-02 -8.81782025e-02  8.58804584e-02
 -5.06958067e-02 -1.88295171e-02 -1.57067887e-02  1.00799657e-01
 -6.03131624e-03  5.36583886e-02 -1.64242405e-02  3.61182541e-02
 -7.63731226e-02 -7.49960681e-03  4.01125848e-02  4.69463505e-02
  1.40103146e-01  3.62892859e-02 -1.92067586e-02 -3.32676666e-03
  8.14173743e-02 -1.14335697e-02 -4.03357632e-02 -7.90536404e-04
 -3.58603783e-02  1.65734980e-02 -3.84821445e-02  6.70357347e-02
 -5.07988222e-03  3.76865715e-02 -4.49772216e-02  3.04401647e-02]"
"await connection.confirmTransaction({
      blockhash,
      lastValidBlockHeight,
      signature
    });
})();
123456789101112131415161718const airdropSignature = await connection.requestAirdrop(
  keypair.publicKey,
  LAMPORTS_PER_SOL
);

await connection.confirmTransaction(airdropSignature);
123456from solders.keypair import Keypair
from solana.rpc.api import Client

wallet = Keypair()

client = Client(""https://api.devnet.solana.com"")

#Input Airdrop amount in LAMPORTS
client.request_airdrop(wallet.pubkey(), 1000000000)

#Airdrops 1 SOL
1234567891011#Input Airdrop amount in LAMPORTS
client.request_airdrop(wallet.pubkey(), 1000000000)

#Airdrops 1 SOL
1234// clang++ request_airdrop.cpp -o request_airdrop -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  Connection connection(""https://api.devnet.solana.com"");

  auto key_pair = Keypair::generate();

  std::string tx_hash = connection.request_airdrop(key_pair.public_key).unwrap();

  std::cout << ""tx hash = "" << tx_hash << std::endl;

  return 0;
}
1234567891011121314151617connection.request_airdrop(key_pair.public_key).unwrap();
1use solana_client::rpc_client::RpcClient;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::native_token::LAMPORTS_PER_SOL;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let wallet = Keypair::new();
    let pubkey = Signer::pubkey(&wallet);
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let client = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
    match client.request_airdrop(&pubkey, LAMPORTS_PER_SOL) {
        Ok(sig) => loop {
            if let Ok(confirmed) = client.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error requesting airdrop""),
    };
}
12345678910111213141516171819202122match client.request_airdrop(&pubkey, LAMPORTS_PER_SOL) {
    Ok(sig) => loop {
        if let Ok(confirmed) = client.confirm_transaction(&sig) {
            if confirmed {
                println!(""Transaction: {} Status: {}"", sig, confirmed);
                break;
            }
        }
    },
    Err(_) => println!(""Error requesting airdrop""),
};
1234567891011solana airdrop 1

# Return
# ""1 SOL""
1234solana airdrop 1
1# Sử dụng Accounts và Programs trên MainnetThường xuyên, các bài kiểm thử trên môi trường địa phương sẽ dùng đến các account và program chỉ sẵn có trên mainnet. Solana CLI cho phép:Tải xuống Programs và AccountsCài đặt Programs và Accounts vào local validator# Làm thế nào để cài đặt accounts từ mainnetBạn có thể tải xuống mint account của SRM vào một tập tin:CLIPress </> button to view full source# solana account -u <source cluster> --output <output format> --output-file <destination file name/path> <address of account to fetch>
solana account -u m --output json-compact --output-file SRM_token.json SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt
12solana account -u m --output json-compact --output-file SRM_token.json SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt
1Sau đó, cài đặt nó vào môi trường localnet của bạn bằng cách","[-1.08568415e-01 -3.77098657e-02 -1.05884373e-01  3.06345476e-03
  8.27154785e-04 -7.34082982e-02  3.72453928e-02  5.15462831e-02
  1.85882971e-02 -8.25115107e-03  7.96121806e-02 -1.21432673e-02
 -2.32380629e-02 -5.17737269e-02  1.71368700e-02  2.82089561e-02
 -1.23706423e-01 -8.44870433e-02 -3.42560820e-02  8.49532837e-04
 -3.47082177e-03 -5.09457961e-02 -1.48559827e-02 -2.53935698e-02
  2.96243783e-02 -7.72521570e-02  2.03047078e-02 -4.94092293e-02
 -4.69288677e-02  1.26569867e-02  1.34112060e-01  8.56331214e-02
 -5.58692887e-02  3.71258035e-02 -2.91384123e-02  3.37602198e-02
 -7.74621544e-03  1.39635559e-02  3.08862701e-02 -3.57026644e-02
  9.38927848e-03 -3.75495404e-02 -1.04945719e-01  3.56426798e-02
 -1.81043241e-02 -4.30471338e-02 -3.43651138e-02  9.18658450e-02
  1.29071018e-02  1.85631942e-02 -6.36668503e-02  7.56767839e-02
 -5.57761602e-02  9.70200822e-02 -2.54180506e-02 -3.76351736e-02
 -2.32230816e-02 -1.01388395e-02  3.99395041e-02 -5.55134378e-02
  4.83796969e-02  1.34153264e-02 -1.21272048e-02 -8.63117129e-02
 -6.48469478e-02  3.77584784e-03 -2.76457611e-02 -6.76548705e-02
 -5.34013612e-03 -2.99068075e-03  4.96036150e-02 -3.42616588e-02
 -4.95481491e-02  3.76402922e-02 -6.04208820e-02 -1.69883817e-02
  4.33898531e-02 -1.72665901e-03 -5.27523048e-02  5.56798764e-02
  8.08938593e-03 -5.51414341e-02 -7.09822327e-02  1.03671387e-01
  2.03662156e-03  9.28466022e-03 -2.70051125e-04 -9.93355084e-03
 -1.96124669e-02 -2.83407643e-02  6.21727342e-03 -1.32602435e-02
 -5.32461442e-02 -2.47595347e-02  3.55808474e-02  7.05495430e-03
  3.06406990e-02 -1.65422298e-02 -7.18090162e-02  8.46824273e-02
  3.87187041e-02 -5.82383052e-02 -1.10427454e-01 -5.82282320e-02
 -3.86304855e-02 -4.22048680e-02  9.47238579e-02 -4.61360067e-02
  1.16940979e-02  1.59973800e-02 -4.54766862e-02 -3.70486863e-02
 -2.72633173e-02  1.46146091e-02 -3.88587937e-02  1.17615953e-01
  1.93045777e-03  6.88351020e-02 -8.76520667e-03  9.83047765e-03
  2.95671402e-03  1.26837879e-01  3.22601609e-02 -5.40771373e-02
 -9.82268900e-03 -4.62584831e-02 -2.37843189e-02  1.16185436e-32
  5.86820021e-03  2.13553980e-02 -1.89247485e-02 -5.97203746e-02
  6.74298033e-03 -1.50764054e-02  9.62412879e-02  6.26330310e-03
 -6.47708625e-02 -3.14108242e-04 -8.85128826e-02 -5.85140958e-02
  1.03772189e-02 -1.05537593e-01 -4.72778678e-02  1.38956830e-02
  1.47302346e-02  3.53389308e-02 -2.79452819e-02  1.49827907e-02
 -2.54951622e-02 -9.48392749e-02  2.38387324e-02  9.98503901e-03
  2.11304706e-02 -2.02295445e-02 -6.65279627e-02  3.01251803e-02
  6.51651993e-02  1.24383308e-02  4.34299521e-02  3.49776149e-02
 -6.15371652e-02  8.37544948e-02  1.93233695e-02  2.80918088e-02
  2.75026890e-03 -7.39429072e-02 -1.04727253e-01 -8.74085501e-02
 -1.67503878e-02 -5.16791875e-03 -7.75130466e-02  5.84277883e-02
 -2.64817122e-02  2.41065770e-02 -4.30476107e-02  1.07857436e-01
  8.59943777e-02  5.73888496e-02 -1.19200766e-01  2.10506748e-02
  1.97346765e-03 -1.79817546e-02  5.05640320e-02 -5.18216155e-02
 -1.24545405e-02  6.05884902e-02  7.64305890e-02 -5.85571304e-02
 -2.57683620e-02 -5.85541986e-02  2.58609727e-02 -5.79346605e-02
  2.05582958e-02  3.22933868e-02 -4.13534455e-02  4.46613468e-02
  6.02090172e-03 -3.99383456e-02 -2.69691832e-02  8.13563988e-02
  1.23765524e-02  3.61753590e-02  2.84229983e-02 -6.00616895e-02
  2.37969048e-02 -1.82502382e-02 -3.42428833e-02 -2.03046873e-02
  6.54120594e-02  2.66300440e-02  5.52745871e-02  3.45931984e-02
  2.98702791e-02  6.47418275e-02  2.84482446e-02  5.08503569e-03
 -6.48243204e-02 -1.18065402e-02  2.54705790e-02 -4.02009860e-02
 -9.56324581e-03 -1.14572242e-01  8.73758923e-03 -9.67323926e-33
 -2.22154520e-02 -5.55771925e-02 -8.93341526e-02  4.88716215e-02
  5.08112200e-02 -6.01585628e-03 -2.01657303e-02  1.79682691e-02
 -1.58994552e-02  1.45000860e-03  5.50671853e-02  2.11060960e-02
  5.66208214e-02 -6.35281131e-02  1.82993151e-02 -9.00221150e-03
  2.47146543e-02  2.33278777e-02  7.87770003e-02 -1.99380126e-02
 -2.82978285e-02  3.82321514e-03 -1.05184438e-02  9.82924923e-03
 -1.09108992e-01 -1.61028821e-02  2.00043041e-02  1.26968667e-01
 -2.23514158e-02 -4.50030379e-02  9.83380899e-02  8.49546641e-02
 -1.15331829e-01  5.26318140e-02 -2.83373110e-02 -5.21521494e-02
  2.98979785e-02  5.35291992e-02 -1.17565542e-02  3.17935683e-02
  7.01220632e-02 -2.37318836e-02  4.19015959e-02  5.54945180e-03
 -3.58301401e-02 -1.17194735e-01  5.67774437e-02 -3.07255262e-03
  4.87990881e-04 -3.87280025e-02  1.17945775e-01 -1.71011239e-02
 -4.33047377e-02  4.04370204e-02  6.48785904e-02  1.79873258e-01
  8.22121575e-02  6.49423152e-02  2.00679582e-02 -2.03633849e-02
  4.23943400e-02 -5.06312959e-02  6.40636608e-02  7.91704059e-02
  8.91644061e-02 -4.82632071e-02  4.31885682e-02  7.12565109e-02
  5.09745888e-02 -6.57279138e-03 -3.69957602e-03 -1.47485612e-02
  3.04986965e-02  5.00716902e-02  7.91101977e-02  2.01548729e-03
 -1.65150352e-02  4.87715676e-02  6.46177754e-02  2.54193917e-02
  1.84769705e-02 -3.51135768e-02  5.45608103e-02  2.29173731e-02
  1.32184178e-02 -2.21362226e-02  2.54138261e-02  4.93644476e-02
 -1.06780030e-01  2.09758636e-02 -2.71856189e-02 -1.50040141e-03
  3.31614874e-02  5.18028811e-03  6.56743050e-02 -5.92669167e-08
  1.20020825e-02  5.92163056e-02 -3.10693588e-02  1.57681275e-02
  2.97771506e-02  1.04743078e-01  2.66867019e-02 -2.60344464e-02
 -5.21294363e-02 -3.12397890e-02 -2.69911345e-02 -1.12670101e-02
  1.67880002e-02  5.46889007e-03  2.34965701e-02 -6.60960376e-02
  4.67930222e-03  1.82302948e-03 -4.10026461e-02 -7.66609535e-02
  7.05495924e-02 -5.08990772e-02  4.73959977e-03 -7.28481263e-02
 -2.29899609e-03  2.45126225e-02  4.49164622e-02  9.82769653e-02
 -8.26555025e-03 -7.06179515e-02 -6.87259436e-02 -1.49523243e-02
  8.38396847e-02 -8.08765739e-02 -5.00293337e-02  4.68770824e-02
 -8.41279700e-03 -1.32170152e-02  6.51859790e-02  8.60129818e-02
 -7.53536355e-03  7.08070910e-03 -9.17054564e-02 -2.12769629e-03
 -5.20861819e-02  2.66082212e-02  2.38504307e-03  3.66898030e-02
 -2.36686207e-02  7.10430816e-02  3.33734527e-02 -2.80574635e-02
  7.64041170e-02  1.22570172e-02  9.09935869e-03  1.78313125e-02
 -3.88576798e-02  1.46486247e-02 -1.55078955e-02  1.40970377e-02
  8.00632592e-03  3.10000535e-02 -1.03076510e-01  3.93674150e-02]"
"truyền tập tin ở trên và địa chỉ đích (trên môi trường địa phương) khi bắt đầu khởi chạy validator:CLIPress </> button to view full source# solana-test-validator --account <address to load the account to> <path to account file> --reset
solana-test-validator --account SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt SRM_token.json --reset
12solana-test-validator --account SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt SRM_token.json --reset
1# Làm thế nào để cải đặt programs từ mainnetTương tự, bạn phải tải xuống program của Serum Dex v3:CLIPress </> button to view full source# solana program dump -u <source cluster> <address of account to fetch> <destination file name/path>
solana program dump -u m 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin serum_dex_v3.so
12solana program dump -u m 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin serum_dex_v3.so
1Cài đặt nó vào localnet được thực hiện bằng cách truyền tập tin program và địa chỉ đích (trên môi trường đại phương) khi bắt đầu khởi chạy validator:CLIPress </> button to view full source# solana-test-validator --bpf-program <address to load the program to> <path to program file> --reset
solana-test-validator --bpf-program 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin serum_dex_v3.so --reset
12solana-test-validator --bpf-program 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin serum_dex_v3.so --reset
1 # Gửi Transaction# Làm thế nào để gửi SOLĐể gửi SOL, bạn sẽ cần tương tác với SystemProgramopen in new window.TSPythonWallet-AdapterRustCLIPress </> button to view full sourceimport {
  Connection,
  Keypair,
  SystemProgram,
  LAMPORTS_PER_SOL,
  Transaction,
  sendAndConfirmTransaction,
} from ""@solana/web3.js"";

(async () => {
  const fromKeypair = Keypair.generate();
  const toKeypair = Keypair.generate();

  const connection = new Connection(
    ""https://api.devnet.solana.com"",
    ""confirmed""
  );

  const airdropSignature = await connection.requestAirdrop(
    fromKeypair.publicKey,
    LAMPORTS_PER_SOL
  );

  await connection.confirmTransaction(airdropSignature);

  const lamportsToSend = 1_000_000;

  const transferTransaction = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: fromKeypair.publicKey,
      toPubkey: toKeypair.publicKey,
      lamports: lamportsToSend,
    })
  );

  await sendAndConfirmTransaction(connection, transferTransaction, [
    fromKeypair,
  ]);
})();
123456789101112131415161718192021222324252627282930313233343536373839const transferTransaction = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: fromKeypair.publicKey,
    toPubkey: toKeypair.publicKey,
    lamports: lamportsToSend,
  })
);

await sendAndConfirmTransaction(connection, transferTransaction, [fromKeypair]);
123456789from solana.rpc.api import Client
from solders.keypair import Keypair
from solana.transaction import Transaction
from solders.system_program import TransferParams, transfer

LAMPORT_PER_SOL = 1000000000

client: Client = Client(""https://api.devnet.solana.com"")

sender = Keypair()
receiver = Keypair()

airdrop = client.request_airdrop(sender.pubkey(), 1 * LAMPORT_PER_SOL)
airdrop_signature = airdrop.value
client.confirm_transaction(airdrop_signature)

transaction = Transaction().add(transfer(TransferParams(
    from_pubkey=sender.pubkey(),
    to_pubkey=receiver.pubkey(),
    lamports=1_000_000)
))

client.send_transaction(transaction, sender)
1234567891011121314151617181920212223transaction = Transaction().add(transfer(TransferParams(
    from_pubkey=sender.pubkey(),
    to_pubkey=receiver.pubkey(),
    lamports=1_000_000)
))

client.send_transaction(transaction, sender)

12345678import { WalletNotConnectedError } from ""@solana/wallet-adapter-base"";
import { useConnection, useWallet } from ""@solana/wallet-adapter-react"";
import { Keypair, SystemProgram, Transaction } from ""@solana/web3.js"";
import React, { FC, useCallback } from ""react"";

export const SendTenLamportToRandomAddress: FC = () => {
  const { connection } = useConnection();
  const { publicKey, sendTransaction } = useWallet();

  const onClick = useCallback(async () => {
    if (!publicKey) throw new WalletNotConnectedError();

    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: publicKey,
        toPubkey: Keypair.generate().publicKey,
        lamports: 1_000_000,
      })
    );

    const signature = await sendTransaction(transaction, connection);

    await connection.confirmTransaction(signature, ""processed"");
  },","[-9.88765880e-02 -5.58357164e-02 -9.99435782e-02 -7.44997188e-02
  3.23443674e-02 -4.51365858e-02  3.13054584e-02  6.88113421e-02
 -9.79510974e-03 -9.89227556e-03  9.65950191e-02 -8.81665275e-02
 -9.62966681e-03 -2.10520271e-02  4.00749147e-02 -1.26754330e-03
 -1.25608802e-01  3.51673663e-02 -7.14881197e-02 -4.15849797e-02
  4.99612056e-02 -8.92391987e-03 -6.65465593e-02 -2.20736358e-02
 -3.60096470e-02  2.48474237e-02 -2.88811531e-02  4.83484985e-03
 -3.25711779e-02 -3.44118997e-02  5.94680160e-02  1.09072134e-01
  3.40019353e-02 -4.04507061e-03  9.81385037e-02  7.38317892e-02
 -7.16406107e-02  5.83855622e-03  2.61857528e-02 -4.08299007e-02
 -7.74437264e-02 -3.33406515e-02 -6.63357526e-02 -7.46709183e-02
  4.99268025e-02 -7.89310038e-02 -5.05086668e-02  1.04106646e-02
  2.36864481e-02  2.17537992e-02 -6.78133368e-02  3.05709634e-02
 -4.76261824e-02  6.32389635e-02 -4.24948037e-02  2.06345748e-02
 -4.76838201e-02  5.49086966e-02  4.21606526e-02 -1.59344287e-03
 -1.66134164e-02  3.32978703e-02 -5.69981672e-02 -9.27278213e-03
 -5.02390135e-03 -5.78602068e-02 -7.94507042e-02 -3.99884097e-02
  2.16526072e-02 -3.66879478e-02 -3.05979624e-02 -3.68129238e-02
 -5.58408983e-02  5.33978902e-02 -8.06752518e-02 -1.15150474e-02
  2.35509202e-02  7.45393103e-03 -4.19866256e-02  1.69345876e-03
  4.14891094e-02 -8.83783214e-03  8.36268887e-02  7.84851015e-02
 -1.40616752e-03  7.69755542e-02 -2.90326104e-02 -9.43544786e-03
  5.83245084e-02 -3.88264190e-03  6.71769604e-02  4.54968587e-02
 -1.19210286e-02  2.77414080e-02  1.95976347e-02  1.36214606e-02
 -3.49164195e-03  6.41722977e-02 -5.72930239e-02  1.22876003e-01
  3.89840901e-02 -3.63064185e-02 -9.30774864e-03  1.18906680e-03
 -1.07776988e-02 -4.37414981e-02  1.51227266e-01 -1.04288831e-02
 -3.67741752e-03  3.66599187e-02  1.57705899e-02  1.69028472e-02
 -2.98579456e-03 -7.78119713e-02  2.03961991e-02  4.21704799e-02
 -2.95228083e-02  5.68537749e-02 -3.85381766e-02  8.38385820e-02
  3.51279154e-02  5.27326465e-02  7.25001562e-04 -5.84924780e-02
  2.91373357e-02  4.20009233e-02  5.25416322e-02  1.74716723e-32
 -1.55679835e-03 -8.42680596e-03 -2.61887424e-02 -3.11128758e-02
 -9.50226001e-03 -4.18883301e-02  1.18005686e-02  2.21889913e-02
 -1.03740446e-01 -3.52667943e-02 -2.20260993e-02  2.16071177e-02
 -9.34989080e-02 -3.47011574e-02 -2.13871542e-02 -3.51281986e-02
  3.67467552e-02 -1.55626284e-03 -9.83306114e-03 -2.00315807e-02
  5.22512794e-02 -1.03911683e-01 -6.17098249e-03  1.21559296e-02
 -4.46532678e-04  6.83154240e-02  6.32543862e-03  3.57141322e-03
  5.62327467e-02  2.02037618e-02 -2.32831878e-03 -6.00498840e-02
  1.75377238e-03 -9.84733342e-04 -2.99453828e-02  5.15913293e-02
  2.60170903e-02 -3.35107744e-02 -7.89649561e-02 -3.54823582e-02
  2.42367554e-02  1.61453281e-02  1.75555814e-02  1.68822072e-02
  1.32484324e-02 -2.63536572e-02 -4.90725487e-02  4.98637669e-02
  4.12532352e-02  7.05440193e-02 -1.00846581e-01 -3.63026783e-02
 -2.55132560e-02 -3.95995006e-03 -2.30139326e-02 -3.61760817e-02
 -5.47705255e-02 -2.64561386e-03 -1.22552598e-02 -1.95522178e-02
 -3.00290920e-02 -4.61785384e-02 -2.01199166e-02 -1.05454680e-02
  1.11861331e-02 -7.69756315e-03 -4.68915813e-02 -3.40053663e-02
  5.41173331e-02 -1.37244277e-02 -1.35678515e-01 -2.27744430e-02
  2.63555422e-02  7.04114512e-02  1.24221039e-03 -8.81322473e-02
  5.96629679e-02  6.09643050e-02 -1.49192378e-01 -8.19637161e-03
  1.42632285e-03 -5.36895022e-02 -3.74476090e-02  5.75475246e-02
  2.60717832e-02  8.33022466e-04  4.41785231e-02 -4.97012660e-02
 -2.67538335e-02 -3.59625109e-02  4.57188673e-02  6.07296377e-02
 -1.76997352e-02 -3.98163311e-02 -4.26496938e-02 -1.47291308e-32
  5.57374917e-02  7.49083376e-03 -7.70525560e-02  1.04610799e-02
  5.82748801e-02 -2.31552571e-02  1.46921584e-02 -8.97425110e-04
 -3.04796863e-02 -6.74247593e-02 -3.85673270e-02  1.20270494e-02
  3.74169871e-02 -1.97201632e-02 -6.81158155e-02  1.13169543e-01
  2.24780478e-02  4.59110998e-02 -6.16709590e-02 -2.29004975e-02
 -5.22866584e-02  1.09587878e-01  2.66038887e-02 -1.41491080e-02
 -6.04297668e-02 -1.77705325e-02  6.88927472e-02  7.59265870e-02
 -6.88421307e-03  7.74069503e-02  1.51873663e-01  1.12598278e-02
 -9.86078233e-02  1.16000585e-01 -1.92976817e-02 -5.00260703e-02
  5.10252826e-02 -4.63608094e-03 -1.67218745e-02  7.29920417e-02
  9.31669176e-02  5.95064042e-03 -8.35862011e-03 -1.15553234e-02
 -3.66568402e-03 -1.69884153e-02  8.29798505e-02 -3.98963578e-02
 -6.70636892e-02 -6.10011555e-02  8.84219259e-02 -7.20650926e-02
 -9.65288002e-03  7.35352561e-03  2.63263788e-02  4.15131971e-02
  8.72713849e-02 -1.66536719e-02 -1.13748901e-01 -6.65408820e-02
  4.70554754e-02 -3.17428843e-03 -4.98365760e-02  1.57369338e-02
  9.79039297e-02 -4.57653441e-02  5.84456474e-02  1.15705512e-01
  8.19145422e-03 -5.59226647e-02 -3.20428759e-02 -3.68235223e-02
  7.35348165e-02  1.44090131e-02  4.34719101e-02  2.19171159e-02
 -1.17150463e-01  1.50797879e-02 -7.24738929e-03 -1.29830902e-02
  8.78248829e-03 -3.99987698e-02  3.42726745e-02  2.14977227e-02
 -1.21662878e-02 -2.73332484e-02 -6.40198682e-03  4.99422811e-02
 -7.06748664e-02  2.34945677e-02 -5.74060604e-02  2.11511329e-02
  4.12096269e-02  1.34914979e-01  2.54778005e-02 -6.33854285e-08
 -1.91963688e-02 -1.04729228e-01 -3.91714424e-02  5.57369962e-02
  4.01285216e-02  6.57627061e-02 -3.15357782e-02 -6.80673569e-02
  1.11389672e-03 -4.37602997e-02 -1.31531702e-02  2.71707103e-02
 -8.15328658e-02  1.09400712e-02 -4.71525313e-03 -1.40548414e-02
  3.31898779e-03  1.00560322e-01 -4.08143848e-02 -5.27575500e-02
  4.64701429e-02 -1.77872982e-02  1.90789942e-02 -3.00098192e-02
  4.98004034e-02  2.45768931e-02 -5.21316901e-02  7.63938650e-02
 -8.89456598e-04 -3.29446159e-02  3.92226223e-03 -7.64336484e-03
  1.15186617e-01 -8.15941468e-02  7.50094606e-03  6.88147470e-02
  1.21427411e-02 -2.23952718e-02 -8.14320333e-03  6.75685853e-02
  3.20955962e-02  3.31560709e-02 -1.84398685e-02 -3.17245610e-02
 -7.72937387e-02 -9.29458439e-02  3.02895270e-02 -2.63750721e-02
  8.37243721e-02 -3.56442295e-02 -2.96163317e-02 -8.90306570e-03
  5.12682311e-02  6.23585321e-02  4.12459448e-02  1.53686618e-02
 -4.80576120e-02  8.17425549e-02 -1.72971433e-03  1.25214234e-02
  7.35188052e-02  1.00019231e-01 -2.48468481e-02 -2.15662946e-03]"
"[publicKey, sendTransaction, connection]);

  return (
    <button onClick={onClick} disabled={!publicKey}>
      Send 1 lamport to a random address!
    </button>
  );
};
12345678910111213141516171819202122232425262728293031const transaction = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: publicKey,
    toPubkey: Keypair.generate().publicKey,
    lamports: 1_000_000,
  })
);

const signature = await sendTransaction(transaction, connection);

await connection.confirmTransaction(signature, ""processed"");
1234567891011use solana_client::rpc_client::RpcClient;
use solana_program::system_instruction;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::native_token::LAMPORTS_PER_SOL;
use solana_sdk::signature::{Keypair, Signer};
use solana_sdk::transaction::Transaction;

fn main() {
    let from = Keypair::new();
    let frompubkey = Signer::pubkey(&from);

    let to = Keypair::new();
    let topubkey = Signer::pubkey(&to);

    let lamports_to_send = 1_000_000;

    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    ///Airdropping some Sol to the 'from' account
    match connection.request_airdrop(&frompubkey, LAMPORTS_PER_SOL) {
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error requesting airdrop""),
    };

    ///Creating the transfer sol instruction
    let ix = system_instruction::transfer(&frompubkey, &topubkey, lamports_to_send);

    ///Putting the transfer sol instruction into a transaction
    let recent_blockhash = connection.get_latest_blockhash().expect(""Failed to get latest blockhash."");
    let txn = Transaction::new_signed_with_payer(&[ix], Some(&frompubkey), &[&from], recent_blockhash);

    ///Sending the transfer sol transaction
    match connection.send_and_confirm_transaction(&txn){
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(e) => println!(""Error transferring Sol:, {}"", e),
    }

}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253system_instruction::transfer(&from, &to, lamports_to_send);
1solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.001 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR>
1solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.001 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR>
1# Làm thế nào để","[-5.36201783e-02 -3.49925719e-02 -1.01027630e-01 -8.92853539e-04
 -2.16154139e-02 -3.54878530e-02  3.57783996e-02  3.41710709e-02
 -2.42359471e-02  3.16569544e-02  1.76087096e-02 -1.99263468e-02
 -1.93281900e-02 -5.16218916e-02 -2.46100593e-02  4.22265716e-02
 -8.80706757e-02 -7.37456903e-02 -1.20885419e-02  2.56167427e-02
  3.05156857e-02 -7.18614757e-02  2.71168295e-02 -2.80799791e-02
  5.83927333e-03 -1.13113284e-01  1.69358365e-02  5.64041489e-04
 -4.60264273e-02  1.64183918e-02  9.90387052e-02  6.60927668e-02
 -7.03303292e-02 -2.41625570e-02 -6.44664317e-02  8.78105015e-02
 -2.91449483e-02 -4.18470725e-02  4.08913791e-02 -3.25961523e-02
 -2.38508750e-02  4.33766609e-03 -8.04526955e-02  3.64075191e-02
  5.32958619e-02 -8.01106617e-02 -1.42194377e-02  2.01836638e-02
  1.11126201e-02 -3.30395438e-02 -4.97611761e-02  2.67456193e-02
 -5.83254732e-02  1.05201118e-01 -2.26318720e-03  3.74394618e-02
 -1.87735707e-02  1.94420833e-02  3.81966271e-02 -2.98521612e-02
  7.01166093e-02 -8.48782994e-03  1.08527821e-02 -8.30136240e-02
 -7.98575208e-02  1.62927695e-02 -2.54434049e-02 -4.38840799e-02
  3.26693663e-03 -2.48087775e-02  2.04521790e-02 -3.98753583e-02
 -8.92668739e-02  4.33258489e-02 -4.68887389e-02 -6.67065904e-02
 -1.94968227e-02  5.76690398e-02 -1.06097169e-01  5.44678383e-02
 -3.64069035e-03 -9.33777615e-02  1.67131200e-02  9.33358669e-02
  2.71450412e-02  7.59100355e-03 -2.05015931e-02  2.71391422e-02
  9.00876429e-03 -4.56150286e-02  6.31814310e-03  3.67698632e-02
 -5.51456772e-02 -3.40915211e-02  4.41250242e-02  1.47913136e-02
  2.52328534e-02 -1.15131037e-02 -8.17534328e-02  1.19129010e-01
  7.50314742e-02 -5.99082857e-02 -1.01796575e-01 -3.24894227e-02
  2.41640564e-02 -2.95012966e-02  1.09890960e-01 -4.82062511e-02
 -6.76987991e-02 -3.11646261e-04 -2.20827851e-02  3.47705893e-02
 -3.82434465e-02  5.33574596e-02 -7.01968521e-02  8.41389894e-02
 -6.63222140e-03  8.65977556e-02 -3.06425393e-02 -2.35558674e-02
  4.65883836e-02  8.27469006e-02 -1.05820745e-02 -5.36009669e-02
 -3.76147367e-02 -9.03093349e-03  7.81055838e-02  1.20614375e-32
  5.92319481e-02  6.51183026e-03 -5.66319190e-02 -5.77704236e-02
  1.93123482e-02  2.20894627e-02  1.10403150e-01  3.90096940e-02
 -4.83071543e-02 -7.35006705e-02 -1.96638852e-02 -1.09676704e-01
  6.22813888e-02 -8.78941864e-02 -9.22929868e-02  7.04698265e-04
  1.94702055e-02  1.53606134e-02  3.08151543e-02 -3.51387588e-03
  3.98203405e-03 -3.57146263e-02  1.30027439e-03 -2.22969372e-02
 -1.78848638e-03 -5.53197041e-03 -8.01855028e-02  2.59805769e-02
 -2.18891888e-03  1.26192730e-03  1.23352548e-02  5.02032824e-02
 -3.84508483e-02  5.67688048e-02  2.49760896e-02 -1.32503342e-02
 -5.72637394e-02 -6.21718802e-02 -6.78740591e-02 -7.23465905e-02
 -3.39775952e-03  1.15789170e-03 -5.10886237e-02  2.68201400e-02
 -4.20597615e-03  5.46703748e-02 -1.04496973e-02  5.77848330e-02
  1.11301921e-01  1.82107594e-02 -1.32166252e-01  9.30246897e-03
  2.62244288e-02 -3.04799620e-03  2.43071467e-02 -2.54914463e-02
 -9.66230966e-03  2.81812064e-02 -2.02977136e-02  6.63064304e-04
 -2.29773428e-02 -5.54461181e-02  2.70673987e-02 -4.75485660e-02
  5.41208461e-02  3.37319374e-02 -9.33741182e-02  2.66096648e-02
  5.12422323e-02 -7.31739402e-02 -2.47453097e-02  7.01014549e-02
 -3.52059789e-02  7.18001798e-02 -9.36137605e-03 -2.54267994e-02
  2.41587814e-02 -8.35287850e-03 -7.03421012e-02 -1.62684489e-02
  7.41550652e-03 -2.05942318e-02 -1.47091961e-02  3.40931155e-02
  7.26601630e-02  7.40556717e-02 -1.54425539e-02 -1.87489688e-02
 -9.36526656e-02 -9.42502450e-03  7.41060972e-02  1.86338685e-02
  1.34004708e-02 -4.94328029e-02 -4.43201890e-04 -1.13044463e-32
 -2.82103731e-03  1.79933943e-02 -9.70830694e-02  9.76491161e-03
  1.49495788e-02  2.89234519e-02  1.66588034e-02 -4.96453084e-02
 -8.37210119e-02  2.17088182e-02  3.27041820e-02 -2.09976966e-03
  4.85131182e-02 -3.47741768e-02 -1.64273344e-02 -8.20900605e-04
  4.72338833e-02  2.76796669e-02  2.08600797e-02 -5.12225367e-02
  3.08703189e-03  8.81261155e-02 -5.46068624e-02 -2.40629483e-02
 -9.02680606e-02 -2.01977640e-02 -9.46327019e-03  1.27426684e-01
 -7.32319504e-02 -5.43693118e-02  1.09790601e-01  3.76968049e-02
 -7.60562867e-02  3.98035534e-02  7.06684496e-03 -3.45072970e-02
  4.35527116e-02  4.63170521e-02  2.88897231e-02  1.20207690e-01
  6.75657764e-02 -4.30677421e-02  3.26099619e-02  3.38811763e-02
  1.84723213e-02 -4.66866791e-02 -9.07595037e-04 -2.56777983e-02
 -3.29266973e-02  3.79878618e-02  7.04117194e-02 -4.79825865e-03
 -7.11974353e-02 -1.93695668e-02  6.19196407e-02  1.03312425e-01
  6.40537664e-02  9.96642094e-03  2.45964695e-02 -2.21659299e-02
  6.99211881e-02 -6.42729625e-02  6.64652511e-02  6.61875904e-02
  1.38563618e-01 -2.11409405e-02  8.55494943e-03  4.71964814e-02
  6.80852458e-02  2.95120012e-02  3.82433273e-02  7.94642698e-03
  2.94789970e-02  4.67169136e-02  8.70618150e-02 -2.42020469e-02
 -5.54469554e-03  1.19012324e-02  1.73312146e-02 -4.39794697e-02
  2.07342878e-02 -1.95960770e-03  4.47357111e-02 -2.51373909e-02
 -3.04206219e-02 -3.43536176e-02  2.05194298e-02 -2.36452874e-02
 -1.11271881e-01 -5.95795177e-03 -2.95495652e-02  1.99427437e-02
 -1.74452935e-03  1.94143262e-02  5.03360145e-02 -6.05197528e-08
 -1.27120400e-02  4.38268157e-03 -9.59430560e-02  7.33361244e-02
  3.60756218e-02  8.74930844e-02 -2.01476738e-02 -4.58434001e-02
 -3.98368947e-02 -3.85163538e-02 -1.01046242e-01  5.87211885e-02
  7.05208257e-03 -1.74397845e-02 -4.80433600e-03 -5.75016923e-02
  6.07742462e-03 -1.95499994e-02 -5.74230291e-02 -9.67678428e-02
  7.33659863e-02 -1.11230291e-01  1.48402876e-03 -1.43674323e-02
 -4.25227592e-03 -2.13510208e-02  4.78492714e-02  1.56583354e-01
  6.20095506e-02 -6.30202219e-02 -4.35024947e-02 -7.11052716e-02
  7.68748522e-02  4.58411081e-03 -7.08055794e-02  6.84118345e-02
 -5.21920323e-02 -2.71171834e-02  6.42451122e-02 -1.05093541e-02
  3.88683863e-02  1.29729547e-02 -3.46920341e-02  3.31618562e-02
 -4.85291183e-02  1.34648718e-02 -3.18511464e-02  3.26866619e-02
  7.23085105e-02  7.23323524e-02  1.68554187e-02 -4.42478284e-02
  9.10391733e-02  5.68896011e-02  1.28897782e-02  1.76602509e-02
 -4.22218591e-02  2.72673722e-02  8.94834055e-04  6.60926700e-02
  4.42671292e-02  4.81676944e-02 -8.07695687e-02 -3.52509506e-03]"
"gửi SPL-TokensSử dụng Token Programopen in new window để gửi SPL Tokens. Để gửi SPL token, bạn cần biết địa chỉ token account tương ứng SPL Token được gửi. Bạ có thể biết được địa chỉ gửi và nhận bằng cí dụ dưới đây.TSWallet-AdapterCLIPress </> button to view full sourceconst web3 = require(""@solana/web3.js"");
const splToken = require(""@solana/spl-token"");

(async () => {
  // Connect to cluster
  const connection = new web3.Connection(
    web3.clusterApiUrl(""devnet""),
    ""confirmed""
  );

  // Generate a new wallet keypair and airdrop SOL
  const fromWallet = web3.Keypair.generate();
  const fromAirdropSignature = await connection.requestAirdrop(
    fromWallet.publicKey,
    web3.LAMPORTS_PER_SOL
  );
  // Wait for airdrop confirmation
  await connection.confirmTransaction(fromAirdropSignature);

  // Generate a new wallet to receive newly minted token
  const toWallet = web3.Keypair.generate();

  // Create new token mint
  const mint = await splToken.createMint(
    connection,
    fromWallet,
    fromWallet.publicKey,
    null,
    9,
    splToken.TOKEN_PROGRAM_ID
  );

  // Get the token account of the fromWallet Solana address, if it does not exist, create it
  const fromTokenAccount = await mint.getOrCreateAssociatedAccountInfo(
    fromWallet.publicKey
  );

  //get the token account of the toWallet Solana address, if it does not exist, create it
  const toTokenAccount = await mint.getOrCreateAssociatedAccountInfo(
    toWallet.publicKey
  );

  // Minting 1 new token to the ""fromTokenAccount"" account we just returned/created
  await mint.mintTo(
    fromTokenAccount.address,
    fromWallet.publicKey,
    [],
    1000000000 // it's 1 token, but in lamports
  );

  // Add token transfer instructions to transaction
  const transaction = new web3.Transaction().add(
    splToken.createTransferInstruction(
      splToken.TOKEN_PROGRAM_ID,
      fromTokenAccount.address,
      toTokenAccount.address,
      fromWallet.publicKey,
      [],
      1
    )
  );

  // Sign transaction, broadcast, and confirm
  await web3.sendAndConfirmTransaction(connection, transaction, [fromWallet]);
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// Add token transfer instructions to transaction
const transaction = new web3.Transaction().add(
  splToken.Token.createTransferInstruction(
    splToken.TOKEN_PROGRAM_ID,
    fromTokenAccount.address,
    toTokenAccount.address,
    fromWallet.publicKey,
    [],
    1
  )
);

// Sign transaction, broadcast, and confirm
await web3.sendAndConfirmTransaction(connection, transaction, [fromWallet]);
1234567891011121314import { WalletNotConnectedError } from ""@solana/wallet-adapter-base"";
import { useConnection, useWallet } from ""@solana/wallet-adapter-react"";
import { Keypair, SystemProgram, Transaction } from ""@solana/web3.js"";
import { TOKEN_PROGRAM_ID, createTransferInstruction } from ""@solana/spl-token"";
import React, { FC, useCallback } from ""react"";

export const SendSPLTokenToAddress: FC = (
  fromTokenAccount,
  toTokenAccount,
  fromWallet
) => {
  const { connection } = useConnection();
  const { publicKey, sendTransaction } = useWallet();

  const onClick = useCallback(async () => {
    if (!publicKey) throw new WalletNotConnectedError();

    const transaction = new Transaction().add(
      createTransferInstruction(
        fromTokenAccount.address,
        toTokenAccount.address,
        fromWallet.publicKey,
       ","[-1.37301266e-01 -1.01964936e-01 -9.36542228e-02  3.01565422e-04
  8.48234259e-03 -3.46817933e-02  6.27907887e-02  6.38819188e-02
  1.18527390e-01 -2.00024415e-02  8.35647359e-02 -4.71750386e-02
  1.06981136e-02 -3.73006836e-02  7.47440904e-02  3.17465365e-02
 -1.00260735e-01 -6.01876415e-02 -4.37682867e-02 -3.50263566e-02
  7.50661409e-03 -1.22547388e-01 -4.14603986e-02 -8.49288981e-03
 -1.07371956e-02 -7.96510428e-02  2.88212504e-02 -1.65349562e-02
 -1.55852353e-02  4.73492034e-02  3.05658467e-02  7.73800761e-02
 -2.15294212e-02 -6.79928288e-02  4.48424518e-02  8.58682916e-02
  3.64893787e-02  1.00727973e-03  4.32811566e-02 -4.22765613e-02
 -5.44688404e-02  3.33086587e-02 -1.36833519e-01 -4.77040671e-02
  7.91448131e-02 -1.31406663e-02 -6.57767579e-02  1.94214527e-02
 -3.98710929e-02  4.43873927e-04 -7.16772452e-02  5.77700883e-02
 -3.07898484e-02 -9.01976321e-03 -1.29702404e-01  1.79905016e-02
 -4.01339643e-02  9.64653939e-02  7.67363980e-02 -6.04595505e-02
  2.84505635e-02 -3.34145688e-02  3.90055701e-02 -2.73441393e-02
 -5.44620827e-02 -6.70358445e-03 -4.51771207e-02 -5.73203117e-02
  5.98826930e-02 -1.25189554e-02 -5.48354015e-02 -2.58090422e-02
 -4.90692519e-02  2.74790339e-02 -5.33306897e-02 -8.13151337e-03
  1.29865389e-02  4.17296998e-02 -1.16365962e-02  1.66552560e-03
  1.74261853e-02 -5.57434093e-03 -8.19311105e-03  6.03987761e-02
  1.51731465e-02  9.84268486e-02 -3.82725187e-02 -2.03279760e-02
 -1.01748165e-02  2.43689232e-02 -4.14244980e-02  6.89797774e-02
 -3.54990968e-03  1.51207810e-02  6.13955641e-03 -1.22192306e-02
 -7.63689401e-03  3.31928395e-02 -4.15666364e-02  9.23406929e-02
  4.37310226e-02 -1.92167182e-02 -1.53257214e-02 -1.88465677e-02
  9.99164861e-03 -4.25099768e-02  6.07162341e-02 -7.42735788e-02
  6.45035431e-02  3.50586399e-02 -4.19600196e-02  6.56323284e-02
 -1.57533977e-02 -6.61440790e-02 -1.09921202e-01  1.29722133e-01
  1.14012808e-02 -4.85102134e-03  2.70260219e-02  6.66807815e-02
  6.52404502e-02  1.32912248e-02 -8.85461792e-02 -3.10071297e-02
  7.33421475e-04 -2.61152722e-02  5.59715331e-02  1.17639618e-32
 -6.68073073e-02 -2.44619586e-02  4.37492505e-03  9.16830823e-03
 -3.05004437e-02 -6.07385822e-02  5.90973124e-02 -4.39013839e-02
 -1.00641325e-01 -5.05138673e-02 -6.18428588e-02 -3.82895470e-02
  3.00483014e-02 -8.99723619e-02 -5.96146565e-03 -4.26388085e-02
 -9.38178599e-03  2.58157868e-02  7.15473071e-02 -4.67479527e-02
  2.50695925e-02 -7.85030425e-02  9.26677603e-03 -1.01976497e-02
  8.27996582e-02  4.10282938e-03 -1.50038656e-02 -2.01559532e-02
  6.25753105e-02  2.40068827e-02  9.23204869e-02 -7.68604130e-03
 -5.46628237e-02  6.38879985e-02 -4.86345813e-02  1.30989142e-02
  4.55600880e-02 -2.85979304e-02 -4.46127467e-02 -2.10155617e-03
  4.30124067e-02 -3.36550549e-02 -3.26446071e-02  1.06991204e-02
 -2.47284640e-02  2.19465643e-02  5.76788420e-03  1.30989179e-02
  1.14348345e-01 -1.36947669e-02 -1.27390221e-01 -2.20368933e-02
 -4.61263135e-02  6.93533756e-03  8.25944543e-02 -1.35259470e-02
 -4.29489128e-02  5.33481315e-02 -6.30687969e-03  2.23040767e-03
 -4.90396805e-02 -4.20422778e-02  4.27183397e-02  4.97138407e-03
  1.20738884e-02  1.38182268e-02 -4.36156765e-02  2.14042850e-02
 -1.92318726e-02 -7.03609884e-02 -3.99950296e-02  7.98395425e-02
  3.27593163e-02  5.90960085e-02 -8.17844123e-02 -4.63602021e-02
  4.72374223e-02  2.64346860e-02 -9.21305344e-02  5.26896082e-02
 -2.22595464e-02 -5.19806556e-02 -6.37012497e-02  6.00836314e-02
  1.99378636e-02  2.76414882e-02  3.70337181e-02  4.89857607e-03
  3.45529104e-03 -8.79119243e-03  2.94908751e-02 -2.24975105e-02
  1.76232532e-02  5.93185425e-03 -6.85654953e-02 -1.04083993e-32
 -2.51901150e-02 -2.30699275e-02 -3.13945338e-02 -1.97795574e-02
 -3.53961880e-03  4.64848168e-02 -7.06250663e-04  2.36300305e-02
 -5.36550246e-02  5.09236753e-02  1.25007285e-02  3.83316092e-02
  6.85316557e-03  5.01803793e-02 -3.90558168e-02  8.37909654e-02
  1.74373500e-02 -3.41908708e-02  2.03829519e-02  1.08301695e-02
 -2.56952420e-02  2.76826285e-02 -1.96655467e-02  4.68004160e-02
 -9.38693285e-02  5.54989241e-02 -8.54290463e-03  4.76687253e-02
 -3.72321978e-02  5.33511629e-03  7.98444226e-02  3.81549448e-02
 -7.63347745e-02  1.03556059e-01  6.11190088e-02 -1.13067746e-01
  5.45821562e-02  5.32571226e-02 -5.79622462e-02 -1.11685265e-02
  6.40026433e-03 -5.67073599e-02 -1.14351315e-02  1.91864092e-02
  3.27823125e-02 -3.62521075e-02  1.21032193e-01 -3.24646607e-02
 -4.34175506e-02  2.26071384e-02  5.17402105e-02 -2.84926724e-02
  3.05551719e-02 -5.50855231e-03 -2.92575406e-03  3.33645940e-02
  1.09229200e-01 -1.76022127e-02 -3.79887111e-02 -8.81936476e-02
  9.75757465e-02 -1.07409552e-01  3.38367224e-02  4.00879905e-02
  9.70917717e-02 -3.90388407e-02  8.28332826e-03  1.38822064e-01
  4.83083054e-02 -4.97603454e-02 -8.54372308e-02  2.70892754e-02
  5.37992306e-02  3.08859125e-02  6.34091720e-02  3.60729583e-02
 -2.87356367e-03 -4.87549752e-02  5.43046258e-02  1.91053376e-02
 -2.45523099e-02 -2.09117457e-02 -4.97679319e-03 -5.13173873e-03
  1.72883563e-04 -1.42491879e-02 -1.87364593e-02  4.95110489e-02
 -1.03732860e-02 -5.99708548e-03 -8.65955800e-02 -1.31332614e-02
  4.19328175e-02  7.61078447e-02  5.65761961e-02 -5.64796316e-08
 -2.23443611e-03  2.44522560e-03 -4.21531238e-02  1.46216666e-02
 -1.44389980e-02  3.57654020e-02 -4.38877977e-02 -4.17555943e-02
 -3.71905752e-02 -6.22205473e-02 -1.01279028e-01  3.75286825e-02
 -2.31802240e-02  1.38609586e-02 -1.35189444e-02 -5.02608456e-02
 -1.10380817e-02  7.05508934e-03  4.75167930e-02 -7.51744285e-02
  6.91389740e-02 -3.64466272e-02  1.19549250e-02 -1.70746278e-02
  6.60191476e-02  7.21192081e-03  2.26237364e-02  8.05701464e-02
 -5.21910116e-02 -8.92629996e-02 -1.14358157e-01 -2.92221699e-02
  3.76211777e-02 -5.32730715e-03 -2.18875818e-02  1.67942122e-02
 -3.45837511e-02  1.96746662e-02 -1.53971547e-02  1.00006275e-01
  5.46524562e-02  2.84824613e-02 -2.13271566e-02 -3.17482948e-02
 -5.69461547e-02  6.92101493e-02  4.59467284e-02  7.33925169e-03
  1.40030548e-01 -2.13358575e-03 -5.65790124e-02 -3.10999695e-02
  3.22510526e-02  6.01801351e-02 -3.32126990e-02  6.02123477e-02
 -6.57273978e-02  2.63814777e-02  5.90090677e-02  6.37309439e-03
 -1.54906688e-02  6.19846806e-02 -6.25087991e-02 -9.96028911e-03]"
"1,
        [],
        TOKEN_PROGRAM_ID
      )
    );

    const signature = await sendTransaction(transaction, connection);

    await connection.confirmTransaction(signature, ""processed"");
  }, [publicKey, sendTransaction, connection]);

  return (
    <button onClick={onClick} disabled={!publicKey}>
      Send 1 lamport to a random address!
    </button>
  );
};
123456789101112131415161718192021222324252627282930313233343536373839const transaction = new Transaction().add(
  Token.createTransferInstruction(
    TOKEN_PROGRAM_ID,
    fromTokenAccount.address,
    toTokenAccount.address,
    fromWallet.publicKey,
    [],
    1
  )
);

const signature = await sendTransaction(transaction, connection);

await connection.confirmTransaction(signature, ""processed"");
1234567891011121314$ spl-token transfer AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg
Transfer 50 tokens
  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi
  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg
  Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks

Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd
1234567$ spl-token transfer AQoKYV7tYpTrFZN6P5oUufbQKAUr9mNYGe1TTJC9wajM 50 vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg
Transfer 50 tokens
  Sender: 7UX2i7SucgLMQcfZ75s3VXmZZY4YRUyJN9X1RgfMoDUi
  Recipient: vines1vzrYbzLMRdu58ou5XTby4qAqVRLmqo36NKPTg
  Recipient associated token account: F59618aQB8r6asXeMcB9jWuY6NEx1VduT9yFo1GTi1ks

Signature: 5a3qbvoJQnTAxGPHCugibZTbSu7xuTgkxvF4EJupRjRXGgZZrnWFmKzfEzcqKF2ogCaF4QKVbAtuFx7xGwrDUcGd
1234567# Làm thế nào để tính chi phí gửi transactionSố lượng chữ ký bên trong một transaction sẽ phản ánh chi phí cho transaction đó. CHỉ cần bạn không tạo mới account, đó cũng chính là chi phí phải trả cho transaction đó. Trong trường hợp phát sinh chi phí thuê, tham khảo tính toán phí thuê.Hai ví dụ sau đây sẽ trình bày 2 cách hiện hành để ước tính chi phí của một transaction.Ví dụ đầu tiên sử dụng getEstimatedFee, là một phương thức mới được thêm vào lớp Transaction, trong khi ví dụ 2 sử dụng getFeeForMessage, là phương thức thay thế cho getFeeCalculatorForBlockhash trong lớp Connection.# getEstimatedFeeTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  SystemProgram,
  Transaction,
} from ""@solana/web3.js"";

(async () => {
  // Connect to cluster
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const payer = Keypair.generate();
  const payee = Keypair.generate();

  const recentBlockhash = await connection.getLatestBlockhash();

  const transaction = new Transaction({
    recentBlockhash: recentBlockhash.blockhash, 
    feePayer: payer.publicKey
  }).add(
    SystemProgram.transfer({
      fromPubkey: payer.publicKey,
      toPubkey: payee.publicKey,
      lamports: 10,
    })
  );

  const fees = await transaction.getEstimatedFee(connection);
  console.log(`Estimated SOL transfer cost: ${fees} lamports`);
  // Estimated SOL transfer cost: 5000 lamports
})();
1234567891011121314151617181920212223242526272829303132const recentBlockhash = await connection.getLatestBlockhash();

const transaction = new Transaction({
  recentBlockhash: recentBlockhash.blockhash,
}).add(
  SystemProgram.transfer({
    fromPubkey: payer.publicKey,
    toPubkey: payee.publicKey,
    lamports: 10,
  })
);

const fees = await transaction.getEstimatedFee(connection);
console.log(`Estimated SOL transfer cost: ${fees} lamports`);
// Estimated SOL transfer cost: 5000 lamports
123456789101112131415# getFeeForMessageTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Message,
  SystemProgram,
  SYSTEM_INSTRUCTION_LAYOUTS,
  Transaction,
} from ""@solana/web3.js"";
import bs58 from ""bs58"";

(async () => {
  // Connect to cluster
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const payer = Keypair.generate();
  const payee = Keypair.generate();

  const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;
  const data = Buffer.alloc(type.layout.span);
  const layoutFields = Object.assign({ instruction: type.index });
  type.layout.encode(layoutFields, data);

  const recentBlockhash = await connection.getLatestBlockhash();

  const messageParams =","[-4.26863432e-02 -2.35097930e-02 -1.50710838e-02 -1.23139611e-02
 -3.91756780e-02 -4.88158874e-03  1.14187948e-01  5.98659217e-02
 -1.51717318e-02  2.21558679e-02 -5.98277850e-03 -9.37411841e-03
  8.07071384e-03 -5.59208393e-02 -4.91785742e-02  5.27825207e-02
 -2.44731046e-02 -5.09487502e-02 -2.05869805e-02 -2.96806227e-02
  3.71754505e-02 -3.32802646e-02  4.82198745e-02  7.93139450e-03
 -1.17084582e-03 -1.11839920e-01  9.44574736e-03 -5.55963181e-02
 -3.73396166e-02 -1.45102451e-02  7.57356808e-02 -6.63350476e-03
 -7.86940828e-02 -7.14941919e-02 -2.90422328e-02  4.67618704e-02
  3.99910612e-03 -9.21290293e-02  1.05638996e-01 -4.37006019e-02
 -3.56736220e-02  2.42640148e-03 -6.70431107e-02  2.03914195e-02
  4.17418331e-02 -1.85244456e-02  1.64011549e-02  2.30181944e-02
 -1.73962153e-02  2.37910841e-02 -4.83633904e-03  1.00937681e-02
 -1.17483465e-02  3.40278335e-02 -8.30447674e-02  1.43581461e-02
 -4.50810194e-02  3.13048810e-02  4.41611968e-02 -1.35111704e-03
  8.14450160e-02 -6.92014694e-02  2.66467649e-02 -4.01166528e-02
 -6.55507669e-02  4.78507280e-02 -2.54408307e-02 -3.29858996e-02
  1.93502977e-02 -1.42140333e-02 -1.94957142e-03  2.56880969e-02
 -8.10837075e-02  3.65320407e-02 -1.16978716e-02 -2.94064153e-02
 -3.46092433e-02  6.23908229e-02 -1.07933640e-01  4.73506842e-03
  6.20842353e-03 -5.35596646e-02  5.05095460e-02  6.82720691e-02
  2.42437981e-02  6.22525718e-03  7.69080594e-03  4.27997783e-02
  6.30772812e-03 -2.27082111e-02 -5.62323593e-02  6.18900210e-02
 -1.97226238e-02  6.77367114e-03  5.70363589e-02 -1.86922844e-03
  1.27048581e-03 -4.51059230e-02 -4.97615635e-02  9.64274630e-02
  1.82943717e-02  4.30817436e-03 -3.04240305e-02  8.96929484e-03
  9.76269916e-02  6.67695713e-04  3.32323834e-02 -6.44052401e-02
 -2.21785195e-02 -3.72498780e-02 -3.27045359e-02  9.54570398e-02
 -1.07468525e-02  6.52622804e-02 -7.07005411e-02  6.70866370e-02
 -4.21614060e-03  3.84530500e-02  2.36886949e-03 -1.64665226e-02
  1.06695011e-01 -7.73358531e-03 -7.82189146e-02 -2.76117641e-02
 -9.19296667e-02 -4.95987646e-02  1.12075426e-01  1.15730078e-32
 -1.13937417e-02 -3.01078544e-03 -6.05018660e-02 -4.58826534e-02
  2.45774426e-02  3.55428271e-02  9.68185514e-02  2.61762682e-02
 -6.21480122e-02 -8.13166127e-02 -3.43049653e-02 -1.39008805e-01
  8.03508833e-02  8.96192447e-04 -7.75779858e-02 -3.18325683e-02
  3.49381752e-02  7.08477497e-02  6.83162436e-02 -5.53982370e-02
  3.68556869e-03 -6.96593779e-04 -3.52540687e-02 -1.00604473e-02
 -8.35601613e-03  1.17773060e-02 -1.36012221e-02  5.03933802e-02
 -2.50265524e-02 -1.43466191e-02  5.83566427e-02  1.31536080e-02
 -3.34238522e-02  4.35618795e-02  5.89483120e-02 -3.70805860e-02
 -4.73377854e-02 -5.11352420e-02 -2.74155047e-02 -7.07971305e-02
  1.49167031e-02 -4.78181802e-03 -7.27284253e-02  3.96353798e-03
 -4.74351086e-02  4.65671648e-04 -3.56755629e-02 -3.52332704e-02
  9.29878950e-02 -1.98656581e-02 -7.90440366e-02  2.44656242e-02
  2.55057234e-02 -5.01480736e-02  1.59422355e-03 -6.22282028e-02
 -3.28575224e-02 -3.42352409e-03 -5.33776283e-02  4.46792878e-03
 -3.78301591e-02 -3.83168235e-02  2.29290072e-02 -3.09599526e-02
  4.38395068e-02  4.87639420e-02 -7.01752529e-02 -3.22977267e-02
  6.00543804e-02 -4.96738665e-02 -2.65677422e-02  6.39980733e-02
  3.85018028e-02  3.22983116e-02 -7.91079476e-02 -1.96512486e-03
  4.96206980e-04 -3.76017652e-02 -3.71713303e-02 -1.12103089e-03
  3.80956521e-03 -3.04522738e-02 -5.57393283e-02 -2.42972909e-03
  3.35721336e-02  9.70331058e-02 -5.32636121e-02 -3.74609306e-02
 -3.72223705e-02  1.08798742e-02  1.32158473e-02 -1.64190289e-02
 -2.35997960e-02  1.54667906e-02 -1.19384844e-02 -1.13863871e-32
  2.87885293e-02  4.21678051e-02 -3.29374783e-02  4.86222561e-03
 -3.20239887e-02  7.34184310e-02  5.37130497e-02 -1.34107582e-02
 -6.98646754e-02  5.37633449e-02  2.20532063e-02 -3.52164905e-04
 -1.53108090e-02  4.79836985e-02  5.47041260e-02 -2.06943881e-02
  2.71865688e-02  2.53002327e-02  1.92700233e-02 -1.84395839e-03
  1.21100806e-02  1.00669175e-01 -6.58131838e-02  4.66457121e-02
 -1.11343093e-01  4.49466556e-02 -4.79283631e-02  7.52951801e-02
 -2.45222803e-02 -5.71274851e-03  2.80540287e-02  6.14143796e-02
 -6.77334191e-03  8.35723504e-02  4.86377552e-02 -9.67743248e-02
  7.11338967e-02  1.01411231e-01  4.96926568e-02  7.53975064e-02
  5.46973161e-02 -8.20412040e-02  6.46968484e-02  3.78854349e-02
  7.00113922e-02 -1.89536717e-03  2.09240261e-02  1.87734757e-02
 -3.78212407e-02  9.51572210e-02  3.64207812e-02  4.20607589e-02
 -6.34119064e-02 -4.23791306e-03  5.48472330e-02  3.35403755e-02
  7.66845345e-02 -8.25868845e-02  2.80410461e-02 -4.02658507e-02
  5.95536605e-02 -8.24420750e-02  1.15717269e-01  2.76594982e-02
  1.30437493e-01 -8.59226007e-03 -2.25841273e-02  2.71671545e-02
  6.33885041e-02  7.72813782e-02 -1.52704248e-03  3.37139778e-02
  6.24217605e-03 -2.14366075e-02  1.14354037e-01 -2.69331280e-02
  1.68570634e-02 -6.02810904e-02 -1.28880152e-02 -1.37812190e-03
  1.16791641e-02 -1.33487182e-02  3.19276117e-02 -4.37289886e-02
 -7.76365050e-04 -1.84754115e-02 -9.71677713e-03 -1.89061612e-02
 -3.85310538e-02 -1.26615390e-02 -3.42490934e-02 -1.27635943e-02
  3.80959585e-02 -6.76673651e-02  4.86712344e-03 -6.56775185e-08
  1.81824602e-02 -3.46105103e-03 -4.72627245e-02  6.48856759e-02
  2.57245582e-02  6.20445535e-02 -6.84882626e-02 -7.17223585e-02
 -5.45347594e-02 -1.07192516e-01 -1.13948137e-01  3.20937000e-02
 -3.02695762e-02 -4.37224135e-02 -4.22797836e-02 -8.64494219e-02
 -7.79224113e-02 -9.96715501e-02 -4.63498607e-02 -5.88679090e-02
  2.42886208e-02 -7.20250681e-02  1.42070297e-02 -5.53802736e-02
  1.92039534e-02 -3.39314044e-02  1.04231581e-01  2.05403656e-01
  6.24265149e-02 -8.21858179e-03 -4.29383926e-02 -3.23249958e-02
  1.55443382e-02 -1.97409727e-02 -6.90986365e-02  2.58011539e-02
  4.45775464e-02 -2.09649820e-02  5.88846505e-02 -6.65608197e-02
  5.83580099e-02  4.93070893e-02  2.82165799e-02  4.20987979e-02
 -3.76679711e-02  4.76445667e-02 -1.71860456e-02  9.20992624e-03
  1.11071132e-01  6.05207086e-02 -4.49693054e-02 -4.03640456e-02
  3.02886926e-02  7.01295733e-02 -6.94999546e-02 -6.09030423e-04
 -7.24741817e-02 -7.35319555e-02  1.44232875e-02  7.56864995e-02
  1.00384332e-01 -7.12020369e-03 -5.61531894e-02 -6.52003288e-02]"
"{
    accountKeys: [
      payer.publicKey.toString(),
      payee.publicKey.toString(),
      SystemProgram.programId.toString(),
    ],
    header: {
      numReadonlySignedAccounts: 0,
      numReadonlyUnsignedAccounts: 1,
      numRequiredSignatures: 1,
    },
    instructions: [
      {
        accounts: [0, 1],
        data: bs58.encode(data),
        programIdIndex: 2,
      },
    ],
    recentBlockhash: recentBlockhash.blockhash,
  };

  const message = new Message(messageParams);

  const fees = await connection.getFeeForMessage(message);
  console.log(`Estimated SOL transfer cost: ${fees.value} lamports`);
  // Estimated SOL transfer cost: 5000 lamports
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152const message = new Message(messageParams);

const fees = await connection.getFeeForMessage(message);
console.log(`Estimated SOL transfer cost: ${fees.value} lamports`);
// Estimated SOL transfer cost: 5000 lamports
12345# Làm thế nào để thêm ghi chú và một transactionBất kỳ transaction nào cũng có thể được thêm một ghi chú thông qua memo programopen in new window. Hiện tại, programID của Memo Program có thể thêm thủ công bằng địa chỉ MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr.TSWallet-AdapterCLIPress </> button to view full sourceimport {
  Connection,
  Keypair,
  SystemProgram,
  LAMPORTS_PER_SOL,
  PublicKey,
  Transaction,
  TransactionInstruction,
  sendAndConfirmTransaction,
} from ""@solana/web3.js"";

(async () => {
  const fromKeypair = Keypair.generate();
  const toKeypair = Keypair.generate();

  const connection = new Connection(
    ""https://api.devnet.solana.com"",
    ""confirmed""
  );

  const airdropSignature = await connection.requestAirdrop(
    fromKeypair.publicKey,
    LAMPORTS_PER_SOL
  );

  await connection.confirmTransaction(airdropSignature);

  const lamportsToSend = 10;

  const transferTransaction = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: fromKeypair.publicKey,
      toPubkey: toKeypair.publicKey,
      lamports: lamportsToSend,
    })
  );

  await transferTransaction.add(
    new TransactionInstruction({
      keys: [
        { pubkey: fromKeypair.publicKey, isSigner: true, isWritable: true },
      ],
      data: Buffer.from(""Data to send in transaction"", ""utf-8""),
      programId: new PublicKey(""MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr""),
    })
  );

  await sendAndConfirmTransaction(connection, transferTransaction, [
    fromKeypair,
  ]);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051const transferTransaction = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: fromKeypair.publicKey,
    toPubkey: toKeypair.publicKey,
    lamports: lamportsToSend,
  })
);

await transferTransaction.add(
  new TransactionInstruction({
    keys: [{ pubkey: fromKeypair.publicKey, isSigner: true, isWritable: true }],
    data: Buffer.from(""Data to send in transaction"", ""utf-8""),
    programId: new PublicKey(""MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr""),
  })
);

await sendAndConfirmTransaction(connection, transferTransaction, [fromKeypair]);
1234567891011121314151617import { WalletNotConnectedError } from ""@solana/wallet-adapter-base"";
import { useConnection, useWallet } from ""@solana/wallet-adapter-react"";
import {
  Keypair,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";
import React, { FC, useCallback } from ""react"";

export const SendTenLamportToRandomAddress: FC = () => {
  const { connection } = useConnection();
  const { publicKey, sendTransaction } = useWallet();

  const onClick = useCallback(async () => {
","[-1.50169889e-02  5.33518642e-02 -8.31474215e-02  3.99157368e-02
 -2.79815644e-02  1.64358653e-02  6.00947812e-02  9.03554186e-02
  3.94572243e-02  7.83403590e-02 -7.08409846e-02 -1.03634134e-01
 -2.69965138e-02 -8.55394602e-02 -6.57077655e-02  3.24091427e-02
 -8.09723586e-02 -8.48102942e-02  6.03768369e-03 -2.78832465e-02
  1.26339048e-02 -7.11560696e-02  1.52986385e-02 -5.28631173e-02
  8.10117722e-02  1.21131865e-02 -1.48596708e-02 -2.97762416e-02
 -4.85445373e-02  2.50119567e-02 -1.09332306e-02 -1.16413748e-02
 -9.51619372e-02 -1.64153483e-02 -1.94084495e-02  8.32471773e-02
 -2.48420723e-02 -1.39537547e-02 -3.18561271e-02 -1.20142859e-03
 -1.00185769e-02  5.44848777e-02 -1.37007028e-01 -2.37364992e-02
  5.81978494e-03 -2.76920628e-02 -2.23952476e-02  1.18267536e-01
  2.20703725e-02 -1.16486195e-02 -4.74074483e-02 -2.96714436e-02
 -2.13303287e-02  4.87672575e-02 -4.29818593e-02  3.12950164e-02
  5.76933771e-02 -4.26853225e-02  4.10969332e-02 -5.97793832e-02
 -3.08621489e-02 -3.48786078e-02  5.59128933e-02 -3.16609889e-02
  2.03262013e-03  2.31482256e-02  2.24515945e-02  1.13677541e-02
 -7.76672363e-02 -3.54052074e-02  6.64299261e-03  2.63578482e-02
 -9.59783867e-02  6.41609915e-03  8.70048814e-03 -1.06080631e-02
  1.92468390e-02  5.03406115e-02 -1.60170067e-02  6.09430410e-02
 -4.15598936e-02 -1.06399894e-01 -3.36235464e-02  6.05839230e-02
  8.00906867e-02  2.88676079e-02 -2.48087868e-02 -3.68416384e-02
  6.06807247e-02 -6.55138493e-02  9.07195825e-03  3.89509252e-03
 -8.32549781e-02  6.12893961e-02  7.54644424e-02  2.57726684e-02
 -8.04310292e-03  6.15149029e-02 -5.66498488e-02  6.17154017e-02
  3.77256609e-02 -2.39386782e-02  4.33810661e-03 -2.94304304e-02
  1.85514484e-02 -5.61753102e-03  1.39548674e-01  1.46889575e-02
 -5.06732278e-02 -1.25998529e-02  2.03573378e-03  6.59502000e-02
  1.03645837e-02  2.32659411e-02 -6.15006126e-03  3.75138931e-02
 -3.59392911e-02  2.46729748e-03  2.16435380e-02  5.04949540e-02
  6.46268278e-02  6.35782480e-02 -1.06254831e-01 -2.57431772e-02
 -7.06935525e-02 -2.11514626e-02  3.37468907e-02  5.45943107e-33
  1.38382856e-02  6.32506013e-02  2.86475252e-02 -7.48937353e-02
 -1.47879347e-02  1.87021773e-02  5.74455895e-02  1.02038220e-01
 -3.74625251e-02  2.62145624e-02 -1.18229009e-01 -6.11435622e-02
  4.88705672e-02 -7.84033760e-02 -7.00302422e-02 -8.74371305e-02
  4.81281802e-02  7.28083327e-02  1.05683409e-01  4.08544093e-02
 -2.53594313e-02 -5.04042916e-02  2.65911799e-02 -8.51604417e-02
 -3.70899923e-02  4.60200720e-02 -5.01782931e-02 -9.09871422e-04
  8.08817707e-03 -2.66064852e-02  5.01536690e-02 -4.51480411e-03
  6.30036136e-03  6.14428371e-02  4.63610366e-02 -3.12200785e-02
  7.42417499e-02 -7.87933916e-03 -9.05992612e-02 -1.26868999e-02
  5.21321967e-02  2.46699229e-02  1.81071274e-02 -1.77865699e-02
 -7.63426721e-02 -3.05183884e-02  2.00897176e-02 -4.43225615e-02
  9.05082524e-02  3.72518636e-02 -1.08159602e-01 -8.36024294e-04
 -3.25906873e-02  2.39907112e-03  5.61132692e-02 -5.34077622e-02
  5.08501008e-02 -1.62903015e-02 -2.59933136e-02 -1.34705370e-02
 -3.11673302e-02 -7.35022724e-02  4.45244052e-02 -7.29543418e-02
  7.57645443e-02  2.29000300e-02 -6.37330264e-02 -1.77140832e-02
 -5.87109067e-02  1.92577653e-02 -3.67609374e-02  3.72817069e-02
  2.16704197e-02  1.48534700e-01 -1.05749667e-02 -6.33900166e-02
  8.11400916e-03  1.47866048e-02  2.57782941e-03 -3.06470273e-03
  3.63548845e-02 -8.99569225e-03 -4.62740473e-02 -6.83231233e-03
  1.90651473e-02  9.79010165e-02 -2.59692762e-02 -2.69010160e-02
 -1.87144168e-02 -2.13222648e-03 -6.53714454e-03 -1.21675953e-02
 -7.30309859e-02 -2.86538787e-02 -2.89453715e-02 -6.67962322e-33
 -3.24395709e-02 -1.52400956e-02 -3.86872031e-02  1.38032483e-02
  2.86737569e-02  6.11226596e-02  3.77658717e-02 -2.31207907e-03
 -8.06768145e-03  4.34562936e-02  6.52603386e-03  3.62737365e-02
 -2.54450161e-02 -2.99060829e-02  6.61028698e-02 -3.34543176e-02
  4.28343862e-02 -1.04875708e-05  7.25685433e-02 -8.54205489e-02
 -4.10269164e-02  1.13968335e-01 -4.33338061e-02  4.07912349e-03
 -1.24507807e-01  3.59985861e-03 -1.55082680e-02  4.87858132e-02
 -4.24358323e-02  1.03772841e-02  3.19510326e-02 -3.59198414e-02
 -8.66983011e-02  4.52993289e-02 -6.58945218e-02 -2.09729970e-02
  6.70894608e-02  7.64437318e-02  4.69824709e-02  9.28805396e-02
  2.63990592e-02 -3.78854685e-02 -1.25428336e-02 -2.14936268e-02
  7.29990005e-02 -4.17970568e-02 -2.47384179e-02 -2.21617762e-02
  3.31109986e-02  3.72105688e-02  4.04220968e-02 -4.88142371e-02
 -5.11656441e-02  1.64733250e-02 -5.06694764e-02  2.29794383e-02
  4.43670375e-04 -3.99610214e-02  8.03035349e-02 -7.75371194e-02
  2.54256688e-02 -1.88445821e-02  7.79797733e-02  1.09840184e-02
  7.69451633e-02  2.41738409e-02 -2.47925837e-02 -3.28697786e-02
  7.34673142e-02  2.87429983e-04 -8.42549354e-02  8.21891427e-03
  1.08971940e-02  4.39614393e-02  6.99722692e-02 -1.30063500e-02
 -1.52933765e-02  1.27204582e-02  4.94535826e-02  8.80433619e-03
  4.30095494e-02  4.96204244e-03  5.17437309e-02 -2.48947181e-02
 -9.55611933e-03 -6.82343766e-02  5.23050763e-02 -1.97088625e-02
 -1.22312017e-01 -5.40816113e-02 -7.37614259e-02 -6.26907647e-02
 -2.37416700e-02  2.92807836e-02 -6.13628291e-02 -6.70919462e-08
 -2.58430745e-02  4.82148007e-02 -5.87144569e-02  3.61550264e-02
  2.49520373e-02  6.56765187e-03 -3.96802016e-02 -4.71838936e-02
 -3.97037007e-02 -4.95479293e-02 -4.47187498e-02  3.94436456e-02
 -4.18830710e-03 -1.37533410e-03  2.90869195e-02 -6.86985478e-02
 -8.04977566e-02 -1.19995726e-02 -4.42273654e-02 -7.57341012e-02
  9.04380828e-02  3.02468874e-02 -3.26224044e-02 -3.80950123e-02
  5.65662161e-02  1.10833421e-02  9.92241502e-02  1.46583676e-01
  4.02320623e-02 -1.94175949e-03 -8.78667757e-02  3.03448532e-02
  6.37417510e-02 -7.62838423e-02 -2.19634585e-02  4.88584749e-02
 -2.36505494e-02  1.43828113e-02  4.18402404e-02  7.53612518e-02
  3.90575081e-02  7.25373551e-02 -5.89619540e-02  2.39264648e-02
  1.75516494e-02  1.59585327e-02 -6.07143715e-02  7.39236921e-02
  4.64280434e-02 -3.78178917e-02  6.49267286e-02  1.08976215e-02
  1.89713901e-03  3.59916314e-02 -5.47063872e-02 -9.83218625e-02
 -3.02659906e-02 -6.81011081e-02 -5.93340024e-02  5.07073775e-02
  8.41346383e-02 -7.85824880e-02 -5.66368997e-02 -3.05153597e-02]"
"   if (!publicKey) throw new WalletNotConnectedError();

    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: publicKey,
        toPubkey: Keypair.generate().publicKey,
        lamports: 10,
      })
    );

    await transaction.add(
      new TransactionInstruction({
        keys: [{ pubkey: publicKey, isSigner: true, isWritable: true }],
        data: Buffer.from(""Data to send in transaction"", ""utf-8""),
        programId: new PublicKey(""MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr""),
      })
    );

    const signature = await sendTransaction(transaction, connection);

    await connection.confirmTransaction(signature, ""processed"");
  }, [publicKey, sendTransaction, connection]);

  return (
    <button onClick={onClick} disabled={!publicKey}>
      Send 1 lamport to a random address!
    </button>
  );
};
123456789101112131415161718192021222324252627282930313233343536373839404142434445const transaction = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: publicKey,
    toPubkey: Keypair.generate().publicKey,
    lamports: 10,
  })
);

await transaction.add(
  new TransactionInstruction({
    keys: [{ pubkey: publicKey, isSigner: true, isWritable: true }],
    data: Buffer.from(""Data to send in transaction"", ""utf-8""),
    programId: new PublicKey(""MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr""),
  })
);

const signature = await sendTransaction(transaction, connection);

await connection.confirmTransaction(signature, ""processed"");
12345678910111213141516171819solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR> --with-memo <MEMO>
1solana transfer --from <KEYPAIR> <RECIPIENT_ACCOUNT_ADDRESS> 0.5 --allow-unfunded-recipient --url https://api.devnet.solana.com --fee-payer <KEYPAIR> --with-memo <MEMO>
1# Làm thế nào để thay đổi ngân sách tính toán cho một transactionNgân sách tính toán cho một transaction có thể thay đổi được bằng cách thêm vào một chỉ thị gọi đến Compute Budget Program. Mặc định, ngân sách tính toán được thiết lập ở mức 200k đơn vị tính toán nhân với số lượng chỉ thị và không vượt quá 1.4M đơn vị tính toán. Càng ít bước tính toán, chi phí bỏ ra sẽ càng ít.Lưu ý: Để thay đổi ngân sách tính toán, bạn phải chắc rằng chỉ thị đầu tiên trong 3 chỉ thị của transaction là thiết lập ngân sách.TSRustPress </> button to view full sourceimport { BN } from ""@project-serum/anchor"";
import {
  Keypair,
  Connection,
  LAMPORTS_PER_SOL,
  sendAndConfirmTransaction,
  ComputeBudgetProgram,
  SystemProgram,
  Transaction,
} from ""@solana/web3.js"";

(async () => {
  const payer = Keypair.generate();
  const toAccount = Keypair.generate().publicKey;

  const connection = new Connection(""http://127.0.0.1:8899"", ""confirmed"");

  const airdropSignature = await connection.requestAirdrop(
    payer.publicKey,
    LAMPORTS_PER_SOL
  );

  await connection.confirmTransaction(airdropSignature);

  const modifyComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({ 
    units: 1000000 
  });

  const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({ 
    microLamports: 1 
  });

  // Total fee will be 5,001 Lamports for 1M CU
  const transaction = new Transaction()
    .add(modifyComputeUnits)
    .add(addPriorityFee)
    .add(
      SystemProgram.transfer({
        fromPubkey: payer.publicKey,
        toPubkey: toAccount,
  ","[ 1.91734568e-03 -3.49004823e-03 -6.66929334e-02  1.46401338e-02
 -7.24640191e-02 -4.22596652e-03  5.37444912e-02  3.36046405e-02
  4.32133898e-02  1.47723043e-02  1.91723034e-02  4.06953925e-03
  5.48230857e-02 -2.42722947e-02 -3.73545326e-02  2.17431113e-02
 -2.82197148e-02 -8.49282593e-02  1.45700341e-02  3.95941772e-02
 -3.56452400e-03 -9.56089795e-02  8.36728215e-02 -1.13591840e-02
  1.65724624e-02 -8.32819492e-02 -6.07852405e-03 -4.98218052e-02
 -6.11063875e-02  1.61944218e-02  7.00255036e-02 -2.38043685e-02
 -8.29130113e-02 -6.94843158e-02 -2.77357758e-04  6.63849413e-02
  9.91577562e-03 -5.35616232e-03  2.34709363e-02 -3.58008966e-02
 -4.01708893e-02 -1.95784234e-02 -8.43742117e-02  4.87341583e-02
  5.56673855e-02  4.57150955e-03  4.94209863e-03  3.33319455e-02
 -3.85632403e-02  4.64939959e-02 -5.38810752e-02  3.71691957e-02
 -4.45596762e-02  4.99924235e-02 -5.11290738e-03  6.48863539e-02
  3.67093310e-02  2.32704040e-02 -1.30478581e-02 -4.12515365e-02
  1.21292569e-01 -3.95204686e-02  1.50761008e-02 -6.34706393e-02
 -6.10065535e-02  9.60462168e-02  3.40575241e-02 -2.85001355e-03
 -8.66240356e-04 -1.97473541e-02  3.08435019e-02 -5.34498598e-04
 -1.32652417e-01  8.54707044e-03 -4.71901931e-02 -5.32830395e-02
 -4.60922606e-02  3.15905027e-02 -1.00924864e-01  8.24440867e-02
 -4.20183539e-02 -7.42139146e-02  2.79991608e-02  1.40264453e-02
  4.89001572e-02  7.95374587e-02 -4.75394912e-02  1.39372963e-02
 -8.68385136e-02 -2.58433092e-02 -2.12743152e-02  6.41382411e-02
 -3.17062698e-02 -3.75168994e-02  4.00645398e-02  5.02592558e-03
  1.34118106e-02  4.29922016e-03  8.01516697e-03  2.76709273e-02
  5.34454063e-02  1.32383676e-02 -5.32392859e-02 -3.11912056e-02
  8.25564042e-02  6.12992514e-03  7.29484409e-02 -8.06481391e-02
 -3.29061821e-02 -3.88101935e-02 -3.17599028e-02  8.20203573e-02
  1.83228981e-02  3.30157243e-02 -5.35575002e-02  8.47537294e-02
 -1.95036791e-02  2.17519347e-02 -3.19152810e-02 -1.30587502e-03
  4.43468653e-02  7.96589535e-03 -5.68403304e-02 -1.04935979e-02
 -6.14380985e-02 -4.59580049e-02  7.17827082e-02  1.13511230e-32
  2.71232408e-02  1.31976083e-02 -3.42598036e-02 -9.97036137e-03
  4.07078937e-02  1.82463210e-02  7.53689781e-02 -2.33106818e-02
 -6.90175071e-02 -6.09615631e-02 -1.96923036e-02 -1.50171906e-01
  7.99568370e-02 -2.92417500e-02 -5.82268350e-02 -1.90190170e-02
  8.13677348e-03  3.36767472e-02  1.23069443e-01 -1.86904555e-03
 -3.02894115e-02 -1.13116391e-02  3.88984941e-02 -4.63932985e-03
 -1.11219930e-02  1.29174185e-03 -7.62596577e-02  5.32408878e-02
  1.19837569e-02 -1.15409391e-02  2.48829145e-02  1.33985998e-02
 -7.85633251e-02  5.16889095e-02  2.65538301e-02 -6.50743172e-02
 -2.54107751e-02 -2.08769608e-02 -5.27598336e-02 -5.43291867e-02
  4.40953523e-02 -1.08282575e-02 -8.28683227e-02  4.67186682e-02
 -1.34495674e-02  1.04524139e-02  4.77196909e-02 -2.62014717e-02
  1.26568526e-01 -5.98543510e-02 -7.44953603e-02  2.07114755e-03
  1.43999392e-02 -6.24295771e-02 -1.21724624e-02 -5.82233407e-02
  4.05391306e-03 -1.35877798e-03 -5.40817082e-02  1.19870501e-02
 -1.15233483e-02 -3.29579785e-02  9.83329304e-03 -4.10164297e-02
  6.17272854e-02 -3.02670095e-02 -8.81532058e-02 -1.83584504e-02
  7.98161607e-03 -4.43877354e-02  2.32948586e-02  9.74613801e-03
 -2.81217508e-02  5.95434904e-02 -5.14694769e-03 -1.99214425e-02
 -1.91309229e-02 -2.79214326e-02 -6.39858097e-03 -3.67648117e-02
  2.13826410e-02  9.33162961e-03 -3.26906964e-02 -2.18633376e-03
  6.13928065e-02  1.10176183e-01 -1.87228862e-02 -1.98239181e-02
 -1.09792035e-02  5.46410419e-02  1.21069411e-02 -4.17434750e-03
  2.62149591e-02  4.99751326e-03  1.96585953e-02 -1.14495310e-32
  3.29321623e-02  1.06305480e-02 -3.53661701e-02  4.34928723e-02
 -4.63570468e-02  1.08403794e-01  2.35993769e-02 -1.44349849e-02
 -3.46728675e-02 -3.28473784e-02  5.96198775e-02  1.82855539e-02
  2.30516847e-02  3.87597573e-03  1.15830339e-02 -8.80154148e-02
  2.90177315e-02  7.19260797e-03 -5.89472242e-03 -1.70085467e-02
  5.03016077e-02 -1.35996221e-02 -4.33838740e-02  5.10773994e-02
 -1.36909112e-01  3.05123441e-02 -7.36202523e-02  4.75773998e-02
 -3.73024195e-02 -2.88753156e-02  5.84624968e-02  7.30636790e-02
 -2.43480615e-02  8.13611224e-02  1.42433001e-02 -7.24019781e-02
  5.62396608e-02  6.86476827e-02  2.59641744e-02  8.55002105e-02
  5.67041524e-02 -4.32770848e-02  2.86769564e-03 -1.37397181e-02
  4.66446914e-02 -4.93520871e-02 -3.92927751e-02 -1.05301933e-02
  3.83252307e-04  9.61209536e-02  5.71637824e-02 -4.33832034e-03
 -2.88789701e-02 -1.99653283e-02  2.66254786e-02  1.04467288e-01
  6.27629459e-02 -8.94752666e-02  8.42724815e-02 -4.89853211e-02
  3.74831236e-03 -7.39140585e-02  8.36460069e-02  4.63131778e-02
  1.19874127e-01 -7.91411288e-03 -1.43261962e-02  6.42017275e-02
  5.18842787e-02  6.88147247e-02 -1.73161812e-02  5.64159527e-02
  1.67508088e-02 -2.62732524e-03  1.45433947e-01 -4.17553708e-02
 -6.09031320e-02 -6.46497533e-02  3.20322290e-02 -1.21377725e-02
  5.25017381e-02  1.95518192e-02  1.11644366e-03 -4.69016992e-02
  4.16471390e-03 -1.75751597e-02  1.90011971e-02 -3.60782258e-02
 -6.12167418e-02 -6.63145483e-02 -9.67056956e-03 -2.99618319e-02
 -3.75773944e-02 -4.90083545e-02  2.85088625e-02 -7.20335578e-08
 -3.24541554e-02  9.35035199e-03 -5.70281409e-02  1.18504483e-02
  4.60312553e-02  3.17503116e-03 -2.12099086e-02 -9.58190411e-02
  1.86040392e-03 -6.78477511e-02 -9.51345190e-02  2.57890075e-02
 -2.71021798e-02 -4.69960123e-02 -1.51609341e-02 -1.05930515e-01
 -9.65011865e-03 -1.02371566e-01 -3.36346962e-02 -6.72078431e-02
  6.13277555e-02 -8.46588314e-02 -1.03726273e-03  1.98075101e-02
  3.79999354e-02 -4.12460826e-02  1.19643368e-01  1.70782670e-01
  8.93521607e-02 -3.31168585e-02 -5.99379241e-02 -8.75648186e-02
  4.48680930e-02  1.71565881e-03 -4.00016457e-02  4.16709743e-02
  8.86299238e-02 -6.88598910e-03  5.01829647e-02 -2.30349507e-02
  8.26772898e-02 -1.55039066e-02 -2.90492773e-02  3.52129824e-02
 -7.12969527e-02  4.53474410e-02 -2.89978515e-02  6.61386698e-02
  1.01521658e-02  5.02237640e-02  9.69308708e-03 -3.20366994e-02
  7.03336373e-02  5.69681041e-02 -7.93759003e-02 -4.68603009e-03
 -1.79559849e-02 -2.25451365e-02  2.56845113e-02  1.19035821e-02
  1.52153611e-01  3.99639644e-02 -4.22043093e-02 -8.57974365e-02]"
"     lamports: 10000000,
      })
    );

  const signature = await sendAndConfirmTransaction(connection, transaction, [
    payer,
  ]);
  console.log(signature);
  const result = await connection.getParsedTransaction(signature);
  console.log(result);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051const modifyComputeUnits = ComputeBudgetProgram.setComputeUnitLimit({ 
  units: 1000000 
});

const addPriorityFee = ComputeBudgetProgram.setComputeUnitPrice({ 
  microLamports: 1 
});

const transaction = new Transaction()
.add(modifyComputeUnits)
.add(addPriorityFee)
.add(
    SystemProgram.transfer({
      fromPubkey: payer.publicKey,
      toPubkey: toAccount,
      lamports: 10000000,
    })
  );
123456789101112131415161718//! @brief Example Budget Management

use solana_client::rpc_client::RpcClient;
use solana_program::{instruction::Instruction, message::Message, pubkey::Pubkey};
use solana_sdk::{
    compute_budget::ComputeBudgetInstruction,
    pubkey,
    signature::{Keypair, Signature},
    signer::Signer,
    transaction::Transaction,
};

/// Submits the program instruction as per the instruction definition
fn submit_transaction(
    rpc_client: &RpcClient,
    wallet_signer: &dyn Signer,
    instructions: Vec<Instruction>,
) -> Result<Signature, Box<dyn std::error::Error>> {
    let mut transaction =
        Transaction::new_unsigned(Message::new(&instructions, Some(&wallet_signer.pubkey())));
    let recent_blockhash = rpc_client
        .get_latest_blockhash()
        .map_err(|err| format!(""error: unable to get recent blockhash: {}"", err))?;
    transaction
        .try_sign(&vec![wallet_signer], recent_blockhash)
        .map_err(|err| format!(""error: failed to sign transaction: {}"", err))?;
    let signature = rpc_client
        .send_and_confirm_transaction(&transaction)
        .map_err(|err| format!(""error: send transaction: {}"", err))?;
    Ok(signature)
}

const PROG_KEY: Pubkey = pubkey!(""PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc"");

/// Increase the Transaction Budget and call normal instruction(s)
/// Here we send redundant transactions to witness Compute Budget drawdown
fn send_instructions_demo(
    rpc_client: &RpcClient,
    wallet_signer: &dyn Signer,
) -> Result<(), Box<dyn std::error::Error>> {{
    let accounts = &[];
    let txn = submit_transaction(
        &connection,
        &wallet_signer,
        // Array of instructions: 0: Set Compute Unit Limt, 1: Set Prioritization Fee, 
        // 2: Do something, 3: Do something else
        [ComputeBudgetInstruction::set_compute_unit_limit(1_000_000u32),
        ComputeBudgetInstruction::set_compute_unit_price(1u32),
        Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
        Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec())].to_vec(),
    )?;
    println!(""{:?}"", txn);
    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354let txn = submit_transaction(
  &connection,
  &wallet_signer,
  // Array of instructions: 0: Set Compute Unit Limt, 1: Set Prioritization Fee, 
  // 2: Do something, 3: Do something else
  [ComputeBudgetInstruction::set_compute_unit_limit(1_000_000u32),
  ComputeBudgetInstruction::set_compute_unit_price(1u32),
  Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec()),
  Instruction::new_with_borsh(PROG_KEY, &0u8, accounts.to_vec())].to_vec(),
)?;
12345678910Ví dụ kết quả in ra của Program:Log Output[ 1] Program ComputeBudget111111111111111111111111111111 invoke [1]
[ 2] Program ComputeBudget111111111111111111111111111111 success
[ 3]
[ 4] Program ComputeBudget111111111111111111111111111111 invoke [1]
[ 5] Program ComputeBudget111111111111111111111111111111 success
12345 # Cặp khoá và Ví# Làm thế nào để sinh Cặp khoáCó rất nhiều chức năng trong các thư viện Solana để tương tác được bạn sẽ phải","[-3.96606699e-02  6.93219900e-02 -4.49830480e-02 -3.95785756e-02
 -9.23239365e-02 -2.30506575e-03  6.87228665e-02  1.02199800e-01
  5.35960728e-03  4.92806546e-02  3.36919315e-02 -6.23871945e-02
  2.39851344e-02 -3.50143611e-02 -2.92175021e-02 -2.31465716e-02
  8.45708698e-03 -5.18561453e-02 -2.76529845e-02 -5.22194467e-02
  2.86645554e-02 -5.95015101e-02  4.76859398e-02 -2.77785733e-02
  8.51173401e-02 -1.07543036e-01 -2.97848438e-03  1.60818100e-02
 -1.78647339e-02 -2.08392050e-02  8.70140791e-02  5.26227057e-02
 -6.82564750e-02 -6.50785817e-03 -2.32784152e-02  1.19574785e-01
  9.15758032e-03 -8.51928443e-02  7.49633694e-03 -2.94412356e-02
  4.14001793e-02 -4.62460797e-03 -9.26114470e-02  2.15019728e-03
  2.02137828e-02  1.28277775e-03 -3.19936732e-03  1.76355150e-02
 -2.72915605e-02  1.32514928e-02 -2.72061508e-02  2.06777621e-02
  2.74078622e-02  1.05985261e-01 -9.46577266e-03  1.49083911e-02
  8.09580833e-02  6.33192249e-03  1.15332380e-02 -6.82192594e-02
  3.34886536e-02 -5.84303774e-02  1.66985728e-02 -1.40982345e-01
  6.95559569e-03  2.97764130e-02  5.01411892e-02 -2.67831385e-02
 -1.82954408e-02  1.79508924e-02  4.71559539e-02 -1.37781240e-02
 -7.15771541e-02 -1.53203821e-02 -5.52015938e-02 -4.27730009e-02
 -4.68868650e-02  8.90033767e-02 -6.91928566e-02 -4.18498032e-02
 -3.69241424e-02 -6.40650615e-02  1.61799435e-02  5.40442877e-02
  6.74399659e-02  1.15707964e-02 -1.17498161e-02  5.64816967e-02
  1.86109170e-02 -1.81289930e-02 -2.16366909e-02  7.06792027e-02
 -6.09447025e-02 -4.15315442e-02  5.05966460e-03 -3.27421874e-02
  9.09592770e-03  4.98684496e-03  2.44019851e-02  7.63714314e-02
  1.44164227e-02  1.58404801e-02 -2.80363951e-02  1.37010617e-02
  7.64524713e-02  4.11261525e-03  1.44843627e-02 -9.24094697e-04
 -2.11959537e-02 -5.58126010e-02  1.59750096e-02  5.40667810e-02
  1.78792272e-02  3.92471030e-02 -2.22635232e-02  7.13220164e-02
 -3.48878503e-02  6.36394322e-02  1.49339447e-02 -4.94743697e-02
  9.16795135e-02  6.73240796e-02 -7.78629035e-02  2.69135647e-02
 -7.20312372e-02  2.57015657e-02  1.90268643e-02  1.48461777e-32
 -1.42210284e-02 -4.22705477e-03  1.74873844e-02 -3.58971469e-02
  1.14185235e-03  4.17526998e-02  2.94401776e-02  5.66763468e-02
 -4.26292568e-02 -6.92616031e-02 -9.39045921e-02 -6.28619492e-02
  7.97657445e-02 -3.61349620e-02 -7.15120137e-02 -8.11560303e-02
  2.88455971e-02  2.50312984e-02  6.66455701e-02  4.14421372e-02
  2.24137343e-02 -5.26998304e-02 -2.00975221e-02 -5.51725738e-02
 -1.65375713e-02  9.44266468e-03 -4.09606211e-02  4.23520245e-02
 -5.00044338e-02  3.23509728e-03  7.51577988e-02 -8.45945068e-03
  3.81487235e-03  3.11436150e-02  4.11495082e-02 -1.00909531e-01
 -2.62981001e-02 -4.38156389e-02 -5.70606254e-02 -7.75778145e-02
 -5.23221446e-04  3.96912731e-03 -8.70297104e-02 -1.66218560e-02
 -5.51021732e-02  2.42724381e-02 -1.68057662e-02  3.33469431e-03
  1.54283822e-01  2.89966054e-02 -6.13954291e-02  6.95276773e-03
  1.96894389e-02 -9.13891047e-02 -2.54056137e-02 -5.50732650e-02
  3.59602496e-02 -1.32023245e-02  1.73835680e-02  1.33509282e-02
 -3.07282340e-02 -1.86312525e-03 -3.91138438e-03 -6.31476939e-02
  2.17838250e-02  7.75787979e-03 -1.13981448e-01  9.60889179e-03
  1.89671386e-02  1.52384248e-02 -3.92848030e-02  9.89532247e-02
  5.43659814e-02  3.12506407e-02  3.03467754e-02 -5.47309443e-02
 -2.61144713e-02 -6.08701073e-02 -1.08951740e-01 -7.06227794e-02
 -6.72384212e-03  5.30632511e-02 -3.04601097e-04  8.21869634e-03
  5.99142164e-02  8.19028988e-02 -5.03319595e-03  3.49530508e-03
 -5.62736765e-02  2.46365741e-03 -3.99730578e-02 -6.58930317e-02
  6.11809967e-03  1.82075109e-02 -2.69465167e-02 -1.30331628e-32
 -2.69709453e-05  1.46821747e-03 -5.94274700e-02  5.72408140e-02
  2.11826488e-02  2.30752677e-02  6.64590374e-02  8.30603577e-03
 -6.39464632e-02  6.42253980e-02  7.69286305e-02  1.53887197e-02
 -2.16840636e-02  1.15044496e-03  6.24265783e-02 -3.79549600e-02
 -2.44068578e-02 -3.15227136e-02  8.08120593e-02 -5.23145944e-02
  6.12806156e-02  2.45545227e-02  2.38327924e-02  5.47491200e-02
 -1.07691377e-01  4.21269760e-02 -2.59502437e-02  3.82381454e-02
 -2.74988692e-02 -1.49893006e-02  2.88561154e-02 -8.22487473e-03
 -6.61426559e-02  4.72657830e-02  4.51197997e-02 -1.07889391e-01
  5.38764745e-02  6.95137158e-02 -3.77634598e-04  1.04540542e-01
  6.22722916e-02 -6.05036877e-02  8.82670935e-03  2.90073305e-02
  4.26646695e-02 -2.03154795e-02  3.46108992e-03  1.27629191e-02
  3.38450596e-02  3.71661708e-02  1.17214330e-01  2.29088701e-02
 -3.71914282e-02  5.88214509e-02  6.37339102e-03  8.89380276e-02
  1.17972754e-01 -6.17514215e-02  8.70842263e-02 -7.15256110e-02
  3.13433888e-03 -4.62936908e-02  1.13409899e-01  4.79224361e-02
  1.07143797e-01  8.46109260e-03  1.24415569e-02  2.26179175e-02
  3.64069715e-02  3.50745283e-02  7.72703951e-03  1.80979241e-02
  2.72229444e-02 -2.70273592e-02  7.05163255e-02  2.55837776e-02
 -1.82155557e-02 -4.64589447e-02  3.68801467e-02  2.28371844e-02
 -1.08469110e-02  1.66271930e-03  3.76578905e-02 -3.76173034e-02
 -1.99282262e-02 -3.61861363e-02 -2.03493964e-02  2.30504200e-02
 -6.55748174e-02 -3.85626107e-02 -6.28405139e-02  1.08589046e-02
 -1.44608086e-02 -5.52568920e-02 -1.14581827e-02 -6.63143851e-08
 -6.76827580e-02 -2.70973295e-02 -7.75913671e-02  1.87000521e-02
  5.03192768e-02 -4.34873328e-02  2.50696624e-03 -8.25573877e-03
 -2.33628005e-02 -7.12248012e-02 -2.51070689e-02 -8.14377423e-03
 -1.36851966e-02 -3.90740819e-02  4.09264117e-02 -9.40558463e-02
 -3.13653983e-02 -1.01846814e-01 -8.61924291e-02 -1.04907148e-01
  1.38795851e-02 -4.81466465e-02 -1.69530530e-02 -7.03091025e-02
 -2.94658970e-02 -4.75484394e-02  7.72627965e-02  2.06868231e-01
  3.08411047e-02 -5.25794998e-02 -1.55055448e-02  7.88006559e-03
  3.45968008e-02  5.07223094e-03 -6.33700192e-02  2.55965143e-02
  3.72641347e-03  4.40234169e-02  1.26670897e-01  3.06242835e-02
 -3.22041921e-02 -2.43939180e-02 -3.59703004e-02  5.92699572e-02
  4.24933881e-02 -5.99523727e-03 -1.64063964e-02  8.60780198e-03
  2.02203635e-02  8.40665996e-02  2.75201816e-02 -3.94081548e-02
  2.89444756e-02  4.93912250e-02 -1.06532261e-01 -6.79536834e-02
 -4.43940088e-02 -1.15342148e-01 -8.27154331e-03  4.55704443e-02
  1.02039948e-01 -3.44908237e-02  2.41837301e-03 -2.81094778e-02]"
"cần có Cặp khoá hoặc Ví. Nếu bạn đang kết nối với một ví, bạn sẽ không phải lo lắng chuyện đó nữa. Tuy nhiên, nếu bạn đang cần một Cặp khoá, bạn sẽ phải sinh ra chúng.TSPythonRustCLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";

(async () => {
  let keypair = Keypair.generate();
})();
12345let keypair = Keypair.generate();
1from solders.keypair import Keypair

keypair = Keypair()
123keypair = Keypair()
1use solana_sdk::signature::{Keypair};

fn main() {
    let wallet = Keypair::new();
}
12345let wallet = Keypair::new();
1$ solana-keygen new

# pubkey: 9ZNTfG4NyQgxy2SWjSiQoUyBPEvXT2xo7fKc5hPYYJ7b
123solana-keygen new
1# Làm thế nào để phục hồi một Cặp khoá từ khoá riêng tưNếu bạn đã có khoá riêng tư, bạn có thể phục hồi lại cặp khoá từ khoá riêng tư đó và dùng nố để kết nối với dApp của bạn.Từ BytesTSPythonC++RustCLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";

(async () => {
  const keypair = Keypair.fromSecretKey(
    Uint8Array.from([
      174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
      222, 53, 138, 189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
      15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
      121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
    ])
  );
})();
123456789101112const keypair = Keypair.fromSecretKey(
  Uint8Array.from([
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
    222, 53, 138, 189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
    15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
    121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
  ])
);
12345678from solders.keypair import Keypair

secret_key= [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
        63, 176, 109, 168, 89, 238, 135,
    ]
    
keypair = Keypair.from_bytes(secret_key)
print(""Created Keypair with Public Key: {}"".format(keypair.pubkey()))
1234567891011secret_key= [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226,","[-1.01558097e-01  8.30621808e-04 -1.29707024e-01 -7.22767934e-02
 -4.98466976e-02 -2.67765671e-02  4.60145064e-02  3.07847559e-02
 -2.86546041e-04 -2.78405659e-02  1.18825652e-01 -2.33529694e-02
  4.51933639e-03 -8.88934582e-02  7.10170865e-02 -2.50278302e-02
 -1.55119479e-01 -5.06245485e-03 -4.95968275e-02 -5.18217608e-02
  2.08962541e-02 -5.73664196e-02 -2.18058378e-02 -6.21683113e-02
 -2.20737793e-02 -4.74302024e-02  3.87610570e-02  5.02191372e-02
 -1.30515301e-03 -5.84127270e-02  5.02143539e-02  4.52562571e-02
  1.22232048e-03  3.88275646e-02  3.50840739e-03  5.88854700e-02
 -1.04510244e-02 -1.13935694e-02  3.31944227e-02 -8.42352770e-03
 -1.76742189e-02  2.06754114e-02 -7.13142902e-02 -3.68365720e-02
  5.54880872e-02 -2.14262567e-02 -9.38758105e-02  3.23323347e-02
 -8.42775626e-04  1.72171090e-03 -8.09636563e-02  5.77458031e-02
 -7.97932893e-02 -2.75666383e-03 -3.37061547e-02  6.28324109e-04
 -5.27744181e-02  3.84156592e-02  8.55675489e-02 -9.87663493e-03
  7.80541003e-02  8.26431904e-03  1.24687208e-02 -6.48942143e-02
  8.36773217e-03 -2.41477862e-02 -1.95016954e-02 -4.36329693e-02
 -3.41297835e-02  3.28526795e-02  2.12622974e-02 -6.84753805e-02
 -2.23658085e-02 -8.72166827e-03 -1.25898585e-01 -6.30037263e-02
 -6.43208697e-02  1.94329862e-02 -5.54857031e-02  2.76988875e-02
 -1.65938586e-02 -3.70946415e-02  1.24173034e-02  6.13545738e-02
 -2.91768350e-02  7.38482326e-02 -8.84299353e-02 -4.85921912e-02
  7.84955081e-03 -1.78279970e-02 -2.00264826e-02  6.39483426e-03
  3.37025709e-02  1.37588987e-02  8.42095632e-03  3.59870382e-02
  5.70033640e-02  6.23073503e-02 -6.57680407e-02  8.51102546e-02
  2.23649722e-02 -1.36827060e-03 -8.04083869e-02 -7.89961442e-02
 -1.37946126e-03 -2.46318355e-02  1.24212146e-01 -3.08359191e-02
 -4.17671278e-02  5.67696244e-02 -7.43452013e-02  8.45574141e-02
 -1.69119462e-02 -8.88576806e-02 -3.32596451e-02  7.63568655e-02
  2.95468383e-02  4.25478704e-02  3.22176628e-02  2.61214077e-02
  6.57121539e-02  1.34106306e-03 -4.58033495e-02 -3.16207856e-02
 -6.44859076e-02  6.05562003e-03  3.80151384e-02  1.65374819e-32
  1.48602230e-02  3.85470968e-03 -3.98057401e-02 -4.69923206e-02
  2.19228398e-03 -2.53047254e-02  5.63665926e-02  9.79694072e-04
 -1.42803982e-01 -8.10661763e-02 -2.90968921e-02 -2.38387380e-02
 -5.94905578e-02 -6.28879294e-02 -6.51797503e-02 -1.05153397e-02
  3.35397758e-02  1.15747750e-02  4.53827307e-02 -5.12993596e-02
  3.14773694e-02 -7.27521405e-02  2.65081823e-02  4.70110364e-02
  2.35406253e-02  1.02551570e-02 -6.72635660e-02 -5.06385183e-03
  2.39543840e-02  1.76484063e-02  7.63922110e-02  3.34945843e-02
 -2.73775943e-02  3.19004655e-02 -6.92343190e-02 -1.00814011e-02
 -5.43253347e-02 -1.13740116e-02 -1.03544287e-01 -6.15109988e-02
  6.47452995e-02 -2.10313424e-02 -2.89707370e-02  1.27595477e-02
 -8.51494148e-02  1.10239729e-01  1.57850459e-02  7.39031732e-02
  5.55604436e-02  3.01133040e-02 -1.32960916e-01 -3.41568189e-03
 -1.00921005e-01  2.27853283e-02  5.28509356e-02 -4.86847498e-02
 -1.85392164e-02  6.14825636e-03  1.37205832e-02 -3.44250016e-02
 -5.55147529e-02 -1.09799262e-02  3.91284227e-02  4.88878973e-02
 -1.60751697e-02  6.40219124e-03 -2.29132231e-02  2.99293622e-02
  1.79859474e-02 -9.68950391e-02 -2.76421085e-02 -1.49384863e-03
 -3.15914154e-02  9.68754217e-02 -5.78399599e-02 -4.34755534e-02
  2.59728413e-02  3.85547802e-02 -1.63491182e-02 -1.05179930e-02
  2.55426969e-02  2.54508038e-03 -1.33791696e-02  5.55338040e-02
  3.66605110e-02  3.29017602e-02  1.44525319e-02 -6.19959831e-02
  1.44408084e-02 -1.63612701e-02 -2.40250416e-02  1.09470384e-02
  6.43893145e-03 -1.11810468e-01 -4.11814116e-02 -1.55115252e-32
  4.38876301e-02 -3.95013280e-02 -9.33639556e-02 -4.12109774e-03
  9.95342992e-03  1.24411788e-02  1.12587512e-02 -2.65472177e-02
  6.84010703e-03  7.91906472e-03  2.25603599e-02 -2.40155142e-02
  9.93962809e-02 -2.17299797e-02  7.41465623e-03  3.68531533e-02
  4.24466841e-02  7.16618001e-02  3.98003086e-02 -3.86838578e-02
 -7.80457407e-02  2.90304590e-02 -1.35977063e-02  3.47298570e-02
 -5.79609461e-02  1.78917963e-02  1.21766953e-02  9.72281843e-02
 -8.62459093e-02 -3.93513707e-04  1.33888647e-01  1.66392960e-02
 -1.02919124e-01  6.38577640e-02 -1.51139162e-02 -8.05158466e-02
 -6.44746749e-03  7.43532032e-02  1.82935204e-02  4.48378436e-02
  7.59997368e-02 -2.73271445e-02  4.75474782e-02  8.00990220e-03
 -3.32987346e-02 -8.59058276e-02  1.16652414e-01 -1.16226748e-02
 -5.85400164e-02 -2.38452703e-02  1.42572969e-01 -4.27905470e-02
 -1.18658785e-02 -7.15175718e-02 -1.31484019e-02  1.34091213e-01
  5.78453764e-02  1.55548425e-02 -7.72205787e-03 -1.44707272e-02
  6.74831942e-02 -8.74933600e-02  1.60002746e-02  7.32317567e-02
  1.12105243e-01 -4.55440544e-02  2.63224691e-02  6.40284941e-02
  4.66543175e-02 -2.60641500e-02 -1.49446772e-02 -2.23690439e-02
  6.87741339e-02  2.08753999e-02  4.93213460e-02 -2.99975872e-02
 -7.98524618e-02  6.23640232e-02  5.83860651e-02 -3.05575915e-02
 -4.32480611e-02  6.30612997e-03  2.49485075e-02 -2.53442358e-02
  4.10532653e-02 -1.39852948e-02 -1.52185734e-03  3.17030847e-02
 -1.06385304e-02 -2.65997164e-02 -3.07750124e-02  9.17947479e-03
 -3.37645262e-02  9.34853405e-02  6.33221343e-02 -6.09831261e-08
 -1.44634470e-02  5.36312396e-03 -4.13792320e-02  3.16879041e-02
 -1.79750212e-02  3.03672608e-02  3.93727645e-02 -4.80996482e-02
 -1.35243153e-02 -4.80841212e-02 -4.05864380e-02  6.24743849e-02
 -3.51169035e-02  2.49599274e-02 -3.07864491e-02 -3.63355391e-02
  2.09987555e-02  6.10322431e-02 -1.06755262e-02 -4.11829837e-02
  8.91342089e-02 -4.52453867e-02  6.93600625e-02 -1.84921373e-04
  1.89834181e-02  3.88004407e-02 -3.25868884e-03  7.21784905e-02
  5.88130802e-02 -3.29013802e-02  3.70765734e-03 -3.40885408e-02
  7.40936771e-02 -3.60992029e-02 -1.21751698e-02 -2.06332859e-02
 -2.55843606e-02 -1.35551794e-02 -4.08528447e-02  1.02293417e-01
  2.54473872e-02 -4.63753454e-02 -5.82173765e-02  3.04375426e-03
 -9.38790664e-02  2.61054747e-03  4.48572412e-02  2.33614668e-02
  8.46345052e-02  4.10584919e-02 -3.32152098e-02 -3.68625075e-02
  7.67364204e-02 -3.54037760e-03 -1.72891244e-02  2.49839481e-02
  6.29618671e-03  1.07714586e-01  4.38362323e-02  3.37610170e-02
  1.60785075e-02  7.06714690e-02 -3.95499468e-02  3.98566723e-02]"
"218, 48,
        63, 176, 109, 168, 89, 238, 135,
    ]
    
keypair = Keypair.from_bytes(secret_key)
12345678// clang++ keypair_from_seed.cpp -o keypair_from_seed -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  const uint8_t bytes[] = {
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
    189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
    148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
    63, 176, 109, 168, 89, 238, 135,
  };
  Keypair key_pair = Keypair::from_seed(bytes);
  std::cout << ""Created Keypair with Public Key: "" << key_pair.public_key.to_base58() << std::endl;
}
12345678910111213141516const uint8_t secret_key[] = {
174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
63, 176, 109, 168, 89, 238, 135,
};
Keypair key_pair = Keypair::from_seed(secret_key);
1234567use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let secret_key: [u8; 64] = [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
        63, 176, 109, 168, 89, 238, 135,
    ];

    if let Ok(wallet) = Keypair::from_bytes(&secret_key) {
        let pubkey = Signer::pubkey(&wallet);
        println!(""Created keypair: {}"", pubkey)
    }
}
123456789101112131415let secret_key: [u8; 64] = [
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
    189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
    148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
    63, 176, 109, 168, 89, 238, 135,
];

let wallet = Keypair::from_bytes(&secret_key)?;
12345678# input your secret into the Keypath listed under solana config get
1# input your secret into the Keypath listed under solana config get
1Từ chuỗi Base58TSPythonRustPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  const keypair = Keypair.fromSecretKey(
    bs58.decode(
      ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG""
    )
  );
})();
12345678910const keypair = Keypair.fromSecretKey(
  bs58.decode(
    ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG""
  )
);
12345from solders.keypair","[-1.00178301e-01  2.58020442e-02 -9.36788619e-02 -5.73244281e-02
 -1.06759325e-01 -6.52675554e-02  3.35881975e-03  5.12553342e-02
 -1.78605709e-02  5.92314918e-03  4.09876332e-02 -8.44720565e-03
  2.38140486e-02 -7.32518062e-02 -5.07033207e-02 -2.63082832e-02
 -1.59168139e-01 -8.07434320e-03 -1.28199067e-02 -5.46479598e-02
  1.90029722e-02  1.98606122e-02 -5.54409698e-02 -3.34667824e-02
  1.71893984e-02  1.17604554e-01  2.41366941e-02  3.57419029e-02
  5.23540983e-03 -6.79065287e-02  5.72900549e-02  6.36812821e-02
  5.76063618e-02  5.93883581e-02 -5.93477935e-02  2.81427801e-02
 -6.47328123e-02  4.06944863e-02  3.95196155e-02  8.02674331e-04
 -3.43252495e-02 -9.89643577e-03 -1.02320369e-02  8.88021067e-02
  3.32995318e-02 -3.21850367e-02 -9.59657580e-02  3.78611907e-02
  6.88015204e-03 -7.22424686e-02 -3.75916548e-02  6.88561872e-02
 -9.56095755e-02  6.22928478e-02  1.97704379e-02 -1.13082863e-01
  8.67950544e-03 -7.51658902e-02  8.87910649e-02  1.30037693e-02
 -1.21759633e-02  1.24820337e-01 -1.44798299e-02 -5.75033464e-02
  4.16965224e-02 -2.52284184e-02  1.52481105e-02 -3.49824093e-02
  1.06044710e-02  7.94334989e-03  9.97679960e-03  1.79442447e-02
  2.62250677e-02  5.26875071e-02 -3.88899110e-02 -1.78074874e-02
 -3.20951641e-02 -7.54022151e-02  1.13704205e-02  1.48038920e-02
 -8.99960287e-03  2.12174803e-02  3.19063514e-02  1.43623352e-01
  1.38480188e-02  1.05652846e-02 -3.81556936e-02  1.00119570e-02
  7.44691864e-02 -8.89410451e-03 -1.69815775e-02 -7.56708393e-03
  2.25974601e-02  4.60932218e-02 -1.38317822e-02  1.00532040e-01
  1.23006366e-01 -6.66811541e-02 -9.07974541e-02  1.20634198e-01
  2.68083308e-02  3.53036337e-02 -7.53830820e-02 -9.10029411e-02
 -2.16913223e-02  1.84624121e-02  1.07434757e-01 -7.23477080e-03
 -1.98776997e-03  2.15086192e-02  7.84440245e-03 -1.86618492e-02
 -3.05968598e-02  2.31162971e-03  1.93870475e-03  1.82322115e-02
 -3.13198306e-02  7.07447380e-02 -8.41697026e-03  6.23170361e-02
  1.15588047e-02  4.98037040e-02 -2.70164516e-02  5.94278276e-02
 -4.79351990e-02 -1.55016966e-02 -6.97007105e-02 -1.05914429e-33
 -1.94142722e-02  6.15780288e-03 -3.79284332e-03 -7.93003105e-03
 -8.56386498e-04 -6.84680976e-03 -3.40236947e-02 -3.48633528e-02
 -6.45257384e-02  3.69826867e-03 -9.91491303e-02 -2.39424482e-02
 -9.22093168e-02 -1.57929435e-02  3.99732292e-02 -2.86190957e-02
  2.70410925e-02  4.96963561e-02 -5.89282885e-02 -7.27011934e-02
 -2.57590003e-02  1.74631029e-02  1.33457305e-02 -7.16322064e-02
  6.09767996e-02  5.63086867e-02 -1.17408875e-02 -7.85414353e-02
  3.10430583e-02  2.41059847e-02  2.38950551e-02  1.89387184e-02
 -5.09073213e-02  4.56015673e-03  3.59240696e-02 -5.15596122e-02
  2.35613696e-02 -4.73418273e-02 -8.02272782e-02 -2.14192905e-02
  2.60660512e-04  3.41374241e-02  2.24956647e-02 -4.88933995e-02
  5.03139459e-02  8.02407637e-02  3.29447463e-02  3.79256904e-02
 -9.59119573e-03  5.31661026e-02 -8.52859393e-02  3.24822180e-02
 -3.02320067e-02  2.90338062e-02 -3.57207805e-02 -6.55170679e-02
  6.04237765e-02  3.58254323e-03  3.33988592e-02  4.95692976e-02
  1.81670673e-02  2.48118173e-02  6.83694035e-02  2.57738773e-03
  1.30187278e-03 -4.46276516e-02 -1.00504346e-01  1.79726090e-02
  8.07245634e-03  4.78095114e-02 -7.98324570e-02 -4.37050918e-03
  2.80735083e-02 -5.44971495e-04 -2.69745719e-02 -4.06487174e-02
  7.23281950e-02  6.90853670e-02 -9.27143693e-02 -8.07793066e-02
  1.76363103e-02 -2.29351036e-02 -1.27011742e-02 -1.08262571e-02
  2.59177443e-02  1.41856987e-02 -1.72424596e-02 -5.77209257e-02
 -8.75665620e-02 -2.56512780e-02 -1.85007195e-03 -3.33503559e-02
  6.69889599e-02 -1.10124752e-01 -9.45331082e-02 -3.92714066e-35
 -1.12078059e-02  3.84152420e-02 -4.43283916e-02  1.74947418e-02
  2.91666389e-02 -1.18836565e-02  1.72322374e-02 -3.60246561e-02
 -4.24848609e-02  1.93606038e-02  3.79364267e-02  2.58462299e-02
  1.15092136e-01 -8.54813978e-02  1.14011414e-01  2.59060618e-02
  5.47756031e-02  1.67584658e-01 -3.50461863e-02 -4.63684872e-02
 -5.25072478e-02  4.27359045e-02 -6.50147349e-02  3.76824997e-02
  4.20458913e-02  4.63061109e-02  3.27970572e-02 -3.23506421e-03
 -2.69354321e-02  3.56494859e-02  1.76409613e-02  2.17528511e-02
 -6.21812195e-02 -3.42245353e-03 -8.94020423e-02 -5.25702797e-02
  4.67995964e-02 -1.64253339e-02 -6.55371621e-02 -1.35991452e-02
  8.51979554e-02  3.20983073e-03  7.08636343e-02  6.45998120e-02
 -2.59981882e-02  1.12396507e-02  1.08813494e-01  8.14059470e-03
 -4.28297855e-02  2.02977825e-02  1.34861335e-01 -3.96602713e-02
 -3.84108610e-02 -3.85499932e-02  1.21355522e-02  4.99272496e-02
 -5.06813154e-02  9.05254409e-02 -3.08648720e-02 -1.10955788e-02
 -3.63324583e-03 -1.88319327e-03  1.62452608e-02  3.35582867e-02
  8.25171769e-02 -8.15519392e-02  9.08017345e-03 -5.94428391e-04
 -4.61316071e-02 -1.15065863e-02  1.00916468e-01  5.30141741e-02
 -4.25976180e-02  2.30540410e-02  1.68529022e-02  1.90509371e-02
 -8.46745353e-03  1.69291124e-02 -1.82066020e-02  1.47134167e-04
 -2.25721374e-02  2.85085320e-04  2.14014966e-02  2.60684993e-02
  1.43443169e-02 -2.31564157e-02  7.00321347e-02  6.30795881e-02
 -8.27224478e-02  4.10042070e-02 -8.05598777e-03  1.17658414e-01
  2.53120698e-02 -2.03835341e-04  1.28411829e-01 -4.39729142e-08
  1.59781221e-02  1.03477836e-02 -1.03887185e-01  5.38061745e-03
  5.63252494e-02 -9.79262870e-03  2.73108277e-02 -2.16553826e-02
 -1.82715319e-02 -4.88523096e-02  8.90146121e-02 -2.52290592e-02
 -7.49484403e-03  1.85804330e-02  3.79525349e-02 -8.26269574e-03
 -3.83938327e-02  1.06435092e-02 -5.30306138e-02 -4.99606356e-02
  4.39622551e-02  1.23766568e-02 -2.25310423e-03 -3.21856625e-02
 -6.64803460e-02 -5.69920428e-03 -4.14892212e-02  4.50242572e-02
  4.53388989e-02 -3.31900381e-02  4.79221530e-02 -4.09760587e-02
  6.11385070e-02 -8.26603770e-02 -3.19879502e-02  7.78946951e-02
 -3.71780470e-02 -1.64785061e-03  5.00964932e-02  3.64937559e-02
 -4.71942909e-02 -3.16147655e-02 -7.96565264e-02  2.74260081e-02
 -7.50710741e-02 -2.07288153e-02  3.85529995e-02  2.31289379e-02
 -2.95348279e-02 -3.86653692e-02  5.84223890e-04  1.58424210e-02
  8.55323225e-02 -6.67171031e-02  7.52182379e-02  6.76911278e-03
 -5.45675755e-02  5.35087734e-02  8.53545312e-03  7.69411027e-03
  5.36376238e-02 -1.69679727e-02 -6.43753484e-02  3.14364694e-02]"
"import Keypair

b58_string = ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG""
keypair = Keypair.from_string(b58_string)
print(""Created Keypair with Public Key: {}"".format(keypair.pubkey()))
12345b58_string = ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG""
keypair = Keypair.from_string(b58_string)
12use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let wallet = Keypair::from_base58_string(
        ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG"",
    );
    let pubkey = Signer::pubkey(&wallet);
    println!(""Created keypair: {}"", pubkey)
}
123456789let wallet = Keypair::from_base58_string(
    ""5MaiiCavjCmn9Hs1o3eznqDEhRwxo7pXiAYez7keQUviUkauRiTMD8DrESdrNjN8zd9mTmVhRvBJeg5vhyvgrAhG"",
);
123# Làm thế nào để kiểm tra một cặp khoáNếu bạn được cho một cặp khoá, bạn có thể xác nhận rằng cặp khoá đó có khớp giữa khoá riêng tư và khoá công khai hay không.TSPythonC++CLIPress </> button to view full sourceimport { Keypair, PublicKey } from ""@solana/web3.js"";

(async () => {
  const publicKey = new PublicKey(
    ""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p""
  );
  const keypair = Keypair.fromSecretKey(
    Uint8Array.from([
      174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
      222, 53, 138, 189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
      15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
      121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
    ])
  );
  console.log(keypair.publicKey.toBase58() === publicKey.toBase58());
  // true
})();
1234567891011121314151617const publicKey = new PublicKey(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"");
const keypair = Keypair.fromSecretKey(
  Uint8Array.from([
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
    222, 53, 138, 189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
    15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
    121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
  ])
);
console.log(keypair.publicKey.toBase58() === publicKey.toBase58());
// true
1234567891011from solders.keypair import Keypair
from solders.pubkey import Pubkey

public_key = Pubkey.from_string(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"")

keys = [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
        63, 176, 109, 168, 89, 238, 135,
    ]
keypair = Keypair.from_bytes(keys)

print(keypair.pubkey() == public_key)
# True
123456789101112131415public_key = Pubkey.from_string(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"")

keys = [
        174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
        189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
        148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
 ","[-1.27537148e-02 -2.90101580e-03 -8.54408890e-02 -3.77269574e-02
 -4.39101495e-02 -3.92466038e-02  4.72741127e-02  4.47392873e-02
  2.50620078e-02 -8.54706205e-03  4.48700190e-02  3.06918286e-02
  2.50645378e-03 -9.58721638e-02  7.94672146e-02  1.06596230e-02
 -1.68112263e-01 -3.94594036e-02 -8.11466649e-02  5.59750460e-02
  3.61374356e-02 -6.54406324e-02  1.69601254e-02 -5.40812500e-02
  1.81762241e-02  3.49377119e-03  4.86692041e-02  8.62532407e-02
 -9.06552561e-03  8.26973747e-03  9.65410918e-02  3.58623303e-02
  5.97315095e-02  3.95400524e-02  3.88102345e-02  1.18608855e-01
  5.77813499e-02  5.55547606e-03  3.31738666e-02 -5.12174740e-02
 -2.90861558e-02 -4.33498099e-02 -6.69458956e-02  3.95818800e-02
  4.26621288e-02  4.99552712e-02 -9.36685726e-02  6.38219491e-02
  1.37668476e-03 -1.09068928e-02 -7.06394464e-02  5.35391644e-02
 -1.39383778e-01 -1.59551948e-02  5.76848574e-02  1.66798290e-03
 -3.31092440e-02 -1.38761969e-02  6.46559820e-02 -4.06563655e-02
  2.66312491e-02  6.33106753e-02  1.27025014e-02 -6.02647997e-02
  2.00220640e-03  1.25636794e-02 -2.59898156e-02 -7.10554868e-02
  2.88305283e-02 -2.42827814e-02 -9.60869342e-03 -4.98501658e-02
 -5.01288148e-03  7.73298228e-03 -8.27009305e-02 -7.66601339e-02
 -7.53624514e-02 -7.18257623e-03 -1.82466935e-02  2.95876004e-02
 -2.54782774e-02 -6.86025545e-02  4.19816338e-02  1.45016193e-01
  3.75722907e-02  5.27334064e-02 -8.99860188e-02 -7.34081194e-02
 -4.06414829e-02  3.26655246e-02  1.76332295e-02 -4.42461446e-02
  3.99145894e-02  1.99440923e-02  5.90023659e-02  7.10312948e-02
  4.17850018e-02 -1.85627490e-03 -6.26141876e-02  8.10050443e-02
 -3.15132621e-03 -4.97561470e-02 -2.21560579e-02 -6.08609840e-02
  5.31985536e-02  4.54957783e-03  9.89324301e-02 -5.39555997e-02
  2.33028876e-03  2.84947250e-02 -1.38140013e-02  2.27545686e-02
 -3.31264921e-02 -1.56564973e-02 -2.20478382e-02  4.77844290e-02
 -1.82607621e-02  6.18885420e-02  1.62902009e-02  4.82773781e-02
  6.24293424e-02  3.24164033e-02 -4.19060998e-02 -2.50632726e-02
 -1.50752872e-01 -2.83857528e-02  2.63282675e-02  2.03024008e-32
 -5.55749312e-02  2.35277750e-02  9.83229000e-03 -5.41159064e-02
 -2.82842986e-04 -1.08817192e-02  3.08710914e-02  2.53881458e-02
 -8.72214586e-02 -3.20221633e-02 -6.40898794e-02 -4.68653925e-02
 -6.85676327e-03 -3.42413224e-02 -3.05642523e-02 -2.25309487e-02
 -4.02471870e-02  3.92915048e-02 -4.70374245e-03 -6.21622289e-03
  4.61800806e-02 -3.88516076e-02  6.61941171e-02 -1.65903661e-02
 -1.94320865e-02  2.69352850e-02 -2.07431987e-02 -2.20137909e-02
  4.62812297e-02 -3.97828920e-03  1.88770182e-02 -2.40890086e-02
 -4.32247743e-02 -1.18296053e-02  1.42659349e-02 -1.29310815e-02
  6.72068670e-02 -7.95038138e-03 -1.56685054e-01 -3.86029184e-02
  2.49607135e-02 -4.39360403e-02 -4.87346537e-02  4.92565855e-02
  1.60310324e-02  9.04025584e-02  1.25562297e-02  4.34391163e-02
  7.83795416e-02  3.04022878e-02 -8.02108422e-02  1.24975415e-02
 -4.22400199e-02 -1.47644887e-02 -2.72077043e-02 -7.09528923e-02
  2.78968308e-02 -1.80247892e-02 -4.54936698e-02 -7.67703280e-02
 -6.53280094e-02  3.22269127e-02  9.02769193e-02  6.29308634e-03
  3.76013480e-02 -1.32127367e-02  3.55620310e-02  5.10889217e-02
 -3.11378483e-02 -5.53795286e-02 -2.01747697e-02  1.81797761e-02
 -4.41268086e-02  4.64415886e-02 -8.91668126e-02 -4.82259095e-02
  6.19273726e-03  2.07267348e-02 -2.25546453e-02 -8.86463299e-02
  4.75034416e-02  1.52482996e-02 -3.53850760e-02  4.78908718e-02
 -4.46133763e-02  5.98049909e-02  4.92172083e-03 -1.10310338e-01
 -1.90927973e-03 -1.75696556e-02 -1.05152614e-02 -6.01569079e-02
 -5.15122227e-02 -9.94788408e-02 -7.69976750e-02 -2.04017330e-32
  3.35302651e-02 -4.64055128e-02 -5.43058552e-02  2.14165244e-02
 -4.20043394e-02  3.08559798e-02  3.72878872e-02 -3.52975018e-02
  4.64431010e-02  2.32778713e-02  4.09534350e-02 -2.64482200e-02
  9.76424813e-02 -7.99813047e-02  2.35727280e-02  3.42085101e-02
  7.17697025e-04  8.15472826e-02  3.92750949e-02 -8.01882744e-02
 -4.21849377e-02  3.81067693e-02 -4.40883785e-02  6.10754937e-02
 -5.30781746e-02  5.75710535e-02  3.27801257e-02  4.81518544e-02
  2.75615859e-03  2.77001988e-02  7.93965459e-02  8.07694346e-02
 -8.34576264e-02  2.71747336e-02 -8.82830098e-02 -6.06078543e-02
 -1.18428720e-02  4.47786860e-02  1.79470854e-03  1.77587438e-02
  6.84128255e-02  2.39950549e-02 -2.63116080e-02 -2.80923340e-02
 -3.05235051e-02 -4.21987176e-02  6.15738966e-02  1.73117779e-02
 -4.17354610e-03 -4.05087927e-03  1.53891936e-01 -7.28822052e-02
 -7.91628733e-02 -6.50108606e-02 -3.86408903e-02  1.23456359e-01
  2.96455645e-03  3.60110812e-02  7.09759258e-03 -1.03765298e-02
  2.99799368e-02 -5.77862784e-02  2.56918371e-02  4.39485461e-02
  7.09172711e-02 -7.01290146e-02 -2.50344034e-02  2.42353976e-02
  4.57598865e-02 -7.07975030e-02 -3.30406800e-02 -1.26478728e-02
 -1.27568869e-02  3.45844403e-02  4.87340875e-02  4.99049649e-02
 -1.45008555e-02  5.22380657e-02  1.28454762e-02  8.49815924e-03
  3.96810658e-03  1.06776059e-02 -1.33130038e-02  6.85373619e-02
 -1.67701393e-02 -5.60128093e-02  4.10238653e-02  3.93657126e-02
 -7.71501660e-02 -1.44912405e-02  3.68534736e-02  7.03139380e-02
 -4.07619588e-02  5.57341911e-02  3.71676758e-02 -6.74376253e-08
 -2.37645358e-02  2.63094958e-02 -3.71295735e-02 -4.88225371e-03
 -2.84640514e-03  4.57073376e-03  2.43483484e-02 -1.20035224e-01
 -2.68467073e-03 -8.33688900e-02 -4.69964072e-02  2.55672075e-03
 -1.16749346e-01 -4.95062731e-02 -7.67148472e-03 -4.57711630e-02
 -6.47130907e-02 -1.78425387e-02 -3.25774066e-02 -8.60991776e-02
  6.61415309e-02 -8.51421580e-02  4.10716310e-02 -3.99731211e-02
 -1.98003706e-02  1.76728070e-02  2.53048446e-02  9.01838541e-02
  6.30522221e-02 -2.59018745e-02  4.32775915e-03 -1.19916946e-02
  5.21025211e-02 -9.94297639e-02 -4.34227176e-02  7.99314352e-04
 -5.05009526e-03 -5.24914525e-02  2.54210588e-02  6.13683090e-02
  3.12077031e-02 -6.52260110e-02 -5.48490994e-02  2.26456393e-02
 -9.90225077e-02 -5.55102192e-02  5.64620681e-02  5.32194637e-02
  6.49446845e-02  3.32341939e-02  2.25301888e-02 -2.28591450e-02
  6.63666576e-02 -3.26931812e-02 -4.68043610e-02  5.40910028e-02
 -1.44215189e-02  6.88494965e-02  4.57950830e-02  2.82197329e-03
  6.57217503e-02  1.14336433e-02 -9.04338714e-03  4.95158471e-02]"
"      63, 176, 109, 168, 89, 238, 135,
    ]
keypair = Keypair.from_bytes(keys)

print(keypair.pubkey() == public_key)
# True
123456789101112// clang++ verify_keypair.cpp -o verify_keypair -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  PublicKey public_key = PublicKey(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"");

  const uint8_t bytes[] = {
    174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
    189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
    148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
    63, 176, 109, 168, 89, 238, 135,
  };
  Keypair key_pair = Keypair::from_seed(bytes);

  std::cout << (public_key.to_base58() == key_pair.public_key.to_base58()) << std::endl;
}
12345678910111213141516171819PublicKey public_key = PublicKey(""24PNhTaNtomHhoy3fTRaMhAFCRj4uHqhZEEoWrKDbR5p"");

const uint8_t bytes[] = {
174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138,
189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240,
148, 69, 241, 227, 167, 80, 141, 89, 240, 121, 121, 35, 172, 247, 68, 251, 226, 218, 48,
63, 176, 109, 168, 89, 238, 135,
};
Keypair key_pair = Keypair::from_seed(bytes);

std::cout << (public_key.to_base58() == key_pair.public_key.to_base58()) << std::endl;
// 1
123456789101112solana-keygen verify <PUBKEY> prompt://
1solana-keygen verify <PUBKEY> prompt://
1# Làm thế nào để kiểm tra nếu một khoá công khai không tồn tại khoá riêng tư tương ỨngTrong một vài trường hợp đặc biệt (ví dụ như PDA), khoá công khai sẽ không hề tồn tại khoá riêng tư tương ứng với nó. Bạn có thể kiểm tra được điều này bằng cách thử xem khoá công khai có nằm trên đường cong ed25519 hay không. Chỉ những khoá công khai nằm trên đường cong mới có khoá riêng tư, hay nói cách khác là được kiểm soát bởi một ví người dùng.TSPythonRustPress </> button to view full sourceimport { PublicKey } from ""@solana/web3.js"";

(async function () {
  // Note that Keypair.generate() will always give a public key that is valid for users
  const key = new PublicKey(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY""); // Valid public key
  console.log(PublicKey.isOnCurve(key.toBytes())); // Lies on the ed25519 curve and is suitable for users

  const offCurveAddress = new PublicKey(
    ""4BJXYkfvg37zEmBbsacZjeQDpTNx91KppxFJxRqrz48e""
  ); // Valid public key
  console.log(PublicKey.isOnCurve(offCurveAddress.toBytes())); // Not on the ed25519 curve, therefore not suitable for users

  const errorPubkey = new PublicKey(""testPubkey""); // Is not a valid public key
})();
1234567891011121314const key = new PublicKey(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY"");
console.log(PublicKey.isOnCurve(key.toBytes()));
12from solders.pubkey import Pubkey

# Note that Keypair() will always give a public key that is valid for users
key = Pubkey.from_string('5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY') # Valid public key
print(key.is_on_curve()) # Lies on the ed25519 curve and is suitable for users

off_curve_address = Pubkey.from_string('4BJXYkfvg37zEmBbsacZjeQDpTNx91KppxFJxRqrz48e') # Valid public key
print(off_curve_address.is_on_curve()) # Not on the ed25519 curve, therefore not suitable for users

error_pubkey = Pubkey.from_string(""testPubkey""); # Is not a valid public key
12345678910key = Pubkey.from_string('5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY')
print(key.is_on_curve())
12use solana_sdk::pubkey::{Pubkey};
use std::str::FromStr;

fn main() {
    // Note that Keypair::new() will always give a public key that is valid for users
    let pubkey = Pubkey::from_str(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY"").unwrap(); // Valid public key
    println!(""{:?}"",","[-1.01425834e-01  3.10825277e-02 -7.31117427e-02 -5.82985580e-02
 -1.10158406e-01 -7.54601806e-02 -8.80513340e-03  7.25028142e-02
 -5.34131238e-03  1.44384732e-03  4.62203696e-02 -4.94870692e-02
  3.41450097e-03 -8.48775879e-02 -5.15015982e-02 -4.09782603e-02
 -1.68557554e-01 -3.99652980e-02 -1.85979251e-02 -2.82513537e-02
 -1.19929789e-02 -1.51750091e-02 -6.33795112e-02 -4.41645682e-02
  1.52508626e-02  9.43281725e-02  3.96032818e-02  3.84008288e-02
  1.75408330e-02 -5.32764010e-02  6.11717477e-02  5.46968244e-02
  4.01438251e-02  7.40091950e-02 -1.99050549e-02  6.81337416e-02
 -2.83494238e-02 -1.14829410e-02  3.87554578e-02 -8.04210268e-03
 -6.06252439e-02 -7.96372071e-03 -3.01298294e-02  8.62450525e-02
  6.79751039e-02  3.24895699e-03 -7.96102360e-02  3.92423868e-02
 -2.30997731e-03 -7.56812468e-02 -4.20309007e-02  9.62432921e-02
 -7.97880888e-02  4.47181836e-02  3.72435413e-02 -8.59942287e-02
  3.53823043e-02 -3.49725299e-02  1.02502793e-01  8.24280549e-03
 -2.02124715e-02  1.32929221e-01 -3.59351635e-02 -5.01123555e-02
  5.09219877e-02 -1.55203110e-02  1.75342697e-03 -2.69205198e-02
 -6.22779364e-03  1.06687397e-02  2.22435948e-02  6.81149215e-03
  1.13232983e-02  6.40730411e-02 -5.47400564e-02 -3.55649740e-02
 -2.23817136e-02 -7.26379603e-02  2.68663969e-02  5.33599816e-02
 -2.37428620e-02  2.27858666e-02  2.59999670e-02  1.26427144e-01
  3.56779583e-02  1.50928483e-03 -5.22113033e-02  6.58338331e-03
  6.64355978e-02  5.50178171e-04  3.33846696e-02 -5.62775414e-03
  4.79877647e-03  4.68473621e-02  3.25446427e-02  8.82023498e-02
  1.29773691e-01 -5.71477674e-02 -7.29823932e-02  1.21565863e-01
 -7.70102534e-03  2.54671760e-02 -7.81179518e-02 -8.29113722e-02
  1.16948492e-03  2.41849255e-02  1.27589211e-01 -4.02220944e-03
 -6.12373604e-03  1.50536317e-02  5.87166334e-03 -3.93969491e-02
 -2.75993273e-02 -2.41056463e-04  1.93577148e-02  2.75928644e-03
 -2.17342339e-02  7.34382719e-02  3.72771546e-03  2.65363771e-02
  1.69980293e-03  6.32924661e-02 -1.40639013e-02  4.92383838e-02
 -4.69744578e-02 -2.42717285e-02 -6.26543090e-02  4.76490566e-33
  4.38239612e-03  7.48964120e-03 -3.33175585e-02 -1.23046478e-02
  2.22903676e-03 -7.34473928e-04 -4.91272695e-02  3.08338413e-03
 -9.93347168e-02  9.65981930e-03 -9.49617550e-02 -3.55324633e-02
 -8.57059956e-02 -5.46962060e-02  5.89274727e-02 -1.56025134e-03
  5.81311702e-04  3.53996940e-02 -7.23623857e-02 -5.61632700e-02
  3.97934020e-03  1.47582777e-02  2.02115290e-02 -5.98744377e-02
  3.27003673e-02  5.75829633e-02 -6.47655176e-03 -5.52563071e-02
  2.29906049e-02  1.26624955e-02 -1.73324998e-02  8.44944827e-03
 -8.21506754e-02  2.05225851e-02  5.84363900e-02 -4.23744433e-02
  2.79904958e-02 -5.90194836e-02 -1.05036937e-01 -2.07712837e-02
 -1.34314280e-02  8.79592821e-03  1.12445122e-02 -4.43407409e-02
  5.46830706e-02  6.20161332e-02  3.32104526e-02  2.31124964e-02
 -1.46750435e-02  4.09892723e-02 -5.53999320e-02  5.30241057e-02
 -5.13950661e-02  4.38126959e-02 -3.27539146e-02 -6.57571703e-02
  6.87646791e-02  1.47735057e-02  4.67060953e-02  5.84779195e-02
  3.50528583e-02  1.66126397e-02  5.91476560e-02 -5.16194385e-03
 -9.04000923e-03 -1.55118722e-02 -1.13730550e-01  3.51555869e-02
  6.83541372e-02  2.88198199e-02 -5.80967851e-02 -1.06951660e-02
  2.17067841e-02  3.76760005e-03 -4.42968644e-02 -5.41407689e-02
  4.15389538e-02  5.02000153e-02 -9.36972424e-02 -8.68564174e-02
  3.97289284e-02 -5.74334152e-03 -5.95034705e-03 -3.22299800e-03
  6.70110434e-02 -2.46473234e-02 -1.69375557e-02 -6.37660399e-02
 -8.42104778e-02 -3.40118743e-02 -1.39438557e-02 -2.29999032e-02
  6.12603128e-02 -1.17671594e-01 -8.53751823e-02 -5.58505284e-33
 -1.18152024e-02  7.82462768e-03 -6.93652779e-02  1.19799105e-02
 -1.64414700e-02 -3.48221622e-02  2.21938565e-02 -4.90644053e-02
 -4.13322933e-02  2.72132363e-03  4.28017825e-02 -1.37178809e-03
  1.19570948e-01 -6.76048025e-02  9.27647650e-02 -8.04131385e-03
  5.74597670e-03  1.41527325e-01 -2.56329644e-02 -6.37685359e-02
 -4.45680618e-02  2.03132629e-02 -4.25844379e-02  2.36372277e-02
  3.43884043e-02  4.10765670e-02  9.19376966e-03  1.30146891e-02
 -1.60159767e-02  3.45508084e-02  5.17639555e-02  3.57465558e-02
 -8.33377093e-02  1.91129337e-03 -5.75591438e-02 -3.15531343e-02
  3.42356190e-02  2.56554894e-02 -2.90646851e-02  1.30034946e-02
  1.30949274e-01 -1.67397857e-02  6.28407151e-02  5.78142926e-02
 -2.95092016e-02  3.38094383e-02  1.15296684e-01 -3.44834197e-03
 -5.18799089e-02  1.30898925e-02  1.68277755e-01 -5.61824255e-02
 -2.30975896e-02 -3.07265073e-02  1.01773916e-02  4.70801257e-02
 -6.38917694e-03  5.56151234e-02 -7.41947582e-03  6.85631111e-03
  1.39446836e-02 -3.92741971e-02  9.77727398e-03  5.11321872e-02
  7.43004009e-02 -7.73744360e-02 -1.82610620e-02 -1.39232178e-03
 -1.66116115e-02 -3.83914858e-02  7.42638409e-02  2.64886692e-02
 -8.00184682e-02  1.05867656e-02  1.38601083e-02  3.66830528e-02
  1.59726955e-03  2.49912441e-02  2.51940526e-02  1.79313421e-02
 -1.82053205e-02 -2.56718532e-03  5.33932038e-02  3.14082727e-02
 -8.76543950e-03 -6.41318187e-02  7.02938214e-02  5.16266488e-02
 -1.08027942e-01  3.62927280e-02  1.61634143e-02  1.36351809e-01
  4.31198440e-02  2.42252322e-03  9.84263346e-02 -5.51225874e-08
 -1.10459933e-02 -4.11266088e-03 -9.97596383e-02  2.58390196e-02
  5.26063032e-02 -2.27721762e-02  2.13255566e-02 -7.11163729e-02
 -1.61394849e-02 -5.75025976e-02  7.17032105e-02 -1.23625547e-02
 -3.97701077e-02  3.89667321e-03  7.20465034e-02 -2.26820335e-02
 -5.30519374e-02 -2.50086989e-02 -5.07261939e-02 -2.86088511e-02
  5.13927229e-02 -1.16573209e-02 -1.42345671e-04 -1.39509588e-02
 -7.85585940e-02  1.22268554e-02 -4.72178832e-02  6.37203753e-02
  2.70081796e-02 -3.28002684e-02  5.12826182e-02 -1.56412087e-02
  5.48205823e-02 -6.47154748e-02 -2.56033652e-02  7.16184229e-02
 -2.91540176e-02  1.04814442e-02  4.16895486e-02  2.01614238e-02
 -7.07993433e-02 -2.77800821e-02 -9.09803733e-02  2.83691846e-02
 -5.92611991e-02 -5.08909719e-03  3.96055318e-02  3.41465883e-02
 -3.03269364e-02 -1.24222832e-02  2.37611178e-02  2.42331531e-02
  8.66432860e-02 -3.97087708e-02  4.67667617e-02 -5.01269894e-03
 -5.86581603e-02  4.43008356e-02  1.77065730e-02  3.67254317e-02
  5.40452972e-02  3.27574136e-03 -2.73860488e-02  1.37406792e-02]"
"pubkey.is_on_curve()); // Lies on the ed25519 curve and is suitable for users

    let off_curve_address = Pubkey::from_str(""4BJXYkfvg37zEmBbsacZjeQDpTNx91KppxFJxRqrz48e"").unwrap(); // Valid public key
    println!(""{:?}"", off_curve_address.is_on_curve()); // Not on the ed25519 curve, therefore not suitable for users

    let error_pubkey = Pubkey::from_str(""testPubkey"").unwrap(); // Is not a valid public key
}
12345678910111213let pubkey = Pubkey::from_str(""5oNDL3swdJJF1g9DzJiZ4ynHXgszjAEpUkxVYejchzrY"").unwrap();
println!(""{:?}"", pubkey.is_on_curve())
12# Làm thế nào để sinh ra cụm mnemonicNếu bạn đang tạo ví, bạn sẽ cần sinh ra một cụm mnemonic để người dùng có thể lưu và phục hồi lại ví trong trường hợp cần.TSPythonCLIPress </> button to view full sourceimport * as bip39 from ""bip39"";

const mnemonic = bip39.generateMnemonic();
123const mnemonic = bip39.generateMnemonic();
1from mnemonic import Mnemonic

mnemo = Mnemonic(""english"")
words = mnemo.generate(strength=256)
1234mnemo = Mnemonic(""english"")
words = mnemo.generate(strength=256)
12solana-keygen new
1solana-keygen new
1# Làm thế nào để phục hồi lại cặp khoá từ cụm mnemonicCó rất nhiều ví sử dụng cụm mnemonics để biểu diễn khoá riêng tư. Bạn có thể chuyển đổi giữa mnemonic và cặp khoá để kiểm thử dưới môi trường địa phương.BIP39 - tạo một ví đơnTSPythonCLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";
import * as bip39 from ""bip39"";

(async () => {
  const mnemonic =
    ""pill tomorrow foster begin walnut borrow virtual kick shift mutual shoe scatter"";
  const seed = bip39.mnemonicToSeedSync(mnemonic, """"); // (mnemonic, password)
  const keypair = Keypair.fromSeed(seed.slice(0, 32));
  console.log(`${keypair.publicKey.toBase58()}`); // 5ZWj7a1f8tWkjBESHKgrLmXshuXxqeY9SYcfbshpAqPG
})();
12345678910const mnemonic =
  ""pill tomorrow foster begin walnut borrow virtual kick shift mutual shoe scatter"";
const seed = bip39.mnemonicToSeedSync(mnemonic, """"); // (mnemonic, password)
const keypair = Keypair.fromSeed(seed.slice(0, 32));
1234from solders.keypair import Keypair
from mnemonic import Mnemonic

mnemo = Mnemonic(""english"")
seed = mnemo.to_seed(""pill tomorrow foster begin walnut borrow virtual kick shift mutual shoe scatter"")
keypair = Keypair.from_bytes(seed)
print(""Created Keypair with Public Key: {}"".format(keypair.pubkey()))
1234567mnemo = Mnemonic(""english"")
seed = mnemo.to_seed(""pill tomorrow foster begin walnut borrow virtual kick shift mutual shoe scatter"")
keypair = Keypair.from_bytes(seed)
123solana-keygen recover
1solana-keygen recover
1BIP44 - nhiều ví, thường được biết đến với tên gọi ví HD (Hierarchical Deterministic - Phân quyền Tất định)Bạn có thể tạo nhiều ví từ một seed đơn và được gọi là ví HD:TSCLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";
import { HDKey } from ""micro-ed25519-hdkey"";
import * as bip39 from ""bip39"";

(async () => {
  const mnemonic =
    ""neither lonely flavor argue grass remind eye tag avocado spot unusual intact"";
  const seed = bip39.mnemonicToSeedSync(mnemonic, """"); // (mnemonic, password)
  const hd = HDKey.fromMasterSeed(seed.toString(""hex""));
  for (let i = 0; i < 10; i++) {
    const path = `m/44'/501'/${i}'/0'`;
    const keypair = Keypair.fromSeed(hd.derive(path).privateKey);
    console.log(`${path} => ${keypair.publicKey.toBase58()}`);
  }
})();
123456789101112131415const mnemonic =
  ""neither lonely flavor argue grass remind eye tag avocado spot unusual intact"";
const seed = bip39.mnemonicToSeedSync(mnemonic, """"); // (mnemonic, password)
for (let i = 0; i < 10; i++) {
  const path = `m/44'/501'/${i}'/0'`;
  const keypair = Keypair.fromSeed(derivePath(path, seed.toString(""hex"")).key);
  console.log(`${path} => ${keypair.publicKey.toBase58()}`);
}
12345678solana-keygen recover 'prompt:?key=0/0'
1solana-keygen recover 'prompt:?key=0/0'
1# Làm thế nào để sinh một địa chỉ danh nghĩaĐịa chỉ danh nghĩa, hay địa chỉ tuỳ chỉnh là những địa chỉ với các tiền tố là những ký tự cụ thể. Ví dụ, một người muốn một","[-3.36610563e-02  1.96484476e-02 -2.95612179e-02 -3.01154200e-02
 -1.13985697e-02 -3.23268399e-02  1.11338859e-02  1.85868926e-02
 -6.86163381e-02 -4.22464348e-02  3.18052322e-02  2.43388172e-02
 -1.95715632e-02 -2.44362876e-02  2.67724544e-02 -4.61005270e-02
 -1.20379627e-01  6.48026867e-03  8.45012348e-03  1.16634807e-02
  7.23770559e-02  1.66050057e-04  4.89840135e-02 -2.42879745e-02
  3.19853835e-02 -6.24222308e-02  1.52989058e-02  6.20966814e-02
 -2.95942333e-02 -3.02828047e-02  1.11471385e-01 -6.24526180e-02
 -5.83719686e-02  1.97945591e-02  8.54199901e-02  6.05479255e-02
  3.69944163e-02 -3.53090651e-02  6.63420409e-02 -1.65688358e-02
 -4.64259312e-02 -4.46825996e-02 -2.36710459e-02  9.21823829e-02
  8.51538926e-02  2.37109587e-02 -7.98931718e-02  4.92180744e-03
 -3.91109437e-02  6.26698732e-02  8.57324619e-03 -4.94721113e-03
 -6.18145394e-04  8.24024901e-03  4.43851613e-02  3.05825584e-02
 -5.94402058e-03 -6.72339182e-03  2.84055732e-02  2.48311996e-03
  9.41281486e-03 -8.66790302e-03 -1.82477403e-02 -1.04994141e-02
 -6.52085766e-02  7.82774687e-02  3.75409052e-02 -8.18277001e-02
  4.16379496e-02 -3.63493524e-02 -6.02852320e-04  2.08015125e-02
  1.20013244e-02 -7.72647560e-03 -3.96087430e-02 -5.19474149e-02
 -6.25311434e-02  6.48597907e-03 -4.49013375e-02  2.91527994e-02
 -3.67452540e-02 -4.96306382e-02  5.02848327e-02  1.09189928e-01
  3.00065242e-02  9.62609649e-02 -1.07197762e-02 -8.74980763e-02
  4.07038406e-02  8.21455941e-02  5.76308649e-03  1.86743233e-02
 -3.17898393e-02  7.99631700e-02  4.63484935e-02 -8.62223748e-03
  2.09976584e-02  1.11442001e-03 -9.04149339e-02  1.12940148e-01
 -4.58212309e-02  2.64441669e-02 -6.03425037e-03 -8.86737332e-02
  7.50636831e-02  4.52463999e-02  3.98305021e-02 -7.81266764e-03
 -5.98176755e-02  2.40800772e-02  2.63288785e-02 -4.82962169e-02
 -1.62011441e-02  7.66515508e-02  3.25823687e-02 -3.19081396e-02
  2.61242944e-03  3.95770706e-02 -4.80285995e-02  1.39092458e-02
  2.52971184e-02  2.05220543e-02 -4.11568694e-02  1.83454864e-02
 -1.47524521e-01  5.24155144e-03  2.70749554e-02  8.77374951e-33
 -2.41487939e-02  2.05551237e-02 -4.33971584e-02  5.15054865e-03
 -1.42139532e-02  6.31611571e-02 -7.41022974e-02  3.65424156e-02
 -1.10622637e-01 -1.08568948e-02 -3.52066569e-02 -3.20335664e-02
  9.61985532e-03 -1.00333821e-02  9.94505584e-02 -4.47745062e-02
  5.59005737e-02  4.35503721e-02  1.32970605e-02  2.71827318e-02
  5.39130233e-02 -7.05156848e-02 -3.73739824e-02 -8.00063685e-02
 -7.12482482e-02  4.81607132e-02 -2.44539771e-02  3.49327177e-02
  5.14521673e-02  2.56167613e-02 -4.92665730e-02 -6.60713762e-02
  3.88027132e-02 -2.12704297e-02  8.58445466e-02 -4.70240824e-02
  8.77493713e-03  1.90080162e-02 -1.32361323e-01 -2.28476450e-02
  6.34549558e-02 -1.38560897e-02 -3.21181156e-02  1.92718431e-02
  1.84354559e-02 -3.59819713e-03  9.11866780e-03  5.01988381e-02
  5.16644232e-02 -6.47481205e-03 -7.08812922e-02  5.75481914e-02
 -5.79924434e-02 -9.43003222e-02  4.46292758e-02 -2.60344688e-02
  9.93863214e-03  2.88662072e-02 -3.58275995e-02 -9.95966140e-03
 -3.73581760e-02  1.00708112e-01  4.15883921e-02 -1.47456946e-02
 -4.35491418e-03 -3.02798897e-02 -7.95269664e-03 -4.58772928e-02
 -1.02373902e-02 -3.27604525e-02 -6.48915172e-02  7.03787804e-02
 -5.13190255e-02  2.28929166e-02 -1.03781343e-01 -5.91019876e-02
 -5.86692505e-02  8.55162516e-02  7.86059201e-02 -6.69015720e-02
  4.81275804e-02 -2.16374975e-02 -8.54731202e-02  1.77926645e-02
  1.10875545e-02  5.87533265e-02 -3.05204676e-03 -1.58329178e-02
 -2.30976939e-02  9.91605073e-02  5.72877638e-02  6.06596656e-03
 -6.53816909e-02 -1.15651570e-01 -1.62597783e-02 -9.70948489e-33
  9.47063137e-03 -2.69613955e-02 -3.69704179e-02 -4.03783692e-04
 -5.60595505e-02  9.59079340e-03  4.55538817e-02 -4.23687464e-03
  8.48633330e-03  1.04905395e-02 -9.12535749e-03 -4.25022840e-02
  1.35529200e-02 -2.72748992e-02  5.53259216e-02 -3.99045050e-02
 -1.31823644e-01 -3.61956633e-03 -9.06733051e-03  2.37436723e-02
 -5.24327811e-03  9.59220529e-03 -6.17103511e-03  6.71398118e-02
 -3.08007542e-02  8.26208815e-02  1.01652071e-02  3.58650051e-02
 -4.51428071e-02  2.60317642e-02  2.31580622e-02 -3.28169524e-04
 -4.90213782e-02 -3.40948403e-02 -2.68832427e-02  2.54689809e-02
  9.51861683e-03  8.20723623e-02  8.97571153e-04  6.09551966e-02
  1.32938102e-01  3.75510156e-02 -1.16644064e-02 -5.93156368e-02
 -7.07877800e-02  9.80437621e-02  1.26412520e-02  8.45655054e-02
 -5.20306267e-02  1.19555527e-02  4.32694256e-02 -2.78300829e-02
  4.07565273e-02 -1.61073338e-02 -1.92236863e-02  5.19757383e-02
  1.41833853e-02 -5.43466695e-02 -9.45691951e-03 -5.38217044e-03
  4.80819270e-02 -4.86524478e-02  1.39996712e-03  1.10266708e-01
  4.71186861e-02 -1.48332968e-01 -4.08741683e-02 -1.67208258e-04
 -2.76161451e-02 -1.70765608e-03 -3.04899551e-03 -8.09340477e-02
 -2.59431941e-03 -7.24564716e-02  1.05500057e-01 -1.90203395e-02
 -1.47747081e-02  6.84701875e-02  1.36512509e-02 -1.37002794e-02
  4.79436666e-02  9.78462324e-02 -4.36589979e-02  5.93386628e-02
  3.53413448e-02 -8.78892466e-02  5.25698289e-02  6.06197082e-02
 -7.78146237e-02  4.58618775e-02  3.31161171e-02  8.41738507e-02
 -1.10745244e-01  2.14820392e-02  7.58463591e-02 -5.62517819e-08
 -2.82255616e-02  3.95410992e-02 -1.05226552e-02 -9.46136098e-03
 -1.94612630e-02 -3.41572911e-02  5.66897020e-02 -8.17959681e-02
 -1.01491055e-02 -5.38876317e-02  7.46660633e-04  5.53447865e-02
 -8.30674618e-02 -1.33120669e-02 -2.40723789e-02 -4.02691737e-02
 -4.26238850e-02 -5.66190109e-04 -4.21854556e-02  2.06088666e-02
 -4.17430289e-02 -1.00019835e-01 -4.15199017e-03  3.78235467e-02
 -4.92984839e-02  2.71703880e-02  6.82129487e-02  1.06186181e-01
  3.05442177e-02 -4.06524120e-03  4.25133817e-02 -2.70558037e-02
 -2.34244112e-02  2.18847324e-03 -8.35340470e-02  4.92079258e-02
 -2.20851460e-03  1.23682246e-02  5.13221994e-02  1.21040776e-01
 -1.41508216e-02 -5.50523549e-02 -7.29597434e-02  4.55248356e-02
 -6.42211884e-02 -5.75373173e-02  6.30313084e-02  4.27768007e-02
  7.92949647e-03  2.40258165e-02 -1.37121990e-01 -7.68305734e-02
  7.44948303e-03 -1.13724684e-02 -9.79780927e-02 -1.83010777e-03
 -1.09725390e-02 -6.16362225e-03 -8.52379128e-02  8.60856697e-02
  5.91808446e-02 -1.66364275e-02 -1.27256578e-02  3.10216323e-02]"
"khoá công khai sao cho nó bắt đầu với cụm từ ""elv1s"", hoặc ""cook"". Những đại chỉ nào giúp người khác có thể biết được chủ sở hữu của khoá và thuận tiện cho việc nhận dạng hơn.Lưu ý: Càng nhiều ký tự tiền tố trong đại chỉ danh nghĩa, sẽ càng yêu cầu nhiều thời gian tính toán hơn.WARNINGBạn nên sử dụng CLI cho nhiệm vụ này. Ví dụ trên Python và TypeScript chỉ nhằm mục đích minh hoạ và có hiệu suất chậm hơn rất nhiều so với CLI.TSPythonC++CLIPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";

(async () => {
  let keypair = Keypair.generate();
  while (!keypair.publicKey.toBase58().startsWith(""elv1s"")) {
    keypair = Keypair.generate();
  }
})();
12345678let keypair = Keypair.generate();
while (!keypair.publicKey.toBase58().startsWith(""elv1s"")) {
  keypair = Keypair.generate();
}
1234from solders.keypair import Keypair

keypair = Keypair()
while(str(keypair.pubkey())[:5]!=""elv1s"") :
    keypair = Keypair()
    
print(""Created Keypair with Public Key: {}"".format(keypair.pubkey()))
1234567keypair = Keypair()
while(str(keypair.pubkey())[:5]!=""elv1s"") :
    keypair = Keypair()
123// clang++ vanity_keypair.cpp -o vanity_keypair -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  auto key_pair = Keypair::generate();

  while (key_pair.public_key.to_base58().substr(0, 5) != ""elv1s"") {
    key_pair = Keypair::generate();
  }

  std::cout << ""Created Keypair with Public Key: "" << key_pair.public_key.to_base58() << std::endl;
}
123456789101112131415auto key_pair = Keypair::generate();
while (key_pair.public_key.to_base58().substr(0, 5) != ""elv1s"") {
    key_pair = Keypair::generate();
}
1234solana-keygen grind --starts-with e1v1s:1
1solana-keygen grind --starts-with e1v1s:1
1# Làm thế nào ký và kiểm tra tinh nhắn bằng víMột chức năng cơ bản của một cặp khoá là ký một tin nhắn và cho phép kiểm tra chữ ký cùng tin nhắn đó. Wuas trình xác nhận một chữ ký cho phép người nhận chắc chắn rằng dữ liệu được ký là do chủ sở hữu thực sự của cặp khoá ký lên.Để làm được điều đó chúng ta cần sử dụng thư viện mật mã học TweetNaClopen in new window.TSPythonPress </> button to view full sourceimport { Keypair } from ""@solana/web3.js"";
import nacl from ""tweetnacl"";
import { decodeUTF8 } from ""tweetnacl-util"";

(async () => {
  const keypair = Keypair.fromSecretKey(
    Uint8Array.from([
      174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56,
      222, 53, 138, 189, 224, 216, 117, 173, 10, 149, 53, 45, 73, 251, 237, 246,
      15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240, 121,
      121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
    ])
  );

  const message = ""The quick brown fox jumps over the lazy dog"";
  const messageBytes = decodeUTF8(message);

  const signature = nacl.sign.detached(messageBytes, keypair.secretKey);
  const result = nacl.sign.detached.verify(
    messageBytes,
    signature,
    keypair.publicKey.toBytes()
  );

  console.log(result);
})();
1234567891011121314151617181920212223242526const message = ""The quick brown fox jumps over the lazy dog"";
const messageBytes = decodeUTF8(message);

const signature = nacl.sign.detached(messageBytes, keypair.secretKey);
const result = nacl.sign.detached.verify(
  messageBytes,
  signature,
  keypair.publicKey.toBytes()
);

console.log(result);
1234567891011from solders.keypair import Keypair

secret_key =  [
   ","[-1.08252943e-01 -4.21784744e-02 -7.48077482e-02 -7.81629831e-02
 -3.59413475e-02 -2.84210946e-02  5.37397005e-02 -8.33205547e-07
  5.89951277e-02 -2.51837843e-03  1.21681333e-01 -2.19510533e-02
  8.21531843e-03 -9.04253721e-02  5.59276305e-02 -4.79582548e-02
 -8.17519501e-02 -2.55939681e-02 -8.06185082e-02 -5.58659919e-02
  7.35763907e-02 -4.14735153e-02 -3.87245673e-03 -1.22640133e-02
 -5.36401349e-05  9.14467848e-04  2.25173198e-02  5.64900190e-02
  4.01475793e-03 -3.98436710e-02  2.07960978e-02  5.42569682e-02
  3.01543195e-02  4.89313994e-03 -2.83728796e-03  7.23553300e-02
 -2.18284279e-02 -2.26174705e-02  7.64611131e-03  1.02293361e-02
 -9.95079577e-02  1.08165788e-02 -3.36650200e-02 -4.92048822e-02
  1.42102167e-02 -2.32321415e-02 -1.22391745e-01  1.18937055e-02
  2.17011254e-02  1.13018742e-02 -1.01933517e-01  9.60775763e-02
 -5.52402511e-02 -2.20261272e-02 -7.20302910e-02 -3.51910256e-02
 -8.69951695e-02  5.06192334e-02  6.51694685e-02 -2.44367998e-02
 -1.92373656e-02  1.55280845e-03  3.90726924e-02 -1.09743895e-02
  1.43494289e-02 -2.56874710e-02 -3.14151421e-02 -2.60507967e-02
 -2.88968142e-02  2.42421012e-02 -5.31139039e-02 -3.26427817e-02
 -5.91931306e-02  9.10042971e-02 -8.63798410e-02 -4.60857823e-02
 -1.83439106e-02 -2.43030488e-02 -1.78658068e-02 -4.20472138e-02
  3.02410638e-03 -4.62504067e-02 -3.37938196e-03  9.21206921e-02
  1.97626669e-02  6.75653368e-02 -3.69274653e-02  5.75638656e-03
  2.90971133e-04 -3.19953123e-03  1.30415903e-02 -3.99540626e-02
  7.01123476e-02  6.36646971e-02  1.23700313e-03  4.04488295e-02
  3.66588996e-04  6.34602606e-02 -7.13362023e-02  6.70855269e-02
  3.24459933e-02  2.96575036e-02 -1.72239430e-02 -4.36057039e-02
 -8.33950285e-03 -5.99851320e-03  9.47343409e-02 -5.21941110e-02
  6.89532086e-02  6.80599362e-03 -4.09767702e-02  3.83175574e-02
  1.36334659e-03 -1.38569817e-01 -5.76185882e-02  3.57399322e-02
  2.86146980e-02  4.10857424e-03  3.29338238e-02  8.98363218e-02
  7.62217417e-02 -4.39545400e-02 -9.69226658e-02  4.52493913e-02
 -2.30133142e-02 -9.00485292e-02  1.19207583e-01  2.06107168e-32
  4.83679166e-03 -8.43428634e-03 -5.86735830e-02 -5.85516132e-02
  2.44161058e-02 -2.22118180e-02  4.10931669e-02 -3.85675044e-03
 -1.22303367e-01 -9.03522968e-02 -4.24295105e-02 -2.67429762e-02
 -5.74185625e-02 -5.82736805e-02 -3.87875624e-02  2.20319210e-03
  6.19801618e-02 -9.64469742e-04  1.68508291e-02  1.02135129e-02
  2.80264784e-02 -5.59729002e-02  5.62646352e-02  5.05070202e-02
  1.04802009e-02 -1.77938901e-02 -7.73402154e-02  2.16410086e-02
 -1.30864028e-02  4.47524749e-02  9.32241157e-02 -2.38263346e-02
 -7.25427270e-02 -3.42924148e-02 -7.47825876e-02 -1.98094472e-02
  6.28356589e-03 -3.97270285e-02 -6.38316795e-02 -6.05650805e-02
 -1.22020824e-03 -6.25957316e-03 -2.52559204e-02  5.78078674e-03
 -9.56578106e-02 -4.83637443e-03 -3.66427302e-02  8.08354095e-02
 -4.12651077e-02  6.58299103e-02 -5.09852618e-02 -1.08364848e-02
 -3.11808549e-02 -6.91435579e-03  6.37401566e-02 -4.69869934e-02
  2.12392211e-02 -1.78690907e-02  2.53010746e-02  2.24191369e-03
 -3.91968265e-02  5.26607521e-02  4.49860804e-02  5.35240099e-02
 -3.99263809e-03 -4.80823442e-02 -8.54713653e-05  3.94794345e-03
  1.90149806e-02 -8.30780864e-02 -7.08711371e-02 -4.72669303e-02
 -3.92600372e-02  6.10334165e-02 -8.02805200e-02 -2.98163313e-02
  6.02493063e-03 -4.37370911e-02 -2.19073556e-02  3.64988744e-02
  1.18941283e-02  9.63635277e-04  1.02406889e-02 -4.16415334e-02
  3.76113765e-02 -2.03523762e-03 -2.02822033e-02 -8.43153298e-02
  1.71663035e-02  2.16546729e-02 -2.23144609e-02  4.54890579e-02
  3.39650959e-02 -7.52376989e-02 -2.99689882e-02 -1.81646644e-32
  3.36108208e-02  2.86513027e-02 -1.07184730e-01  3.61119844e-02
 -2.80725043e-02  1.96548309e-02  1.88945364e-02 -1.19958371e-02
  1.47634652e-02 -5.28728701e-02  1.21496068e-02 -5.37347347e-02
  3.02738845e-02 -1.40121588e-02  5.16870283e-02  6.38943762e-02
  2.51372270e-02  8.32998827e-02 -6.06526667e-03 -2.04280354e-02
 -5.89388683e-02 -1.83893945e-02 -4.01841290e-02  6.10706955e-02
 -6.70917556e-02  2.36700792e-02  3.93423811e-02  7.45162293e-02
 -5.64987548e-02  1.10263722e-02  5.95758483e-02  3.15315165e-02
 -1.00325637e-01  1.34777099e-01  1.20697161e-02 -3.48712578e-02
  7.57713690e-02  2.38450859e-02 -2.48346874e-03  4.52586561e-02
  9.79516208e-02  2.46197414e-02  1.88588109e-02 -3.70932221e-02
 -5.35822585e-02 -4.43216637e-02  9.55897644e-02  8.41905177e-02
 -7.61873275e-02 -2.04571020e-02  1.46400258e-01 -3.22485082e-02
 -9.72477719e-03 -6.91982955e-02  1.78361796e-02  1.04921922e-01
 -1.99570041e-02 -2.95865946e-02 -7.31058642e-02 -7.73128122e-02
  1.00777643e-02 -5.88638112e-02  2.81133223e-03  2.95172073e-03
  8.49319175e-02 -1.55913964e-04  7.86211994e-03  1.14556350e-01
  4.17680927e-02 -4.24645804e-02 -2.98003596e-03 -1.52055663e-03
  7.47626275e-02 -5.16276546e-02  3.22424360e-02 -9.11532622e-03
 -6.89978525e-02  2.54376885e-02  2.76351385e-02 -3.10546663e-02
 -3.57613154e-02  3.94536369e-02  2.81875032e-06 -3.18859480e-02
  3.70983146e-02  8.30519944e-02 -7.50328973e-02  6.50521964e-02
 -6.44897763e-03 -9.24593396e-03 -3.57969827e-03  6.32100850e-02
  3.80044952e-02  1.06549658e-01  4.84021604e-02 -6.48887024e-08
 -1.83461830e-02 -4.09744196e-02 -3.27863209e-02  5.87083073e-03
  4.49892767e-02 -1.63551215e-02 -3.13246739e-03 -9.95034128e-02
  4.53291163e-02 -3.11282892e-02  1.14304470e-02  6.83459714e-02
 -1.02667874e-02 -5.26374066e-03 -1.15032811e-02  4.51564901e-02
  4.07104082e-02  4.99483049e-02 -3.06156464e-03 -1.56850219e-02
  1.58142135e-01 -7.52721727e-02  1.69858281e-02  4.34143171e-02
  2.68620234e-02  1.28258010e-02 -6.07857145e-02  9.60407183e-02
  1.89411398e-02 -3.14482152e-02  1.35667035e-02 -3.83090228e-02
  1.56295411e-02 -5.36653958e-02  3.40640582e-02 -3.31089497e-02
  2.42271908e-02 -5.41581996e-02 -4.37189192e-02  9.72557366e-02
  1.03208616e-01  2.01894362e-02 -3.84722613e-02 -1.64425932e-02
 -9.31459293e-03  9.46994964e-03  9.33465511e-02 -2.38543190e-02
  2.18967739e-02 -7.61438208e-03 -7.91000351e-02 -2.29715351e-02
  7.76985213e-02  6.43546879e-02 -9.41997208e-03  1.02217617e-02
  4.78515550e-02  3.92626561e-02  7.56956488e-02  7.38520101e-02
  6.10722322e-03  1.09588087e-01 -1.08879749e-02  1.24000991e-02]"
"  174, 47, 154, 16, 202, 193, 206, 113, 199, 190, 53, 133, 169, 175, 31, 56, 222, 53, 138, 189, 224, 216, 117,
      173, 10, 149, 53, 45, 73, 251, 237, 246, 15, 185, 186, 82, 177, 240, 148, 69, 241, 227, 167, 80, 141, 89, 240,
      121, 121, 35, 172, 247, 68, 251, 226, 218, 48, 63, 176, 109, 168, 89, 238, 135,
    ] 
keypair = Keypair.from_bytes(secret_key)
message = b""The quick brown fox jumps over the lazy dog""
signature = keypair.sign_message(message)
verify_sign = signature.verify(keypair.pubkey(), message)

print(verify_sign) # bool
12345678910111213message = b""The quick brown fox jumps over the lazy dog""
signature = keypair.sign_message(message)
verify_sign = signature.verify(keypair.pubkey(), message)

print(verify_sign) # bool
12345# Làm thế nào để kết nối víThư viện wallet-adapteropen in new window của Solana sẽ giúp cho việc quản lý và kết nối ví trở nên hết sức đơn giản.# ReactChạy đoạn mã bên dưới để cài đặt các thư viện cần thiết:yarn add @solana/wallet-adapter-react @solana/wallet-adapter-react-ui @solana/wallet-adapter-base @solana/wallet-adapter-wallets
1Thư viện React wallet-adapter cho phép lập trình viên duy trì kết nối cũng như truy cập vào các trạng thái của ví thông qua Hook và Context Provider như useWallet, WalletProvider, useConnection, và ConnectionProvider. Ứng dụng React phải được bọc bởi WalletProvider và ConnectionProvider.Ngoài ra, lập trình viên cũng có thể hiển thị kết nối đến người dùng bằng cách sử dụng useWalletModal để mở một cửa sổ thông báo. Lưu ý, bạn cần phải bọc toàn bộ ứng dụng bằng WalletModalProvider từ thư viện @solana/wallet-adapter-react-ui. Cửa sổ kết nối sẽ xử lý tất cả các bước kết nối nên chúng ta chỉ cần lắng nghe sự kiện kết nối ví thành công. useWallet sẽ trả về giá trị khác rỗng là wallet nếu kết nối thành công. Ngược lại, nó sẽ trả về rỗng nếu kết nối chưa thành công hoặc người dùng đã ngắt kết nối.TSPress </> button to view full sourceimport React, { useMemo, FC, PropsWithChildren } from ""react"";
import {
  ConnectionProvider,
  WalletProvider,
} from ""@solana/wallet-adapter-react"";
import { WalletModalProvider } from ""@solana/wallet-adapter-react-ui"";
import { WalletAdapterNetwork } from ""@solana/wallet-adapter-base"";
import {
  LedgerWalletAdapter,
  PhantomWalletAdapter,
  SlopeWalletAdapter,
  TorusWalletAdapter,
} from ""@solana/wallet-adapter-wallets"";
import { clusterApiUrl } from ""@solana/web3.js"";
import { useWallet } from ""@solana/wallet-adapter-react"";
import { useWalletModal } from ""@solana/wallet-adapter-react-ui"";
import { MouseEventHandler } from ""react"";

export const Web3Provider: FC<PropsWithChildren<{}>> = ({ children }) => {
  // Can be set to 'devnet', 'testnet', or 'mainnet-beta'
  const endpoint = useMemo(
    () => clusterApiUrl(WalletAdapterNetwork.Devnet),
    []
  );

  // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking --
  // Only the wallets you configure here will be compiled into your application
  const wallets = useMemo(
    () => [
      new PhantomWalletAdapter(),
      new SlopeWalletAdapter(),
      new TorusWalletAdapter(),
      new LedgerWalletAdapter(),
    ],
    []
  );

  return (
    <ConnectionProvider endpoint={endpoint}>
      <WalletModalProvider>
        <WalletProvider wallets={wallets}>{children}</WalletProvider>
   ","[-2.97337137e-02  6.51424378e-03  1.67848531e-03 -2.61170156e-02
 -2.37297360e-02 -9.06156749e-02  7.40271658e-02 -2.57854536e-03
 -1.48789166e-02 -3.06553058e-02  4.14216295e-02  2.85184458e-02
  1.03686996e-01 -5.96554466e-02 -1.63391214e-02 -4.59774211e-02
 -1.10988550e-01 -2.64647175e-02 -1.82363356e-03 -6.26043975e-02
 -3.14610936e-02  4.26935777e-03  4.55871113e-02  2.05055363e-02
 -7.61499582e-03  4.80689574e-03  7.91169878e-04  6.63914010e-02
 -1.01131033e-02 -8.76397192e-02  2.54383720e-02  6.32341728e-02
  4.94991988e-02  6.72230870e-02 -1.32315920e-03  7.10984319e-03
  1.68789160e-02  1.89997477e-03  2.17456818e-02  4.48580943e-02
 -2.70546433e-02 -6.50511980e-02 -3.43031175e-02  6.54531941e-02
 -7.32770562e-02  6.02149181e-02 -1.25183165e-01  6.96792677e-02
  3.51168849e-02 -2.60809045e-02 -3.44230309e-02  6.05025962e-02
 -4.88597415e-02  5.09786680e-02  1.52327428e-02 -6.17967509e-02
 -2.01841742e-02 -5.77830039e-02  2.71227546e-02 -5.84279411e-02
  1.83426682e-02  8.64278376e-02 -7.46957818e-03 -5.18711358e-02
 -1.12644804e-03  6.12645932e-02 -1.64506845e-02 -9.52240974e-02
  3.18045318e-02  1.94727089e-02  1.60313193e-02  2.55265757e-02
 -7.54474401e-02  2.55022757e-02 -4.30577472e-02 -5.97133040e-02
 -1.09058768e-02 -3.28198709e-02  2.12670919e-02 -1.08924201e-02
 -9.36315656e-02 -9.79138240e-02  2.72702575e-02  1.22829288e-01
  8.41349140e-02 -2.80014426e-02 -2.58728542e-04 -2.04002503e-02
 -4.84222062e-02  4.25993651e-02  1.33691058e-02 -3.77492495e-02
  4.61492576e-02  2.82618832e-02  2.62500811e-02  5.10697737e-02
  6.33297712e-02 -5.48345409e-02 -8.96109641e-02  7.75283426e-02
 -2.60416120e-02 -2.08549388e-02  9.37830191e-03 -7.50947669e-02
  7.59485140e-02  2.06212550e-02  1.14494497e-02 -8.87234602e-03
  6.61464185e-02 -3.77703756e-02 -1.24496187e-03 -1.34167951e-02
  4.88807335e-02  7.65631273e-02  5.34425043e-02  8.39913860e-02
 -8.91661495e-02  1.11999385e-01 -2.27870960e-02  3.90099664e-03
  6.18008375e-02  4.31945547e-02 -8.80569443e-02  1.30025428e-02
 -5.71150929e-02 -2.60494687e-02 -5.70248328e-02  1.31646448e-34
  2.24352051e-02  4.23397161e-02 -5.01336791e-02 -2.57164147e-02
 -2.60290522e-02  1.50732440e-03 -4.63500917e-02  1.94321107e-02
 -8.15482810e-02  1.27617195e-02 -8.65736231e-02 -7.47187110e-03
  5.38630877e-03  4.39756596e-03  3.26536745e-02 -2.88226213e-02
  3.34927849e-02  3.66504304e-02  4.99637006e-03  1.70564130e-02
  4.32367586e-02  4.11542691e-02  3.37502919e-02 -7.46141821e-02
 -1.76119932e-03  3.73290516e-02 -8.17807019e-02 -2.88773011e-02
  1.29037602e-02  4.00812477e-02 -9.87108946e-02 -3.11303921e-02
 -1.91562083e-02  1.73026957e-02 -2.76392745e-03 -1.08731762e-01
  5.70151508e-02 -6.84419796e-02 -8.15802068e-02 -2.50484440e-02
 -1.54666556e-02 -4.86743497e-03 -1.60670560e-02 -5.56970090e-02
 -3.61279137e-02  2.21105590e-02  1.52698187e-02  6.53989315e-02
  2.55101901e-02  6.46376684e-02  1.22731589e-02  1.21159554e-02
  1.61608811e-02 -2.50185654e-02 -9.28511322e-02 -2.71157175e-02
  9.94844958e-02  2.51307786e-02 -6.13234052e-03  5.49409948e-02
  8.61627832e-02  1.67859625e-02  9.69340429e-02  1.63849990e-03
  8.49727318e-02 -4.69995253e-02 -9.52753332e-03 -6.87468844e-03
 -5.61767332e-02  7.28618354e-02 -2.16605403e-02  3.94078624e-03
  2.51638014e-02 -1.09350190e-01 -8.05421397e-02 -5.98324127e-02
  3.44233843e-03  1.50473062e-02 -1.70538183e-02 -6.63385466e-02
  4.59621809e-02  1.11262323e-02 -3.17628905e-02 -3.04129738e-02
 -2.85700317e-02  2.33396962e-02  2.83919238e-02 -4.83201370e-02
 -5.74229248e-02 -4.25670072e-02 -8.55028033e-02 -6.82813376e-02
  3.30851562e-02 -2.03453675e-02 -4.15257849e-02 -1.21916938e-33
 -1.09373021e-03  4.98528033e-03  3.19903977e-02  7.16872439e-02
 -3.76418382e-02  2.60382462e-02  8.13305676e-02 -7.72648957e-03
 -2.48838123e-02  4.12516259e-02  2.74772514e-02  3.79915303e-03
  6.72908202e-02 -6.95192143e-02  1.30328864e-01 -5.72484322e-02
  6.00834601e-02  1.11605681e-01 -3.34690847e-02 -6.63710386e-02
 -8.53708461e-02  2.32710227e-04 -1.03261806e-01  7.23693892e-02
 -6.31309487e-03  6.20011538e-02  3.30184177e-02 -3.71811800e-02
 -3.81182916e-02 -4.72202860e-02 -2.57246085e-02  8.73719752e-02
 -2.13463418e-02 -3.21665592e-02  1.57161560e-02 -5.04018664e-02
  3.74572873e-02  7.57544907e-03 -3.71299721e-02 -6.04832591e-03
  1.04362331e-01  1.70401465e-02  4.63488847e-02  4.42501642e-02
  1.84205268e-02  4.34743911e-02  3.56223397e-02  5.17624840e-02
 -4.06391732e-02  1.27021506e-01  1.24219447e-01 -1.61029177e-03
  5.71896993e-02  1.75853316e-02 -8.72624144e-02  6.82011619e-02
 -7.57152066e-02  5.71923926e-02  5.77355511e-02 -2.99096629e-02
 -3.92281264e-02 -3.42538394e-02 -5.08602597e-02  5.16851917e-02
  6.11927994e-02 -5.68111390e-02 -7.29795843e-02 -3.93280722e-02
  1.22073898e-02 -6.91976845e-02  1.96317211e-02  2.43247468e-02
 -2.40341276e-02 -1.08513590e-02  7.33679011e-02  7.81745911e-02
 -3.40391733e-02 -2.02603918e-02 -3.87633033e-02 -1.29135046e-02
 -1.63999647e-02 -2.55357921e-02  1.16626732e-02  4.96443883e-02
 -4.10425812e-02 -2.54409704e-02 -3.60314175e-02  9.03701186e-02
 -4.29889234e-03 -4.36137021e-02  2.08535809e-02  1.18731603e-01
  4.69128191e-02  4.76887859e-02  7.77725428e-02 -5.35406457e-08
 -1.90186650e-02  2.30339938e-03 -6.16026223e-02  4.79339771e-02
  7.63851404e-02  2.47137621e-02  1.07663581e-02 -4.28832434e-02
  8.35855678e-03 -4.77586314e-02  5.46045490e-02 -4.56682369e-02
 -6.25062361e-02 -2.50084866e-02  6.33136416e-03  1.64016224e-02
 -7.29086325e-02 -6.79154620e-02 -1.43965026e-02 -2.25840453e-02
  4.39385623e-02 -5.95053881e-02 -4.90477635e-03 -6.29598042e-03
 -1.23252086e-01 -4.09692600e-02  3.19943689e-02  9.87277329e-02
 -3.03162616e-02 -1.88686661e-02 -3.76720028e-03 -5.48757613e-02
  1.32830841e-02 -6.42448068e-02 -3.66283581e-02  6.69514239e-02
  2.17798501e-02  2.49306727e-02  7.96287283e-02  1.00604922e-01
 -4.06673849e-02 -5.74592454e-03 -1.18205391e-01 -3.40068564e-02
 -6.02031052e-02 -2.30013318e-02  1.58139728e-02 -1.88100412e-02
  3.87150124e-02  4.31773961e-02 -2.51467321e-02 -2.41466761e-02
  3.79133262e-02 -1.97082385e-02 -3.45004983e-02  2.22988371e-02
 -2.34052632e-02 -3.03190574e-02 -3.47113167e-03  6.01011440e-02
  1.06084660e-01  5.72629049e-02 -2.61139907e-02 -2.13897433e-02]"
"  </WalletModalProvider>
    </ConnectionProvider>
  );
};

/**
 * Make sure to wrap the App with
 * ConnectionProvider, WalletProvider, and WalletModalProvider.
 *
 * If you have a lot of Providers already, you can combine them
 * into a single wrapper (i.e. Web3Provider) instead.
 */
export const App = () => {
  return (
    <Web3Provider>
      <AppChild />
    </Web3Provider>
  );
};

const AppChild = () => {
  const { wallet } = useWallet();
  const { setVisible } = useWalletModal();

  // Display the connection modal
  const onRequestConnectWallet = () => {
    setVisible(true);
  };

  // Prompt user to connect wallet
  if (!wallet) {
    return <button onClick={onRequestConnectWallet}>Connect Wallet</button>;
  }

  return (
    <main>
      <p>Wallet successfully connected!</p>
      <p>{wallet.publicKey.toString()}</p>
    </main>
  );
};
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182const { wallet } = useWallet();
const { setVisible } = useWalletModal();

const onRequestConnectWallet = () => {
  setVisible(true);
};

// Prompt the user to connect their wallet
if (!wallet) {
  return <button onClick={onRequestConnectWallet}>Connect Wallet</button>;
}

// Displays the connected wallet address
return (
  <main>
    <p>Wallet successfully connected!</p>
    <p>{wallet.publicKey.toBase58()}</p>
  </main>
);
12345678910111213141516171819# VueChạy đoạn mã sau đây để cài các thư viện cần thiết:npm install solana-wallets-vue @solana/wallet-adapter-wallets
1Plugin Solana Wallets Vueopen in new window cho phép chúng ta khởi tạo một vùng nhớ cho ví và tạo một thuộc tính $wallet mới với phạm vi toàn cục. Thuộc tính này có thể được truy cập ở bất kỳ một thành phần nào. Tất cả các thuộc tính và phương thức bạn có thể lấy từ useWallet() đều được trình bày ở đâyopen in new window. Chúng ta cũng cần cài và hiển thị thành phần WalletMultiButton để cho phép người dùng có thể chọn ví cũng như kết nối ví.VuePress </> button to view full source<script setup>
import { WalletMultiButton } from ""solana-wallets-vue"";
import {
  LedgerWalletAdapter,
  PhantomWalletAdapter,
  SlopeWalletAdapter,
  TorusWalletAdapter,
} from ""@solana/wallet-adapter-wallets"";
import { initWallet, useWallet } from ""solana-wallets-vue"";

const wallets = {
  wallets: [
    new PhantomWalletAdapter(),
    new SlopeWalletAdapter(),
    new TorusWalletAdapter(),
    new LedgerWalletAdapter(),
  ],
};
initWallet(wallets);

const { connected, wallet } = useWallet();
</script>

<template>
  <div>
    <p v-if=""connected"">
      Wallet with public key {{ wallet.publicKey }} successfully connected!
    </p>
    <div v-else>
      <wallet-multi-button></wallet-multi-button>
    </div>
  </div>
</template>
123456789101112131415161718192021222324252627282930313233<script setup>
import { WalletMultiButton } from ""solana-wallets-vue"";
</script>

<template>
  <wallet-multi-button></wallet-multi-button>
</template>
1234567# SvelteChạy đoạn mã sau đây để cài các thư viện cần thiết:npm install @svelte-on-solana/wallet-adapter-core @svelte-on-solana/wallet-adapter-ui @solana/wallet-adapter-base @solana/wallet-adapter-wallets @solana/web3.js
1Gói Svelte Wallet Adapteropen in new window cho phép thêm một Svelte Store ($walletStore) có khả năng truy xuất từ các tập tin JS, TS or/and Svelte bên trong dự án được tạo từ Svelte Template hoặc SvelteKit. Sử dụng mã nguồn tham khảo tại đâyopen in new window bạn có thể sử dụng bộ tiếp hợp cho SSR và cả SPA. Gói giao diện người dùng có","[-4.62371744e-02  5.97306155e-03 -6.36381209e-02  1.18856048e-02
 -1.32270101e-02  2.83808913e-02  1.26088168e-02  7.52751231e-02
 -1.56550389e-02 -3.45449634e-02 -1.53483059e-02 -6.16113618e-02
 -2.06942055e-02  3.54643464e-02  7.87024572e-02  3.84486131e-02
 -4.79016192e-02 -8.20092484e-02  2.26100422e-02  5.70914187e-02
 -3.55748739e-03 -1.11560211e-01  6.16478287e-02 -7.22051263e-02
 -1.91665161e-02 -3.17960046e-02  5.02046645e-02 -8.79149958e-02
  1.39605748e-02  7.38638043e-02  7.61774778e-02  1.94492899e-02
 -4.24048752e-02 -8.98157582e-02 -5.54378442e-02  2.54218373e-02
  3.97891328e-02  4.59380299e-02 -8.87551457e-02 -3.09149697e-02
  1.72120705e-02  7.28427321e-02 -3.56881097e-02 -1.34567991e-02
  3.61971371e-02 -7.87819177e-02 -3.41020934e-02  7.04382062e-02
  2.68730186e-02  3.93719636e-02 -3.60632082e-03 -1.48014771e-03
 -3.23161855e-02 -4.63196523e-02 -4.87964675e-02  1.56680457e-02
 -1.60244387e-02  5.71464486e-02  6.64086565e-02 -1.33429142e-02
  6.71614259e-02 -3.76075618e-02 -1.64318774e-02  1.83390602e-02
 -1.61168315e-02  7.31681660e-02  6.20137304e-02  2.11469587e-02
 -1.29562030e-02 -8.07004888e-03 -7.96302333e-02  5.27999625e-02
 -7.38465786e-02 -4.09323275e-02 -3.89426090e-02 -6.35529310e-02
 -1.61428135e-02  2.01458354e-02 -5.00677116e-02 -1.90935284e-03
  6.97262660e-02  1.01248398e-02  4.45225276e-03  5.52784605e-03
  4.73458432e-02  4.81403135e-02 -2.36056987e-02 -6.27257302e-02
 -6.06343634e-02 -5.99010661e-02 -1.18290251e-02  7.58642182e-02
 -3.63864377e-02  6.57088496e-03  3.77534106e-02  4.78483774e-02
 -6.09406754e-02 -4.32834737e-02 -7.02363849e-02  4.99417037e-02
  1.07476432e-02 -5.32074794e-02 -3.25886230e-03  2.72508319e-02
  7.44193792e-02 -6.75948560e-02  2.95858327e-02  7.18360068e-03
 -1.26107568e-02  8.50802958e-02 -7.72959273e-03  4.63937223e-02
  5.69128022e-02 -2.21009664e-02 -5.80072403e-02  4.55069803e-02
  3.32284607e-02  2.98392233e-02  9.09308568e-02 -1.20150577e-03
  2.16249414e-02 -1.60799623e-02 -2.03219596e-02 -9.57275033e-02
  5.74636497e-02 -1.66486986e-02  3.11426111e-02  7.01497927e-33
  7.68190389e-03 -3.86360139e-02 -4.25527804e-02  7.40115121e-02
  3.16503160e-02  4.74496111e-02  1.39672205e-01  1.95270237e-02
 -6.93100393e-02 -4.64656465e-02  2.09183227e-02 -3.58873270e-02
 -1.38083780e-02  1.89417582e-02 -4.94064949e-02 -4.76844758e-02
  1.89708956e-02 -1.76899843e-02  1.02909498e-01  4.32006493e-02
 -5.32114021e-02 -5.22136986e-02  7.34705031e-02  5.61934970e-02
  1.04285866e-01 -3.45053077e-02  7.98400771e-03  7.89938718e-02
 -2.17913259e-02 -3.77730578e-02  1.06086902e-01 -2.60160957e-02
 -4.81296591e-02  4.17761542e-02  1.02779642e-02 -5.99210188e-02
 -8.19312781e-03  7.84878677e-04 -6.95225000e-02  3.44913192e-02
 -1.40815917e-02 -1.33712232e-01 -8.56399611e-02  2.72650807e-03
 -3.13394442e-02 -1.56897940e-02  2.56618503e-02 -6.98466077e-02
 -5.92434732e-03 -4.05130461e-02 -1.05820112e-01 -1.68321822e-02
 -7.55499825e-02 -1.08564489e-01 -2.85011586e-02 -3.87478583e-02
 -8.14285427e-02  3.83163355e-02 -7.47341961e-02 -1.15357630e-01
 -7.49220327e-02 -3.85226496e-02 -1.72233605e-03 -2.16978677e-02
  1.61804240e-02  4.78513204e-02 -7.55390227e-02 -1.76730677e-02
  6.19647885e-03 -3.80110815e-02 -2.70123705e-02  3.66180204e-02
  1.03366449e-02  1.43125197e-02 -4.29243036e-02  1.22459136e-01
 -4.89229895e-02  9.66096669e-02  3.17544304e-02  4.79854010e-02
  1.80001706e-02  4.30115387e-02  4.25402224e-02  8.87985528e-02
 -5.13914367e-03 -3.86057682e-02  1.67109320e-04 -5.79430647e-02
  1.07854428e-02  7.20476806e-02  1.03094419e-02  2.78277993e-02
  6.94485009e-02 -4.08060737e-02 -2.86242063e-03 -7.90404091e-33
  3.32568958e-02 -1.40705071e-02  4.71625440e-02 -6.39100224e-02
  2.37910952e-02  5.98300397e-02  5.34376241e-02  2.67387666e-02
 -2.52222829e-02 -6.28348142e-02  7.56439269e-02  6.79273680e-02
  7.62937963e-02 -4.68897782e-02 -5.16210422e-02  1.20592251e-01
  1.08870808e-02 -3.95864546e-02  2.86921654e-02 -3.41394432e-02
 -3.62214562e-03  1.82605367e-02  3.42165343e-02 -4.19641808e-02
 -4.79057580e-02 -1.22239990e-02 -7.77063984e-03 -2.01516896e-02
  4.75103594e-03 -3.09492666e-02  6.26752153e-02  5.84999705e-03
  3.55375633e-02  2.59656515e-02 -1.36818955e-04  3.27287391e-02
  1.90337393e-02  7.27758184e-02  5.97206736e-03 -8.43263976e-03
  1.93827562e-02 -9.02967080e-02 -1.04768863e-02 -4.96358462e-02
  2.29396056e-02 -9.09966826e-02  1.79497700e-03 -8.03054571e-02
 -7.04227686e-02  4.31791618e-02  1.54486205e-03 -2.88611930e-02
 -2.54130345e-02  4.99746855e-03 -2.16678204e-03  9.41878557e-02
  7.02486485e-02 -3.15927155e-02  7.10552037e-02  2.35094987e-02
  4.91758958e-02 -1.46296218e-01  7.49519169e-02  2.46055927e-02
  9.34761949e-03  3.37773049e-03 -4.12599519e-02  4.94683385e-02
  9.24031958e-02  1.19322024e-01 -8.74268711e-02  5.08012138e-02
  7.33102188e-02 -6.11192873e-03  8.32745507e-02  1.68597046e-02
  4.83123399e-03 -9.82895046e-02  5.75187840e-02  3.56057705e-03
  4.21746783e-02 -7.64073897e-03 -6.58246980e-04 -1.07701071e-01
 -7.44247204e-03 -6.91348836e-02  7.53476610e-03  2.25433093e-02
  6.60199448e-02 -3.24951857e-02 -7.45568797e-02 -4.39437777e-02
 -1.90794673e-02 -4.98293079e-02  6.19524866e-02 -5.24792192e-08
  7.82366842e-03 -1.96549930e-02 -6.51091039e-02 -7.25098029e-02
 -2.29654517e-02 -4.18990813e-02 -3.48658897e-02 -1.46397680e-01
 -1.89402644e-02 -9.71802883e-03 -1.22444302e-01  5.39802797e-02
 -5.16292416e-02  1.71194132e-02  3.16972076e-03 -4.69685793e-02
 -3.89504654e-04 -9.41757392e-03  9.94228013e-03  1.35470619e-02
  7.36423880e-02 -2.27681343e-02  6.09948626e-03  1.07607901e-01
  9.49680805e-02 -5.14572486e-02 -2.69268304e-02 -3.39877866e-02
  4.85919416e-02  2.35496275e-02 -5.98520860e-02 -1.96279585e-02
  2.59039905e-02 -1.98243279e-02 -4.11562026e-02 -1.43003175e-02
 -3.72203961e-02 -1.97689813e-02  1.90110337e-02  2.50180885e-02
  1.17457658e-01 -4.48542386e-02 -4.35867161e-02  2.18729358e-02
 -1.16450470e-02  1.26161613e-02 -1.73022263e-02  6.90886453e-02
  1.40184266e-02  6.06298260e-02  1.75453927e-02 -1.29470117e-02
  6.71964064e-02 -7.93913603e-02 -1.37703596e-02 -3.29542160e-02
 -9.09220520e-03 -1.01986453e-02  1.68249737e-02 -1.09286420e-02
 -1.94383133e-02  2.33286675e-02  4.17229347e-02 -4.13527191e-02]"
"chứa một thành phần là <WalletMultiButton />, nó cho phép người dùng có thể chọn và tạo kết nối đến ví.SveltePress </> button to view full source<script>
  import { walletStore } from ""@svelte-on-solana/wallet-adapter-core"";
  import {
    WalletProvider,
    WalletMultiButton,
    ConnectionProvider,
  } from ""@svelte-on-solana/wallet-adapter-ui"";
  import { clusterApiUrl } from ""@solana/web3.js"";
  import {
    PhantomWalletAdapter,
    SolflareWalletAdapter,
    TorusWalletAdapter,
    LedgerWalletAdapter,
  } from ""@solana/wallet-adapter-wallets"";

  const localStorageKey = ""walletAdapter"";
  const network = clusterApiUrl(""devnet""); // localhost or mainnet

  let wallets = [
    new PhantomWalletAdapter(),
    new SolflareWalletAdapter(),
    new TorusWalletAdapter(),
    new LedgerWalletAdapter(),
  ];
</script>

<WalletProvider {localStorageKey} {wallets} autoConnect />
<ConnectionProvider {network} />

{#if $walletStore?.connected} Wallet with public key {$walletStore.publicKey}
successfully connected! {:else}
<WalletMultiButton />
{/if}
123456789101112131415161718192021222324252627282930313233<script>
  import { walletStore } from ""@svelte-on-solana/wallet-adapter-core"";
  import { WalletMultiButton } from ""@svelte-on-solana/wallet-adapter-ui"";
</script>

{#if $walletStore?.connected} Wallet with public key {$walletStore.publicKey}
successfully connected! {:else}
<WalletMultiButton />
{/if}
123456789 # Accounts# Làm thế nào để tạo một System AccountTạo một System Account nghĩa là tạo một Account với chủ sở hữu là System Programopen in new window. Khi thực thi, Solana sẽ được gán vào một Account, truy cân để ghi dữ liệu, hoặc chuyển lamports. Khi khởi tạo Account, chúng ta phải phân phát một vùng nhớ với đọ dài cố định trước tiên (space) và số lamports đủ để thuê vùng nhớ đó. Phí thuêopen in new window là chi phí trả cho việc giữ vùng nhớ của Account tồn tại trên Solana.TSRustPress </> button to view full sourceimport {
  SystemProgram,
  Keypair,
  Transaction,
  sendAndConfirmTransaction,
  Connection,
  clusterApiUrl,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const fromPubkey = Keypair.generate();

  // Airdrop SOL for transferring lamports to the created account
  const airdropSignature = await connection.requestAirdrop(
    fromPubkey.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // amount of space to reserve for the account
  const space = 0;

  // Seed the created account with lamports for rent exemption
  const rentExemptionAmount =
    await connection.getMinimumBalanceForRentExemption(space);

  const newAccountPubkey = Keypair.generate();
  const createAccountParams = {
    fromPubkey: fromPubkey.publicKey,
    newAccountPubkey: newAccountPubkey.publicKey,
    lamports: rentExemptionAmount,
    space,
    programId: SystemProgram.programId,
  };

  const createAccountTransaction = new Transaction().add(
    SystemProgram.createAccount(createAccountParams)
  );

  await sendAndConfirmTransaction(connection, createAccountTransaction, [
    fromPubkey,
    newAccountPubkey,
  ]);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546const createAccountParams = {
  fromPubkey: fromPubkey.publicKey,
  newAccountPubkey: newAccountPubkey.publicKey,
  lamports: rentExemptionAmount,
  space,
  programId: SystemProgram.programId,
};

const createAccountTransaction = new Transaction().add(
  SystemProgram.createAccount(createAccountParams)
);

await sendAndConfirmTransaction(connection, createAccountTransaction, [
  fromPubkey,
  newAccountPubkey,
]);
12345678910111213141516use solana_client::rpc_client::RpcClient;
use solana_program::system_instruction;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::native_token::LAMPORTS_PER_SOL;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let from_keypair = Keypair::new();
    let from_pubkey = Signer::pubkey(&from_keypair);

    match connection.request_airdrop(&from_pubkey, LAMPORTS_PER_SOL) {
        Ok(sig) => loop {
   ","[-3.99480797e-02 -3.33454534e-02 -1.18426375e-01 -3.41322087e-02
  8.39660130e-03 -3.76669690e-02 -1.12371482e-02  8.80868931e-04
  3.90877724e-02 -3.22771929e-02  8.76962394e-02 -4.56773825e-02
 -3.01665924e-02 -2.11688094e-02  4.13261838e-02  3.49270250e-03
 -9.02218148e-02 -7.04777241e-02  2.36230213e-02  5.60703874e-03
 -2.10921820e-02 -7.52378404e-02  3.01350164e-03 -6.05187118e-02
 -2.25427076e-02 -2.37302631e-02 -1.74147617e-02 -6.09229803e-02
 -3.15505452e-02  6.18377235e-03  5.21085113e-02  4.42264378e-02
  2.38391906e-02 -1.71922799e-02  2.57667266e-02  6.45864829e-02
  3.53894234e-02  3.21190767e-02 -4.24126647e-02 -2.12959200e-03
  1.43544767e-02  5.41751422e-02 -4.12354395e-02 -6.39781505e-02
  6.58948533e-03 -8.29698145e-02 -9.04780105e-02 -2.28812001e-04
 -3.60006392e-02 -4.67689475e-03 -9.50771496e-02  1.82969291e-02
 -5.37543520e-02  2.29456201e-02 -5.84685057e-02  5.15062213e-02
  1.88659020e-02  9.26915407e-02  8.54921564e-02 -5.44271097e-02
  6.76443279e-02 -6.40325993e-03  7.28138313e-02 -4.35815677e-02
 -2.81045809e-02 -6.04986288e-02  1.00100215e-03 -1.35944188e-02
 -2.00852230e-02 -2.22690478e-02 -1.54242117e-03 -1.43198874e-02
 -3.85500155e-02 -7.47477077e-03 -2.98499502e-02 -3.01486049e-02
  2.98898835e-02  3.49211544e-02  2.24690046e-02  4.03777286e-02
 -1.54109364e-02 -3.87783013e-02  1.11018289e-02  5.25710210e-02
  3.63151263e-03  7.62677565e-02 -1.02780648e-01 -1.08589157e-01
  4.29007933e-02 -9.92281511e-02 -2.24460904e-02  2.52557937e-02
 -7.33703896e-02 -2.08423398e-02  1.20049836e-02 -1.32920463e-02
 -2.84575159e-03  6.67142197e-02 -7.30216503e-02  1.01950832e-01
  7.85771981e-02 -3.22681367e-02 -3.36248241e-02 -1.78484060e-02
  1.18879639e-02 -9.68523845e-02  8.59059617e-02 -3.76936384e-02
 -5.28734410e-03  9.27768648e-02 -5.72906109e-03  6.86546415e-02
  9.59742628e-03 -5.23059182e-02 -8.58425722e-02  9.38566327e-02
  7.74957761e-02  2.85401307e-02  4.30774018e-02  1.17554426e-01
  5.55406511e-02  2.66276598e-02 -2.21351404e-02 -6.84270263e-02
  1.20458202e-02  9.12134885e-04  1.87446158e-02  1.09202015e-32
  1.01100635e-02 -6.71064928e-02  6.22305181e-03 -2.28095576e-02
  2.46215090e-02 -9.26496759e-02  3.66410837e-02 -1.83467474e-02
 -5.46283200e-02 -6.62825331e-02 -1.97873916e-02  2.16449355e-03
 -1.61614846e-02 -6.16909005e-02 -6.47427961e-02  1.53497988e-02
  2.05818601e-02 -3.49780880e-02  3.61176804e-02 -5.58029115e-02
  1.83550559e-03 -1.12671092e-01  5.00227064e-02 -2.72074770e-02
  5.85503541e-02  7.30783399e-03 -3.48174217e-04  1.66589692e-02
  3.46733481e-02  2.81181163e-03  8.91929418e-02 -1.41324829e-02
 -4.99046221e-02  1.28403604e-02 -7.17716245e-03  1.75845902e-02
  1.97128225e-02  6.47157803e-03 -1.40228853e-01 -8.21231026e-03
  3.04565784e-02 -5.91331795e-02 -2.11854167e-02 -1.33397179e-02
  3.46318819e-02  2.59374715e-02  3.25955637e-02  5.20402342e-02
  5.54461218e-02  4.27300856e-02 -1.67769864e-01 -6.30720332e-02
 -8.04194510e-02  6.02200255e-03  2.72092018e-02 -1.54044142e-03
  5.15764346e-03  7.69617781e-03 -4.75581065e-02 -5.62038012e-02
 -3.32480185e-02 -6.84293434e-02  2.80803647e-02 -3.77932712e-02
  1.01607880e-02  2.10939124e-02 -1.10919774e-02  3.40339653e-02
  1.08634150e-02 -7.05111399e-02 -1.19174588e-02 -1.23107396e-02
  1.86768789e-02  1.33304700e-01 -4.14115898e-02 -1.22524900e-02
 -4.02625836e-03  9.74917859e-02 -8.00254047e-02 -1.33616815e-03
  3.67947593e-02 -4.16904539e-02 -1.91742703e-02  7.99366534e-02
  1.75039563e-02  1.75187122e-02  4.06943224e-02 -3.68404165e-02
  3.16630048e-03 -6.81902375e-03  4.96739633e-02  5.07442802e-02
  5.57364449e-02 -1.07505366e-01 -9.15137753e-02 -1.04221276e-32
 -1.88414752e-02 -2.63415799e-02 -6.71227127e-02 -4.33635041e-02
  3.13917138e-02 -3.65740550e-03  7.01752771e-03  4.84031774e-02
 -2.58999560e-02 -4.93386835e-02 -2.34841835e-02 -1.95059739e-02
  5.47512285e-02 -1.09784808e-02  1.02782138e-02  1.73595786e-01
  9.10524726e-02 -2.58543063e-02  4.43111844e-02 -2.47630626e-02
 -1.73310358e-02  7.16089159e-02 -5.64751774e-03  3.27852778e-02
 -5.58698662e-02 -2.20785141e-02  4.72709574e-02  4.82068025e-02
 -8.67437944e-02 -2.21530516e-02  9.51399058e-02 -4.25270721e-02
 -9.34855416e-02  1.07695155e-01 -1.37703130e-02 -2.60324478e-02
 -2.35115159e-02  3.06031629e-02 -5.64702004e-02  3.15660760e-02
  1.86061859e-02 -3.90836112e-02 -2.15631071e-02  7.48708285e-03
 -2.23522875e-02 -8.39353353e-02  5.86350672e-02 -4.70034070e-02
 -6.18700981e-02  5.38671203e-03  5.09443022e-02 -9.54470038e-02
  3.91986482e-02 -2.51241680e-03 -9.37425438e-03  1.49102002e-01
  7.49676079e-02  4.55689058e-02 -1.09394472e-02 -4.74692099e-02
  8.68098512e-02 -1.36937499e-01 -4.93118092e-02  5.66995926e-02
  7.47970790e-02 -2.25605164e-02 -1.84251871e-02  4.91748713e-02
  2.92227380e-02 -2.79851817e-03 -4.32190113e-02  5.56476898e-02
  8.56208727e-02  4.37938832e-02  6.05564564e-03  5.30702621e-02
  2.68657133e-02  9.68049839e-03  7.85832480e-02 -4.78144474e-02
 -2.15705968e-02 -1.44243669e-02  6.18609646e-03 -5.24427481e-02
  5.13398834e-02 -2.00008433e-02  6.86749630e-03  4.79939468e-02
 -3.10071595e-02  9.27178655e-03 -6.36665896e-02  2.80085374e-02
 -3.76353972e-02  7.16417879e-02  2.37081721e-02 -5.42192673e-08
  2.00706292e-02 -3.54180448e-02 -1.38970971e-01  2.14370829e-03
  6.17192453e-03  2.48023793e-02  3.17064039e-02 -5.17194197e-02
 -3.93377766e-02  2.77177598e-02 -6.88814595e-02  8.83614942e-02
 -2.04896764e-03  2.18606330e-02  1.80574078e-02 -3.69850211e-02
  3.90708335e-02  6.13218956e-02 -1.51515659e-02 -5.10820448e-02
  8.76705796e-02 -2.44529173e-02  1.96643826e-02  2.39512157e-02
  1.00094736e-01  3.28660049e-02 -3.98776866e-02  2.23449804e-02
 -1.40076717e-02 -4.62693088e-02 -6.24500476e-02 -2.45193508e-03
  6.02390282e-02 -4.66850400e-02 -5.82139865e-02  5.80297261e-02
 -2.88071372e-02 -1.27670206e-02  1.43795796e-02  1.00455642e-01
  5.32801747e-02 -2.15157438e-02 -3.24431099e-02 -2.22452786e-02
 -2.37508845e-02  1.40073206e-02  7.42767612e-03  3.88472043e-02
  8.82313475e-02  3.71598750e-02 -3.36545520e-02 -4.92684431e-02
  9.39958468e-02  1.25727225e-02  5.74697647e-03 -5.21373898e-02
 -1.94232874e-02  6.87033385e-02  2.14230381e-02  4.17537764e-02
  1.91518608e-02  8.67297277e-02 -8.88977479e-03  1.50137562e-02]"
"        if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error requesting airdrop""),
    };

    let space = 0;
    let rent_exemption_amount = connection
        .get_minimum_balance_for_rent_exemption(space)
        .unwrap();

    let new_account_keypair = Keypair::new();
    let new_account_pubkey = Signer::pubkey(&new_account_keypair);

    let create_account_ix = system_instruction::create_account(
        &from_pubkey,
        &new_account_pubkey,
        rent_exemption_amount,
        space as u64,
        &from_pubkey,
    );

    let (recent_blockhash, _) = connection.get_recent_blockhash().unwrap();

    let create_account_tx = solana_sdk::transaction::Transaction::new_signed_with_payer(
        &[create_account_ix],
        Some(&from_pubkey),
        &[&from_keypair, &new_account_keypair],
        recent_blockhash,
    );

    match connection.send_and_confirm_transaction(&create_account_tx) {
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error creating system account""),
    };
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162let create_account_ix = system_instruction::create_account(
    &from_pubkey,
    &new_account_pubkey,
    rent_exemption_amount,
    space as u64,
    &from_pubkey,
);

let (recent_blockhash, _) = connection.get_recent_blockhash().unwrap();

let create_account_tx = solana_sdk::transaction::Transaction::new_signed_with_payer(
    &[create_account_ix],
    Some(&from_pubkey),
    &[&from_keypair, &new_account_keypair],
    recent_blockhash,
);

match connection.send_and_confirm_transaction(&create_account_tx) {
    Ok(sig) => loop {
        if let Ok(confirmed) = connection.confirm_transaction(&sig) {
            if confirmed","[-7.93990195e-02  1.00136374e-03 -5.18687256e-02  3.62477265e-02
 -4.29257704e-03 -6.95806965e-02  1.41231820e-01  1.30600231e-02
  1.45504402e-03  4.57690470e-02  1.29579097e-01 -6.42826036e-02
 -3.25491466e-02 -1.38030024e-02 -5.07008890e-03  5.31218089e-02
 -9.14931521e-02 -5.38350269e-02 -5.02567478e-02 -2.02292092e-02
  1.18532572e-02 -5.16201183e-02  1.12031063e-03  8.06516595e-03
  8.42482820e-02 -9.56852511e-02  9.63698491e-04  6.50638342e-02
 -2.41161846e-02 -1.12293651e-02  1.02541894e-01  6.00371696e-02
 -1.88896675e-02  2.41955044e-03  5.56268357e-02  1.09732095e-02
  3.53428684e-02 -2.44419463e-02  1.95715353e-02 -8.77016410e-02
 -5.40376566e-02  2.20126566e-03 -5.56784756e-02  6.27249107e-02
 -3.99379618e-02  3.56207229e-02 -1.55167943e-02  1.10057525e-01
  3.87538634e-02  4.55198660e-02 -8.49496759e-03  3.16888094e-02
 -7.56016448e-02  3.35851312e-02 -2.66379099e-02  4.02923822e-02
 -1.42232899e-03 -2.07457542e-02  5.95712336e-03 -6.20072521e-02
  2.21415292e-02  4.96752188e-03 -3.86451953e-03 -4.31533493e-02
 -5.53140976e-02  3.82376835e-02 -5.10901995e-02 -1.88432503e-02
 -1.14810038e-02  2.43452732e-02  2.08499711e-02 -7.30196154e-03
 -7.57128671e-02  9.46620107e-03 -4.31469828e-02 -2.92989854e-02
  6.02537626e-03  2.88598309e-03 -4.62399833e-02  2.18778402e-02
 -3.93319167e-02 -2.96616834e-02 -4.98264357e-02  1.51289357e-02
 -4.07462567e-02  1.22177936e-02 -3.77460457e-02 -5.87784983e-02
  2.56799888e-02  3.63221858e-04  7.01986849e-02  2.19396651e-02
 -3.39689143e-02  1.06970430e-03  6.76569194e-02  1.93852428e-02
 -1.74849518e-02 -2.97070928e-02 -7.01923743e-02  8.01611096e-02
  2.49336828e-02  9.07217036e-04 -2.02815514e-02  8.50060116e-03
  4.80057187e-02 -4.22282070e-02  1.46912932e-01 -1.05477497e-01
 -3.82098407e-02  6.01204261e-02 -1.58251822e-03  4.03949656e-02
  6.45052642e-03 -6.07874710e-03 -3.03806476e-02  1.28154278e-01
 -1.61803663e-02  5.79652227e-02 -7.35896127e-03 -2.38835090e-03
  1.83643550e-02  8.34692642e-02 -4.61982042e-02 -7.98629820e-02
 -5.42048290e-02 -2.42243521e-02  3.09357401e-02  1.39989255e-33
 -2.16879863e-02 -1.45158293e-02 -5.60232662e-02  8.33927002e-03
 -2.02473477e-02  2.50506302e-04  5.41598462e-02  2.99928878e-02
 -5.20809665e-02  4.18444946e-02 -4.75802422e-02 -9.56813246e-02
  5.46274614e-03 -9.47901905e-02  1.48984793e-04  8.19777511e-03
  1.85629297e-02  2.39193738e-02  1.21417761e-01  9.78500322e-02
  1.34465192e-02 -1.18405066e-01 -2.25444324e-03 -1.80324819e-02
  2.49429196e-02 -4.59152870e-02 -5.71729578e-02 -1.84755754e-02
  5.32902777e-02  1.25495410e-02 -3.87461414e-03  1.65439639e-02
  4.23968211e-02  2.83613708e-02  7.46931285e-02 -8.37659114e-04
 -1.48001956e-02 -8.54631327e-03 -8.75687078e-02 -2.02732123e-02
  3.64737399e-02 -5.27992956e-02 -8.99519473e-02  2.67179753e-03
 -3.20123173e-02  2.48116720e-03  4.64673080e-02  1.10248039e-02
  6.73959628e-02  1.68236177e-02 -5.14063165e-02  8.98201205e-03
 -8.89572129e-02 -7.82794431e-02  2.48121694e-02 -3.26042585e-02
 -1.67697668e-02  7.84927234e-03  2.86643184e-03 -4.18477282e-02
 -1.57687105e-02 -1.34572748e-03  3.21474411e-02 -3.84885855e-02
 -2.35377788e-03  1.28438352e-02 -6.59879297e-02  8.28768779e-03
 -2.71855108e-02 -1.94887891e-02 -6.70404211e-02  3.14652249e-02
 -1.04125682e-02  7.06298500e-02 -3.30055915e-02 -6.18510991e-02
  4.67636064e-03  3.78002711e-02 -1.12308478e-02 -9.57682282e-02
  4.92312424e-02 -3.00722364e-02 -3.27071510e-02  8.88914391e-02
 -5.08247018e-02  8.02522302e-02  5.90333268e-02  3.43697444e-02
 -4.99590263e-02  3.61569040e-02 -3.22924405e-02 -2.82861330e-02
  3.08291353e-02 -1.18641980e-01  3.87057289e-02 -4.05353872e-33
 -2.72253100e-02 -4.51007299e-02 -9.44806859e-02 -3.79126184e-02
 -1.07928133e-02  4.80556972e-02  8.45633298e-02  4.73869033e-02
 -3.46309580e-02  1.82765555e-02 -5.74841164e-02  3.51013988e-02
  3.51281352e-02 -1.36319259e-02  3.09171975e-02 -3.05114109e-02
 -6.11469150e-02 -5.68486154e-02  2.52947807e-02  5.88953011e-02
 -7.90855568e-03  6.45350292e-02  2.29451098e-02  6.00041226e-02
 -5.37171885e-02  2.05042809e-02 -4.30694632e-02  1.02198295e-01
 -1.96735039e-02  2.63495911e-02  4.32469361e-02  3.11886910e-02
 -6.59766197e-02  1.42827556e-01  1.97529122e-02 -1.35620847e-01
  6.57764524e-02  7.91466609e-02 -1.26619525e-02  4.96014059e-02
  6.74002469e-02 -4.20909226e-02 -4.46174666e-02 -4.23914678e-02
 -9.77124553e-03  7.85074080e-04  8.36378559e-02 -3.66194872e-03
 -3.06203850e-02 -4.17259634e-02  6.62857667e-02 -2.13769954e-02
 -3.68020795e-02  6.28416240e-02  2.16407739e-02  1.33632898e-01
  1.25286117e-01 -7.59705380e-02  1.06103659e-01 -4.01773788e-02
 -7.39521906e-03 -7.84110129e-02  3.24445739e-02  3.00313607e-02
  8.80436674e-02 -9.53449532e-02  8.52218736e-03  2.75319014e-02
  9.84727964e-02  6.89114407e-02 -7.87688643e-02 -2.02646833e-02
  5.38509376e-02 -8.91450513e-03  9.69052464e-02  7.59246051e-02
  1.31060900e-02 -6.82956399e-03  1.01459064e-02  2.93735731e-02
 -2.73186620e-02  2.78319754e-02 -1.98211521e-03  3.02846413e-02
  4.11606394e-02 -5.05577289e-02 -1.11718578e-02  1.72768869e-02
 -5.10655902e-02  5.42568415e-02 -5.86167015e-02 -4.45630774e-02
 -4.29576971e-02 -2.83485409e-02 -5.91876358e-02 -5.98850818e-08
 -3.52710970e-02  1.82094276e-02  1.73614342e-02  2.48789415e-02
  3.25231142e-02  3.08694337e-02  5.94064854e-02 -4.94336337e-02
 -5.40811867e-02 -1.07803836e-01 -6.60344735e-02  2.73777787e-02
 -4.35435139e-02  3.59023921e-02  4.22175555e-03 -1.06827207e-01
 -5.08676097e-02 -7.77030513e-02 -4.65127006e-02 -6.47059083e-02
 -1.18123810e-03 -3.35524157e-02 -3.53305675e-02 -4.08373540e-03
 -2.26345919e-02  1.77551359e-02  5.63162789e-02  1.07866988e-01
  7.26344734e-02 -1.75612532e-02 -1.40024275e-02 -2.28558592e-02
 -3.84058570e-03 -6.05017878e-02 -9.34187993e-02  4.79870662e-02
  3.68115976e-02 -3.90702114e-02  2.69110827e-03  1.13693856e-01
  5.68909710e-03  5.75757921e-02 -3.74555998e-02 -1.12622604e-02
 -3.20529342e-02  1.61838979e-02  9.93274245e-03 -2.53585819e-02
  4.04170342e-02  4.28166352e-02 -2.43708622e-02 -5.73715828e-02
  4.86570895e-02  1.00469746e-01 -2.27502864e-02 -5.26830852e-02
 -1.88190658e-02 -2.40415297e-02 -6.41859174e-02 -1.45017523e-02
  4.81163599e-02  1.08335298e-02 -7.13965669e-02 -1.10458508e-02]"
"{
                println!(""Transaction: {} Status: {}"", sig, confirmed);
                break;
            }
        }
    },
    Err(_) => println!(""Error creating system account""),
};
12345678910111213141516171819202122232425262728# Tính chi phí cho một accountĐể giữ account tồn tại trên Solana, bạn sẽ phải bỏ ra một khoảng phí thuêopen in new window. Một account có thể được miễn phí hoàn toàn nếu cọc đủ số phí thuê tối thiểu 2 năm. Để tính toán được, bạn cần phải biết chính xác độ lớn dữ liệu sẽ được lưu vào account đó.TSRustCLIimport { Connection, clusterApiUrl } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // length of data in the account to calculate rent for
  const dataLength = 1500;
  const rentExemptionAmount =
    await connection.getMinimumBalanceForRentExemption(dataLength);
  console.log({
    rentExemptionAmount,
  });
})();
12345678910111213use solana_client::rpc_client::RpcClient;
use solana_sdk::commitment_config::CommitmentConfig;

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());
    let data_length = 1500;

    let rent_exemption_amount = connection
        .get_minimum_balance_for_rent_exemption(data_length)
        .unwrap();

    println!(""rent exemption amount: {}"", rent_exemption_amount);
}
1234567891011121314solana rent 1500
1# Làm thế ào để tạo account với seedsBạn có thể sử dụng createAccountWithSeed để tiện quản lý thay vì phải tạo hàng tá những cặp khoá ngẫu nhiên.# Tìm AccountTSRustPress </> button to view full sourceimport { PublicKey, SystemProgram } from ""@solana/web3.js"";

(async () => {
  let basePubkey = new PublicKey(
    ""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY""
  );
  let seed = ""robot001"";
  let programId = SystemProgram.programId;

  console.log(
    `${(
      await PublicKey.createWithSeed(basePubkey, seed, programId)
    ).toBase58()}`
  );
})();
123456789101112131415PublicKey.createWithSeed(basePubkey, seed, programId);
1use solana_program::pubkey::Pubkey;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let base_pubkey = Keypair::new().pubkey();
    let seed = ""robot001"";
    let program_id = solana_program::system_program::id();

    let derived_pubkey = Pubkey::create_with_seed(&base_pubkey, seed, &program_id).unwrap();

    println!(""account pubkey: {:?}"", derived_pubkey);
}
123456789101112use solana_program::pubkey::Pubkey;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let base_pubkey = Keypair::new().pubkey();
    let seed = ""robot001"";
    let program_id = solana_program::system_program::id();

    let derived_pubkey = Pubkey::create_with_seed(&base_pubkey, seed, &program_id).unwrap();

    println!(""account pubkey: {:?}"", derived_pubkey);
}
123456789101112# Tạo AccountTSRustPress </> button to view full sourceimport {
  PublicKey,
  SystemProgram,
  Connection,
  clusterApiUrl,
  Transaction,
  Keypair,
  sendAndConfirmTransaction,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const base = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  let","[-6.80071190e-02  4.21508439e-02 -1.05923221e-01 -2.17055939e-02
 -6.78092316e-02 -1.04524866e-02  9.93295535e-02  7.86080360e-02
  6.46877140e-02  6.12893961e-02  1.19995885e-01 -6.65112734e-02
  1.67487767e-02 -4.62922119e-02  7.92991277e-03 -3.97782698e-02
 -1.07376955e-01 -1.70766227e-02 -3.16982903e-02 -7.35304728e-02
  4.28641737e-02 -9.03546158e-03 -4.07394134e-02 -2.06128228e-02
  3.12724970e-02 -4.25254032e-02 -1.97520889e-02  5.05057089e-02
  1.57505693e-03 -1.07239904e-02  4.66579050e-02  2.56068725e-02
  1.54041937e-02 -4.60738353e-02  8.24768096e-02  7.81859830e-02
 -3.83618660e-02 -8.71277303e-02  1.15300687e-02 -3.53852436e-02
 -2.40716618e-02  3.43497433e-02 -6.01651818e-02 -5.40458411e-02
  6.14439882e-02  1.28081553e-02 -9.14714932e-02  4.22427282e-02
 -3.02871708e-02  2.64627356e-02 -6.82053417e-02  5.67964241e-02
 -1.95667222e-02  2.12145094e-02 -3.40117104e-02  1.12478416e-02
 -9.69585124e-03  1.09404754e-02 -1.79061331e-02 -1.05351575e-01
  2.43160203e-02  3.02056652e-02  3.28307748e-02 -4.74299826e-02
  9.40779131e-03 -4.56371391e-03 -7.68737718e-02  4.90912329e-03
 -3.12788300e-02  6.84078876e-03 -3.16702873e-02 -1.26821836e-02
 -1.48578912e-01  4.61808294e-02 -6.42540827e-02 -7.37103587e-03
 -1.96814493e-04  5.56750484e-02  2.30319276e-02 -1.17869386e-02
  4.08332190e-03 -1.08050331e-02 -1.08009400e-02 -5.00930659e-03
 -5.67638390e-02  6.87380508e-02 -7.26185068e-02 -3.11372615e-02
  4.21325378e-02 -2.93692071e-02  5.11579067e-02  6.82134852e-02
 -1.49340425e-02 -1.90978628e-02  1.30503159e-02 -6.92025525e-03
 -1.95542518e-02  3.05542555e-02  1.94545202e-02  7.39177391e-02
  7.57831633e-02  2.66079828e-02  4.15751077e-02  2.19546035e-02
 -6.54515997e-02 -4.36486863e-02  7.57872760e-02 -3.20162289e-02
  7.96890538e-03 -3.95694794e-03 -3.73594426e-02  4.79614399e-02
  6.65718364e-03 -8.30471292e-02  1.03703532e-02  6.21526651e-02
 -5.42101637e-03 -1.43059986e-02  1.56316180e-02  9.48864967e-02
  1.17691837e-01 -2.28529219e-02 -1.17621914e-01 -3.99887152e-02
 -8.58498737e-03 -1.42391184e-02  9.57301259e-02  1.52055484e-32
 -4.24255617e-02 -3.15540917e-02 -2.74227262e-02  9.71275941e-03
  4.27072495e-03  1.30128339e-02 -5.34140095e-02 -2.09264038e-03
 -1.11295685e-01 -1.49338115e-02 -5.77451997e-02 -7.73632601e-02
  8.67726374e-03 -1.44272640e-01 -2.76723318e-02  6.52495399e-03
  1.05608039e-01 -2.28183949e-03  3.87530364e-02  2.94754058e-02
  3.23832668e-02 -5.95033541e-02  8.33310187e-02  2.37046578e-03
  2.91002169e-02  3.74214947e-02 -2.20760256e-02 -1.14659593e-02
 -6.05717152e-02  2.49978364e-03  7.73487464e-02 -3.74628343e-02
 -4.75607663e-02  1.80487242e-02 -6.67508505e-03 -3.89528498e-02
  1.47395069e-02 -5.71187437e-02 -1.10747583e-01 -1.67967156e-02
 -1.68212620e-03 -1.32008828e-02 -2.46608406e-02  3.41131873e-02
 -2.91040470e-03  4.72867377e-02  3.33616175e-02  1.07513340e-02
  1.21384367e-01  5.92547171e-02 -1.14996359e-01 -1.36005897e-02
 -7.38579780e-02  3.69295198e-03  3.78918909e-02  1.93577893e-02
 -6.04208279e-03 -4.69580404e-02 -4.03417349e-02 -4.82689515e-02
 -4.56327526e-03 -3.66324000e-02 -1.66136064e-02  7.79528986e-04
 -2.00383347e-02 -8.81720558e-02 -1.48573227e-03  2.24921200e-02
  1.61900241e-02 -3.93694229e-02 -3.28645781e-02 -5.32282889e-02
 -1.85520388e-02  1.04459479e-01 -7.88845047e-02 -5.84404469e-02
  6.85955957e-02  2.71115452e-02 -8.45744535e-02  3.47710587e-02
  1.06351199e-02 -4.05683480e-02 -7.91719332e-02  2.68785004e-02
  3.25764827e-02  7.53595456e-02  2.30530314e-02 -3.65111493e-02
  5.19331172e-02  4.45184223e-02  2.21239179e-02  4.89707850e-02
  2.47200206e-02 -2.11201124e-02 -5.69419079e-02 -1.46553495e-32
 -3.46068665e-02 -4.59487885e-02 -1.28917322e-01 -6.87294602e-02
 -1.64090900e-03 -6.90650381e-03  2.34371535e-02  3.33003551e-02
 -1.78893059e-02  1.42346658e-02 -3.58737772e-03 -1.20187048e-02
  1.29026072e-02  1.57450996e-02  5.65837026e-02  3.24387960e-02
  6.43273965e-02 -3.59711871e-02  9.01202764e-03  8.75448212e-02
 -2.38467213e-02  6.11981228e-02 -1.50900735e-02  6.81736469e-02
 -6.43396527e-02  3.45969461e-02  2.60035787e-02  3.20056602e-02
 -8.86858702e-02  2.71284040e-02  3.59173939e-02 -2.14694757e-02
 -6.31954893e-02  1.70190543e-01  5.16349897e-02 -1.49590656e-01
  9.85364243e-02  3.51093188e-02 -3.00648510e-02  4.95232679e-02
  7.25817904e-02  5.67018054e-03 -4.11064066e-02 -1.27210934e-02
  5.14761582e-02 -7.34585822e-02  8.60976577e-02 -1.93775177e-03
 -4.72900132e-03 -4.86994721e-03  6.62203208e-02 -6.16551787e-02
  8.85402039e-03  5.72728459e-03  3.58586549e-03  7.35935271e-02
  4.49905880e-02 -3.33797969e-02  1.85427219e-02 -8.95991027e-02
 -2.12894729e-03 -8.32438767e-02  3.33417468e-02  2.58961208e-02
  7.98988417e-02 -5.93428835e-02  4.48978040e-03  4.00824621e-02
  1.02824666e-01 -6.49976283e-02 -6.66555539e-02 -4.45944164e-03
  2.10779067e-02  1.35401255e-02  6.35011261e-03  3.15090059e-03
 -6.12100214e-02 -3.77168320e-02  4.31816950e-02  3.91087383e-02
 -3.75061445e-02  7.97919035e-02 -3.10096741e-02 -2.28216145e-02
  2.49383189e-02 -8.02589953e-02 -3.49327698e-02  3.21214721e-02
 -2.97502577e-02 -3.88603397e-02 -6.99697211e-02  1.38730938e-02
 -4.01021503e-02  6.40527010e-02 -6.86080903e-02 -6.64022650e-08
 -3.20357196e-02 -8.08543935e-02 -2.28362363e-02 -5.24820620e-03
  2.41540913e-02 -4.62191701e-02  4.49080281e-02 -8.93272609e-02
 -2.71050893e-02  1.51761770e-02 -1.36355376e-02  6.29178137e-02
 -4.96794209e-02 -2.27507483e-02  6.40474120e-03  9.97490063e-03
 -3.05385003e-03  4.22950797e-02 -2.10108291e-02 -7.56065920e-02
  9.06572938e-02 -3.33400480e-02  2.86428985e-04  1.33780707e-02
  1.83830247e-03 -2.82705817e-02  1.76842175e-02  8.30728933e-02
 -1.67344194e-02 -8.64141956e-02 -1.81264207e-02 -1.70608389e-03
  2.31152624e-02 -1.88588649e-02  9.84126329e-03  2.83232704e-02
  6.44854084e-02  1.97996534e-02  3.56116220e-02  8.10382813e-02
  1.63244642e-02  7.75969774e-02  2.53570061e-02  3.33082825e-02
 -2.53741331e-02  1.29930663e-03  2.51013432e-02 -2.79323105e-03
  1.12663679e-01 -7.82741904e-02 -6.96541965e-02 -5.80245443e-02
  3.82758901e-02  8.36406052e-02 -4.15506661e-02 -3.32668759e-02
  3.43779698e-02  2.07079779e-02 -2.52732877e-02  4.22563665e-02
  7.27759227e-02  9.42427516e-02  1.56409275e-02 -7.51375407e-02]"
"basePubkey = base.publicKey;
  let seed = ""robot001"";
  let programId = SystemProgram.programId;

  let derived = await PublicKey.createWithSeed(basePubkey, seed, programId);

  const tx = new Transaction().add(
    SystemProgram.createAccountWithSeed({
      fromPubkey: feePayer.publicKey, // funder
      newAccountPubkey: derived,
      basePubkey: basePubkey,
      seed: seed,
      lamports: 1e8, // 0.1 SOL
      space: 0,
      programId: programId,
    })
  );

  console.log(
    `txhash: ${await sendAndConfirmTransaction(connection, tx, [
      feePayer,
      base,
    ])}`
  );
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455const tx = new Transaction().add(
  SystemProgram.createAccountWithSeed({
    fromPubkey: feePayer.publicKey, // funder
    newAccountPubkey: derived,
    basePubkey: basePubkey,
    seed: seed,
    lamports: 1e8, // 0.1 SOL
    space: 0,
    programId: owner,
  })
);

console.log(
  `txhash: ${await sendAndConfirmTransaction(connection, tx, [feePayer, base])}`
);
123456789101112131415use solana_client::rpc_client::RpcClient;
use solana_program::pubkey::Pubkey;
use solana_program::system_instruction;
use solana_sdk::commitment_config::CommitmentConfig;
use solana_sdk::native_token::LAMPORTS_PER_SOL;
use solana_sdk::signature::{Keypair, Signer};

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let fee_payer_keypair = Keypair::new();
    let fee_payer_pubkey = Signer::pubkey(&fee_payer_keypair);

    let base_keypair = Keypair::new();
    let base_pubkey = Signer::pubkey(&base_keypair);

    let seed = ""robot001"";
    let program_id = solana_program::system_program::id();

    let derived_pubkey = Pubkey::create_with_seed(&base_pubkey, seed, &program_id).unwrap();

    match connection.request_airdrop(&fee_payer_pubkey, LAMPORTS_PER_SOL) {
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error requesting airdrop""),
    };

    let ix = system_instruction::create_account_with_seed(
        &fee_payer_pubkey,
        &derived_pubkey,
        &base_pubkey,
        seed,
        LAMPORTS_PER_SOL / 10,
        0,
        &program_id,
    );

    let (recent_blockhash, _) = connection.get_recent_blockhash().unwrap();

    let tx = solana_sdk::transaction::Transaction::new_signed_with_payer(
        &[ix],
        Some(&fee_payer_pubkey),
        &[&fee_payer_keypair, &base_keypair],
    ","[-2.14575939e-02 -2.90514319e-03 -4.41568978e-02 -2.03697756e-02
 -7.71474764e-02 -1.86080094e-02  7.06881881e-02  8.91836137e-02
  5.92587925e-02  6.37430847e-02  8.24870691e-02 -5.96334375e-02
 -1.11632915e-02 -3.58036309e-02  2.68797912e-02  5.00276387e-02
  1.68025792e-02 -7.66502097e-02  1.15048531e-02  1.96256489e-02
  5.21744080e-02 -6.85241446e-02  3.52688693e-02 -2.25660298e-02
  4.04392742e-02 -6.71362206e-02 -3.73278372e-02 -3.20330113e-02
 -7.12135923e-04 -3.67018431e-02  6.93050921e-02 -1.01811774e-02
  7.36036338e-03 -1.70905795e-02  5.43402284e-02  8.44835714e-02
  3.37994471e-02 -5.60528114e-02 -1.28274336e-02 -1.66016421e-03
 -1.84638649e-02  4.46258299e-02 -2.53692213e-02  6.68652132e-02
  3.86690907e-02 -2.33058538e-02 -5.11117503e-02  2.88974270e-02
  5.21103330e-02  4.29316610e-02 -7.17520639e-02  2.44526695e-02
  2.80404594e-02  4.86452356e-02 -2.28011645e-02  7.01443255e-02
  2.44544391e-02  4.24522907e-02  4.29944098e-02 -2.31937952e-02
  5.55053502e-02 -2.81929169e-02  3.13883685e-02 -9.57052633e-02
 -4.08091629e-03  5.12745194e-02 -2.23589968e-02 -5.28905317e-02
 -1.79660916e-02 -5.78254312e-02  3.78571339e-02  7.74979009e-04
 -6.25348389e-02  4.50592600e-02 -9.34827849e-02 -3.48926708e-02
  6.63620606e-03  5.66507764e-02 -5.32616898e-02 -1.50487404e-02
 -5.33403531e-02 -2.94584874e-02  4.68132533e-02  2.54800115e-02
  3.00690867e-02  7.20970035e-02  1.63242035e-02 -2.80320011e-02
 -5.94861992e-03  2.65102610e-02 -9.03022010e-03  8.14139564e-03
 -4.38633189e-02 -2.62395926e-02  7.37173259e-02  4.45211083e-02
 -6.43779561e-02 -2.60477029e-02 -6.05835319e-02  8.55834261e-02
  1.94271039e-02  3.58271971e-03 -8.00672770e-02 -1.44349774e-02
  4.28333990e-02  1.75332949e-02  2.11395901e-02 -4.59825024e-02
 -3.35220098e-02 -9.14040487e-03  3.95186897e-03  7.10593686e-02
 -1.05498983e-02  7.38248453e-02 -7.20246732e-02  1.00800470e-01
 -4.64992933e-02  6.79592639e-02  5.86727150e-02  3.14527913e-03
  7.13402331e-02  6.94390666e-03 -6.47671372e-02 -2.93435305e-02
 -7.35440329e-02 -1.00019962e-01  6.24643862e-02  8.93634977e-33
 -2.80165896e-02 -1.04046892e-02 -2.23441143e-02 -1.41661884e-02
  1.42876869e-02  2.08716504e-02  9.47023779e-02  4.92041484e-02
 -1.33569047e-01 -4.25414294e-02 -7.99650326e-02 -7.44487420e-02
  9.80665162e-03 -5.75607829e-02 -4.29692641e-02 -1.00613348e-01
 -2.05035298e-03  6.71121702e-02  1.24354452e-01  4.43338556e-03
  3.62284631e-02  3.30874883e-02 -1.32446028e-02 -4.94476520e-02
 -3.72731090e-02 -7.41799828e-03 -1.00370206e-01  7.24937953e-03
 -1.46352863e-02  1.55504448e-02  5.32091744e-02  8.00980330e-02
 -3.59742567e-02  5.93448132e-02  4.60644104e-02 -3.09095532e-02
  1.89258102e-02 -3.22214365e-02 -8.40428248e-02 -4.56030741e-02
  1.37086967e-02  8.96996062e-04 -5.72909974e-02  7.96598103e-03
 -1.02280535e-01 -7.59206340e-02 -4.29227063e-03 -7.40828067e-02
  1.10289469e-01 -1.11292787e-02 -3.91221568e-02  3.83014008e-02
  3.55330706e-02 -9.79933515e-02 -5.42254979e-03 -1.02470182e-01
 -2.94988323e-02 -2.91513372e-02 -3.18479650e-02 -5.71427774e-03
  8.96181911e-03 -3.66277806e-02 -3.35006393e-03 -6.32500974e-03
  2.30861865e-02 -2.35464592e-02 -9.46124718e-02 -4.47641276e-02
  8.18001255e-02  1.34116681e-02 -1.70375612e-02  1.81851331e-02
  6.48750132e-03  4.33904827e-02 -2.59925723e-02  1.15868798e-03
 -5.37862480e-02 -9.07110516e-04 -5.89889474e-02 -6.55656829e-02
 -2.60855793e-03  9.93281370e-04 -7.86764920e-02  5.05364649e-02
  4.86326367e-02  1.64855748e-01 -7.12296292e-02  1.79505348e-02
 -1.23164617e-03  4.38119546e-02 -8.09157081e-03 -3.11584193e-02
 -3.56436893e-02  2.63411179e-02  1.61088519e-02 -9.93124557e-33
 -2.21741144e-02  1.47703541e-02 -7.99362957e-02 -3.04688737e-02
 -4.79573086e-02  4.47440408e-02  3.47133502e-02 -3.58594917e-02
 -6.23909421e-02  2.72939615e-02 -3.38700749e-02  5.25917299e-03
  1.87851451e-02  4.49570976e-02  4.84407879e-02 -7.90279806e-02
 -1.54658295e-02 -6.52251840e-02  3.41786817e-02 -3.18274945e-02
 -3.23954299e-02  1.12714790e-01 -6.24374785e-02  6.77073523e-02
 -2.42704200e-03  4.31714319e-02 -1.01036005e-01  1.16747409e-01
 -3.14054340e-02 -2.06535477e-02 -2.26137917e-02  1.49155990e-03
 -7.31156245e-02  7.14346617e-02  2.19351929e-02 -8.30629990e-02
  8.51417519e-03  5.35827950e-02  1.99052915e-02  5.30221052e-02
  5.14842905e-02 -9.64721963e-02  2.69069755e-03 -3.47869769e-02
  6.37471154e-02 -6.93396106e-02  5.27981557e-02 -2.73479894e-02
  6.27618805e-02  4.26985659e-02  1.53181031e-02  1.39146307e-02
 -1.82342138e-02 -2.10193153e-02 -3.93076986e-02  6.29178658e-02
  9.39270034e-02 -7.67919794e-02  8.31497386e-02 -2.38470789e-02
 -4.24839510e-03 -3.73728834e-02  9.08870324e-02  5.29576540e-02
  1.12018846e-01 -1.11571718e-02 -7.03646475e-03 -5.40747680e-03
  7.01757148e-02  9.11645684e-03 -3.83653715e-02  4.33547497e-02
  5.57871498e-02  5.45351359e-04  8.06086287e-02  1.78541746e-02
  2.25357227e-02 -5.46628460e-02  2.24295873e-02  6.46332577e-02
 -1.16033945e-02  4.43541370e-02  4.68365550e-02 -3.28207668e-03
 -3.35210841e-03 -2.63040960e-02  2.41049156e-02 -4.84317690e-02
 -5.50069921e-02  9.73498262e-03 -3.45697887e-02 -1.33435996e-02
 -5.97217791e-02 -3.70318927e-02 -5.23619726e-02 -6.39369304e-08
 -3.70823219e-02  3.06799933e-02 -5.97502925e-02  6.66430965e-02
  7.73118809e-02 -1.65041499e-02  2.83495849e-03 -6.37682453e-02
 -6.64114505e-02 -1.41197890e-01 -9.31659490e-02  6.20141253e-02
  6.13029522e-04 -3.13184373e-02  5.19130640e-02 -7.32423067e-02
  3.21140932e-03 -5.18556722e-02 -2.81969737e-02 -1.91304293e-02
  3.16265635e-02 -8.30462128e-02  5.31596458e-03 -1.62111819e-02
 -4.61705327e-02 -1.29403023e-03  1.12866260e-01  1.59495950e-01
  3.96375544e-02  5.95288612e-02 -1.22931916e-02 -2.42764577e-02
  2.51653399e-02 -1.17397970e-02 -6.39898852e-02  7.43100373e-03
 -6.69652876e-03 -2.42870934e-02  5.91850355e-02  5.54919010e-04
  6.35687336e-02  6.55563101e-02 -3.64287049e-02  4.44827676e-02
 -3.57186869e-02  5.52999489e-02 -6.83156326e-02  7.57662253e-03
  3.29340622e-02  2.00286061e-02 -1.53485232e-03 -4.13985215e-02
 -3.94129939e-03  6.44954145e-02 -1.50516164e-02 -1.67987924e-02
  2.58471705e-02 -1.15103833e-01 -4.74695191e-02  6.69813678e-02
  4.37100343e-02 -1.24697834e-02  2.76382789e-02 -5.95700517e-02]"
"   recent_blockhash,
    );

    match connection.send_and_confirm_transaction(&tx) {
        Ok(sig) => loop {
            if let Ok(confirmed) = connection.confirm_transaction(&sig) {
                if confirmed {
                    println!(""Transaction: {} Status: {}"", sig, confirmed);
                    break;
                }
            }
        },
        Err(_) => println!(""Error creating account with seed""),
    };
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465let derived_pubkey = Pubkey::create_with_seed(&base_pubkey, seed, &program_id).unwrap();

let ix = system_instruction::create_account_with_seed(
  &fee_payer_pubkey,
  &derived_pubkey,
  &base_pubkey,
  seed,
  LAMPORTS_PER_SOL / 10,
  0,
  &program_id,
);

let tx = solana_sdk::transaction::Transaction::new_signed_with_payer(
  &[ix],
  Some(&fee_payer_pubkey),
  &[&fee_payer_keypair, &base_keypair],
  recent_blockhash,
);
123456789101112131415161718# Chuyển lamportsTSPress </> button to view full sourceimport {
  PublicKey,
  SystemProgram,
  Connection,
  clusterApiUrl,
  Transaction,
  Keypair,
  sendAndConfirmTransaction,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const base = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  let basePubkey = base.publicKey;
  let seed = ""robot001"";
  let programId = SystemProgram.programId;

  let derived = await PublicKey.createWithSeed(basePubkey, seed, programId);

  const tx = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: derived,
      basePubkey: basePubkey,
      toPubkey: Keypair.generate().publicKey, // create a random receiver
      lamports: 0.01 * LAMPORTS_PER_SOL,
      seed: seed,
      programId: programId,
    })
  );

  console.log(
    `txhash: ${await sendAndConfirmTransaction(connection, tx, [
      feePayer,
      base,
    ])}`
  );
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354const tx = new Transaction().add(
  SystemProgram.transfer({
    fromPubkey: derived,
    basePubkey: basePubkey,
    toPubkey: Keypair.generate().publicKey, // create a random receiver
    lamports: 0.01 * LAMPORTS_PER_SOL,
    seed: seed,
    programId: programId,
  })
);
console.log(
  `txhash: ${await sendAndConfirmTransaction(connection, tx, [feePayer, base])}`
);
12345678910111213TIPChỉ khi account được sở hữu bởi System Program mới có thể chuyển lamports thông qua System Program.# Cách tạo PDAsProgram derived address(PDA)open in new window giống như một địa chỉ bình thường với vài điểm khác biệt như sau:Nằm ngoài đường cong ed25519Sử dụng program để ký thay vì khoá riêng tưLưu ý: PDA có thể","[-9.29132253e-02  5.93294725e-02 -8.38654116e-02 -2.84407660e-02
 -3.02963834e-02 -6.17393963e-02  5.31293340e-02  2.05265302e-02
 -7.64199940e-04  4.10204828e-02  8.08194429e-02 -7.98217878e-02
 -2.84268614e-02 -5.85501492e-02  2.28330791e-02  4.64391075e-02
 -1.08186707e-01 -3.24321464e-02  1.59538863e-03 -2.55958978e-02
 -4.36482504e-02 -5.08026071e-02  3.41085792e-02 -3.90953803e-03
  5.51137067e-02 -7.36472309e-02  1.93444025e-02  5.15194982e-02
  7.22384546e-03 -2.42174827e-02  1.05203509e-01  7.12462440e-02
 -3.42856459e-02  3.03734224e-02 -2.31935550e-03  6.18682839e-02
  2.79360753e-03 -1.66312754e-02  1.84735619e-02 -5.58257364e-02
  1.01162260e-02 -1.01464577e-02 -7.80142844e-02  4.28030267e-02
  1.17303291e-02 -2.68524922e-02 -4.08740193e-02  8.98775905e-02
  1.04570370e-02 -2.17898097e-02 -6.73811957e-02 -1.37061980e-02
 -2.31954716e-02  1.09991711e-02  4.43362370e-02  7.52364621e-02
  2.17807689e-03 -2.42243167e-02 -1.11548593e-02 -2.03001704e-02
  1.90630239e-02  1.54680097e-02 -8.03528260e-03 -7.11471960e-02
 -4.58585508e-02  2.96292435e-02 -1.31818792e-03 -2.35312358e-02
  5.01087904e-02 -1.55841354e-02  4.18301523e-02 -4.38520499e-02
 -4.38816808e-02  2.00956538e-02 -8.70722011e-02 -2.10814606e-02
  2.13285051e-02  7.05255345e-02 -6.50187060e-02 -2.66948547e-02
 -1.25203937e-01 -5.04138209e-02  3.12086530e-02 -4.67085280e-03
 -1.68469995e-02  1.15677845e-02 -3.42800766e-02 -4.34283987e-02
  5.48086464e-02  3.42621170e-02  5.35234697e-02  2.04816684e-02
 -2.83985008e-02 -2.81577650e-02  1.21805899e-01  7.78557435e-02
  8.96186382e-03  7.94968288e-03 -4.18866947e-02  9.94419828e-02
  2.69628596e-02 -8.66529159e-03 -4.72069532e-02 -4.49508522e-03
  8.27313736e-02  9.59770568e-03  7.73524791e-02 -6.04870282e-02
 -7.53429979e-02  4.71613975e-03  2.18874868e-02  2.96274163e-02
  3.65980081e-02  5.09005263e-02 -2.77623143e-02  1.00807212e-01
 -1.38283735e-02  1.06068924e-01  1.83499344e-02  3.64419334e-02
  7.46578276e-02  5.60701191e-02 -8.45961124e-02 -9.34327617e-02
 -1.04295127e-01 -4.99765985e-02  2.90699899e-02 -7.12816239e-34
  4.46157455e-02 -8.71572550e-03 -4.38396744e-02 -6.77371072e-03
 -1.31214820e-02  4.42512669e-02  1.75931081e-02  4.83357348e-03
 -7.61517212e-02 -2.50025876e-02 -4.72654402e-02 -9.56378654e-02
 -3.34712043e-02 -8.52341875e-02 -8.33413601e-02 -1.68276653e-02
 -4.80385078e-03  4.06093076e-02  3.47177573e-02  8.50796551e-02
  2.37592892e-03 -3.85806374e-02 -1.21348817e-02 -4.92516235e-02
 -2.27105971e-02  3.79865468e-02 -3.00836936e-02 -4.41183476e-03
  6.46659930e-04  8.49623291e-04 -1.58851203e-02  2.77575804e-03
  4.83741015e-02  5.87708950e-02  8.20221752e-02  4.50303294e-02
 -9.09912214e-03 -1.75772347e-02 -9.56685543e-02 -4.92062904e-02
  1.74403433e-02 -3.10427975e-03 -9.10443738e-02  1.33705232e-02
 -4.96644638e-02  2.61735711e-02 -3.03747114e-02  4.69915122e-02
  8.07792172e-02  8.06919858e-03 -6.96678758e-02  2.32428387e-02
 -4.48646434e-02 -5.65024540e-02  2.32599047e-03 -2.17365958e-02
 -4.56703035e-03  2.95912065e-02 -2.13080328e-02 -3.90021093e-02
 -1.54049639e-02 -1.63153596e-02 -5.01559749e-02 -6.89838128e-03
 -1.44297434e-02  3.38212028e-02 -8.16868171e-02 -7.58110220e-03
 -7.47906324e-03  1.26597686e-02 -3.30179073e-02  4.46820371e-02
 -6.77261055e-02  7.30315968e-02 -1.74669772e-02 -9.40436721e-02
  2.74386611e-02  5.64877428e-02 -8.28897953e-02 -4.44043875e-02
  7.04777837e-02 -2.41782572e-02 -1.30206823e-01  7.92058110e-02
 -2.46226992e-02  1.11629628e-01  2.59426720e-02  1.95726119e-02
 -6.10069036e-02 -1.82544328e-02 -9.04434454e-03  2.03461889e-02
  9.59241986e-02 -1.05820179e-01  2.74187122e-02 -2.01337368e-33
  9.99191031e-03 -4.83218171e-02 -9.53876749e-02  6.38132263e-03
 -8.20430368e-03  6.72440324e-03  6.99389875e-02  5.98154636e-03
 -7.65069872e-02 -2.86441911e-02  2.80538965e-02 -2.41343630e-03
  6.03548437e-02 -2.01973282e-02 -1.77340917e-02 -1.96629018e-03
 -2.27809642e-02 -8.97466112e-03 -9.72267985e-03  1.59250237e-02
 -2.26382486e-04  1.25563815e-01 -3.17437798e-02  4.81473580e-02
 -4.01495360e-02 -2.15066914e-02 -1.96961872e-02  1.30941823e-01
 -9.46734399e-02 -2.86594871e-02  1.16345838e-01 -1.04033167e-03
 -8.88051465e-02  6.12075776e-02 -1.21201202e-03 -1.01368487e-01
  5.62567525e-02  5.95604368e-02  2.32926793e-02  2.58519240e-02
  6.78717270e-02 -2.99315695e-02 -4.86788303e-02  3.66270989e-02
 -3.36624905e-02  5.59908664e-03  9.76954624e-02 -9.02260654e-03
 -2.94135641e-02 -5.87413600e-03  4.99965064e-02 -5.54759614e-02
  2.62708012e-02 -2.37350818e-02 -2.42880695e-02  6.11136518e-02
  7.06245229e-02 -2.48082932e-02  2.98053790e-02 -1.48590636e-02
 -4.92743775e-02 -4.11825739e-02  7.09601864e-02  5.39514385e-02
  1.03723586e-01 -1.03021786e-01 -1.57739110e-02  6.21248595e-02
  1.04322299e-01  3.07934098e-02 -2.19485443e-02  1.32323531e-02
 -1.99235720e-03  4.36280780e-02  5.81172258e-02  4.45604697e-02
 -3.06253470e-02 -4.09106985e-02  4.52755615e-02  6.51936308e-02
 -2.91239060e-02  4.47732620e-02  2.97187157e-02  4.19299826e-02
  3.73048373e-02 -5.56304604e-02  1.07337637e-02  5.23976721e-02
 -3.37464586e-02  2.49450523e-02 -1.91684887e-02 -1.36074452e-02
 -7.52667859e-02 -2.84244958e-03 -2.18632184e-02 -5.74710199e-08
 -2.31482591e-02 -5.90789542e-02 -6.30892143e-02  5.29385582e-02
  8.15382749e-02  9.45395511e-03  2.03284882e-02 -5.10658063e-02
 -6.67007640e-02 -1.08478412e-01 -1.03830911e-01  6.95646852e-02
 -7.52318949e-02 -2.58519612e-02  4.36953045e-02 -8.35199282e-02
  1.74348825e-03  3.35270315e-02 -4.96841930e-02 -8.79697204e-02
  3.14528518e-03 -4.57813665e-02 -1.93297807e-02  1.64580420e-02
 -1.81947425e-02  4.59843352e-02  1.09801389e-01  9.95983183e-02
  5.00341766e-02  5.15571237e-03  1.24293491e-02 -4.36617844e-02
  7.85466954e-02 -4.84215096e-02 -4.28939462e-02  6.22536205e-02
  6.52570161e-04  5.46371238e-03  9.10952464e-02  6.07033186e-02
  9.86688584e-03  7.11089075e-02 -8.67404509e-03 -1.05728884e-03
 -1.15589514e-01  1.29469880e-03 -4.99340631e-02  3.48605216e-02
  3.03625558e-02  3.51667143e-02  2.06216387e-02 -5.88513874e-02
  8.39880556e-02  4.35712561e-02 -2.93729436e-02 -3.34077738e-02
  1.33023877e-02  1.76550783e-02  1.20749287e-02 -1.45753119e-02
  7.66163841e-02 -2.75017451e-02  8.35482590e-03 -1.04416031e-02]"
"được tạo bởi Program. Địa chỉ của PDA có thể được tạo ở phí người dùng.TIPMặc dù PDA có thể được suy ra bằng program_id, nó không có nghĩa là PDA phải được sở hữu bởi cùng một Program. (Ví dụ, bạn có thể khởi tạo một PDA như là một Token Account và được kiểm soát bởi Token Program)# Sinh ra một PDAfindProgramAddress sẽ nhận một byte phụ ở cuối seed và được gọi là bump. Bump bắt đầu từ 255 và kết thúc ở 0. Giá trị bump đầu tiên khiến cho địa chỉ PDA nằm ngoài đường cong ed25519 sẽ được chấp nhận. Như vậy, bạn sẽ luôn thu được kết qua giống nhau nếu truyền vào cùng một program_id và seed.TSRustimport { PublicKey } from ""@solana/web3.js"";

(async () => {
  const programId = new PublicKey(
    ""G1DCNUQTSGHehwdLCAmRyAG8hf51eCHrLNUqkgGKYASj""
  );

  let [pda, bump] = await PublicKey.findProgramAddress(
    [Buffer.from(""test"")],
    programId
  );
  console.log(`bump: ${bump}, pubkey: ${pda.toBase58()}`);
  // you will find the result is different from `createProgramAddress`.
  // It is expected because the real seed we used to calculate is [""test"" + bump]
})();
123456789101112131415use solana_program::pubkey::Pubkey;
use std::str::FromStr;

fn main() {
    let program_id = Pubkey::from_str(""G1DCNUQTSGHehwdLCAmRyAG8hf51eCHrLNUqkgGKYASj"").unwrap();

    let (pda, bump_seed) = Pubkey::find_program_address(&[b""test""], &program_id);
    println!(""pda: {}, bump: {}"", pda, bump_seed);
}
123456789# Tạo một PDABên dưới là một ví dụ Program tạo ra và sở hữu một PDA Account và một ví dụ truy vấn Program từ người dùng.# ProgramVí dụ bên dưới thể hiện một chỉ thị đơn system_instruction::create_account dùng để tạo một PDA Account với dung sai là space và phí thuê là rent_lamports. Chi thị được ký bằng PDA thông qua hàm invoke_signed tương tự như đã trình bày bên trên.rustPress </> button to view full sourceuse solana_program::{
    account_info::next_account_info, account_info::AccountInfo, entrypoint,
    entrypoint::ProgramResult, program::invoke_signed, pubkey::Pubkey, system_instruction, sysvar::{rent::Rent, Sysvar}
};

entrypoint!(process_instruction);

fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo], 
    instruction_data: &[u8],
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();

    let payer_account_info = next_account_info(account_info_iter)?;
    let pda_account_info = next_account_info(account_info_iter)?;
    let rent_sysvar_account_info = &Rent::from_account_info(next_account_info(account_info_iter)?)?;

    // find space and minimum rent required for account
    let space = instruction_data[0];
    let bump = instruction_data[1];
    let rent_lamports = rent_sysvar_account_info.minimum_balance(space.into());

    invoke_signed(
        &system_instruction::create_account(
            &payer_account_info.key,
            &pda_account_info.key,
            rent_lamports,
            space.into(),
            program_id
        ),
        &[
            payer_account_info.clone(),
            pda_account_info.clone()
","[-1.13604702e-01  2.70914548e-04 -6.34106621e-02 -1.17242299e-01
  7.40225334e-03 -3.07844188e-02  5.20638488e-02  2.21298542e-02
  2.89595854e-02  1.25200786e-02  1.13698319e-01 -6.49149939e-02
  5.13068214e-03 -1.10461041e-01  7.74557739e-02 -2.86339857e-02
 -8.76629949e-02 -2.27497937e-03 -8.70815814e-02 -9.99886021e-02
 -1.78176332e-02 -1.04826977e-02 -3.67656350e-02 -3.23933624e-02
 -3.75416949e-02  2.55657434e-02  4.69017588e-02  5.08962609e-02
 -1.21753858e-02 -8.93217474e-02  4.91369888e-02  1.36390239e-01
 -1.57332905e-02 -1.29255876e-02  8.33964124e-02  6.45881072e-02
 -4.45007533e-02 -2.93286853e-02  4.99417931e-02 -9.04317666e-03
 -5.04221804e-02  9.36003122e-03 -4.07577306e-02 -5.89470193e-02
  9.79977697e-02 -1.31677520e-02 -6.38800338e-02  3.64015140e-02
 -3.52144651e-02 -3.15971226e-02 -5.94717711e-02  4.50927466e-02
 -2.52549965e-02  5.53194880e-02 -1.06602520e-01 -7.46562928e-02
 -1.68983880e-02  9.85568538e-02  4.47222441e-02 -3.69285457e-02
 -2.58939452e-02  1.82015225e-02  1.25482585e-02 -4.63291742e-02
  2.28475444e-02 -5.77750579e-02 -7.56087601e-02 -7.53960088e-02
  2.63353288e-02 -1.61379054e-02 -3.02226990e-02  3.53473565e-03
 -1.15681887e-01  7.17059299e-02 -8.28561857e-02  1.00831404e-01
 -1.03703011e-02  4.54800166e-02  2.15477473e-03 -9.95548442e-02
  1.59787647e-02  5.62359281e-02  1.05870016e-01 -1.92665458e-02
  3.65790538e-03  8.60151649e-02 -2.41268352e-02  1.18442448e-02
  5.75716607e-02  4.25529928e-04  3.56607363e-02  5.22185825e-02
 -3.10796238e-02  5.35486005e-02  2.55635381e-03 -1.26892142e-02
  3.18314843e-02  3.77834253e-02 -2.50506923e-02  1.04900822e-01
  1.58911906e-02  9.29652154e-03  2.40038964e-03  1.34891849e-02
 -2.87564151e-04  2.67673694e-02  1.15798272e-01 -2.26091146e-02
  7.25549683e-02  6.99987356e-03 -7.41792694e-02 -8.58886819e-03
  3.29073030e-03 -1.19000465e-01 -5.65067716e-02  1.34179089e-02
 -7.40230381e-02  3.08726467e-02 -3.03646401e-02  3.41596566e-02
  5.62033840e-02 -1.76219419e-02 -6.72104508e-02 -2.06081327e-02
 -7.20753521e-02 -3.74119915e-02  9.74490047e-02  2.18476425e-32
  7.23436335e-03  7.30326865e-04 -5.37835285e-02 -9.36973393e-02
  4.48561367e-03 -3.22068706e-02  4.63281153e-03  1.84994657e-02
 -8.03745165e-02 -5.53457923e-02 -5.44613525e-02 -5.47597036e-02
 -3.59635204e-02 -1.98731218e-02  4.75352332e-02 -5.37571535e-02
  6.78434744e-02 -4.92889769e-02  1.12363221e-02 -4.87278728e-03
  4.53607254e-02 -2.18916107e-02 -2.92433542e-04 -1.13695255e-02
  5.01640588e-02  3.57335955e-02 -3.98801528e-02 -3.10518108e-02
 -2.17695646e-02  4.84312475e-02  1.07737608e-01  5.52125322e-03
 -9.48924050e-02 -4.24764380e-02 -3.87021303e-02 -2.20758431e-02
  8.20448156e-03 -6.07905984e-02 -5.61895147e-02 -4.87035401e-02
  3.99277471e-02  3.00782211e-02 -5.32876747e-03  1.50215682e-02
 -4.27353755e-02  3.47593762e-02 -1.35050090e-02 -2.01475024e-02
  6.56393617e-02  2.43414827e-02 -8.20677280e-02 -3.38755436e-02
 -6.33373186e-02  2.07659928e-03  4.16797623e-02 -6.99451268e-02
 -3.67854387e-02 -3.03010195e-02  3.30213755e-02  3.52687277e-02
 -6.72722002e-03 -2.14658584e-02 -8.77700374e-03  3.46168838e-02
 -3.94397192e-02 -1.06382273e-01  3.07718739e-02  3.25023988e-03
  7.89576843e-02 -2.39885282e-02 -3.73652428e-02 -3.46772894e-02
  3.28284279e-02  4.52951640e-02 -7.16665983e-02 -6.17821515e-02
  1.20275334e-01  1.68377552e-02 -3.78280394e-02  1.67231858e-02
  3.96502279e-02 -5.31435050e-02 -3.54016572e-02 -9.92035270e-02
  6.03314629e-03  4.10572924e-02  1.10453339e-02 -2.19620485e-02
 -3.90162226e-04 -2.07521468e-02  6.69177342e-03  4.16792333e-02
  2.49616466e-02  1.77283455e-02 -3.51147912e-02 -1.87587666e-32
 -6.35848893e-03  9.68129653e-03 -7.56128207e-02  9.28245205e-03
 -3.40051926e-03  2.49075480e-02 -2.18237415e-02 -4.15455699e-02
 -1.69548821e-02 -1.88878656e-03 -5.45474514e-02 -4.05718274e-02
  4.20745602e-03  4.53996994e-02  6.80937544e-02  2.03227587e-02
 -6.37487834e-03  2.58573424e-02 -9.77260619e-03  7.63004497e-02
 -1.87629201e-02  5.04533462e-02 -4.19500917e-02  4.02892753e-02
 -1.03609767e-02  2.98586041e-02  6.42895140e-03  7.71669447e-02
 -2.39145197e-02  2.77293362e-02  4.33940366e-02  1.16311396e-02
 -1.33537948e-01  1.03674263e-01 -1.63871627e-02 -1.30130112e-01
  1.12698339e-01  6.88014030e-02 -3.18049043e-02  6.90175369e-02
  7.65379667e-02 -1.96643621e-02 -3.35656740e-02 -3.88491875e-03
 -3.77472155e-02 -4.96856868e-03  6.92398772e-02  4.12282115e-03
 -5.67033365e-02  2.90496908e-02  1.13003723e-01  1.17585380e-02
  4.40177917e-02 -6.89215679e-03  4.22221832e-02  1.62733463e-03
  5.40922210e-02 -6.34673387e-02 -1.12744614e-01 -8.65779445e-02
  6.17314540e-02  3.56371934e-03  3.16659845e-02 -4.13001655e-03
  4.74097542e-02 -1.15309544e-02 -1.12270601e-02  7.23257735e-02
  1.75481942e-02 -7.78644085e-02 -5.16219810e-02 -5.63787483e-02
  2.33241785e-02 -5.56250755e-03 -8.01240467e-03 -5.81721496e-03
 -1.33604265e-03  3.47243883e-02  2.90090553e-02 -1.50770200e-02
 -6.04195707e-02  4.32646051e-02 -1.78547148e-02 -8.72455072e-03
 -1.33153042e-02  4.40447740e-02 -3.87725197e-02  5.47798956e-03
  1.79780368e-02 -7.66722136e-04 -6.63830945e-03  2.59823799e-02
  8.31352994e-02  1.20553814e-01  2.58407332e-02 -5.92355995e-08
  2.19127424e-02 -9.68908742e-02 -6.52704295e-03  5.28930612e-02
  8.39027315e-02  9.23443760e-04 -6.87228367e-02 -4.06193994e-02
  5.21523170e-02 -4.92589064e-02  3.93285230e-02  6.35665953e-02
 -4.97437529e-02 -4.41778414e-02 -1.60584878e-02  3.86375971e-02
 -5.69481775e-03  5.59251495e-02 -2.18046503e-03 -1.98205933e-02
  6.26354739e-02  4.95259138e-03  8.56203027e-03  1.86550748e-02
  1.75683498e-02  2.00624987e-02  2.30878368e-02  5.97393438e-02
 -5.62179200e-02 -1.91046782e-02 -2.53130612e-03 -4.87252362e-02
  6.01736903e-02 -1.01766430e-01  5.47211394e-02  1.94762331e-02
  1.02395918e-02 -4.17495742e-02 -3.40501107e-02  5.76931089e-02
  7.00539276e-02  3.02452669e-02  7.02477768e-02 -6.33836910e-02
  3.18203829e-02 -3.60633135e-02  5.48911653e-02 -2.84489766e-02
  9.04466435e-02 -7.44330660e-02 -1.17816858e-01 -4.25375961e-02
  5.83515987e-02  6.85273185e-02  2.03831540e-03  2.25090962e-02
 -5.04533350e-02  2.91522741e-02  5.18826097e-02  4.08418141e-02
  3.75547707e-02  3.04503236e-02 -2.04053298e-02 -2.49707978e-02]"
"       ],
        &[&[&payer_account_info.key.as_ref(), &[bump]]]
    )?;

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637383940invoke_signed(
    &system_instruction::create_account(
        &payer_account_info.key,
        &pda_account_info.key,
        rent_lamports,
        space.into(),
        program_id
    ),
    &[
        payer_account_info.clone(),
        pda_account_info.clone()
    ],
    &[&[&payer_account_info.key.as_ref(), &[bump]]]
)?;
1234567891011121314# Người dùngTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
  PublicKey,
  TransactionInstruction,
  LAMPORTS_PER_SOL,
  SYSVAR_RENT_PUBKEY,
} from ""@solana/web3.js"";

(async () => {
  // program id
  const programId = new PublicKey(
    ""7ZP42kRwUQ2zgbqXoaXzAFaiQnDyp6swNktTSv8mNQGN""
  );

  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // setup fee payer
  const feePayer = Keypair.generate();
  const feePayerAirdropSignature = await connection.requestAirdrop(
    feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(feePayerAirdropSignature);

  // setup pda
  let [pda, bump] = await PublicKey.findProgramAddress(
    [feePayer.publicKey.toBuffer()],
    programId
  );
  console.log(`bump: ${bump}, pubkey: ${pda.toBase58()}`);

  const data_size = 0;

  let tx = new Transaction().add(
    new TransactionInstruction({
      keys: [
        {
          pubkey: feePayer.publicKey,
          isSigner: true,
          isWritable: true,
        },
        {
          pubkey: pda,
          isSigner: false,
          isWritable: true,
        },
        {
          pubkey: SYSVAR_RENT_PUBKEY,
          isSigner: false,
          isWritable: false,
        },
        {
          pubkey: SystemProgram.programId,
          isSigner: false,
          isWritable: false,
        },
      ],
      data: Buffer.from(new Uint8Array([data_size, bump])),
      programId: programId,
    })
  );

  console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869let tx = new Transaction().add(
  new TransactionInstruction({
    keys: [
      {
        pubkey: feePayer.publicKey,
        isSigner: true,
        isWritable: true,
","[-8.05390403e-02  4.38056365e-02 -1.27067268e-01 -5.73200025e-02
 -1.19837197e-02 -3.49623039e-02  1.01820998e-01  5.96642569e-02
 -1.82024818e-02  3.26498896e-02  8.83372426e-02 -8.76205266e-02
  7.46875703e-02 -1.40781879e-01 -1.17876818e-02  8.42689425e-02
 -1.48567259e-01 -4.09848802e-02  2.05451101e-02 -2.02657818e-03
  3.16106081e-02  2.05278974e-02 -2.84625161e-02 -1.03692906e-02
  5.06908558e-02 -2.60232873e-02  4.26994637e-02  4.51110639e-02
  1.35176163e-02 -4.21698093e-02  6.24158047e-02  3.19891125e-02
 -1.99685842e-02 -2.93473131e-03  1.18821964e-01  1.48931563e-01
  3.20335440e-02 -8.06009863e-03  5.88572910e-03  2.55585127e-02
  3.06905769e-02 -2.99105584e-03 -2.86490023e-02 -1.54722296e-02
 -6.52844012e-02  4.46219370e-02 -3.34332418e-03  5.19975014e-02
  2.16952711e-02 -7.68124610e-02 -7.47282952e-02  1.55300396e-02
 -2.48492323e-02  4.97833546e-03 -2.39162054e-02 -2.18362850e-03
  1.95176359e-02 -3.84752899e-02  1.36590777e-02 -2.80073211e-02
  2.27475576e-02  3.53608280e-02  4.38273028e-02 -3.91091332e-02
 -7.34331608e-02  5.05081117e-02 -5.37649393e-02 -3.39223221e-02
  3.13480530e-04 -3.01867425e-02 -9.07661542e-02 -2.72096954e-02
 -7.93277770e-02  6.81360625e-03 -4.03952189e-02  2.33428776e-02
 -6.33501634e-02  3.66083346e-02  1.46275270e-03 -8.34460631e-02
 -4.85368334e-02 -2.97081731e-02  3.78611088e-02  8.15726519e-02
 -1.95855461e-02  4.87270579e-02 -2.52792761e-02 -5.64663671e-02
  8.19006860e-02  1.13423727e-02  1.45518612e-02  1.29799880e-02
  4.28096354e-02 -3.48607004e-02  1.07830025e-01  4.60416712e-02
  6.35549054e-02 -7.85712060e-03 -6.45700609e-03  1.29823059e-01
 -1.32551240e-02  1.49723487e-02 -2.32680514e-02 -2.15741787e-02
 -2.77542453e-02  2.70287376e-02  3.88741642e-02 -1.60171068e-03
 -1.05924821e-02  1.74057612e-03 -1.18141333e-02  6.65597841e-02
 -1.17677008e-03 -6.70059770e-02  1.87835656e-02 -1.20372931e-02
 -2.45037191e-02 -7.03186961e-03 -3.78969423e-02  1.13045666e-02
  1.00181758e-01 -3.53050157e-02 -9.92509201e-02  2.69623064e-02
 -3.10340878e-02 -4.01386544e-02 -1.27039347e-02  3.54266887e-33
  4.07368615e-02  3.56509630e-03 -4.22906764e-02 -1.43031627e-02
  7.66294543e-03  5.33140451e-02  3.77347283e-02  3.29958312e-02
 -7.56627619e-02  3.81651744e-02 -5.17973714e-02 -8.53494182e-02
 -5.17440261e-03 -3.67219932e-02 -1.27291784e-01 -5.25735803e-02
  3.48433629e-02  1.10686041e-01  6.53887307e-03 -2.59640794e-02
  4.61392011e-03  5.49724735e-02 -1.33233489e-02 -3.53603475e-02
 -5.48729040e-02  9.34403986e-02 -5.52601293e-02 -2.04548147e-03
  1.25858653e-02 -4.05266657e-02  2.64839339e-03 -5.85809024e-03
 -3.13555822e-02 -2.62049735e-02  2.05862056e-02 -7.79928416e-02
  1.52597856e-02 -6.87179491e-02 -1.01612844e-01 -4.65542749e-02
  7.60934874e-03  2.28704629e-03  5.39365876e-03 -3.82654816e-02
  1.95061639e-02 -9.24530160e-03 -3.66424024e-02  7.22238794e-02
  8.24922621e-02  1.75329931e-02 -5.37157282e-02  4.26305272e-03
  3.66550381e-03 -9.19525628e-05 -1.04825199e-01 -6.46943375e-02
 -4.36804183e-02 -4.09176759e-03  8.88810772e-03  1.21292751e-02
 -3.29323970e-02  6.55911416e-02  2.27136519e-02 -3.23916413e-02
  3.27573493e-02 -5.45868129e-02  4.29855473e-02  1.19318794e-02
  5.89694045e-02  4.51415367e-02 -1.72936171e-02  4.13454510e-02
  4.50596493e-03  5.77679463e-02 -4.93450761e-02 -1.05410889e-01
 -2.15979889e-02  2.57465541e-02 -3.72636616e-02  2.82960366e-02
 -1.91254858e-02  1.93063468e-02 -8.90465677e-02 -2.35130880e-02
 -1.11056697e-02  2.57937163e-02  9.21496656e-03 -5.64428717e-02
 -4.94758561e-02 -4.07202430e-02 -3.27014476e-02 -5.67629151e-02
 -2.04177815e-02 -9.17310864e-02 -3.36114764e-02 -5.38279471e-33
  6.66552931e-02 -9.99097005e-02  1.72901992e-02 -9.51183736e-02
  1.31035550e-03 -1.41353393e-02  1.50790508e-03  1.87226776e-02
 -3.83702293e-02  5.09625226e-02  2.16243770e-02 -2.92416140e-02
  5.90336248e-02 -2.79820263e-02  1.25645682e-01  4.28250618e-02
 -1.89508609e-02  3.63872461e-02 -1.96288079e-02  1.80747956e-02
 -7.08841579e-03  1.13310516e-01 -4.43901233e-02  1.07931428e-01
 -6.18569963e-02 -3.00854212e-03  2.24050619e-02  1.08678050e-01
  2.67729862e-03  2.56179385e-02  8.51219893e-02  4.73104045e-02
 -1.19331591e-01  8.27083364e-02 -2.45010071e-02 -8.68849233e-02
  1.21534569e-02  3.78808118e-02 -2.25963667e-02 -4.01360057e-02
  1.06928974e-01 -3.04032229e-02 -8.53412226e-03  8.11490510e-03
  2.84636430e-02 -6.04015961e-02  8.44440311e-02  4.72323224e-02
 -3.64847817e-02  2.02262048e-02  7.51695633e-02 -1.18010513e-01
 -7.31410971e-03 -2.18858272e-02  5.03039919e-03  5.32052256e-02
  1.28819883e-01  1.99207366e-02  7.35549778e-02 -7.96066597e-02
  6.82863295e-02 -4.86480631e-02  1.50935985e-02  4.89512384e-02
  3.82549986e-02 -1.02351978e-02 -2.79581007e-02 -9.14918911e-03
 -2.72109248e-02 -1.22305769e-02 -1.36036398e-02  5.01631945e-03
 -1.19087780e-02 -7.70789199e-03  7.54199550e-02  6.48161545e-02
  9.85491276e-03  2.58002263e-02  1.86719429e-02  3.73774618e-02
 -1.74281467e-02 -2.94890776e-02  4.09087203e-02  2.20903493e-02
 -2.67123319e-02 -6.97436556e-02  3.64911743e-02  3.68024558e-02
 -4.38254252e-02 -3.73797305e-02 -1.08580247e-01 -3.19577530e-02
  1.51526667e-02  6.50003627e-02  1.14475908e-02 -5.95921037e-08
 -4.57802713e-02  3.26090977e-02 -4.32713404e-02  3.39718908e-02
  1.37748541e-02 -3.37601639e-02 -3.90750803e-02 -4.18319553e-02
 -9.65555161e-02 -7.20056742e-02  2.23131478e-02  1.40775638e-02
 -2.36197673e-02 -1.88554414e-02  3.21022198e-02 -2.90268436e-02
 -8.75498652e-02  1.34971617e-02 -5.52263577e-03 -3.28144282e-02
 -1.59747468e-03 -5.37760779e-02  8.90348107e-04 -4.53524850e-02
  3.65779623e-02  3.72227025e-03  6.22101799e-02  1.47179320e-01
  3.26952748e-02 -1.98609140e-02  7.47482553e-02  2.08385233e-02
  1.04800053e-02 -4.68525663e-02 -4.70589614e-03  4.33541238e-02
  4.10643443e-02  2.05395017e-02  2.65348479e-02  4.56420369e-02
 -6.06650785e-02  3.68387587e-02 -4.02647704e-02 -2.94203088e-02
 -3.73449251e-02 -1.51458737e-02 -3.76906171e-02  3.30645554e-02
  6.24121465e-02 -2.10527480e-02 -3.98923978e-02 -7.80292526e-02
  8.70868117e-02  5.23749776e-02 -8.63456726e-02 -7.88619071e-02
 -3.63222398e-02  4.96428981e-02  2.71500032e-02  7.09616542e-02
  9.34940353e-02  5.37135378e-02  2.81067677e-02 -1.28230574e-02]"
"     },
      {
        pubkey: pda,
        isSigner: false,
        isWritable: true,
      },
      {
        pubkey: SYSVAR_RENT_PUBKEY,
        isSigner: false,
        isWritable: false,
      },
      {
        pubkey: SystemProgram.programId,
        isSigner: false,
        isWritable: false,
      },
    ],
    data: Buffer.from(new Uint8Array([data_size, bump])),
    programId: programId,
  })
);

console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
123456789101112131415161718192021222324252627282930# Làm thế nào để ký bằng PDAPDA duy nhất chỉ có thể dược ký bằng Program. Bên dưới là một Program ví dụ của việc ký bằng PDA và truy vấn program đó từ người dùng.# ProgramVí dụ bên dưới trình bày một chỉ thị đơn dùng để chuyển SOL từ PDA với seed là escrow đến một account được truyền vào. invoke_signed được dùng để PDA ký.RustPress </> button to view full sourceuse solana_program::{
    account_info::next_account_info, account_info::AccountInfo, entrypoint,
    entrypoint::ProgramResult, program::invoke_signed, pubkey::Pubkey, system_instruction,
};

entrypoint!(process_instruction);

fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();

    let pda_account_info = next_account_info(account_info_iter)?;
    let to_account_info = next_account_info(account_info_iter)?;
    let system_program_account_info = next_account_info(account_info_iter)?;

    // pass bump seed for saving compute budget
    let bump_seed = instruction_data[0];

    invoke_signed(
        &system_instruction::transfer(
            &pda_account_info.key,
            &to_account_info.key,
            100_000_000, // 0.1 SOL
        ),
        &[
            pda_account_info.clone(),
            to_account_info.clone(),
            system_program_account_info.clone(),
        ],
        &[&[b""escrow"", &[bump_seed]]],
    )?;

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637invoke_signed(
    &system_instruction::transfer(
        &pda_account_info.key,
        &to_account_info.key,
        100_000_000, // 0.1 SOL
    ),
    &[
        pda_account_info.clone(),
        to_account_info.clone(),
        system_program_account_info.clone(),
    ],
    &[&[b""escrow"", &[bump_seed]]],
)?;
12345678910111213# Người dùngTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
 ","[-3.66237611e-02  5.31108975e-02 -7.16709867e-02 -1.01955198e-01
 -1.08509019e-01  1.37036601e-02  7.45759457e-02  4.87836413e-02
  1.06277712e-01  3.24107856e-02  6.68664500e-02 -5.21027669e-02
 -7.70651456e-03 -6.90301135e-02  7.59216305e-03 -3.31753939e-02
 -1.08507812e-01 -9.52862129e-02 -1.47949113e-03 -1.19395323e-01
 -2.79949326e-03  1.33321285e-02 -4.92296405e-02 -4.43189256e-02
 -2.07926482e-02  3.76912616e-02  1.69600789e-02  3.99589166e-02
 -4.81796861e-02 -4.73515987e-02  5.87007068e-02  7.55503625e-02
 -6.27825633e-02  1.05443001e-02  8.10294449e-02  7.99635425e-02
 -2.78385524e-02 -5.48800193e-02  5.71634504e-04 -1.03379646e-03
 -2.83049722e-03 -6.74899621e-03 -8.04569870e-02 -3.56365480e-02
  1.10693596e-01 -1.60776693e-02 -9.65854600e-02  5.04187532e-02
  6.03208765e-02 -4.29883078e-02 -6.26466647e-02  5.14465570e-02
  1.27341934e-02  9.55674201e-02  2.31373385e-02 -8.62312969e-03
 -2.66931262e-02  1.11790992e-01  3.21474969e-02 -2.53720358e-02
 -3.24170589e-02  6.34980872e-02  1.76236650e-03 -3.98187153e-02
  2.43671108e-02  1.50046190e-02 -3.54469828e-02  5.57181425e-03
 -1.83999185e-02  6.56108409e-02 -2.37504672e-02 -5.83221496e-04
 -1.10820264e-01  3.48092131e-02 -7.77901560e-02 -5.59454933e-02
 -4.91233431e-02 -7.70196924e-03  1.42670725e-03 -6.87028244e-02
 -3.37901674e-02 -6.75351769e-02  4.43099327e-02  1.92115139e-02
 -1.12882974e-02  8.28882679e-02 -1.13629311e-01 -2.94877067e-02
  1.84388533e-02 -7.44867744e-03 -6.22884487e-04  5.95302656e-02
 -8.10671039e-03  5.09322025e-02  5.42925783e-02  2.73969881e-02
  2.95447689e-02  3.97603363e-02 -5.18961698e-02  9.83917564e-02
  3.03849578e-02  5.33786304e-02 -3.50384461e-03 -2.56560966e-02
  1.23011302e-02  1.04285730e-02  1.35295942e-01 -7.16031492e-02
 -1.74756087e-02  7.82339927e-03 -2.03136634e-02  3.70900743e-02
  3.43040912e-03 -5.85461482e-02 -1.73295215e-02  5.85985109e-02
 -5.02836630e-02  5.86116090e-02 -4.39243577e-02  2.19753161e-02
  5.22220694e-02 -2.49914285e-02 -1.08516574e-01  2.11496260e-02
 -6.64606392e-02 -6.60714433e-02  1.06443688e-01  1.37628421e-32
 -2.64283810e-02 -1.13820722e-02 -1.53954504e-02 -6.83328044e-03
  2.49273945e-02 -2.36161090e-02 -2.18866505e-02  1.25003578e-02
 -1.09925725e-01  3.60977314e-02 -1.28640920e-01 -8.02581757e-02
 -4.16418500e-02 -3.96854803e-02  4.69500571e-02  9.36010387e-04
  4.26162370e-02  8.29764828e-03  4.49082293e-02 -3.73824500e-02
  2.09967531e-02  3.29496637e-02  4.86369021e-02 -5.80293164e-02
  4.19121981e-02  1.62372384e-02 -4.51010950e-02 -7.64264613e-02
  5.93835674e-02  2.63702907e-02  5.54467458e-03  5.23273125e-02
 -4.60170396e-02 -1.25628458e-02 -2.29729787e-02 -1.18291996e-01
 -2.52560247e-03 -2.56465729e-02 -8.30364674e-02  4.06508856e-02
  2.31745709e-02 -8.51690117e-03 -3.34111080e-02 -1.10353995e-02
 -6.09064884e-02 -4.12564389e-02 -2.19384581e-02 -1.74633134e-02
  7.06740469e-02  1.51128005e-02 -2.84881853e-02  1.14332568e-02
 -5.82780391e-02  2.10707802e-02  1.05705280e-02 -8.18842649e-02
  3.48695144e-02 -1.96805336e-02  3.04741282e-02  5.70960864e-02
  2.33363323e-02 -3.06663010e-02  8.05513635e-02  1.71589516e-02
  6.36063814e-02 -6.09742105e-02 -3.52305472e-02  3.23923752e-02
  5.07673547e-02 -7.44032115e-03 -9.43827182e-02 -1.87333878e-02
  1.23506881e-01  3.80861424e-02 -3.61033226e-03 -6.10899068e-02
 -2.81532612e-02  5.60359377e-03  1.46983573e-02 -4.65169875e-03
  3.33616138e-02 -5.74984588e-02 -2.30435356e-02 -1.56386252e-02
  1.71601889e-03  7.40722790e-02  3.23776365e-03 -5.27744517e-02
 -5.21015413e-02  4.19577770e-02 -5.80221489e-02  4.86359745e-02
 -1.81383882e-02 -2.47669220e-02 -2.00973707e-03 -1.40034276e-32
  4.38204929e-02  3.41035873e-02 -7.47248232e-02 -1.55012077e-02
  5.12547093e-03 -8.42593610e-03  6.16281033e-02 -3.81181426e-02
 -5.63849369e-03  3.43347527e-02  6.63706800e-03 -5.53438347e-03
  2.13490222e-02  2.04103049e-02  9.33963358e-02  3.62104140e-02
  5.82075072e-03  5.19471690e-02 -1.95455495e-02 -2.93032583e-02
  6.36752369e-03 -3.03226616e-03 -2.52160914e-02  9.09165442e-02
 -4.12082709e-02 -3.24974060e-02 -6.33769250e-03  1.70350708e-02
 -1.98880746e-03  4.14982103e-02  3.32392827e-02  8.77020229e-03
 -1.20606259e-01  9.57448483e-02  3.35977552e-03 -5.86412139e-02
  9.16017815e-02  4.40474302e-02 -3.78851146e-02  5.18299416e-02
  9.36892778e-02 -3.27748334e-04 -1.08163245e-01 -3.35293502e-04
  2.33349577e-02 -1.92935448e-02  6.17377907e-02 -1.71431638e-02
 -3.83594036e-02 -7.72202387e-02  1.48581102e-01 -4.90575749e-03
  2.52251495e-02  1.26873993e-03  3.06158029e-02  3.61083895e-02
  8.04553926e-02 -8.69208574e-02  1.88288116e-03 -4.73115370e-02
  2.17998456e-02 -7.14578107e-02  3.13080326e-02 -5.99924885e-02
  1.05980009e-01 -8.08477122e-03 -7.97105581e-03  3.11395265e-02
  1.10254452e-01 -9.11483765e-02  4.85000983e-02 -6.61683232e-02
 -4.59807441e-02  3.97390835e-02 -2.23276485e-03 -1.04541685e-02
 -4.13211659e-02 -5.81864791e-04  1.59348454e-02  7.45869651e-02
  7.10633490e-03  3.01829586e-03  2.57169232e-02  1.77343879e-02
 -1.15733165e-02  1.02239493e-02  4.29015756e-02  1.13120172e-02
 -5.40361367e-02 -1.46687180e-02 -1.76494161e-03  8.08899179e-02
 -2.56967358e-02  8.30333084e-02 -2.09712461e-02 -6.46167138e-08
 -5.15110083e-02 -1.14512809e-01 -6.76478148e-02  1.25047974e-02
  6.41795322e-02 -4.26829010e-02 -5.88941574e-02 -5.11977933e-02
 -2.61633079e-02 -1.07964247e-01 -4.62894663e-02 -1.96915865e-02
 -3.44720520e-02 -2.18741726e-02  3.11554819e-02  1.73516553e-02
 -9.01941303e-03  2.33236211e-03 -1.59808714e-02 -6.70291260e-02
  1.05822891e-01  3.62925194e-02 -3.18201408e-02 -5.82034402e-02
 -4.91307750e-02 -1.93060618e-02  1.21847140e-02  1.42825708e-01
 -7.38755986e-02 -2.04451792e-02  4.55264300e-02 -4.36006188e-02
 -1.18756089e-02 -3.71606052e-02 -5.67628257e-03  2.49204617e-02
  9.95348468e-02  1.16645768e-02  2.07558051e-02 -4.18688320e-02
  1.90173090e-02  2.78592985e-02 -3.13616842e-02  6.66403284e-05
  2.45477185e-02 -2.38296557e-02  3.38026769e-02  3.47040072e-02
  6.67969212e-02 -5.37222028e-02 -1.59839615e-02 -1.53167322e-02
  3.80905494e-02  4.34862822e-02  1.92094455e-03 -8.36888105e-02
 -3.09911743e-02 -1.79567281e-02  4.43260215e-05  5.91709055e-02
  6.94275573e-02  4.07937355e-02 -1.92901511e-02 -5.53878918e-02]"
"Keypair,
  Transaction,
  SystemProgram,
  PublicKey,
  TransactionInstruction,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  // program id
  const programId = new PublicKey(
    ""4wQC2yuVt4rbcPeYLK8WngqbYLg7UAahVjRFrK3NBjP6""
  );

  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // setup fee payer
  const feePayer = Keypair.generate();
  const feePayerAirdropSignature = await connection.requestAirdrop(
    feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(feePayerAirdropSignature);

  // setup pda
  let [pda, bump] = await PublicKey.findProgramAddress(
    [Buffer.from(""escrow"")],
    programId
  );
  console.log(`bump: ${bump}, pubkey: ${pda.toBase58()}`);

  // require 1 SOL for the transfering in the program
  const pdaAirdropSignature = await connection.requestAirdrop(
    pda,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(pdaAirdropSignature);

  // create a random `to`
  const to = Keypair.generate();
  console.log(`receiver: ${to.publicKey.toBase58()}`);

  let tx = new Transaction().add(
    new TransactionInstruction({
      keys: [
        {
          pubkey: pda,
          // Leave `false` here although we need a pda as a signer.
          // It will be escalated on program if we use invoke_signed.
          isSigner: false,
          isWritable: true,
        },
        {
          pubkey: to.publicKey,
          isSigner: false,
          isWritable: true,
        },
        {
          pubkey: SystemProgram.programId,
          isSigner: false,
          isWritable: false,
        },
      ],
      data: Buffer.from(new Uint8Array([bump])),
      programId: programId,
    })
  );

  console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475let tx = new Transaction().add(
  new TransactionInstruction({
    keys: [
      {
        pubkey: pda,
        // Leave `false` here although we need a pda as a signer.
        // It will be escalated on program if we use invoke_signed.
        isSigner: false,
        isWritable: true,
      },
      {
        pubkey: to.publicKey,
        isSigner: false,
        isWritable: true,
      },
 ","[-4.75811921e-02 -6.40986860e-02 -1.30276352e-01  2.96888035e-03
 -4.51884866e-02 -2.59711556e-02  5.66476993e-02  3.05966455e-02
  3.88414897e-02  3.17985378e-02  8.09515268e-02 -5.32397032e-02
 -2.93031372e-02 -9.35419425e-02  2.68865358e-02  3.73058245e-02
 -4.73832153e-02 -1.07041433e-01 -3.86154279e-02  1.20015936e-02
  1.88771319e-02 -1.19469389e-01  2.42216364e-02 -2.69631594e-02
  3.36768739e-02 -4.95421812e-02  3.29298377e-02  1.02372598e-02
 -2.87165716e-02 -4.87625971e-02  9.22977552e-02  3.65273543e-02
 -4.25709747e-02 -1.87546890e-02  4.57036942e-02  1.06035002e-01
  2.27955580e-02 -4.55655493e-02 -6.50885254e-02  1.73494797e-02
 -7.23838154e-03  4.02744040e-02 -8.66166130e-02  3.49562019e-02
  3.80485654e-02 -5.97281046e-02 -6.67461976e-02  1.03937000e-01
  1.25125591e-02 -3.48091237e-02 -6.09944239e-02  2.59588026e-02
 -6.44258931e-02  7.39092827e-02 -8.45838562e-02  4.38085310e-02
  3.31818387e-02  3.61433476e-02  5.95286861e-02 -5.91181777e-02
  8.67999792e-02  4.09679953e-03  6.18164726e-02 -6.74933717e-02
 -3.77516709e-02  3.24859805e-02  2.59439852e-02 -7.49370009e-02
 -1.05369808e-02 -8.85358527e-02 -2.16754619e-03 -2.59154234e-02
 -4.03798744e-02  4.45536375e-02 -6.55961558e-02 -3.60179245e-02
  1.01274857e-02  6.49302080e-02 -6.80195317e-02  4.51122075e-02
 -2.94695701e-02 -3.49563733e-02 -8.55488144e-03  6.86404258e-02
  2.06078831e-02  7.35017657e-02 -5.36894538e-02 -1.25464164e-02
  2.05140654e-02 -2.03897133e-02 -5.03412522e-02 -6.16609817e-03
 -1.02729261e-01 -4.27985378e-02  2.38387641e-02  6.05047047e-02
  3.55463736e-02 -3.26311104e-02  1.83777492e-02  8.44200924e-02
  4.49083894e-02 -4.91479598e-02 -1.06403574e-01 -1.66448224e-02
 -3.71316710e-05  2.47256961e-02  5.86947687e-02 -3.89856799e-03
 -1.09607745e-02  1.40675781e-02 -4.06354256e-02  6.78448677e-02
  4.17776406e-03  1.83904693e-02 -1.09462798e-01  1.22600019e-01
 -2.40392191e-03  4.89036134e-03  5.30215837e-02  1.07744774e-02
  8.48453045e-02  6.20230325e-02 -6.18574917e-02 -6.91830814e-02
 -1.83989294e-02 -4.13674153e-02  1.53024169e-02  1.00915808e-32
 -8.97902995e-03 -2.84103826e-02  1.27421422e-02 -2.65677571e-02
  3.86978649e-02  1.44449929e-02  1.06625266e-01  4.98279408e-02
 -8.37008655e-02 -3.89736146e-02 -7.42456615e-02 -9.17051062e-02
  5.06639145e-02 -1.15982443e-01 -6.71259984e-02 -1.12229399e-02
  1.16543639e-02  5.65398633e-02  6.12494200e-02 -9.75077972e-03
  7.52768340e-03 -2.12135483e-02  2.42713578e-02 -1.93782861e-03
  3.30137298e-03  4.28653285e-02 -3.62966731e-02  5.38848937e-02
  7.16377422e-02  6.14378601e-03  6.68374896e-02  3.50777097e-02
 -5.25137894e-02  6.25827610e-02  3.15515511e-02  1.68948583e-02
 -2.07383446e-02 -4.68191020e-02 -1.26694769e-01 -1.74755137e-02
 -4.36129281e-03  1.44256391e-02 -5.10718524e-02  1.49963684e-02
 -4.26203571e-02 -8.73363856e-03  9.66632832e-03  3.96099407e-03
  9.19277892e-02 -1.14740031e-02 -1.21289521e-01 -1.16325561e-02
  2.07824316e-02  4.28124610e-03  3.05190906e-02 -3.35668251e-02
  1.96559727e-02  9.58507787e-03  5.36576984e-03 -4.28590663e-02
 -6.15916960e-03 -4.19768244e-02 -6.40716264e-03 -4.24337089e-02
  1.52875623e-02 -5.95090464e-02 -6.33817241e-02  5.56526892e-02
  1.95987113e-02 -5.84826656e-02 -8.96874070e-03  4.24628370e-02
  4.96046953e-02  1.32845059e-01 -4.25635837e-03 -3.07698864e-02
 -3.17302011e-02  7.03168698e-05 -4.83353883e-02 -7.67374858e-02
 -1.64536741e-02  5.44034690e-03 -3.57498089e-03  7.00542778e-02
  3.55313718e-02  9.78023410e-02  3.51057301e-04  3.39756347e-02
 -1.86713040e-02  2.36325222e-03 -9.70059354e-03  6.09439565e-03
 -2.34090686e-02 -6.27030507e-02  5.64460736e-03 -1.01986727e-32
 -2.91824155e-02 -4.23846208e-02 -9.36739296e-02  3.53099941e-03
  3.01552135e-02  3.21359038e-02 -1.59839801e-02 -2.52248067e-02
 -4.44334000e-03  3.86260748e-02  7.38301780e-03  4.74710623e-03
  5.35908267e-02 -2.99390387e-02  5.00889532e-02 -1.31790387e-02
 -1.49968639e-03 -3.73317897e-02  7.29281306e-02  2.07631160e-02
  7.99046084e-03  5.02667278e-02 -5.78004010e-02  3.69659662e-02
 -1.13282688e-01 -1.36660310e-02 -1.58623643e-02  9.16002467e-02
 -9.48144719e-02  1.68917682e-02  5.16848452e-02 -6.37125224e-03
 -1.31711692e-01  7.28471577e-02 -1.99534837e-02 -1.06240250e-01
  4.74984348e-02  3.31579261e-02  4.87254700e-04  6.15105331e-02
  4.72347587e-02 -5.52154742e-02 -1.21441195e-02  1.52532961e-02
  1.85197610e-02 -4.67934459e-02  2.57562455e-02 -2.78294384e-02
  2.92520095e-02  8.16539750e-02  2.84642242e-02 -2.60853227e-02
 -2.89618373e-02  8.04100093e-03 -8.04205798e-03  9.73270461e-02
  1.12934805e-01 -2.09429339e-02  4.89896797e-02  5.36622154e-03
  3.26756127e-02 -5.72658367e-02  1.03297196e-01  5.44890277e-02
  1.06500573e-01 -3.85049433e-02  6.61044708e-03  4.41645905e-02
  7.14155808e-02 -1.28377099e-02 -8.69019926e-02  3.39769572e-02
  7.59944459e-03  3.16702686e-02  1.07370071e-01 -2.26802635e-03
 -3.80200371e-02 -1.66814253e-02  6.54237345e-02  1.17899822e-02
  1.35341790e-02 -2.45044357e-03  5.59243001e-02 -1.44827729e-02
  6.49532303e-03 -4.84580025e-02  5.89064211e-02  1.92819145e-02
 -1.10394076e-01 -3.21503840e-02 -4.86502573e-02 -3.81165780e-02
 -6.13498781e-03 -5.38270781e-03  1.16258115e-02 -6.33227302e-08
 -4.50247787e-02  5.77340648e-02 -8.25520605e-02  3.17643955e-02
  3.73890959e-02 -3.36436322e-03 -1.95447505e-02  4.05581817e-02
 -3.57919671e-02 -9.53917950e-02 -4.46348935e-02  4.17874567e-02
  3.66010666e-02  8.91216623e-04  1.44357299e-02 -5.65747470e-02
  1.42590851e-02 -3.19933668e-02 -5.43401949e-02 -6.45529702e-02
  7.12614730e-02 -5.08244708e-02  2.14670505e-02 -3.14534828e-02
  6.34910241e-02 -2.01670220e-03  8.57340842e-02  1.59365401e-01
  1.04244091e-02 -4.46969159e-02 -1.04086742e-01 -8.12738028e-04
  5.68841137e-02 -4.93477061e-02 -6.77721500e-02  3.19419336e-03
 -8.67982488e-03  7.45670637e-03  9.03170332e-02  3.89395244e-02
  5.32301553e-02  4.37421575e-02 -8.51614997e-02 -6.72856253e-03
  6.44544954e-04  5.76638915e-02 -3.60457413e-02  3.45250368e-02
  3.14706527e-02  3.50797437e-02 -2.20199227e-02 -8.76434371e-02
  4.76642959e-02  4.54992913e-02 -4.27699462e-03 -2.06543840e-02
 -3.26766483e-02 -1.79745313e-02  1.35379247e-02  2.31733210e-02
  3.81471589e-02 -1.56764942e-03 -2.87212916e-02 -6.25565797e-02]"
"    {
        pubkey: SystemProgram.programId,
        isSigner: false,
        isWritable: false,
      },
    ],
    data: Buffer.from(new Uint8Array([bump])),
    programId: programId,
  })
);

console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
123456789101112131415161718192021222324252627# Làm thế nào để truy vấn các account của một programĐể truy vấn tất cả các account được sở hữu bởi một program, tham khảo phần hướng dẫn để hiểu về hàm getProgramAccounts và tham số của nó.TSRustCLIimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";

(async () => {
  const MY_PROGRAM_ID = new PublicKey(
    ""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U""
  );
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const accounts = await connection.getProgramAccounts(MY_PROGRAM_ID);

  console.log(`Accounts for program ${MY_PROGRAM_ID}: `);
  console.log(accounts);

  /*
  // Output

  Accounts for program 6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U:  
  [
    {
      account: {
        data: <Buffer 60 06 66 ca 2c 1d c7 85 04 00 00 00 00 00 00 00 05 00 00 00 00 00 00 00 fc>,
        executable: false,
        lamports: 1064880,
        owner: [PublicKey],
        rentEpoch: 228
      },
      pubkey: PublicKey {
        _bn: <BN: 82fc5b91154dc5c840cb464ba6a89212d0fd789367c0a1488fb1941d78f9727a>
      }
    },
    {
      account: {
        data: <Buffer 60 06 66 ca 2c 1d c7 85 03 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 fd>,
        executable: false,
        lamports: 1064880,
        owner: [PublicKey],
        rentEpoch: 229
      },
      pubkey: PublicKey {
        _bn: <BN: 404dc1fe368cf194f20cf3c681a071c61893ced98f65cda12ba5a147e984e669>
      }
    }
  ]
  */
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445use solana_client::rpc_client::RpcClient;
use solana_program::pubkey::Pubkey;
use solana_sdk::commitment_config::CommitmentConfig;
use std::str::FromStr;

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let program_id = Pubkey::from_str(""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U"").unwrap();
    let accounts = connection.get_program_accounts(&program_id).unwrap();

    println!(""accounts for {}, {:?}"", program_id, accounts);
}
1234567891011121314curl https://api.devnet.solana.com -X POST -H ""Content-Type: application/json"" -d '
 {""jsonrpc"":""2.0"", ""id"":1, ""method"":""getProgramAccounts"", ""params"":[""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U""]}
'

# Output
# {""jsonrpc"":""2.0"",""result"":[{""account"":{""data"":""fe2kiXpgfrjWQjCPX3n5MB339Ayqav75ej"",""executable"":false,""lamports"":1064880,""owner"":""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U"",""rentEpoch"":228},""pubkey"":""9pKBrUtJU9GNmct6T2BQtiKqvubtjS9D2if2bm1P8TQd""},{""account"":{""data"":""fe2kiXpgfrjVs7hiZJNVFsbJUuhXhFx3pQ"",""executable"":false,""lamports"":1064880,""owner"":""6a2GdmttJdanBkoHt7f4Kon4hfadx4UTUgJeRkCaiL3U"",""rentEpoch"":229},""pubkey"":""5L1rztbopmgGMWPKb2efoGyhGnrBJm6K53Hf9S4nxdHr""}],""id"":1}
123456# Làm thế nào để đóng accountBạn có thể đóng một account (xoá hết dữ liệu bên trong) bằng cách rút toàn bộ SOL bên trong account đó. (Tham khảo phí thuêopen in new window để hiểu rõ)# ProgramrustPress </> button to view full sourceuse solana_program::{
    account_info::next_account_info, account_info::AccountInfo, entrypoint,
    entrypoint::ProgramResult, pubkey::Pubkey,
};

entrypoint!(process_instruction);

fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
","[-2.16499753e-02  3.38634336e-03 -1.13621414e-01 -6.52676029e-03
 -5.67587949e-02  2.79024690e-02  9.41374674e-02  6.40842244e-02
  7.09280819e-02  5.08504957e-02  3.48596126e-02 -4.27637435e-02
 -3.12839658e-03 -9.02769268e-02  1.72112361e-02 -4.29485179e-02
 -9.25651789e-02 -1.08988829e-01  6.69446308e-03 -8.80322605e-02
  4.45266534e-03 -3.62167172e-02 -1.04434993e-02 -2.87453420e-02
 -3.29729170e-02 -5.20377466e-03 -1.14350384e-02 -1.97428185e-02
 -2.23475788e-02 -1.69356782e-02 -4.07632533e-03  4.18039747e-02
 -3.57777700e-02 -9.53890942e-03  8.80054384e-02  1.28885910e-01
  4.73510427e-03 -2.85641253e-02 -8.04740377e-03 -1.02313459e-02
 -1.68657172e-02  5.71539402e-02 -1.14617378e-01  2.62894612e-02
  9.82103124e-02 -6.10757358e-02 -1.01321779e-01  5.83208986e-02
 -3.67932245e-02  5.54685015e-03 -8.96322727e-02  4.90393564e-02
  1.83904415e-03  3.43995802e-02 -4.05973010e-02 -2.96169221e-02
 -3.68295908e-02  5.50801940e-02  5.94257228e-02 -3.35167870e-02
  2.47943550e-02 -6.19296506e-02  2.94874273e-02 -3.98877524e-02
  1.75454374e-02  8.46718345e-03 -2.26815939e-02 -7.05178268e-03
  4.22861166e-02 -7.74833038e-02 -2.44475044e-02  4.36909683e-02
 -8.46305415e-02  4.81811725e-02 -5.75688593e-02 -6.18247911e-02
 -1.26578519e-02  2.43725050e-02 -2.37324741e-03 -2.63748760e-03
 -5.73588815e-03 -2.32095942e-02  2.70539094e-02  1.57568734e-02
  2.92691048e-02  9.45012271e-02 -7.65594840e-02 -6.00083582e-02
  2.42962576e-02  1.52906487e-02 -1.05165746e-02  8.32075030e-02
 -5.31145781e-02  3.41019593e-02  5.04077189e-02  3.40041891e-02
 -1.42040830e-02  6.38559461e-02 -5.60880043e-02  1.06479898e-01
  3.79558839e-02 -8.93704873e-03 -6.74589630e-03  6.83109537e-02
 -1.36711346e-02 -1.43931862e-02  7.20921755e-02 -1.08923487e-01
 -3.08577679e-02  2.32781414e-02 -4.71221544e-02  6.18827455e-02
  3.86787858e-03  7.23211421e-03 -7.56734312e-02  7.04693496e-02
 -3.14533636e-02  3.25817019e-02  3.00385011e-03  4.61928248e-02
  1.18778147e-01  1.43321007e-02 -3.99399884e-02  1.10858195e-02
 -4.64106761e-02 -4.59792875e-02  8.77403393e-02  1.46182112e-32
 -7.18303397e-02 -4.53134589e-02 -2.66142804e-02 -6.11015689e-03
  2.35861726e-02 -7.56083131e-02  2.92015132e-02  5.21140583e-02
 -8.01826939e-02 -5.36102541e-02 -1.05522431e-01 -2.69655250e-02
  4.12238622e-03 -9.10875648e-02  4.08381447e-02 -2.06271037e-02
  5.14286198e-02  5.43716699e-02  6.33805320e-02 -4.49840575e-02
 -2.97626927e-02 -7.00490642e-03  4.78902347e-02 -6.64302930e-02
 -1.89888254e-02  2.96294466e-02 -4.72349897e-02  4.41939395e-04
  9.97758098e-03  2.84078903e-02  7.51501694e-02  5.72062284e-02
 -4.59938832e-02  5.13140410e-02  1.37922391e-02 -6.80094883e-02
  5.74014895e-03 -6.33984953e-02 -8.09967071e-02 -2.39235573e-02
  1.34066883e-02 -4.39319201e-03 -1.74127091e-02 -9.67343058e-03
 -6.89126626e-02 -7.07576573e-02 -2.18895134e-02 -3.98323759e-02
  5.06915636e-02  5.67457639e-02 -7.16900676e-02  2.92383600e-02
 -2.72234026e-02 -2.48788781e-02  2.74422355e-02 -3.00135724e-02
  2.96357926e-02 -3.31381299e-02  4.56648692e-03  6.46312460e-02
 -2.01598424e-02 -6.66598231e-02  3.84544283e-02 -1.20200601e-03
  2.28224918e-02 -3.62271778e-02 -4.59417179e-02  4.92119752e-02
  6.95996433e-02  3.32445614e-02 -1.45204682e-02  2.08140351e-02
  6.20161742e-03  1.23495147e-01 -1.33641446e-02 -9.15165711e-03
 -2.58137397e-02  8.17317143e-02 -1.01252265e-01 -2.27921419e-02
  2.82047186e-02 -6.76471144e-02 -1.02901660e-01  3.44158709e-02
  2.16975175e-02  1.04442678e-01 -3.14349285e-03 -2.49284767e-02
  5.28955050e-02  6.15396686e-02 -1.56286489e-02  3.97260524e-02
 -5.03275916e-02 -4.94935224e-03 -2.74505652e-02 -1.54021381e-32
  3.29735801e-02 -1.21879838e-02 -1.44258261e-01 -2.27867421e-02
 -8.94847978e-03  1.99926551e-02  2.63882484e-02  1.90380327e-02
 -1.66482218e-02  4.02909778e-02  3.30522731e-02  3.56412260e-03
  4.48902836e-03  3.29285190e-02  6.47155270e-02  4.22942154e-02
  3.83217297e-02 -5.47524244e-02 -1.24988949e-03 -2.28284858e-02
 -4.74363305e-02  4.45782878e-02 -5.60041517e-02  4.32634093e-02
 -6.57353997e-02 -5.55097908e-02 -2.24401895e-02  3.36037390e-02
 -6.54938221e-02 -1.61334481e-02  7.39355162e-02 -2.15729941e-02
 -1.45318359e-01  1.22897737e-01  6.63943589e-03 -8.90032053e-02
  8.95308033e-02  1.65371764e-02 -2.11174395e-02  4.49710153e-02
  1.05846077e-01  3.54399614e-04 -7.33692423e-02  1.31740263e-02
  4.03067432e-02 -2.26211194e-02  6.58055991e-02 -1.97023107e-03
 -2.79113483e-02  1.76158622e-02  1.12818964e-01 -4.63596471e-02
  9.39840525e-02 -3.39952596e-02  3.37822363e-02  9.31464061e-02
  1.09637722e-01 -8.28922838e-02  3.49638844e-03 -4.97075766e-02
  6.30827621e-02 -1.12800129e-01 -5.32481121e-03 -2.90518664e-02
  1.00618504e-01 -7.66028166e-02 -1.46178622e-02  5.17210476e-02
  9.11997333e-02 -2.63855793e-03 -3.39980125e-02  1.48047116e-02
 -1.65079962e-02  8.00062716e-03 -1.93508584e-02 -7.43519841e-03
 -6.78321393e-03 -2.41580848e-02  1.94668192e-02  4.06522751e-02
 -1.10799959e-02  4.10748571e-02 -6.77984580e-03 -4.90012355e-02
  1.78546496e-02 -2.22189780e-02  6.38543665e-02  2.36694906e-02
 -2.22791471e-02  2.14205100e-03 -4.98841703e-02  5.61905745e-03
 -7.51789138e-02  5.37550747e-02 -4.19781506e-02 -6.81359040e-08
 -4.82826717e-02 -1.88501049e-02 -7.61268660e-02  2.23993212e-02
  5.43964654e-02 -3.17238942e-02 -6.74177483e-02 -5.93772158e-02
 -5.30178845e-02 -1.03972107e-01 -1.17214229e-02  2.71416288e-02
 -1.21385483e-02 -1.00146327e-02  1.12083396e-02 -5.96213490e-02
 -3.34400237e-02  4.44115214e-02 -8.83387774e-03 -3.64918634e-02
  6.38046339e-02 -2.14935243e-02 -1.97637454e-02  3.63319442e-02
  3.68559361e-02 -2.24152002e-02  7.23987743e-02  1.13621637e-01
 -5.54572158e-02 -6.11379184e-02 -2.95482986e-02 -3.21124978e-02
  3.84291150e-02  5.78941777e-03 -3.73075642e-02  1.00322142e-02
  2.32909247e-02  2.20573973e-02  3.77907008e-02  2.60120835e-02
  7.69538209e-02  7.11940005e-02  5.50235249e-03  3.07470951e-02
 -4.03271429e-02  6.36876598e-02 -1.06722042e-02 -4.58271801e-03
  8.26090053e-02 -6.57378733e-02 -6.41732514e-02 -3.62928025e-02
 -5.36195189e-03  9.29361954e-02 -3.25103803e-03 -6.30129278e-02
 -3.67473736e-02 -4.78480160e-02 -3.40931006e-02  3.51586416e-02
  4.23509367e-02  5.19241653e-02  1.06673902e-02 -6.97702393e-02]"
"   _instruction_data: &[u8],
) -> ProgramResult {
    let account_info_iter = &mut accounts.iter();

    let source_account_info = next_account_info(account_info_iter)?;
    let dest_account_info = next_account_info(account_info_iter)?;

    let dest_starting_lamports = dest_account_info.lamports();
    **dest_account_info.lamports.borrow_mut() = dest_starting_lamports
        .checked_add(source_account_info.lamports())
        .unwrap();
    **source_account_info.lamports.borrow_mut() = 0;

    let mut source_data = source_account_info.data.borrow_mut();
    source_data.fill(0);

    Ok(())
}
12345678910111213141516171819202122232425262728let dest_starting_lamports = dest_account_info.lamports();
**dest_account_info.lamports.borrow_mut() = dest_starting_lamports
    .checked_add(source_account_info.lamports())
    .unwrap();
**source_account_info.lamports.borrow_mut() = 0;

let mut source_data = source_account_info.data.borrow_mut();
source_data.fill(0);
12345678# Người dùngTSPress </> button to view full sourceimport {
  Keypair,
  Connection,
  Transaction,
  SystemProgram,
  TransactionInstruction,
  PublicKey,
  clusterApiUrl,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";

(async function () {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // setup fee payer
  const feePayer = Keypair.generate();
  const feePayerAirdropSignature = await connection.requestAirdrop(
    feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(feePayerAirdropSignature);

  // remember to deploy your program first
  const programId = new PublicKey(
    ""An47uBJ8kY7hzKPzDyRoFSsDHkZFY9vkfUGpTViWqLFz""
  );

  // 1. create an account to your program
  let newAccount = Keypair.generate();
  console.log(`new account: ${newAccount.publicKey.toBase58()}`);

  let createNewAccountTx = new Transaction().add(
    SystemProgram.createAccount({
      fromPubkey: feePayer.publicKey,
      newAccountPubkey: newAccount.publicKey,
      lamports: 1e8, // 0.1 SOL
      space: 10, // a random value
      programId: programId,
    })
  );
  console.log(
    `create account txhash: ${await connection.sendTransaction(
      createNewAccountTx,
      [feePayer, newAccount]
    )}`
  );

  // 2. close your account
  let closeAccountTx = new Transaction().add(
    new TransactionInstruction({
      keys: [
        {
          pubkey: newAccount.publicKey,
          isSigner: false,
          isWritable: true,
        },
        {
          pubkey: feePayer.publicKey,
          isSigner: false,
          isWritable: true,
        },
      ],
      programId: programId,
    })
  );
  console.log(
    `close account txhash: ${await connection.sendTransaction(closeAccountTx, [
      feePayer,
    ])}`
  );
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172// 1. create an account to your program
let createNewAccountTx = new Transaction().add(
  SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    newAccountPubkey: newAccount.publicKey,
    lamports: 1e8, // 0.1 SOL
    space: 10, // a random value
    programId: programId,
  })
);

// 2. close your account
let closeAccountTx = new","[-1.73487468e-03  5.93911074e-02 -5.05063497e-02 -2.65917033e-02
 -3.05631361e-03 -4.10600044e-02  4.74644154e-02  7.14114979e-02
 -7.99762532e-02  3.46177369e-02  4.98891398e-02 -4.64786738e-02
 -2.10443162e-03 -1.15014091e-01 -1.08473916e-02  4.37175147e-02
 -1.09829895e-01 -2.33657137e-02 -4.53544930e-02 -6.78245425e-02
  6.98418841e-02  4.86334786e-03  4.22393978e-02 -1.41359894e-02
  6.11450113e-02  3.92246656e-02 -8.19110684e-03  4.03815918e-02
  4.28738631e-02 -9.31190476e-02  5.45408055e-02  1.96870826e-02
 -8.22152123e-02  6.77022263e-02  1.51108485e-02  3.73363346e-02
 -2.89994050e-02 -8.03567097e-02 -5.41863774e-05  4.57900614e-02
 -5.41284420e-02  4.99043539e-02 -5.15950993e-02  1.35299535e-02
 -4.36544493e-02  3.39725101e-03 -7.13902861e-02 -2.42018178e-02
  3.49504091e-02 -5.57657629e-02 -7.01084211e-02 -1.42866569e-02
 -1.43210348e-02  1.79024022e-02  5.45417480e-02  4.70834486e-02
  1.96427498e-02 -6.27178624e-02  3.50894332e-02  4.79334220e-02
 -9.77935456e-03  3.28712724e-02  2.69541536e-02 -3.14526893e-02
 -1.06072053e-02  2.73565520e-02 -3.45001295e-02  5.74425906e-02
 -5.41712623e-03 -6.35956898e-02 -4.17856164e-02  8.76986701e-03
 -5.11942171e-02  6.80295154e-02 -7.59579241e-02  1.44187233e-03
 -1.95189863e-02 -4.40503098e-03 -5.36540113e-02 -1.31253928e-01
 -9.52266231e-02  4.33787424e-03  1.63304794e-04  1.43015236e-01
  2.70777307e-02 -6.48120977e-03  3.62683535e-02  4.50899154e-02
  4.38896567e-02  2.61044726e-02  1.60976790e-03  2.87637510e-03
 -5.36998138e-02  4.01623957e-02  6.17104806e-02  8.75232592e-02
  1.71228554e-02 -5.09075336e-02 -2.25243252e-02  6.64402843e-02
 -3.16889659e-02  1.39072491e-02  1.58968323e-03  4.31819223e-02
 -1.95435211e-02 -7.68828392e-02  7.85162374e-02  2.59741452e-02
 -9.48822498e-02 -4.74721268e-02  4.90670577e-02  7.18323365e-02
 -8.85807071e-03 -1.13448249e-02 -1.56508442e-02 -4.05972674e-02
 -1.81649681e-02 -8.74455087e-03 -7.54671544e-02  2.26127096e-02
  9.81069580e-02  6.24874011e-02 -4.40262072e-02  4.67128120e-02
 -7.07109869e-02 -3.79094109e-02 -1.96303008e-03  3.22102056e-33
  1.26938028e-02 -6.60182685e-02 -4.59032841e-02  8.75456631e-03
 -4.84794639e-02  3.12976129e-02  1.63585157e-03  8.57516751e-02
 -8.46142620e-02  9.83765051e-02 -2.78332438e-02 -4.60622385e-02
 -5.32758832e-02 -3.22258472e-02 -1.95811819e-02 -1.02171697e-01
  7.04037920e-02  9.15980935e-02 -2.58640498e-02 -4.45386744e-04
  8.68680105e-02 -1.88126117e-02 -5.05487993e-02 -8.16567168e-02
 -1.89464539e-02  4.96880487e-02 -8.61064345e-02  3.20324302e-02
 -2.27075517e-02 -4.75846464e-03  5.61749488e-02 -5.82538433e-02
 -5.43602393e-04  1.14922756e-02  6.31607249e-02 -9.24119130e-02
  4.06137556e-02  6.23074500e-03 -4.87946011e-02  3.14353593e-02
  6.34434894e-02  5.35803586e-02  3.16176489e-02  2.25921795e-02
  1.88566949e-02  3.28487009e-02 -4.43789475e-02  3.89955901e-02
  7.86016583e-02 -2.24351767e-03 -6.62834197e-02  5.30847237e-02
 -4.33054082e-02  1.39075005e-02  6.61311438e-03 -2.61134491e-03
 -3.52832377e-02 -6.50223047e-02  1.09259179e-02 -6.99478388e-03
 -4.72408682e-02  8.01000074e-02 -8.82577896e-02  6.89438730e-03
  5.87579720e-02 -6.18945668e-03 -4.09032553e-02 -4.38178815e-02
  4.47387099e-02 -1.23740025e-02 -9.37842503e-02  2.11525802e-03
  7.24821305e-03  4.61502932e-02 -7.96582550e-03 -3.84968519e-02
 -4.99316305e-02 -2.65649203e-02 -8.09635594e-02 -8.62761363e-02
  6.62167370e-02 -1.44561790e-02 -7.32874572e-02 -4.01947647e-02
  3.42765264e-02  7.53524229e-02 -3.96940932e-02  2.26260759e-02
 -6.70036823e-02  3.03301997e-02 -9.08906665e-03 -6.40396923e-02
 -2.21204311e-02 -1.21279791e-01 -3.46055329e-02 -4.42615537e-33
  1.59049165e-02  1.28980420e-04  2.55127419e-02 -3.81866507e-02
  5.94081096e-02 -3.17864842e-03  7.69724324e-02 -3.55170369e-02
  8.44587479e-03  9.48876590e-02 -2.59759501e-02 -7.48957135e-03
  2.85697617e-02 -4.89065871e-02  9.10926163e-02  2.18284130e-02
 -7.08619729e-02  5.55253169e-03  5.38704097e-02  3.24761048e-02
 -1.70909893e-02  1.34258434e-01 -9.20344610e-03 -9.94851254e-03
 -3.09247780e-03  7.81856775e-02  2.76914053e-02  6.86141253e-02
 -2.14615818e-02 -7.84320757e-03  4.76445891e-02 -3.33311111e-02
 -4.07654904e-02  5.41277863e-02 -6.93877637e-02 -9.85437781e-02
  4.73276153e-02  4.07215543e-02 -8.62594768e-02  5.01938500e-02
  1.26195893e-01 -2.17870958e-02 -2.04118136e-02 -3.88410650e-02
 -3.24753597e-02  4.17828709e-02 -5.91011299e-03  7.24246874e-02
 -3.91387083e-02 -2.23151986e-02  1.78964827e-02 -4.03710306e-02
 -2.81523708e-02 -1.21053355e-03  4.43610065e-02 -5.92642464e-03
  1.13324217e-01 -2.53748223e-02  1.80898197e-02 -3.49523015e-02
  4.05714549e-02 -9.44952369e-02  7.33689442e-02 -1.96444243e-02
  2.98850816e-02 -1.08455634e-02 -5.66435046e-02 -1.13573484e-02
  2.72012725e-02  4.71362751e-03 -3.25605199e-02 -3.71503495e-02
  3.01313940e-02 -1.05396785e-01  7.10074529e-02  1.01205476e-01
 -4.71400395e-02  1.81149179e-03  5.58901429e-02  5.37329130e-02
 -5.46344705e-02  4.09504995e-02  2.85221618e-02  4.98176217e-02
  2.60463115e-02 -3.19996923e-02  2.31153071e-02 -3.38234892e-03
 -5.52941561e-02 -3.62100415e-02 -7.56126568e-02 -1.64626949e-02
  4.28228900e-02  7.20353331e-03  6.34614052e-03 -6.20526919e-08
 -2.74367593e-02 -9.49267447e-02 -3.32206227e-02  1.24586806e-01
  9.38229784e-02 -8.39211419e-02 -3.23048793e-02  2.96648741e-02
 -1.71032287e-02 -7.33704045e-02  1.77690629e-02  1.12772711e-01
 -1.35630136e-04  1.40148476e-02  3.85352671e-02 -8.25676695e-02
  4.37875418e-03 -5.72888367e-02 -2.67100353e-02 -5.19062430e-02
 -1.23051414e-02 -3.71037386e-02 -1.31008560e-02 -1.84866581e-02
  5.97745553e-02  3.63803804e-02  1.95817580e-03  7.92336687e-02
  8.28204826e-02  6.23007976e-02  9.83102098e-02 -3.21835070e-03
  2.12236326e-02 -1.25578872e-03 -4.57050428e-02 -2.28070617e-02
 -1.41177857e-02  4.35554348e-02  4.47316989e-02 -5.93410283e-02
  2.71755792e-02  3.71977985e-02 -9.77753103e-03  5.71221970e-02
  4.10068184e-02 -5.66435419e-02  3.34591442e-03  2.03054561e-03
  8.55914801e-02 -2.37166937e-02 -3.86724919e-02 -9.44298729e-02
  4.29176241e-02  6.71045948e-03 -4.82744873e-02 -7.22974315e-02
  5.09605417e-03 -3.48344184e-02 -9.41053405e-02  5.43180369e-02
  2.60109571e-03 -9.83220153e-03  2.43120966e-03 -5.21069877e-02]"
"Transaction().add(
  new TransactionInstruction({
    keys: [
      {
        pubkey: newAccount.publicKey,
        isSigner: false,
        isWritable: true,
      },
      {
        pubkey: feePayer.publicKey,
        isSigner: false,
        isWritable: true,
      },
    ],
    programId: programId,
  })
);
1234567891011121314151617181920212223242526272829# Làm thế nào để truy vấn số dư của một accountTSRustPythonC++Press </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  let wallet = new PublicKey(""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY"");
  console.log(
    `${(await connection.getBalance(wallet)) / LAMPORTS_PER_SOL} SOL`
  );
})();
123456789101112131415console.log(`${(await connection.getBalance(wallet)) / LAMPORTS_PER_SOL} SOL`);
1use solana_client::rpc_client::RpcClient;
use solana_program::native_token::LAMPORTS_PER_SOL;
use solana_program::pubkey::Pubkey;
use solana_sdk::commitment_config::CommitmentConfig;
use std::str::FromStr;

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let wallet = Pubkey::from_str(""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY"").unwrap();
    let balance = connection.get_balance(&wallet).unwrap();

    println!(
        ""The account {}, has {} SOL "",
        wallet,
        balance / LAMPORTS_PER_SOL
    );
}
12345678910111213141516171819connection.get_balance(&wallet).unwrap();
1from solders.keypair import Keypair
from solana.rpc.api import Client

client = Client(""https://api.devnet.solana.com"")

key_pair = Keypair()
public_key = key_pair.pubkey()

print(client.get_balance(public_key))
123456789client = Client(""https://api.devnet.solana.com"")

key_pair = Keypair()
public_key = key_pair.pubkey()

client.get_balance(public_key)
123456// clang++ get_balance.cpp -o get_balance -std=c++17 -lssl -lcrypto -lsodium

#include ""solana.hpp""

using namespace many::solana;

int main() {
  Connection connection(""https://api.devnet.solana.com"");

  auto key_pair = Keypair::generate();

  auto public_key = key_pair.public_key;
  std::cout << ""public_key = "" << public_key.to_base58() << std::endl;

  uint64_t balance = connection.get_balance(public_key).unwrap();
  std::cout << ""balance = "" << balance << std::endl;

  return 0;
}
12345678910111213141516171819Connection connection(""https://api.devnet.solana.com"");

auto key_pair = Keypair::generate();
auto public_key = key_pair.public_key;

uint64_t balance = connection.get_balance(public_key).unwrap();
123456TIPNếu bạn muốn đọc số dư token, bạn sẽ cần biết địa chỉ của token account. Tham khảo Token References để hiểu rõ. # Staking# Truy vấn danh sách Validators hiện tạiChúng ta có thể stake SOL và kiếm phần thưởng cho việc nâng cao an toàn mạng lưới. Để stake, bạn phải uỷ quyền SOL có các validators người sẽ thực hiện việc xử lý các giao dịch.TSCLIimport { clusterApiUrl, Connection } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // Get all validators, categorized by current (i.e. active) and deliquent (i.e. inactive)
  const { current, delinquent } = await connection.getVoteAccounts();
  console.log(""current validators: "", current);
  console.log(""all validators: "", current.concat(delinquent));
})();
12345678910solana validators
1# Tạo một Stake AccountTất cả các chỉ thị staking sẽ được đảm nhiệm bởi Stake Programopen in new window. Để bắt đầu, chúng ta tạo ra một Stake Accountopen in new window. Stake Account được tạo ra và quản lý rất khác so với một System Account chuẩn. Thực tế, chúng ta phải đặt Stake Authority và Withdrawal Authority của account đó.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
 ","[-4.15915288e-02 -9.62200109e-03 -1.10355876e-01 -5.58110047e-03
 -6.37170626e-03  8.63921549e-03  4.59542982e-02  1.63733065e-02
  9.10115615e-02  4.88325208e-02  7.46148378e-02 -9.35455635e-02
 -6.10131323e-02 -5.49684688e-02 -1.64918266e-02 -2.54898313e-02
 -9.31272283e-02 -7.28770867e-02 -2.58427337e-02  4.56469948e-04
 -5.95948007e-03 -5.93537763e-02  1.16010765e-02 -3.96444462e-02
  3.28487083e-02 -5.17112464e-02 -1.73558369e-02 -3.13129015e-02
 -3.21121439e-02 -4.44679856e-02  4.79703881e-02  5.24759963e-02
 -3.92174274e-02  1.32901939e-02  7.55442902e-02  8.74084160e-02
  9.79727972e-03 -6.61503971e-02 -3.21336389e-02 -3.79910972e-03
  3.47301960e-02  7.67950267e-02 -4.96245697e-02 -7.74456048e-03
  7.83149973e-02 -4.74909693e-02 -8.06528926e-02  1.87038016e-02
 -1.04297884e-03 -1.09108984e-02 -7.98582882e-02  2.73701102e-02
 -4.57186662e-02  5.71213998e-02 -4.79703620e-02  8.36988539e-02
 -8.85785278e-03  1.86945572e-02  5.28981127e-02 -5.97350933e-02
  1.16055541e-01 -8.50343704e-03  4.65432815e-02 -4.31702286e-02
 -1.77597292e-02 -5.70448674e-03  1.25889173e-02 -2.21307129e-02
 -2.12100092e-02 -3.13621201e-02  3.38880382e-02  2.57907552e-03
 -8.73477682e-02 -7.66164577e-03 -8.85188505e-02 -3.25367935e-02
 -1.32692717e-02  7.81386793e-02 -5.09419329e-02  8.90837610e-02
 -3.32109407e-02 -3.93680483e-02  6.72915503e-02  2.90109869e-02
  8.16336088e-03  1.03301942e-01 -8.03767145e-02 -5.02052270e-02
  1.86022334e-02 -3.21562514e-02 -3.49208452e-02  5.29314317e-02
 -4.94918637e-02 -4.29004878e-02 -1.75876152e-02  2.61736126e-03
  1.75862666e-02  1.07827121e-02  3.01636639e-03  8.18738043e-02
  9.10279602e-02  2.68283132e-02 -4.43399586e-02 -1.35666104e-02
 -1.58433169e-02 -1.49344243e-02  1.10790342e-01 -2.61467639e-02
 -6.13518097e-02  7.16268867e-02 -2.71671955e-02  1.39925793e-01
  1.95190627e-02 -1.64574962e-02 -5.38339764e-02  1.30190089e-01
  1.62650086e-02  1.52554233e-02  3.65748629e-02  6.19039908e-02
  9.92896706e-02  3.38226259e-02 -9.70104486e-02 -3.76489274e-02
 -6.26816601e-02  3.19573353e-03  1.23099787e-02  1.47324134e-32
 -3.67284529e-02 -1.84229687e-02 -2.80593690e-02 -3.73832770e-02
  1.47890812e-02  1.92584563e-03 -8.01823160e-04 -1.50057711e-02
 -8.22581574e-02 -6.17190562e-02 -8.88765529e-02 -4.75507118e-02
 -7.39220157e-03 -1.07848153e-01 -7.51670226e-02  6.80870237e-03
 -1.45572927e-02  5.99975735e-02  7.98163787e-02 -5.89253902e-02
  5.17468574e-03 -2.30692215e-02  5.99702634e-02 -2.83513144e-02
 -2.65519600e-02  2.34185718e-02 -4.87606861e-02 -3.61976251e-02
  2.26856302e-02  1.65347513e-02  3.57822180e-02  4.95793633e-02
 -3.32105830e-02  3.80070023e-02 -2.36136522e-02 -5.51029807e-04
 -2.32483223e-02 -4.15487960e-02 -8.46927091e-02  1.42118745e-02
  4.22025099e-02 -4.18632329e-02 -6.45591319e-02 -1.88808050e-02
 -4.10030186e-02  3.71280201e-02  4.89025638e-02  2.00005248e-02
  1.29633278e-01  1.12026501e-02 -1.72277376e-01 -4.45309021e-02
 -5.68291768e-02 -6.14237376e-02 -9.48338769e-03 -7.15743843e-03
  2.91015152e-02 -2.36755870e-02 -2.02992689e-02  3.14840488e-03
 -3.49696763e-02 -3.24114300e-02 -2.31577344e-02 -2.49375682e-02
 -3.58299427e-02 -3.40547226e-02 -7.12777972e-02  3.20112929e-02
  2.31730528e-02 -4.44105230e-02 -2.84824558e-02  3.58488783e-02
  2.30864938e-02  1.30442709e-01 -6.59049489e-03 -6.78316653e-02
  5.52000478e-03  2.19738651e-02 -2.94284858e-02 -1.01943584e-02
 -2.09755339e-02 -6.40310301e-03 -4.08085585e-02  8.16328973e-02
  5.05344607e-02  8.93502682e-02  3.65544087e-03 -4.63583134e-03
  5.12075871e-02  3.30866985e-02  3.11540626e-02  3.67855071e-03
  8.26055650e-03 -1.13040470e-01 -4.65933643e-02 -1.44011459e-32
  1.56392418e-02 -2.77190171e-02 -1.34168774e-01 -2.19334234e-02
 -8.82442109e-03 -1.62913580e-03 -5.63908182e-02  4.87257205e-02
  5.54683572e-03 -1.96232665e-02  1.90287102e-02 -1.58144534e-02
  6.12840392e-02 -1.57261621e-02 -1.23956595e-02  1.34006713e-03
  2.92894114e-02 -4.67048176e-02  5.61693013e-02 -3.20180878e-02
  1.20449513e-02  9.65568982e-03 -2.19063163e-02  5.02325967e-02
 -8.61949250e-02  6.85370155e-03  9.65975784e-03  5.31208999e-02
 -6.08925931e-02 -2.53629237e-02  5.97042814e-02 -1.35737909e-02
 -1.05559058e-01  1.08276807e-01  6.21390436e-03 -7.38743693e-02
  3.66336107e-02  5.00322469e-02  2.01447513e-02  4.83077168e-02
  7.19090849e-02 -2.41135564e-02 -4.07864898e-02  5.81448711e-03
  1.75387580e-02 -6.45201206e-02  4.76500988e-02 -4.19004336e-02
  2.57256310e-02  3.34305540e-02  3.82803231e-02 -5.94221875e-02
  1.27446074e-02 -2.21739449e-02 -9.26364399e-03  1.11244373e-01
  1.10012978e-01 -5.97074740e-02  2.42286250e-02 -3.74623127e-02
  2.87143383e-02 -5.32534979e-02  5.61639294e-03  3.62028219e-02
  1.42063603e-01 -5.95389418e-02 -9.86522064e-03  8.72920975e-02
  4.21909541e-02  9.71189886e-03 -7.49939829e-02  3.63171995e-02
  3.48810591e-02  1.78407542e-02  6.35342374e-02 -1.04812039e-02
 -5.23703396e-02 -2.68725846e-02  9.84233543e-02  5.20059839e-03
  8.75138864e-03  2.74985507e-02  2.14071721e-02 -4.62674126e-02
  3.70709859e-02 -2.51416117e-02  1.20272292e-02  5.34144416e-02
 -4.16828431e-02 -2.93172356e-02 -7.51235262e-02 -6.94078803e-02
 -6.89114928e-02  1.54214920e-02 -1.47165395e-02 -6.93560906e-08
 -2.93050949e-02  1.08584960e-03 -8.49993825e-02  4.00477424e-02
  6.07933067e-02 -1.37431696e-02  6.64448924e-03  1.71402749e-02
 -4.11341526e-02 -2.98764147e-02 -7.53199011e-02  8.17775875e-02
 -1.11885583e-02 -1.11450367e-02 -1.24019599e-02  1.49924317e-02
  5.22024510e-03  2.20907666e-02 -2.27479506e-02 -6.00925982e-02
  5.86246960e-02 -4.99826409e-02  2.76084132e-02  1.87521316e-02
  6.40588254e-02  1.53020453e-02  2.10003965e-02  1.61618531e-01
  1.89716946e-02 -8.52606073e-02 -8.92097056e-02 -2.37014201e-02
  5.76482788e-02 -7.07303081e-03 -5.49995191e-02  2.85297837e-02
  3.88251618e-02  2.33829692e-02  3.75002734e-02  3.35982516e-02
  1.94614176e-02  7.33153969e-02 -4.30960916e-02  2.19298638e-02
 -6.86901361e-02  4.26755287e-02 -4.59286198e-03  3.69011834e-02
  6.94171414e-02 -1.07402867e-02 -1.26441363e-02 -9.63471085e-02
  9.61939916e-02  6.14146180e-02 -7.17341825e-02 -5.24788490e-03
 -3.31976004e-02  3.37671153e-02  6.94762869e-03  2.70564053e-02
  1.01696163e-01  4.05868776e-02  1.49929442e-03 -4.53732572e-02]"
"StakeProgram,
  Authorized,
  sendAndConfirmTransaction,
  Lockup,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const wallet = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    wallet.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // Create a keypair for our stake account
  const stakeAccount = Keypair.generate();

  // Calculate how much we want to stake
  const minimumRent = await connection.getMinimumBalanceForRentExemption(
    StakeProgram.space
  );
  const amountUserWantsToStake = LAMPORTS_PER_SOL / 2; // This is can be user input. For now, we'll hardcode to 0.5 SOL
  const amountToStake = minimumRent + amountUserWantsToStake;

  // Setup a transaction to create our stake account
  // Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
  const createStakeAccountTx = StakeProgram.createAccount({
    authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set to our wallet.
    fromPubkey: wallet.publicKey,
    lamports: amountToStake,
    lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
    stakePubkey: stakeAccount.publicKey,
  });

  const createStakeAccountTxId = await sendAndConfirmTransaction(
    connection,
    createStakeAccountTx,
    [
      wallet,
      stakeAccount, // Since we're creating a new stake account, we have that account sign as well
    ]
  );
  console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

  // Check our newly created stake account balance. This should be 0.5 SOL.
  let stakeBalance = await connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

  // Verify the status of our stake account. This will start as inactive and will take some time to activate.
  let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// Setup a transaction to create our stake account
// Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
const createStakeAccountTx = StakeProgram.createAccount({
  authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set to our wallet.
  fromPubkey: wallet.publicKey,
  lamports: amountToStake,
  lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
  stakePubkey: stakeAccount.publicKey,
});

const createStakeAccountTxId = await sendAndConfirmTransaction(
  connection,
  createStakeAccountTx,
  [
    wallet,
    stakeAccount, // Since we're creating a new stake account, we have that account sign as well
  ]
);
console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

// Check our newly created stake account balance. This should be 0.5 SOL.
let stakeBalance = await connection.getBalance(stakeAccount.publicKey);
console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

// Verify the status of our stake account. This will start as inactive and will take some time to activate.
let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
console.log(`Stake account status: ${stakeStatus.state}`);
123456789101112131415161718192021222324252627# Uỷ quyền StakeMột khi stake account đã được cọc, Stake Authority có thể uỷ quyền của nó cho một validator. Mỗi stake account có thể chỉ uỷ quyền cho một validator","[-4.06923816e-02 -3.56783681e-02 -1.01631537e-01  4.71118018e-02
 -2.99158879e-02 -9.32685509e-02  6.70315921e-02  4.36307751e-02
  4.81689572e-02  6.20084144e-02  3.88719700e-02 -9.40202326e-02
 -2.72005908e-02 -5.09087779e-02 -8.73217243e-04  3.91115025e-02
 -9.95880663e-02 -8.13877434e-02 -3.02358698e-02 -5.62211790e-04
  4.58925776e-02 -1.41855687e-01  1.18071157e-02  1.60606555e-03
  6.33983985e-02 -8.30522925e-02 -5.45467343e-03 -7.21728289e-03
 -1.77885164e-02 -2.12797094e-02  8.71682167e-02  5.71109541e-02
 -1.55451763e-02 -4.99089397e-02 -2.25810055e-02  9.22541395e-02
 -3.48134935e-02 -8.18715617e-03 -9.25473571e-02 -2.27456186e-02
 -5.28753102e-02  2.27327198e-02 -7.21243247e-02 -2.43532043e-02
 -4.61627822e-03 -1.72677971e-02 -4.97516803e-02  1.19766504e-01
 -2.55702995e-04  5.99904843e-02  1.68357678e-02  6.38811197e-03
  1.28785130e-02  6.00087047e-02 -7.40561411e-02  1.91590637e-02
  3.16145755e-02  4.30595241e-02  4.60483357e-02 -8.96135271e-02
  7.75191858e-02  7.51597481e-03  1.57075133e-02 -7.66859129e-02
  2.45714374e-02 -9.87641793e-03 -3.96644603e-03 -2.86889598e-02
 -3.31807509e-03 -4.70084324e-02  6.34358153e-02 -1.38852457e-02
 -1.35415224e-02 -4.54612076e-02 -4.78133559e-02  2.62930766e-02
  3.34072970e-02  1.71806682e-02  6.74977247e-03  4.84020710e-02
  3.50795574e-02 -7.08353845e-03 -5.08364700e-02  4.57718857e-02
 -1.08112004e-02  3.98678109e-02  3.10012810e-02  5.77277876e-02
  6.10650890e-03 -4.67796065e-02 -1.77749079e-02  5.59948683e-02
 -8.74727517e-02  5.31081995e-03  3.41643170e-02  6.23926111e-02
 -5.31693697e-02 -4.76588607e-02 -8.89061168e-02  7.39969239e-02
  8.88476893e-02 -4.50025909e-02 -5.83202355e-02 -3.83878797e-02
 -6.60540909e-03 -2.45786663e-02  9.83213708e-02 -5.30586019e-02
  4.26905453e-02  6.75462112e-02 -1.87300295e-02  6.71290234e-02
 -2.09264290e-02  5.13471402e-02 -7.80412108e-02  1.22526221e-01
  3.43643241e-02 -2.78329924e-02  4.53491546e-02  2.35944539e-02
  3.99845839e-02  9.45746005e-02  2.03216933e-02 -3.31126451e-02
  7.76527915e-03 -3.01040132e-02 -1.98332518e-02  7.35991266e-33
 -1.22232055e-02 -6.54656347e-03 -1.46526182e-02 -1.26482630e-02
 -1.11516668e-02 -2.31120773e-02  5.51134385e-02  2.11951099e-02
 -1.06597722e-01 -2.68721357e-02 -5.56524247e-02 -5.74160814e-02
  1.11331828e-01 -1.01007260e-01 -3.39713879e-02 -1.20420687e-01
  4.64508981e-02  2.90612616e-02  8.98496509e-02 -3.30903903e-02
 -1.13950921e-02 -8.58843997e-02 -3.57767902e-02 -3.59628000e-04
  9.64373723e-02 -5.71636334e-02 -3.27802449e-02  4.20127437e-02
  1.64021980e-02  1.72725075e-03  8.47478136e-02 -1.31687941e-02
 -3.41555141e-02  2.66032796e-02  2.74805836e-02  2.00606417e-02
  5.53301126e-02 -4.14983891e-02 -6.64087459e-02 -7.86713138e-02
 -5.20076752e-02  1.17837526e-02 -1.04530051e-03 -9.13180504e-03
 -6.50992543e-02  1.67863611e-02  1.06218262e-02  1.10020088e-02
  2.27409843e-02  4.74122278e-02 -1.14871055e-01  1.53414195e-03
 -1.23043451e-02 -3.69464643e-02  7.15374127e-02 -6.75314665e-03
 -9.57088952e-04  2.84179598e-02  1.43971145e-02 -1.71621516e-02
 -1.76882222e-02 -4.67083752e-02 -2.34040320e-02 -3.71543914e-02
 -4.32273746e-02  3.72344553e-02 -7.96781331e-02  4.04150859e-02
 -1.37171615e-02 -1.22876111e-02 -9.80559140e-02  6.07240088e-02
  2.11051578e-04  7.16721565e-02 -6.92053512e-02 -2.00227108e-02
  5.08463979e-02  3.38210836e-02 -7.57372901e-02 -8.22449196e-03
  4.54863571e-02  9.03189706e-04 -8.49727914e-03  6.69402853e-02
  4.38508997e-03  5.11310548e-02  2.96778735e-02  5.86339347e-02
 -5.15942574e-02  1.67668462e-02  8.73804186e-03  2.60003028e-03
  4.84524332e-02 -7.22455755e-02  7.44449487e-03 -6.25007628e-33
 -8.47656503e-02 -1.04827974e-02 -4.70181778e-02 -1.06921420e-03
  1.20276406e-01  5.42791821e-02  5.46738366e-03 -4.08109948e-02
 -5.71997240e-02  6.99553988e-04 -7.31156021e-02  6.17958866e-02
 -2.46010744e-03 -4.22202190e-03 -7.02071283e-03 -4.70718294e-02
 -2.98096668e-02 -5.77675831e-03  1.00817747e-01  2.38668406e-04
 -1.24736317e-02  5.25223650e-02 -3.63843143e-02  3.62307243e-02
 -9.28770229e-02  1.79870166e-02 -2.43743509e-02  6.62232861e-02
 -7.51986057e-02 -1.82264708e-02  4.03926261e-02 -4.93351407e-02
 -1.09262608e-01  6.78504407e-02 -3.54415104e-02 -1.29077479e-01
  2.46012714e-02  4.11458984e-02 -2.63507497e-02  2.11110339e-02
  4.48917150e-02 -4.35919873e-02  2.70925872e-02 -1.68518573e-02
 -2.17768606e-02 -6.46021590e-02  7.31511638e-02 -1.51784886e-02
 -9.65709053e-03  5.55823976e-03 -2.35739164e-03 -5.49064837e-02
 -7.53667997e-03  6.79454282e-02  4.22410145e-02  6.84509650e-02
  9.20811817e-02  1.97076499e-02  3.42626870e-02 -1.43731022e-02
  2.66312081e-02 -7.60219395e-02  8.28197226e-02  9.81031731e-02
  9.61663723e-02 -3.51320505e-02  4.43895571e-02  7.88239911e-02
  4.36883233e-02  8.41975883e-02 -6.77106157e-02  7.35460669e-02
  8.93467963e-02  3.16949412e-02  8.96355212e-02  1.90582387e-02
 -4.14029090e-03 -3.79091315e-02  9.72492024e-02 -1.92431435e-02
  3.04376800e-02 -4.32938850e-03  2.23452672e-02 -1.75771657e-02
  5.77018522e-02 -7.67937675e-03  4.03069966e-02  5.07127400e-03
 -6.05117269e-02  1.27744609e-02 -9.74453390e-02 -2.75408626e-02
  1.48987025e-02 -4.52846140e-02 -2.25765016e-02 -5.80607562e-08
  2.05875486e-02  5.97150996e-02 -5.19472696e-02  3.35540902e-03
 -3.63238319e-03  3.17961238e-02  2.65327543e-02 -7.07576424e-02
 -2.17672363e-02 -2.94472557e-02 -5.61904609e-02  2.58138366e-02
  2.01237649e-02  9.32675204e-04 -9.16432682e-03 -8.51476565e-02
 -3.40080645e-04 -2.75236405e-02 -3.15404609e-02 -3.92485745e-02
  4.52801324e-02  2.03405786e-03 -3.31979021e-02 -4.34463203e-04
  4.51082438e-02  3.09502538e-02  7.37862587e-02  8.77140239e-02
  1.60161164e-02 -1.61481427e-03 -1.00858681e-01  3.52446717e-04
  2.56458856e-02 -3.25536430e-02 -1.04154855e-01  6.71472773e-02
 -8.86315331e-02  3.00264247e-02  6.61578998e-02  1.15195319e-01
  4.21830192e-02  7.05465004e-02 -1.22543015e-02 -2.01964192e-02
 -4.48538698e-02  7.49362335e-02 -1.24491751e-02  3.32350619e-02
  3.40873338e-02 -4.98536136e-03 -1.64395440e-02 -3.97436991e-02
  2.89431382e-02  6.82971403e-02  2.15310026e-02  3.74158437e-04
 -2.88690403e-02 -2.28010546e-02  4.68637049e-02 -9.36273206e-03
  2.97203120e-02 -1.40789161e-02 -1.19258881e-01 -7.96357356e-03]"
"tại một thời điểm. Thêm nữa, tất cả token trong account hoặc là phải để được uỷ quyền, hoặc là phải không uỷ quyền cho bất kỳ ai. Khi đã uỷ quyền, sẽ phải tốn một và epoch để stake account có thể hoạt động.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  StakeProgram,
  Authorized,
  sendAndConfirmTransaction,
  Lockup,
  PublicKey,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const wallet = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    wallet.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // Create a keypair for our stake account
  const stakeAccount = Keypair.generate();

  // Calculate how much we want to stake
  const minimumRent = await connection.getMinimumBalanceForRentExemption(
    StakeProgram.space
  );
  const amountUserWantsToStake = LAMPORTS_PER_SOL / 2; // This is can be user input. For now, we'll hardcode to 0.5 SOL
  const amountToStake = minimumRent + amountUserWantsToStake;

  // Setup a transaction to create our stake account
  // Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
  const createStakeAccountTx = StakeProgram.createAccount({
    authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set to our wallet.
    fromPubkey: wallet.publicKey,
    lamports: amountToStake,
    lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
    stakePubkey: stakeAccount.publicKey,
  });

  const createStakeAccountTxId = await sendAndConfirmTransaction(
    connection,
    createStakeAccountTx,
    [
      wallet,
      stakeAccount, // Since we're creating a new stake account, we have that account sign as well
    ]
  );
  console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

  // Check our newly created stake account balance. This should be 0.5 SOL.
  let stakeBalance = await connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

  // Verify the status of our stake account. This will start as inactive and will take some time to activate.
  let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // To delegate our stake, we first have to select a validator. Here we get all validators and select the first active one.
  const validators = await connection.getVoteAccounts();
  const selectedValidator = validators.current[0];
  const selectedValidatorPubkey = new PublicKey(selectedValidator.votePubkey);

  // With a validator selected, we can now setup a transaction that delegates our stake to their vote account.
  const delegateTx = StakeProgram.delegate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
    votePubkey: selectedValidatorPubkey,
  });

  const delegateTxId = await sendAndConfirmTransaction(connection, delegateTx, [
    wallet,
  ]);
  console.log(
    `Stake account delegated to ${selectedValidatorPubkey}. Tx Id: ${delegateTxId}`
  );

  // Check in on our stake account. It should now be","[-9.47567523e-02 -5.86700141e-02 -1.01395205e-01  8.40319321e-03
  4.96603362e-03 -5.04702516e-02  2.69709472e-02  1.27487630e-03
  8.00847784e-02  5.26029170e-02  1.06460936e-01 -9.30924863e-02
 -5.49555197e-02 -5.50062656e-02  7.30411634e-02  1.79838389e-02
 -1.33831188e-01 -8.66230130e-02 -5.59147671e-02 -5.21161817e-02
 -2.31454708e-02 -1.03866421e-01  1.40572861e-02 -3.62687483e-02
  2.70422753e-02 -6.87951446e-02  1.87973573e-03  2.70691933e-03
  1.52644562e-02 -5.91970165e-04  2.01632511e-02  6.99679330e-02
 -1.25200842e-02 -3.87864225e-02  2.46155933e-02  1.18538670e-01
 -1.02883112e-02 -3.39100622e-02 -4.99009043e-02 -1.09154135e-02
 -4.95775975e-03  6.04010597e-02 -8.75611603e-02 -6.82808459e-02
  4.57031317e-02 -4.27384377e-02 -7.44570866e-02  4.99632433e-02
 -4.11205590e-02 -4.71953582e-03 -8.74326304e-02  4.13860269e-02
 -4.93281856e-02  3.58850919e-02 -1.17460959e-01  4.90821861e-02
  6.33811252e-03  1.03987925e-01  7.79592246e-02 -6.46490827e-02
  5.72037213e-02 -3.39812785e-03  4.93590906e-02 -5.75901046e-02
  5.30234398e-03 -3.71334665e-02 -2.84024850e-02 -4.01911065e-02
  4.21878770e-02 -3.36104333e-02 -1.27278559e-04 -3.64889689e-02
 -9.68854502e-02  1.07991854e-02 -6.34274632e-02  7.72923743e-03
  2.56529469e-02  5.46947084e-02 -3.39937350e-03  6.44870624e-02
  1.12779085e-02 -2.16806754e-02  1.40755828e-02  7.52281174e-02
 -4.33565350e-03  6.24939799e-02 -5.22338785e-02 -1.35240909e-02
 -4.62403172e-04 -5.51823527e-02 -4.33491915e-02  3.27681415e-02
 -6.04163967e-02  1.91294216e-02  1.44082550e-02  3.36296111e-02
  5.54736145e-03  7.20429420e-02 -7.04070106e-02  9.03941095e-02
  1.07724868e-01 -3.34903821e-02 -8.06971416e-02 -1.82955209e-02
 -2.00547893e-02 -4.40820307e-02  1.01656996e-01 -5.66338152e-02
  4.65598777e-02  5.17630130e-02 -4.80442755e-02  8.55174884e-02
 -3.55104059e-02 -4.20713909e-02 -1.15632735e-01  9.35195386e-02
  3.05803642e-02  8.67949519e-03  3.46695930e-02  5.88762686e-02
  7.12846518e-02  1.91586167e-02 -1.33392876e-02 -5.14857359e-02
  1.63281336e-02 -3.56796868e-02  1.94444079e-02  1.30348100e-32
  2.77373777e-03 -8.64860788e-03 -7.65039911e-03 -2.05182564e-02
  8.98106396e-03 -3.11985500e-02  4.23818454e-02 -4.46902625e-02
 -9.32828933e-02 -8.87247249e-02 -3.03750932e-02 -1.86221693e-02
  5.53934984e-02 -1.19589895e-01 -6.24670647e-02 -4.29876335e-02
  2.52123568e-02  5.29145915e-03  6.29054829e-02 -4.78974879e-02
  3.03482283e-02 -9.63855758e-02  1.07832383e-02 -4.87538753e-03
  5.27881607e-02 -1.09259179e-02 -2.15018168e-02  2.60729194e-02
 -1.35886585e-02  2.87258960e-02  8.79609138e-02  2.01939163e-03
 -5.11010624e-02  2.39664949e-02 -2.12927312e-02  8.92909884e-04
  2.55590882e-02 -6.64133802e-02 -8.41535106e-02 -2.71262992e-02
  1.10065555e-02 -1.06866322e-02 -1.19623076e-02 -1.32987043e-02
 -6.56185523e-02  3.97673920e-02  8.06585699e-03  1.75478496e-02
  8.61628875e-02  2.24157069e-02 -1.74066111e-01 -4.79153879e-02
 -2.70268917e-02 -1.81397106e-02  6.64856434e-02 -8.72428715e-03
  4.16176114e-03  1.58410780e-02 -3.11565455e-02 -2.09826492e-02
 -1.66555550e-02 -7.68640637e-02 -2.10196022e-02  1.11307052e-03
 -2.50053108e-02  3.36622372e-02 -5.80510348e-02  3.89011279e-02
  1.75830014e-02 -4.97622713e-02 -4.66798767e-02  1.93621721e-02
  3.24259885e-02  8.15157965e-02 -6.72899261e-02 -3.83657850e-02
  1.97915547e-02  5.98273538e-02 -8.60684216e-02  2.93320115e-03
  6.92099519e-03 -4.89686430e-02 -6.19849116e-02  8.03031027e-02
  3.78925428e-02  2.03859527e-02  1.14258216e-03 -3.14182811e-03
  1.33615490e-02  1.88343469e-02  3.15606333e-02  2.32660696e-02
  7.06257895e-02 -4.83913794e-02 -7.03032389e-02 -1.20079363e-32
 -3.39967795e-02 -1.41126961e-02 -1.06007770e-01 -1.85728669e-02
  8.39855447e-02  1.39427995e-02 -8.71400174e-04  3.82329412e-02
 -2.20053792e-02 -1.43896195e-03 -3.23619950e-03  3.35261575e-03
  2.54963282e-02  4.68558865e-03 -1.17853116e-02  6.54318780e-02
  6.99685887e-02 -2.53655240e-02  7.16755092e-02  3.02367052e-03
 -2.22529490e-02  1.41976262e-02 -3.92117836e-02  1.98132601e-02
 -8.05028304e-02  1.50379669e-02 -7.17549957e-03  3.45424153e-02
 -8.03362727e-02 -1.58954337e-02  7.48282000e-02 -3.75202927e-03
 -1.25916466e-01  1.11389518e-01  5.01737185e-03 -9.14860442e-02
  3.57163772e-02  2.55897809e-02 -2.80862637e-02  2.17207763e-02
  5.17137423e-02 -5.85705377e-02  7.62184104e-03  1.50926970e-02
 -1.80556811e-02 -3.16514187e-02  8.67611542e-02 -1.34141659e-02
 -4.93739769e-02  3.90190668e-02  6.16626926e-02 -5.92158996e-02
  6.71868473e-02 -4.87356307e-03 -1.47534981e-02  9.89136621e-02
  5.80473803e-02 -9.13326046e-04 -4.13065217e-02 -3.26968320e-02
  7.20712245e-02 -1.05105788e-01  3.90347429e-02  5.10773472e-02
  8.30013454e-02 -1.41489524e-02  1.01525569e-02  1.08277455e-01
  8.97713229e-02 -2.21099108e-02 -7.70237744e-02  4.22268622e-02
  6.80091456e-02  4.40942161e-02  5.58772869e-02  3.08656599e-02
 -4.42709997e-02 -3.88239585e-02  9.65057090e-02  2.57216906e-03
 -4.25670575e-03  1.90621093e-02 -1.51929324e-02 -2.67530680e-02
  6.56308755e-02 -9.53215361e-03 -5.27683552e-03  6.19534180e-02
 -5.76862432e-02 -1.26100155e-02 -6.10546023e-02 -2.23614145e-02
 -1.07754515e-02  6.77470565e-02  2.16287933e-02 -6.38578257e-08
  3.20830196e-03 -5.30180801e-03 -8.28628242e-02  2.67485362e-02
  5.75924991e-03  4.35367376e-02 -4.76997299e-03 -3.90082486e-02
 -9.52423178e-03  5.96053619e-03 -5.60365282e-02  4.10862043e-02
  7.31731113e-03  3.06478841e-03  5.85195282e-03 -5.23932613e-02
 -1.08018890e-03  3.94194610e-02 -1.61714572e-02 -8.91034231e-02
  5.87839112e-02 -4.43271473e-02  2.64064129e-02  2.58505736e-02
  7.37963691e-02  4.56312411e-02  2.68170666e-02  8.93150121e-02
 -4.18807976e-02 -6.95025623e-02 -1.14624687e-01 -8.66526831e-03
  3.95892411e-02 -5.14131365e-03 -8.14297795e-02  3.85645665e-02
 -3.64068598e-02 -2.04151813e-02  3.49473841e-02  8.72187018e-02
  5.62666357e-02  7.37583786e-02 -3.25882025e-02  1.94641035e-02
 -2.92778853e-02  7.01882765e-02  2.34390702e-02  3.09408549e-02
  6.09503314e-02 -9.21850224e-05 -3.76296118e-02 -5.77445589e-02
  4.10221964e-02  6.02108054e-02  1.10134585e-02  5.85987838e-03
 -4.65650558e-02  2.93248165e-02  3.43745984e-02  2.54503787e-02
  4.43515666e-02  5.05639277e-02 -5.29840030e-02 -1.86025370e-02]"
"activating.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485// With a validator selected, we can now setup a transaction that delegates our stake to their vote account.
const delegateTx = StakeProgram.delegate({
  stakePubkey: stakeAccount.publicKey,
  authorizedPubkey: wallet.publicKey,
  votePubkey: selectedValidatorPubkey,
});

const delegateTxId = await sendAndConfirmTransaction(connection, delegateTx, [
  wallet,
]);
console.log(
  `Stake account delegated to ${selectedValidatorPubkey}. Tx Id: ${delegateTxId}`
);

// Check in on our stake account. It should now be activating.
stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
console.log(`Stake account status: ${stakeStatus.state}`);
1234567891011121314151617# Truy vấn các nhà uỷ quyền bằng validatorNhiều account có thể stake và một validator cụ thể. Để truy vấn tất cả các staker, bạn sẽ sử dụng getProgramAccounts hoặc getParsedProgramAccounts API. Tham khảo Phần hướng dẫn cho nhiều thông tin hơn. Stake account có độ dài là 200 bytes với Voter Public Key bắt đầu ở bytes thứ 124. Tham khảoopen in new window.TSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";

(async () => {
  const STAKE_PROGRAM_ID = new PublicKey(
    ""Stake11111111111111111111111111111111111111""
  );
  const VOTE_PUB_KEY = ""27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x"";

  const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
  const accounts = await connection.getParsedProgramAccounts(STAKE_PROGRAM_ID, {
    filters: [
      {
        dataSize: 200, // number of bytes
      },
      {
        memcmp: {
          offset: 124, // number of bytes
          bytes: VOTE_PUB_KEY, // base58 encoded string
        },
      },
    ],
  });

  console.log(`Accounts for program ${STAKE_PROGRAM_ID}: `);
  console.log(
    `Total number of delegators found for ${VOTE_PUB_KEY} is: ${accounts.length}`
  );
  if (accounts.length)
    console.log(`Sample delegator:`, JSON.stringify(accounts[0]));

  /*
  // Output

    Accounts for program Stake11111111111111111111111111111111111111: 
    Total number of delegators found for 27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x is: 184
    Sample delegator: 
    {
      ""account"": {
        ""data"": {
          ""parsed"": {
            ""info"": {
              ""meta"": {
                ""authorized"": {
                  ""staker"": ""3VDVh3rHTLkNJp6FVYbuFcaihYBFCQX5VSBZk23ckDGV"",
                  ""withdrawer"": ""EhYXq3ANp5nAerUpbSgd7VK2RRcxK1zNuSQ755G5Mtxx""
                },
                ""lockup"": {
                  ""custodian"": ""3XdBZcURF5nKg3oTZAcfQZg8XEc5eKsx6vK8r3BdGGxg"",
  ","[ 2.80474946e-02  1.52895339e-02 -8.75405446e-02  7.42096379e-02
 -6.02617003e-02 -3.87017429e-02  8.07568952e-02 -1.05519658e-02
  8.10659230e-02  7.92097747e-02  2.61700917e-02 -7.51590356e-02
 -2.20149737e-02  6.36178702e-02  2.80830301e-02  5.97900003e-02
  3.79338209e-03 -3.80005427e-02 -1.77122224e-02  2.23954450e-02
 -1.28465788e-02 -1.21408984e-01  1.48183620e-02  2.55427603e-02
  1.69936065e-02 -1.02239147e-01 -5.07543758e-02 -4.74863350e-02
 -9.89929773e-03 -2.90164296e-02  4.25936095e-02 -6.80520013e-02
 -8.20493102e-02 -5.90367466e-02 -1.36406533e-02  5.64724989e-02
  1.39506729e-02 -5.68678118e-02 -7.37435520e-02 -4.24325503e-02
  5.35466112e-02 -1.44561026e-02 -6.24713972e-02 -3.20477858e-02
  4.62679751e-03  8.12305487e-04 -5.86083578e-03  5.53969108e-02
 -8.17184895e-03 -3.50412214e-03  3.60929500e-03 -4.49549481e-02
  2.69521847e-02  3.95125151e-02 -1.70438010e-02  9.62239057e-02
  5.03911413e-02  5.23096835e-03  4.42259498e-02 -9.71238539e-02
  3.88465859e-02 -4.61879000e-03 -2.39942335e-02 -8.86052698e-02
 -2.56992523e-02  4.88735363e-02 -3.19118276e-02 -5.93193024e-02
 -1.89402178e-02 -4.45301645e-02  9.97200236e-02 -1.08784111e-02
 -2.93701254e-02 -7.41949528e-02 -4.63009253e-02 -4.41416577e-02
 -3.54250753e-03 -1.35441683e-02  5.46759851e-02 -3.66110429e-02
  1.85840763e-02  7.49432519e-02  5.00429757e-02 -2.93755475e-02
  6.98307604e-02  3.94509621e-02 -4.44344580e-02  2.83601694e-03
 -3.80296446e-02  1.63994953e-02  1.80359315e-02  3.98881994e-02
 -2.29748152e-02  1.17706060e-02  4.01223935e-02  5.55827357e-02
 -5.86928725e-02  1.83451362e-03 -2.41876915e-02  3.57212983e-02
  3.01345196e-02 -4.13586125e-02 -1.31977722e-01 -4.46026102e-02
  6.03743717e-02  2.73705907e-02  2.44569741e-02 -6.98511526e-02
 -1.35638919e-02  2.07310189e-02 -2.91104764e-02  9.59126875e-02
  3.59956473e-02  7.35537633e-02 -1.51262255e-02  1.59439787e-01
 -4.10663299e-02  4.55387682e-02 -1.18869254e-02 -4.87189591e-02
 -5.76046854e-03 -2.52130460e-02  4.02703434e-02 -2.98300553e-02
  2.90671811e-02 -8.06646422e-02  2.22571287e-02  6.24841516e-33
  1.18379248e-02 -2.79018488e-02 -2.63111256e-02  5.56713901e-02
  5.93486754e-03  3.82057950e-02  4.74161245e-02 -5.79980053e-02
 -1.22639276e-01 -1.05176317e-02 -3.55245583e-02 -5.66944554e-02
  3.06555070e-02 -1.05091250e-02 -8.80261045e-03 -1.60554469e-01
 -1.05364118e-02  8.32618028e-03  1.20601237e-01 -2.81988159e-02
 -1.30197778e-02  7.54175894e-03 -2.43387818e-02  6.49601687e-03
  1.87695250e-02 -3.70170102e-02 -6.18981123e-02 -5.30818198e-03
 -6.19225837e-02  2.04308368e-02  2.51805503e-02 -2.38392502e-02
  1.45299844e-02 -9.34690796e-03  6.95892423e-02  2.81480718e-02
  5.12971804e-02 -3.17206196e-02 -4.77102883e-02 -8.16934630e-02
  4.08625305e-02 -1.76579002e-02 -1.20797977e-02  5.70848100e-02
 -1.45031542e-01  4.91395919e-03  4.35051508e-04 -2.24704240e-02
  7.26068094e-02  1.34197846e-02 -3.33952680e-02  1.42132528e-02
  5.04918359e-02 -8.18410814e-02 -9.39414650e-03 -3.04883458e-02
 -5.48931444e-03 -2.45201942e-02 -6.26716986e-02 -4.83986922e-02
  4.28692214e-02 -2.03058477e-02 -1.09655313e-01 -1.66830178e-02
 -5.75811649e-03  5.28486967e-02 -8.83197263e-02 -2.79766284e-02
 -2.79606152e-02 -5.67921102e-02 -7.60700852e-02  6.62684217e-02
 -4.72350903e-02 -3.16114910e-02 -3.78354639e-02 -2.46478748e-02
 -9.14446358e-03 -1.36466613e-02 -3.20873857e-02 -1.34269539e-02
  1.21560264e-02 -2.06104778e-02 -7.93086365e-02  7.89744407e-02
  3.47851999e-02  4.64125052e-02 -2.29780730e-02 -8.70425440e-03
  4.28389795e-02  7.94150587e-03 -2.25832611e-02  4.08077501e-02
  7.42838457e-02  1.18117789e-02  2.01559756e-02 -6.79678842e-33
  1.11518204e-02 -8.22748169e-02  2.05947179e-02  5.84269166e-02
  4.17910963e-02  4.68203658e-03 -2.69676298e-02 -8.31495076e-02
 -5.03474176e-02 -7.09295347e-02 -6.63394481e-02  1.51530961e-02
  1.74608435e-02  5.52862361e-02  6.35602176e-02 -7.97524452e-02
 -1.29888460e-01  2.71058567e-02  9.69929472e-02 -4.68298569e-02
  2.32500322e-02  4.87128692e-03  2.28322824e-04  9.93042886e-02
 -6.58798739e-02  2.25006007e-02 -4.39938046e-02  5.39019331e-02
  5.88476136e-02  4.35339659e-03  1.90106705e-02 -1.75831169e-02
 -2.22287048e-02  7.86236972e-02 -7.93303736e-03 -4.29228134e-02
  8.98762867e-02  4.11597155e-02 -2.85861548e-02  5.16139306e-02
  5.07029854e-02 -4.00260203e-02  1.34746333e-05 -1.80807952e-02
  4.93111499e-02 -4.11919616e-02  2.84777395e-02  3.04278340e-02
 -6.49038469e-03  2.58498685e-03  4.82227770e-04 -1.17916092e-02
  2.32713912e-02  9.66993496e-02  2.01126058e-02  2.18260270e-02
  7.90869296e-02 -6.90586567e-02  1.19412884e-01 -4.73771542e-02
 -6.33977680e-03  1.44204199e-02  5.13205156e-02  7.54549727e-02
  7.10558966e-02  1.15644233e-02  2.26335842e-02 -1.92511361e-02
  7.12541193e-02  7.74052292e-02 -1.96401644e-02  6.82286778e-03
 -5.23507537e-04 -6.33401573e-02  1.03857800e-01 -3.10121127e-03
 -2.47134492e-02 -7.45876599e-03  7.57724121e-02  3.58890668e-02
  4.83910441e-02 -2.76388787e-03  7.13038370e-02 -6.40675500e-02
  5.79721816e-02  4.07425910e-02  7.12183341e-02  1.38668306e-02
  1.56961824e-03 -2.93392111e-02  5.22348098e-03 -6.05883710e-02
  5.09675220e-02 -1.29327446e-01 -6.94425628e-02 -5.71354626e-08
 -6.43291250e-02  2.74730399e-02 -6.70230687e-02 -3.03818919e-02
  1.53482268e-02 -4.44788532e-03  5.75481541e-02 -1.86038285e-01
 -2.97798961e-02 -3.32620889e-02 -4.28462848e-02 -8.80546868e-03
 -1.47357828e-03 -1.12642184e-01  4.08768952e-02 -4.38309275e-02
 -6.28845021e-03 -6.38111401e-03  1.05994213e-02  5.30852191e-02
  3.14750709e-02 -1.51241319e-02 -1.08023069e-03  3.34957913e-02
 -3.13846627e-03  2.82448456e-02  4.44354303e-02  1.07458279e-01
  3.75076458e-02  1.01005301e-01 -1.70092601e-02  1.42820626e-02
  4.86609861e-02  1.94941591e-02 -3.88616025e-02  3.87479179e-02
 -4.79071848e-02  2.47815326e-02  4.65763472e-02  2.92888433e-02
  3.05132680e-02  4.42809910e-02 -7.84276891e-03  7.57171586e-03
 -6.36937693e-02  6.47273213e-02 -3.63457762e-02  2.90358402e-02
  7.39857778e-02 -2.43723001e-02 -7.58241862e-03 -3.05605140e-02
  4.74851439e-03  6.83174282e-02 -8.30299333e-02  3.37433852e-02
  2.65943054e-02 -2.16947999e-02  1.86835360e-02 -7.74749070e-02
  1.23870432e-01 -2.70170700e-02 -4.89943884e-02 -4.89229821e-02]"
"               ""epoch"": 0,
                  ""unixTimestamp"": 1822867200
                },
                ""rentExemptReserve"": ""2282880""
              },
              ""stake"": {
                ""creditsObserved"": 58685367,
                ""delegation"": {
                  ""activationEpoch"": ""208"",
                  ""deactivationEpoch"": ""18446744073709551615"",
                  ""stake"": ""433005300621"",
                  ""voter"": ""27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x"",
                  ""warmupCooldownRate"": 0.25
                }
              }
            },
            ""type"": ""delegated""
          },
          ""program"": ""stake"",
          ""space"": 200
        },
        ""executable"": false,
        ""lamports"": 433012149261,
        ""owner"": {
          ""_bn"": ""06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc000000000""
        },
        ""rentEpoch"": 264
      },
      ""pubkey"": {
        ""_bn"": ""0dc8b506f95e52c9ac725e714c7078799dd3268df562161411fe0916a4dc0a43""
      }
    }

  */
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283const STAKE_PROGRAM_ID = new PublicKey(
  ""Stake11111111111111111111111111111111111111""
);
const VOTE_PUB_KEY = ""27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x"";

const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
const accounts = await connection.getParsedProgramAccounts(STAKE_PROGRAM_ID, {
  filters: [
    {
      dataSize: 200, // number of bytes
    },
    {
      memcmp: {
        offset: 124, // number of bytes
        bytes: VOTE_PUB_KEY, // base58 encoded string
      },
    },
  ],
});

console.log(`Accounts for program ${STAKE_PROGRAM_ID}: `);
console.log(
  `Total number of delegators found for","[-4.62598279e-02  2.77551785e-02 -7.56146982e-02  3.70314042e-03
 -3.35673289e-03 -7.88092762e-02 -4.31773067e-03 -2.44027879e-02
  3.57472971e-02  6.06149137e-02  4.90044579e-02 -1.14414833e-01
 -3.38732847e-03 -9.47294012e-03  4.08467511e-03  5.01072593e-02
 -1.15386128e-01 -3.24495919e-02  1.97776388e-02 -6.75358400e-02
  2.33698655e-02  2.52465121e-02 -1.97714381e-02 -3.43723334e-02
  4.48857993e-02  6.67579100e-03 -8.50014091e-02  5.64381331e-02
 -4.93974909e-02 -1.32755507e-02  4.59158160e-02 -2.46281829e-02
  4.70664985e-02 -6.72863040e-04  1.06932759e-01  1.78251520e-01
 -2.90958937e-02 -1.02807291e-01 -4.54602614e-02 -4.29707021e-02
  7.12313503e-02 -5.19524096e-03 -2.44323723e-02 -6.31021857e-02
 -3.84277403e-02 -4.00349051e-02  1.66115332e-02 -1.06130736e-02
 -2.21971367e-02 -1.32901361e-02 -1.49336634e-02  5.08139748e-03
  2.87923645e-02  2.20520459e-02 -1.47910211e-02  3.38830650e-02
 -4.22256701e-02  2.80914847e-02  5.61564751e-02 -5.55566773e-02
  6.67104051e-02  4.93190177e-02 -7.85160214e-02 -3.61858159e-02
 -1.02719683e-02 -1.64460391e-02 -2.20437814e-02 -2.79259961e-03
  2.52359398e-02 -7.33313337e-02  6.48726374e-02  9.12880001e-04
 -1.02750517e-01 -2.18757596e-02 -1.47026172e-02  8.25681612e-02
  2.41074171e-02 -2.33443500e-03  1.62996519e-02 -1.52476162e-01
 -2.75675580e-02 -5.87670654e-02 -1.91645883e-02  4.72562499e-02
 -4.61969934e-02  3.99171934e-02  1.55518353e-02  2.55172923e-02
  3.64242569e-02  4.93863635e-02 -1.24648269e-02 -2.86167096e-02
  1.42593542e-02  8.85617360e-03  5.94640803e-03  8.48827958e-02
  1.34738032e-02  4.88281026e-02 -3.98139060e-02  1.12643532e-01
 -3.01912464e-02  2.18344405e-02 -8.11406597e-02 -3.94677781e-02
  4.07921523e-02  7.12079462e-03  5.44155482e-03  2.37616748e-02
 -4.31728512e-02 -2.97770705e-02 -1.16259633e-02  3.87292728e-02
 -3.09247952e-02 -6.58776611e-02 -6.18566852e-03  3.81439179e-02
 -6.27463683e-02 -2.34117918e-02  3.62489256e-03  7.99163058e-02
  1.61212280e-01 -1.35483099e-02 -2.46895831e-02 -1.40184176e-03
 -2.81909127e-02 -3.71694798e-03  4.38313931e-02  7.93646178e-33
  3.80862951e-02 -7.33492300e-02 -2.47369334e-02 -2.98741162e-02
  3.01180203e-02  4.49550571e-03  1.12035554e-02  7.82774389e-02
 -1.32364467e-01  1.73357707e-02 -4.53401655e-02 -4.43874337e-02
  5.31086139e-02  1.02804955e-02 -1.62341446e-02 -1.00689322e-01
  2.35103462e-02  3.87448221e-02  3.06201540e-02 -3.68925780e-02
 -1.00876614e-02  2.93632057e-02 -5.03693707e-02 -2.34196894e-02
  7.75690190e-03 -1.34297600e-02 -9.72143188e-03 -3.35578658e-02
  2.18339148e-03  4.36865874e-02  4.46791910e-02 -3.01160086e-02
 -9.20105129e-02  1.68698952e-02  6.56204298e-02  7.19678879e-04
  2.32171584e-02 -1.89516153e-02 -6.74031749e-02 -9.79153737e-02
  1.47964368e-02 -2.92216981e-04 -7.16472715e-02  4.41681454e-03
 -4.56439145e-02 -1.34438006e-02 -7.73201138e-03 -5.86100444e-02
  1.38240587e-02  9.82045382e-02 -1.11546395e-02  4.37235497e-02
 -1.35776345e-02 -9.48418677e-03 -4.33109850e-02 -3.24510820e-02
  1.69756785e-02  7.80729577e-03  1.22633595e-02 -8.24178308e-02
  4.37567122e-02  9.03786197e-02 -1.70191322e-02 -6.05711713e-02
  5.96362799e-02 -2.00342741e-02  4.54090489e-03  2.98102293e-02
 -1.77141335e-02  8.39564651e-02 -2.69188117e-02  3.43836285e-02
  7.95269310e-02 -4.75550070e-03 -6.62641227e-02 -7.53242150e-02
  1.49086202e-02 -7.36957509e-03 -1.70423519e-02 -5.18374983e-03
  3.32529023e-02 -1.17200166e-01 -2.98336614e-02 -3.85308415e-02
 -4.11112718e-02 -2.15823893e-02 -2.72334146e-04  1.29705416e-02
 -1.53770270e-02 -3.48256677e-02 -5.91390859e-03  2.12388709e-02
 -8.86153709e-03 -1.07532822e-01 -7.29956850e-02 -9.10945968e-33
  2.11607516e-02 -5.31926528e-02  8.25027842e-03 -2.45863944e-02
 -1.63031474e-03 -3.54199968e-02 -3.89306620e-02 -6.02876069e-03
 -1.45618534e-02  7.88297951e-02  5.02028503e-02 -6.97851647e-03
  2.14106143e-02 -4.31580618e-02  9.90437716e-02  3.04215006e-03
 -9.00917277e-02 -1.47435563e-02  3.05810273e-02 -1.94280669e-02
 -2.63729393e-02  1.58679113e-01 -3.09290159e-02  1.16344981e-01
  3.01360432e-02 -8.71026367e-02 -1.07173435e-02  1.11736760e-01
  6.06854958e-03 -2.49118023e-02 -1.39987264e-02  6.16033748e-03
 -1.58450291e-01  7.38056526e-02 -2.28426922e-02 -7.35318661e-03
  7.40759373e-02  1.08156569e-01 -4.99062613e-02 -2.53896192e-02
  5.59909083e-02  2.03077570e-02 -7.84126222e-02 -9.15035140e-03
  6.66814670e-03  1.07602309e-02  3.50711495e-02  8.39555189e-02
  1.82957556e-02  3.86270955e-02  4.83695697e-03 -2.13610064e-02
  2.07087826e-02  2.59392373e-02  5.56959510e-02  1.08711421e-02
  4.83544171e-02 -4.17639278e-02 -1.28502110e-02 -3.65336575e-02
  5.32154553e-02 -6.34618476e-02  2.42936090e-02  4.90334295e-02
  7.32907504e-02 -7.69039392e-02 -9.00834650e-02 -3.50102037e-03
 -3.99830155e-02 -9.05527454e-03  5.21589667e-02 -3.30619030e-02
 -7.05753863e-02 -4.95802797e-02  1.09815327e-02  8.55892990e-03
  1.56939533e-02  5.41248657e-02 -2.53183376e-02  2.56228936e-03
  3.46160233e-02  6.04959354e-02  4.01534252e-02  1.14848576e-01
  3.49948108e-02 -7.26388171e-02  4.11770195e-02  6.79102167e-02
 -4.51372489e-02  1.83307175e-02 -5.44630066e-02 -2.30528452e-02
  5.09096161e-02  8.20386484e-02 -7.05029722e-03 -6.06385342e-08
 -6.48980886e-02 -6.23733690e-03 -5.69854267e-02  2.59587131e-02
  1.17241159e-01  5.53296041e-03 -1.75835397e-02 -4.05021645e-02
 -1.73722226e-02 -5.24503291e-02  1.24471635e-01 -1.66487135e-02
 -7.60508999e-02 -7.71953389e-02 -1.52386748e-03 -9.09047350e-02
 -8.91787261e-02  3.94489467e-02 -6.82753026e-02 -2.38518585e-02
  3.68358456e-02 -2.28417083e-03  3.83462990e-04 -2.20970251e-03
 -4.03361022e-02  2.38186698e-02  6.74205050e-02  8.33221227e-02
  1.44218961e-02  1.54979620e-02 -3.68574858e-02  2.81949099e-02
  3.24340654e-03 -1.19223393e-01 -3.93046439e-02  8.29205662e-02
 -3.18229683e-02  7.39906952e-02 -6.56282250e-03  7.89352506e-03
 -3.26874815e-02  2.41471194e-02 -3.02364007e-02  3.40829082e-02
  3.95482499e-03  9.59453546e-03 -2.58602463e-02  6.98325559e-02
  1.14582211e-01 -8.85780081e-02 -3.38169634e-02 -1.33158942e-03
 -4.89576720e-02  4.94693518e-02 -3.60736772e-02  3.35732028e-02
  1.60479564e-02 -2.86478233e-02  1.63881145e-02  2.41714083e-02
  1.05539590e-01 -1.37732290e-02 -2.92915814e-02  1.24180522e-02]"
"${VOTE_PUB_KEY} is: ${accounts.length}`
);
if (accounts.length)
  console.log(`Sample delegator:`, JSON.stringify(accounts[0]));

/*
// Output

  Accounts for program Stake11111111111111111111111111111111111111: 
  Total number of delegators found for 27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x is: 184
  Sample delegator: 
  {
    ""account"": {
      ""data"": {
        ""parsed"": {
          ""info"": {
            ""meta"": {
              ""authorized"": {
                ""staker"": ""3VDVh3rHTLkNJp6FVYbuFcaihYBFCQX5VSBZk23ckDGV"",
                ""withdrawer"": ""EhYXq3ANp5nAerUpbSgd7VK2RRcxK1zNuSQ755G5Mtxx""
              },
              ""lockup"": {
                ""custodian"": ""3XdBZcURF5nKg3oTZAcfQZg8XEc5eKsx6vK8r3BdGGxg"",
                ""epoch"": 0,
                ""unixTimestamp"": 1822867200
              },
              ""rentExemptReserve"": ""2282880""
            },
            ""stake"": {
              ""creditsObserved"": 58685367,
              ""delegation"": {
                ""activationEpoch"": ""208"",
                ""deactivationEpoch"": ""18446744073709551615"",
                ""stake"": ""433005300621"",
                ""voter"": ""27MtjMSAQ2BGkXNuJEJkxFyCJT8dugGAaHJ9T7Gc6x4x"",
                ""warmupCooldownRate"": 0.25
              }
            }
          },
          ""type"": ""delegated""
        },
        ""program"": ""stake"",
        ""space"": 200
      },
      ""executable"": false,
      ""lamports"": 433012149261,
      ""owner"": {
        ""_bn"": ""06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc000000000""
      },
      ""rentEpoch"": 264
    },
    ""pubkey"": {
      ""_bn"": ""0dc8b506f95e52c9ac725e714c7078799dd3268df562161411fe0916a4dc0a43""
","[ 3.14649679e-02  5.17890342e-02 -2.25169472e-02  1.87345743e-02
  3.29470560e-02 -1.42860198e-02  1.09543595e-02 -5.54421321e-02
  9.29188281e-02  5.25769852e-02  4.81068809e-03 -7.99035430e-02
 -6.07522950e-03 -3.31418440e-02  1.81507710e-02  3.88754085e-02
 -1.49155512e-01 -3.87358926e-02 -1.86721254e-02 -6.61499724e-02
  1.14273857e-02 -8.60537123e-03 -1.28480271e-02 -2.69841012e-02
  6.00783601e-02 -1.76746212e-03 -5.68910921e-03  1.78409051e-02
 -2.85567064e-02 -1.47152403e-02  5.52459285e-02 -8.97792801e-02
  9.65304300e-03 -7.27096805e-03  4.41525020e-02 -1.95572479e-03
 -5.32030575e-02 -1.12798974e-01  7.54229585e-03 -6.14628457e-02
  6.59859627e-02  5.48500195e-02 -5.45053072e-02 -8.38574246e-02
  3.60248089e-02  5.89838112e-03 -1.12601936e-01  4.13570702e-02
 -2.87179239e-02  3.50059234e-02 -4.29279963e-03 -6.11839332e-02
 -4.89919959e-03  2.46904846e-02  1.91214383e-02 -1.07270153e-02
 -6.60106093e-02  5.35782948e-02  2.43619215e-02 -2.72352155e-02
  8.22787955e-02 -6.39007390e-02 -2.34004669e-02 -8.36265460e-02
 -2.91328672e-02 -1.55356685e-02 -8.21301267e-02 -3.46621834e-02
  1.53577160e-02 -3.18196341e-02  8.03173706e-02 -3.89971049e-03
 -3.73906009e-02 -1.06941238e-01 -4.03403826e-02  1.18869236e-02
 -4.07586545e-02 -1.67183410e-02  1.70837492e-02  5.53334551e-03
 -4.83156703e-02 -5.53500578e-02 -5.05728126e-02  1.59838125e-02
  3.43166478e-02  3.49864513e-02 -4.25776429e-02 -4.67134863e-02
 -5.57059012e-02 -2.50944737e-02 -3.81315947e-02  4.62721661e-02
  3.14970687e-02  2.74934676e-02  4.50121723e-02  8.37238282e-02
 -6.34562597e-02 -1.37193790e-02 -2.70072743e-02  9.56543386e-02
 -2.81009767e-02 -1.26294652e-02  1.25675946e-02 -5.37761301e-02
  9.51176137e-02  4.57563959e-02  6.40255660e-02  2.28689685e-02
 -5.91819398e-02  3.74800041e-02 -1.51316579e-02  1.41289577e-01
 -4.13360931e-02  9.41608474e-02  3.49312611e-02  2.57778354e-02
 -1.47146462e-02  4.73723710e-02  3.98066714e-02  6.79536536e-02
  1.44462302e-01 -5.14897816e-02 -5.65567203e-02 -3.33151631e-02
 -7.41335098e-03  2.06248686e-02  2.72763539e-02  1.55154983e-32
  7.04994276e-02 -2.58615315e-02 -3.28761414e-02 -1.95932686e-02
  4.72707972e-02  3.41734551e-02  2.01581642e-02  4.34760526e-02
 -6.63159341e-02  5.48798554e-02 -7.45632919e-04  9.99712665e-03
  3.72404419e-02  2.14912985e-02  5.61444182e-03 -1.15626082e-01
  4.41860333e-02  3.37488949e-02  4.54988554e-02 -3.21311690e-02
  2.80064642e-02  6.08477509e-03 -2.15443410e-03  4.44715023e-02
  4.04276922e-02 -2.49103345e-02 -3.59116979e-02 -3.32453623e-02
 -7.75698051e-02  5.70144271e-03  1.37199927e-02 -5.16363361e-05
  1.72277575e-03 -3.31903361e-02  4.98280339e-02 -8.90037604e-03
  4.83639427e-02 -5.16893491e-02 -1.01634167e-01 -6.80618808e-02
  7.74234235e-02 -9.13571380e-03 -4.02856022e-02 -1.81885511e-02
 -1.49652347e-01  2.08738800e-02  1.86799075e-02 -7.64687881e-02
  2.04810649e-02  7.43973404e-02 -6.75700158e-02  6.61132932e-02
 -3.08356080e-02 -2.28756573e-02  5.14526814e-02 -5.94437011e-02
 -1.83827039e-02  5.36729731e-02  2.19031014e-02 -6.94503486e-02
 -1.14895413e-02  6.10264540e-02  4.37227227e-02 -2.79880147e-02
 -3.18251662e-02  2.21754264e-04 -7.28062540e-02  2.99812406e-02
  1.17988680e-02  2.61213742e-02 -3.76199838e-03  7.86496624e-02
 -2.30301917e-03 -9.77407862e-03 -7.15712309e-02 -1.00381941e-01
 -6.24859985e-03 -2.36769393e-02  3.79720777e-02  1.58275310e-02
  7.05388710e-02 -5.48184887e-02 -5.43206185e-02  5.26371934e-02
 -3.80815752e-02  8.73845369e-02 -4.49870434e-03 -1.89199205e-02
 -2.03648824e-02  5.89900510e-03  3.40647879e-03  6.95983544e-02
 -2.49548163e-02 -9.14529338e-02 -1.04005434e-01 -1.45705449e-32
 -3.19000371e-02 -8.18443447e-02  5.02435081e-02 -1.26001006e-02
  6.51911497e-02 -7.13305175e-02  1.04856873e-02 -1.37554696e-02
  2.98081785e-02  7.67641142e-03 -2.58437563e-02 -3.93273309e-02
  4.97260084e-03  1.62762627e-02  1.03160538e-01 -9.36317374e-04
 -9.69577059e-02 -3.13791148e-02  9.49572176e-02 -7.71978423e-02
  1.13727218e-02  9.79662612e-02  6.22738004e-02  1.01789743e-01
 -8.27880949e-02 -4.31188010e-02  1.53963994e-02 -2.62325481e-02
 -1.53302075e-02  2.16268580e-02  1.40711674e-02 -2.47932542e-02
 -6.54342473e-02  8.88700411e-02 -2.70248391e-02 -1.04008585e-01
  4.92250025e-02  1.01321578e-01 -3.08006499e-02  2.74729896e-02
  1.63387358e-02 -1.17132515e-02 -1.24664465e-02 -1.33072073e-02
  7.08838319e-03 -2.41674799e-02  1.09855704e-01  9.97314230e-02
  3.81865613e-02 -3.37462337e-03  3.64052728e-02 -4.00231443e-02
  2.32496974e-03  9.48577449e-02  3.47538013e-03 -7.02045634e-02
  6.88384026e-02 -1.20490342e-01  3.23707052e-02 -2.56461240e-02
 -2.42236145e-02 -1.94957796e-02 -1.65627170e-02  5.23771010e-02
  1.05535187e-01 -8.92931074e-02 -5.30770570e-02 -3.69165801e-02
  5.81294671e-02  2.11738609e-02 -3.92800057e-03 -2.37924624e-02
  1.12909023e-02  3.39403450e-02  1.37250395e-02  3.54049844e-03
 -2.85810158e-02 -7.35403853e-04  3.92317697e-02  1.52251609e-02
 -2.08943468e-02  2.65514366e-02  4.11484484e-03  1.53473389e-04
  3.57950367e-02 -3.07531822e-02  5.03599234e-02  4.41108570e-02
 -8.26668367e-02  9.05261934e-02  8.36979505e-03 -3.13868336e-02
  9.46247671e-03 -5.75013421e-02 -2.43111197e-02 -6.02516366e-08
 -3.88185754e-02  2.43651252e-02 -6.96176142e-02  2.14076545e-02
  2.86475252e-02  6.79830089e-03  7.97906518e-02 -6.36205673e-02
  1.89464558e-02 -4.04876508e-02  8.54292661e-02  1.92380268e-02
 -2.61900015e-02 -3.86519060e-02 -4.02135402e-02 -6.70176744e-02
 -7.84156173e-02  5.19924648e-02 -3.21970065e-03  6.29426613e-02
  2.96545960e-02  3.15514058e-02 -2.94261519e-02 -5.11076972e-02
  2.16948092e-02  6.81592375e-02 -1.02794329e-02  1.23051532e-01
 -5.39355129e-02  3.75742353e-02 -4.67464700e-02  1.61836687e-02
  5.18401936e-02 -5.42807877e-02  1.00819133e-02  3.94652933e-02
 -1.35711208e-03  3.52333002e-02 -1.73514150e-02 -1.54666672e-03
 -1.97269339e-02 -3.79822101e-03 -1.52884424e-02  1.43970386e-03
 -8.29610452e-02 -1.02194045e-02  5.47367474e-03  9.62565914e-02
  9.11385641e-02 -1.13925084e-01 -1.11968517e-02 -4.88128103e-02
 -1.92692708e-02  2.49949172e-02 -5.37989475e-02  4.20136377e-02
  3.68218459e-02 -9.24016349e-04  1.17578749e-02 -3.10245045e-02
  1.41377375e-01 -3.69551480e-02 -5.91868386e-02 -5.60754761e-02]"
"   }
  }
  
*/
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879# Dừng stakeBất kỳ lúc nào sau khi một stake account được uỷ quyền, Stake Authority có thể được chọn để dừng account. Dừng stake có thể mất một khoảng thời gian để hoàn thành, và phải được hoàn thành trước có thể rút SOL.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  StakeProgram,
  Authorized,
  sendAndConfirmTransaction,
  Lockup,
  PublicKey,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const wallet = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    wallet.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // Create a keypair for our stake account
  const stakeAccount = Keypair.generate();

  // Calculate how much we want to stake
  const minimumRent = await connection.getMinimumBalanceForRentExemption(
    StakeProgram.space
  );
  const amountUserWantsToStake = LAMPORTS_PER_SOL / 2; // This is can be user input. For now, we'll hardcode to 0.5 SOL
  const amountToStake = minimumRent + amountUserWantsToStake;

  // Setup a transaction to create our stake account
  // Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
  const createStakeAccountTx = StakeProgram.createAccount({
    authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set to our wallet.
    fromPubkey: wallet.publicKey,
    lamports: amountToStake,
    lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
    stakePubkey: stakeAccount.publicKey,
  });

  const createStakeAccountTxId = await sendAndConfirmTransaction(
    connection,
    createStakeAccountTx,
    [
      wallet,
      stakeAccount, // Since we're creating a new stake account, we have that account sign as well
    ]
  );
  console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

  // Check our newly created stake account balance. This should be 0.5 SOL.
  let stakeBalance = await connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

  // Verify the status of our stake account. This will start as inactive and will take some time to activate.
  let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // To delegate our stake, we first have to select a validator. Here we get all validators and select the first active one.
  const validators = await connection.getVoteAccounts();
  const selectedValidator = validators.current[0];
  const selectedValidatorPubkey = new PublicKey(selectedValidator.votePubkey);

  // With a validator selected, we can now setup a transaction that delegates our stake to their vote account.
  const delegateTx = StakeProgram.delegate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
    votePubkey: selectedValidatorPubkey,
  });

  const delegateTxId = await sendAndConfirmTransaction(connection, delegateTx, [
    wallet,
  ]);
  console.log(
    `Stake account delegated to ${selectedValidatorPubkey}. Tx Id: ${delegateTxId}`
  );

  // Check in on","[-7.99740925e-02 -5.03592826e-02 -1.19393587e-01  2.75271363e-03
  1.30079268e-02 -4.60747406e-02  3.38444524e-02 -7.83284288e-03
  8.82900506e-02  4.32856642e-02  9.17552486e-02 -8.74074250e-02
 -4.99711521e-02 -5.38390726e-02  5.45509420e-02  1.38139315e-02
 -1.32522032e-01 -8.11720714e-02 -4.01832573e-02 -2.79342420e-02
 -1.69165097e-02 -1.19837031e-01  1.14259012e-02 -3.59619334e-02
  2.26614885e-02 -7.04981610e-02  3.18140752e-04  1.49178160e-02
 -5.10102697e-03 -2.28598695e-02  4.00081426e-02  5.44634834e-02
 -1.76920146e-02 -3.96012627e-02  2.49932818e-02  1.15421601e-01
 -2.36748457e-02 -3.50417048e-02 -7.78295994e-02  2.81751435e-02
 -2.25716513e-02  5.07218093e-02 -6.48955703e-02 -9.43880826e-02
  5.31912483e-02 -4.26747389e-02 -6.14544302e-02  4.69521247e-02
 -1.80914160e-02 -1.15530081e-02 -9.61994827e-02  1.59065090e-02
 -3.39595862e-02  3.19978297e-02 -9.25188065e-02  3.02839242e-02
 -1.17775500e-02  9.07341838e-02  6.32541403e-02 -7.68240988e-02
  8.07867125e-02  1.12073869e-02  3.99931148e-02 -6.60066232e-02
  5.89285465e-03 -4.19178680e-02 -2.80481856e-02 -3.87279168e-02
  1.38371056e-02 -3.62048298e-02  7.76123907e-03 -2.93439012e-02
 -7.64463618e-02 -1.69502981e-02 -7.26315901e-02 -1.20659396e-02
 -1.42842913e-02  4.92345840e-02  1.24591459e-02  1.86060518e-02
  2.99634878e-02  6.97019277e-03  6.68532960e-03  6.29896522e-02
 -1.89653374e-02  6.81936741e-02 -1.43704889e-02  8.97464156e-03
  2.23649871e-02 -5.66559248e-02 -3.32777016e-02  1.84275843e-02
 -6.45794794e-02  3.86890359e-02  6.89306296e-03  2.01981161e-02
  1.11168325e-02  5.20172976e-02 -7.18495920e-02  9.34431106e-02
  1.10269852e-01 -3.24544907e-02 -9.54437405e-02 -5.37930727e-02
 -3.55685055e-02 -3.36633138e-02  8.34170654e-02 -8.02829489e-03
  3.06810532e-02  5.70280030e-02 -7.42564425e-02  1.02558739e-01
 -6.15703873e-02 -4.30756919e-02 -9.98637825e-02  9.07720998e-02
  2.07334012e-02 -1.60022769e-02  1.33182239e-02  6.53699636e-02
  8.90098810e-02  1.14015781e-03 -2.08493788e-02 -3.68444733e-02
  2.24410966e-02 -3.70413885e-02  4.34762090e-02  1.38108846e-32
  5.93211548e-03 -2.03949035e-04 -3.10403388e-02 -1.33315949e-02
  2.89644208e-03 -1.89562403e-02  2.51252912e-02 -3.23050618e-02
 -1.16118386e-01 -5.64138368e-02 -4.63330261e-02 -2.06358489e-02
  6.49430901e-02 -1.18098795e-01 -7.53874108e-02 -4.08341214e-02
  5.08009866e-02  1.57645252e-02  6.09628819e-02 -5.08920327e-02
  2.06017494e-02 -7.52029419e-02  1.27031403e-02 -9.71866213e-03
  4.24245484e-02 -3.51559394e-03 -3.33809555e-02  2.42185872e-02
 -2.76708174e-02  2.02751234e-02  1.37202322e-01 -1.17586674e-02
 -4.71014343e-02  7.99752679e-03 -1.66581161e-02  3.78975202e-03
  2.48861518e-02 -6.22644015e-02 -9.42095295e-02 -4.02344912e-02
  1.36651667e-02 -1.72958691e-02 -1.52189126e-02 -2.49162223e-03
 -6.41463771e-02  4.48567234e-02  4.04894771e-03  1.16408058e-02
  5.19849397e-02  2.19468251e-02 -1.65818498e-01 -2.27918010e-02
 -2.71031689e-02 -6.74746605e-03  6.30723909e-02 -8.26831255e-03
 -8.59502796e-03  4.95459000e-03 -2.01929007e-02 -2.88068820e-02
 -2.69036042e-03 -7.27990195e-02 -5.69551773e-02 -2.26883050e-02
 -2.19664630e-02  6.94278209e-03 -4.00783420e-02  4.87925112e-02
  1.96152236e-02 -6.73985556e-02 -4.13218439e-02  2.01062858e-03
  3.55653986e-02  1.03526115e-01 -9.20937359e-02 -3.80799063e-02
  1.00526949e-02  5.51471338e-02 -6.39090985e-02  2.24029329e-02
 -1.55404257e-02 -4.45085615e-02 -5.78010269e-02  7.33346716e-02
  3.13996337e-02  4.09147665e-02 -8.03398620e-03 -5.79794962e-03
  1.42442165e-02  2.70614326e-02  2.35668849e-02  3.20963897e-02
  4.37011048e-02 -7.06190169e-02 -4.35947776e-02 -1.27021936e-32
 -2.62756087e-02 -3.10676936e-02 -1.23942457e-01 -2.29023155e-02
  7.81301335e-02  2.40649786e-02  9.80104785e-03  4.75245016e-03
 -1.10829296e-02  2.54055252e-03 -6.58915238e-03  8.90980940e-03
  4.02080119e-02  1.01463478e-02 -3.70564987e-03  5.04953749e-02
  4.03153822e-02 -1.84611585e-02  5.14918938e-02  5.81218209e-03
 -3.07498854e-02  3.91664505e-02 -3.90095003e-02  4.05561402e-02
 -9.60268527e-02  3.32139023e-02  8.97187274e-03  5.26373573e-02
 -9.87230614e-02 -2.22571264e-03  9.74406824e-02 -1.68938488e-02
 -1.47232637e-01  1.00847676e-01 -4.32464667e-03 -9.42749679e-02
  2.92684361e-02  3.76988128e-02 -5.48287369e-02  1.87583137e-02
  5.81613444e-02 -3.68312113e-02  2.01310515e-02 -7.97408726e-03
 -1.56421810e-02 -6.91719130e-02  7.79237524e-02  1.33141910e-03
  1.15253194e-03  4.33143638e-02  4.18743454e-02 -7.38043264e-02
  7.71530867e-02 -3.05485670e-02  6.23774622e-03  1.01658814e-01
  2.19222698e-02 -1.79907016e-03 -1.78210456e-02 -1.42921759e-02
  7.48288408e-02 -9.42030028e-02  4.99278829e-02  7.60234967e-02
  1.02775887e-01 -5.00146858e-03  2.64452212e-02  1.03565976e-01
  1.09962024e-01 -1.97748337e-02 -8.24402273e-02  4.57568988e-02
  7.12466612e-02  3.76271904e-02  6.78424910e-02  2.93265544e-02
 -3.63491699e-02  8.69747717e-03  1.01774327e-01 -2.56804489e-02
  1.90447997e-02 -3.21056135e-03 -9.41992924e-03 -5.03333956e-02
  8.75826776e-02  2.47417227e-03  6.98415190e-03  3.90032344e-02
 -2.16664486e-02 -5.15797548e-02 -4.92255092e-02 -2.86810528e-02
  3.62061663e-03  5.68373241e-02  1.78716090e-02 -6.45979625e-08
 -8.46899208e-03  2.26720963e-02 -7.20151812e-02  2.39499807e-02
  1.23810507e-02  1.39839528e-02  2.42621601e-02 -4.65383045e-02
 -1.44201890e-02  1.25322407e-02 -4.70921062e-02  5.47081493e-02
  1.76554285e-02  7.50334561e-03  9.24230274e-03 -5.32768965e-02
 -4.13023820e-03  4.01063487e-02 -1.61588881e-02 -9.44297090e-02
  6.87355697e-02 -6.31328821e-02  1.97884329e-02  2.55083907e-02
  9.42664742e-02  3.39071117e-02  2.96042301e-02  8.57625976e-02
 -1.83535982e-02 -3.59464325e-02 -7.24206492e-02 -6.56120572e-03
  3.32268290e-02 -4.35361732e-03 -5.78942150e-02  5.22536337e-02
 -3.57016623e-02  2.27170829e-02  3.00248805e-02  8.34569559e-02
  5.11120595e-02  4.87840846e-02  5.42629452e-04 -1.56224042e-03
 -4.83453050e-02  7.93218017e-02  5.87517442e-03  3.67423408e-02
  6.63932338e-02 -2.47885771e-02 -3.65331508e-02 -6.83057904e-02
  4.24269997e-02  5.17282002e-02  6.30907435e-03 -6.16261084e-03
 -2.01547276e-02  3.30546387e-02  4.95535098e-02  2.32842546e-02
  5.03675491e-02  3.75034176e-02 -8.00504908e-02 -1.07978154e-02]"
"our stake account. It should now be activating.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // At anytime we can choose to deactivate our stake. Our stake account must be inactive before we can withdraw funds.
  const deactivateTx = StakeProgram.deactivate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
  });
  const deactivateTxId = await sendAndConfirmTransaction(
    connection,
    deactivateTx,
    [wallet]
  );
  console.log(`Stake account deactivated. Tx Id: ${deactivateTxId}`);

  // Check in on our stake account. It should now be inactive.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101// At anytime we can choose to deactivate our stake. Our stake account must be inactive before we can withdraw funds.
const deactivateTx = StakeProgram.deactivate({
  stakePubkey: stakeAccount.publicKey,
  authorizedPubkey: wallet.publicKey,
});
const deactivateTxId = await sendAndConfirmTransaction(
  connection,
  deactivateTx,
  [wallet]
);
console.log(`Stake account deactivated. Tx Id: ${deactivateTxId}`);

// Check in on our stake account. It should now be inactive.
stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
console.log(`Stake account status: ${stakeStatus.state}`);
123456789101112131415# Rút StakeMột khi đã dừng stake, Withdrawal Authority có thể rút SOL về lại một system account. Và khi một stake account không còn được uỷ quyền cũng như có số dư là 0 SOL, nó sẽ bị huỷ ngay lập tức.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  StakeProgram,
  Authorized,
  sendAndConfirmTransaction,
  Lockup,
  PublicKey,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const wallet = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    wallet.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // Create a keypair for our stake account
  const stakeAccount = Keypair.generate();

  // Calculate how much we want to stake
  const minimumRent = await connection.getMinimumBalanceForRentExemption(
    StakeProgram.space
  );
  const amountUserWantsToStake = LAMPORTS_PER_SOL / 2; // This is can be user input. For now, we'll hardcode to 0.5 SOL
  const amountToStake = minimumRent + amountUserWantsToStake;

  // Setup a transaction to create our stake account
  // Note: `StakeProgram.createAccount` returns a `Transaction` preconfigured with the necessary `TransactionInstruction`s
  const createStakeAccountTx = StakeProgram.createAccount({
    authorized: new Authorized(wallet.publicKey, wallet.publicKey), // Here we set two authorities: Stake Authority and Withdrawal Authority. Both are set to our wallet.
    fromPubkey: wallet.publicKey,
    lamports: amountToStake,
    lockup: new Lockup(0, 0, wallet.publicKey), // Optional. We'll set this to 0 for demonstration purposes.
    stakePubkey: stakeAccount.publicKey,
  });

  const createStakeAccountTxId = await sendAndConfirmTransaction(
    connection,
    createStakeAccountTx,
    [
      wallet,
      stakeAccount, // Since we're creating a new stake account, we have that account sign as well
    ]
  );
  console.log(`Stake account created. Tx Id: ${createStakeAccountTxId}`);

  // Check our newly created stake account balance. This should be 0.5 SOL.
  let stakeBalance = await","[ 4.80048396e-02  3.19808871e-02 -4.87418510e-02  9.78175551e-02
  1.56077221e-02 -7.06800967e-02  7.13178441e-02 -3.30300033e-02
  1.17534392e-01  2.03357749e-02  4.12177145e-02 -3.57613410e-03
 -3.24739888e-02  4.53803986e-02  2.75477041e-02  3.56749408e-02
 -6.67423829e-02 -4.43504415e-02  3.82097960e-02  3.18997726e-02
 -9.90410242e-03 -1.07926451e-01 -6.86952285e-03  5.25600053e-02
  4.50194031e-02 -8.49990249e-02 -3.25004049e-02 -3.82082351e-02
 -4.44950610e-02 -7.67605100e-03  2.45681647e-02 -1.53505215e-02
 -2.57229507e-02 -9.12495032e-02 -3.07908356e-02  3.68826650e-02
 -4.17877696e-02 -1.28213782e-02 -6.32182956e-02 -6.22848906e-02
  1.92074385e-02  4.46196087e-03 -5.12376428e-02 -8.72938782e-02
  6.99655041e-02  6.90451404e-03 -7.67997280e-02  2.43783500e-02
 -1.36181777e-02  5.92558980e-02  3.55223194e-02 -3.95162851e-02
 -1.81287862e-02  1.50412228e-02  4.19188320e-04  7.31274709e-02
  9.61751193e-02  6.74813762e-02  2.85444781e-02 -7.60945678e-02
  3.95184793e-02 -1.46767963e-02 -9.60533321e-03 -8.93266350e-02
 -1.96409263e-02  6.02417663e-02  2.54774243e-02 -7.77551234e-02
  3.41168754e-02  3.42415161e-02  4.25866693e-02  1.08673573e-02
 -2.86143199e-02 -1.30156830e-01 -1.11340741e-02 -3.78635339e-03
  5.01299761e-02 -2.42677499e-02  3.75445411e-02 -4.70839553e-02
  2.15280913e-02  3.40150343e-03  2.68221218e-02 -2.00328026e-02
 -2.57631093e-02  5.93929850e-02 -1.85195487e-02  3.17579438e-03
 -1.69005524e-02 -5.42037673e-02  2.51462422e-02  8.35166723e-02
 -9.71692149e-03  4.26850542e-02  6.77868351e-02  2.21340321e-02
 -6.38777688e-02  3.80577184e-02 -1.04102068e-01  4.27685380e-02
  7.35940933e-02 -1.63658448e-02 -7.76244998e-02 -3.56401689e-02
  4.27209996e-02  7.54048640e-04  6.75365180e-02 -7.05525652e-02
 -1.07046962e-02 -2.67534924e-05 -5.19356839e-02  7.36566186e-02
  2.28247885e-02  7.70149082e-02 -4.36315946e-02  1.78006917e-01
  3.59657523e-03  3.87931019e-02  2.93178391e-03 -4.62074764e-02
  5.17813861e-02  1.25331767e-02  3.59313600e-02 -5.62952012e-02
 -3.34889479e-02 -9.64239705e-03  5.08730114e-02  6.10164918e-33
 -1.73450541e-02 -4.24609035e-02 -5.35665601e-02  5.22216558e-02
  3.45792286e-02 -3.18669118e-02  4.78860624e-02 -3.91408540e-02
 -7.46224076e-02 -1.10184969e-02 -9.11927037e-03 -2.48169377e-02
  1.59770902e-02 -3.98816653e-02 -6.68865209e-03 -1.48890048e-01
  1.22619756e-01  7.73588568e-03  1.73827082e-01 -5.13148122e-02
  4.28664461e-02  1.71735100e-02 -3.55101340e-02  4.32752864e-03
  7.23611265e-02 -2.09963950e-03 -4.36735824e-02  3.61622944e-02
 -1.21262394e-01 -5.83214033e-03  7.81286657e-02 -2.74195662e-03
 -6.59236312e-02 -9.54285637e-03  5.14244363e-02 -5.94057702e-02
  3.53375115e-02 -1.00244693e-02 -2.39901543e-02 -7.72899240e-02
  3.69222350e-02  2.56582797e-02  2.67139194e-03  2.33993810e-02
 -8.45823437e-02 -1.33479564e-02  5.28939851e-02 -2.92366017e-02
  4.01592664e-02  1.25102233e-02 -4.97152889e-03  4.46365885e-02
  4.50215209e-03 -9.98316854e-02  2.25477433e-03 -7.41568729e-02
 -2.37416793e-02 -3.85586694e-02 -6.85308129e-02 -5.56930490e-02
  9.14775357e-02 -3.83470356e-02 -6.01053722e-02 -2.73129568e-02
 -1.96027439e-02  6.62079602e-02 -1.26216710e-01 -2.74725491e-03
 -1.02196671e-01 -3.25119682e-02 -5.14145568e-02  5.02265655e-02
 -3.65402885e-02 -5.84685616e-02 -5.63914254e-02 -3.59568261e-02
 -1.02425171e-02 -1.26065603e-02 -4.13767733e-02  3.18942852e-02
  8.61586928e-02 -1.35361431e-02 -1.15272157e-01  3.98483723e-02
  2.20928565e-02  4.88749929e-02  5.55700716e-03 -5.85958473e-02
 -6.28528697e-03  1.20652486e-02 -3.53112966e-02  4.47108857e-02
  3.26660499e-02  4.17261012e-02  2.57184226e-02 -6.59171755e-33
  2.68773586e-02 -2.85599027e-02  1.37085468e-02 -1.18678883e-02
  3.44955884e-02  4.07852866e-02  3.68861854e-02 -5.17121516e-03
 -4.40137684e-02 -4.99183573e-02 -2.63682473e-02  1.71486810e-02
  1.71271190e-02  5.10765165e-02  1.73087027e-02 -5.07046431e-02
 -9.12534222e-02  2.25126687e-02 -1.19233374e-02 -6.40889816e-03
 -2.64449771e-02  4.39166203e-02 -4.58084419e-02  8.98100138e-02
 -9.24185142e-02  3.42193507e-02 -5.95200583e-02  2.24525947e-02
 -9.22644138e-03 -3.95995118e-02  8.98335408e-03 -2.19071433e-02
 -6.59912545e-03  9.94942561e-02 -1.36746932e-02 -4.41674143e-02
  2.68930010e-02  5.56050800e-02 -7.89836571e-02  1.91277359e-02
  5.50677441e-02  1.18692201e-02  2.24651024e-02 -2.99569289e-03
  5.29241711e-02  1.88005045e-02  1.05916068e-01  1.18807796e-02
 -3.34304869e-02  6.17026985e-02 -8.96123983e-03 -5.78262806e-02
  7.03028962e-02  4.52269539e-02  2.92952787e-02  4.00831960e-02
  4.83866706e-02 -6.78868592e-02  5.04856370e-02 -7.16530904e-02
  5.95419966e-02 -2.82828026e-02  1.95179321e-02  1.12135604e-01
  5.63178360e-02 -5.42532578e-02 -1.94558222e-02  7.86484852e-02
  8.13364983e-02  4.58204672e-02 -2.65999185e-03  5.43566495e-02
 -2.76957825e-02 -4.27937210e-02  1.71087142e-02  1.81655008e-02
 -2.46925857e-02 -6.17900230e-02  4.14398238e-02 -4.40543843e-03
  7.47269392e-02 -1.87802762e-02  2.89583597e-02 -5.59141487e-02
  3.14495452e-02  4.35527004e-02 -6.82779821e-03 -7.79606402e-03
  2.30605658e-02 -1.79616362e-03  1.15308142e-03 -6.95417449e-02
  1.80085329e-03 -2.49409247e-02 -6.46560118e-02 -5.26976578e-08
 -4.19250876e-02  1.40193943e-03 -8.71805195e-03 -5.36869951e-02
  2.79247537e-02 -3.88198122e-02  8.42030570e-02 -8.78182575e-02
 -3.73244360e-02 -3.70072126e-02 -8.07429850e-02  2.50885338e-02
 -2.88084950e-02 -1.04866132e-01  1.32783018e-02 -6.23093285e-02
 -3.98740843e-02 -1.11189503e-02  4.38578650e-02  5.09793125e-02
 -1.52445836e-02 -2.52285264e-02 -3.99600230e-02  2.85429768e-02
 -2.00768989e-02  8.88165832e-03  1.05000563e-01  5.21296188e-02
  6.61785752e-02  9.46918130e-02 -3.97669971e-02  1.17554311e-02
  4.60385121e-02  1.21379476e-02 -7.00215921e-02  4.01816145e-02
 -3.99320163e-02  5.81583790e-02 -1.38492873e-02  4.17030640e-02
  3.48818675e-02  5.24662547e-02 -1.67111997e-02 -3.94786056e-03
 -9.49862525e-02  2.86258850e-02 -1.64299756e-02  4.78896536e-02
  6.62794709e-02 -4.58429530e-02 -1.28391609e-02 -5.24586923e-02
 -1.26898047e-02  9.80196446e-02 -6.06604852e-02  1.65114515e-02
  8.05314817e-03  1.18091088e-02 -4.10773344e-02 -4.76937629e-02
  1.16859913e-01 -6.00765981e-02 -6.17507696e-02 -6.40028119e-02]"
"connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);

  // Verify the status of our stake account. This will start as inactive and will take some time to activate.
  let stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // To delegate our stake, we first have to select a validator. Here we get all validators and select the first active one.
  const validators = await connection.getVoteAccounts();
  const selectedValidator = validators.current[0];
  const selectedValidatorPubkey = new PublicKey(selectedValidator.votePubkey);

  // With a validator selected, we can now setup a transaction that delegates our stake to their vote account.
  const delegateTx = StakeProgram.delegate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
    votePubkey: selectedValidatorPubkey,
  });

  const delegateTxId = await sendAndConfirmTransaction(connection, delegateTx, [
    wallet,
  ]);
  console.log(
    `Stake account delegated to ${selectedValidatorPubkey}. Tx Id: ${delegateTxId}`
  );

  // Check in on our stake account. It should now be activating.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // At anytime we can choose to deactivate our stake. Our stake account must be inactive before we can withdraw funds.
  const deactivateTx = StakeProgram.deactivate({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
  });
  const deactivateTxId = await sendAndConfirmTransaction(
    connection,
    deactivateTx,
    [wallet]
  );
  console.log(`Stake account deactivated. Tx Id: ${deactivateTxId}`);

  // Check in on our stake account. It should now be inactive.
  stakeStatus = await connection.getStakeActivation(stakeAccount.publicKey);
  console.log(`Stake account status: ${stakeStatus.state}`);

  // Once deactivated, we can withdraw our SOL back to our main wallet
  const withdrawTx = StakeProgram.withdraw({
    stakePubkey: stakeAccount.publicKey,
    authorizedPubkey: wallet.publicKey,
    toPubkey: wallet.publicKey,
    lamports: stakeBalance, // Withdraw the full balance at the time of the transaction
  });

  const withdrawTxId = await sendAndConfirmTransaction(connection, withdrawTx, [
    wallet,
  ]);
  console.log(`Stake account withdrawn. Tx Id: ${withdrawTxId}`);

  // Confirm that our stake account balance is now 0
  stakeBalance = await connection.getBalance(stakeAccount.publicKey);
  console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118// Once deactivated, we can withdraw our SOL back to our main wallet
const withdrawTx = StakeProgram.withdraw({
  stakePubkey: stakeAccount.publicKey,
  authorizedPubkey: wallet.publicKey,
  toPubkey: wallet.publicKey,
  lamports: stakeBalance, // Withdraw the full balance at the time of the transaction
});

const withdrawTxId = await sendAndConfirmTransaction(connection, withdrawTx, [
  wallet,
]);
console.log(`Stake account withdrawn. Tx Id: ${withdrawTxId}`);

// Confirm that our stake account balance is now 0
stakeBalance = await connection.getBalance(stakeAccount.publicKey);
console.log(`Stake account balance: ${stakeBalance / LAMPORTS_PER_SOL} SOL`);
12345678910111213141516 # Token# Tôi nên cần gì để bắt đầu với SPL-Tokens?Mỗi khi bạn tương tác với token trên Solana, bạn thực chất đang tương tác với Solana Program Library Token, gọi tắt là SPL-Token Standard. Chuẩn SPL-Token yêu cầu một thư viện đặc thù để sử dụng và bạn có thể tìm thấy bên dưới tuỳ vào ngôn ngữ lập trình của bạn.TS""@solana/spl-token"": ""^0.2.0""
1# Làm thế nào để tạo một token mớiTạo mới token có thể thực hiện bằng cách tạo","[-1.15452595e-02 -3.06052994e-02 -6.68219253e-02  9.86192599e-02
 -2.85198893e-02 -3.15631367e-02  5.07269278e-02 -7.55470421e-04
  7.07290545e-02  6.45786151e-02  2.27413885e-02 -5.64976223e-02
 -7.21499100e-02  5.99230565e-02  1.76150147e-02  7.44447857e-02
 -3.77081782e-02 -3.99643593e-02 -1.89807247e-02  3.33229080e-02
 -2.01743469e-02 -1.77381903e-01 -5.61691970e-02 -1.77468788e-02
  3.71141620e-02 -8.56348276e-02 -3.39999795e-02 -4.44156602e-02
  2.09301822e-02 -5.82461581e-02  4.97699045e-02 -5.25321439e-02
 -9.93627682e-02 -4.25517410e-02  3.88080161e-03  4.35641967e-02
 -2.41931248e-02 -4.98035401e-02 -8.62200111e-02 -3.46206501e-02
  5.32708615e-02 -3.14258598e-03 -6.59864843e-02 -6.11744933e-02
  1.02328314e-02 -1.89180616e-02 -5.18139414e-02  3.40737812e-02
  1.69339646e-02 -3.75210568e-02  1.04041081e-02 -4.64572869e-02
  1.99581906e-02  9.41240266e-02  1.54989201e-03  1.04957916e-01
  6.78863749e-02 -9.41009261e-04  4.62020002e-02 -6.47676736e-02
  4.21256237e-02 -1.68310534e-02 -1.17164515e-02 -8.03176388e-02
 -1.92543752e-02  2.73939706e-02  4.48704325e-02 -7.56015331e-02
  7.74695491e-03 -5.14292754e-02  6.01978451e-02 -1.30749505e-03
 -4.33291979e-02 -4.80616018e-02 -6.80451840e-02 -3.92174199e-02
  1.69653948e-02 -8.45655240e-03  3.49296853e-02 -2.17930824e-02
  1.21164822e-03  5.34692071e-02  3.32548916e-02  3.40982564e-02
  6.39311522e-02  3.83935608e-02 -2.74891090e-02  1.27886636e-02
 -6.62252540e-03  1.09648090e-02 -2.32182108e-02  7.19093978e-02
 -2.01581288e-02  1.48951737e-02  3.33601497e-02  7.09658340e-02
 -2.89726201e-02  1.28738834e-02 -2.36199778e-02  4.97916490e-02
  1.45207183e-03 -1.90583486e-02 -1.34621114e-01 -1.20958285e-02
  2.15120669e-02  3.58440517e-03  5.31812981e-02 -5.34332991e-02
 -2.17634812e-02  5.79681285e-02  6.20537857e-03  1.14300407e-01
  3.37001756e-02  6.99498653e-02 -5.36385067e-02  1.41982794e-01
 -1.86264049e-03 -1.29781766e-02 -1.16378395e-02 -4.79478296e-03
  5.44032343e-02  4.77129221e-02  4.45335060e-02 -2.64619403e-02
  3.27245556e-02 -2.81419009e-02  7.76786869e-03  6.22088582e-33
  1.78376175e-02 -7.54012354e-03 -4.25582081e-02  2.45458297e-02
 -2.18717791e-02  4.30561490e-02  6.50762990e-02  9.46092326e-03
 -9.87407714e-02 -3.58578376e-03 -2.49473061e-02 -2.90548466e-02
  1.88028533e-02 -7.38146603e-02 -7.09487032e-03 -1.55755430e-01
  3.43718007e-02 -1.04547925e-02  9.42908153e-02 -4.22293693e-02
 -3.20936041e-03 -5.10025769e-02 -3.65367271e-02  1.84528101e-02
  2.67917104e-02 -5.04249409e-02 -7.69914463e-02  1.88310612e-02
 -5.76424897e-02  1.15137706e-02  6.26297444e-02 -2.14095097e-02
 -2.51878686e-02  2.79537346e-02  9.14768353e-02  2.88066100e-02
  8.59354585e-02 -2.35707033e-02 -4.68028672e-02 -8.35022926e-02
  1.56004950e-02  1.48203606e-02  5.95702045e-03  4.07873392e-02
 -1.15200192e-01  5.03404858e-03  5.74849546e-03 -7.80719938e-03
  4.32574823e-02  3.65155190e-02 -5.04840575e-02  3.07864100e-02
  2.73885448e-02 -4.94259074e-02  1.11705866e-02 -1.46120600e-02
  3.53087322e-04 -4.12181877e-02 -5.74690141e-02 -3.64827886e-02
  3.25349309e-02 -4.65369411e-02 -1.39678180e-01 -2.51271669e-02
 -3.23878862e-02  8.14217925e-02 -7.69516155e-02 -3.85275856e-02
 -6.06375113e-02 -6.66026846e-02 -6.73844889e-02  6.22883923e-02
 -5.82553297e-02 -2.06193440e-02 -5.03340065e-02 -5.16970083e-02
  5.63053181e-03  1.81182288e-02 -5.76906428e-02 -2.46927445e-03
  9.39540006e-03 -2.86966860e-02 -7.57070035e-02  1.14468113e-01
  3.47741432e-02  4.13338542e-02  2.14704080e-03 -1.72587931e-02
  3.41799506e-03  9.22494568e-04 -1.05209006e-02  2.32790168e-02
  9.70872268e-02 -3.15424204e-02  5.74547146e-03 -4.86670420e-33
 -1.47950370e-02 -8.44509453e-02  1.44157326e-02  4.16344777e-02
  6.83670342e-02  1.94471900e-03 -3.01752295e-02 -8.19956213e-02
 -7.18653500e-02 -3.29005495e-02 -3.61559242e-02  3.69305424e-02
  2.97220964e-02  2.78902482e-02  3.65016051e-02 -4.71070595e-02
 -1.24272183e-01  2.97212396e-02  1.35569483e-01  4.85423673e-03
  3.00813988e-02  8.28386545e-02 -5.19953556e-02  6.72289580e-02
 -7.77769014e-02  5.96541949e-02 -3.92413437e-02  5.13034388e-02
  2.44701114e-02  2.80436277e-02  3.74538191e-02 -7.45444447e-02
  7.43512344e-03  7.74585363e-03 -1.33316331e-02 -9.71384160e-03
  5.22098579e-02  3.88756618e-02 -2.34235357e-02  5.88723943e-02
  4.53741141e-02 -5.93627580e-02 -4.36274102e-03 -3.62779498e-02
  7.33433058e-03 -3.15067247e-02  2.02189609e-02  5.68317957e-02
 -5.00639016e-03  4.13169563e-02 -1.09889023e-02 -2.53294595e-02
 -2.71362392e-03  7.63887912e-02  1.14152748e-02  7.69882323e-03
  8.40729102e-02 -4.17123921e-02  1.06572106e-01 -2.55355630e-02
  3.66334133e-02  2.10092589e-02  4.97265235e-02  1.02285191e-01
  7.75187016e-02  2.65252031e-02  1.69808418e-02  1.52889499e-02
  3.97330150e-02  5.94536699e-02 -6.72810376e-02  2.06405073e-02
  3.36826034e-02 -3.71948369e-02  8.83022696e-02 -4.63559176e-04
 -2.77524032e-02  6.40528277e-03  1.06064662e-01 -3.09550250e-03
  6.91226684e-03  3.33558917e-02  6.39678016e-02 -6.44733012e-02
  2.25447770e-02  2.94565093e-02  6.73430786e-02 -1.38737531e-02
 -1.15084182e-02 -2.68554334e-02 -1.58120859e-02 -4.78552096e-02
  4.53898013e-02 -7.54367784e-02 -4.16389108e-02 -5.42478418e-08
 -7.30412127e-03  4.82299402e-02 -5.00072502e-02 -3.36095169e-02
  3.87486778e-02 -4.04110253e-02  5.68214916e-02 -1.20015301e-01
 -2.04974897e-02  1.51949031e-02 -3.24034393e-02  7.14448690e-02
  3.36659066e-02 -8.56791064e-02  4.31388952e-02 -3.54598239e-02
  4.38863586e-04 -1.69564132e-02 -3.83573398e-02  3.72709744e-02
 -5.27783949e-03 -9.28091258e-03  1.05280299e-02  1.55973304e-02
 -6.37887930e-03  2.04251595e-02  8.54080096e-02  8.00311416e-02
  8.19732919e-02  7.93057904e-02 -6.48518875e-02  5.22254631e-02
  6.63698688e-02  1.75976939e-02 -5.64634353e-02  6.41997457e-02
 -1.13693893e-01  2.21717847e-03  5.31332046e-02  4.98096012e-02
  1.51161058e-02  2.94799898e-02  1.09222159e-03  7.81035004e-03
 -3.68063599e-02  6.36107847e-02 -4.41735573e-02  1.93874687e-02
  1.14828244e-01 -1.20635831e-03 -2.67032627e-02 -6.46903887e-02
  4.54135035e-04  6.36447594e-02 -9.53221619e-02  3.61146554e-02
  1.97116956e-02 -2.06613131e-02  3.34743746e-02 -7.86718652e-02
  1.14266776e-01 -5.18539920e-02 -7.94052035e-02 -1.05528384e-02]"
"một ""mint account"". Account này sẽ được sử dụng lưu đúc token cho token account và ghi nhớ tổng cung cung khởi tạo.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
} from ""@solana/web3.js"";
import {
  createInitializeMintInstruction,
  TOKEN_PROGRAM_ID,
  MINT_SIZE,
  getMinimumBalanceForRentExemptMint,
  createMint,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  // 1) use build-in function
  let mintPubkey = await createMint(
    connection, // conneciton
    feePayer, // fee payer
    alice.publicKey, // mint authority
    alice.publicKey, // freeze authority (you can use `null` to disable it. when you disable it, you can't turn it on again)
    8 // decimals
  );
  console.log(`mint: ${mintPubkey.toBase58()}`);

  // or

  // 2) compose by yourself
  const mint = Keypair.generate();
  console.log(`mint: ${mint.publicKey.toBase58()}`);

  let tx = new Transaction().add(
    // create mint account
    SystemProgram.createAccount({
      fromPubkey: feePayer.publicKey,
      newAccountPubkey: mint.publicKey,
      space: MINT_SIZE,
      lamports: await getMinimumBalanceForRentExemptMint(connection),
      programId: TOKEN_PROGRAM_ID,
    }),
    // init mint account
    createInitializeMintInstruction(
      mint.publicKey, // mint pubkey
      8, // decimals
      alice.publicKey, // mint authority
      alice.publicKey // freeze authority (you can use `null` to disable it. when you disable it, you can't turn it on again)
    )
  );
  console.log(
    `txhash: ${await connection.sendTransaction(tx, [feePayer, mint])}`
  );
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071// 1) use build-in function
let mintPubkey = await createMint(
  connection, // conneciton
  feePayer, // fee payer
  alice.publicKey, // mint authority
  alice.publicKey, // freeze authority (you can use `null` to disable it. when you disable it, you can't turn it on again)
  8 // decimals
);

// or

// 2) compose by yourself
let tx = new Transaction().add(
  // create mint account
  SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    newAccountPubkey: mint.publicKey,
    space: MINT_SIZE,
    lamports: await getMinimumBalanceForRentExemptMint(connection),
    programId: TOKEN_PROGRAM_ID,
  }),
  // init mint account
  createInitializeMintInstruction(
    mint.publicKey, // mint pubkey
    8, // decimals
    alice.publicKey, // mint authority
    alice.publicKey // freeze authority (you can use `null` to disable it. when you disable it, you can't turn it on again)
  )
);
1234567891011121314151617181920212223242526272829# Làm thế nào để đọc truy vấn token mintĐể có thể đọc tổng cung hiện tại, chủ sở hữu, hoặc số chữ số phần","[-1.03237569e-01 -7.62181133e-02 -1.32912576e-01  1.35834794e-03
 -2.13599522e-02 -3.18107568e-02  1.76739022e-02  8.64142701e-02
  3.51243541e-02  1.00263087e-02  5.57570085e-02 -4.25538942e-02
  1.26931630e-02 -9.18780416e-02  5.53767309e-02  1.61215812e-02
 -1.10237986e-01 -7.15794265e-02 -3.74739133e-02 -5.43147177e-02
  2.29030550e-02 -1.10792190e-01 -3.10999863e-02 -2.09615696e-02
  2.69294698e-02 -1.88863094e-04  4.69823088e-03  1.10572483e-02
 -1.29540944e-02  1.38357040e-02  4.00606580e-02  6.98107630e-02
  1.97566468e-02 -3.67514715e-02  5.55994399e-02  9.41960290e-02
 -1.73658188e-02 -2.54226848e-02  2.82533653e-02 -7.47506171e-02
 -3.17705907e-02  5.81999421e-02 -1.08500957e-01 -1.91777851e-02
  8.97425115e-02  1.87164024e-02 -8.70939493e-02  4.40076478e-02
 -2.68592592e-02 -8.21017027e-02 -7.77065605e-02  6.63667247e-02
 -3.31306234e-02 -3.84559971e-03 -1.04058027e-01  1.99298002e-02
  9.20440815e-03  4.66588587e-02  9.43800062e-02 -3.01204659e-02
  2.35757474e-02 -7.95968110e-04  4.16776165e-02 -4.73073795e-02
  1.02612339e-02 -2.45862883e-02 -6.10619895e-02 -3.57067734e-02
  1.28348544e-02 -2.79196911e-02 -2.37203669e-02 -1.65097713e-02
 -6.59704134e-02  3.99040915e-02 -4.90346067e-02 -5.54364100e-02
  8.30792449e-03  5.92511669e-02 -1.92587711e-02  3.40429097e-02
 -1.20070372e-02 -1.47744492e-02  2.00071614e-02  9.12302285e-02
  2.97714528e-02  4.14459072e-02 -5.17286956e-02 -2.16248073e-02
 -2.19343472e-02 -2.27620918e-02 -3.91592346e-02  4.22538966e-02
 -6.43086731e-02 -1.02495141e-02  1.34223821e-02  3.51878852e-02
  5.48900198e-03  5.14650792e-02 -1.37579478e-02  1.06034175e-01
  6.25200048e-02 -1.72059126e-02 -3.96496803e-02 -3.41617456e-03
 -2.39974679e-03 -2.20572017e-02  7.90568739e-02 -9.66457278e-03
  5.26437834e-02  2.46562306e-02 -3.22697014e-02  6.28672689e-02
 -2.95592286e-02 -5.17153032e-02 -7.97056258e-02  7.07079992e-02
  1.78143382e-02  2.71009114e-02  8.06115102e-04  8.64984542e-02
  1.25427648e-01  1.59952026e-02 -8.72380435e-02 -4.03650366e-02
 -6.62941635e-02 -4.86385003e-02  7.36693367e-02  1.44710275e-32
 -5.05764969e-02 -8.89676586e-02  9.02668014e-03 -5.02238236e-02
 -9.90086701e-03  1.19985817e-02  8.06881799e-05 -3.98933375e-03
 -7.11325258e-02 -3.36705782e-02 -6.25848100e-02 -6.15091585e-02
 -5.47894510e-03 -9.86712128e-02 -6.03025928e-02 -4.09762040e-02
  2.94288970e-03  1.07690636e-02  6.88676238e-02 -3.57332118e-02
  3.74956280e-02 -7.93997869e-02  1.67313137e-05 -9.68784839e-03
  8.74132011e-03  5.39760031e-02  1.67251786e-03 -2.70301867e-02
  4.69872653e-02  1.22441808e-02  6.50312677e-02 -5.18448837e-03
 -9.87777710e-02 -1.12296045e-02 -2.37342063e-03 -2.26446316e-02
  9.23296809e-03 -5.51929623e-02 -1.26887694e-01 -4.17832918e-02
  3.31344381e-02 -4.14938154e-03 -3.21705975e-02 -1.45082846e-02
 -1.20241260e-02  6.63777068e-02  7.15131406e-03  3.17304768e-02
  9.14333314e-02  4.59882617e-02 -1.14674464e-01 -1.67286731e-02
  1.05872964e-02  2.83261505e-03  7.56020173e-02 -8.26589484e-03
  1.44064343e-02  1.43303005e-02 -1.08074732e-02  1.55979879e-02
 -1.38855446e-02 -6.77117929e-02 -1.57661997e-02 -2.43358519e-02
  8.56687408e-03  1.16443997e-02 -8.37475434e-03  6.41574785e-02
 -1.38182128e-02 -2.59389132e-02 -4.86609228e-02  1.47511568e-02
  1.74905472e-02  1.19412512e-01 -1.20288998e-01 -3.94105501e-02
  4.93231937e-02  5.57795912e-02 -9.80951935e-02 -1.14080198e-02
 -1.08362101e-02 -3.98839451e-02 -8.39026868e-02  5.36568575e-02
  3.76239643e-02  4.23528403e-02 -9.13550425e-03 -6.11432977e-02
 -1.55418217e-02 -4.17924393e-03  2.85492260e-02 -6.03398681e-03
  1.51975984e-02  1.07849780e-02 -1.24087371e-01 -1.40133179e-32
 -2.52063926e-02 -2.10618973e-02 -6.38552234e-02 -2.23597512e-02
  8.97988584e-03  1.99477971e-02 -3.17170657e-02  3.33583429e-02
 -5.52601740e-03  9.76706892e-02  2.24301014e-02 -1.45792784e-02
  2.00655684e-03 -1.51773810e-03  2.03193780e-02  7.89750889e-02
  2.60680635e-02  6.15843805e-03  1.90406367e-02  3.78274210e-02
 -5.17931283e-02  1.52086079e-01 -2.15552133e-02  1.43713793e-02
 -6.35273606e-02  4.94852141e-02 -3.18790413e-02  1.02107465e-01
 -5.74132465e-02  2.25459617e-02  7.70825744e-02  2.08382588e-02
 -1.17961831e-01  1.00964747e-01  1.07077109e-02 -1.05743729e-01
  5.23478054e-02  1.82542317e-02  1.21662570e-02  2.00693700e-02
  5.19381948e-02  8.67095497e-03 -3.36704254e-02  3.83636309e-03
  5.37682921e-02 -1.49080753e-02  5.80497608e-02 -1.45381643e-02
 -5.44324070e-02  5.04819416e-02  5.69641963e-02 -4.69099209e-02
 -1.14383148e-02 -2.31074020e-02 -3.27507220e-02  2.62594856e-02
  7.56987780e-02 -4.17838618e-03  1.06631443e-02 -1.08742096e-01
  5.72804175e-02 -1.04351260e-01  3.68559361e-02  4.28666249e-02
  8.71965587e-02 -2.48720199e-02  1.33137181e-02  1.36787176e-01
  4.99709398e-02 -2.87950616e-02 -9.51561257e-02  5.34955561e-02
  4.61378433e-02  6.55880347e-02  2.07311418e-02  4.98436205e-02
 -4.93788533e-02 -3.91499847e-02  3.06035932e-02  3.44046690e-02
 -3.99044566e-02  4.26336974e-02  1.55241909e-02 -4.71605308e-04
 -9.01268609e-03 -4.88045327e-02 -1.39310807e-02  6.14326261e-02
 -1.35497320e-02 -9.57378652e-03 -7.62613565e-02  1.43783735e-02
  1.71009824e-02  8.01361650e-02  3.38111445e-03 -6.04395964e-08
 -4.68210690e-03 -3.86224240e-02 -4.44580205e-02  5.33458777e-02
  3.57963145e-02  1.07000647e-02 -5.56453392e-02 -4.32404093e-02
 -3.46819051e-02 -3.04530822e-02 -7.86581635e-02  2.09626816e-02
 -6.46091774e-02 -2.04865728e-03 -1.31682716e-02 -3.52681912e-02
 -2.09085513e-02  2.77648997e-02 -6.73055183e-03 -6.93153441e-02
  8.20330828e-02 -4.39060368e-02  3.58108766e-02  1.93386246e-02
  6.95944428e-02 -4.79276627e-02  2.99057383e-02  1.09959021e-01
 -3.46157774e-02 -1.00466371e-01 -8.20610747e-02  8.05623736e-03
  7.21601173e-02 -5.20695895e-02 -5.43039292e-02  2.86785439e-02
  2.98759229e-02  1.18294833e-02  9.64247342e-03  6.01147078e-02
  1.06794899e-02  4.34806943e-02 -2.00570468e-02 -7.31230853e-03
 -2.18688305e-02  2.96842214e-02  4.46705986e-03  6.98539466e-02
  1.34809062e-01 -4.11238112e-02 -4.25785743e-02 -4.63005416e-02
  1.08615281e-02  4.42615859e-02  1.13327033e-03 -2.40700226e-02
 -9.14410576e-02  5.82888760e-02  4.61696647e-02  1.47847179e-02
  1.94741935e-02  7.54862428e-02 -1.31292380e-02 -3.81811000e-02]"
"thập phân (decimals) mà token định nghĩa, bạn sẽ cần lấy dữ liệu dữ liệu mint account.TSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";
import { getMint } from ""@solana/spl-token"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const mintAccountPublicKey = new PublicKey(""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV"");

  let mintAccount = await getMint(connection, mintAccountPublicKey);

  console.log(mintAccount);
  /*
  {
    address: PublicKey {
      _bn: <BN: 7351e5e067cc7cfefef42e78915d3c513edbb8adeeab4d9092e814fe68c39fec>
    },
    mintAuthority: PublicKey {
      _bn: <BN: df30e6ca0981c1a677eed6f7cb46b2aa442ca9b7a10a10e494badea4b9b6944f>
    },
    supply: 0n,
    decimals: 8,
    isInitialized: true,
    freezeAuthority: PublicKey {
      _bn: <BN: df30e6ca0981c1a677eed6f7cb46b2aa442ca9b7a10a10e494badea4b9b6944f>
    }
  }
  */
})();
12345678910111213141516171819202122232425262728let mintAccount = await getMint(connection, mintAccountPublicKey);
1#  Làm thế nào để tạo một token accountMột token account là bắt buộc cần có để chứa tokens. Mỗi token mint có một token account khác nhau tương ứng với nó.Associated Token Accounts (ATA) được tạo một cách ""bất biến"" cho các cặp khoá. ATA là phương pháp khuyên dùng để quản lý token account.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
  SystemProgram,
} from ""@solana/web3.js"";
import {
  createAssociatedTokenAccount,
  getAssociatedTokenAddress,
  createAssociatedTokenAccountInstruction,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const mintPubkey = new PublicKey(
    ""2SKpuBU9ksneBZD4nqbZkw75NE11HsSHsGRtW2BZh5aQ""
  );

  // 1) use build-in function
  {
    let ata = await createAssociatedTokenAccount(
      connection, // connection
      feePayer, // fee payer
      mintPubkey, // mint
      alice.publicKey // owner,
    );
    console.log(`ATA: ${ata.toBase58()}`);
  }

  // or

  // 2) composed by yourself
  {
    // calculate ATA
    let ata = await getAssociatedTokenAddress(
      mintPubkey, // mint
      alice.publicKey // owner
    );
    console.log(`ATA: ${ata.toBase58()}`);

    // if your wallet is off-curve, you should use
    // let ata = await getAssociatedTokenAddress(
    //   mintPubkey, // mint
    //   alice.publicKey // owner
    //   true, // allowOwnerOffCurve
    // );

    let tx = new Transaction().add(
      createAssociatedTokenAccountInstruction(
        feePayer.publicKey, // payer
        ata, // ata
        alice.publicKey, //","[-1.19545236e-01 -4.92372699e-02 -1.01598121e-01 -6.90463348e-04
 -2.38444889e-03 -3.23233916e-03  1.36695150e-02  4.93981168e-02
  4.88299504e-02  4.38373759e-02  3.55000757e-02 -8.33875015e-02
 -3.41335051e-02 -1.58607606e-02  5.99518269e-02  1.18603949e-02
 -1.44929647e-01 -7.71131814e-02 -2.47062612e-02 -4.26280387e-02
  4.27395664e-02 -7.52196237e-02 -3.59418578e-02 -1.93798020e-02
  3.03090345e-02  5.23989834e-03 -1.20164352e-02 -1.96541864e-02
 -3.39575037e-02  2.96521802e-02  2.75183525e-02  6.94802254e-02
  1.55917080e-02 -3.03689092e-02  4.67161350e-02  7.76546448e-02
 -1.91897955e-02 -2.29386725e-02  7.43887946e-02 -6.89949691e-02
 -5.72161153e-02  6.02327473e-02 -5.67425005e-02 -5.89199215e-02
  6.53653741e-02 -2.40336582e-02 -1.04677700e-01  5.60203902e-02
 -1.15926014e-02 -2.53351387e-02 -3.47592533e-02  7.33281821e-02
 -2.68463735e-02 -1.58217847e-02 -5.96182644e-02  3.10967024e-02
 -2.94814967e-02  6.16235808e-02  1.23313829e-01  1.29541885e-02
  3.50758173e-02 -3.14215310e-02  4.76642931e-03 -4.12687138e-02
 -2.87383720e-02 -4.02780622e-02 -6.10575601e-02 -4.48803566e-02
 -3.22093698e-03 -3.06271072e-02 -2.39008316e-03 -3.83118317e-02
 -3.57144363e-02  1.47397723e-02 -2.08569095e-02 -7.53906295e-02
 -1.60522424e-02  2.88150925e-02 -8.20197817e-03  5.92923798e-02
  1.56764854e-02 -8.19822308e-03  2.44659223e-02  1.15702853e-01
  2.28514038e-02  7.04300329e-02 -3.89586389e-02 -3.72017659e-02
  1.64054707e-02 -6.36013523e-02 -4.25855592e-02  4.77262624e-02
 -1.86483916e-02  3.34400758e-02  4.30269986e-02  3.04171629e-02
 -2.38665566e-03  5.66222146e-02 -6.72345236e-02  1.27992302e-01
  7.35196620e-02  1.57389082e-02 -6.71148896e-02 -2.18634140e-02
  3.09183705e-03 -3.04653067e-02  8.13775361e-02  4.38732002e-03
  3.74683961e-02  4.28613238e-02 -8.25921819e-03  6.76765144e-02
 -5.77577204e-02 -3.70887257e-02 -5.68626672e-02  1.02895219e-02
  6.35138154e-02  9.80089512e-03  1.34501224e-02  5.70943728e-02
  1.03310481e-01  1.78335537e-03 -6.68494329e-02 -1.90598071e-02
 -2.40614619e-02 -1.44701060e-02  9.17647853e-02  1.25071291e-32
 -3.65589708e-02 -6.36603236e-02  2.74475794e-02 -9.80576724e-02
 -9.26907826e-03  1.52191576e-02  3.58176790e-02  2.77056117e-02
 -4.71668988e-02 -4.03320491e-02 -3.35471183e-02 -5.91157973e-02
 -1.20347245e-02 -1.08051978e-01 -8.90209153e-02 -2.68722381e-02
  3.92177068e-02  9.71282925e-03  2.78846696e-02 -2.63382047e-02
 -4.24188701e-03 -7.84397200e-02  2.00318471e-02 -1.06146075e-02
 -1.55732455e-03  5.45565225e-02 -9.96365491e-03 -3.48957465e-03
  3.05668097e-02  1.90816913e-02  7.58002624e-02  2.44404040e-02
 -8.06080475e-02 -8.23283102e-03  5.64214960e-03 -2.26883870e-02
  5.34078144e-02 -6.62130639e-02 -1.27000764e-01 -2.41555702e-02
  1.56376623e-02 -5.90642542e-03 -5.91755360e-02 -2.87093185e-02
 -4.07014973e-02  6.05505258e-02 -6.21069176e-03  1.53400116e-02
  8.84497613e-02  3.74446437e-02 -1.57710806e-01  1.33501617e-02
 -4.72276174e-02 -2.91653648e-02  5.67745455e-02 -2.85578519e-02
 -8.47405009e-03  2.56068986e-02  2.09305938e-02  5.27536171e-03
 -1.62819885e-02 -9.24616158e-02 -1.02953771e-02 -1.96158346e-02
 -1.16386488e-02  5.80303594e-02 -5.73970526e-02  3.76287960e-02
 -1.17052568e-03  9.29120928e-03 -2.77001783e-02  8.47195741e-03
  2.27069273e-03  1.04833715e-01 -7.27288127e-02 -2.09504701e-02
  2.75832750e-02  7.93955103e-02 -6.54452518e-02  1.95070356e-03
  2.31842883e-02 -3.70176658e-02 -1.16347685e-01  5.54658026e-02
  4.39574197e-02  4.59329784e-02 -1.67059675e-02 -6.95442110e-02
 -2.33418737e-02  1.04736220e-02  1.29941897e-02 -2.44745873e-02
 -2.47210660e-03 -4.26024646e-02 -1.81939900e-01 -1.33658571e-32
  6.30462822e-03  5.49999299e-04 -1.07182235e-01 -5.21200746e-02
 -1.41459610e-02  9.80005506e-03 -5.77589981e-02  6.79458231e-02
  5.84308982e-05  9.18928459e-02  4.22317572e-02  1.53615689e-02
  3.66159738e-03 -3.13940784e-03 -2.69941185e-02  1.02755971e-01
  5.98551892e-02 -1.85383335e-02 -3.01623866e-02  2.84151770e-02
 -3.21026854e-02  7.52731115e-02 -1.28608700e-02  1.40123833e-02
 -7.99118280e-02  4.92328964e-02 -9.93170124e-03  6.80798963e-02
 -7.23040551e-02 -2.48455000e-03  8.68358389e-02 -1.92869939e-02
 -1.19218349e-01  6.47271350e-02  1.54578211e-02 -8.00029561e-02
  2.32320745e-02  4.11274470e-02 -1.93075202e-02  4.75864252e-03
  4.42770831e-02 -3.09636611e-02  1.82517827e-03  3.95480953e-02
  4.71209250e-02 -4.63686176e-02  7.98506141e-02 -4.78615277e-02
 -4.45818119e-02  5.57830110e-02  7.53731653e-02 -5.35540543e-02
 -1.45276953e-02 -8.04828759e-03 -6.16148338e-02  4.28552646e-03
  1.80285517e-02 -2.16578897e-02  1.89213138e-02 -1.04485027e-01
  4.56201546e-02 -1.17562227e-01 -4.54716943e-02  9.20697972e-02
  1.07182108e-01 -6.39671758e-02 -2.61208024e-02  8.96128044e-02
  5.62566780e-02  2.71811467e-02 -3.68768945e-02  2.98497695e-02
  9.12646279e-02  4.21917811e-02  6.90707099e-03  2.21356936e-02
 -9.51656234e-03 -3.36407088e-02  6.68179393e-02  6.36607781e-02
 -2.80040689e-03  3.14344279e-02  4.89698676e-03 -6.07006922e-02
  2.50032246e-02 -4.40666154e-02  1.47583392e-02  5.04850037e-02
 -4.56142984e-02  2.58043427e-02 -8.05198103e-02  1.27335927e-02
 -3.43735367e-02  5.57225645e-02  5.41562289e-02 -6.41473576e-08
 -3.14026081e-04 -3.30255553e-02 -4.95961644e-02  1.76996812e-02
  4.69592400e-02  2.89805718e-02 -5.36880828e-02 -2.77442690e-02
 -4.08499427e-02 -8.61284044e-03 -4.81561422e-02  5.06219976e-02
 -5.83512150e-02  9.15404037e-03 -2.45541688e-02 -4.66068015e-02
 -1.27485646e-02  5.93266785e-02 -7.66594009e-03 -5.64822480e-02
  2.76610926e-02 -3.79650779e-02  3.41331437e-02 -8.48820433e-03
  6.38875887e-02 -3.82826105e-02  1.72097068e-02  9.85299423e-02
 -4.51527797e-02 -5.99589124e-02 -8.37263092e-02  2.74300370e-02
  7.58897439e-02 -4.71069477e-02 -1.15640186e-01  8.03057197e-03
  1.68121196e-02  1.26760313e-02 -1.27929333e-03  2.91286018e-02
 -6.03729626e-03  4.07775082e-02 -2.65046377e-02  1.94070190e-02
 -4.08701189e-02  5.72581869e-03  2.11353768e-02  6.85110912e-02
  9.42227766e-02 -4.65701409e-02 -6.26147762e-02 -5.65412678e-02
 -1.45176484e-03  4.37163785e-02 -1.81147549e-02 -4.29401174e-02
 -1.12757288e-01  4.61686701e-02 -2.80327257e-03  5.23690507e-02
  2.79797185e-02  6.56139776e-02 -4.09415103e-02  3.31678917e-03]"
"owner
        mintPubkey // mint
      )
    );
    console.log(`txhash: ${await connection.sendTransaction(tx, [feePayer])}`);
  }
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677// 1) use build-in function
{
  let ata = await createAssociatedTokenAccount(
    connection, // connection
    feePayer, // fee payer
    mintPubkey, // mint
    alice.publicKey // owner,
  );
}

// or

// 2) composed by yourself
{
  let tx = new Transaction().add(
    createAssociatedTokenAccountInstruction(
      feePayer.publicKey, // payer
      ata, // ata
      alice.publicKey, // owner
      mintPubkey // mint
    )
  );
}
1234567891011121314151617181920212223# Làm thế nào để truy vấn token acountMỗi token account chứa thông tin về chủ sỡ hữu token, loại mint, só dư, và số chữ số phần thập phân.TSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";
import { getAccount } from ""@solana/spl-token"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const tokenAccountPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );

  let tokenAccount = await getAccount(connection, tokenAccountPubkey);
  console.log(tokenAccount);
  /*
  {
    address: PublicKey {
      _bn: <BN: 16aef79dfadb39ffedb3b6f77688b8c162b18bb9cba2ffefe152303629ae3030>
    },
    mint: PublicKey {
      _bn: <BN: 7351e5e067cc7cfefef42e78915d3c513edbb8adeeab4d9092e814fe68c39fec>
    },
    owner: PublicKey {
      _bn: <BN: df30e6ca0981c1a677eed6f7cb46b2aa442ca9b7a10a10e494badea4b9b6944f>
    },
    amount: 0n,
    delegate: null,
    delegatedAmount: 0n,
    isInitialized: true,
    isFrozen: false,
    isNative: false,
    rentExemptReserve: null,
    closeAuthority: null
  }
  */
})();
12345678910111213141516171819202122232425262728293031323334let tokenAccount = await getAccount(connection, tokenAccountPubkey);
1# Làm thế nào để truy vấn số dư của token accountThông tin số dư token của một token account có thể được truy vấn bằng một hàm gọi duy nhất.TSRustPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const tokenAccount = new PublicKey(
    ""FWZedVtyKQtP4CXhT7XDnLidRADrJknmZGA2qNjpTPg8""
  );

  let tokenAmount = await connection.getTokenAccountBalance(tokenAccount);
  console.log(`amount: ${tokenAmount.value.amount}`);
  console.log(`decimals: ${tokenAmount.value.decimals}`);
})();
12345678910111213let tokenAmount = await connection.getTokenAccountBalance(tokenAccount);
1use solana_client::rpc_client::RpcClient;
use solana_program::pubkey::Pubkey;
use solana_sdk::commitment_config::CommitmentConfig;
use std::str::FromStr;

fn main() {
    let rpc_url = String::from(""https://api.devnet.solana.com"");
    let connection = RpcClient::new_with_commitment(rpc_url, CommitmentConfig::confirmed());

    let token_account = Pubkey::from_str(""FWZedVtyKQtP4CXhT7XDnLidRADrJknmZGA2qNjpTPg8"").unwrap();
    let balance = connection
        .get_token_account_balance(&token_account)
        .unwrap();

    println!(""amount: {}, decimals: {}"", balance.amount, balance.decimals);
}
12345678910111213141516let balance = connection
        .get_token_account_balance(&token_account)
        .unwrap();
123TIPMột token account chỉ có thể chứa một loại mint duy nhất. Khi bạn khai báo token account, bạn cũng phải chỉ rõ lại mint.# Làm thế nào để dúc tokenKhi bạn đúc token, bạn tăng số lượng tổng cung và chuyển số lược token mới cho token","[-9.84955952e-02  2.70124637e-02 -8.75193104e-02 -6.42400794e-03
 -6.83360472e-02  2.34918259e-02  8.67474601e-02  6.06408902e-02
  4.34460007e-02  8.73356760e-02  8.54960829e-02 -1.24737181e-01
 -8.46403372e-03 -7.91226476e-02  3.28218453e-02  2.04360262e-02
 -8.03289339e-02 -7.34498724e-02 -9.00899433e-03 -8.77599046e-02
  4.28304896e-02 -7.11047649e-02  2.14160942e-02  3.51242023e-04
  6.52362108e-02 -5.54590002e-02  2.27337461e-02  2.06803046e-02
 -8.88594799e-03  9.01211239e-03  7.88985267e-02  6.40186518e-02
 -2.16071121e-02  1.52328722e-02  4.92463894e-02  1.02911055e-01
 -2.65079178e-02 -2.00145366e-03  5.78506812e-02 -6.76855966e-02
  3.61545756e-02  4.04810943e-02 -5.89465983e-02 -5.84820248e-02
  5.56111038e-02  2.56861765e-02 -2.24291459e-02  3.97398435e-02
 -3.23646446e-03 -8.72724503e-03  2.87620723e-03  6.96467236e-02
 -6.86636008e-03  1.24552334e-02 -5.58184348e-02  5.64814061e-02
 -4.97757131e-03  4.20804136e-02  8.58599171e-02 -4.91592996e-02
  4.07692380e-02  3.53270094e-03  1.05136381e-02 -5.38771860e-02
  7.94719090e-04 -1.95238721e-02 -5.34039922e-02 -7.88926613e-03
 -5.16360849e-02  9.17801727e-03  7.91054219e-02 -2.40624845e-02
 -5.82997426e-02 -3.34865390e-03 -6.82824478e-02 -5.04780896e-02
  1.62250996e-02  5.51712848e-02 -6.05930649e-02 -4.30082576e-03
 -3.54469828e-02  6.71044663e-02  8.65590051e-02  9.92758945e-03
  3.01202629e-02  8.27368200e-02 -6.80650538e-03 -2.55797729e-02
  1.50898448e-03 -4.27004807e-02  1.96857750e-02  4.27815095e-02
  1.79561023e-02 -5.83250448e-02  6.18544929e-02  7.70910596e-03
  6.78206235e-03  4.38376777e-02  2.36840831e-04  8.74443054e-02
  4.58737873e-02  5.53983003e-02 -6.19278774e-02 -3.07188816e-02
  3.47389095e-02  7.08771348e-02  7.16046765e-02 -6.38693348e-02
  1.26654690e-03  3.58550847e-02 -1.20027177e-02  7.93955401e-02
 -2.07499173e-02 -3.69147472e-02 -4.98260371e-02  6.75854832e-02
 -5.17572276e-02  2.22200584e-02  1.88905392e-02  7.00524524e-02
  1.24019161e-01 -4.69005294e-02 -1.44206151e-01  1.36199109e-02
 -6.89200014e-02 -6.60681948e-02  9.06979814e-02  6.84376852e-33
 -5.19599430e-02 -2.47242916e-02 -1.65114906e-02 -4.38947901e-02
  2.06889268e-02  4.46817139e-03  2.33287197e-02  4.77755927e-02
 -6.12366870e-02  1.29838651e-02 -7.52966404e-02 -9.44451615e-02
 -7.28087425e-02 -7.68752620e-02 -1.13043994e-01 -3.26108634e-02
 -5.95297031e-02  2.03842130e-02  8.74824226e-02  1.54716298e-02
 -1.27693079e-02 -2.48477478e-02 -1.46934446e-02 -5.01364353e-04
 -2.12169141e-02  5.50903007e-02  1.62545834e-02 -9.42467153e-02
 -5.46428422e-03  3.18500623e-02  5.63749559e-02  3.85345072e-02
 -3.18943821e-02  2.92227454e-02 -7.71500841e-02 -5.00395931e-02
 -2.25247368e-02 -1.28076719e-02 -1.45623595e-01 -2.25318223e-02
  8.00411105e-02  1.25447670e-02 -7.59155303e-02  2.92465277e-03
 -1.16849564e-01  2.05095876e-02  2.79027633e-02 -1.71126239e-02
  1.83629051e-01  3.25296111e-02 -1.05924599e-01 -4.84995581e-02
  1.20229870e-02 -3.71863805e-02  9.25324336e-02 -7.15362802e-02
 -4.08872589e-03 -5.48797548e-02  3.11129726e-02 -2.92848740e-02
 -3.05816811e-02 -8.18547606e-02 -3.24866734e-02  3.39649171e-02
 -1.08073279e-03  1.77497510e-02 -3.47847901e-02 -1.48606114e-02
  4.59250286e-02 -5.78193888e-02 -2.97631118e-02 -8.51303246e-03
 -1.15735680e-02  4.85931821e-02 -3.95536348e-02  7.46174064e-03
  2.80506350e-02  1.96885746e-02 -3.21598314e-02  1.95782371e-02
 -4.73811990e-03 -1.79430877e-03 -9.26590487e-02  7.83478469e-02
  6.38279095e-02  5.62554374e-02 -4.60820273e-02 -5.23974523e-02
  6.41218061e-03 -2.16691606e-02  1.27728852e-02 -6.58378676e-02
 -7.06115505e-03 -2.38248017e-02 -8.17051008e-02 -6.37807439e-33
  1.84942223e-02  2.04304815e-03 -6.75628707e-02 -4.87393960e-02
  1.09635759e-02  2.06163712e-02 -4.03222740e-02  1.74652617e-02
 -1.23155518e-02  7.93402568e-02 -7.25869536e-02 -1.98450871e-02
 -8.12588446e-03  2.09161546e-02  8.25115889e-02  1.90544799e-02
  4.52162735e-02  1.77508721e-03 -1.53531749e-02  2.56140972e-03
 -5.72770499e-02  4.65526842e-02  2.49462482e-02  3.74739207e-02
 -2.06218641e-02  7.47769922e-02 -7.92640913e-03  7.34899789e-02
  8.41685571e-03  3.32613662e-02 -4.50215256e-03 -4.59182337e-02
 -8.69018957e-02  8.05330575e-02  1.64179772e-03 -7.61037692e-02
  3.13055813e-02  1.09063767e-01 -4.80775461e-02  2.75627747e-02
  7.04768449e-02 -3.59445252e-02  1.50457714e-02  3.12222447e-02
  4.60354388e-02 -6.44350350e-02  8.18814337e-02 -6.02545887e-02
 -1.26478318e-02  7.05394745e-02  8.90125558e-02 -2.12604273e-02
 -3.62205952e-02  1.47749577e-02 -8.20232183e-02  5.18051349e-02
  1.04119658e-01 -7.77673051e-02  4.42813523e-02 -1.36136591e-01
  2.73789599e-04 -4.27516624e-02  5.87153956e-02  6.72704205e-02
  5.19892387e-02 -7.20147341e-02  1.91251058e-02  5.67014925e-02
  5.92914037e-02  4.63381484e-02 -2.94921007e-02 -8.16941448e-03
  3.40482146e-02 -3.43506001e-02  5.81213422e-02  3.99758182e-02
 -1.75763257e-02 -6.23864233e-02  7.27015138e-02  2.31791902e-02
 -1.85868181e-02  5.15678804e-03  2.55654529e-02  2.02382971e-02
 -9.26211069e-04  1.79935750e-02  1.90526862e-02  8.84668902e-03
  3.23635712e-02  4.81760763e-02 -3.82480174e-02 -2.17176415e-02
 -1.99308321e-02  1.18333977e-02 -9.13611799e-02 -6.10522406e-08
 -1.06137265e-02 -4.09282148e-02 -4.28605340e-02  2.87106987e-02
  7.11195916e-02 -2.43412238e-02 -1.14215715e-02  5.42200264e-03
 -9.14571360e-02 -2.03545820e-02 -4.76958491e-02  5.48645519e-02
 -9.57433507e-03 -1.43477228e-02 -4.04103287e-03 -2.79360893e-03
  9.10595898e-03  5.09717800e-02 -4.54695560e-02 -5.75016737e-02
  1.09921601e-02  2.19596028e-02  1.75657384e-02 -5.09550832e-02
 -2.99081001e-02  5.22811338e-03  2.59299837e-02  9.47246104e-02
 -6.24006521e-03 -5.97296730e-02 -2.58388594e-02  6.82586208e-02
  2.43512560e-02 -3.68457213e-02 -8.00241083e-02 -4.31403853e-02
  7.80644268e-02  6.05968153e-03  9.76204406e-03 -1.42234899e-02
 -1.80802755e-02  8.74209777e-02 -1.54533377e-02  1.21140694e-02
 -1.84101220e-02  2.73497254e-02 -1.67377163e-02 -1.71490759e-02
  8.38115588e-02 -4.29424979e-02 -5.30775413e-02 -5.28700091e-02
 -2.40387060e-02  5.21386378e-02 -5.58544882e-02 -5.18052839e-02
 -3.44882645e-02  3.30495723e-02  5.57662994e-02 -2.05314402e-02
  4.33647074e-02  6.56953231e-02  7.54770497e-03 -4.96632569e-02]"
"account mong muốn.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  createMintToCheckedInstruction,
  mintToChecked,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );

  const tokenAccountPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );

  // 1) use build-in function
  {
    let txhash = await mintToChecked(
      connection, // connection
      feePayer, // fee payer
      mintPubkey, // mint
      tokenAccountPubkey, // receiver (sholud be a token account)
      alice, // mint authority
      1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
      8 // decimals
    );
    console.log(`txhash: ${txhash}`);

    // if alice is a multisig account
    // let txhash = await mintToChecked(
    //   connection, // connection
    //   feePayer, // fee payer
    //   mintPubkey, // mint
    //   tokenAccountPubkey, // receiver (sholud be a token account)
    //   alice.publicKey, // !! mint authority pubkey !!
    //   1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
    //   8, // decimals
    //   [signer1, signer2 ...],
    // );
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createMintToCheckedInstruction(
        mintPubkey, // mint
        tokenAccountPubkey, // receiver (sholud be a token account)
        alice.publicKey, // mint authority
        1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
        8 // decimals
        // [signer1, signer2 ...], // only multisig account will use
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + mint authority */,
      ])}`
    );
  }
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687// 1) use build-in function
{
  let txhash =","[-9.39090177e-02 -7.54830539e-02 -1.19092867e-01  6.42197281e-02
  2.17426401e-02  2.27308529e-03  9.26613994e-03  2.78387256e-02
  4.15128097e-02  4.36471142e-02 -4.74327244e-03 -6.04892373e-02
 -4.88993116e-02 -4.26265970e-02  3.64942825e-04  8.05811770e-03
 -1.27249122e-01 -5.63882291e-02  2.98391702e-03  8.50593951e-03
  2.11471338e-02 -8.07032809e-02  5.24652451e-02 -9.57683835e-04
  4.72191684e-02  1.39892697e-02 -7.22461101e-03  9.09088925e-03
 -1.06553948e-02  2.72472296e-02  2.55153812e-02  9.35944319e-02
 -3.67737957e-03 -2.65464652e-02  2.89381556e-02  1.14521094e-01
  3.52548696e-02  8.43655970e-03  5.74233849e-03 -8.13594237e-02
 -2.36444245e-03  6.78110421e-02 -7.57791027e-02 -7.99253583e-03
  4.71013449e-02 -6.78772554e-02 -7.60709792e-02  4.46248427e-02
  9.41232964e-03 -1.88521277e-02 -6.40535727e-02  2.78105345e-02
 -2.35171858e-02 -8.24132375e-03 -5.84904440e-02  4.05283496e-02
 -3.70407328e-02  2.35096384e-02  1.23510212e-01 -1.52187804e-02
  4.00804840e-02 -2.53811870e-02  1.19685736e-02 -7.50950119e-03
 -5.55538423e-02  5.98994642e-02 -4.37320024e-02 -4.62664245e-03
 -1.77039467e-02 -6.79059550e-02 -1.52821317e-02 -6.61759898e-02
 -8.06571245e-02 -2.91272141e-02 -3.80589031e-02 -1.05326707e-02
  2.40224022e-02 -6.04859181e-03 -5.93974302e-03  2.58833785e-02
 -2.70960517e-02 -7.12398440e-02  3.10544651e-02  9.26687866e-02
  1.95192080e-02  6.20223135e-02 -2.78186910e-02 -5.25063761e-02
  1.18900063e-02 -4.31704521e-02 -4.56714183e-02  3.37866507e-02
 -4.63098250e-02 -4.50294353e-02  1.36221526e-02  4.69361059e-02
 -7.34660327e-02  6.17544651e-02 -1.34521108e-02  9.75114629e-02
  6.09545670e-02 -1.73993465e-02 -6.37296885e-02 -3.36886942e-02
  1.82863045e-02 -3.22634578e-02  1.07386358e-01 -1.88742112e-02
  7.63682602e-03  3.31605561e-02  3.09763532e-02  1.21918395e-01
  1.00164637e-02 -3.22452142e-05 -5.61545081e-02  7.12118000e-02
  2.04813611e-02  1.42503846e-02  2.66944133e-02  7.54505098e-02
  5.33195734e-02  9.94586945e-03 -8.24876726e-02 -2.00002771e-02
 -4.43501435e-02 -3.24696600e-02  3.01132072e-02  1.47302813e-32
  1.55050925e-03 -7.60444999e-02  2.42564976e-02 -4.37685847e-02
 -1.75917509e-03  2.72155162e-02  3.19374353e-02  7.62001332e-03
 -1.05628379e-01 -4.59838286e-03 -9.59862173e-02 -4.42198589e-02
 -1.19985463e-02 -8.29741359e-02 -1.03452280e-01 -7.19916075e-02
 -3.07663903e-02  9.25529674e-02  3.03817112e-02 -5.12231924e-02
 -1.43738305e-02 -2.09684204e-02  1.30651323e-02 -3.65126282e-02
 -9.18284710e-03  8.34265798e-02 -9.39412415e-03  2.20064307e-03
  4.84671406e-02  2.39231456e-02  1.86902359e-02  2.47507934e-02
 -5.21447584e-02  4.78878953e-02 -5.81954680e-02 -2.37071048e-02
  2.01961361e-02 -4.51073200e-02 -1.14341974e-01 -4.54520732e-02
  1.32752424e-02 -3.47433947e-02 -5.49654439e-02 -3.12459301e-02
 -6.27615526e-02  5.82972504e-02  3.72175537e-02  2.89479084e-03
  1.21540211e-01  4.43168953e-02 -1.28298908e-01 -2.93435808e-02
 -1.99775659e-02 -1.04181916e-02  2.75770854e-02 -2.34208237e-02
 -3.40385642e-03  3.63191366e-02  5.32364845e-02  1.59542989e-02
 -3.39574777e-02 -3.11026555e-02 -4.07136679e-02 -2.78975554e-02
  3.20108123e-02  7.22571909e-02 -3.96965407e-02  5.64398095e-02
 -3.68721597e-02 -1.80168487e-02 -1.43116927e-02  5.17587811e-02
 -2.06870725e-03  1.01010390e-01  2.28887610e-03 -1.30228288e-02
  1.50746042e-02  9.96017456e-02 -8.39358494e-02  1.85504798e-02
 -5.60046127e-03 -4.31072041e-02 -7.25798085e-02  7.51702189e-02
  2.96349321e-02  4.63476665e-02 -1.57291368e-02 -7.89324194e-02
 -1.08641703e-02 -1.39970034e-02  1.05165981e-03 -5.51254675e-03
 -5.50418124e-02 -9.13133174e-02 -1.43262073e-01 -1.40764376e-32
 -1.16282515e-02 -3.45327035e-02 -5.50642684e-02 -3.90857607e-02
 -3.30732949e-02  2.48055179e-02 -2.12860368e-02  2.32124217e-02
  5.58971167e-02  7.49173388e-02  6.55608028e-02 -2.56694611e-02
  1.78526975e-02 -5.61397485e-02 -2.72963736e-02  6.48598224e-02
  6.86901063e-02 -4.22243364e-02 -5.57296956e-03 -3.19495536e-02
 -3.69702950e-02  7.64725283e-02 -3.04703247e-02  4.77170758e-02
 -6.32696077e-02  3.09581887e-02  1.07385432e-02  8.33154917e-02
 -2.17348654e-02  1.85429081e-02  7.45397732e-02  5.47633059e-02
 -1.16385669e-01  8.44008923e-02 -3.77152525e-02 -6.60330132e-02
  8.75109248e-03  6.89776465e-02  1.52249485e-02  5.46660041e-03
 -2.07364187e-02  1.84973702e-02 -3.68168019e-02  5.35369478e-02
  8.59672502e-02 -5.08258156e-02  5.51890694e-02 -3.58295478e-02
 -7.13674501e-02  3.00503969e-02  1.11344289e-02 -4.13481705e-02
  7.88730755e-03 -2.59321947e-02 -4.30581197e-02  6.22149222e-02
  4.35555018e-02 -3.17924507e-02  2.05897423e-03 -1.02417581e-01
  1.08401470e-01 -1.34603366e-01 -9.42624733e-03  2.01548301e-02
  1.01617910e-01 -4.96023195e-03  2.19768584e-02  7.79395774e-02
  3.99006940e-02  3.38681638e-02 -6.55537248e-02  4.54937946e-03
  3.12171150e-02  3.04679647e-02  8.69728699e-02  8.27208906e-02
 -1.73189845e-02 -2.59845182e-02  5.21551967e-02  2.72025708e-02
  1.37312515e-02  1.03443246e-02  3.31796333e-02 -2.53819879e-02
  5.96001223e-02 -4.79865633e-02 -2.41849050e-02  4.24012542e-02
  5.29121747e-03 -4.88511112e-04 -1.30907714e-01  5.19177085e-03
 -1.07454099e-02  4.13957760e-02  3.56459208e-02 -6.84955452e-08
 -4.85296212e-02  1.97199713e-02 -4.56237309e-02  4.62980606e-02
  5.20967953e-02  5.24776243e-02 -4.03879806e-02 -9.36078466e-03
 -6.62110895e-02 -3.77436541e-02 -8.83218721e-02  1.89329628e-02
 -6.09822050e-02 -7.36959698e-03 -5.39412349e-03 -3.24817449e-02
 -5.49910739e-02  2.63444763e-02  3.45772970e-03 -2.86073945e-02
  6.09561987e-02 -5.23758046e-02  3.10570858e-02  3.44868116e-02
  5.77392094e-02 -3.77165936e-02  9.77601763e-03  1.14209585e-01
  2.96716560e-02 -9.33305770e-02 -5.54300025e-02  9.48668830e-03
  3.51732783e-02 -1.44599201e-02 -9.58129242e-02  3.46477628e-02
 -2.33017039e-02  5.68331033e-02 -7.01614888e-03  1.01321548e-01
 -8.12238082e-03  1.62485112e-02 -3.30106728e-02  5.73284365e-03
 -1.07473530e-01  6.30457401e-02 -3.18635628e-02  9.30992514e-02
  1.05907775e-01 -2.95889061e-02  3.29980887e-02 -6.37134612e-02
 -6.86567137e-03  5.43324202e-02 -2.38489099e-02 -3.80568951e-02
 -5.43234535e-02  2.51289662e-02  3.03802919e-02  1.79716591e-02
  3.82906571e-02  5.76423779e-02 -3.18246260e-02 -3.17954905e-02]"
"await mintToChecked(
    connection, // connection
    feePayer, // fee payer
    mintPubkey, // mint
    tokenAccountPubkey, // receiver (sholud be a token account)
    alice, // mint authority
    1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
    8 // decimals
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createMintToCheckedInstruction(
      mintPubkey, // mint
      tokenAccountPubkey, // receiver (sholud be a token account)
      alice.publicKey, // mint authority
      1e8, // amount. if your decimals is 8, you mint 10^8 for 1 token.
      8 // decimals
      // [signer1, signer2 ...], // only multisig account will use
    )
  );
}
12345678910111213141516171819202122232425262728# Làm thế nào để chuyển tokenBạn có thể chuyển token từ một token account đến một token account khác.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  createTransferCheckedInstruction,
  TOKEN_PROGRAM_ID,
  transferChecked,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );

  const tokenAccountXPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );
  const tokenAccountYPubkey = new PublicKey(
    ""GMxZfDmpR1b3vdJYXHzdF5noVLQogZuUAsDHHQ3ytPfV""
  );

  // 1) use build-in function
  {
    let txhash = await transferChecked(
      connection, // connection
      feePayer, // payer
      tokenAccountXPubkey, // from (should be a token account)
      mintPubkey, // mint
      tokenAccountYPubkey, // to (should be a token account)
      alice, // from's owner
      1e8, // amount, if your deciamls is 8, send 10^8 for 1 token
      8 // decimals
    );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createTransferCheckedInstruction(
        tokenAccountXPubkey, // from (should be a token account)
        mintPubkey, // mint
        tokenAccountYPubkey, // to (should be a token account)
        alice.publicKey, // from's owner
        1e8, // amount, if your deciamls is 8, send 10^8 for","[-4.90370169e-02  1.25826532e-02 -1.29351959e-01 -1.31386146e-02
 -1.29279464e-01 -1.29226539e-02  8.50641802e-02  9.55337510e-02
  6.16858602e-02  4.09924090e-02  4.12633456e-02 -1.53154254e-01
  2.09396295e-02  6.57898700e-03  5.79993427e-02 -2.45432742e-02
 -3.69216017e-02 -5.12067787e-03 -3.60278860e-02 -3.28548737e-02
  2.07051206e-02 -7.24640712e-02  8.48220196e-03  1.13521190e-02
  4.94115725e-02 -1.20952390e-01  2.47188713e-02 -2.58827265e-02
 -4.82236929e-02 -5.90638444e-03  9.13144052e-02  5.96327744e-02
 -2.20585335e-02 -6.65597571e-03  2.34112702e-02  3.28845270e-02
  1.45203480e-02 -1.46387890e-02  8.82184207e-02 -4.03440706e-02
  5.50308824e-03  1.57961659e-02 -5.52191921e-02 -5.37129901e-02
  2.42502876e-02  2.92195398e-02 -4.85522859e-02  9.27995890e-02
 -8.62558559e-03  2.89367456e-02  5.05377762e-02  3.69637012e-02
 -3.32317874e-02  3.79897654e-02 -3.29954922e-02 -8.18116404e-03
  5.26245032e-03  5.36042713e-02  3.68181653e-02  9.22777131e-03
 -5.38936295e-02  6.70815632e-02 -3.75293270e-02 -3.11850291e-02
 -5.22790588e-02  1.18797431e-02 -5.74422218e-02 -2.54031681e-02
 -4.75570187e-02  6.41852245e-02  5.68711618e-03 -6.74944967e-02
 -6.99161291e-02 -4.03160118e-02 -6.21055029e-02 -6.89909682e-02
 -7.01279100e-03  7.64596649e-03 -3.95366326e-02 -2.68736407e-02
 -1.67573467e-02  5.53933717e-02  7.16804862e-02  7.93344155e-03
  3.40525545e-02  3.34630273e-02  1.62811354e-02  2.81345863e-02
  1.94649920e-02 -5.03942408e-02  3.14307027e-02  6.72727898e-02
  2.90673375e-02 -4.67422418e-02  2.83622257e-02  7.48459203e-03
  4.66551408e-02  4.90022451e-02 -8.77136178e-03  6.85065836e-02
  5.34639098e-02  3.40576842e-02 -7.06690848e-02  4.36388509e-04
  8.35182443e-02  2.01680232e-02  1.24848612e-01  8.39659886e-04
  1.39765013e-02 -1.02721294e-03  8.70960485e-03  3.98145765e-02
 -9.67570115e-03 -3.05217002e-02  1.56474970e-02  6.33940026e-02
  2.17473637e-02  3.34442519e-02  1.24548580e-02  7.20215887e-02
  4.93875407e-02 -2.11547166e-02 -1.01364382e-01 -1.85195394e-02
 -3.88108194e-02 -1.71214454e-02  9.99605507e-02  4.34936253e-33
 -4.91003841e-02  2.45539136e-02  7.83862639e-03 -2.59388443e-02
 -1.57643724e-02  3.40820737e-02 -1.93218831e-02  4.71473150e-02
 -4.06702161e-02  1.35937911e-02  3.39873019e-03 -5.68474121e-02
 -5.56782149e-02 -4.75960337e-02 -7.54050985e-02 -4.39804941e-02
 -4.59025837e-02  1.76509023e-02  1.07076816e-01  3.27630696e-04
  1.39449639e-02 -6.72643185e-02 -2.85024345e-02  6.54830690e-03
  5.72797097e-02  5.11975661e-02 -2.45713424e-02 -2.95413882e-02
  1.66946370e-02 -1.10662188e-02  2.23826524e-02  1.06077064e-02
 -2.99653914e-02 -1.53013030e-02 -7.80351162e-02 -4.95503657e-02
  2.20908616e-02  1.61026437e-02 -6.27501830e-02 -4.41663973e-02
  5.60711771e-02 -1.22396993e-02 -5.09951301e-02 -3.39145325e-02
 -7.58469999e-02  5.30988574e-02  1.32005149e-02  6.53817505e-02
  1.60414129e-01 -5.49891554e-02 -7.53685385e-02  7.03015691e-03
 -4.85977679e-02 -2.52307896e-02  6.00222796e-02 -9.74037945e-02
  1.61277186e-02 -2.29744837e-02  1.59451552e-02 -5.25324643e-02
 -3.25695127e-02 -4.09154631e-02 -3.06830928e-02  1.36193633e-03
 -4.22298685e-02  6.59826696e-02 -8.62398744e-02 -8.79738852e-02
  3.65177356e-02 -3.68580706e-02 -1.05864301e-01 -1.05661964e-02
  1.64123718e-02  4.72555086e-02 -5.13673835e-02 -2.26226654e-02
  7.02594072e-02 -3.02807894e-02  3.43035571e-02  3.53675485e-02
  2.55954675e-02  2.47551911e-02 -8.09282362e-02  8.03453848e-02
  8.18711221e-02 -1.87060554e-02 -1.49897924e-02 -1.87171046e-02
 -3.11424918e-02 -4.99174185e-02 -1.39476852e-02 -6.28396645e-02
  5.07097691e-02 -5.64102307e-02 -5.63367233e-02 -5.34233236e-33
 -1.43168028e-02  1.18900221e-02 -3.52479778e-02  5.63883744e-02
 -1.69039872e-02  2.15046741e-02 -2.34326944e-02  4.70673549e-04
  9.65145789e-03  3.57101895e-02 -6.83438107e-02  1.03535075e-02
  4.08168184e-03 -3.52375070e-03  1.12929055e-02 -3.12896147e-02
 -5.41029908e-02  6.45033866e-02  1.85706299e-02 -1.84062570e-02
  2.08741557e-02  3.05544920e-02  2.30175871e-02  7.88270459e-02
  8.97247437e-03  4.50907424e-02 -3.48820612e-02  5.66325672e-02
  9.61196516e-03  2.89991777e-02 -1.34723121e-02 -9.34101939e-02
  2.52223592e-02 -9.41988919e-03 -2.62869764e-02 -1.48319110e-01
  5.27909733e-02  1.33893266e-01 -6.69203922e-02  4.13303077e-02
  5.62915094e-02 -9.54098850e-02  4.23411280e-03  3.90449762e-02
  4.02098373e-02 -7.16774613e-02  3.18243504e-02 -1.31290383e-03
 -3.19597349e-02  5.19615747e-02  3.66304405e-02 -8.69221464e-02
 -1.04125060e-01  5.80268428e-02 -9.31748450e-02  8.22770894e-02
  1.06091060e-01 -7.17908293e-02  7.42992386e-02 -1.34794638e-01
 -6.09961860e-02 -2.08380893e-02  6.59925565e-02  9.82037485e-02
  1.04663648e-01 -5.68792559e-02  4.06147167e-03  5.11874072e-02
  2.96826325e-02  3.34333442e-02  2.11226717e-02 -2.07599364e-02
  8.91873017e-02 -1.99979208e-02  7.24036098e-02 -1.97533006e-03
 -3.79355103e-02 -3.07841059e-02  8.86960402e-02  5.29457182e-02
 -4.41729277e-02  3.17477062e-02  2.37091035e-02  4.86072758e-03
 -4.50796448e-02  8.24158918e-03  3.46219987e-02  3.51285040e-02
  2.22398639e-02  2.98956186e-02 -6.71369210e-02  2.97440570e-02
  8.29950348e-02 -5.95769733e-02 -4.43006307e-02 -5.94566423e-08
 -1.09887039e-02 -1.11906528e-01 -3.99409735e-04  5.71766756e-02
  4.42258939e-02  6.84306398e-03 -4.51258868e-02 -6.17972016e-02
 -4.72279601e-02  6.05010893e-03 -5.46827875e-02  4.78490107e-02
 -3.44665647e-02 -3.07461005e-02  2.52281409e-02 -2.02396791e-02
  8.97017941e-02 -4.10403218e-03 -7.12510645e-02 -4.61916849e-02
 -3.64530511e-04  4.24827002e-02  1.45359281e-02 -4.58622761e-02
 -9.37875733e-03  1.06339240e-02 -1.12503180e-02  1.57492682e-01
 -2.59284079e-02 -1.19947698e-02 -9.30255372e-03  4.34546396e-02
  2.66931746e-02 -3.55181061e-02 -1.20452419e-01 -2.61040367e-02
  4.60881330e-02  5.76396249e-02  5.51680755e-03  1.48244612e-02
 -7.10604014e-03 -5.99577371e-03 -8.31727162e-02  3.27510457e-03
 -2.05598702e-03 -5.47197163e-02 -2.98326574e-02  2.13594157e-02
  6.91435933e-02  3.45162721e-03 -2.97861155e-02 -2.69870982e-02
  2.65762322e-02  1.33888936e-02 -6.25906065e-02 -4.40922603e-02
 -4.82233688e-02  4.30295877e-02  5.53636737e-02  3.20446789e-02
  6.83320090e-02  7.10297795e-03 -2.85007581e-02 -7.73695633e-02]"
"1 token
        8 // decimals
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + owner */,
      ])}`
    );
  }
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980// 1) use build-in function
{
  let txhash = await transferChecked(
    connection, // connection
    feePayer, // payer
    tokenAccountXPubkey, // from (should be a token account)
    mintPubkey, // mint
    tokenAccountYPubkey, // to (should be a token account)
    alice, // from's owner
    1e8, // amount, if your deciamls is 8, send 10^8 for 1 token
    8 // decimals
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createTransferCheckedInstruction(
      tokenAccountXPubkey, // from (should be a token account)
      mintPubkey, // mint
      tokenAccountYPubkey, // to (should be a token account)
      alice.publicKey, // from's owner
      1e8, // amount, if your deciamls is 8, send 10^8 for 1 token
      8 // decimals
    )
  );
}
1234567891011121314151617181920212223242526272829# Làm thế nào để đốt tokenBạn có thể đốt (huỷ) token nếu bạn là chủ sỡ hữu của token đó.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  burnChecked,
  createBurnCheckedInstruction,
  TOKEN_PROGRAM_ID,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );

  const tokenAccountPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );

  // 1) use build-in function
  {
    let txhash = await burnChecked(
      connection, // connection
      feePayer, // payer
      tokenAccountPubkey, // token account
      mintPubkey, // mint
      alice, // owner
      1e8, // amount, if your deciamls is 8, 10^8 for 1 token
      8
    );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createBurnCheckedInstruction(
        tokenAccountPubkey, // token account
       ","[-4.01419140e-02  8.81696772e-03 -7.89388642e-02  5.71781769e-02
 -1.26194030e-01  1.27514908e-02  1.08814828e-01  9.31720659e-02
  3.52065861e-02  6.76261634e-02  7.17404857e-03 -1.62180051e-01
 -4.63072620e-02  3.73188443e-02  1.76260751e-02  1.44106606e-02
 -3.04007400e-02 -5.20752035e-02 -3.09329666e-02  2.87962868e-03
  4.39956076e-02 -8.69895965e-02  4.87047657e-02  1.32021178e-02
  1.04143001e-01 -7.30443969e-02  4.51885164e-03 -6.46536350e-02
 -2.35218722e-02 -5.87113202e-03  7.14190826e-02  2.94552930e-02
 -2.63520870e-02 -5.18541178e-03 -2.23221015e-02  7.49859586e-02
  2.17386205e-02 -2.14120876e-02  5.60797416e-02 -8.34689736e-02
 -2.76341243e-03  6.20518811e-03 -8.13834667e-02 -2.05961410e-02
  1.69555284e-02  2.12591998e-02 -1.11213708e-02  1.00069664e-01
  3.82394418e-02  5.30934222e-02  1.82490479e-02  3.62098664e-02
 -4.39301953e-02  2.10914165e-02  2.02822629e-02  2.68269666e-02
  2.77050491e-02  3.65749672e-02  6.92124143e-02 -1.57462060e-02
 -8.26661661e-03  2.17869766e-02  1.21886171e-02 -3.09712514e-02
  5.04221115e-03 -1.19543588e-02 -6.35392219e-02  3.29486839e-02
 -9.67404470e-02  1.37879318e-02  5.82616813e-02 -1.08305868e-02
 -7.05601498e-02 -2.90396232e-02 -6.87507540e-02 -9.24487934e-02
  1.24580599e-02  4.50425744e-02 -7.83046782e-02  5.25539219e-02
 -6.37188787e-04  2.07988508e-02  8.02410096e-02  3.28457169e-02
  1.47413751e-02  6.42395690e-02  5.48445666e-03  1.68050285e-02
 -4.16672118e-02 -4.65667658e-02 -1.22626044e-03  5.14325164e-02
  9.62675922e-03 -1.23395231e-02  9.08627734e-02  6.89639151e-02
 -2.18972452e-02  2.91348863e-02 -2.33647954e-02  5.42312339e-02
  3.14271860e-02  2.94127390e-02 -4.48468514e-02  1.46970768e-02
  6.95256293e-02  3.79178673e-02  1.05599761e-01 -1.58874840e-02
 -1.90949887e-02 -3.11342796e-04  5.71053438e-02  3.85972187e-02
 -3.24415788e-02  4.12637740e-02 -4.14147088e-03  6.76981136e-02
 -2.29153559e-02  5.24724051e-02  5.14435694e-02  4.90124486e-02
  7.16191754e-02  4.63820882e-02 -7.45844021e-02  4.99423407e-03
 -2.82794964e-02 -3.58839035e-02  1.25345796e-01  1.91020201e-33
 -3.61949615e-02 -5.20219142e-03 -3.38189267e-02  9.00048949e-03
  3.99070047e-03  1.18133640e-02  5.73410951e-02  9.70786437e-02
 -5.11175618e-02 -3.28492792e-03 -2.76435073e-02 -8.29859599e-02
 -3.11899465e-02 -1.18155414e-02 -8.60029534e-02 -7.96275288e-02
 -1.04722874e-02  9.00141709e-03  1.55925438e-01  2.49111988e-02
  1.10303396e-02 -6.75439835e-02 -4.23721876e-03  1.49874166e-02
 -1.09633226e-02  5.00522461e-03 -3.00026368e-02 -4.44962680e-02
  2.11166590e-02 -2.08937805e-02  3.55849564e-02  2.86735296e-02
 -5.46219386e-02  1.22005120e-02  5.84291527e-03 -3.17499079e-02
  1.45448903e-02  3.61775644e-02 -1.01264216e-01 -2.13797987e-02
  1.05936918e-02 -1.73845366e-02 -9.05187204e-02 -9.97159444e-03
 -1.11780465e-01  1.76072214e-02  4.11264338e-02 -4.85355556e-02
  1.15092680e-01  2.29526516e-02 -4.97344956e-02 -8.52044113e-03
 -3.85884456e-02 -7.75220543e-02  9.90634635e-02 -7.94894993e-02
  3.28909494e-02  1.38240191e-03  2.18536326e-04 -2.37137135e-02
 -3.13318595e-02 -4.19234186e-02 -3.12247332e-02 -2.08897740e-02
 -1.00570526e-02  7.61532038e-02 -1.23197354e-01 -6.87139705e-02
  3.36040705e-02 -2.72375550e-02 -7.39923567e-02  9.02679376e-03
  1.18295522e-02  5.47173508e-02 -1.03828218e-02  1.36441607e-02
 -1.92534141e-02 -3.95311825e-02 -1.32613573e-02  8.25344771e-03
  2.11260282e-02  3.06256972e-02 -8.87069032e-02  7.96362385e-02
  3.99970300e-02  2.37827599e-02 -5.69077618e-02 -2.72329934e-02
 -3.37449647e-02 -1.36291469e-02  5.39621711e-03 -7.36744776e-02
 -1.97627880e-02 -6.76663518e-02 -3.48208509e-02 -3.23815523e-33
 -2.32795235e-02  2.19664015e-02 -5.47215343e-02  4.73034866e-02
 -3.60836498e-02  3.82261840e-03 -9.18080378e-03  4.01818864e-02
  2.60633491e-02  5.41087538e-02 -9.95320082e-02  5.15070632e-02
 -1.95554253e-02 -2.05604881e-02  9.41168575e-04 -4.69114818e-02
 -3.80416028e-02 -1.71692092e-02  2.97874026e-02 -5.23435287e-02
  7.80651672e-03  5.14529496e-02  1.49470214e-02  4.23864871e-02
  3.77720222e-03  4.23984341e-02 -2.77063437e-02  8.24373364e-02
  2.84811277e-02 -7.05594756e-03 -1.56284608e-02 -6.34921193e-02
  3.19441445e-02 -3.70424334e-03 -1.62223577e-02 -8.91359672e-02
  2.60420237e-02  1.31304547e-01  3.32410680e-03  3.35752256e-02
  5.42109609e-02 -8.73232782e-02  8.21326219e-04  1.96257345e-02
  4.74376269e-02 -3.94932106e-02 -2.22350936e-02 -4.34587784e-02
  2.25906540e-02  7.68791661e-02  6.00883290e-02 -4.78072986e-02
 -1.21732973e-01  4.19903584e-02 -7.19905496e-02  4.71306518e-02
  1.02653086e-01 -7.23230019e-02  1.34713367e-01 -8.19111690e-02
 -2.64661331e-02 -3.49321589e-02  1.38366193e-01  4.82104123e-02
  7.39570037e-02 -4.11588773e-02 -3.71224806e-02  1.22370720e-02
  6.55320510e-02  9.87197161e-02  1.72459055e-02 -2.79046036e-02
  4.83472012e-02 -4.68601473e-02  6.54330403e-02 -3.31995599e-02
 -8.11540056e-03 -6.97546527e-02  8.39223266e-02  4.98012304e-02
 -9.84541420e-03  4.48330604e-02  6.85859397e-02  7.04364432e-03
  1.88862626e-02  2.29698159e-02  7.62178078e-02  3.67874658e-04
 -3.38964090e-02  4.73512635e-02 -3.98720391e-02  2.94913314e-02
  3.91906910e-02 -9.90150794e-02 -9.47147831e-02 -5.56020190e-08
 -6.85237870e-02 -5.73318861e-02 -6.76431730e-02  4.87157553e-02
  3.82431000e-02  1.33800099e-03 -3.97333503e-02 -5.60851693e-02
 -2.35517062e-02 -1.32570239e-02 -9.44563448e-02  1.82815548e-02
 -7.15336250e-03 -1.21386992e-02  2.21055448e-02 -6.35882765e-02
  8.53503421e-02 -4.72741351e-02 -6.82455599e-02 -6.04932904e-02
  2.95745619e-02  4.93949931e-03 -1.35870837e-03 -3.79192978e-02
 -1.69113856e-02 -2.23539378e-02  5.12163490e-02  1.25070095e-01
  1.93653554e-02 -1.54944463e-02 -2.13595908e-02  6.82277232e-02
  2.65701720e-03 -2.30843145e-02 -9.24815759e-02 -5.93527593e-02
  4.77721468e-02 -1.16729215e-02  1.53847681e-02  1.44751146e-02
 -1.03447977e-02  1.23173394e-03 -4.87479046e-02 -1.62116240e-03
  3.52650462e-03 -2.95941625e-02 -3.70594747e-02  6.19979668e-03
  3.89846712e-02  2.11228859e-02  3.39985751e-02 -2.05816161e-02
 -6.09671213e-02  4.59966026e-02 -7.20572919e-02 -6.26455024e-02
 -3.28645185e-02  4.75714169e-03  1.38907544e-02  1.87770985e-02
  6.79416358e-02 -1.21195586e-02 -2.42106803e-02 -9.06748548e-02]"
"mintPubkey, // mint
        alice.publicKey, // owner of token account
        1e8, // amount, if your deciamls is 8, 10^8 for 1 token
        8 // decimals
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + token authority */,
      ])}`
    );
  }
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475// 1) use build-in function
{
  let txhash = await burnChecked(
    connection, // connection
    feePayer, // payer
    tokenAccountPubkey, // token account
    mintPubkey, // mint
    alice, // owner
    1e8, // amount, if your deciamls is 8, 10^8 for 1 token
    8
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createBurnCheckedInstruction(
      tokenAccountPubkey, // token account
      mintPubkey, // mint
      alice.publicKey, // owner of token account
      1e8, // amount, if your deciamls is 8, 10^8 for 1 token
      8 // decimals
    )
  );
}
123456789101112131415161718192021222324252627# Làm thế nào để đóng một token accountBạn có thể đóng một token account nếu bạn không muốn dùng nó nữa. Sẽ có 2 trường hợp:Wrapped SOL - Đóng và chuyển Wrapped SOL thành SOLCác Token khác - Bạn có thể đóng chỉ khi số dư của token account là 0.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import { closeAccount, createCloseAccountInstruction } from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const tokenAccountPubkey = new PublicKey(
    ""2XYiFjmU1pCXmC2QfEAghk6S7UADseupkNQdnRBXszD5""
  );

  // 1) use build-in function
  {
    let txhash = await closeAccount(
      connection, // connection
      feePayer, // payer
      tokenAccountPubkey, // token account which you want to close
      alice.publicKey, // destination
      alice // owner of token account
    );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createCloseAccountInstruction(
        tokenAccountPubkey, // token account which you want to close
  ","[-2.02001054e-02  3.43196206e-02 -9.45826396e-02  4.97543812e-02
 -1.34227365e-01 -8.49516317e-03  9.04067010e-02  8.99106637e-02
  4.20298874e-02  9.25305486e-02  1.68133769e-02 -1.39357015e-01
 -4.91248816e-02  1.57985389e-02  3.51954661e-02  5.72178513e-03
 -6.84037507e-02 -4.59036753e-02 -3.18773016e-02 -3.43698151e-02
  7.58920610e-02 -1.01291284e-01  3.33190411e-02  1.31298946e-02
  8.84710476e-02 -6.63433596e-02  2.86453194e-03 -4.49970290e-02
 -3.66449244e-02  2.05314904e-03  8.04594308e-02  9.59518924e-03
 -1.31442053e-02 -1.74278859e-02  2.45569982e-02  6.93896487e-02
 -1.57839211e-03  8.79931077e-03  7.17144832e-02 -6.94705620e-02
 -1.69501435e-02  3.11356988e-02 -8.51090029e-02 -2.20135003e-02
  9.24694259e-03  3.89734353e-03 -3.47202830e-02  8.60095620e-02
  2.70131081e-02  4.98605594e-02  5.51174842e-02  8.49401802e-02
 -4.45803292e-02  2.15010121e-02  2.10392512e-02 -1.28924195e-02
  3.70761119e-02  3.62727493e-02  5.03765941e-02  2.79722473e-04
 -5.32764848e-03  8.66735540e-03  9.06087284e-04 -3.03479191e-02
 -5.92763908e-03  5.12326835e-03 -3.59025635e-02  1.89685286e-03
 -5.94977103e-02  1.02249235e-02  4.64599356e-02 -1.77344568e-02
 -3.11734136e-02 -3.52612250e-02 -8.87610540e-02 -7.11428076e-02
  2.58404240e-02  4.59641181e-02 -7.29308948e-02  4.84672263e-02
 -2.31247731e-02  4.19189706e-02  8.57474282e-02  3.05141602e-02
  5.77558801e-02  8.42852294e-02  4.46173456e-03  1.60117373e-02
 -3.82990227e-03 -1.28288288e-03 -9.08817165e-03  5.69617078e-02
  4.08281870e-02  5.86753665e-03  1.01120025e-01  5.28423190e-02
  1.63345933e-02  4.67873588e-02 -4.05224003e-02  5.13985567e-02
  1.50214531e-03  2.25289026e-03 -7.27772266e-02  5.59656834e-03
  1.09610327e-01  2.83549931e-02  7.06126615e-02 -1.47590591e-02
 -1.58031136e-02 -3.04837804e-02  4.49342057e-02  5.29300012e-02
 -2.13301601e-03  1.52528351e-02  1.13283042e-02  7.50612542e-02
 -2.88696098e-03  7.23567754e-02  5.85375391e-02  3.78882065e-02
  1.06115252e-01  3.87613811e-02 -7.39785433e-02 -1.74943209e-02
 -6.07627146e-02 -5.37348017e-02  1.09402828e-01  2.08222165e-33
 -3.90220024e-02 -1.19472742e-02 -2.41572671e-02 -2.73591150e-02
  5.57542080e-03  1.45921018e-02  5.05231731e-02  1.05586410e-01
 -8.13841000e-02  2.57318392e-02  2.16274615e-02 -6.40782490e-02
 -2.51385570e-02 -3.78616974e-02 -8.12322423e-02 -7.20429718e-02
 -1.13500860e-02  2.84017250e-02  1.28851295e-01 -1.91084594e-02
 -1.51779139e-02 -7.96709955e-02 -8.47235089e-04  7.84049556e-03
 -1.86009910e-02  3.16662975e-02 -1.02744382e-02 -3.42180096e-02
  4.14218707e-03 -8.85801017e-03  6.01150095e-02  2.79203989e-02
 -6.25390112e-02  9.69607092e-04  2.31323559e-02 -2.23367549e-02
  4.15227236e-03  3.34718488e-02 -1.04748666e-01 -3.72716375e-02
  1.91953015e-02 -6.45206892e-05 -8.22095200e-02 -2.71248296e-02
 -1.05524868e-01 -1.40499473e-02  3.78374103e-03 -3.93939856e-03
  1.01404034e-01  1.54228900e-02 -4.79227230e-02  3.59056853e-02
  2.85599264e-03 -7.87292272e-02  9.77053344e-02 -8.68865550e-02
  4.20459323e-02 -1.56612732e-02  1.70124173e-02 -1.94913875e-02
 -9.85835958e-03 -5.17956130e-02 -5.54653965e-02 -1.45375393e-02
 -4.87065166e-02  9.09427702e-02 -1.12794586e-01 -7.43275210e-02
  2.25242376e-02 -2.94008199e-02 -4.69463989e-02 -6.48347195e-03
  2.10926197e-02  2.43980754e-02 -1.01540005e-02  1.17669515e-02
  1.39297126e-02  1.57901290e-04 -6.50625825e-02  1.05230454e-02
  2.00571045e-02  1.39298979e-02 -1.22139134e-01  7.03259557e-02
  4.08559591e-02  3.39070186e-02 -6.44032434e-02 -1.41034275e-02
 -1.79515816e-02 -3.13121639e-02 -1.22127682e-02 -9.72841457e-02
  1.38924513e-02 -2.84250714e-02 -6.61968514e-02 -2.58833111e-33
 -2.32185796e-02 -2.69239303e-03 -4.37765829e-02  2.63533127e-02
 -1.91136505e-02  9.54667572e-03 -6.34864438e-03 -4.24330618e-04
 -7.95087963e-03  4.39239517e-02 -8.52955133e-02  3.62286642e-02
 -4.76033874e-02  1.17075797e-02  2.60008108e-02  4.94553568e-03
 -4.83522825e-02 -1.39528960e-02  3.17094885e-02 -4.99820486e-02
 -6.78692572e-03  9.47301015e-02  6.13132166e-03  5.93678094e-02
 -2.82784179e-02  4.32922244e-02 -4.02359515e-02  7.39928633e-02
  2.85464600e-02 -1.21228164e-02 -3.65051761e-04 -5.01685739e-02
 -8.57841596e-03  2.17023138e-02 -7.11674849e-03 -1.10150546e-01
  3.55574712e-02  1.30424976e-01 -6.59670564e-04  6.30679131e-02
  5.17577417e-02 -6.59678727e-02  1.67015251e-02  2.91140731e-02
  5.03942184e-02 -4.06618081e-02  1.60379987e-02 -2.95379348e-02
  2.43929829e-02  1.26362041e-01  5.87730482e-02 -6.31809011e-02
 -1.12447403e-01  5.99031895e-02 -9.01383311e-02  3.53944711e-02
  8.41150731e-02 -8.17323849e-02  1.23842418e-01 -8.65267888e-02
 -9.71542019e-03 -5.42958975e-02  1.42276213e-01  9.53336507e-02
  4.39976119e-02 -5.50906248e-02 -5.98255843e-02  1.69660412e-02
  6.72321990e-02  7.55009204e-02  1.65645499e-02 -2.99974177e-02
  4.38825265e-02 -4.20404412e-02  5.40623590e-02 -9.46076866e-03
 -4.07827320e-03 -7.23609105e-02  7.25436658e-02  8.26106742e-02
 -1.43823717e-02  5.88055775e-02  4.15617786e-02  8.03668750e-04
 -6.55417796e-03 -2.85730185e-03  5.13179563e-02  1.00035416e-02
 -3.46284099e-02  6.14340976e-02 -4.70801443e-02  3.96838039e-02
  3.30807790e-02 -8.14425498e-02 -6.03271946e-02 -5.72985037e-08
 -4.40274812e-02 -7.46003911e-02 -4.70920056e-02  6.39494658e-02
  5.61556332e-02 -1.41264675e-02 -1.59320515e-02 -3.02047003e-02
 -4.47829515e-02 -3.37109901e-02 -2.78668124e-02  2.92541347e-02
  4.32244642e-03 -2.86303107e-02  2.12342404e-02 -7.36294389e-02
  4.58135791e-02 -3.56922597e-02 -5.10659181e-02 -3.63450423e-02
  3.01984679e-02  3.95806599e-03  2.74709184e-02 -3.00946739e-02
 -8.22573435e-03 -2.58844066e-02  5.95946759e-02  1.10510685e-01
  7.45192694e-04  3.94693715e-03 -3.91735695e-02  7.43533522e-02
  3.53194550e-02 -5.16821966e-02 -1.03437729e-01 -3.94160002e-02
  2.48905998e-02 -3.14052380e-03 -3.76975193e-04  2.47120559e-02
 -1.24573270e-02 -1.27534326e-02 -3.43789198e-02  1.13355899e-02
 -8.29473231e-03 -4.99565043e-02 -3.86656746e-02  2.69999616e-02
  4.32748199e-02  1.11600552e-02 -4.82168980e-03 -1.40605718e-02
 -3.72315571e-02  2.07417104e-02 -7.93751329e-02 -4.86631542e-02
 -3.85901928e-02  2.58775260e-02  3.48757915e-02  3.49571779e-02
  8.07975754e-02 -2.98160724e-02 -1.65313315e-02 -1.03744216e-01]"
"     alice.publicKey, // destination
        alice.publicKey // owner of token account
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + owner */,
      ])}`
    );
  }
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// 1) use build-in function
{
  let txhash = await closeAccount(
    connection, // connection
    feePayer, // payer
    tokenAccountPubkey, // token account which you want to close
    alice.publicKey, // destination
    alice // owner of token account
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createCloseAccountInstruction(
      tokenAccountPubkey, // token account which you want to close
      alice.publicKey, // destination
      alice.publicKey // owner of token account
    )
  );
}
1234567891011121314151617181920212223# Làm thế nào để thiết lập chủ sở hữu cho token account và mintBạn có thể thiết lập hoặc cập nhật chủ sỡ hữu. Có 4 loại:MintTokens (mint account)FreezeAccount (mint account)AccountOwner (token account)CloseAccount (token account)TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  AuthorityType,
  createSetAuthorityInstruction,
  setAuthority,
  TOKEN_PROGRAM_ID,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const randomGuy = Keypair.generate();
  console.log(`random guy: ${randomGuy.publicKey.toBase58()}`);

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );

  // authority type

  // 1) for mint account
  // AuthorityType.MintTokens
  // AuthorityType.FreezeAccount

  // 2) for token account
  // AuthorityType.AccountOwner
  // AuthorityType.CloseAccount

  // 1) use build-in function
  {
    let txhash = await setAuthority(
      connection, // connection
      feePayer, // payer
      mintPubkey, // mint account || token account
      alice, // current authority
      AuthorityType.MintTokens, // authority type
      randomGuy.publicKey // new authority (you can pass `null` to close it)
    );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createSetAuthorityInstruction(
        mintPubkey, // mint acocunt || token account
        alice.publicKey, // current auth
        AuthorityType.MintTokens, // authority","[-1.30696241e-02  2.21462343e-02 -7.24337548e-02  2.43028905e-02
 -9.39212143e-02  2.09615603e-02  1.20652676e-01  4.72501218e-02
  8.42009932e-02  9.89534780e-02  3.87828089e-02 -1.14660196e-01
 -3.76482494e-02 -5.20648621e-02  2.49289647e-02  7.28262514e-02
 -7.71213770e-02  5.44954557e-03 -3.94600257e-02 -3.44012794e-03
  2.67630517e-02 -6.12881361e-03  2.18269657e-02  1.84893031e-02
 -4.78192372e-03 -6.96182698e-02  2.72157975e-02 -5.62417619e-02
 -3.79034057e-02 -1.05829602e-02  7.32214972e-02 -2.85534188e-02
 -1.04930229e-01 -4.81487736e-02  2.98425718e-03  9.46482867e-02
 -8.51861294e-03 -2.45522019e-02  6.78908825e-02 -4.89017963e-02
  3.40197943e-02  3.96866351e-02 -9.62220430e-02 -6.44868687e-02
  3.37174274e-02  6.49794713e-02 -4.80341651e-02  1.61946658e-02
  6.89368742e-03  3.65356617e-02 -4.22785506e-02 -1.41740078e-02
 -6.13194332e-02  1.61527004e-02  9.95423831e-03  6.32869173e-03
  4.15913872e-02  1.64484084e-02  3.31930667e-02  9.02841799e-03
  2.54401774e-03  1.97535567e-02 -2.17151809e-02 -1.97582077e-02
  2.00221892e-02 -2.68698707e-02 -2.42349245e-02 -4.81368043e-02
 -3.57832648e-02 -2.86677536e-02  4.80253324e-02 -5.49477711e-03
 -7.11031631e-02 -3.05901654e-02 -6.99993521e-02 -5.38331009e-02
  5.97185129e-03  2.84128767e-02 -7.96644837e-02  3.07621360e-02
  4.54525538e-02  3.25800143e-02  8.19320232e-02 -9.02058033e-04
  1.78139759e-04  8.98943022e-02  7.50190252e-03 -6.36315495e-02
  1.93489976e-02  8.92511290e-03 -4.94726887e-03  5.50580509e-02
  4.88624610e-02  1.80827698e-03  5.55950180e-02 -2.46889633e-03
 -2.90814396e-02  4.48130481e-02 -3.24578658e-02  6.26728609e-02
  4.40117754e-02  3.67123857e-02 -4.54280823e-02 -2.33325344e-02
  5.83319031e-02  7.91404173e-02  1.03268623e-01 -2.30668075e-02
 -1.29676396e-02  1.02943806e-02 -5.36046876e-03  2.48439703e-02
 -5.97594902e-02 -2.79494026e-03 -1.22611867e-02  1.36936024e-01
 -1.30282901e-02  9.86197963e-02  8.49577487e-02  7.24981278e-02
  6.96050674e-02  1.36565641e-02 -1.05680242e-01 -2.86347675e-03
 -8.31063837e-03 -7.07554594e-02  1.27346709e-01  3.00229192e-33
 -5.64041249e-02 -4.30750474e-02 -6.05337098e-02  1.89416017e-02
  6.47842437e-02 -1.67805348e-02  8.71496089e-03  5.80950454e-02
 -6.03572838e-02  1.60576776e-02 -6.81842305e-03 -1.26888081e-01
 -7.04604015e-02 -4.94614318e-02 -5.92312291e-02 -8.09763968e-02
 -8.22410174e-03  3.46372873e-02  5.76314963e-02  2.00400166e-02
  5.49978726e-02 -5.04652373e-02  3.40789035e-02  2.50282995e-02
  1.65151414e-02 -5.38976630e-03  8.52863956e-03 -5.42387851e-02
  1.43752713e-03  1.13564022e-02  6.08113296e-02  2.47822143e-02
 -3.70283215e-03  9.83399898e-02 -4.94214669e-02 -2.24952828e-02
 -3.04617733e-02  2.22381558e-02 -6.78730458e-02 -5.25771864e-02
  5.89261344e-03 -1.31239183e-02 -1.33538261e-01  6.37885779e-02
 -7.81970397e-02 -8.37417915e-02  6.31615594e-02 -1.44355530e-02
  1.08046569e-01  3.14491875e-02 -3.21402699e-02 -7.14497939e-02
 -2.64827479e-02 -5.73918819e-02  7.39576444e-02 -6.78864494e-02
 -2.53162328e-02 -1.24943629e-02 -3.10775097e-02 -3.93540598e-02
 -3.74896638e-02 -2.67304797e-02 -2.30924077e-02  1.11126648e-02
 -3.35850380e-02 -1.78835895e-02 -6.91265315e-02 -6.77175224e-02
  3.57999653e-02 -1.05154574e-01 -5.18748574e-02 -1.09252725e-02
 -9.01409704e-03 -1.65137853e-02 -6.19987585e-02  2.43699318e-03
 -1.92236435e-02 -7.36851338e-03  6.61159232e-02  3.36917229e-02
  9.88228619e-02  2.04730015e-02 -1.08534083e-01  4.20217663e-02
  5.48694050e-03  3.11275255e-02 -3.33841406e-02  2.12996709e-03
  1.44462264e-03  8.58906936e-03 -7.22353682e-02 -2.96184309e-02
 -4.99791503e-02  4.88484686e-04 -9.01028607e-03 -3.98831458e-33
  3.94638628e-03 -1.69286784e-02 -1.91690754e-02  1.67857111e-02
 -1.34919994e-02 -2.17458867e-02  4.30337526e-02 -4.83038202e-02
 -1.16125913e-02  2.91074030e-02 -7.35805556e-02  3.83775868e-02
  2.97084488e-02  4.22460996e-02  3.07795946e-02 -3.48950662e-02
  8.67085829e-02  1.54234013e-02 -3.05387005e-02 -3.72185297e-02
 -7.12819323e-02 -4.69622016e-03  8.34009703e-03 -5.21374587e-03
  2.25861720e-03  1.79636087e-02 -5.84317669e-02  3.75819393e-02
  1.94774996e-02  1.02902623e-02  1.49192587e-02 -7.02411234e-02
  5.45249432e-02  2.54824888e-02 -8.19770712e-03 -5.69164902e-02
  1.37987072e-02  1.42667651e-01 -1.40598426e-02  3.72303613e-02
  1.11154079e-01 -5.01481928e-02  2.47679260e-02 -4.07387726e-02
  7.30611831e-02 -2.23126244e-02  4.43155318e-03 -5.80161028e-02
 -1.38302310e-03  5.65684400e-02 -1.46954914e-03 -4.07720879e-02
 -5.76344021e-02  1.45906974e-02 -7.48299211e-02  5.82731962e-02
  1.16930611e-01 -7.41463751e-02  7.14294910e-02 -1.75195485e-01
  3.45988646e-02 -6.86116517e-03  1.56902343e-01  6.61318824e-02
  1.11726880e-01 -3.91030014e-02  3.93832894e-03  3.00478619e-02
  4.38151583e-02  4.21336591e-02 -5.16507700e-02  7.12226704e-03
  1.91426855e-02  3.60464002e-03  4.04026210e-02 -7.43750064e-03
  4.90697473e-03 -1.01111434e-01  5.74931279e-02  1.60988737e-02
  2.27206908e-02 -7.21001707e-05  3.33487131e-02  5.08580841e-02
  1.34912897e-02  4.46064360e-02  2.25051679e-02 -2.87575740e-02
 -3.60092148e-02  7.48721659e-02 -2.88870186e-02 -2.22399086e-02
  6.24096282e-02 -1.01811796e-01 -9.33942795e-02 -5.25591624e-08
 -4.75786440e-03 -8.24467838e-03  1.45318322e-02  2.91022826e-02
  2.00644042e-02 -5.89080714e-02 -3.24340793e-03  4.31013480e-03
 -1.24221519e-02  3.30537744e-02 -9.51291397e-02  9.15824622e-02
  3.55950147e-02  2.77772397e-02 -6.07217383e-03 -8.65168422e-02
  8.60764086e-02 -5.73326126e-02  2.65214569e-03 -7.25705996e-02
  2.17314493e-02 -3.54420319e-02  2.76973546e-02 -2.90962569e-02
 -3.87130678e-02 -5.23182983e-03  5.21673858e-02  5.73965833e-02
 -1.85278989e-02 -7.26061463e-02 -1.95754152e-02  4.20004539e-02
 -4.94181877e-03 -2.24482641e-02 -9.01166201e-02  1.13677122e-02
  6.24976978e-02 -1.89883970e-02 -2.94341445e-02  3.48406807e-02
  2.02406738e-02  2.94426922e-02  1.70643609e-02  2.22318489e-02
  2.09195521e-02  2.20323075e-02  4.11661454e-02 -3.61288711e-02
  5.14746569e-02  5.61033078e-02 -2.10974794e-02 -4.54826802e-02
 -7.38363042e-02  3.66436876e-02 -1.01902597e-01 -3.31551470e-02
  1.08003737e-02  4.50205756e-03  1.57939841e-03  5.74238412e-03
  3.26691717e-02  5.42144477e-02 -4.09845263e-02 -9.79612917e-02]"
"type
        feePayer.publicKey // new auth (you can pass `null` to close it)
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + origin auth */,
      ])}`
    );
  }
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283// 1) use build-in function
{
  let txhash = await setAuthority(
    connection, // connection
    feePayer, // payer
    mintPubkey, // mint account || token account
    alice, // current authority
    AuthorityType.MintTokens, // authority type
    randomGuy.publicKey // new authority (you can pass `null` to close it)
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createSetAuthorityInstruction(
      mintPubkey, // mint acocunt || token account
      alice.publicKey, // current auth
      AuthorityType.MintTokens, // authority type
      randomGuy.publicKey // new auth (you can pass `null` to close it)
    )
  );
}
12345678910111213141516171819202122232425# Làm thế nào để uỷ quyền cho một token đại diện (delegate)Bạn có thể thiết lập một đại diện với một số lượng cho phép. Sau khi thiết lập xong, người đại diện sẽ giống như một chủ sỡ hữu khác của token account của bạn. Một token account chỉ có thể uỷ quyền cho một account tại một thời điểmTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import {
  approveChecked,
  createApproveCheckedInstruction,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const randomGuy = Keypair.generate();

  const mintPubkey = new PublicKey(
    ""8mAKLjGGmjKTnmcXeyr3pr7iX13xXVjJJiL6RujDbSPV""
  );
  const tokenAccountPubkey = new PublicKey(
    ""GMxZfDmpR1b3vdJYXHzdF5noVLQogZuUAsDHHQ3ytPfV""
  );

  // 1) use build-in function
  {
    let txhash = await approveChecked(
      connection, // connection
      feePayer, // fee payer
      mintPubkey, // mint
      tokenAccountPubkey, // token account
      randomGuy.publicKey, // delegate
      alice, // owner of token account
      1e8, // amount, if your deciamls is 8, 10^8 for 1 token
      8 // decimals
    );
    console.log(`txhash: ${txhash}`);
  }
  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
","[-3.17986049e-02  3.84751298e-02 -1.08104222e-01  1.69345047e-02
 -5.33878580e-02  2.37550717e-02  8.09860229e-02  3.12247463e-02
  6.35955483e-02  9.19030011e-02  3.37441377e-02 -9.15359557e-02
 -3.60136107e-02 -9.93944146e-03  4.15981263e-02  8.10416639e-02
 -2.61029899e-02 -5.59323691e-02 -1.20893400e-02  1.44962939e-02
  1.06997546e-02 -6.74265996e-02  2.84196101e-02  2.56811697e-02
  5.83518073e-02 -1.10675149e-01  3.48788239e-02 -2.97153443e-02
 -1.90531369e-02 -3.99067765e-03  7.81312436e-02 -5.82398940e-03
 -3.79543491e-02 -3.89200449e-02 -1.71321761e-02  9.28908437e-02
  3.21533419e-02  4.27266024e-02  4.83825766e-02 -1.01525366e-01
  4.78562294e-03  1.87350605e-02 -9.60341841e-02 -2.41782255e-02
  2.99061704e-02  1.87293533e-02  1.94878841e-03  5.13647944e-02
  2.34318543e-02  2.71616466e-02  2.44883192e-03  2.94620208e-02
 -3.14906985e-03  1.47104450e-02 -1.66767240e-02  3.40624787e-02
  4.37832214e-02  2.56853886e-02  5.92584014e-02  1.01534696e-02
 -1.68847828e-03 -2.33647320e-02 -2.13989895e-02 -1.25836162e-02
 -1.26807699e-02  1.55330831e-02 -3.14840823e-02 -2.97531504e-02
 -5.79099990e-02 -4.01510186e-02  5.87016754e-02 -2.95038950e-02
 -8.47761929e-02 -2.59652119e-02 -1.98114086e-02 -7.18214959e-02
 -4.15032879e-02  5.02954237e-03 -7.50702173e-02  3.20610926e-02
 -2.25519799e-02  6.03011623e-02  1.04043491e-01  5.12972958e-02
  3.02574541e-02  7.57025108e-02  1.61385592e-02  1.05758701e-02
 -5.51599776e-03  5.96932881e-03  3.11713433e-03  9.69572589e-02
  3.11529450e-02 -1.91804431e-02  1.28530666e-01  4.65548560e-02
  1.99833186e-03  1.55657176e-02 -2.76629534e-02  7.36867487e-02
  1.01606045e-02  2.35348213e-02 -7.72081167e-02 -8.15906283e-03
  1.06253996e-01  6.59005865e-02  3.52274254e-02 -2.71253381e-02
  3.62008847e-02  3.82562429e-02  2.42793020e-02  7.04066642e-03
 -5.66270947e-02 -1.02994340e-02 -4.43366803e-02  1.38693452e-01
 -5.81133924e-02  9.98829827e-02  5.03291711e-02  2.65639368e-02
  8.41510072e-02  1.99264493e-02 -9.18636322e-02 -3.26703116e-02
  3.39055359e-02 -3.73282619e-02  1.04572646e-01  5.84435266e-34
 -3.28914896e-02 -9.05880611e-03 -3.80540453e-02  2.69078333e-02
  4.11270931e-02  2.87082084e-02  7.16026351e-02  3.76659110e-02
 -2.67483182e-02  1.33242505e-02 -6.66480139e-03 -8.10956582e-02
 -7.71714654e-03 -6.85113966e-02 -8.57396871e-02 -3.08830533e-02
 -2.23062690e-02 -6.83283200e-03  1.07845269e-01  6.78873807e-02
  2.79910322e-02 -2.75531057e-02  2.07078140e-02  3.30378413e-02
 -2.36938819e-02  1.37849674e-02  7.26877572e-03 -6.31226450e-02
  1.37161482e-02  1.60586797e-02  4.22105566e-02  3.48874852e-02
 -4.82744118e-03  6.61019161e-02 -3.97125669e-02 -1.72740929e-02
 -1.27857961e-02  4.29093372e-03 -1.14202417e-01 -8.44265595e-02
  3.17415558e-02 -1.17311953e-02 -1.23540185e-01  2.36999597e-02
 -7.44843110e-02 -6.58184439e-02  1.77620258e-02  1.82953496e-02
  1.15113132e-01  4.05901372e-02 -8.46833214e-02 -2.52213120e-03
  3.58140569e-05 -6.75224885e-02  8.07933360e-02 -6.46814704e-02
 -4.14608121e-02 -2.01918148e-02 -4.44347560e-02 -1.15707457e-01
  1.51003781e-03 -4.62216362e-02 -3.91432047e-02  1.20592900e-02
 -3.15852165e-02 -2.14734674e-02 -1.16104789e-01 -7.64712244e-02
  1.35540711e-02 -6.73621595e-02 -4.43532206e-02 -6.94388989e-03
 -5.25953434e-02  5.74512556e-02 -4.49874140e-02  3.15413512e-02
 -1.56268645e-02  4.95087206e-02  6.27491400e-02  7.37134973e-03
  5.28638214e-02  5.04357293e-02 -6.17265515e-02  8.99877101e-02
 -1.64012890e-02  1.53487017e-02 -5.84720075e-02 -9.54397488e-03
 -6.89600501e-03 -1.71502084e-02 -1.64705720e-02 -6.57114238e-02
 -3.43823479e-03  4.88101207e-02 -6.29134476e-02 -2.74718981e-33
 -2.75970344e-02 -5.88639677e-02 -4.22695242e-02  2.00669803e-02
  1.46793798e-02  2.04398185e-02 -2.73845308e-02 -1.19910100e-02
 -7.47688627e-03 -2.88345176e-03 -3.23165730e-02  4.79970388e-02
 -2.60652248e-02  3.78166474e-02  6.35481402e-02 -1.31353606e-02
 -5.59333386e-03  3.50435972e-02 -3.99418883e-02 -1.41594633e-02
 -4.14111018e-02  1.75691228e-02  4.45705466e-02  1.62622351e-02
  1.69291273e-02  1.14971679e-02 -2.18005013e-02  6.30428344e-02
 -1.10451388e-03 -1.13210641e-02  2.30768113e-03  5.82260173e-03
 -4.93643656e-02  2.26374175e-02  1.53381824e-02 -5.02556041e-02
 -6.58252090e-03  1.18885875e-01 -3.33388746e-02  8.25554654e-02
  6.22677244e-02 -2.52834894e-02 -2.70660850e-04 -2.95922514e-02
  7.92356804e-02 -2.57145576e-02 -1.27258496e-02 -6.30853847e-02
  1.94790810e-02  1.00717157e-01 -1.18580163e-02 -4.40699048e-02
  2.51823496e-02  1.81383768e-03 -9.08192322e-02  3.12838666e-02
  1.09749235e-01 -3.37087773e-02  1.34854659e-01 -1.00795276e-01
 -1.29745444e-02 -2.82732770e-02  1.05115741e-01  1.24562763e-01
  1.66574717e-02 -5.16982563e-02 -1.52676729e-02  5.99537157e-02
  8.55493248e-02  7.62252435e-02  1.17335152e-02 -7.32104331e-02
  2.85930838e-03 -2.89705954e-02  8.95171762e-02 -1.74309649e-02
  2.42333077e-02 -1.23535112e-01  1.21877613e-02 -3.77956522e-03
  6.49566874e-02  3.23403031e-02  4.03401554e-02 -1.41491601e-02
  1.34957880e-02 -8.28154478e-03  1.51923215e-02 -3.28087211e-02
  2.35624891e-02  1.15157738e-01 -3.56111676e-02  5.42644933e-02
  1.08447969e-02 -1.23009361e-01 -7.91407675e-02 -5.26899342e-08
 -3.08666527e-02 -2.92894989e-02 -2.03684680e-02  4.93484251e-02
  4.43953611e-02 -3.05201225e-02 -5.30074835e-02 -3.34502682e-02
 -5.85521348e-02 -3.32120620e-02 -4.69599292e-02  3.38511951e-02
  4.10027467e-02 -5.12382835e-02 -7.65591580e-03 -8.31425413e-02
  4.45343144e-02 -4.10865620e-02 -3.43829915e-02 -7.34788403e-02
 -1.37070613e-02 -2.53302734e-02  1.30212801e-02 -6.95937723e-02
 -3.98256481e-02 -3.82207446e-02  5.94791919e-02  6.25715181e-02
 -3.46923294e-03  2.68985284e-03 -6.86145201e-02  8.97416398e-02
  2.38697659e-02 -5.08272834e-02 -1.64669409e-01  1.00984117e-02
  2.73752864e-02 -6.32557943e-02 -1.59455221e-02 -4.92400900e-02
  2.78990734e-02  3.06903329e-02 -3.59660685e-02 -3.01342122e-02
  3.74697091e-04 -1.66452732e-02  4.09378521e-02  2.20011007e-02
  8.37997198e-02  4.55868524e-03 -3.43601517e-02 -2.64021624e-02
 -3.85547802e-02  4.37217988e-02 -3.65271568e-02 -3.30316871e-02
  3.57170997e-04  2.91017424e-02  7.34306276e-02 -6.78546429e-02
 -4.81291348e-03 -2.08981987e-02 -2.80907433e-02 -8.45028013e-02]"
"     createApproveCheckedInstruction(
        tokenAccountPubkey, // token account
        mintPubkey, // mint
        randomGuy.publicKey, // delegate
        alice.publicKey, // owner of token account
        1e8, // amount, if your deciamls is 8, 10^8 for 1 token
        8 // decimals
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + owner */,
      ])}`
    );
  }
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576// 1) use build-in function
{
  let txhash = await approveChecked(
    connection, // connection
    feePayer, // fee payer
    mintPubkey, // mint
    tokenAccountPubkey, // token account
    randomGuy.publicKey, // delegate
    alice, // owner of token account
    1e8, // amount, if your deciamls is 8, 10^8 for 1 token
    8 // decimals
  );
}
// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createApproveCheckedInstruction(
      tokenAccountPubkey, // token account
      mintPubkey, // mint
      randomGuy.publicKey, // delegate
      alice.publicKey, // owner of token account
      1e8, // amount, if your deciamls is 8, 10^8 for 1 token
      8 // decimals
    )
  );
}
12345678910111213141516171819202122232425262728# Làm thế nào để thu hồi một token đại diệnThu hồi sẽ thiết lập biến delegate về null và số dư uỷ quyền về 0.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
} from ""@solana/web3.js"";
import { createRevokeInstruction, revoke } from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const tokenAccountPubkey = new PublicKey(
    ""DRS5CSgPQp4uvPPcUA34tckfYFNUPNBJi77fVbnSfQHr""
  );

  // 1) use build-in function
  {
    let txhash = await revoke(
      connection, // connection
      feePayer, // payer
      tokenAccountPubkey, // token account
      alice // owner of token account
    );
    console.log(`txhash: ${txhash}`);
  }

  // or

  // 2) compose by yourself
  {
    let tx = new Transaction().add(
      createRevokeInstruction(
    ","[-4.40715142e-02  2.18207818e-02 -8.74712616e-02  3.96546498e-02
 -8.21680948e-02 -3.06496453e-02  1.20326973e-01  5.80255054e-02
  6.55269846e-02  1.08731657e-01  1.90391392e-02 -1.35406360e-01
 -3.60950492e-02  2.34923866e-02  1.90325938e-02  2.56498139e-02
  1.02162687e-03 -7.14739710e-02 -4.58549000e-02 -2.33302899e-02
  4.76884060e-02 -8.00319985e-02  7.74486065e-02 -1.59907283e-03
  6.25331700e-02 -1.05759911e-01 -2.11818935e-03 -4.54064682e-02
 -3.29604819e-02 -2.83422899e-02  8.70501921e-02  1.21928761e-02
 -4.60780039e-02 -4.73944545e-02  1.65184438e-02  5.04284613e-02
 -4.69134981e-03 -3.39596644e-02  9.16736051e-02 -8.56301561e-02
 -1.16602462e-02  5.27747981e-02 -9.11209881e-02 -2.38571092e-02
  9.17997770e-03 -4.52189753e-03 -4.73412611e-02  7.91092962e-02
  2.80806124e-02  5.27725257e-02  4.70436141e-02  5.71445078e-02
 -1.45775406e-02 -3.51521038e-02  2.40901448e-02  3.18568125e-02
  1.99350100e-02  1.00558605e-02  2.89450493e-02  2.16336381e-02
  2.41208752e-03  6.68786047e-03 -3.70273702e-02 -4.23277356e-02
  1.23508945e-02  2.45363340e-02 -4.68237847e-02 -2.68393680e-02
 -1.99243892e-02  1.74507778e-02  6.48343340e-02 -1.41122593e-02
 -1.35646518e-02 -9.85284522e-03 -5.92189506e-02 -4.16358300e-02
 -8.59060604e-03  3.58253904e-02 -5.69537990e-02  1.03035755e-03
 -4.75056730e-02  2.76154280e-02  7.41664916e-02  1.96477845e-02
  6.43313900e-02  5.41020967e-02  8.20448622e-03 -1.20300082e-02
  4.13827561e-02 -9.79001913e-03  1.95205957e-03  7.44034573e-02
 -1.58028572e-03  2.79421709e-03  9.41905305e-02  3.89279574e-02
 -5.93474275e-03  4.87705953e-02 -7.15490282e-02  9.07355025e-02
  1.67298857e-02 -4.12802100e-02 -6.18655570e-02 -6.50154194e-03
  8.83096755e-02  7.53106410e-03  8.54238644e-02 -2.45705917e-02
 -9.71163972e-04  1.14769666e-02  1.24385860e-02  3.52373347e-02
  1.80164818e-02  5.78517914e-02 -2.27605980e-02  7.26579726e-02
  1.46865044e-02  5.60238622e-02  2.72881575e-02  4.25268337e-02
  8.98894072e-02  9.52284411e-03 -6.16495684e-02 -4.18553576e-02
 -2.45642178e-02 -5.01562245e-02  1.08463131e-01  1.61732043e-33
 -1.79057103e-02 -4.26467322e-02 -1.43108694e-02 -1.55319683e-02
  2.15676073e-02  1.76819582e-02  2.33256631e-02  6.22112416e-02
 -7.28544518e-02  1.30855953e-02  1.69469640e-02 -8.45510960e-02
 -4.65928949e-02 -3.87528352e-02 -2.86312941e-02 -1.06757566e-01
 -2.61007231e-02  4.94694524e-02  1.21567458e-01 -5.21012628e-03
  6.38607563e-03 -7.46448338e-02 -6.80706510e-03 -1.42507860e-02
 -1.26350438e-02 -1.16143320e-02 -2.25146096e-02 -3.85416625e-03
  9.74491239e-03  1.78278796e-02  3.02220620e-02  4.72645648e-02
 -4.18885760e-02  1.49469702e-02  1.29609117e-02 -2.95786373e-03
  4.70400671e-04  7.32615683e-03 -8.82298648e-02 -1.41370436e-02
  2.46742740e-02  1.60532980e-03 -6.07404485e-02 -1.75349209e-02
 -1.23828284e-01 -4.49539116e-03  3.48211192e-02 -3.00412420e-02
  9.05365422e-02 -1.05528794e-02 -3.75165381e-02  3.12628262e-02
 -4.76897843e-02 -6.15402386e-02  5.26694134e-02 -1.00714520e-01
  2.17507780e-02  2.18881434e-03  6.67672558e-03 -2.32426133e-02
 -2.02112868e-02 -2.44043078e-02 -8.69842917e-02 -1.81856025e-02
 -8.13078806e-02  8.99262205e-02 -1.02129653e-01 -4.74593490e-02
  3.27682681e-02 -4.27463278e-02 -5.49191795e-02 -3.45916636e-02
  5.83229624e-02  3.31843570e-02 -2.19402413e-04 -1.52556470e-03
  9.49514005e-03 -3.24650289e-04 -1.45902866e-02 -2.39813104e-02
  4.74266745e-02 -3.52875981e-03 -1.27122864e-01  7.06780553e-02
  4.16225903e-02  1.08303046e-02 -3.89072858e-02 -4.07587029e-02
 -1.93954706e-02 -3.92196961e-02 -2.46033296e-02 -5.25250174e-02
  4.68145572e-02 -7.48036727e-02 -4.58280407e-02 -3.24301406e-33
 -4.67408001e-02 -5.05645107e-03 -3.60331051e-02  3.98300402e-02
 -2.21427009e-02  7.64233666e-03 -3.73100676e-02 -6.55494677e-03
  3.99785712e-02  4.90536506e-04 -6.40999451e-02  1.93945579e-02
 -1.58101823e-02  2.17553433e-02  2.78685596e-02 -2.94834021e-02
 -6.32180274e-02 -2.60961168e-02  2.02739984e-02 -2.24871356e-02
  3.32832932e-02  1.08311221e-01  7.25159142e-03  5.20329215e-02
 -3.21459062e-02  3.01714465e-02 -1.99976023e-02  7.93163106e-02
  6.13806881e-02 -2.96555068e-02 -1.96755379e-02 -3.50018591e-02
 -2.97790132e-02  3.52029093e-02  2.75918981e-03 -1.55450866e-01
  7.08905980e-02  1.30429953e-01 -1.59971099e-02  5.51887304e-02
  3.88920084e-02 -7.68087953e-02  9.18711815e-03  3.28297988e-02
  3.69678661e-02 -5.40405065e-02  2.92951893e-02 -1.01666292e-02
  4.79613319e-02  6.32460192e-02  2.98176743e-02 -3.28564979e-02
 -7.70335272e-02  7.77045637e-02 -7.79694840e-02  5.42034693e-02
  1.10743418e-01 -8.24993700e-02  1.55210987e-01 -2.79593579e-02
 -5.83565980e-02 -2.30218023e-02  1.43412456e-01  5.35828099e-02
  1.12542607e-01 -4.35800180e-02 -4.88922521e-02  4.05511074e-02
  1.29812241e-01  9.51013416e-02  6.53890101e-03 -2.89997384e-02
  2.01020483e-02 -5.04051559e-02  8.94923806e-02 -4.18312429e-03
  6.65703043e-03 -6.88527152e-02  5.14577925e-02  7.77097121e-02
 -2.10324842e-02  3.51256058e-02  6.52068034e-02 -5.78696355e-02
  1.68953240e-02 -4.59479354e-02  6.73606107e-03  2.17559543e-02
 -2.72699408e-02  6.39298558e-02 -3.46651264e-02 -1.23581002e-02
  6.24004118e-02 -9.14249048e-02 -8.83439556e-02 -5.87081139e-08
 -6.20719306e-02 -4.45190594e-02 -5.67043386e-02  3.66276503e-02
  6.84770495e-02 -5.48750535e-02 -4.01904993e-02 -3.26751173e-02
 -3.14550549e-02 -7.34746307e-02 -1.80109423e-02  4.80095856e-02
 -5.44100776e-02 -2.80391425e-02  2.42394600e-02 -9.03988257e-02
  1.22824125e-02  4.79354151e-02 -6.71441406e-02  7.23637873e-03
 -1.62303541e-02  2.68068463e-02 -1.78219005e-02 -1.56556871e-02
 -1.40767666e-02 -7.75526464e-03  2.28712540e-02  1.13517150e-01
 -1.52343735e-02  6.81530684e-02 -3.39950323e-02  6.02736212e-02
  6.32307753e-02 -2.90794466e-02 -9.04070362e-02 -1.80181134e-02
  2.75369473e-02 -1.55268507e-02  2.98882462e-02  1.49449762e-02
  2.04834547e-02  6.62447838e-03 -3.40914093e-02  2.24942006e-02
  3.06237256e-03 -3.41774747e-02 -1.32771302e-02  2.32535438e-03
  6.33418262e-02 -2.50794590e-02 -2.58002244e-02  7.02536711e-03
 -2.80219130e-02  4.16792044e-03 -5.12071773e-02 -2.66621802e-02
 -5.40848896e-02 -3.64194661e-02 -2.72663776e-02  4.11029719e-02
  1.19065128e-01 -3.40352729e-02 -2.14247522e-03 -8.88320655e-02]"
"   tokenAccountPubkey, // token account
        alice.publicKey // owner of token account
      )
    );
    console.log(
      `txhash: ${await connection.sendTransaction(tx, [
        feePayer,
        alice /* fee payer + origin auth */,
      ])}`
    );
  }
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// 1) use build-in function
{
  let txhash = await revoke(
    connection, // connection
    feePayer, // payer
    tokenAccountPubkey, // token account
    alice // owner of token account
  );
}

// or

// 2) compose by yourself
{
  let tx = new Transaction().add(
    createRevokeInstruction(
      tokenAccountPubkey, // token account
      alice.publicKey // owner of token account
    )
  );
}
123456789101112131415161718192021# Làm thế nào để quản lý wrapped SOLWrapped SOL cũng chỉ giống như các lại token mint khác. Điểm khác là bạn có thể sử dụng syncNative và tạo token account dựa trên địa chỉ NATIVE_MINT.# Tạo token accountTương tự Làm thế nào để tạo một token account nhưng thay địa chỉ mint với NATIVE_MINTimport { NATIVE_MINT } from ""@solana/spl-token"";
1# Thêm số dưCó hai cách để thêm số dư cho Wrapped SOL# 1. Bằng cách chuyển SOLTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
} from ""@solana/web3.js"";
import {
  NATIVE_MINT,
  getAssociatedTokenAddress,
  createSyncNativeInstruction,
  createAccount,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  // remember to create ATA first
  let ata = await getAssociatedTokenAddress(
    NATIVE_MINT, // mint
    alice.publicKey // owner
  );

  let amount = 1 * 1e9; /* Wrapped SOL's decimals is 9 */

  let tx = new Transaction().add(
    // trasnfer SOL
    SystemProgram.transfer({
      fromPubkey: alice.publicKey,
      toPubkey: ata,
      lamports: amount,
    }),
    // sync wrapped SOL balance
    createSyncNativeInstruction(ata)
  );
  console.log(
    `txhash: ${await connection.sendTransaction(tx, [feePayer, alice])}`
  );
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455let tx = new Transaction().add(
  // trasnfer SOL
  SystemProgram.transfer({
    fromPubkey: alice.publicKey,
    toPubkey: ata,
    lamports: amount,
  }),
  // sync wrapped SOL balance
  createSyncNativeInstruction(ata)
);
12345678910# 2. Bằng cách chuyển TokenTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
} from ""@solana/web3.js"";
import {
  TOKEN_PROGRAM_ID,
  NATIVE_MINT,
  getMinimumBalanceForRentExemptAccount,
  getAssociatedTokenAddress,
  ACCOUNT_SIZE,
  createInitializeAccountInstruction,
","[-6.43759519e-02  5.17209731e-02 -3.44275497e-02 -2.70700338e-03
 -1.28064334e-01  2.90392861e-02  1.06405780e-01  3.56482416e-02
  1.18014611e-01  7.37900063e-02  8.42733085e-02 -1.27031356e-01
 -6.64664898e-03 -3.93638536e-02  2.09084842e-02  2.66820174e-02
 -6.16851039e-02  1.08370546e-03 -3.59947719e-02 -4.81585301e-02
  1.09489318e-02 -2.54889578e-02 -1.09520387e-02  2.76957862e-02
  8.34015459e-02 -8.55339542e-02  2.29239669e-02  1.27330178e-03
  1.10090422e-02 -1.90571062e-02  7.72558674e-02  3.36405705e-03
 -8.21457431e-02 -2.13466603e-02  2.55504809e-02  6.18570112e-02
  8.68238881e-03 -5.02826646e-02  7.16525093e-02 -6.17798679e-02
  4.34237905e-03  1.46974446e-02 -8.42265636e-02 -7.96066150e-02
  6.73585534e-02  8.33001286e-02 -1.29316933e-02  4.60749529e-02
 -8.72071553e-03  1.40797365e-02  1.29441842e-02  3.34789380e-02
 -7.10717142e-02  1.60102881e-02 -2.05443185e-02  3.15745175e-02
  2.85378750e-03  6.23735413e-02  7.21439198e-02 -4.00072038e-02
 -1.41648669e-02  2.82216677e-03  3.08047701e-02 -3.43501419e-02
 -1.36756953e-02 -1.56486090e-02 -6.96690530e-02 -2.19014101e-02
 -2.17304341e-02  3.23644131e-02  4.05980088e-02 -1.14164557e-02
 -5.18711060e-02 -3.57222147e-02 -6.16312698e-02 -1.01767026e-03
 -1.12696923e-02  3.45028602e-02 -7.76208714e-02  1.65464841e-02
  4.19072695e-02  3.74920331e-02  1.01440370e-01  9.43880714e-03
 -1.42656639e-02  6.64213076e-02 -1.96228996e-02 -4.29572724e-02
  3.51971723e-02 -1.99050251e-02  3.44707705e-02  3.93870100e-02
  2.20264532e-02 -2.22736839e-02  5.53965420e-02 -8.14391766e-03
 -2.51216460e-02  7.96843618e-02 -3.02228406e-02  6.55843318e-02
  4.90757823e-02  3.01540177e-02 -6.54274300e-02 -4.45228361e-04
  7.72421286e-02  7.05535635e-02  9.46335346e-02 -3.67428884e-02
 -9.57532506e-03  3.33194174e-02 -1.41782695e-02  6.59177899e-02
 -5.93545511e-02 -2.56513376e-02  4.28525358e-03  1.22422151e-01
 -9.71833616e-03  7.35222772e-02  4.01867889e-02  4.52620499e-02
  4.90199067e-02 -2.12906934e-02 -1.01719998e-01 -2.08367389e-02
 -3.89080606e-02 -6.82967082e-02  1.26381025e-01  9.42290745e-33
 -4.45541851e-02  3.98964211e-02 -2.81909518e-02 -3.72726023e-02
  5.86780757e-02 -3.92533876e-02  2.07248740e-02  3.06813903e-02
 -9.64576527e-02 -8.01271666e-03 -1.61850434e-02 -8.75209123e-02
 -5.31213954e-02 -7.95141235e-02 -6.31873831e-02 -5.15434407e-02
 -3.38905193e-02 -1.83857474e-02  8.02023038e-02  1.74116530e-02
  3.31734456e-02 -4.71591800e-02  4.86807562e-02 -3.01406882e-03
 -4.29087728e-02 -5.24762180e-03 -2.20962167e-02 -9.21609998e-02
 -1.09621584e-02  1.29651586e-02  6.90168440e-02  3.92804407e-02
 -4.93712127e-02  6.07938208e-02 -3.67253572e-02 -4.22912762e-02
  1.49422856e-02  1.96768604e-02 -9.66702923e-02 -1.22556696e-02
  6.62802383e-02  5.00345184e-03 -8.62525627e-02  2.38746610e-02
 -1.10860385e-01 -1.27507308e-02  6.16392829e-02 -7.52077438e-04
  1.59296453e-01  2.35260045e-03 -2.84555592e-02 -2.72017121e-02
 -3.71134058e-02 -6.52328432e-02  1.07187562e-01 -9.62749869e-02
 -2.89488733e-02 -4.23682854e-02 -3.24154086e-02 -4.92304899e-02
 -1.24331852e-02 -4.81868908e-02 -2.31455043e-02  4.26172763e-02
  1.24001643e-02 -3.86608243e-02 -3.24514881e-02 -4.04887348e-02
 -6.33441331e-03 -9.36708823e-02 -4.07456122e-02 -2.06021257e-02
  9.76661593e-03  3.12196705e-02 -1.02255858e-01 -3.26855630e-02
  3.52479294e-02  4.05963790e-03  9.49308742e-03  3.17295827e-02
  2.52474528e-02 -2.18578521e-02 -1.24840103e-01  5.42433523e-02
 -7.13023311e-03  3.61312814e-02 -1.69365034e-02 -5.01329117e-02
  2.96890289e-02 -2.39128973e-02  2.15077394e-04 -3.97368111e-02
  1.34219155e-02 -1.55473612e-02 -4.02005501e-02 -9.04552013e-33
  2.23846752e-02  8.65456183e-03 -7.51379207e-02  2.11788551e-03
 -1.17519125e-02 -2.51914151e-02  2.05551293e-02  1.05982032e-02
 -6.52136840e-03  1.43528115e-02 -7.47206584e-02 -2.84273294e-03
  2.54607736e-03  8.24309513e-02  1.95010789e-02 -4.94944714e-02
  1.09976195e-02  5.72709925e-03 -3.53509188e-02 -2.38660257e-02
 -2.99405251e-02  7.12728426e-02 -1.10420678e-03  3.90779562e-02
 -1.15784155e-02  5.57125881e-02 -2.54448876e-03  9.57897529e-02
  2.79921405e-02 -9.82440449e-03 -5.83044998e-03 -2.43754182e-02
 -5.91330882e-03  6.44395724e-02 -2.37263329e-02 -1.05693780e-01
  2.74047907e-02  1.60828352e-01 -2.92053986e-02  1.51667679e-02
  1.00431398e-01 -3.64088424e-04 -1.32691097e-02 -1.56682823e-02
  4.79350872e-02 -8.70925747e-03  5.40773794e-02 -7.94073343e-02
  3.71505916e-02  6.49430528e-02  5.23790866e-02 -3.65838110e-02
 -1.17314355e-02  4.72480953e-02 -9.02466923e-02  6.95248544e-02
  1.28386676e-01 -1.08566828e-01  6.61928281e-02 -1.17139705e-01
  1.39561528e-02 -3.90816815e-02  1.31209627e-01  4.97196205e-02
  1.11089200e-01 -3.28844860e-02 -1.37021765e-02  3.56103964e-02
  8.29382837e-02 -2.85581267e-03 -2.75719957e-03 -2.52913274e-02
 -5.86805679e-03 -3.11305802e-02  6.10827133e-02  5.67442924e-03
 -3.47281136e-02 -7.91925713e-02  2.20388491e-02  2.91120820e-02
 -2.37625884e-03 -2.31368560e-02  1.99319664e-02  2.59549264e-02
  3.91097885e-04  1.40188308e-02 -4.18309169e-03  3.35608311e-02
  1.27536990e-02  4.48467731e-02 -1.01767741e-02 -5.37102595e-02
  1.74471512e-02 -1.97672062e-02 -9.12625417e-02 -6.49984884e-08
 -3.90284248e-02 -6.20614477e-02 -1.25455884e-02  2.67222207e-02
  3.08074150e-02 -2.11672932e-02  1.24969753e-02 -5.43886535e-02
 -7.69310668e-02 -4.52593900e-02 -1.16291888e-01  5.45610785e-02
 -1.31028444e-02 -1.42965345e-02  1.59083307e-02 -3.89835760e-02
  4.10327539e-02 -9.49388370e-03 -4.46305983e-02 -8.52734596e-02
 -3.16056758e-02  6.11484656e-03  7.95396604e-03 -6.55968785e-02
 -4.78503741e-02  2.54371911e-02  4.00191396e-02  9.44517180e-02
 -1.41180828e-02 -2.72432137e-02 -2.55534127e-02  5.42280748e-02
  2.99015231e-02 -4.31585535e-02 -1.13356270e-01 -2.23803297e-02
  6.00026809e-02 -3.58500332e-02 -3.26581895e-02  2.54745483e-02
  2.11953605e-03  8.10456127e-02 -1.61244953e-03  1.25042349e-02
 -1.63732376e-02 -7.27883680e-03  3.36306803e-02 -1.86072607e-02
  8.86467099e-02  2.36175377e-02 -2.42622923e-02 -9.80639085e-03
 -5.43911867e-02  6.19313121e-02 -7.87621140e-02 -5.70931844e-03
 -7.05819018e-03  3.98929790e-02 -1.86984427e-02  1.46307303e-02
  8.00362602e-02  3.35872136e-02  2.96195839e-02 -9.15500224e-02]"
" createTransferInstruction,
  closeAccountInstructionData,
  createCloseAccountInstruction,
} from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // 5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8
  const feePayer = Keypair.fromSecretKey(
    bs58.decode(
      ""588FU4PktJWfGfxtzpAAXywSNt74AvtroVzGfKkVN1LwRuvHwKGr851uH8czM5qm4iqLbs1kKoMKtMJG4ATR7Ld2""
    )
  );

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const alice = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  // remember to create ATA first
  let ata = await getAssociatedTokenAddress(
    NATIVE_MINT, // mint
    alice.publicKey // owner
  );

  let auxAccount = Keypair.generate();
  let amount = 1 * 1e9; /* Wrapped SOL's decimals is 9 */

  let tx = new Transaction().add(
    // create token account
    SystemProgram.createAccount({
      fromPubkey: alice.publicKey,
      newAccountPubkey: auxAccount.publicKey,
      space: ACCOUNT_SIZE,
      lamports:
        (await getMinimumBalanceForRentExemptAccount(connection)) + amount, // rent + amount
      programId: TOKEN_PROGRAM_ID,
    }),
    // init token account
    createInitializeAccountInstruction(
      auxAccount.publicKey,
      NATIVE_MINT,
      alice.publicKey
    ),
    // transfer WSOL
    createTransferInstruction(
      auxAccount.publicKey,
      ata,
      alice.publicKey,
      amount
    ),
    // close aux account
    createCloseAccountInstruction(
      auxAccount.publicKey,
      alice.publicKey,
      alice.publicKey
    )
  );

  console.log(
    `txhash: ${await connection.sendTransaction(tx, [
      feePayer,
      auxAccount,
      alice,
    ])}`
  );
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586let tx = new Transaction().add(
  // create token account
  SystemProgram.createAccount({
    fromPubkey: alice.publicKey,
    newAccountPubkey: auxAccount.publicKey,
    space: ACCOUNT_SIZE,
    lamports:
      (await getMinimumBalanceForRentExemptAccount(connection)) + amount, // rent + amount
    programId: TOKEN_PROGRAM_ID,
  }),
  // init token account
  createInitializeAccountInstruction(
    auxAccount.publicKey,
    NATIVE_MINT,
    alice.publicKey
  ),
  // transfer WSOL
  createTransferInstruction(auxAccount.publicKey, ata, alice.publicKey, amount),
  // close aux account
  createCloseAccountInstruction(
    auxAccount.publicKey,
    alice.publicKey,
    alice.publicKey
  )
);
12345678910111213141516171819202122232425# Làm thế nào để truy vấn tất cả token account của một ChủBạn có thể truy vấn tất cả token account của cùng một chủ. Có 2 cách để thực hiện.Lấy tất cả token accountTSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";
import { TOKEN_PROGRAM_ID } from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const owner = new PublicKey(""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY"");
  let response = await","[-4.77580130e-02 -1.00652859e-01 -1.14454605e-01  3.14750262e-02
 -5.19043803e-02 -1.71831623e-02  2.11961288e-02  2.39674188e-02
 -2.83987187e-02  8.20141844e-03  4.07256670e-02 -2.83411182e-02
  2.00092862e-03 -1.06295735e-01  2.59247553e-02  3.58217172e-02
 -9.98999923e-02 -3.82825062e-02  3.98037536e-03  2.37272121e-02
  2.28114519e-02 -7.48576745e-02  1.26074506e-02 -4.05472368e-02
  5.51817417e-02  5.82839642e-03  3.60536948e-02  1.18579818e-02
 -1.92506779e-02  1.44789892e-03  5.95798567e-02  5.13789989e-02
 -2.95416964e-03 -3.42084747e-03  7.27411807e-02  1.30197495e-01
  3.53323109e-02 -8.33312143e-03 -3.55524011e-02 -9.19420049e-02
  2.35992484e-02  4.79528643e-02 -1.09801099e-01  5.46639301e-02
  6.15183525e-02 -8.67875572e-03 -9.92541015e-02  6.20660745e-02
  2.38061454e-02 -7.40229934e-02 -5.73115014e-02  8.45015571e-02
 -8.07882622e-02  1.76519062e-02 -6.99669197e-02  3.74819376e-02
 -2.45021712e-02  5.02205603e-02  1.34373590e-01  6.63318578e-03
  4.21870276e-02 -2.28303857e-02  4.44466434e-02 -3.25541943e-02
 -2.92476267e-02  2.26516854e-02 -2.47300323e-02 -3.81676704e-02
  3.51678953e-02 -4.68057059e-02 -4.71332595e-02  9.47344769e-03
 -2.94240601e-02  1.55921252e-02 -2.17201021e-02  2.65023708e-02
 -3.24405469e-02  4.11608396e-03 -2.83527542e-02  8.78652092e-03
 -2.05565151e-02 -5.26625663e-02  8.13034829e-03  1.00254953e-01
  3.59366951e-03  9.99646336e-02 -2.71325465e-02 -2.83085965e-02
 -1.08558498e-03  7.23612588e-03 -8.77156183e-02 -1.31559456e-02
 -5.60389422e-02 -3.04223802e-02  7.89437629e-03  3.31349522e-02
 -2.09274832e-02  3.06827016e-02 -2.47847009e-02  6.09819442e-02
 -6.74775103e-03 -6.75984398e-02 -6.01662844e-02 -6.74467236e-02
 -1.06275585e-02 -5.77436714e-03  6.13112561e-02 -3.00060734e-02
  4.21591625e-02  4.60151173e-02  1.74583620e-04  6.93900213e-02
  1.27086025e-02 -1.93428304e-02 -3.85680608e-02  1.10001586e-01
  5.02401823e-03  3.89584973e-02  7.47511834e-02  5.25443777e-02
  4.53889556e-02 -3.09827011e-02 -4.58828248e-02 -2.99752615e-02
 -9.59368646e-02 -4.97128405e-02 -8.27910285e-03  1.74363075e-32
 -3.69331352e-02 -5.79213947e-02  4.59389649e-02  6.25761272e-03
  2.19681840e-02 -3.36269997e-02  3.55383530e-02  3.09750680e-02
 -1.19023249e-01 -1.18329218e-02 -1.09903492e-01 -8.12033564e-02
  5.46856178e-03 -8.85072351e-02 -3.16424593e-02 -8.08122754e-02
 -1.56985968e-02  6.55452907e-02  1.47056871e-03 -7.38244131e-03
  3.18182781e-02 -3.24794115e-03  1.63372140e-02 -3.47486488e-03
  2.44270973e-02  2.49317475e-02  1.23248855e-02 -2.74357367e-02
  9.09802690e-02 -8.96318961e-05  2.53535975e-02  3.36978137e-02
 -9.88689139e-02  3.12509723e-02  1.73648335e-02 -1.28574446e-02
  7.73528218e-03 -2.52396278e-02 -1.26952320e-01 -6.46475330e-02
  2.75738165e-02 -2.67929807e-02 -3.17150280e-02 -4.44546388e-03
 -3.68724600e-03 -4.60330322e-02  6.88656569e-02 -2.14799214e-03
  9.84919816e-02  4.52287681e-02 -5.61605655e-02 -3.85567150e-03
 -1.04848305e-02 -1.37650166e-02  2.78318096e-02 -4.99638431e-02
  2.86303386e-02  3.31055336e-02  3.56486402e-02  4.74009402e-02
 -2.15965435e-02  3.70546430e-02  1.46264890e-02 -5.40657938e-02
  6.51220456e-02 -1.14228996e-03 -9.00166109e-03  4.86890003e-02
 -3.18611115e-02 -3.46106105e-02 -8.36477242e-03  1.95035115e-02
  1.67922620e-02  3.75510380e-02 -8.37102383e-02 -4.87930083e-05
 -1.22488076e-02  2.35584825e-02 -6.53108656e-02 -6.48513362e-02
  3.68697271e-02 -4.39555012e-02 -8.09946805e-02  6.16956912e-02
 -1.75786596e-02  5.59050478e-02 -8.47080722e-04 -8.51674005e-02
  1.16198203e-02 -2.77128862e-03 -3.25819501e-03 -3.39142717e-02
 -6.90376237e-02 -8.91065001e-02 -1.18011288e-01 -1.66641444e-32
 -2.61744838e-02 -2.72049382e-02 -3.71766686e-02 -1.72614790e-02
 -3.34022343e-02 -6.75402302e-03 -2.23586541e-02 -3.32627408e-02
  6.53307699e-03  8.63450021e-02  4.67465073e-02 -7.22695142e-03
  5.96076734e-02 -4.90655042e-02  4.16610651e-02 -2.49133054e-02
  7.07471073e-02  2.03634538e-02  6.85341954e-02 -4.02410841e-03
 -6.88584447e-02  1.10792845e-01 -3.81384306e-02  5.05039915e-02
 -1.81489158e-02  4.86391671e-02 -1.71455946e-02  1.53743342e-01
  5.42112766e-03  1.36119714e-02  3.79605405e-02  5.44770360e-02
 -1.22823976e-01  4.85307388e-02 -9.10487305e-03 -7.67087936e-02
  8.45418498e-03  3.91016677e-02  1.28064873e-02 -4.30961810e-02
  4.06250209e-02 -2.20214445e-02 -6.73268363e-02  2.62357760e-03
  9.87306461e-02 -3.66622955e-02  6.00785092e-02  1.40970852e-02
 -7.33629763e-02  3.25815119e-02  8.21669772e-02 -5.64327426e-02
 -1.99861769e-02 -8.78945366e-03 -1.63806695e-02  6.62169829e-02
  7.64076784e-02  1.54024484e-02  5.23335263e-02 -6.31697178e-02
  1.01613313e-01 -1.15192741e-01  7.49954581e-02  4.83742915e-02
  9.09503177e-02 -4.58563007e-02 -1.88618731e-02  6.11345097e-02
 -5.78979030e-02 -2.15993766e-02 -1.17943794e-01  6.94585964e-02
 -8.27556383e-03  5.11740521e-02  7.68431723e-02  3.08898520e-02
 -6.02276661e-02 -2.27186382e-02 -2.09991932e-02  4.43381965e-02
 -4.18064073e-02  1.98421720e-02  9.40130558e-03  8.34754258e-02
  7.21689910e-02 -1.94853228e-02  3.10808122e-02  7.17331544e-02
 -3.00418604e-02  2.36738771e-02 -1.03983685e-01  2.06057895e-02
 -9.65905190e-03  4.66589024e-03 -1.15682669e-02 -6.23583887e-08
 -3.13322246e-02  4.34517972e-02 -6.72272742e-02  2.34503578e-02
  3.80787328e-02  2.85331141e-02 -6.34531826e-02 -6.04943819e-02
 -3.24839801e-02 -7.58055151e-02 -7.66314939e-02 -2.12114882e-02
 -3.25964689e-02  1.97051615e-02 -2.19143201e-02 -2.64159571e-02
 -3.40690762e-02 -2.88350713e-02  9.97220632e-03 -4.40184101e-02
  6.25446662e-02 -6.64996132e-02  2.99482401e-02  4.09648828e-02
  3.32303382e-02 -8.07656255e-03  1.04963690e-01  1.19794443e-01
  1.38197923e-02 -8.67066011e-02 -6.27559721e-02 -2.75399033e-02
  2.43678745e-02 -3.37572061e-02 -9.36435387e-02  2.33248658e-02
 -2.02652495e-02  5.62257767e-02  3.50773297e-02  5.36126941e-02
 -3.67040820e-02  3.54365967e-02 -4.28812988e-02  3.26944627e-02
 -6.95445985e-02  3.51456515e-02  9.93177667e-03  9.66712236e-02
  8.34746957e-02 -1.64241309e-03 -1.63405649e-02 -4.12933007e-02
 -6.85027167e-02  7.76204234e-03 -1.45551404e-02 -2.68853344e-02
 -7.93392584e-02  1.33547336e-02  2.79016066e-02  6.15017973e-02
  1.76992078e-04  3.52655649e-02 -8.27142131e-03 -5.03103584e-02]"
"connection.getParsedTokenAccountsByOwner(owner, {
    programId: TOKEN_PROGRAM_ID,
  });

  response.value.forEach((accountInfo) => {
    console.log(`pubkey: ${accountInfo.pubkey.toBase58()}`);
    console.log(`mint: ${accountInfo.account.data[""parsed""][""info""][""mint""]}`);
    console.log(
      `owner: ${accountInfo.account.data[""parsed""][""info""][""owner""]}`
    );
    console.log(
      `decimals: ${accountInfo.account.data[""parsed""][""info""][""tokenAmount""][""decimals""]}`
    );
    console.log(
      `amount: ${accountInfo.account.data[""parsed""][""info""][""tokenAmount""][""amount""]}`
    );
    console.log(""===================="");
  });
})();
12345678910111213141516171819202122232425262728let response = await connection.getParsedTokenAccountsByOwner(owner, {
  programId: TOKEN_PROGRAM_ID,
});
123Lọc bằng mintTSPress </> button to view full sourceimport { clusterApiUrl, Connection, PublicKey } from ""@solana/web3.js"";
import { TOKEN_PROGRAM_ID } from ""@solana/spl-token"";
import * as bs58 from ""bs58"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const owner = new PublicKey(""G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY"");
  const mint = new PublicKey(""54dQ8cfHsW1YfKYpmdVZhWpb9iSi6Pac82Nf7sg3bVb"");

  let response = await connection.getParsedTokenAccountsByOwner(owner, {
    mint: mint,
  });

  response.value.forEach((accountInfo) => {
    console.log(`pubkey: ${accountInfo.pubkey.toBase58()}`);
    console.log(`mint: ${accountInfo.account.data[""parsed""][""info""][""mint""]}`);
    console.log(
      `owner: ${accountInfo.account.data[""parsed""][""info""][""owner""]}`
    );
    console.log(
      `decimals: ${accountInfo.account.data[""parsed""][""info""][""tokenAmount""][""decimals""]}`
    );
    console.log(
      `amount: ${accountInfo.account.data[""parsed""][""info""][""tokenAmount""][""amount""]}`
    );
    console.log(""===================="");
  });
})();
123456789101112131415161718192021222324252627282930let response = await connection.getParsedTokenAccountsByOwner(owner, {
  mint: mint,
});
123 # Xây dựng Program# Làm thế nào để chuyển SOL trong một programProgram trên Solana có thể chuyển lamports ừ một account đến một account khác mà không cần đến 'truy vấn thuần' System program. Một luật cơ bản đó là program của bạn có thể chuyển lamports từ bất kỳ account nào mà nó sở hữu đến gần như hầu hết các account khác.Tuy nhiên, account nhận không được là account sở hữu bởi chương chình đó.Program/// Transfers lamports from one account (must be program owned)
/// to another account. The recipient can by any account
fn transfer_service_fee_lamports(
    from_account: &AccountInfo,
    to_account: &AccountInfo,
    amount_of_lamports: u64,
) -> ProgramResult {
    // Does the from account have enough lamports to transfer?
    if **from_account.try_borrow_lamports()? < amount_of_lamports {
        return Err(CustomError::InsufficientFundsForTransaction.into());
    }
    // Debit from_account and credit to_account
    **from_account.try_borrow_mut_lamports()? -= amount_of_lamports;
    **to_account.try_borrow_mut_lamports()? += amount_of_lamports;
    Ok(())
}

/// Primary function handler associated with instruction sent
/// to your program
fn instruction_handler(accounts: &[AccountInfo]) -> ProgramResult {
    // Get the 'from' and 'to' accounts
    let account_info_iter = &mut accounts.iter();
    let from_account = next_account_info(account_info_iter)?;
    let to_service_account = next_account_info(account_info_iter)?;

    // Extract a service 'fee' of 5 lamports for performing this instruction
    transfer_service_fee_lamports(from_account, to_service_account, 5u64)?;

    // Perform the primary instruction
    // ... etc.

    Ok(())
}
123456789101112131415161718192021222324252627282930313233# Làm thế nào để lấy thời gian trong một programĐọc thời gian có thể được hoàn thành bằng 2 cách:Truyền SYSVAR_CLOCK_PUBKEY và trong chỉ thị.Truy cập trực thiếp vào Clock bên trong chi","[ 3.75011042e-02  6.06988706e-02 -5.52629307e-02  2.45340858e-02
 -6.42249361e-02  9.06275399e-03  4.49209101e-02  5.87673560e-02
  1.17788702e-01 -4.80767852e-03 -5.74787483e-02 -7.00358525e-02
 -3.78148891e-02  2.91623035e-03  2.99575552e-02  2.19343342e-02
 -9.44572464e-02 -3.65721360e-02 -4.82405163e-02 -1.79719385e-02
  5.24946153e-02 -6.08729497e-02 -7.78672621e-02 -2.47163093e-03
  5.75926229e-02  5.19993491e-02 -8.64853058e-03 -3.26435342e-02
 -2.72947624e-02  6.46138638e-02  2.48442404e-02 -6.40751496e-02
  9.97533742e-03 -5.63980900e-02 -3.97104712e-04 -3.18753999e-03
  3.78351137e-02  2.40916871e-02  9.70566869e-02 -3.33816931e-02
  2.79067084e-03  3.55878025e-02  1.19851083e-02 -3.89494710e-02
  1.27714515e-01  3.65547761e-02 -8.71575251e-02  5.96796386e-02
 -2.31028255e-02  4.52354699e-02  6.17603213e-02 -1.21662514e-02
  2.70661786e-02  1.24025857e-02 -8.12619627e-02  5.39961159e-02
  2.64850389e-02  6.03618659e-02  5.49042746e-02  4.72676270e-02
  3.48658161e-03 -7.40641430e-02 -4.49955091e-02 -1.53136058e-02
 -1.57912374e-02 -8.86536092e-02 -2.65585426e-02 -1.17472047e-02
 -5.78078255e-02 -2.27767596e-04  7.86574930e-02 -1.89552456e-02
 -1.29722832e-02 -7.32548386e-02 -3.37370709e-02 -5.15630133e-02
 -1.38274794e-02  4.58037248e-03 -7.28726946e-03  2.07804274e-02
  3.53418477e-02 -7.83844618e-04  2.08381028e-03  6.01745360e-02
  5.03518097e-02  6.06819615e-02 -5.12227276e-03  2.40236614e-02
 -3.30141187e-02 -2.57081948e-02 -1.57120917e-02  6.02162816e-02
  7.28288293e-02  7.51578137e-02  9.87119079e-02  5.52318916e-02
  3.48294266e-02 -2.71157585e-02 -4.81640361e-02  9.96119305e-02
  1.68526005e-02  1.87237877e-02 -1.55398380e-02 -1.80409532e-02
  1.22670352e-01  2.76621021e-02  4.40229215e-02  5.25708310e-02
  7.91611429e-03  2.44981125e-02 -7.20673501e-02  9.20699090e-02
 -5.44036888e-02  7.74734318e-02 -3.41603272e-02 -7.01153129e-02
  4.39093523e-02  1.56092374e-02 -1.89726911e-02  4.81367707e-02
  8.26506615e-02 -2.23888252e-02 -7.32071251e-02 -2.83664353e-02
 -1.41782714e-02 -5.86592443e-02  8.67964923e-02  5.08226121e-33
 -1.74776018e-02 -3.59775051e-02  6.17364123e-02 -3.72983105e-02
 -2.65277810e-02  4.07344215e-02  1.48157813e-02  3.27267796e-02
 -2.61274744e-02  7.81831741e-02  1.42142838e-02  2.23982390e-02
 -5.08412756e-02 -2.45384946e-02 -8.21238831e-02  2.25181542e-02
 -1.05560953e-02  3.32142636e-02  7.43298978e-02 -1.99754871e-02
 -3.51311378e-02 -7.27214888e-02 -2.32221391e-02  5.51153980e-02
  7.35309273e-02  3.31724919e-02 -1.96336415e-02  1.75486840e-02
 -3.76660712e-02 -3.94689804e-03  4.25339527e-02  1.69943925e-02
 -2.29242872e-02 -5.82689121e-02  2.93054041e-02 -5.91284670e-02
  6.47323132e-02 -3.94994318e-02 -1.07176669e-01 -1.26531674e-02
  6.61766529e-02 -2.87279971e-02 -1.48551008e-02  1.48590719e-02
 -1.43634811e-01  1.73075479e-02  6.89309137e-03  1.03383344e-02
  5.55980504e-02 -1.04298022e-04 -1.16376802e-01  7.29153901e-02
 -9.15677845e-02 -2.24908497e-02  5.61876083e-03 -1.04797117e-01
 -4.28593606e-02  2.92160101e-02 -3.79737243e-02 -1.06355816e-01
 -3.75428447e-03 -3.90554667e-02  4.99505512e-02 -2.52417438e-02
 -1.43575110e-02  5.32797948e-02 -1.10835936e-02  2.61233207e-02
 -2.63809692e-02 -2.02147267e-03 -1.15822993e-01  2.71625761e-02
  2.93713845e-02  1.39191132e-02 -3.10552828e-02 -9.50659625e-03
  2.94266008e-02  1.11266579e-02  9.38736740e-03 -3.07106320e-03
  3.18879522e-02  8.88212491e-03 -6.66849017e-02  9.41390097e-02
  1.84532441e-02  1.61803320e-01 -2.14203428e-02  6.30955119e-03
 -3.04679871e-02  1.95520259e-02  3.74017656e-02 -3.51614282e-02
 -5.14783058e-03  2.81686615e-03 -1.37120023e-01 -4.30426469e-33
 -6.54487163e-02 -4.49352972e-02 -9.12871957e-03 -2.58642249e-03
  9.92299709e-03 -1.60672646e-02  1.18007073e-02  3.74774896e-02
  3.37523073e-02  6.13173805e-02  2.33440250e-02 -1.07636461e-02
 -4.35805283e-02  8.45196247e-02  2.18589082e-02  1.08076178e-01
 -1.77492984e-02 -6.40851585e-03  7.02177659e-02 -9.42846686e-02
 -7.75706116e-03  4.64719906e-02  8.04553255e-02  8.67418572e-03
 -9.66846719e-02  2.95588039e-02 -6.20318614e-02 -3.00306678e-02
 -1.66056268e-02  5.45402244e-02  6.70574382e-02 -4.94035371e-02
 -1.28198303e-02  3.81904580e-02  5.12202177e-03 -1.04443625e-01
  7.08682463e-02  3.34881134e-02 -2.91934162e-02  6.92076236e-02
  9.70763899e-03 -7.84586892e-02 -8.60868581e-03 -5.29427174e-03
  5.28973527e-02 -7.08276629e-02  9.83092934e-02 -6.60639629e-03
  1.90065317e-02  4.59893644e-02  7.19595253e-02 -2.12946311e-02
 -6.49851114e-02  8.98960084e-02 -2.63849720e-02 -6.48284033e-02
  9.96750891e-02 -8.94662216e-02  2.13215686e-02 -1.12408370e-01
 -4.67191935e-02 -2.42015980e-02 -3.00757159e-02  1.07108980e-01
  4.90000248e-02 -2.72189397e-02  2.60037687e-02  4.99504395e-02
  4.11203802e-02 -3.02622095e-02 -2.69164983e-02 -3.04090194e-02
  1.41599923e-01  1.08084464e-02  5.83673716e-02 -9.96737741e-03
 -1.63768958e-02 -7.74144754e-02  2.28994247e-02  6.43446147e-02
 -1.23325204e-02  2.45900080e-02  2.33723428e-02 -3.63146476e-02
 -1.69162396e-02 -7.67814592e-02  8.06094632e-02  2.51069348e-02
 -2.56990809e-02  4.12098020e-02 -4.85506403e-04  2.23756302e-02
 -3.35181020e-02 -1.68690514e-02  1.60003919e-02 -5.33671667e-08
 -1.33219629e-03 -1.71772502e-02 -3.19574811e-02 -3.99823021e-03
  2.66139433e-02  2.90043390e-04  1.52599392e-02 -1.09819537e-02
 -7.06290007e-02 -5.00650937e-03 -4.30527180e-02  3.34904045e-02
 -1.18359681e-02 -3.83747071e-02 -7.34291077e-02 -7.07843527e-02
 -4.17593569e-02  1.07143528e-03  1.23055102e-02  1.13836210e-02
  2.36093812e-02  2.08236631e-02  4.32001874e-02 -9.36346576e-02
  6.94109648e-02 -5.12535051e-02 -1.10572567e-02  9.92022678e-02
 -5.67099340e-02  6.05584644e-02 -4.77815829e-02  6.06357418e-02
  4.22890224e-02 -5.50136119e-02 -4.82341349e-02 -2.27095298e-02
  2.03128718e-02  1.73100643e-02 -2.92743463e-03  1.85329448e-02
  2.01410186e-02 -2.16685850e-02 -4.50925119e-02  4.39596288e-02
  3.64489085e-03 -2.02741846e-02  1.19930143e-02  6.41346201e-02
  1.08810171e-01 -1.34327263e-01 -1.79528724e-02 -2.03982890e-02
  3.09720561e-02 -4.55384180e-02 -5.00364751e-02 -4.97995168e-02
 -7.80460984e-02  6.52311463e-03  2.91277431e-02 -1.43586611e-02
  3.20033543e-02 -5.35182208e-02 -7.00196922e-02 -5.73817007e-02]"
"thị.Cả hai cách đều hoạt động tốt, vì một vài program cũ vẫn còn dùng SYSVAR_CLOCK_PUBKEY như một account truyền vào trong chỉ thị.# Truyền Clock như là một account trong chỉ thịGiả sử chúng ta khởi tạo một chỉ thị nhận vào một account để khởi tạo và địa chỉ sysvarRustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    clock::Clock,
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    pubkey::Pubkey,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
/// 1. [signer, writable] Payer
/// 2. [writable] Hello state account
/// 3. [] Clock sys var
pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let _payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;
    // Clock sysvar
    let sysvar_clock_pubkey = next_account_info(accounts_iter)?;

    let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;
    hello_state.is_initialized = true;
    hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;
    msg!(""Account initialized :)"");

    // Type casting [AccountInfo] to [Clock]
    let clock = Clock::from_account_info(&sysvar_clock_pubkey)?;
    // Getting timestamp
    let current_timestamp = clock.unix_timestamp;
    msg!(""Current Timestamp: {}"", current_timestamp);

    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748let clock = Clock::from_account_info(&sysvar_clock_pubkey)?;
let current_timestamp = clock.unix_timestamp;
12Bây giờ, chúng ta truyền địa chỉ clock của sysvar thông qua đoạn mã ở phía người dùngTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  SYSVAR_CLOCK_PUBKEY,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";

(async () => {
  const programId = new PublicKey(
    ""77ezihTV6mTh2Uf3ggwbYF2NyGJJ5HHah1GrdowWJVD3""
  );

  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // Airdropping 1 SOL
  const feePayer = Keypair.generate();
  await connection.confirmTransaction(
    await connection.requestAirdrop(feePayer.publicKey, LAMPORTS_PER_SOL)
  );

  // Hello state account
  const helloAccount = Keypair.generate();

  const accountSpace = 1; // because there exists just one boolean variable
  const rentRequired = await connection.getMinimumBalanceForRentExemption(
    accountSpace
  );

  // Allocating space for hello state account
  const allocateHelloAccountIx = SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    lamports: rentRequired,
    newAccountPubkey: helloAccount.publicKey,
    programId: programId,
    space: accountSpace,
  });

  // Passing Clock Sys Var
  const passClockIx = new TransactionInstruction({
    programId: programId,
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: feePayer.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: helloAccount.publicKey,
","[-6.70844242e-02  5.94461225e-02 -1.14820927e-01 -8.56766179e-02
 -2.62159854e-02 -4.78682593e-02  6.46304637e-02  6.84908703e-02
  1.60443019e-02  4.22640555e-02  4.12049033e-02 -1.08798206e-01
 -1.57451946e-02 -9.27994102e-02  7.45685026e-02  6.80975663e-03
 -1.34034097e-01 -5.68535887e-02 -1.67713277e-02 -1.63746253e-02
  2.81631127e-02  3.86714377e-02 -5.51768094e-02  5.30166440e-02
 -5.41555732e-02 -3.60359736e-02  4.44993451e-02  6.97690696e-02
  7.56596215e-03 -3.59430611e-02  3.43091115e-02  9.79196727e-02
 -2.49099708e-03  3.02467681e-02  7.66459927e-02  1.39312848e-01
  3.90682220e-02 -4.79945019e-02  1.30286841e-02 -6.12479672e-02
 -6.05144836e-02  3.42839397e-02 -1.00905351e-01 -3.76443788e-02
  6.37070909e-02 -2.37914044e-02 -1.09989708e-02 -5.40498365e-03
 -3.69354971e-02 -4.70611849e-04 -8.98845196e-02  7.36504123e-02
 -6.16538851e-03 -1.93694364e-02 -3.00394874e-02  7.65369311e-02
 -3.09382915e-03  2.40512826e-02  7.31211016e-03 -4.31674626e-03
 -3.07240821e-02  4.79596108e-02 -2.51216684e-02 -5.02113402e-02
 -3.02849505e-02  1.73382089e-02 -3.07692736e-02 -1.09960139e-02
  1.97245870e-02 -2.99624782e-02 -6.62161559e-02 -4.70951237e-02
 -1.11419782e-01  5.06050028e-02 -9.65924487e-02 -1.66280922e-02
 -5.39469272e-02 -9.73113067e-03  9.73237306e-03 -1.00736022e-01
  3.91207598e-02 -9.39295813e-03 -1.49497287e-02  2.86965258e-02
  2.86683533e-02  2.29588300e-02 -1.35120600e-02 -3.74656990e-02
  7.63127431e-02 -1.24043003e-02  2.77273934e-02 -9.45924968e-03
 -6.34610131e-02 -7.65199633e-03  1.31806359e-01  1.82233620e-02
  6.69534430e-02  6.59695193e-02 -1.74805373e-02  1.17872894e-01
  4.06400068e-03  3.14404741e-02  8.06459226e-04  2.15783697e-02
  4.85871546e-03 -3.40363905e-02  9.70448181e-02  2.09521148e-02
 -4.53069061e-02 -5.63857029e-04 -1.97147802e-02  7.67900199e-02
 -7.71623757e-03 -9.61821899e-02  4.71783690e-02  3.64918113e-02
 -5.45445969e-03  4.47234213e-02 -1.88225706e-03  6.28318544e-03
  9.69269201e-02  1.21261366e-02 -5.42218499e-02 -2.87153553e-02
 -5.44969216e-02 -4.62817587e-02  6.32673055e-02  1.65615296e-32
  3.69776897e-02 -4.40286053e-03 -3.90267596e-02 -9.23960730e-02
  4.61193696e-02  1.98956151e-02 -2.02221684e-02  2.41521150e-02
 -6.60843551e-02 -6.88268756e-03 -5.17836735e-02 -1.14388086e-01
 -6.25039339e-02 -9.30003971e-02  3.20741124e-02  1.56944767e-02
  4.50994745e-02  2.55013853e-02  1.10944295e-02 -4.00759466e-02
  6.34159967e-02 -2.46245973e-02 -5.52644283e-02  7.08110817e-03
  3.53795402e-02  6.07136264e-02 -3.41329053e-02 -1.80676728e-02
 -4.87991646e-02  3.21989995e-03  8.46978799e-02 -2.62234751e-02
 -4.80490439e-02 -2.33672298e-02  9.78593365e-04 -8.58169198e-02
 -2.33846828e-02 -4.57363501e-02 -3.37115042e-02 -9.44581032e-02
  5.64892814e-02  3.37941735e-03 -5.03911451e-03 -3.57681140e-02
 -4.87031527e-02 -9.27002076e-03 -4.24949266e-02  3.38086337e-02
  3.14989761e-02  1.65683255e-02 -6.65287971e-02 -3.21924628e-04
 -1.00498624e-01 -1.67375207e-02  4.41091657e-02 -1.87744740e-02
  1.65694882e-03  3.11471410e-02  1.19343745e-02  6.36621043e-02
 -2.94982977e-02  1.60293784e-02  1.87050458e-02  1.49592599e-02
 -1.50314216e-02 -8.29226747e-02 -1.86027195e-02  8.31571687e-03
  9.34482142e-02 -4.14707996e-02 -7.75184929e-02 -7.71136908e-03
  2.98142787e-02  4.07203697e-02 -4.14783545e-02 -4.94896658e-02
  4.71881628e-02  1.12195760e-02 -4.18530218e-02  8.62034224e-03
  1.97642818e-02 -3.94236408e-02 -3.54956649e-02  3.53824929e-03
  2.88983714e-02  2.93674190e-02  3.50122936e-02 -5.81153482e-02
 -4.59597521e-02 -7.41986372e-03  5.48624014e-03 -3.03332303e-02
  5.88532025e-03 -2.59230789e-02 -1.08361416e-01 -1.64613408e-32
  7.35069811e-02 -6.13167286e-02 -1.84978507e-02 -6.82477206e-02
 -1.61712170e-02 -2.00916324e-02 -8.84503417e-04 -4.97054309e-02
 -3.61052155e-02  1.87989268e-02 -3.86305939e-04 -1.33653563e-02
  1.88330300e-02 -6.49167551e-03  5.60663268e-02  9.48128328e-02
  6.84614927e-02  6.58302428e-03 -3.67056094e-02  2.55730655e-02
 -3.54989655e-02  9.99687836e-02  4.05698605e-02 -6.71531335e-02
  2.29786299e-02 -3.60720716e-02  6.81034401e-02  1.18426010e-01
 -3.24795232e-03  2.06083283e-02  6.25270680e-02  1.58188008e-02
 -4.61212508e-02  1.03876516e-01 -2.62743402e-02 -6.63337782e-02
  5.95517159e-02  1.01946965e-02 -4.82059643e-02  8.87821093e-02
  1.14130855e-01  2.37943120e-02 -3.42834033e-02 -4.20907475e-02
 -2.62169056e-02  3.77784111e-02  4.76173051e-02 -3.16790603e-02
 -7.16869161e-02 -3.48565839e-02  1.17155850e-01 -7.71461874e-02
  4.24710363e-02 -7.10640699e-02  1.09522017e-02  7.44316448e-03
  7.90950358e-02 -9.73595232e-02 -3.95226516e-02 -1.11066215e-01
  4.66441661e-02 -9.42365006e-02  9.47267842e-03 -1.09715089e-02
  8.72737989e-02 -1.87899135e-02 -6.88928412e-03  4.56607156e-02
  6.52295500e-02 -9.14203897e-02  3.79764102e-02 -1.86103527e-02
 -1.38245383e-02  6.79329112e-02  3.38401534e-02  7.28951171e-02
 -5.18355854e-02  3.24491784e-02 -1.69670191e-02 -3.30626452e-03
 -1.03730075e-01 -1.84206888e-02 -1.33948941e-02 -6.68302178e-03
 -7.23861977e-02 -1.01090290e-01 -5.36742527e-03  6.57228976e-02
 -3.59471813e-02 -3.34856398e-02 -5.92264831e-02  4.57054749e-02
  3.00666858e-02  1.26490682e-01  1.12963244e-02 -6.57679635e-08
 -7.48766735e-02 -8.37031901e-02 -1.63489161e-03  7.08318651e-02
  4.79489267e-02  4.99465130e-03 -8.37880466e-03 -7.76979029e-02
  1.63997505e-02 -5.44011779e-02 -6.07159771e-02  4.42207903e-02
 -3.20267230e-02 -4.60014455e-02  5.30245714e-04 -3.43667381e-02
 -4.79696877e-02  2.58783177e-02 -3.12101822e-02 -5.35427071e-02
  1.08288281e-01 -2.09040884e-02 -4.32750769e-03  2.96055153e-02
  1.40307089e-02  2.38072742e-02 -7.71387341e-03  8.00160468e-02
  3.83919664e-02 -2.25012116e-02  6.95110485e-02  1.21949594e-02
  6.03841580e-02  1.62705053e-02 -1.60217006e-02 -8.04530364e-03
  1.72771700e-02  4.02482077e-02 -3.24187428e-02  6.14726432e-02
  2.03202236e-02 -2.01727040e-02 -5.88197783e-02  2.70212442e-02
  1.06728198e-02 -1.19338427e-02 -1.47692431e-02  9.07297339e-03
  9.63188261e-02 -2.98504941e-02 -3.33900712e-02 -1.93709936e-02
  6.18855581e-02  7.57669732e-02 -2.42030676e-02  3.12474873e-02
 -9.03909619e-04  1.02859186e-02  2.39382852e-02  5.17270267e-02
  7.30978325e-03  1.05692230e-01 -3.05341966e-02  6.95158122e-03]"
"     },
      {
        isSigner: false,
        isWritable: false,
        pubkey: SYSVAR_CLOCK_PUBKEY,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(allocateHelloAccountIx, passClockIx);

  const txHash = await connection.sendTransaction(transaction, [
    feePayer,
    helloAccount,
  ]);

  console.log(`Transaction succeeded. TxHash: ${txHash}`);
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374(async () => {
  const programId = new PublicKey(
    ""77ezihTV6mTh2Uf3ggwbYF2NyGJJ5HHah1GrdowWJVD3""
  );

  // Passing Clock Sys Var
  const passClockIx = new TransactionInstruction({
    programId: programId,
    keys: [
      {
        isSigner: false,
        isWritable: true,
        pubkey: helloAccount.publicKey,
      },
      {
        is_signer: false,
        is_writable: false,
        pubkey: SYSVAR_CLOCK_PUBKEY,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(passClockIx);

  const txHash = await connection.sendTransaction(transaction, [
    feePayer,
    helloAccount,
  ]);

  console.log(`Transaction succeeded. TxHash: ${txHash}`);
})();
1234567891011121314151617181920212223242526272829303132# Truy cập Clock trực tiếp bên trong chỉ thịGiả sử chúng ta tạo ra một chỉ thị tương tự như trên nhưng sẽ không truyền vào SYSVAR_CLOCK_PUBKEY từ phía người dùng.RustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    clock::Clock,
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    pubkey::Pubkey,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
/// 1. [signer, writable] Payer
/// 2. [writable] Hello state account
pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let _payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;

    // Getting clock directly
    let clock = Clock::get()?;

    let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;
    hello_state.is_initialized = true;
    hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;
    msg!(""Account initialized :)"");

    // Getting timestamp
    let current_timestamp = clock.unix_timestamp;
    msg!(""Current Timestamp: {}"", current_timestamp);

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546let clock = Clock::get()?;
let current_timestamp = clock.unix_timestamp;
12Chỉ thị ở phía người dùng giờ chỉ cần truyền duy nhất trạng thái và account chịu phí.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";

(async () => {
  const programId = new PublicKey(
    ""4ZEdbCtb5UyCSiAMHV5eSHfyjq3QwbG3yXb6oHD7RYjk""
  );

  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

","[ 2.46163458e-02  2.99869142e-02 -8.48097056e-02  5.00811674e-02
 -6.59721345e-02  1.94581393e-02  7.80143067e-02  3.62951458e-02
  1.04187816e-01  5.19877337e-02  6.78538904e-03 -1.85834523e-02
 -5.65073676e-02 -3.70646454e-03  1.90794505e-02 -4.57106940e-02
 -3.79522927e-02 -8.67571831e-02 -2.07633115e-02  2.39017457e-02
  1.61094218e-02 -9.75289419e-02  5.49136512e-02  2.70162337e-02
  1.81548968e-02 -7.80780390e-02 -1.32477907e-02 -1.54473437e-02
 -3.99353802e-02 -1.45896217e-02  4.66590822e-02  1.18379574e-02
 -5.78861758e-02 -3.87083851e-02  2.52961777e-02  9.54452753e-02
  5.27151823e-02 -6.65697455e-02  1.21061632e-03 -4.18465436e-02
  4.52968664e-03  3.08698602e-02 -7.32552931e-02  6.53935894e-02
  7.91535378e-02 -3.87040079e-02 -4.36610058e-02  1.07422443e-02
 -7.71012157e-03  2.32595187e-02 -1.83390565e-02  1.01228021e-01
 -2.86972802e-02  3.78784463e-02 -1.96417328e-02  1.18011780e-01
 -1.75723750e-02  3.39681730e-02  5.14246821e-02 -4.58683306e-03
  1.74984112e-02 -3.72754992e-03  1.66373625e-02 -5.95037676e-02
 -4.79953885e-02  7.05455467e-02  3.09295282e-02 -4.52838726e-02
 -1.50113311e-02 -1.90384220e-02  1.02415942e-02  1.15063041e-02
 -9.89941433e-02  1.37339076e-02 -6.46556616e-02 -6.74037486e-02
 -5.67753450e-04  2.66116560e-02 -6.98818341e-02  1.66236907e-02
 -6.77722543e-02 -8.33619758e-02  4.45549563e-02 -2.05978192e-02
  2.71053258e-02  9.51561853e-02 -2.45773029e-02 -2.36386713e-03
 -2.86293272e-02 -1.65673941e-02 -3.07389311e-02  7.92195201e-02
 -5.02970517e-02 -2.84049399e-02  1.33140758e-01  3.97116803e-02
  9.30010993e-03  7.28997737e-02 -5.54703996e-02  3.89485098e-02
  2.53754836e-02  3.46609168e-02 -7.48752803e-02 -1.02387497e-03
  7.01557621e-02  2.13982277e-02  5.24007343e-02 -1.10330470e-01
 -8.93534571e-02 -1.84222199e-02  2.35248334e-03  1.09747343e-01
  5.04833236e-02  2.35498995e-02 -2.04173345e-02  1.35746241e-01
 -9.26125050e-02  5.41456491e-02  9.28130075e-02  1.47253955e-02
  6.48323447e-02  2.09520422e-02 -7.58707449e-02 -1.66293010e-02
 -6.38278425e-02 -3.93594541e-02  4.69242334e-02  1.11113743e-32
 -4.03688736e-02 -4.06407714e-02 -5.89069538e-03  5.54753281e-03
  3.63527611e-02  8.94784927e-03  2.22965479e-02  1.40037453e-02
 -6.87509030e-02 -1.48093458e-02 -4.90993299e-02 -1.23334765e-01
  2.79942644e-03 -5.59445061e-02  1.40706515e-02  7.16090575e-03
  3.10274190e-03  1.14316521e-02  1.00932367e-01  1.05040856e-02
 -1.89831859e-04 -2.14251522e-02  3.78476419e-02 -3.99397388e-02
 -5.72978295e-02 -1.47515470e-02 -9.81686637e-02 -2.86679436e-02
  6.87290914e-03 -2.05433252e-03  3.84117700e-02  3.98551337e-02
 -4.36068587e-02  1.14566334e-01  3.41605544e-02 -6.44360259e-02
 -5.08699715e-02 -1.33243101e-02 -3.22301462e-02 -3.33310664e-02
  2.18462646e-02 -3.39984037e-02 -7.40386024e-02 -6.10033341e-04
 -1.05505228e-01 -7.21058473e-02  4.99758869e-03 -5.06416075e-02
  8.89573693e-02  5.53479567e-02 -4.35745828e-02  5.22871688e-02
 -1.29410522e-02 -1.23697206e-01  3.28316557e-04 -3.37495506e-02
  6.63545057e-02 -4.04836386e-02 -3.30757126e-02  6.57526553e-02
  1.47575897e-03 -3.09416540e-02 -2.03453097e-02 -5.00428900e-02
  2.35209111e-02 -3.50032933e-02 -8.53860602e-02 -8.67374428e-03
 -3.86848487e-03 -4.44987565e-02 -1.48713160e-02 -2.49031708e-02
  1.75536401e-03  7.33340159e-02 -2.55227219e-02  1.81895867e-02
 -5.89710753e-03 -4.89454065e-03 -1.58677027e-02 -7.79731870e-02
  4.04562429e-02 -2.31315149e-03 -3.86890918e-02  5.90921007e-02
  3.45161650e-03  1.26042724e-01 -5.82961328e-02 -3.39306258e-02
  3.97929773e-02  4.47165295e-02 -1.11969723e-03 -4.07139696e-02
  1.30220782e-02 -3.16815972e-02 -4.45341505e-02 -1.33046330e-32
  3.59029099e-02 -3.55233662e-02 -1.15701444e-01  4.29080240e-02
 -5.81610091e-02  6.30412698e-02 -2.18239967e-02 -4.54882383e-02
 -2.93344595e-02  9.31336824e-03  7.07253143e-02  3.30840461e-02
 -1.44720376e-02  3.98556236e-03  1.57326329e-02 -5.59410192e-02
  5.54382205e-02 -4.39656712e-02  8.53095297e-03 -4.52056825e-02
  3.70199326e-03  6.27939329e-02 -1.08680809e-02  3.95879298e-02
 -4.57839742e-02 -1.17798857e-02 -5.15294112e-02  6.44652396e-02
 -2.03650929e-02 -3.43019515e-02 -2.08835397e-02  1.98953729e-02
 -1.40495170e-02  9.46416706e-02  6.53558373e-02 -7.66076520e-02
  7.87174329e-02  1.91669222e-02  1.33844034e-03  4.44196090e-02
  6.66409135e-02 -3.89835164e-02 -3.35336737e-02 -3.72046567e-02
  3.99666727e-02  1.17055671e-02 -9.95640643e-03 -3.80987637e-02
  5.25335446e-02  9.44008380e-02  3.60324197e-02 -5.07455803e-02
  7.65355676e-02 -3.02737989e-02  4.63839294e-03  4.07202542e-02
  7.17638209e-02 -1.62148178e-01  1.27286628e-01 -6.02201447e-02
  1.06299054e-02 -6.35607168e-02  6.57481253e-02  2.73287278e-02
  1.05149306e-01 -3.40250656e-02 -6.94404170e-02  2.11550165e-02
  7.64544308e-02  2.89431103e-02 -4.12851659e-04  1.42533630e-02
 -3.46936509e-02  5.02712373e-03  3.98718342e-02  1.77246369e-02
 -6.32948708e-03 -5.63298278e-02  1.87393953e-03  1.49314096e-02
  2.15430763e-02  3.25462921e-03 -1.31097184e-02 -3.13259475e-02
  4.06550383e-03 -3.38671878e-02  2.46998649e-02  3.69823016e-02
 -3.95617634e-02 -3.23879719e-02 -1.55686988e-02 -4.08373261e-03
 -9.36643556e-02 -1.56202689e-02  3.37753887e-03 -6.79939376e-08
 -6.08772077e-02 -7.85447750e-03 -7.51263425e-02  1.50765032e-02
  5.78412935e-02 -2.86476742e-02  4.02867869e-02 -1.24902159e-01
 -2.27538291e-02 -7.54587576e-02 -1.03204302e-01 -6.91792788e-03
  1.32173058e-02 -8.36696774e-02 -2.76532695e-02 -5.81357367e-02
 -4.75827232e-02 -2.23222636e-02 -8.66747927e-03 -4.77727838e-02
  2.73874905e-02 -2.18049046e-02  2.01957952e-03  3.54748266e-03
  6.90722000e-03  1.34412022e-02  1.41740039e-01  1.89848155e-01
  3.81399915e-02  2.23144703e-02 -4.36445177e-02 -1.20313205e-02
  2.66866889e-02 -2.18387172e-02 -8.91495794e-02 -2.40387414e-02
  6.02308400e-02  1.33724557e-02  5.42789847e-02 -5.70413610e-03
  2.67017633e-02  2.57578716e-02 -5.04872948e-02  3.59594040e-02
 -3.12479641e-02  5.88391759e-02 -2.25650240e-02  3.15681361e-02
  2.61022355e-02  2.98067206e-03  5.14084939e-03  6.64500752e-03
  2.96506416e-02  5.09814993e-02 -7.81193227e-02  1.22806784e-02
  1.22478800e-02 -5.02175353e-02  1.00593567e-02  1.97558850e-02
  6.21577017e-02  1.74274819e-03 -1.61481909e-02 -7.46131018e-02]"
" // Airdropping 1 SOL
  const feePayer = Keypair.generate();
  await connection.confirmTransaction(
    await connection.requestAirdrop(feePayer.publicKey, LAMPORTS_PER_SOL)
  );

  // Hello state account
  const helloAccount = Keypair.generate();

  const accountSpace = 1; // because there exists just one boolean variable
  const rentRequired = await connection.getMinimumBalanceForRentExemption(
    accountSpace
  );

  // Allocating space for hello state account
  const allocateHelloAccountIx = SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    lamports: rentRequired,
    newAccountPubkey: helloAccount.publicKey,
    programId: programId,
    space: accountSpace,
  });

  const initIx = new TransactionInstruction({
    programId: programId,
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: feePayer.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: helloAccount.publicKey,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(allocateHelloAccountIx, initIx);

  const txHash = await connection.sendTransaction(transaction, [
    feePayer,
    helloAccount,
  ]);

  console.log(`Transaction succeeded. TxHash: ${txHash}`);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667(async () => {
  const programId = new PublicKey(
    ""4ZEdbCtb5UyCSiAMHV5eSHfyjq3QwbG3yXb6oHD7RYjk""
  );

  // No more requirement to pass clock sys var key
  const initAccountIx = new TransactionInstruction({
    programId: programId,
    keys: [
      {
        isSigner: false,
        isWritable: true,
        pubkey: helloAccount.publicKey,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(initAccountIx);

  const txHash = await connection.sendTransaction(transaction, [
    feePayer,
    helloAccount,
  ]);

  console.log(`Transaction succeeded. TxHash: ${txHash}`);
})();
123456789101112131415161718192021222324252627# Làm thế nào để thay đổi kích thước accountBạn có thể thay đổi kích thước của một account sở hữu bởi program với hàm realloc. realloc có thể thay đổi kích cỡ của account lên đến 10KB. Khi sử dụng realloc để tăng kích thước của một account, bạn phải chuyển thêm lamports vào cọc để giữ cho account được miễn phí thuê.RustPress </> button to view full sourceuse {
  crate::{
      instruction::WhitelistInstruction,
      state::WhiteListData,
  },
  borsh::{BorshDeserialize, BorshSerialize},
  solana_program::{
      account_info::{next_account_info, AccountInfo},
      entrypoint::ProgramResult,
      msg,
      program::invoke_signed,
      program::invoke,
      program_error::ProgramError,
      pubkey::Pubkey,
      sysvar::Sysvar,
      sysvar::rent::Rent,
      system_instruction,
  },
  std::convert::TryInto,
};

pub fn process_instruction(
  _program_id: &Pubkey,
  accounts: &[AccountInfo],
  input: &[u8],
) ->","[-5.52355945e-02 -4.26782295e-02 -6.36728704e-02  8.83529633e-02
 -4.43257540e-02 -1.91972610e-02  1.20097354e-01  3.25281024e-02
  3.36943641e-02  6.52087778e-02  8.79025161e-02 -8.70698392e-02
 -1.68794189e-02 -3.40560786e-02 -2.45001148e-02  4.39191349e-02
 -7.16787726e-02 -1.00143015e-01 -1.39149074e-02  2.96849422e-02
  6.82217628e-02 -1.15023211e-01 -4.97021188e-04 -3.58825587e-02
  4.60418016e-02 -5.51462695e-02 -2.71487702e-02 -2.21148934e-04
 -8.04396067e-03 -5.33086956e-02  1.40819937e-01  5.40916435e-02
 -1.62718184e-02 -4.92219329e-02  7.13904127e-02  6.48835376e-02
 -8.19067936e-03 -5.69763593e-02 -5.98493358e-03 -6.05736338e-02
 -3.50934193e-02  1.01358123e-01 -3.57984640e-02  5.33876792e-02
 -2.79777087e-02 -1.61916472e-03 -1.49446931e-02  8.87206346e-02
 -1.41460961e-02 -1.03950053e-02  6.21672068e-03  6.40934035e-02
  6.62582181e-03  9.56421793e-02 -3.40403691e-02  5.50631247e-02
 -2.47037713e-03  5.22950739e-02 -1.90428719e-02 -8.65868479e-02
  3.37301679e-02 -3.74577357e-03  2.01541763e-02 -5.90516143e-02
 -3.55454087e-02  6.80799708e-02 -2.22662406e-04 -1.61954886e-04
 -2.91976202e-02 -4.77914698e-02 -3.06806229e-02  2.23167017e-02
 -7.84645900e-02  5.01798801e-02 -3.26283388e-02  1.32617671e-02
  5.65924942e-02  1.61337461e-02 -4.00892273e-02  6.80706277e-02
 -2.26044422e-03 -3.25413570e-02 -3.45870778e-02  2.62786355e-02
 -5.85460849e-03  4.73800972e-02 -7.97277782e-03 -8.74732062e-02
 -1.73374154e-02 -3.88548747e-02 -1.93933025e-02  1.44675642e-03
 -2.28191875e-02 -3.17504145e-02  5.14891855e-02  6.03183843e-02
 -5.21011166e-02 -2.45481990e-02 -4.09795083e-02  7.09837079e-02
  5.10323755e-02 -6.17743796e-03 -1.32026505e-02  2.84168180e-02
  7.37967843e-04 -4.33634035e-02  8.18795264e-02 -1.04096465e-01
 -2.45247055e-02  2.32354179e-02  1.11668380e-02  8.49604979e-02
  2.75101513e-02  3.65143456e-02 -3.44706140e-02  1.28855571e-01
 -4.49611731e-02 -4.26993053e-03  6.93868622e-02  5.60047217e-02
  2.84654591e-02  5.61311282e-02 -4.60376479e-02  6.53809111e-04
 -1.77685395e-02 -8.43200833e-03  2.37489026e-02  1.27343125e-32
 -2.48411596e-02 -5.09579405e-02 -4.02714200e-02  2.45566405e-02
 -2.17938024e-04  7.91537296e-03  9.65936258e-02  9.26681235e-02
 -6.83735535e-02  3.75690823e-03 -3.60197015e-02 -7.22897202e-02
  1.54399769e-02 -7.77292997e-02  1.52365267e-02 -4.24063727e-02
 -1.75822224e-03  6.99084029e-02  6.94724545e-02 -3.46826576e-02
 -6.63717687e-02 -3.93103547e-02 -2.11194120e-02 -4.15219106e-02
  6.84813485e-02 -6.51664436e-02 -6.96143582e-02  2.25902572e-02
  2.45229574e-03 -2.51234393e-03  4.29964587e-02  4.29348871e-02
 -3.36350985e-02  7.11234063e-02  5.56591079e-02  1.23509979e-02
 -2.65077855e-02 -1.27279228e-02 -1.10219046e-01 -5.17652258e-02
  1.23773143e-02 -8.01619317e-04 -4.08730805e-02  3.16059813e-02
 -6.42800480e-02 -1.04418136e-01  4.61816881e-03 -4.46451828e-02
  4.37985212e-02  5.68905547e-02 -5.96153475e-02  2.50700191e-02
 -7.36279339e-02 -2.14193854e-02  3.46580520e-02 -1.22252945e-02
 -6.30672835e-03  1.32874819e-02  3.73925343e-02  2.13415502e-03
 -3.35351713e-02 -8.21663067e-02 -1.15751717e-02 -2.58166362e-02
  4.61603738e-02 -5.61289825e-02 -4.89449166e-02  1.35198105e-02
  7.42329005e-03  3.77357914e-03 -6.32165074e-02  7.02991663e-03
 -6.67886585e-02  5.09801470e-02  4.62281937e-03 -5.86431175e-02
  2.95574535e-02  1.69610197e-03 -3.29426266e-02 -7.97512382e-02
  3.37857828e-02  1.41867483e-02  2.00241245e-02  6.47017136e-02
 -3.69469300e-02  7.92869627e-02  3.33590396e-02  1.64408144e-02
 -2.43011769e-02  4.87583801e-02  5.36001381e-03 -5.11191301e-02
  2.96519715e-02 -8.79082158e-02  2.18694340e-02 -1.25146097e-32
 -2.96297185e-02 -5.78347407e-02 -9.90237370e-02 -5.62544689e-02
  3.01738037e-03  8.49892870e-02  3.46155204e-02 -2.93150228e-02
 -8.23105648e-02  1.13002583e-02 -6.15169853e-02  7.22675696e-02
  3.44339535e-02  1.83852706e-02  5.81491850e-02 -1.38174780e-02
 -5.97781129e-03 -8.60327855e-02  7.54822269e-02  4.07679603e-02
  4.90567088e-03  4.32350747e-02  8.03351775e-03  3.24489549e-02
 -1.31237060e-01  2.17851941e-02 -5.03845550e-02  1.04069315e-01
 -1.41452649e-03  6.01235144e-02 -2.31930632e-02  6.28709749e-05
 -9.55854431e-02  1.04888566e-01 -5.50719798e-02 -1.35108754e-01
  2.19320972e-02  1.01264752e-01 -1.22005017e-02  8.45653787e-02
  8.34599882e-03 -6.77468106e-02 -3.06937564e-02 -6.50615469e-02
  2.20331792e-02 -6.08568564e-02  3.98530290e-02 -1.36927748e-02
  6.28021583e-02  8.61298945e-03 -2.28274390e-02  9.23939329e-03
 -8.10606629e-02  7.35283643e-02 -1.07340971e-02  5.57046235e-02
  1.17262341e-01 -5.09677306e-02  9.42211822e-02 -4.37261276e-02
  1.83884595e-02 -3.87336761e-02  6.25000149e-02  8.25858489e-03
  7.75872990e-02 -5.28435148e-02 -9.60165821e-03  1.73638146e-02
  2.91574318e-02  3.07039209e-02 -5.62552884e-02  1.62517987e-02
  4.99905311e-02 -2.31819805e-02  8.31398517e-02  4.80137989e-02
  6.70280084e-02 -1.10802213e-02  8.29218775e-02 -1.03431530e-02
 -2.01885384e-02  2.98413038e-02 -2.48116739e-02 -1.92714352e-02
 -3.69726568e-02 -4.04829830e-02  9.75003280e-03 -8.57145246e-03
 -6.40568659e-02  3.31705026e-02 -6.87983856e-02 -2.24583633e-02
 -2.14147791e-02 -6.83034584e-02 -2.71214861e-02 -6.82611727e-08
 -1.15952287e-02  4.15510423e-02 -8.91365577e-03  1.08211137e-01
  7.16783293e-03 -1.38950662e-03  4.63931747e-02 -1.22648501e-03
 -3.76964323e-02 -8.32611471e-02 -5.69926500e-02  6.87559694e-02
  2.89963037e-02  1.59536693e-02 -6.24755118e-03 -9.08494219e-02
 -6.27992079e-02 -6.90133423e-02 -8.37402567e-02 -1.52707919e-02
  1.15318773e-02 -2.33576689e-02 -3.79619040e-02 -6.93886122e-03
  1.95235461e-02  6.21977635e-03  1.13457613e-01  1.17841937e-01
  8.02150592e-02 -6.07037079e-03 -4.63012643e-02  5.07748686e-02
  1.70877122e-03 -5.84167130e-02 -6.98306561e-02  6.35200664e-02
 -1.03095528e-02  4.28695604e-03  6.87758252e-03  5.74552566e-02
  1.87222734e-02  6.45366833e-02 -3.77130099e-02 -2.87832401e-04
 -1.69922039e-02  6.42349049e-02  1.04875416e-02  8.48816428e-03
  7.07582384e-02  1.73371807e-02 -7.37756491e-02 -3.72077487e-02
  8.04442167e-03  1.04190104e-01 -6.61502779e-02 -2.98232131e-04
  1.13836129e-03 -4.73771468e-02 -4.19961773e-02  9.52031650e-03
  2.46821232e-02 -3.97570198e-03 -7.45198578e-02 -4.75077406e-02]"
"ProgramResult {
  // Length = BOOL + VEC + Pubkey * n (n = number of keys)
  const INITIAL_ACCOUNT_LEN: usize = 1 + 4 + 0 ;
  msg!(""input: {:?}"", input);

  let instruction = WhitelistInstruction::try_from_slice(input)?;

  let accounts_iter = &mut accounts.iter();

  let funding_account = next_account_info(accounts_iter)?;
  let pda_account = next_account_info(accounts_iter)?;
  let system_program = next_account_info(accounts_iter)?;

  match instruction {
    WhitelistInstruction::Initialize => {
      msg!(""Initialize"");

      let (pda, pda_bump) = Pubkey::find_program_address(
          &[
            b""customaddress"",
            &funding_account.key.to_bytes(),
          ],
          _program_id,
      );

      let signers_seeds: &[&[u8]; 3] = &[
          b""customaddress"",
          &funding_account.key.to_bytes(),
          &[pda_bump],
      ];
      
      if pda.ne(&pda_account.key) {
          return Err(ProgramError::InvalidAccountData);
      }

      let lamports_required = Rent::get()?.minimum_balance(INITIAL_ACCOUNT_LEN);
      let create_pda_account_ix = system_instruction::create_account(
          &funding_account.key,
          &pda_account.key,
          lamports_required,
          INITIAL_ACCOUNT_LEN.try_into().unwrap(),
          &_program_id,
      );

      invoke_signed(
          &create_pda_account_ix,
          &[
              funding_account.clone(),
              pda_account.clone(),
              system_program.clone(),
          ],
          &[signers_seeds],
      )?;
      
      let mut pda_account_state = WhiteListData::try_from_slice(&pda_account.data.borrow())?;

      pda_account_state.is_initialized = true;
      pda_account_state.white_list = Vec::new();
      pda_account_state.serialize(&mut &mut pda_account.data.borrow_mut()[..])?;
      Ok(())
    }
    WhitelistInstruction::AddKey { key } => {
      msg!(""AddKey"");

      let mut pda_account_state = WhiteListData::try_from_slice(&pda_account.data.borrow())?;
      
      if !pda_account_state.is_initialized {
          return Err(ProgramError::InvalidAccountData);
      }

      let new_size = pda_account.data.borrow().len() + 32;

    ","[ 1.64457085e-03  4.57933098e-02 -4.83503863e-02 -3.99599485e-02
 -5.10822274e-02  1.05118705e-02  3.06042936e-02  5.14626689e-02
  1.20048048e-02 -1.16328651e-03  8.58783443e-03 -5.13155088e-02
  6.76234998e-03 -4.85623702e-02  1.80335101e-02  5.04677743e-02
 -1.19682111e-01 -5.03561795e-02 -1.76802091e-02 -4.14162315e-02
  5.71700297e-02  1.82585381e-02 -1.39364759e-02  2.72487034e-03
 -5.52149527e-02 -2.68800128e-02  2.83439420e-02  5.71092032e-03
 -5.27850538e-03 -3.19335423e-03  1.09719619e-01 -2.77795848e-02
 -4.97549074e-03  4.92185727e-02  7.76297227e-02  7.92481154e-02
 -3.15994769e-02 -5.16694151e-02 -1.97376646e-02 -2.42888723e-02
 -5.90674691e-02  2.23972276e-02 -2.98658106e-02  3.29349451e-02
  4.98846956e-02  1.72942262e-02 -8.62538442e-02  3.42197493e-02
  4.04049382e-02 -5.47844218e-03 -5.49233332e-02 -2.46744510e-02
 -6.06283396e-02 -4.45061922e-02 -1.48677155e-02  6.97540194e-02
  3.94469760e-02 -2.27263514e-02  4.71450798e-02 -5.29376976e-03
 -2.94454228e-02 -2.47351211e-02  2.16820166e-02 -5.95714599e-02
 -5.78144984e-03  8.45985636e-02 -3.76341231e-02  2.31698640e-02
  9.55779757e-03 -2.27672495e-02 -2.58300621e-02  1.34064751e-02
 -3.93122435e-02 -5.57170529e-03 -4.36901674e-02  2.11219434e-02
 -7.72862583e-02  4.88439612e-02 -1.31503278e-02 -9.47733223e-02
 -5.30280881e-02 -1.63492914e-02  2.32968088e-02  5.19448929e-02
  3.87201495e-02  9.48864818e-02 -5.37720099e-02 -9.33546722e-02
  9.29377973e-02  6.07441552e-02 -8.06829054e-03 -3.73937115e-02
 -5.43731153e-02  5.60284010e-04  1.34619549e-01  4.69911210e-02
  5.07067367e-02 -8.05568770e-02 -3.99231054e-02  6.51473552e-02
 -9.10891145e-02  1.18328836e-02 -4.09581559e-03 -4.04713713e-02
  2.79258173e-02  2.69086864e-02  6.50492907e-02 -4.09417711e-02
 -9.71215814e-02 -4.79825512e-02  7.70724728e-04  1.02512419e-01
  3.46720852e-02  4.22163680e-02  2.04595663e-02  4.99424301e-02
 -1.21591613e-02  2.63426080e-02 -8.72734375e-03  9.66761541e-03
  5.60660958e-02  9.44859907e-03 -1.09879732e-01 -3.20653282e-02
 -1.06303662e-01 -4.70001400e-02 -2.06422601e-02  7.13072212e-33
  8.73649772e-03 -5.04894517e-02 -4.77465987e-02  1.13684237e-02
 -2.24362612e-02 -1.04987146e-02  5.01182973e-02  5.53167723e-02
 -1.40237838e-01  4.56297286e-02 -1.00828549e-02 -7.54647553e-02
  1.27173774e-02  1.87355112e-02  1.47812292e-02 -5.67741431e-02
  7.85555243e-02  9.43836868e-02  1.19954878e-02  8.04543309e-03
  5.22254258e-02  1.99362338e-02 -1.60524193e-02 -8.13499466e-02
  8.05237293e-02  4.91834879e-02 -7.28071928e-02  4.23663780e-02
  1.24362763e-02 -2.70504430e-02 -1.72328688e-02  3.62988189e-03
 -3.89941931e-02 -1.36062419e-02  6.68157265e-02 -6.20368831e-02
  2.18321942e-02  2.20173784e-03 -5.23837283e-02 -1.83271132e-02
  7.77842999e-02  9.52401105e-03  4.97760773e-02 -1.06185544e-02
 -2.42053010e-02 -1.59141421e-02 -4.47977334e-03 -3.73438001e-02
  1.63708050e-02  1.12663046e-03  3.62188020e-03  6.16557635e-02
 -1.60541460e-01 -3.26528847e-02 -3.18609849e-02 -1.34478658e-01
 -3.04582529e-02 -2.85657635e-03 -3.47158319e-04  9.74503905e-03
 -5.10202779e-04  4.92794961e-02 -2.75442051e-03  1.89156421e-02
 -8.69842432e-03 -5.99857084e-02 -8.23283494e-02 -3.13068973e-03
  6.84065372e-02 -4.19249758e-02 -2.31204238e-02  1.68885081e-03
  2.72988956e-02  9.02112946e-03 -4.73688990e-02 -6.44435659e-02
 -1.60407051e-02 -3.21402587e-02 -3.39099616e-02 -1.21536896e-01
  7.40445331e-02  2.69960035e-02 -7.45897889e-02  7.25773498e-02
  2.70405901e-03  9.43875909e-02  3.97630793e-05 -5.77378944e-02
 -5.61356656e-02  6.98625250e-03 -6.76995292e-02 -8.02041441e-02
 -4.24280763e-02 -5.42618930e-02 -4.37442027e-02 -9.97164731e-33
  6.01297431e-02 -2.17079446e-02  2.95715500e-02 -5.65592721e-02
  4.33527585e-03  1.78288873e-02  1.01786636e-01 -1.00856684e-02
 -6.88722543e-03  2.66818497e-02 -3.43676694e-02  3.16964537e-02
  7.37044662e-02  1.12162828e-02  4.53744866e-02  2.88681332e-02
 -9.28986073e-02  2.69408002e-02  3.25164795e-02  7.94177875e-03
  6.98629674e-03  1.07379779e-01  5.72828613e-02  3.82915288e-02
 -1.65812019e-02  7.09268730e-03 -1.53309684e-02  8.80480632e-02
 -6.07515126e-03 -1.24507453e-02  4.60271165e-02  1.76709797e-02
 -1.06749117e-01  8.14723000e-02 -8.20702408e-03 -1.23620540e-01
  8.59050453e-03  6.42734990e-02 -2.67199650e-02  7.11166412e-02
  1.46166429e-01 -5.41818179e-02 -4.99019679e-03  4.61812876e-02
  2.39311819e-04  8.17879569e-03  6.52309358e-02  4.40801978e-02
 -1.97645500e-02  1.05645414e-02 -9.62374080e-03 -1.05278701e-01
 -8.45053117e-04 -1.44109745e-02 -2.52246950e-02  2.84356456e-02
  1.59460366e-01 -9.91383716e-02  8.12377185e-02 -4.66029346e-02
  2.79508177e-02 -7.03151971e-02  8.81708562e-02  5.57612106e-02
  1.01560637e-01 -3.49649787e-02 -5.76862432e-02  3.78322639e-02
  2.66074874e-02  3.33099216e-02 -3.31805907e-02 -9.66211688e-03
  2.16948129e-02 -1.34484600e-02  1.78320985e-02  1.47212613e-02
 -5.81273139e-02 -8.04351047e-02  1.19467834e-02  9.97623801e-02
 -7.65916482e-02  4.79078963e-02  4.00037244e-02 -1.10534588e-02
  1.38304438e-02 -6.88826852e-03  7.46631250e-02  5.30995205e-02
 -5.96975200e-02  4.01320495e-02 -4.70854789e-02 -1.65634137e-02
  4.84671108e-02 -1.02552576e-02 -1.23273395e-02 -6.83875925e-08
 -6.09497502e-02 -4.18777093e-02 -2.17301231e-02  6.41728863e-02
  1.26790944e-02 -6.77930564e-02 -2.84814034e-02 -4.93482351e-02
 -3.03375572e-02 -1.15998611e-01 -5.17684519e-02  4.64803241e-02
 -6.21040128e-02 -2.10065469e-02 -3.28420363e-02 -3.64597403e-02
 -3.12580056e-02 -3.99978124e-02 -1.09521039e-02 -4.95934375e-02
  9.66014632e-04 -1.89371631e-02  8.97433236e-03 -5.70774311e-03
  1.36600342e-03 -4.99125523e-03  6.46540597e-02  1.25965253e-01
  8.14937502e-02  1.65463388e-02  9.20544043e-02 -1.27817523e-02
  3.61557379e-02 -8.94663855e-03 -6.74653426e-02  3.08246980e-03
  2.25385148e-02  1.25861112e-02  8.07229355e-02 -2.69632339e-02
  2.78235134e-02  2.78944355e-02 -3.46347429e-02  1.41087594e-02
 -3.28065678e-02 -7.44338892e-03  9.65050247e-04 -5.90980472e-03
  1.07428350e-01 -5.59191126e-03 -8.57212171e-02 -4.87318896e-02
  1.82388760e-02  5.00516407e-02 -2.91185435e-02 -5.22017740e-02
 -6.16936907e-02 -5.39130196e-02 -3.09909834e-03  5.77832758e-02
  1.57997068e-02 -1.35618625e-02 -5.42835854e-02  9.99125950e-06]"
" let rent = Rent::get()?;
      let new_minimum_balance = rent.minimum_balance(new_size);
      
      let lamports_diff = new_minimum_balance.saturating_sub(pda_account.lamports());
      invoke(
          &system_instruction::transfer(funding_account.key, pda_account.key, lamports_diff),
          &[
              funding_account.clone(),
              pda_account.clone(),
              system_program.clone(),
          ],
      )?;

      pda_account.realloc(new_size, false)?;

      pda_account_state.white_list.push(key);
      pda_account_state.serialize(&mut &mut pda_account.data.borrow_mut()[..])?;

      Ok(())
    }
  }
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119// adding a publickey to the account
let new_size = pda_account.data.borrow().len() + 32;

let rent = Rent::get()?;
let new_minimum_balance = rent.minimum_balance(new_size);

let lamports_diff = new_minimum_balance.saturating_sub(pda_account.lamports());
invoke(
    &system_instruction::transfer(funding_account.key, pda_account.key, lamports_diff),
    &[
        funding_account.clone(),
        pda_account.clone(),
        system_program.clone(),
    ],
)?;

pda_account.realloc(new_size, false)?;
1234567891011121314151617# Làm thế nào để gọi giữa các program (Cross Program Invocation - CPI)Một CPI hiểu đơn giản là gọi chỉ thị của một program từ một program khác. Một ví dụ kinh điển là hàm swap trong Uniswap. Chương trình UniswapV2Router, là chương trình xử lý luận lý cho quá trình hoán đổi các loại token, sẽ gọi qua chương trình ERC20 để thực hiện chức năng chuyển token từ đó hoán đổi các token với nhau. Tương tự vậy, chúng ta muốn có thể gọi chỉ thị của một program cho nhiều mục đích khác nhau.CÙng nhau xem qua ví dụ đầu tiên về chỉ thị transfer của SPL Token Program. Những account cần thiết chúng ta cần truyền vào sẽ là:Token Account nguồn (Account mà chúng ta đang giữ token)Token Account đích (Account chúng ta muốn chuyển token tới)Chủ sở hữu Token Account nguồn (Địa chỉ ví của chúng ta và sẽ dùng để ký)RustPress </> button to view full sourceuse solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program::invoke,
    program_error::ProgramError,
    pubkey::Pubkey,
};
use spl_token::instruction::transfer;

entrypoint!(process_instruction);

// Accounts required
/// 1. [writable] Source Token Account
/// 2. [writable] Destination Token Account
/// 3. [signer] Source Token Account holder's PubKey
/// 4. [] Token Program
pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();

    // Accounts required for token transfer

    // 1. Token account we hold
    let source_token_account = next_account_info(accounts_iter)?;
    // 2. Token account to send to
    let destination_token_account = next_account_info(accounts_iter)?;
    // 3. Our wallet address
    let source_token_account_holder = next_account_info(accounts_iter)?;
   ","[-4.27940302e-02  6.84093013e-02 -8.58652741e-02 -1.36244912e-02
 -6.19073585e-02 -3.76626998e-02 -5.76258358e-03  6.35027513e-02
 -4.06358428e-02  7.88890794e-02  9.72664580e-02 -8.79216716e-02
  2.87032798e-02 -8.78112391e-02  1.91929825e-02  4.22464982e-02
 -6.31292611e-02  4.47312929e-02 -1.92482828e-03  1.09328702e-02
  9.75883380e-02 -5.91150075e-02 -5.58547899e-02 -6.89988490e-03
  6.31146580e-02 -7.14912731e-03  2.40614526e-02  3.62957222e-03
  3.03254575e-02 -4.73268703e-02  2.59646643e-02  2.86472943e-02
 -4.51016910e-02 -5.97327622e-03  5.77942170e-02  9.39288512e-02
  3.94257205e-03 -6.11076728e-02 -9.78422537e-03 -2.00485662e-02
 -5.20421272e-05  4.94346358e-02  7.86376186e-03 -1.35999126e-02
 -1.07443169e-01  1.38979787e-02 -3.45062278e-02  8.21841881e-02
  4.36962210e-02 -8.75001848e-02 -3.51672154e-03  3.79996374e-02
 -9.49529111e-02  1.06805459e-01 -3.11496928e-02  3.48275490e-02
  8.18717778e-02 -1.99033227e-02  8.01488478e-03 -2.34429911e-02
 -1.04586650e-02  8.66146609e-02  3.24184299e-02  2.47932447e-04
  3.18610892e-02 -3.02992202e-02  3.38087277e-03  3.09753716e-02
 -6.28909394e-02  1.26916834e-03 -5.91356773e-03 -2.35023741e-02
 -7.17517883e-02  1.44572379e-02 -7.81139312e-03  1.24733932e-02
 -7.70626450e-03  6.56163916e-02  2.00058836e-02 -8.01101103e-02
 -5.43609262e-02  3.38010378e-02 -2.98568560e-03  2.36639418e-04
  7.22599356e-03  1.74080506e-02 -3.20306942e-02 -8.16354752e-02
  5.03172949e-02  2.03200243e-03  6.76135421e-02  8.53938833e-02
 -2.52944436e-02  1.26309544e-02  2.86808927e-02 -1.83257144e-02
  3.44205126e-02 -2.88400091e-02  1.09463567e-02  9.33089927e-02
  9.38220508e-03  2.48109028e-02  2.59243138e-03  2.63942853e-02
 -5.31133711e-02 -6.84928671e-02  8.85904878e-02 -5.31917028e-02
 -7.52215087e-02  3.20521817e-02 -8.43815785e-03  6.93612993e-02
  2.89527252e-02 -2.59397626e-02 -1.24592101e-02  1.17552746e-02
 -8.15389678e-02 -2.46148221e-02 -4.83351760e-02 -1.67168565e-02
  6.39541298e-02 -1.41487289e-02 -5.05588800e-02 -1.17699243e-02
 -1.04154949e-03  1.76406689e-02  1.18707512e-02 -9.51098816e-34
  2.44608894e-03 -9.98241901e-02 -1.08942967e-02 -3.09506722e-04
 -9.01583880e-02  4.90836464e-02  2.95087732e-02  5.38832545e-02
 -8.13468993e-02  2.89155729e-02  2.48521008e-02 -2.59906836e-02
 -2.54617985e-02 -3.71881574e-03 -5.00418767e-02 -7.68315867e-02
  7.09180087e-02  8.23396370e-02  7.18731582e-02  4.63632569e-02
  7.82580003e-02  2.65696645e-02  3.91626321e-02 -7.56140724e-02
  7.56321177e-02  9.04014148e-03 -8.38127583e-02  4.22326401e-02
  4.47272416e-03  1.75494738e-02 -4.06562304e-03 -3.11369561e-02
 -7.69329676e-03 -5.80374897e-03 -9.69841424e-03 -5.15665412e-02
 -2.31155171e-03 -3.16475183e-02 -8.90739858e-02 -5.78319393e-02
  7.14263469e-02  1.32279946e-02  4.09964621e-02 -3.86893563e-03
 -1.00320214e-02  3.03071085e-02  6.00765608e-02  1.62241943e-02
 -6.47155289e-03  5.63311912e-02 -3.43017466e-02 -3.00355069e-02
 -1.63263217e-01 -1.11610442e-02 -8.00214708e-02 -7.40384161e-02
 -1.63234727e-04 -7.69206062e-02  1.59242433e-02 -6.29640371e-02
 -2.20266283e-02  2.59407442e-02 -9.50737507e-04  1.22648766e-02
  3.85356508e-02 -1.42675163e-02 -3.96777242e-02  1.87725332e-02
  6.91745728e-02 -4.71295714e-02 -2.54085381e-02 -3.28549882e-03
 -4.07925993e-02  8.98329467e-02 -1.19866850e-02 -1.19364955e-01
  3.07362657e-02  5.65982843e-03 -5.97937554e-02 -7.33759478e-02
  7.18727848e-03 -1.71771995e-03 -4.92032021e-02  5.94462976e-02
 -2.48794705e-02  6.71806708e-02  4.45028767e-02  2.50306707e-02
 -7.99748600e-02 -2.83407830e-02 -3.56940851e-02 -7.27183819e-02
  2.41620410e-02 -4.69213538e-02  1.43693313e-02 -2.02010559e-33
  9.61004524e-04 -4.74166200e-02  4.91983257e-02 -6.38894141e-02
  2.72723958e-02  1.05709881e-02  3.00848670e-02  1.43949362e-02
 -4.56143208e-02  6.89955875e-02 -7.79298842e-02 -2.77844742e-02
  1.83111094e-02  1.28000742e-04  7.30941892e-02 -3.21545117e-02
 -5.22611737e-02 -2.77549736e-02  1.78570431e-02  5.61376736e-02
 -1.50657035e-02  1.18197083e-01  3.78960110e-02  8.85017440e-02
 -2.75478475e-02 -1.19899854e-03 -8.00463036e-02  8.72561336e-02
 -1.77168157e-02 -2.48524025e-02  2.01216359e-02 -3.37390229e-02
 -1.30172253e-01  1.19588919e-01 -5.62012307e-02 -1.10454574e-01
  4.47991192e-02  5.09447567e-02 -6.63322061e-02  1.03960343e-01
  1.09139562e-01 -6.74140826e-02 -5.87854832e-02 -4.50126082e-02
  2.97818650e-02 -1.63540076e-02  3.38865109e-02 -5.61529445e-03
 -3.06334235e-02  3.72761711e-02  3.06629110e-02 -1.69680063e-02
 -5.19783534e-02  5.25112785e-02 -3.99749866e-03  5.37454039e-02
  1.51081383e-01  2.18639448e-02  8.44479427e-02 -4.66503985e-02
  2.72991247e-02 -2.96621136e-02 -2.13072635e-03  3.66617106e-02
 -4.55039740e-03 -3.29891928e-02  3.36216204e-02 -2.93193106e-02
  6.28551841e-02  4.28418778e-02 -2.96969172e-02  3.95653397e-02
  4.00764868e-02 -6.39409870e-02  5.46924323e-02 -5.60571963e-04
 -4.99464339e-03 -1.98761206e-02  5.64293116e-02 -6.74235262e-03
 -9.80286673e-02  2.93713878e-03  8.19677040e-02  1.23551453e-03
  5.03294356e-03 -2.47787759e-02  4.89917099e-02 -9.20184925e-02
 -6.74436390e-02  8.07835013e-02 -1.20767288e-01 -5.12386188e-02
  4.05500829e-02 -1.03742685e-02  3.83272558e-03 -5.31549205e-08
 -3.79456133e-02 -4.78804298e-02  4.75661689e-03  7.35646635e-02
  3.98125453e-03 -1.12920769e-01 -4.94299047e-02 -8.34449101e-03
 -1.03411125e-02 -2.18497217e-02  2.71618981e-02  8.06043223e-02
  3.60064907e-03  1.05250012e-02 -4.61355522e-02 -1.96200609e-02
  2.58761086e-02 -8.46577063e-02 -4.62003984e-02 -2.83139907e-02
 -4.87293676e-02 -2.50342544e-02 -2.59616356e-02  5.29913558e-03
  4.88849729e-02 -2.17675064e-02  3.11371386e-02  1.37169570e-01
  8.55694264e-02  1.64341107e-02  6.22499473e-02  3.04728206e-02
  8.85933358e-03 -4.21083495e-02  1.89053193e-02 -6.51915744e-03
  3.80441397e-02  6.30984306e-02  1.70149598e-02  2.06878651e-02
  9.73845273e-03  6.06423095e-02 -7.08290860e-02 -6.61702268e-03
  6.19798079e-02 -2.24027503e-02 -6.11795299e-02 -5.13812341e-02
  1.11521490e-01 -2.19986830e-02 -2.33574063e-02 -6.00501299e-02
  3.61957774e-03  1.33793745e-02 -3.31073962e-02 -1.17327318e-01
 -3.67172994e-02  5.33727743e-02 -2.65499000e-02  3.68619226e-02
  4.61354777e-02  5.71231265e-03 -4.07507829e-02 -4.29692045e-02]"
"// 4. Token Program
    let token_program = next_account_info(accounts_iter)?;

    // Parsing the token transfer amount from instruction data
    // a. Getting the 0th to 8th index of the u8 byte array
    // b. Converting the obtained non zero u8 to a proper u8 (as little endian integers)
    // c. Converting the little endian integers to a u64 number
    let token_transfer_amount = instruction_data
        .get(..8)
        .and_then(|slice| slice.try_into().ok())
        .map(u64::from_le_bytes)
        .ok_or(ProgramError::InvalidAccountData)?;

    msg!(
        ""Transferring {} tokens from {} to {}"",
        token_transfer_amount,
        source_token_account.key.to_string(),
        destination_token_account.key.to_string()
    );

    // Creating a new TransactionInstruction
    /*
        Internal representation of the instruction's return value (Result<Instruction, ProgramError>)

        Ok(Instruction {
            program_id: *token_program_id, // PASSED FROM USER
            accounts,
            data,
        })
    */

    let transfer_tokens_instruction = transfer(
        &token_program.key,
        &source_token_account.key,
        &destination_token_account.key,
        &source_token_account_holder.key,
        &[&source_token_account_holder.key],
        token_transfer_amount,
    )?;

    let required_accounts_for_transfer = [
        source_token_account.clone(),
        destination_token_account.clone(),
        source_token_account_holder.clone(),
    ];

    // Passing the TransactionInstruction to send
    invoke(
        &transfer_tokens_instruction,
        &required_accounts_for_transfer,
    )?;

    msg!(""Transfer successful"");

    Ok(())
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889let token_transfer_amount = instruction_data
    .get(..8)
    .and_then(|slice| slice.try_into().ok())
    .map(u64::from_le_bytes)
    .ok_or(ProgramError::InvalidAccountData)?;

let transfer_tokens_instruction = transfer(
    &token_program.key,
    &source_token_account.key,
    &destination_token_account.key,
    &source_token_account_holder.key,
    &[&source_token_account_holder.key],
    token_transfer_amount,
)?;

let required_accounts_for_transfer = [
    source_token_account.clone(),
    destination_token_account.clone(),
    source_token_account_holder.clone(),
];

invoke(
    &transfer_tokens_instruction,
    &required_accounts_for_transfer,
)?;

1234567891011121314151617181920212223242526Chỉ thị ở phía người dùng sẽ trông giống như bên dưới. Để biết cách tạo mint và token account, vui òng tham khảo các đoạn mã bên cạnh.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";
import {
  AccountLayout,
  MintLayout,
","[ 2.18773987e-02  7.24887401e-02 -2.67649330e-02 -2.22894382e-02
 -9.59710255e-02 -5.82882576e-02  1.89167913e-02  1.02176279e-01
 -4.02640775e-02  2.42584781e-03  2.76683588e-02 -5.44058196e-02
 -2.74831112e-02 -5.12073673e-02  3.42888205e-04 -1.47076603e-02
 -5.05253486e-02  6.97559342e-02 -8.28251541e-02  5.17403707e-03
  1.20161332e-01  4.02929783e-02 -2.54590940e-02  3.41580324e-02
  3.22920159e-02 -1.00830179e-02 -2.06362419e-02 -2.63878535e-02
  5.95185235e-02 -3.67761590e-02  2.90811043e-02 -2.62536369e-02
 -1.72063690e-02  8.74361955e-03  6.14112318e-02  8.13011527e-02
  4.84912656e-02 -9.83693525e-02  5.41257523e-02 -3.69447768e-02
 -3.59093770e-02  4.18791510e-02 -4.23272811e-02  9.09508094e-02
  2.44383384e-02  5.92481345e-02 -7.18421815e-03  1.16529483e-02
  2.38359813e-02  1.22873420e-02  7.38887535e-03  5.18633984e-02
 -2.80818678e-02  1.33721149e-02 -7.82289952e-02 -5.04029021e-02
  4.76911329e-02 -2.06470080e-02  6.87643886e-02  5.81926480e-02
 -6.01565875e-02  6.84278877e-03  1.08071089e-01 -4.18014899e-02
 -3.68471295e-02 -4.78516556e-02 -1.97970159e-02 -3.69701418e-03
 -8.51832563e-04 -2.12255847e-02 -2.29335688e-02 -2.46937033e-02
 -1.30731940e-01  7.01051652e-02 -2.87988652e-02  2.40355302e-02
  1.02609163e-02  5.68610691e-02 -3.74421924e-02 -5.31579517e-02
  9.77174751e-03 -6.26146793e-02  9.61156860e-02  4.51626033e-02
  4.12797369e-03 -1.96651202e-02 -2.69853771e-02  5.76150790e-02
  8.57657790e-02  6.97307810e-02 -1.88806038e-02  2.65266304e-03
  1.36161959e-02 -2.32311841e-02  1.25037849e-01  2.24506808e-03
  2.55105179e-02 -6.24516942e-02 -4.68762890e-02  4.33692038e-02
 -2.17475705e-02  9.06266365e-03 -1.85139198e-02  1.29861413e-02
  2.38975398e-02  1.17090559e-02  1.10830344e-01  6.85044797e-03
 -4.40332666e-02 -4.99733761e-02  4.68319170e-02  7.97311589e-02
 -4.91681173e-02  5.13867987e-03  1.95448175e-02 -2.74420939e-02
 -7.58598074e-02 -1.62331201e-02 -1.00250449e-02  7.76926056e-02
  6.73768446e-02  4.91796434e-02 -5.42546660e-02  5.91583699e-02
 -1.03317298e-01 -3.80048417e-02 -2.03482267e-02  2.04980905e-33
 -8.08654577e-02  3.01252212e-02  5.46505861e-03 -1.09569933e-02
 -4.67617027e-02 -3.45640965e-02  8.32069293e-03  3.77926081e-02
 -6.88685924e-02  3.16955112e-02 -6.59708381e-02 -6.15979470e-02
  3.51069756e-02  5.97649403e-02  1.64274108e-02 -7.87135735e-02
  3.72131430e-02  2.30001640e-02  1.02416202e-01 -2.20588502e-02
  5.88965155e-02  2.49924534e-03 -5.36407642e-02 -3.80344093e-02
  4.69148792e-02  4.24114987e-02 -8.26288089e-02 -4.44112793e-02
  3.06271147e-02 -1.77515280e-02 -4.50499766e-02 -5.56252748e-02
 -3.96540314e-02 -1.84257105e-02  1.21562466e-01 -5.85637689e-02
  5.21296337e-02  5.15959598e-03 -9.69002396e-03 -5.91204055e-02
  5.07579744e-02  5.02986833e-03 -3.14379968e-02  2.73777433e-02
 -2.14623921e-02 -2.87138931e-02  1.54504990e-02 -8.34192242e-03
  7.84400403e-02 -6.54504821e-03 -2.25979313e-02  5.16135059e-02
 -2.49650981e-02 -7.88634196e-02 -1.44048622e-02 -1.20611034e-01
  3.98372933e-02  4.20619221e-03 -1.05661238e-02 -9.09548253e-04
  8.36697128e-03  8.90391544e-02  3.11846286e-02 -1.30969146e-02
 -2.56221183e-02  1.29241077e-02 -4.40906398e-02 -8.05550255e-03
 -2.23832857e-02 -3.15723717e-02 -1.16522118e-01  3.90609875e-02
  3.98920849e-02  2.97009684e-02 -7.89127275e-02 -3.53052206e-02
  1.21674165e-02 -5.26505336e-02 -4.03896980e-02 -8.46007094e-02
  3.27000171e-02 -1.55413779e-03 -8.83822963e-02 -2.07868293e-02
 -2.08599214e-03  6.82155341e-02 -7.62721756e-03 -2.00544037e-02
  2.51353011e-02  1.06528960e-02  4.42375802e-02 -1.04565412e-01
 -2.64064819e-02  2.94842571e-03 -1.74448472e-02 -4.55822253e-33
  7.10102357e-03  3.26726064e-02  3.58529091e-02  1.32261654e-02
 -7.43122920e-02 -2.71549728e-02  1.07006967e-01  2.62427479e-02
  1.02418289e-02  6.38061166e-02 -5.99708892e-02  4.17377204e-02
  1.95457879e-02 -1.54613713e-02  4.54756878e-02 -5.08741802e-03
 -1.01272590e-01  4.50281203e-02  8.72972310e-02 -1.77065991e-02
 -4.02421840e-02  7.20067620e-02  2.68758796e-02  1.64646264e-02
 -2.31539691e-03  5.59719577e-02 -1.61784366e-02  5.55064939e-02
  3.42509821e-02 -4.27855784e-03  4.16735001e-02 -6.10979237e-02
  6.75556734e-02  6.99052140e-02 -1.26427496e-02 -1.18370689e-01
  5.56641482e-02  6.17194399e-02  3.92233469e-02 -1.61734708e-02
  9.98163521e-02 -7.65056238e-02  1.86650008e-02  4.54495959e-02
  2.60261763e-02  3.16866040e-02  2.17522774e-02  4.86473367e-02
 -5.35098016e-02 -1.84270218e-02  5.32081835e-02  2.89762970e-02
 -9.75924432e-02  1.53363673e-02 -3.66407149e-02  3.32915336e-02
  1.24043040e-01 -7.32224360e-02  3.74813564e-02 -1.31401449e-01
 -3.72107774e-02 -4.94009964e-02  1.03016771e-01 -2.33283322e-02
  7.53592402e-02 -1.15004666e-02 -6.37676194e-02 -2.01978292e-02
 -7.95679316e-02 -1.23412733e-03  7.60672148e-03 -2.95436922e-02
  3.72632556e-02 -2.98366044e-02  3.39836925e-02  5.22448942e-02
 -2.56175757e-04 -9.41065699e-02 -2.82178763e-02  5.69272041e-02
 -5.79774864e-02  4.31966372e-02  3.13276462e-02  8.45401660e-02
  1.12043042e-02 -3.03708203e-02  7.09656477e-02  3.07579357e-02
 -7.08498880e-02 -2.53844149e-02 -6.24364987e-02 -1.47291506e-02
  2.91363597e-02 -2.66376953e-03 -1.85112599e-02 -5.64463036e-08
 -2.04976858e-03 -8.94192159e-02  4.43111882e-02  6.70718700e-02
  6.51972881e-03  1.74641458e-03 -7.94774443e-02 -6.92976490e-02
  1.68919761e-03 -4.51671258e-02 -8.66834968e-02  5.05317422e-03
 -6.88490719e-02 -8.76124129e-02  4.00165981e-03 -1.33140348e-02
  1.09262792e-02 -5.67982756e-02  8.31183046e-03 -6.41954988e-02
 -5.18147238e-02 -3.41798142e-02  3.66966501e-02 -4.25053947e-02
 -3.06536574e-02  1.56711396e-02  3.66791822e-02  1.39434099e-01
  2.22916026e-02 -1.59673303e-01  4.90353033e-02  5.46814641e-03
 -4.88452613e-04  1.37315458e-02 -3.03567220e-02 -6.69076806e-03
  2.62537673e-02  4.11508903e-02  3.81921865e-02 -3.28002721e-02
 -8.97130929e-03  1.45147238e-02 -3.29411738e-02  3.79440524e-02
 -1.16952532e-03 -9.01152100e-03 -4.24362272e-02  1.61712337e-02
  6.40353858e-02  2.15339381e-02 -6.81385864e-03 -1.92866661e-02
 -4.04053554e-02  8.57108980e-02 -3.65124121e-02 -4.39042598e-02
 -1.17081665e-01 -6.05207384e-02 -4.08238322e-02  7.42717385e-02
  7.17247650e-02  3.45307365e-02 -1.94373168e-02 -8.10910240e-02]"
" Token,
  TOKEN_PROGRAM_ID,
  u64,
} from ""@solana/spl-token"";

import * as BN from ""bn.js"";

// Users
const PAYER_KEYPAIR = Keypair.generate();
const RECEIVER_PUBKEY = Keypair.generate().publicKey;

// Mint and token accounts
const TOKEN_MINT_ACCOUNT = Keypair.generate();
const SOURCE_TOKEN_ACCOUNT = Keypair.generate();
const DESTINATION_TOKEN_ACCOUNT = Keypair.generate();

// Numbers
const DEFAULT_DECIMALS_COUNT = 9;
const TOKEN_TRANSFER_AMOUNT = 50 * 10 ** DEFAULT_DECIMALS_COUNT;
const TOKEN_TRANSFER_AMOUNT_BUFFER = Buffer.from(
  Uint8Array.of(...new BN(TOKEN_TRANSFER_AMOUNT).toArray(""le"", 8))
);

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""EfYK91eN3AqTwY1C34W6a33qGAtQ8HJYVhNv7cV4uMZj""
  );

  const mintDataSpace = MintLayout.span;
  const mintRentRequired = await connection.getMinimumBalanceForRentExemption(
    mintDataSpace
  );

  const tokenDataSpace = AccountLayout.span;
  const tokenRentRequired = await connection.getMinimumBalanceForRentExemption(
    tokenDataSpace
  );

  // Airdropping some SOL
  await connection.confirmTransaction(
    await connection.requestAirdrop(PAYER_KEYPAIR.publicKey, LAMPORTS_PER_SOL)
  );

  // Allocating space and rent for mint account
  const createMintAccountIx = SystemProgram.createAccount({
    fromPubkey: PAYER_KEYPAIR.publicKey,
    lamports: mintRentRequired,
    newAccountPubkey: TOKEN_MINT_ACCOUNT.publicKey,
    programId: TOKEN_PROGRAM_ID,
    space: mintDataSpace,
  });

  // Initializing mint with decimals and authority
  const initializeMintIx = Token.createInitMintInstruction(
    TOKEN_PROGRAM_ID,
    TOKEN_MINT_ACCOUNT.publicKey,
    DEFAULT_DECIMALS_COUNT,
    PAYER_KEYPAIR.publicKey, // mintAuthority
    PAYER_KEYPAIR.publicKey // freezeAuthority
  );

  // Allocating space and rent for source token account
  const createSourceTokenAccountIx = SystemProgram.createAccount({
    fromPubkey: PAYER_KEYPAIR.publicKey,
    newAccountPubkey: SOURCE_TOKEN_ACCOUNT.publicKey,
    lamports: tokenRentRequired,
    programId: TOKEN_PROGRAM_ID,
    space: tokenDataSpace,
  });

  // Initializing token account with mint and owner
  const initializeSourceTokenAccountIx = Token.createInitAccountInstruction(
    TOKEN_PROGRAM_ID,
    TOKEN_MINT_ACCOUNT.publicKey,
    SOURCE_TOKEN_ACCOUNT.publicKey,
    PAYER_KEYPAIR.publicKey
  );

  // Minting tokens to the source token account for transferring later to destination account
  const mintTokensIx = Token.createMintToInstruction(
    TOKEN_PROGRAM_ID,
    TOKEN_MINT_ACCOUNT.publicKey,
    SOURCE_TOKEN_ACCOUNT.publicKey,
    PAYER_KEYPAIR.publicKey,
    [PAYER_KEYPAIR],
    TOKEN_TRANSFER_AMOUNT
  );

  // Allocating space and rent for destination token account
  const createDestinationTokenAccountIx = SystemProgram.createAccount({
    fromPubkey: PAYER_KEYPAIR.publicKey,
    newAccountPubkey: DESTINATION_TOKEN_ACCOUNT.publicKey,
    lamports: tokenRentRequired,
    programId: TOKEN_PROGRAM_ID,
    space: tokenDataSpace,
  });

  // Initializing token account with mint and owner
  const initializeDestinationTokenAccountIx =
    Token.createInitAccountInstruction(
      TOKEN_PROGRAM_ID,
      TOKEN_MINT_ACCOUNT.publicKey,
      DESTINATION_TOKEN_ACCOUNT.publicKey,
      RECEIVER_PUBKEY
    );

  // Our program's CPI instruction (transfer)
  const transferTokensIx = new TransactionInstruction({
    programId: programId,
    data: TOKEN_TRANSFER_AMOUNT_BUFFER,
    keys: [
      {
        isSigner: false,
        isWritable: true,
        pubkey: SOURCE_TOKEN_ACCOUNT.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: DESTINATION_TOKEN_ACCOUNT.publicKey,
  ","[-5.35388663e-02  6.93010492e-03 -1.37866259e-01 -8.30716360e-03
 -9.22847688e-02 -1.33484378e-02  7.16517195e-02  1.15736142e-01
 -7.16666109e-04 -6.86473167e-03  3.91498703e-04 -8.03462714e-02
  5.10138310e-02 -6.59645200e-02  1.88080519e-02  9.48967505e-03
 -1.45936266e-01 -2.89564766e-02 -3.25909369e-02 -1.28958561e-02
  7.99615011e-02 -1.00118242e-01 -3.39411609e-02 -2.68635042e-02
  6.49894327e-02 -1.91837512e-02  3.81467044e-02 -3.12503390e-02
 -2.34470218e-02  4.64697033e-02  5.16157523e-02  3.37754115e-02
  7.59441638e-03 -2.16600280e-02  2.62780152e-02  8.24742541e-02
 -1.26109906e-02  3.84935364e-03  3.13658826e-02 -8.30979273e-02
 -2.96679642e-02  2.09483951e-02 -6.90902323e-02  1.55270072e-02
  8.07127655e-02  4.18794993e-03 -6.38990998e-02  8.01069140e-02
  2.92740646e-03 -1.43142287e-02 -8.69632699e-04  4.96952310e-02
 -2.32053790e-02  2.27604453e-02 -1.09924905e-01 -2.05017421e-02
  6.43494353e-03  1.96404830e-02  1.25378206e-01 -3.69336084e-02
 -6.24771649e-03  6.95783831e-03  5.61485998e-02 -4.20638025e-02
 -1.52752297e-02 -5.69461547e-02 -6.03431128e-02 -6.92636287e-03
  1.68512249e-03  2.68971883e-02  2.08471213e-02 -4.54652570e-02
 -2.64577474e-02  2.02101632e-03 -3.64158042e-02 -8.71400908e-02
 -1.34621477e-02  7.96157420e-02 -4.74594794e-02  1.23728104e-02
  5.86564979e-03 -4.60024476e-02  2.57795528e-02  6.37558624e-02
  3.66181582e-02  6.53050020e-02  3.67842130e-02  1.56828072e-02
 -4.89825709e-03 -2.59467121e-02 -1.62195042e-02  5.43339364e-02
 -9.82221332e-04 -5.32648519e-05  6.09306879e-02  2.44486667e-02
  3.94352376e-02  2.72147134e-02 -9.13590938e-03  9.46812481e-02
  2.23584548e-02 -1.78748965e-02 -4.12035882e-02  1.21341145e-03
  2.29290687e-02 -2.76311603e-03  1.08436592e-01  2.97856871e-02
  2.03820504e-02  4.25798178e-04 -1.54979376e-03  7.19976276e-02
 -1.20880306e-02  3.80517840e-02 -8.27955455e-03  3.83647941e-02
 -7.76454480e-03  1.91462673e-02  3.89114283e-02  6.18320182e-02
  1.31658643e-01  5.27069438e-03 -8.88771564e-02 -3.48916873e-02
 -1.23222165e-01 -8.42593890e-03  3.80800702e-02  4.72527460e-33
 -7.69281387e-02 -6.14930280e-02  1.91711299e-02 -1.69074927e-02
 -3.97796780e-02 -2.34956164e-02  4.03535254e-02  5.95292300e-02
 -7.30927810e-02 -4.62726392e-02 -9.62172598e-02 -6.20475896e-02
  7.16318889e-03  1.15535529e-02 -1.13663308e-01 -5.12955524e-02
 -9.07417666e-03  5.82390837e-02  1.25210986e-01 -2.43987869e-02
 -1.39683597e-02 -6.72934055e-02 -1.40641863e-02 -2.54606432e-03
  4.20347713e-02  4.85033467e-02 -2.47381884e-03 -1.60810743e-02
  5.39409630e-02 -1.04020787e-02  5.93313612e-02  3.35626118e-02
 -4.43307124e-02 -4.90829768e-03  2.10346300e-02 -1.62063595e-02
  6.79574162e-02  9.45947878e-03 -1.05851993e-01 -6.77025169e-02
  3.40927467e-02 -6.77040406e-03 -2.44007669e-02  3.30469646e-02
 -2.82407105e-02  4.41835783e-02  2.53816936e-02  1.56763010e-02
  4.36573587e-02  4.48709428e-02 -1.15958035e-01  3.71794216e-02
 -6.46185577e-02 -3.57836373e-02  3.92313041e-02 -7.97244310e-02
  1.58784408e-02  3.02615054e-02 -2.11914945e-02 -3.82806286e-02
 -4.30747271e-02  2.98476722e-02  4.78634238e-02 -3.30805853e-02
  2.58557629e-02  4.36917581e-02 -7.29140118e-02 -1.98549908e-02
  4.90213232e-03  8.70496873e-03 -6.63616955e-02  6.49813116e-02
  6.76276349e-03  4.55135182e-02 -5.94665445e-02 -1.15488162e-02
  5.27731925e-02  2.37710550e-02 -9.00309607e-02 -5.46057038e-02
  2.44334154e-02 -6.31230231e-03 -1.17212996e-01  3.15449350e-02
  3.64237092e-02  5.83095476e-02 -5.09149097e-02 -4.67451066e-02
 -3.39705013e-02 -1.98955499e-02  5.15283085e-02 -8.78644660e-02
 -2.38340553e-02 -3.92169431e-02 -1.22212283e-01 -5.52342094e-33
 -1.13954465e-03  2.89453082e-02 -1.19604161e-02  2.94953529e-02
 -2.50136554e-02  5.15630804e-02  2.98491605e-02  3.84207536e-03
  6.74123038e-03  1.20615304e-01 -2.64762864e-02  1.43650277e-02
  5.93392141e-02  9.70009156e-03  1.92907508e-02  1.73891652e-02
 -5.02178632e-03  4.71781269e-02  2.36283871e-03 -4.09413353e-02
 -5.32652996e-02  1.06242836e-01  4.67587588e-03  2.88342796e-02
 -7.01990575e-02  5.44353761e-02 -5.77772185e-02  7.55070373e-02
 -5.21786846e-02  6.35180762e-03  6.93126470e-02 -1.73425414e-02
 -6.75687715e-02  5.31638376e-02 -3.48301381e-02 -1.21168010e-01
  7.39024505e-02  6.50075600e-02  2.71496996e-02  2.60640495e-02
  4.82430160e-02 -8.63513723e-02  1.19808204e-02  3.12941596e-02
  5.62603585e-02 -2.76835486e-02  6.99960291e-02  2.40373258e-02
 -6.01164810e-02  6.48792554e-03  7.58040771e-02 -3.06321252e-02
 -9.09816697e-02 -2.83482224e-02 -1.74309332e-02  2.76449881e-02
  9.23970863e-02 -1.96801797e-02  5.08830063e-02 -7.68394247e-02
 -4.66261758e-03 -6.93017021e-02  6.61816373e-02  3.37332338e-02
  7.24137574e-02 -8.10101330e-02 -3.56420316e-02  9.02360752e-02
  1.77806951e-02  1.32510662e-02 -3.79679427e-02  4.14435193e-02
  9.24755037e-02  3.84035707e-02  1.12035107e-02  2.10540928e-02
 -1.55769596e-02 -6.05725572e-02  2.16240045e-02  3.43489982e-02
 -4.94549051e-02  3.99413817e-02  7.73392543e-02  2.48292405e-02
 -3.52282338e-02 -1.18448809e-02  8.01239684e-02  1.81112997e-02
 -2.04283502e-02  3.66552398e-02 -5.05151451e-02  3.26361395e-02
  2.25403011e-02 -9.17643029e-03  2.79140975e-02 -5.70300145e-08
  3.97476926e-03 -3.87940928e-02 -5.70730753e-02  4.26032208e-02
 -1.40486506e-03  2.15110574e-02 -8.56945589e-02 -6.32882863e-02
 -9.52483248e-03 -7.08685070e-02 -9.49714780e-02 -7.88109656e-03
 -5.80453500e-02  3.08302260e-05 -4.65672091e-02 -6.01835586e-02
 -9.21947695e-03 -1.13352183e-02 -1.43035557e-02 -7.08258450e-02
  4.06558923e-02 -3.91005017e-02  2.59702131e-02  5.37933130e-03
  5.05637862e-02 -7.54720569e-02  7.21810609e-02  1.34508103e-01
  3.03485077e-02 -1.23596452e-01 -6.58486709e-02  2.42518764e-02
  2.07464378e-02 -2.33461224e-02 -1.84681322e-02 -2.03119647e-02
  1.44044636e-02  1.05952751e-02  4.32603508e-02  4.24942449e-02
 -2.89796796e-02 -7.71378214e-03 -8.38095248e-02 -1.62131581e-02
 -3.51867080e-02  1.60936378e-02 -4.09947224e-02  6.06971756e-02
  6.58389181e-02  5.12515893e-04 -2.25923061e-02 -5.28611876e-02
  3.72454524e-02  1.95250027e-02 -1.73484366e-02 -4.95457016e-02
 -1.26727089e-01  1.56153347e-02  7.35236257e-02  2.78330278e-02
  3.96045186e-02  8.72217938e-02 -7.73624331e-02 -3.59516293e-02]"
"   },
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: TOKEN_PROGRAM_ID,
      },
    ],
  });

  const transaction = new Transaction();
  // Adding up all the above instructions
  transaction.add(
    createMintAccountIx,
    initializeMintIx,
    createSourceTokenAccountIx,
    initializeSourceTokenAccountIx,
    mintTokensIx,
    createDestinationTokenAccountIx,
    initializeDestinationTokenAccountIx,
    transferTokensIx
  );

  const txHash = await connection.sendTransaction(transaction, [
    PAYER_KEYPAIR,
    TOKEN_MINT_ACCOUNT,
    SOURCE_TOKEN_ACCOUNT,
    DESTINATION_TOKEN_ACCOUNT,
  ]);

  console.log(`Token transfer CPI success: ${txHash}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""EfYK91eN3AqTwY1C34W6a33qGAtQ8HJYVhNv7cV4uMZj""
  );

  const transferTokensIx = new TransactionInstruction({
    programId: programId,
    data: TOKEN_TRANSFER_AMOUNT_BUFFER,
    keys: [
      {
        isSigner: false,
        isWritable: true,
        pubkey: SOURCE_TOKEN_ACCOUNT.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: DESTINATION_TOKEN_ACCOUNT.publicKey,
      },
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: TOKEN_PROGRAM_ID,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(transferTokensIx);

  const txHash = await connection.sendTransaction(transaction, [
    PAYER_KEYPAIR,
    TOKEN_MINT_ACCOUNT,
    SOURCE_TOKEN_ACCOUNT,
    DESTINATION_TOKEN_ACCOUNT,
  ]);

  console.log(`Token transfer CPI success: ${txHash}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445Bây giờ hãy thử cùng nhau xem qua một ví dụ khác với chỉ thị create_account của System Program. Lần này, chúng ta không cần phải truyền token_program như là một account trong hàm invoke. Ngoài ra, bạn vẫn cần phải truyền program_id trong câu chỉ thị dẫn và trong trường hợp này program_id sẽ là địa chỉ System Program, (""11111111111111111111111111111111""). Các account truyền vào sẽ là:Account chịu phí để trả phí thuêAccount để được tạoAccount cho System ProgramRustPress </> button to view full sourceuse solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
 ","[-7.78831914e-02  8.13360093e-04 -8.00517872e-02  9.51803010e-03
 -2.66266894e-02  7.12675462e-03  6.77236095e-02  7.09033981e-02
  2.01802012e-02  8.02656934e-02  3.88109349e-02 -9.81182158e-02
  2.22975072e-02 -3.08518531e-03 -1.93473995e-02 -5.63917309e-03
 -4.04337309e-02 -4.99683507e-02  1.13463739e-03 -2.86224298e-03
  1.47206970e-02 -1.21356860e-01 -2.06090091e-03 -3.64363976e-02
  5.61482571e-02 -1.53381396e-02 -1.07735293e-02 -5.61948717e-02
 -7.24763330e-03  3.88236381e-02  3.46846804e-02  4.68658423e-03
 -5.72867058e-02 -2.08766889e-02  6.04651030e-03  1.25764549e-01
  2.71164794e-02 -2.76751146e-02  5.54941334e-02 -7.40904212e-02
  1.84846241e-02 -2.55989693e-02 -8.97914991e-02  8.54206178e-03
  6.72936738e-02  1.69238299e-02  3.23764756e-02  4.12076786e-02
 -4.61048773e-03 -3.79462508e-05 -5.06946957e-03  2.65182685e-02
  5.86305605e-03  7.52849802e-02 -1.11710109e-01  6.26684204e-02
  7.26735592e-02  1.96943246e-02  8.77486765e-02 -4.17151451e-02
  2.53075012e-03 -1.87162124e-02  4.73869257e-02 -4.88917120e-02
 -2.75489073e-02  1.30992187e-02 -3.59188020e-02 -2.44398452e-02
 -1.91395227e-02 -1.18214330e-02  6.10652193e-02  3.05045187e-03
 -1.11758590e-01 -1.02292225e-02 -2.34583393e-02 -3.42069566e-02
  1.78508405e-02  8.18016306e-02 -5.20934500e-02  1.11947590e-02
 -2.15269695e-03 -1.30200926e-02  9.31121483e-02 -2.68116314e-03
 -3.13075114e-04  3.09626088e-02 -2.01532599e-02 -4.92380292e-04
 -9.65510402e-03 -2.44696364e-02 -2.05307174e-03  1.00755021e-01
 -4.03178148e-02 -3.70389782e-02  9.73527133e-02  5.98242553e-03
 -1.01797013e-02  6.03419058e-02 -2.99157738e-03  5.02907000e-02
  3.40040736e-02 -3.35887000e-02 -4.54867892e-02  1.95882227e-02
  4.51065600e-02  8.75740312e-03  8.15537125e-02 -5.75821176e-02
 -2.39442028e-02  4.60374868e-03 -1.45484293e-02  9.16390121e-02
 -2.04813182e-02  2.87679229e-02 -2.08025333e-02  1.29370287e-01
 -6.43105432e-02  5.55447638e-02  1.15219494e-02  1.50799211e-02
  6.35081828e-02 -1.37503343e-02 -6.69069812e-02  4.28107986e-03
 -6.82925358e-02 -6.36697635e-02  4.29515578e-02  7.83116394e-33
 -9.51068923e-02  6.26581674e-03  3.99047183e-03 -2.62279958e-02
  1.34225804e-02 -1.68357994e-02  8.96184221e-02  1.85282417e-02
 -3.72785367e-02 -5.82297444e-02 -1.03763804e-01 -8.32692906e-02
 -3.15794647e-02  4.28327620e-02 -8.53533074e-02 -4.61866558e-02
 -1.45860612e-02  3.75591740e-02  1.83689773e-01  2.15936769e-02
  3.62175964e-02 -4.53778878e-02  1.07679740e-02  9.47522873e-04
 -5.43572158e-02  4.18974869e-02 -6.37718141e-02 -6.76406473e-02
  3.43733914e-02 -7.74046127e-03  3.11979856e-02  7.20803393e-03
 -1.20228780e-02  1.88635383e-02 -1.28043648e-02 -4.21825722e-02
 -2.11181715e-02 -1.02433469e-03 -7.46953934e-02 -8.62754509e-02
  3.57630886e-02 -6.61860174e-03 -6.86501265e-02  3.04536466e-02
 -4.17272672e-02  1.36645986e-02  2.10284702e-02 -8.02753791e-02
  1.07213981e-01  3.06548532e-02 -5.23763672e-02 -2.03312822e-02
  7.63123529e-03 -1.18727110e-01  4.93032895e-02 -4.40175571e-02
 -3.54426191e-03 -4.14535031e-03 -4.76582237e-02 -3.20979916e-02
 -1.62169896e-02 -2.25131642e-02  5.65868896e-03 -3.68014947e-02
  6.07013851e-02  2.76324339e-02 -7.70126656e-02 -1.64565560e-03
  1.57676581e-02 -4.63035889e-02 -8.93032327e-02  4.36427481e-02
 -2.27800626e-02  8.40946212e-02 -2.32331492e-02  1.92814246e-02
  1.79832650e-03 -6.44968310e-03 -5.07483631e-02 -9.20972675e-02
 -5.66784851e-02  5.49836159e-02 -6.44921660e-02  1.34733012e-02
  1.22585485e-03  9.06067193e-02 -5.35488054e-02 -4.33062389e-03
  2.81305443e-02  1.01697370e-02  7.88351968e-02 -5.05108088e-02
 -2.35624742e-02  3.14001441e-02 -4.61713001e-02 -9.08896273e-33
  8.93280189e-03 -1.68629717e-02 -5.20778783e-02  3.50303426e-02
 -7.98658058e-02  5.80825582e-02 -1.00549888e-02  5.91648370e-03
  2.83090957e-02  6.54765517e-02 -1.17094284e-02  2.49379817e-02
 -3.48022059e-02  2.41393726e-02 -1.27981165e-02 -4.86141331e-02
  5.03569329e-03  6.68216273e-02  9.07390751e-03 -1.48436539e-02
 -5.81797492e-03  7.84762576e-02 -3.96029763e-02  4.43303809e-02
 -7.01112449e-02  4.38905209e-02 -6.67771623e-02  8.27454776e-02
  1.06297266e-02  1.12911183e-02  5.27325645e-02 -5.97449671e-03
 -1.51550882e-02  8.75837132e-02  6.36270642e-02 -8.32523927e-02
  4.26890217e-02  4.98411544e-02  2.70053744e-04  7.31307566e-02
  3.79992500e-02 -8.10975805e-02 -1.51997218e-02  3.62690762e-02
  6.41548038e-02 -4.12658118e-02  2.35657059e-02 -4.96922806e-02
 -4.28586965e-03  8.18561167e-02  8.94359965e-03 -8.85442074e-04
 -4.82870750e-02  1.30820032e-02 -2.62461533e-03  2.18376610e-02
  1.29352793e-01 -4.16436642e-02  4.31004763e-02 -9.24070776e-02
  3.76884229e-02 -5.48967198e-02  7.02824518e-02  3.29706557e-02
  1.08470626e-01 -7.36304224e-02 -1.12987449e-02  5.39510138e-02
  6.08262010e-02  9.39672440e-02 -1.79925878e-02  3.15959901e-02
  1.08042201e-02  4.31823923e-04  8.72538388e-02  1.90643966e-02
  3.36838700e-02 -8.63344520e-02 -2.11370606e-02  5.39508928e-03
 -3.32491435e-02 -8.04460701e-03  1.91983543e-02 -2.41941661e-02
  1.08239269e-02 -9.04572848e-03  9.59193036e-02  1.99895650e-02
 -1.90501027e-02 -2.20246334e-02 -3.16842981e-02 -6.44122064e-02
  2.76893545e-02 -6.81257248e-02 -2.24113967e-02 -6.43787956e-08
 -8.59819353e-03  2.00498616e-03 -8.08497667e-02  2.85594575e-02
  3.86139937e-02  3.07464693e-02 -6.70990646e-02 -9.30077210e-02
 -5.06108701e-02 -7.65408203e-02 -1.30780756e-01  2.87430547e-02
 -1.78003944e-02 -6.85978830e-02 -2.66103391e-02 -5.53044900e-02
 -3.40379253e-02 -4.09059599e-02 -1.87012565e-03 -6.42301887e-02
 -3.54314037e-02 -2.44589336e-02 -1.46425292e-02 -5.64704090e-02
  2.83239521e-02 -4.61589843e-02  1.32938981e-01  1.35483593e-01
  1.17278863e-02 -4.12928499e-02 -6.48977682e-02  2.05309391e-02
  2.79776864e-02 -2.45243665e-02 -4.41032238e-02  1.87077671e-02
  9.07000005e-02  1.50501705e-03  5.80045581e-02 -2.50720792e-02
  1.39397103e-02  7.03835711e-02 -8.97376314e-02 -3.04489862e-02
 -1.28999157e-02  1.11494362e-01 -2.67912131e-02  4.34849598e-02
  8.82129744e-03  2.89365966e-02 -3.14455591e-02 -4.03282382e-02
 -2.69270241e-02  6.45598248e-02 -2.85816658e-02 -4.06642109e-02
 -9.81791988e-02  1.70941949e-02  7.29740486e-02 -6.31182734e-03
  8.73556435e-02  3.33579555e-02 -2.16554664e-02 -1.10039301e-01]"
"  msg,
    program::invoke,
    program_error::ProgramError,
    pubkey::Pubkey,
    rent::Rent,
    system_instruction::create_account,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

// Accounts required
/// 1. [signer, writable] Payer Account
/// 2. [signer, writable] General State Account
/// 3. [] System Program
pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();

    // Accounts required for token transfer

    // 1. Payer account for the state account creation
    let payer_account = next_account_info(accounts_iter)?;
    // 2. Token account we hold
    let general_state_account = next_account_info(accounts_iter)?;
    // 3. System Program
    let system_program = next_account_info(accounts_iter)?;

    msg!(
        ""Creating account for {}"",
        general_state_account.key.to_string()
    );

    // Parsing the token transfer amount from instruction data
    // a. Getting the 0th to 8th index of the u8 byte array
    // b. Converting the obtained non zero u8 to a proper u8 (as little endian integers)
    // c. Converting the little endian integers to a u64 number
    let account_span = instruction_data
        .get(..8)
        .and_then(|slice| slice.try_into().ok())
        .map(u64::from_le_bytes)
        .ok_or(ProgramError::InvalidAccountData)?;

    let lamports_required = (Rent::get()?).minimum_balance(account_span as usize);

    // Creating a new TransactionInstruction
    /*
        Internal representation of the instruction's return value (Instruction)

        Instruction::new_with_bincode(
            system_program::id(), // NOT PASSED FROM USER
            &SystemInstruction::CreateAccount {
                lamports,
                space,
                owner: *owner,
            },
            account_metas,
        )
    */

    let create_account_instruction = create_account(
        &payer_account.key,
        &general_state_account.key,
        lamports_required,
        account_span,
        program_id,
    );

    let required_accounts_for_create = [
        payer_account.clone(),
        general_state_account.clone(),
        system_program.clone(),
    ];

    // Passing the TransactionInstruction to send","[-3.64947952e-02 -3.45433992e-03 -7.47248456e-02 -5.46482503e-02
 -3.95177491e-02 -2.44991537e-02  7.23694861e-02  9.49842557e-02
  4.99008805e-04  7.30565041e-02  1.33794332e-02 -6.60617426e-02
  4.14346755e-02 -4.20693075e-03  5.19216210e-02  5.90805709e-03
 -7.86381587e-02 -9.71678365e-03  5.51577061e-02  8.35713185e-03
  6.91611022e-02  8.96615908e-03 -5.04927933e-02  2.50460599e-02
  3.00891474e-02 -8.83906484e-02 -9.59696248e-03  2.18858439e-02
 -7.81675987e-03 -2.04956550e-02  8.60968381e-02 -6.75993264e-02
 -9.06835496e-03 -1.13121262e-02  1.05028220e-01  1.28372610e-01
  5.07159829e-02 -8.92926008e-02  5.74992038e-03 -8.68413895e-02
 -7.87952635e-03 -8.78595840e-03 -4.59490456e-02 -2.04910096e-02
  1.40480883e-02  6.15452155e-02  6.14023395e-03  2.29866207e-02
 -8.27202387e-03  1.40120275e-02 -2.39156932e-02 -2.56009912e-03
 -1.48779126e-02 -1.26931993e-02 -6.29500970e-02  1.79221239e-02
  7.13346824e-02 -1.33186309e-02  2.50698850e-02 -1.19825816e-02
 -1.29418848e-02  2.33632233e-02 -1.35686696e-02 -9.50190891e-03
 -1.51209617e-02  4.86926287e-02 -5.98697960e-02  8.05311836e-03
 -1.84350107e-02 -2.42147446e-02 -2.35643536e-02 -2.32294351e-02
 -1.16204113e-01 -4.19890471e-02 -3.66165750e-02 -2.30823867e-02
 -1.53785376e-02  8.31006318e-02 -1.57446433e-02 -1.10841699e-01
 -2.94286106e-02  1.24700544e-02  2.14142613e-02  4.99712341e-02
 -7.97544513e-03  1.77140385e-02 -1.26724551e-02 -7.51530975e-02
  9.96433273e-02  8.23890641e-02  1.60108414e-02  3.99013087e-02
  8.08197912e-03 -9.48648527e-03  1.71668679e-01  1.17882770e-02
  2.53086910e-02  7.52871332e-04 -1.16221365e-02  5.86555563e-02
 -4.98735681e-02  8.16690549e-03  5.73165640e-02  2.83778226e-03
  6.11655004e-02  3.10323182e-02  6.23955317e-02 -6.53643236e-02
 -2.64389422e-02 -6.75423369e-02 -2.42767204e-02  7.51417652e-02
  2.41562426e-02  3.49195511e-03  4.04371060e-02  6.86761662e-02
 -6.06162585e-02  1.36500895e-02  4.71806973e-02  5.21340556e-02
  5.53699173e-02  8.80514272e-03 -7.80810416e-02 -4.10397304e-03
 -6.74777552e-02 -4.15427648e-02  2.70216521e-02  3.12963175e-33
 -8.00723657e-02 -3.07658799e-02 -5.80156920e-03  3.96970734e-02
  1.65317971e-02  1.86905693e-02  5.33241890e-02  3.27517800e-02
 -7.83884749e-02  2.62828451e-02 -5.44044247e-04 -1.12429515e-01
  1.04124788e-02 -2.00123005e-02  8.54474586e-03 -6.12689927e-02
  5.86377792e-02  4.00509946e-02  8.39626193e-02  4.42340448e-02
  6.12769276e-02 -4.70214902e-04 -1.14083178e-02 -7.02600405e-02
  1.82280485e-02  3.64617817e-02 -3.99970487e-02  1.05613647e-02
  1.19917681e-02 -2.07880419e-02  4.81549017e-02 -3.39375176e-02
 -1.25532122e-02  1.88085549e-02  5.35555407e-02 -6.31094649e-02
  5.74153513e-02  2.65519768e-02 -5.70666380e-02 -7.13726282e-02
  9.24782455e-02 -2.47463100e-02 -9.84215923e-03  2.80347466e-02
 -2.37791073e-02 -3.07173841e-02 -3.28217447e-03 -1.55559350e-02
  5.01710847e-02  1.07555978e-01 -2.06112824e-02  1.23761455e-02
 -1.22654364e-01 -6.86685443e-02  8.11456796e-03 -5.80008663e-02
 -4.22236621e-02 -2.47298647e-02 -3.33985575e-02 -7.61501119e-02
 -1.69678219e-02  3.46314572e-02  4.01973054e-02 -2.06161514e-02
 -2.24250853e-02 -7.06702471e-02 -3.87266688e-02 -2.92065013e-02
  9.88146514e-02 -1.68959312e-02 -5.51185608e-02  3.13063450e-02
  1.08247166e-02  1.96012091e-02 -2.66132839e-02 -3.95310372e-02
 -1.70327851e-03 -2.22964641e-02 -6.05227128e-02 -1.16377696e-02
  5.55799855e-03 -3.25838961e-02 -1.39294073e-01  2.24446617e-02
 -2.31390297e-02  6.37880340e-02  9.95373819e-03 -1.15578286e-02
 -1.21205319e-02 -1.92595720e-02  6.93220720e-02 -8.78837630e-02
 -2.51000319e-02  5.46727888e-03 -6.89420551e-02 -6.02109145e-33
  3.74703705e-02 -8.96103382e-02 -9.39206779e-03 -4.88447733e-02
 -3.90258543e-02  1.06363576e-02  4.26071249e-02 -8.31929222e-02
 -1.03440471e-02  7.97790959e-02 -1.10213883e-01  1.35173602e-02
  4.64882515e-02  2.37407293e-02  4.56225201e-02  3.80224623e-02
 -4.95221652e-02 -4.49169381e-03  2.60998216e-02  1.62918251e-02
 -8.38566944e-03  1.45782605e-01  2.58340165e-02  7.94626102e-02
 -1.09024448e-02  1.25242891e-02 -5.12143262e-02  1.13464259e-01
  2.97712758e-02  3.82574685e-02  2.69158240e-02 -1.33914286e-02
 -5.52831367e-02  1.02139235e-01 -1.53666269e-02 -1.28734514e-01
  5.84814623e-02  6.94100559e-02 -3.64665464e-02  1.50576774e-02
  1.65404469e-01 -6.94731474e-02 -2.26629861e-02 -1.80933196e-02
  6.77544251e-02  3.21595818e-02  9.59280580e-02 -3.47844996e-02
 -4.93097119e-02  6.40058219e-02  1.44051174e-02 -5.71421459e-02
 -2.66239829e-02 -1.36943767e-03 -3.14478464e-02  1.31369857e-02
  1.87197641e-01 -3.10866050e-02  2.42841914e-02 -7.47985765e-02
  4.37962003e-02 -4.96100150e-02  6.21153601e-02  2.36562919e-02
  4.70196381e-02 -4.53978069e-02 -3.84038165e-02  1.09046269e-02
  6.95212185e-02  1.58981644e-02 -5.02681248e-02 -2.13204809e-02
  3.19035538e-02 -4.11335416e-02  6.18803389e-02  8.27503875e-02
  1.78373121e-02 -5.03510348e-02 -3.76720540e-02  2.17107181e-02
 -6.70681298e-02  3.24279442e-02 -1.68030849e-03  2.09703110e-02
 -4.16070670e-02 -4.40047793e-02  7.41200224e-02  7.80410506e-03
 -3.75201181e-02 -2.72771362e-02 -3.22633423e-02  2.10114140e-02
  5.42809293e-02 -3.68016474e-02 -2.16373540e-02 -5.78126418e-08
 -4.33350876e-02 -5.27625270e-02  2.82630092e-03  7.82345310e-02
  1.04565555e-02 -8.33963677e-02 -1.47352749e-02 -3.64738144e-02
 -6.64451346e-02 -6.37834072e-02 -1.12990856e-01  3.02973390e-02
 -7.68111693e-03 -6.23861514e-02 -7.49601889e-03 -7.22600445e-02
 -6.87628519e-03 -1.21668596e-02 -3.08701247e-02 -7.09837526e-02
 -2.72916239e-02 -1.20518580e-02 -1.45647340e-02 -1.67082418e-02
 -6.36638328e-02 -3.49642858e-02  7.29846358e-02  9.05190259e-02
  6.31317273e-02 -2.32010260e-02  5.56929931e-02  4.32062373e-02
 -1.29235769e-02 -4.21721116e-02 -5.99362813e-02  7.03549990e-03
  5.84064946e-02  3.06678005e-02  4.27988432e-02 -1.64225046e-02
 -4.27096300e-02  5.58556691e-02 -8.69227853e-03 -1.24929985e-02
 -4.72715162e-02  5.58353104e-02 -5.52575924e-02 -2.01387461e-02
  8.71570259e-02 -5.65316789e-02 -8.47529843e-02 -2.73965579e-03
 -2.39228811e-02  9.69810113e-02 -1.98222287e-02 -1.23646930e-02
 -1.97741892e-02 -3.99499536e-02 -4.81422059e-03  4.48878929e-02
  3.12457532e-02  5.19230589e-02 -3.98149043e-02 -7.17375353e-02]"
"(with the issused program_id)
    invoke(&create_account_instruction, &required_accounts_for_create)?;

    msg!(""Transfer successful"");

    Ok(())
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788let account_span = instruction_data
    .get(..8)
    .and_then(|slice| slice.try_into().ok())
    .map(u64::from_le_bytes)
    .ok_or(ProgramError::InvalidAccountData)?;

let lamports_required = (Rent::get()?).minimum_balance(account_span as usize);

let create_account_instruction = create_account(
    &payer_account.key,
    &general_state_account.key,
    lamports_required,
    account_span,
    program_id,
);

let required_accounts_for_create = [
    payer_account.clone(),
    general_state_account.clone(),
    system_program.clone(),
];

invoke(&create_account_instruction, &required_accounts_for_create)?;
1234567891011121314151617181920212223Tương tự code ở phía người dùng sẽ giống như sau:TSPress </> button to view full sourceimport { clusterApiUrl, Connection, Keypair } from ""@solana/web3.js"";
import { LAMPORTS_PER_SOL, PublicKey, SystemProgram } from ""@solana/web3.js"";
import { Transaction, TransactionInstruction } from ""@solana/web3.js"";

import * as BN from ""bn.js"";

// Users
const PAYER_KEYPAIR = Keypair.generate();
const GENERAL_STATE_KEYPAIR = Keypair.generate();

const ACCOUNT_SPACE_BUFFER = Buffer.from(
  Uint8Array.of(...new BN(100).toArray(""le"", 8))
);

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""DkuQ5wsndkzXfgqDB6Lgf4sDjBi4gkLSak1dM5Mn2RuQ""
  );

  // Airdropping some SOL
  await connection.confirmTransaction(
    await connection.requestAirdrop(PAYER_KEYPAIR.publicKey, LAMPORTS_PER_SOL)
  );

  // Our program's CPI instruction (create_account)
  const createAccountIx = new TransactionInstruction({
    programId: programId,
    data: ACCOUNT_SPACE_BUFFER,
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: true,
        isWritable: true,
        pubkey: GENERAL_STATE_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: SystemProgram.programId,
      },
    ],
  });

  const transaction = new Transaction();
  // Adding up all the above instructions
  transaction.add(createAccountIx);

  const txHash = await connection.sendTransaction(transaction, [
    PAYER_KEYPAIR,
    GENERAL_STATE_KEYPAIR,
  ]);

  console.log(`Create Account CPI Success: ${txHash}`);
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""DkuQ5wsndkzXfgqDB6Lgf4sDjBi4gkLSak1dM5Mn2RuQ""
  );

  // Airdropping some SOL
  await connection.confirmTransaction(
    await connection.requestAirdrop(PAYER_KEYPAIR.publicKey, LAMPORTS_PER_SOL)
  );

  // Our program's CPI instruction (create_account)
  const creataAccountIx = new TransactionInstruction({
    programId: programId,
    data: ACCOUNT_SPACE_BUFFER,
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: true,
        isWritable: true,
        pubkey: GENERAL_STATE_KEYPAIR.publicKey,
      },
   ","[-1.48435030e-02  3.35337333e-02 -8.07371661e-02 -1.84922908e-02
 -7.76859298e-02 -4.88730557e-02  4.31427509e-02  6.90470338e-02
 -7.19062239e-02  3.56699266e-02  6.43730611e-02 -8.65828544e-02
  7.19911158e-02 -5.61025701e-02 -3.18434946e-02  3.28972414e-02
 -4.16201875e-02 -3.08077484e-02 -1.55093577e-02 -1.03545617e-02
  1.14604436e-01 -2.62818411e-02  1.16398875e-02 -5.09304460e-04
  8.79351497e-02 -4.42631394e-02 -2.30285134e-02  1.66671816e-02
  3.82192656e-02 -5.07165305e-02  6.55172244e-02 -1.83703136e-02
 -2.91221291e-02  2.19893325e-02  1.23006061e-01  9.57429782e-02
  1.18547892e-02 -9.60345194e-02 -7.90170673e-03 -4.52638865e-02
 -3.12225632e-02  3.33951637e-02 -3.65491994e-02  5.40860631e-02
 -6.14342690e-02  3.43724042e-02 -2.73394901e-02  3.25472131e-02
  4.68205325e-02 -3.56079615e-03 -2.84989309e-02  4.00719233e-03
 -1.41107785e-02  3.35551463e-02 -2.85434863e-03  5.85665368e-03
  8.63625929e-02 -5.55358119e-02 -1.85656883e-02  1.71703380e-02
 -4.77807671e-02  6.07452616e-02  4.10409048e-02 -1.34726372e-02
 -2.85067912e-02  2.39319783e-02 -4.45341170e-02  1.31228194e-02
 -5.96981421e-02 -2.44591007e-04 -3.00835278e-02 -2.34060995e-02
 -1.34433359e-01  7.51931742e-02 -3.92983593e-02 -1.36351818e-02
 -1.39155490e-02  6.24782667e-02 -4.29506898e-02 -8.38252455e-02
 -9.45329517e-02 -3.19049172e-02 -1.33112613e-02  8.31164718e-02
  8.47288407e-03  6.82072574e-03  1.53565649e-02  6.36041490e-03
  6.57474324e-02  4.18301150e-02  5.22856340e-02  6.25275299e-02
  1.51249319e-02  8.72325967e-04  1.00570552e-01  3.43267694e-02
  2.13134419e-02 -3.79006825e-02 -5.35664856e-02  4.00304981e-02
 -3.45003977e-02 -2.65553221e-02  6.01036251e-02  2.76944563e-02
  9.85255651e-03 -3.18658575e-02  1.01743065e-01 -4.47296873e-02
 -9.16028097e-02 -8.41116719e-03  2.93279700e-02  6.03696518e-02
  1.86118670e-02  2.03204677e-02  4.49331142e-02  3.76290008e-02
 -7.80329183e-02  6.75026421e-03 -1.52029283e-02  5.17010465e-02
  9.60084498e-02  7.79858828e-02 -3.78671736e-02 -1.87900141e-02
 -5.43619394e-02 -5.31756319e-02 -1.00388576e-03 -2.10704676e-34
 -9.67771001e-03 -1.68865882e-02 -8.65140278e-03  5.56506701e-02
 -1.53417774e-02  2.98824087e-02  5.70730641e-02  1.12061121e-01
 -1.02736026e-01  2.70907171e-02 -2.90489588e-02 -8.21401253e-02
  1.96339423e-03 -9.07049794e-03 -4.39819443e-04 -4.95656878e-02
  4.29055803e-02  8.02453905e-02  1.11625351e-01  4.31836881e-02
  5.81076518e-02 -4.01398912e-02 -1.89326666e-02 -3.55234705e-02
  1.15554938e-02  9.93197877e-03 -9.02495310e-02 -4.70672006e-04
  1.14119183e-02 -1.77249825e-03  1.45204307e-03 -4.42002788e-02
 -2.42975168e-02 -6.87182415e-03  7.68729299e-02 -5.96446469e-02
  1.45400036e-02  1.68855898e-02 -6.01480193e-02 -1.63651612e-02
  7.07406774e-02 -2.95177381e-02  5.47246775e-04  2.72804219e-02
 -1.02100363e-02 -1.10693574e-02  6.90103844e-02  2.43031024e-03
  4.94214296e-02  9.55480486e-02 -1.86334737e-02 -4.54241701e-04
 -5.67140132e-02 -4.73290719e-02 -2.13491339e-02 -5.43607138e-02
  2.59391330e-02 -4.09599580e-02  1.77578274e-02 -5.25972098e-02
 -3.87206636e-02  6.20960556e-02 -3.07926182e-02  2.41710320e-02
  4.40427065e-02 -1.69368945e-02 -5.12637794e-02 -4.27407362e-02
  4.12463881e-02 -2.18417253e-02 -6.03164993e-02 -3.20049450e-02
 -3.59688587e-02  5.03357649e-02 -4.66845743e-02 -7.79161379e-02
 -1.78693943e-02 -4.76210378e-02 -9.52702686e-02 -5.91064319e-02
  1.07953660e-02 -2.91702133e-02 -9.25817490e-02 -2.46454850e-02
 -6.37719827e-03  8.54897350e-02  3.70780565e-02  4.16108929e-02
 -4.80372906e-02  5.37747554e-02  4.54794019e-02 -8.96235928e-02
 -8.57451092e-03 -9.50774401e-02 -1.34543488e-02 -1.13338245e-33
  2.43176986e-02 -5.49506135e-02  2.33477373e-02  2.24999525e-03
  3.02057043e-02 -1.69980880e-02  9.79171321e-02  8.02824646e-03
 -3.97816300e-02  3.15944441e-02 -8.01514164e-02  1.34947207e-02
  2.28448156e-02 -8.66336282e-03  4.92555425e-02 -1.72377322e-02
 -8.39038342e-02 -9.13698040e-03  6.74500838e-02  4.12075743e-02
 -8.03757552e-03  1.52950183e-01  3.73852029e-02  7.30983987e-02
  2.72405311e-03  4.48024087e-02 -5.64577840e-02  7.88632259e-02
  2.52232496e-02  1.16132451e-02  2.19595060e-02 -3.66993174e-02
 -6.17023110e-02  7.94420168e-02 -3.24651301e-02 -1.37283713e-01
  5.38289845e-02  9.94132161e-02 -4.64063510e-02  7.78367519e-02
  1.07113801e-01 -8.94698277e-02 -7.12630600e-02 -3.16986963e-02
  2.96643432e-02 -4.60927887e-03  3.25667076e-02 -1.04888957e-02
 -4.62041050e-02  7.49412784e-03  6.04231237e-03 -2.57425886e-02
 -3.18091474e-02  5.34755886e-02  3.71020921e-02  2.02190932e-02
  1.61431640e-01  4.41891374e-03  8.97587314e-02 -1.00607924e-01
  7.76205631e-03 -4.92067821e-02  7.00739250e-02 -4.88239340e-03
  4.42924835e-02 -5.29238954e-02 -8.16448219e-03  8.83373991e-03
  4.89497092e-03  5.82995303e-02 -8.15421045e-02  6.45182421e-03
  7.58953243e-02 -8.27917084e-02  1.11835105e-02  7.22708777e-02
  9.16290283e-03 -2.05514655e-02  1.08168349e-02  2.84225494e-02
 -7.70041868e-02  4.56943177e-02  4.29853685e-02  5.07432781e-02
 -3.61263715e-02 -5.64096272e-02  2.93416809e-02 -1.57338995e-02
 -6.87802956e-02  1.61973368e-02 -9.48197171e-02 -1.14738252e-02
  2.60204822e-03 -2.45612729e-02 -1.41234533e-03 -5.72134162e-08
 -4.07756753e-02 -1.87393930e-02 -4.21139458e-03  8.22327062e-02
  6.09746873e-02 -9.72559750e-02 -1.36596039e-02 -3.93734835e-02
 -3.93227022e-03 -4.12446260e-02 -1.93463564e-02  6.57879412e-02
 -2.31075659e-03  8.39033804e-04 -2.28174385e-02 -6.10450469e-02
  4.83746221e-03 -2.67207958e-02 -2.81119160e-02 -5.49438149e-02
 -4.95627224e-02 -3.49792577e-02 -1.69815011e-02  4.55609476e-03
 -1.98913887e-02  2.50492175e-03  4.68940176e-02  9.97275710e-02
  8.79493952e-02 -3.17531563e-02  6.08875379e-02 -3.27502452e-02
  3.20229717e-02 -3.47741805e-02 -2.03315299e-02 -5.84897539e-03
 -2.42868718e-02  3.20725963e-02  6.79883957e-02 -3.07233334e-02
  1.30265057e-02  1.04523815e-01 -2.11364403e-02 -1.22163016e-02
  4.17498015e-02 -8.63848068e-03 -1.08935401e-01 -2.26164367e-02
  5.30625321e-02  9.70306806e-03 -4.04127166e-02 -2.91825477e-02
 -1.73785146e-02  9.54755098e-02 -2.79655717e-02 -5.39628416e-02
  2.70453305e-03 -4.00789715e-02 -8.18453655e-02  7.41314590e-02
  8.65016431e-02  5.57684600e-02  6.71820249e-03 -9.49036330e-02]"
"  {
        isSigner: false,
        isWritable: false,
        pubkey: SystemProgram.programId,
      },
    ],
  });

  const transaction = new Transaction();
  // Adding up all the above instructions
  transaction.add(creataAccountIx);

  const txHash = await connection.sendTransaction(transaction, [
    PAYER_KEYPAIR,
    GENERAL_STATE_KEYPAIR,
  ]);

  console.log(`Create Account CPI Success: ${txHash}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445# Làm thế nào để tạo PDAMột PDA đơn giản là một account sở hữu bởi một program, và không có khoá riêng tư tương ứng. Chữ ký cho account này sẽ được ký bằng tập hợp gồm seeds, bump (để đảm bảo account không nằm trên đường cong ed25519). ""Tìm ra"" một PDA là khác với ""tạo ra"" nó. Một người có thể tìm ra PDA bằng Pubkey::find_program_address. Tạo ra PDA lại có nghĩa là khởi tạo vùng nhớ cho account đó và thiết lập các trạng thái cho nó. Một account từ cặp khoá có thể được tạo bên ngoài program, sau đó được truyền lên cho program khởi tạo nó. Không may cho PDA, chúng lại cần được khởi tạo on-chain bởi vì điều hiển nhiên là nó không có khoá riêng tư tương ứng để tạo chữ ký cho nó. Do đó, chúng ta phải sử dụng invoke_signed kèm với seeds của PDA và chữ ký địa chỉ chịu phí để khỏi tạo PDA đó.RustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    program::invoke_signed,
    program_error::ProgramError,
    pubkey::Pubkey,
    rent::Rent,
    system_instruction,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
/// 1. [signer, writable] Funding account
/// 2. [writable] PDA account
/// 3. [] System Program
pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    instruction_data: &[u8],
) -> ProgramResult {
    const ACCOUNT_DATA_LEN: usize = 1;

    let accounts_iter = &mut accounts.iter();
    // Getting required accounts
    let funding_account = next_account_info(accounts_iter)?;
    let pda_account = next_account_info(accounts_iter)?;
    let system_program = next_account_info(accounts_iter)?;

    // Getting PDA Bump from instruction data
    let (pda_bump, _) = instruction_data
        .split_first()
        .ok_or(ProgramError::InvalidInstructionData)?;

    // Checking if passed PDA and expected PDA are equal
    let signers_seeds: &[&[u8]; 3] = &[
        b""customaddress"",
        &funding_account.key.to_bytes(),
        &[*pda_bump],
    ];
    let pda = Pubkey::create_program_address(signers_seeds, program_id)?;

    if pda.ne(&pda_account.key) {
        return Err(ProgramError::InvalidAccountData);
    }

    // Assessing required lamports and creating transaction instruction
    let lamports_required =","[-1.03821479e-01  6.38162196e-02 -1.04898460e-01 -5.07723652e-02
 -9.53267515e-02 -8.96323193e-03  7.64788613e-02  7.83184543e-02
  6.27953038e-02  6.49788827e-02  1.52473241e-01 -8.78906325e-02
  2.28391476e-02 -1.04116365e-01 -2.27273405e-02 -6.57602251e-02
 -1.41517192e-01 -7.53103197e-02  1.21965364e-03 -8.12797174e-02
  9.97140817e-03 -5.70611060e-02 -7.24253245e-03 -2.70900875e-02
  1.30201373e-02 -1.57305487e-02  1.79399569e-02  2.81274933e-02
 -5.74837252e-03  1.12669347e-02  6.92633241e-02  6.67887852e-02
 -3.11063118e-02 -2.39760838e-02  3.33628058e-02  8.00854564e-02
 -2.92275120e-02 -4.47086059e-02  3.02352593e-03 -1.94392521e-02
  2.76951194e-02 -2.72924989e-03 -5.50669506e-02 -2.06864104e-02
  1.06228530e-01  1.40693330e-03 -1.03011001e-02  1.87229011e-02
 -9.74888355e-03 -7.70720141e-03 -3.80724408e-02  5.80556095e-02
 -1.22612519e-02  5.04279807e-02 -5.82065880e-02  3.55023220e-02
  1.51062366e-02  4.01117802e-02  4.63159196e-03 -7.72316381e-02
 -1.33535732e-02  4.92864661e-02 -3.13183367e-02 -7.74113089e-02
  2.41620764e-02  1.09733129e-02 -3.01411934e-02 -4.79146056e-02
 -3.03281727e-03 -4.00264142e-03 -1.26472823e-02  2.96749407e-03
 -1.09009236e-01  3.95164229e-02 -1.10832140e-01 -3.27856950e-02
 -3.15037370e-02 -4.20179311e-03 -4.10435908e-02  1.44047465e-03
  4.25705360e-03 -9.21495166e-03  1.10551253e-01 -5.41014448e-02
  7.09327217e-03  6.70947433e-02 -8.06790292e-02 -1.43277906e-02
  1.27805714e-02 -3.49290445e-02  6.34918287e-02  4.89003025e-02
 -5.03380597e-02 -4.64557409e-02  5.56159429e-02  3.01495697e-02
  7.57928006e-03  7.02674240e-02 -2.50214003e-02  4.23279181e-02
  6.28573671e-02  4.93764542e-02 -5.46711273e-02 -1.14840455e-02
 -1.18090352e-02  3.26968506e-02  1.08407408e-01 -7.35177696e-02
 -5.56723624e-02 -2.85338964e-02 -3.66976224e-02  5.99807017e-02
  2.45983787e-02 -7.46251047e-02  1.01964371e-02  9.28183198e-02
 -9.70588699e-02  1.92107670e-02 -4.33804169e-02  2.96289008e-02
  4.60010096e-02  3.27231316e-03 -1.44938231e-01  1.67945474e-02
 -8.79810899e-02 -5.59274256e-02  8.45984519e-02  1.28407785e-32
 -2.29670405e-02  8.50022025e-03 -5.76851610e-03 -3.50570306e-02
  1.93419047e-02 -4.08381084e-03  1.66749451e-02 -5.71966590e-03
 -7.53121302e-02 -1.34824729e-02 -9.45299789e-02 -9.87210348e-02
 -7.39403516e-02 -1.38255665e-02 -3.07194553e-02 -3.40940841e-02
 -1.06008258e-02  2.25100238e-02  1.23459801e-01  1.04736199e-03
  3.21565978e-02 -2.16349270e-02  3.15327384e-02 -4.53803837e-02
  4.46767509e-02  9.96744558e-02 -8.61484632e-02 -6.64431900e-02
  8.45609140e-03 -6.43421488e-04  5.91589995e-02  9.43307579e-03
 -4.80228141e-02 -1.99065581e-02 -5.07732481e-02 -8.69673118e-02
 -4.45663230e-03 -1.06721616e-03 -8.47978592e-02 -5.59110567e-02
  9.54845250e-02  1.24752289e-02 -2.97575556e-02  1.48358969e-02
 -8.25830400e-02  4.62880358e-02  2.78963149e-02 -8.05822108e-03
  1.28742769e-01  5.04872240e-02 -3.22217830e-02 -3.29008810e-02
 -1.32019063e-02 -5.11414260e-02  3.79837491e-02 -4.78193983e-02
  1.75268408e-02 -7.13920817e-02 -1.35995373e-02  2.45378111e-02
  1.31746689e-02 -4.57712002e-02 -1.98509134e-02  3.96726727e-02
  3.85140553e-02 -7.21755698e-02 -3.44065726e-02 -9.69112758e-03
  4.14787605e-02 -4.27341321e-03 -6.97739869e-02 -4.61782701e-02
  3.89178330e-03  3.32831964e-02 -2.66762953e-02 -4.53796051e-02
  3.13358083e-02 -9.73572116e-03 -4.08309288e-02 -1.44288996e-02
 -8.28236714e-03 -2.36212835e-02 -4.85914238e-02 -6.42138720e-02
  3.92861106e-02  8.66457224e-02 -1.82955097e-02 -3.89856361e-02
  6.32395446e-02 -1.53707601e-02  3.36240773e-04  5.41349500e-03
  1.87486876e-02  2.42717620e-02  5.90333389e-03 -1.40660212e-32
  5.60262501e-02 -5.24575170e-03 -7.84723461e-02  1.12359608e-02
 -5.15526757e-02  4.61239405e-02  5.14230356e-02 -3.03338468e-03
  3.83403488e-02 -1.06272800e-03 -7.00459164e-03  5.58935059e-03
  5.54902945e-03  2.22416036e-02  1.29724622e-01 -3.57323475e-02
 -1.82673160e-03  8.17539692e-02  1.49633959e-02  1.50369741e-02
 -2.81773917e-02  6.93373904e-02 -5.44653013e-02  6.68671876e-02
 -4.07749154e-02  2.51556095e-02  8.73021130e-03  2.37568449e-02
 -1.16497837e-02  1.14639383e-02  3.03654354e-02 -4.61415760e-02
 -6.09828085e-02  1.47674918e-01  1.16492165e-02 -1.08069450e-01
  1.13315530e-01  4.41365913e-02 -3.32310088e-02  5.01229540e-02
  1.06433742e-01 -2.76865736e-02 -2.34051291e-02  2.14013103e-02
  2.69392934e-02 -7.17883632e-02  2.48287320e-02 -1.92845836e-02
 -7.17567746e-03 -3.88483442e-02  6.40647560e-02 -6.48786575e-02
  1.10175759e-02 -1.68172214e-02  2.65377238e-02  6.46680817e-02
  9.35538411e-02 -8.46764594e-02  1.75711245e-03 -1.42799273e-01
 -1.99271850e-02 -2.74670515e-02  1.58580113e-02  1.16167953e-02
  9.20058787e-02 -7.84246624e-03  1.23837506e-02  1.80858150e-02
  6.14112131e-02 -3.01129967e-02 -2.55329926e-02 -1.33983456e-02
  3.08490335e-03 -5.98070351e-03  4.53371890e-02  1.28112445e-02
 -6.80695400e-02  1.17297927e-02  3.44252847e-02  2.10977811e-02
 -1.53058125e-02 -9.46612749e-03 -1.24383941e-02 -2.34321319e-02
 -3.96942124e-02 -1.59174390e-02  6.71236170e-03  2.21452918e-02
  5.13880746e-03 -4.11055312e-02 -2.44845748e-02 -2.90705692e-02
  3.95739488e-02  6.25043884e-02 -1.74479261e-02 -6.59650894e-08
 -2.16346569e-02 -7.99728408e-02 -2.59607695e-02  1.50600979e-02
  6.53321967e-02 -2.43240539e-02 -2.77738646e-02 -9.35366973e-02
 -1.64522715e-02 -8.29254463e-02 -5.84086552e-02  2.38566194e-02
 -2.47598849e-02 -2.53549423e-02  3.09229847e-02 -5.13617648e-03
 -4.78420444e-02  1.10643944e-02 -1.55280083e-02 -7.73814395e-02
  2.37898659e-02  2.85475701e-02 -7.14325393e-03  2.11414462e-03
 -2.40608472e-02  4.60745431e-02  8.33651647e-02  1.72895417e-01
 -2.14244798e-02 -9.05124529e-04  1.93038266e-02 -3.37881781e-02
  4.02273983e-02 -1.84379835e-02  1.17156217e-02  2.68116854e-02
  1.51447490e-01  3.64606492e-02  2.88651660e-02 -3.41428258e-02
 -1.94094202e-03  1.20771956e-02 -1.69197265e-02 -1.45132495e-02
 -2.60772537e-02  2.62648072e-02 -1.88722201e-02  1.75798424e-02
  8.57883841e-02 -1.04758572e-02 -7.97541663e-02 -2.10607760e-02
  4.22659243e-04  4.75200228e-02 -3.74912210e-02 -4.87935729e-02
 -1.53116584e-02 -1.58732589e-02  3.04203816e-02  2.07551429e-03
  1.13078363e-01  5.98056167e-02 -3.67660704e-03 -6.49119765e-02]"
"Rent::get()?.minimum_balance(ACCOUNT_DATA_LEN);
    let create_pda_account_ix = system_instruction::create_account(
        &funding_account.key,
        &pda_account.key,
        lamports_required,
        ACCOUNT_DATA_LEN.try_into().unwrap(),
        &program_id,
    );
    // Invoking the instruction but with PDAs as additional signer
    invoke_signed(
        &create_pda_account_ix,
        &[
            funding_account.clone(),
            pda_account.clone(),
            system_program.clone(),
        ],
        &[signers_seeds],
    )?;

    // Setting state for PDA
    let mut pda_account_state = HelloState::try_from_slice(&pda_account.data.borrow())?;
    pda_account_state.is_initialized = true;
    pda_account_state.serialize(&mut &mut pda_account.data.borrow_mut()[..])?;

    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081let create_pda_account_ix = system_instruction::create_account(
    &funding_account.key,
    &pda_account.key,
    lamports_required,
    ACCOUNT_DATA_LEN.try_into().unwrap(),
    &program_id,
);

invoke_signed(
    &create_pda_account_ix,
    &[funding_account.clone(), pda_account.clone()],
    &[signers_seeds],
)?;
12345678910111213Bạn có thể gửi những account cần thiết từ phía người dùng như sau:TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from ""@solana/web3.js"";

const PAYER_KEYPAIR = Keypair.generate();

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""6eW5nnSosr2LpkUGCdznsjRGDhVb26tLmiM1P8RV1QQp""
  );

  // Airdop to Payer
  await connection.confirmTransaction(
    await connection.requestAirdrop(PAYER_KEYPAIR.publicKey, LAMPORTS_PER_SOL)
  );

  const [pda, bump] = await PublicKey.findProgramAddress(
    [Buffer.from(""customaddress""), PAYER_KEYPAIR.publicKey.toBuffer()],
    programId
  );

  console.log(`PDA Pubkey: ${pda.toString()}`);

  const createPDAIx = new TransactionInstruction({
    programId: programId,
    data: Buffer.from(Uint8Array.of(bump)),
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: pda,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: SystemProgram.programId,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(createPDAIx);

  const txHash = await connection.sendTransaction(transaction, [PAYER_KEYPAIR]);
  console.log(`Created PDA successfully. Tx Hash: ${txHash}`);
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859const PAYER_KEYPAIR = Keypair.generate();

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const programId = new PublicKey(
    ""6eW5nnSosr2LpkUGCdznsjRGDhVb26tLmiM1P8RV1QQp""
  );

  const [pda, bump] = await PublicKey.findProgramAddress(
    [Buffer.from(""customaddress""),","[-7.19753653e-02  5.49078025e-02 -8.70786831e-02 -4.25493307e-02
 -9.12312195e-02 -9.59032848e-02 -1.28092421e-02  8.89721662e-02
 -4.12136354e-02  3.61984596e-02  8.36269259e-02 -9.07684565e-02
  1.57346521e-02 -5.90641983e-02  7.04661459e-02  4.81749661e-02
 -5.08364178e-02 -2.65162699e-02  9.26273584e-04 -4.70811361e-03
  9.40086842e-02 -5.23586757e-02 -3.26690264e-02  4.01092544e-02
  3.73171195e-02 -3.77920792e-02  3.99566106e-02  7.96405785e-03
  7.62698203e-02 -5.22558438e-03  5.08126430e-02  3.84813733e-02
 -1.68625209e-02  1.10491375e-02  8.91685039e-02  1.28181934e-01
  2.79853363e-02 -5.22677191e-02 -2.27017514e-02 -4.81738755e-03
  9.30178721e-05  3.49019989e-02 -5.35868369e-02  1.59623381e-02
 -8.64624083e-02 -6.21303497e-03 -5.46928868e-02  7.43828267e-02
  3.38113196e-02 -2.77611297e-02 -8.08401499e-03  2.65385676e-02
 -7.54088089e-02  3.21368128e-02 -1.16285933e-02  2.99680829e-02
  8.85359123e-02 -9.45199747e-03  2.10512243e-02  2.83112302e-02
 -4.07252461e-02  7.94445574e-02  1.92853976e-02 -1.61211360e-02
  6.65164739e-02 -4.31704661e-03 -7.60531565e-03  2.05673333e-02
 -5.11994213e-02  7.69579643e-03 -2.46533100e-02 -6.00947998e-02
 -6.38613254e-02  4.76430953e-02 -2.48008855e-02  4.10325937e-02
  7.84941297e-03  3.45637351e-02 -2.95052696e-02 -1.08090326e-01
 -1.16367526e-01  3.94343175e-02  5.56532643e-04  2.16752365e-02
 -5.87348314e-03  2.46369559e-02 -3.51100303e-02 -4.28670272e-02
  1.26130372e-01  2.87011452e-02  3.93565893e-02  3.84072326e-02
 -3.95457260e-02 -2.12478526e-02  7.94456527e-02  4.38284352e-02
  6.34349138e-02 -6.05301149e-02 -8.79805628e-03  5.77310026e-02
 -3.48874032e-02  8.63472279e-03  3.08529045e-02  2.04552021e-02
 -1.57038234e-02 -3.25219408e-02  2.93276310e-02 -1.13666914e-01
 -5.69977984e-02  6.06279671e-02  1.53530657e-03  9.19547901e-02
  4.98714224e-02 -7.83517864e-03  6.81546517e-03  1.40458951e-02
 -1.08775049e-01 -2.51381863e-02 -1.15219504e-02  2.28350982e-02
  5.31466641e-02 -3.27548420e-04 -2.68279351e-02  1.16040148e-02
 -3.42734344e-02 -1.99097395e-02  2.76711285e-02 -3.81243160e-33
  2.01292560e-02 -6.21526130e-02 -2.68694609e-02  6.47243634e-02
 -8.05554241e-02  5.55685237e-02  7.83032700e-02  3.42750289e-02
 -1.44740909e-01  3.95155773e-02  1.15812605e-03 -2.64678895e-02
 -3.98045294e-02  3.14569995e-02 -3.59160267e-02 -7.40219727e-02
  7.28232861e-02  1.65100079e-02  5.53664304e-02  5.52782491e-02
  5.90393655e-02  2.66056918e-02  2.39181556e-02 -7.72891194e-02
  5.47544882e-02 -1.20594213e-03 -8.86654630e-02  1.26252882e-02
 -1.19430367e-02 -9.30550136e-03 -2.19186004e-02 -6.00090548e-02
 -2.88328025e-02  4.30786225e-04  5.00085764e-02 -3.36625539e-02
  1.97445862e-02 -7.20798736e-03 -9.72563773e-02 -5.86569905e-02
  9.78100672e-02  5.05950339e-02  6.08524829e-02 -3.84134874e-02
 -6.89266529e-03  9.52044688e-03  1.82962697e-02 -4.10581846e-03
  2.58225705e-02  2.24499442e-02 -3.32026593e-02 -8.79525021e-03
 -9.93976071e-02 -1.63013209e-02 -6.85888976e-02 -8.04231241e-02
 -1.95606449e-03 -9.29653049e-02  1.14017762e-02 -5.40454127e-02
 -5.14089316e-02  3.93143222e-02 -1.29682999e-02  1.26955518e-02
 -1.58167798e-02  4.56709135e-03 -3.42877768e-02  1.30354669e-02
  8.81153196e-02 -4.29204255e-02 -4.92618419e-02 -1.97314676e-02
 -7.59093463e-02  4.74908575e-02 -1.94049012e-02 -7.33930990e-02
  6.31432757e-02  1.78930350e-02 -6.42844141e-02 -5.31653464e-02
  2.16886923e-02  9.04654060e-03 -5.82309440e-02  5.68321161e-02
 -2.09264066e-02  4.48575430e-02  2.62028016e-02  5.88493096e-03
 -1.12771593e-01 -2.26883758e-02 -3.56359668e-02 -8.92798826e-02
  3.00825667e-02 -2.56190989e-02  1.78205352e-02 -6.57772109e-34
  2.67064478e-02 -8.71466771e-02  5.95362335e-02 -7.13845044e-02
  2.04479676e-02 -5.38900215e-03  3.58521864e-02 -2.15283092e-02
 -1.13150053e-01  1.52431792e-02 -6.90532327e-02 -1.90039240e-02
  3.00411563e-02  1.58474706e-02  5.14181331e-02 -8.87399539e-03
 -5.98488636e-02  1.62317753e-02  6.34055510e-02  3.29536088e-02
 -3.54701504e-02  1.20146245e-01  1.86521709e-02  1.01143755e-01
  1.46515733e-02 -1.05288886e-02 -6.27174899e-02  6.13657534e-02
 -2.30898475e-03 -4.41992059e-02  4.52573299e-02 -1.32254884e-02
 -8.02579075e-02  1.10544734e-01 -5.24871945e-02 -8.54335055e-02
  2.55489387e-02  5.17992228e-02 -5.10098413e-02  5.10934778e-02
  1.35232612e-01 -7.22282007e-02 -7.17134997e-02  1.39685031e-02
 -1.44296587e-02  2.48438846e-02  5.81689551e-02  8.40480346e-03
 -7.94731528e-02  8.25253129e-02  2.01388244e-02 -4.40700315e-02
  3.95483657e-04  2.24670656e-02 -1.19339516e-02 -1.38836922e-02
  1.49460465e-01 -8.86100158e-03  9.91239175e-02 -5.38102612e-02
  2.53645256e-02 -1.55464290e-02  9.56201088e-03  1.07524451e-02
 -2.75361724e-02 -5.08364923e-02  4.21071937e-03 -9.64623969e-03
  3.73821780e-02  5.09966463e-02 -4.02735313e-03  5.12903519e-02
  3.68750021e-02 -6.58022463e-02  3.16899605e-02  2.74453200e-02
 -5.05790040e-02 -6.25738800e-02  3.61869261e-02 -2.14515557e-03
 -1.22372672e-01  2.23743264e-02  3.18324417e-02  6.43117800e-02
 -6.49893051e-03 -2.59791072e-02  8.16558301e-02 -5.60631007e-02
 -5.22816107e-02  5.94913028e-02 -7.29748383e-02 -7.01700663e-03
  1.77016631e-02  1.85756702e-02  3.02800932e-03 -5.10123570e-08
 -2.86782924e-02 -7.36762062e-02 -1.32952945e-03  5.93309663e-02
 -2.65972386e-03 -1.02841355e-01 -3.96107435e-02 -3.61904539e-02
 -6.32750057e-03 -4.33719121e-02  2.24533640e-02  6.59567267e-02
 -4.25725617e-02 -1.90506466e-02 -4.13001031e-02 -3.74634117e-02
  2.77027171e-02 -2.27937568e-02 -4.12330814e-02 -5.23177981e-02
 -1.56599879e-02 -1.75607093e-02 -2.63582841e-02 -1.26210377e-02
  3.91795561e-02 -1.02008460e-02  7.13672861e-02  1.32989004e-01
  5.16547114e-02  5.92996366e-03  7.52736479e-02  5.01980959e-03
  3.59721184e-02 -1.50821265e-02 -6.80138823e-03  3.21974047e-04
  4.21604961e-02  3.99783924e-02  5.53942807e-02 -3.43135595e-02
 -1.75505728e-02  8.50454420e-02 -3.75869982e-02 -3.47639844e-02
  2.16008630e-02  1.16888070e-02 -1.01030394e-01 -2.48303879e-02
  1.12169705e-01 -1.63013097e-02 -7.43572488e-02 -6.10153973e-02
  2.49017309e-02  3.10492311e-02 -2.95665190e-02 -6.49797618e-02
 -3.34466174e-02  2.06709336e-02  3.10468487e-02  5.35152759e-03
  5.51785380e-02 -7.73974182e-03 -8.47604405e-03 -4.38949428e-02]"
"PAYER_KEYPAIR.publicKey.toBuffer()],
    programId
  );

  const createPDAIx = new TransactionInstruction({
    programId: programId,
    data: Buffer.from(Uint8Array.of(bump)),
    keys: [
      {
        isSigner: true,
        isWritable: true,
        pubkey: PAYER_KEYPAIR.publicKey,
      },
      {
        isSigner: false,
        isWritable: true,
        pubkey: pda,
      },
      {
        isSigner: false,
        isWritable: false,
        pubkey: SystemProgram.programId,
      },
    ],
  });

  const transaction = new Transaction();
  transaction.add(createPDAIx);

  const txHash = await connection.sendTransaction(transaction, [PAYER_KEYPAIR]);
})();
12345678910111213141516171819202122232425262728293031323334353637383940# Làm thế nào để đọc AccountHầu hết tất cả chỉ thị trên Solana có thể yêu cầu tối thiểu 2-3 account, và chúng sẽ được tham chiếu thông qua chỉ thị dựa trên thứ tự được thiết lập sẵn. Công việc sẽ khá đơn giản nếu bạn đọc đã nắm rõ phương thức iter()trong Rust, thay vì tham chiếu tuwngf account bằng chỉ số. Phương thức next_account_info cơ bản sẽ lần lướt rút các account trong mảng các account. Thử quan sát ví dụ bên dưới với một câu chỉ thị đơn giản bao gồm nhiều account và cần được trải ra.RustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    entrypoint,
    entrypoint::ProgramResult,
    pubkey::Pubkey,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
/// 1. [signer] Payer
/// 2. [writable] Hello state account
/// 3. [] Rent account
/// 4. [] System Program
pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    // Fetching all the accounts as a iterator (facilitating for loops and iterations)
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;
    // Rent account
    let rent_account = next_account_info(accounts_iter)?;
    // System Program
    let system_program = next_account_info(accounts_iter)?;

    Ok(())
}
1234567891011121314151617181920212223242526272829303132333435363738pub fn process_instruction(
    _program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    // Fetching all the accounts as a iterator (facilitating for loops and iterations)
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;
    // Rent account
    let rent_account = next_account_info(accounts_iter)?;
    // System","[-6.43943399e-02  4.57029119e-02 -1.31294966e-01 -5.78773841e-02
 -1.32816523e-01  2.07986232e-05  1.03967138e-01  7.76402056e-02
  8.52788165e-02  3.73310260e-02  5.52709512e-02 -4.82628979e-02
 -7.51156174e-03 -4.64467891e-02 -5.41697082e-04 -2.15724055e-02
 -5.91682531e-02 -8.05077404e-02  7.68512674e-03 -3.89333367e-02
 -6.31297706e-03 -4.86185476e-02  3.15915979e-02 -2.65606195e-02
 -6.23771595e-03 -6.12283349e-02  5.76263554e-02  1.08552687e-02
 -3.71657424e-02  9.97994840e-03  1.18148737e-01 -1.16947656e-02
 -4.38812859e-02 -6.87916810e-03  2.60341167e-02  8.72824267e-02
 -8.62095039e-05 -4.43308167e-02 -3.23617365e-03  8.81970860e-03
  3.00595071e-02  6.07066182e-03 -1.10510334e-01 -6.30570343e-03
  8.64892676e-02 -2.98319524e-03 -2.31080297e-02  4.47372347e-02
  2.07166225e-02 -4.45793755e-02 -4.69715856e-02  5.89218698e-02
 -5.32873301e-03  7.10482299e-02 -6.62558377e-02  2.92486162e-03
  2.63088774e-02  3.70041654e-02 -8.68333690e-03 -4.33565900e-02
  1.94048602e-02  1.42926853e-02  5.24655916e-02 -6.09538816e-02
 -1.78622659e-02  6.35224655e-02  1.82807744e-02 -4.38191518e-02
 -1.52570335e-02  2.63011176e-03 -6.59910962e-03 -1.48090674e-02
 -5.86768314e-02 -1.16468715e-02 -9.23669040e-02 -8.17467719e-02
 -4.38428111e-02  1.24982642e-02 -1.02698728e-01  1.65121928e-02
  1.43897813e-02 -4.89761718e-02  3.45644839e-02  1.31323468e-02
  2.66346335e-03  1.02383204e-01 -6.14277944e-02 -7.30387717e-02
 -1.43031618e-02  5.41406218e-03  6.27525849e-03  7.72389472e-02
 -3.20395045e-02 -3.05940490e-02  8.05320367e-02 -8.54698999e-04
  7.71682411e-02  4.55706008e-03  2.46324250e-03  4.21879366e-02
  3.77962664e-02  8.88433121e-03 -6.67820424e-02 -2.64043603e-02
  3.16691250e-02  5.99406585e-02  1.36123970e-01 -7.72254169e-02
 -8.97803009e-02 -9.17166879e-04 -3.94353755e-02  1.07904948e-01
  4.35914695e-02 -1.52427377e-02 -2.78015658e-02  9.54629108e-02
 -1.18352368e-01  2.33804863e-02 -3.83431767e-03  6.50955550e-03
  5.02081923e-02 -2.54414678e-02 -1.31968528e-01  4.12998497e-02
 -7.94389471e-02 -5.78811690e-02  4.07949984e-02  4.63090885e-33
 -2.81936135e-02  2.75609270e-03 -3.58033255e-02 -4.06730175e-02
  3.61066498e-02  4.67203697e-03  4.32424024e-02  1.35579873e-02
 -5.35354502e-02 -2.83249654e-02 -1.44744888e-01 -1.08093575e-01
 -2.97571197e-02 -3.62216681e-02 -2.55840085e-02 -1.28511190e-02
 -6.01244196e-02  8.67907554e-02  1.06032617e-01  8.63495003e-03
  5.27024828e-03 -7.16629019e-03  4.72940467e-02 -6.97320253e-02
 -1.31471632e-02  6.67146221e-02 -8.26835036e-02 -4.12145369e-02
 -1.85912382e-02 -2.85702366e-02  2.95590721e-02  5.45027591e-02
 -2.41276305e-02  1.54010840e-02 -2.16559484e-03 -8.02327618e-02
  2.96853911e-02  2.27085017e-02 -1.09779768e-01 -4.94138822e-02
  1.08414538e-01  5.72093297e-03 -1.72309317e-02  1.58915594e-02
 -5.86625636e-02  5.82262117e-04 -5.02461742e-04  1.31290089e-02
  9.01567638e-02  4.85160062e-03 -5.37853204e-02 -2.98763271e-02
 -1.62256509e-02 -7.45226368e-02 -2.06634589e-02 -9.61627141e-02
  5.35971522e-02 -4.15700264e-02  1.76693667e-02  1.33631639e-02
 -6.58014193e-02 -1.75076425e-02  1.74519960e-02 -4.09033969e-02
  1.24268113e-02 -2.75036972e-02 -6.13966957e-02  7.58614438e-03
  3.83990407e-02 -4.70992215e-02 -4.38499674e-02  3.55748758e-02
  6.29972443e-02  4.87149581e-02 -2.12391596e-02 -2.39615589e-02
 -2.96595395e-02  2.43378920e-03  1.31256310e-02 -5.19236438e-02
  2.44485657e-03 -2.84877829e-02 -4.22777198e-02  1.42720910e-02
  6.28531119e-03  1.14072122e-01 -3.27753089e-02 -4.13312651e-02
  4.58891764e-02  2.78976616e-02 -3.27140391e-02 -3.90877947e-02
  1.50743378e-02 -4.37669195e-02  4.41664159e-02 -7.95059710e-33
  6.33303151e-02 -9.11618117e-03 -1.21445157e-01  3.81657518e-02
 -2.50397273e-03  4.92434874e-02 -1.16271283e-02  2.71367505e-02
 -1.51057681e-02  2.25214027e-02  9.35835857e-03  1.45352455e-02
  4.65961695e-02  2.02499554e-02  6.83835670e-02 -4.57036495e-02
  1.68325417e-02  4.67653982e-02 -3.40066897e-03 -5.51180281e-02
  1.37559930e-02  4.62479778e-02 -5.28855138e-02  9.58005935e-02
 -4.86695915e-02  3.49888690e-02 -2.72444934e-02  3.08811944e-02
 -2.62675304e-02  3.11997160e-03  1.47402631e-02 -1.35952653e-03
 -7.70135075e-02  9.00723636e-02  2.15376504e-02 -8.75232741e-02
  5.04734926e-02  4.20221835e-02 -9.05097462e-04  5.30122817e-02
  9.34237838e-02 -6.92150444e-02 -2.25289185e-02  3.17269452e-02
  5.25885224e-02 -4.40425538e-02  2.55477857e-02 -1.53172445e-02
  1.31046232e-02  3.85793634e-02  8.28611180e-02 -5.17043769e-02
 -1.01119615e-02 -4.92898189e-02  2.98176426e-02  8.71846154e-02
  1.20001860e-01 -1.09971002e-01  4.24489193e-02 -6.91638365e-02
  5.59264841e-03 -5.30834645e-02  6.67462200e-02  5.86036667e-02
  1.00706987e-01 -4.75981385e-02 -1.34535534e-02  1.23012150e-02
  6.29517213e-02 -5.67505544e-04 -1.19196530e-02 -1.47051010e-02
  1.44161656e-02  1.78100429e-02  8.97713080e-02 -1.59195007e-03
 -5.31806238e-02 -1.95799936e-02  3.07011902e-02  2.69901250e-02
 -1.42679438e-02 -3.23578455e-02  3.28087322e-02 -4.38887887e-02
 -8.25006701e-03  3.84130068e-02 -1.10812671e-02 -1.97638967e-03
 -1.80066098e-02 -5.55710718e-02 -7.45794678e-04 -2.32524555e-02
 -4.25050370e-02 -3.82552333e-02 -7.78189069e-03 -5.49784929e-08
 -2.74847001e-02 -3.30304168e-02 -6.82260469e-02  5.15410081e-02
  1.25991339e-02 -8.21310729e-02 -5.64341852e-03 -5.30313626e-02
 -3.01223639e-02 -1.45769536e-01 -6.78097904e-02  2.13629920e-02
 -3.84850092e-02 -2.69902516e-02  6.09981418e-02 -3.29984464e-02
 -4.15847860e-02 -4.08911929e-02 -3.16609479e-02 -6.42271861e-02
  5.04817888e-02 -1.13842357e-02 -2.05897372e-02 -5.09288982e-02
  2.48085428e-02 -2.44813450e-02  8.63859281e-02  1.70559004e-01
  3.79915573e-02 -1.08932285e-02  1.75375044e-02 -2.15572789e-02
  2.31098738e-02  9.69799981e-03 -5.05700195e-03  2.70652324e-02
  1.15518533e-01  4.15477864e-02  2.28777546e-02  3.76755628e-03
 -9.27111506e-03  1.11230416e-02 -7.20733181e-02 -4.15190589e-03
 -5.82498349e-02  7.76011273e-02 -2.42785607e-02  4.83752005e-02
  6.40194938e-02  1.81275755e-02 -2.71149818e-02 -2.86276229e-02
  3.90132666e-02  1.68457832e-02 -7.79484063e-02 -3.77138034e-02
 -2.11350843e-02 -1.32100899e-02  4.68755253e-02 -1.04640266e-02
  1.10507563e-01  2.34458540e-02 -1.28511817e-03 -2.99344994e-02]"
"Program
    let system_program = next_account_info(accounts_iter)?;

    Ok(())
}
123456789101112131415161718# Làm thế nào để kiểm tra accountBởi vì program trên Solana không lưu giữ trạng thái (stateless), một người tạo program như chúng ta sẽ cần đảm bảo các account truyền lên phải được kiểm tra hợp lệ kỹ càng nhất có thể để tránh các account giả mạo nhằm mục đích khai thác lỗ hổng của program. Những bài kiểm tra cơ bản bạn có thể thực hiện gồm:Kiểm tra xem accouunt cần ký đã ký chưaKiểm tra xem account cần ghi cho phép ghi hay chưa (cụ thể là writable)Kiểm tra xem chủ sở hữu account có phải là program đang được gọi hay khôngNếu là lần khởi tạo đầu, kiểm tra xem account đã từng được khởi tạo hay chưaKiểm tra các địa chỉ program sẽ được gọi cpi có đúng kỳ vọng hay khôngVí dụ một chỉ thị khởi tạo hello_state_account và sử dụng cách bài kiểm tra bên trên như sau:RustPress </> button to view full sourceuse borsh::{BorshDeserialize, BorshSerialize};
use solana_program::{
    account_info::{next_account_info, AccountInfo},
    clock::Clock,
    entrypoint,
    entrypoint::ProgramResult,
    msg,
    program_error::ProgramError,
    pubkey::Pubkey,
    rent::Rent,
    system_program::ID as SYSTEM_PROGRAM_ID,
    sysvar::Sysvar,
};

entrypoint!(process_instruction);

#[derive(BorshSerialize, BorshDeserialize, Debug)]
pub struct HelloState {
    is_initialized: bool,
}

// Accounts required
/// 1. [signer] Payer
/// 2. [writable] Hello state account
/// 3. [] System Program
pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    // Payer account
    let payer_account = next_account_info(accounts_iter)?;
    // Hello state account
    let hello_state_account = next_account_info(accounts_iter)?;
    // System Program
    let system_program = next_account_info(accounts_iter)?;

    let rent = Rent::get()?;

    // Checking if payer account is the signer
    if !payer_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature);
    }

    // Checking if hello state account is rent exempt
    if !rent.is_exempt(hello_state_account.lamports(), 1) {
        return Err(ProgramError::AccountNotRentExempt);
    }

    // Checking if hello state account is writable
    if !hello_state_account.is_writable {
        return Err(ProgramError::InvalidAccountData);
    }

    // Checking if hello state account's owner is the current program
    if hello_state_account.owner.ne(&program_id) {
        return Err(ProgramError::IllegalOwner);
    }

    // Checking if the system program is valid
    if system_program.key.ne(&SYSTEM_PROGRAM_ID) {
        return Err(ProgramError::IncorrectProgramId);
    }

    let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;

    // Checking if the state has already been initialized
    if hello_state.is_initialized {
        return Err(ProgramError::AccountAlreadyInitialized);
   ","[-5.47678955e-02 -2.32499819e-02 -5.23338579e-02 -1.21683955e-01
 -7.47190192e-02  2.26196200e-02  7.74333999e-02 -1.57286692e-03
  1.07847676e-02  6.26635645e-03  1.36169091e-01 -6.49447739e-02
  5.18938117e-02 -9.11143199e-02  5.16229048e-02 -2.53713131e-02
 -4.07531373e-02 -2.39822995e-02 -5.71448654e-02 -1.11328758e-01
  2.51722131e-02  4.64306725e-03 -1.18943676e-01  1.99751835e-02
 -3.92036289e-02  5.77865317e-02 -1.17870765e-02  1.08461338e-03
  1.97609025e-03 -6.36977851e-02 -1.43902320e-02  1.09279841e-01
 -1.70716345e-02 -3.81011260e-03  5.57231568e-02  3.28699872e-02
 -7.58334845e-02 -4.76712957e-02  4.59457003e-02 -3.04359868e-02
 -1.03042118e-01 -2.91837696e-02 -9.88939777e-03 -5.44539429e-02
  4.83853854e-02  1.19494097e-02 -7.29975253e-02 -1.68715306e-02
 -4.66855168e-02 -1.78516302e-02 -3.33893932e-02  9.19269770e-02
  2.18668208e-02  4.50377986e-02 -7.63127580e-02 -4.24992181e-02
  2.99824565e-03  3.29361744e-02  1.75671950e-02 -3.00973393e-02
 -8.43086466e-02  6.45759553e-02 -3.44350785e-02  9.57381446e-03
 -8.65209196e-03 -2.51973467e-03 -9.45337638e-02 -5.72396703e-02
  1.01368576e-02  2.68303379e-02 -9.39512625e-02 -1.16688758e-02
 -1.20953009e-01  8.57013837e-02 -5.38300797e-02  1.53262867e-02
 -3.58549654e-02  4.10497896e-02  2.74774507e-02 -7.18505979e-02
  1.35428905e-02  6.68190196e-02  3.41496356e-02  2.62608286e-03
 -2.51525398e-02  4.27884646e-02 -8.32048208e-02 -5.59428241e-03
  9.17273480e-03 -3.94154713e-02  9.31310505e-02  6.18209168e-02
  5.01088724e-02 -1.74894147e-02  3.59450020e-02 -4.90447655e-02
 -8.09440855e-03  3.44786271e-02  5.29606070e-04  3.20848487e-02
  4.65990752e-02  5.66121861e-02  4.19068076e-02 -1.18968459e-02
 -4.70169783e-02 -3.26594859e-02  1.56042844e-01 -1.07887611e-02
  4.48760688e-02 -2.51890887e-02 -8.25122669e-02  1.20645026e-02
  7.02818530e-03 -1.10774033e-01  3.42123285e-02  4.70214477e-03
 -9.99219622e-03  2.61206981e-02 -6.57958463e-02  6.19358011e-02
  1.39444182e-02 -2.17715465e-02 -4.31854799e-02 -5.72778191e-03
 -3.32402140e-02 -3.66106443e-02  4.33586873e-02  2.23669730e-32
  3.67466640e-03 -5.29919378e-03  2.17189696e-02 -1.00290313e-01
  3.89371179e-02 -3.30794938e-02 -4.10387386e-03 -1.11098196e-02
 -9.58771706e-02 -8.24174471e-03  8.63109529e-03 -1.75759122e-02
 -4.47099432e-02 -3.64219397e-02  8.91733468e-02 -2.44880766e-02
  7.61058852e-02 -5.06429821e-02  2.14896593e-02 -1.66118089e-02
  1.22464225e-01 -4.47513349e-02  5.86714447e-02 -6.91385707e-03
  2.33466234e-02  3.83313671e-02 -4.62074988e-02 -1.95620265e-02
  8.32288992e-03  1.74457114e-02  4.80061583e-02 -4.46991362e-02
 -8.38168040e-02 -6.91621052e-03 -3.79554369e-02 -4.64162119e-02
  1.85775328e-02 -3.99491936e-02  9.17334203e-03 -2.11419836e-02
  6.00899458e-02  2.70025674e-02  5.08527979e-02  2.93260757e-02
  7.83907250e-03  8.64457786e-02  5.37134148e-03  1.83223635e-02
  2.94985399e-02  3.62617001e-02 -1.62807701e-03 -4.34027724e-02
 -1.24083780e-01  2.56917588e-02  5.76809049e-02 -5.71383201e-02
 -5.35768941e-02 -1.72902085e-02  1.82564761e-02  2.14822199e-02
  1.56138781e-02  2.68356800e-02  1.22838141e-02  6.67344853e-02
 -4.98400927e-02 -8.00416172e-02 -2.06897538e-02 -1.43790888e-02
  5.75604178e-02 -1.02241207e-02 -6.97853863e-02 -5.42358235e-02
 -1.72544625e-02  7.41747022e-02 -4.62499782e-02 -6.62412345e-02
  4.18300778e-02 -3.43200937e-02 -3.05260681e-02  5.46401478e-02
  2.79780049e-02 -4.71882001e-02 -5.87251000e-02 -2.18262505e-02
 -4.78367228e-03  3.02691124e-02  5.05681373e-02 -5.21659702e-02
 -2.44950037e-02 -5.49660577e-03 -3.13422456e-02  1.87499616e-02
  7.73078948e-02  7.12413862e-02 -9.50088724e-03 -2.03011445e-32
  1.22678736e-02 -2.69285943e-02 -4.25565392e-02 -1.24500794e-02
  4.17922139e-02 -2.27993336e-02  5.64249866e-02 -3.03633492e-02
  5.28315678e-02  1.28284339e-02 -4.50206585e-02  7.43616559e-03
  2.31767651e-02  2.53374409e-02  9.59700122e-02  6.39810343e-04
  5.66911660e-02  5.30288182e-02 -4.51591313e-02  6.76362738e-02
 -4.55101579e-02  5.16530089e-02 -3.86673436e-02  9.08399746e-03
  2.38261130e-02  4.14744131e-02  1.34480437e-02  4.82808016e-02
  4.08532694e-02  5.03161624e-02  1.32934228e-02 -5.05675152e-02
 -8.59343186e-02  1.21809140e-01 -7.67518431e-02 -1.80679217e-01
  5.62515222e-02  5.73286973e-02 -6.28056005e-02  3.92892174e-02
  1.02649875e-01 -3.84392850e-02 -5.81189408e-04  1.83953950e-03
  1.08097708e-02 -4.97840811e-03  7.29400292e-02 -3.91432568e-02
 -8.48627388e-02 -8.39325320e-03  8.98655877e-02 -3.48015726e-02
  2.31291428e-02  4.79708314e-02  3.14807333e-02  5.19978441e-02
  1.05121225e-01 -6.88190758e-02 -3.50692980e-02 -1.56383067e-01
 -2.71393824e-02 -1.34819541e-02 -3.57453823e-02  5.03604896e-02
  1.11163706e-01 -2.24553458e-02  2.63455100e-02  5.08636683e-02
  4.42864597e-02 -9.63805318e-02 -3.35493051e-02 -8.33187029e-02
 -3.74362916e-02 -3.79312783e-02  1.10503342e-02  2.22582482e-02
 -7.61881694e-02  6.17086701e-03 -8.49615131e-03 -1.94340888e-02
 -8.77919048e-02  4.02696729e-02 -1.87736750e-02 -1.40618077e-02
  1.71185136e-02 -2.60011037e-03 -4.34766561e-02 -1.86576322e-02
  4.76086996e-02  1.08264899e-02  1.67131275e-02 -2.04338990e-02
  6.00298271e-02  5.67118712e-02 -7.14715745e-04 -6.22808045e-08
 -1.95878209e-03 -1.37668923e-01  2.29303278e-02  4.45123576e-02
  7.85490647e-02 -2.64665261e-02 -3.94504555e-02 -4.43196893e-02
  4.58993996e-03 -1.93632841e-02  2.69133989e-02  4.82900366e-02
 -4.38434593e-02 -5.27157262e-02 -1.19965039e-02  3.63108553e-02
  6.46987334e-02  3.05935852e-02  1.28803337e-02 -1.79824084e-02
  6.98777661e-03 -1.47490362e-02 -2.05557868e-02  4.91548702e-02
 -7.64168277e-02  5.01713715e-02  3.22775333e-03  6.21295795e-02
 -1.67652797e-02 -1.24145839e-02  5.57832345e-02 -5.41756675e-02
  1.98288057e-02 -2.46028900e-02  3.35321575e-02 -3.45634632e-02
  1.55352531e-02  9.17986687e-03 -2.67814100e-02  8.21454730e-03
  4.68216697e-03  2.70039067e-02  5.85596673e-02  1.05862562e-02
  2.62134019e-02 -3.72453369e-02 -7.16321170e-03 -6.64979517e-02
  1.38341337e-01 -6.08127639e-02 -8.16739947e-02 -3.29164788e-02
  6.56627119e-02  6.55999482e-02  3.45922820e-02 -6.31752191e-03
  4.28041862e-03  1.92209799e-02 -4.46912572e-02  2.80234478e-02
  6.47877082e-02  9.63573605e-02 -5.77209843e-03 -4.19508368e-02]"
"}

    hello_state.is_initialized = true;
    hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;
    msg!(""Account initialized :)"");

    Ok(())
}
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778pub fn process_instruction(
    program_id: &Pubkey,
    accounts: &[AccountInfo],
    _instruction_data: &[u8],
) -> ProgramResult {
    let accounts_iter = &mut accounts.iter();
    let payer_account = next_account_info(accounts_iter)?;
    let hello_state_account = next_account_info(accounts_iter)?;
    let system_program = next_account_info(accounts_iter)?;

    let rent = Rent::get()?;

    // Checking if payer account is the signer
    if !payer_account.is_signer {
        return Err(ProgramError::MissingRequiredSignature);
    }

    // Checking if hello state account is rent exempt
    if !rent.is_exempt(hello_state_account.lamports(), 1) {
        return Err(ProgramError::AccountNotRentExempt);
    }

    // Checking if hello state account is writable
    if !hello_state_account.is_writable {
        return Err(ProgramError::InvalidAccountData);
    }

    // Checking if hello state account's owner is the current program
    if hello_state_account.owner.ne(&program_id) {
        return Err(ProgramError::IllegalOwner);
    }

    // Checking if the system program is valid
    if system_program.key.ne(&SYSTEM_PROGRAM_ID) {
        return Err(ProgramError::IncorrectProgramId);
    }

    let mut hello_state = HelloState::try_from_slice(&hello_state_account.data.borrow())?;

    // Checking if the state has already been initialized
    if hello_state.is_initialized {
        return Err(ProgramError::AccountAlreadyInitialized);
    }

    hello_state.is_initialized = true;
    hello_state.serialize(&mut &mut hello_state_account.data.borrow_mut()[..])?;
    msg!(""Account initialized :)"");

    Ok(())
}
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# Làm thế nào để đọc nhiều chỉ thị từ một TransactionSolana cho phép xử lý tất các các chỉ thị trong transaction hiện tại. Bạn có thể lưu chúng vào một biến và tương tác dần với chúng. Bạn có thể làm rất nhiều thứ với chúng, ví như kiểm tra các transaction đáng nghi.RustPress </> button to view full sourceuse anchor_lang::{
    prelude::*,
    solana_program::{
        sysvar,
        serialize_utils::{read_pubkey,read_u16}
    }
};


declare_id!(""8DJXJRV8DBFjJDYyU9cTHBVK1F1CTCi6JUBDVfyBxqsT"");

#[program]
pub mod cookbook {
    use super::*;

    pub fn read_multiple_instruction<'info>(ctx: Context<ReadMultipleInstruction>, creator_bump: u8) -> Result<()> {
        let instruction_sysvar_account = &ctx.accounts.instruction_sysvar_account;

        let instruction_sysvar_account_info = instruction_sysvar_account.to_account_info();

        let id = ""8DJXJRV8DBFjJDYyU9cTHBVK1F1CTCi6JUBDVfyBxqsT"";

        let instruction_sysvar = instruction_sysvar_account_info.data.borrow();

        let mut idx = 0;

        let num_instructions = read_u16(&mut idx, &instruction_sysvar)
        .map_err(|_| MyError::NoInstructionFound)?;

        for index in 0..num_instructions {
            let mut current = 2 +","[-4.59712893e-02  6.37626424e-02 -4.31196652e-02 -9.58618056e-03
 -1.52708990e-02 -1.42616741e-02  7.95888901e-02  3.20460610e-02
 -4.48381081e-02  1.69827640e-02  5.37253506e-02 -7.87154287e-02
  8.85740761e-03 -2.27753129e-02  4.07834202e-02 -1.87832937e-02
 -4.59440053e-02  5.42953983e-03 -3.49565613e-04 -3.87138613e-02
  9.84202400e-02 -1.75119173e-02 -2.75202934e-02  2.21413318e-02
  1.38110425e-02 -4.21823040e-02  3.10684647e-02  4.94881347e-02
  3.35576460e-02 -2.40023546e-02  4.69264202e-02 -2.83187553e-02
 -1.13239102e-02  1.48924179e-02  8.42292979e-02  4.41136137e-02
  2.24453118e-02 -9.42987576e-02 -2.24399734e-02 -5.28494418e-02
 -4.70959023e-02  8.63407645e-03 -5.34564331e-02 -1.36739286e-02
 -3.70607758e-03  1.82487927e-02 -2.17759758e-02  3.34073491e-02
 -3.71279148e-03 -1.97337978e-02  4.27736668e-03  3.33728120e-02
 -9.18748265e-04  1.29653271e-02  1.50002539e-02  4.82504809e-04
  7.12090805e-02 -9.27331522e-02 -8.39564856e-03 -2.09196135e-02
 -5.92760332e-02  2.72509605e-02  1.79031980e-03  6.48033200e-03
  3.45013133e-04  7.51168579e-02 -6.18012249e-02  2.73622945e-02
 -3.02667562e-02 -3.91670726e-02 -1.95046477e-02 -4.36200723e-02
 -6.32254407e-02 -2.59346720e-02 -3.26550417e-02 -7.23474252e-04
  1.49998930e-03  2.92338785e-02 -1.17188813e-02 -8.46775025e-02
 -8.26082230e-02 -4.03125547e-02  2.78544612e-04  1.71565060e-02
  1.29698301e-02 -1.08830882e-02 -5.06690852e-02 -6.14427403e-02
  9.33747590e-02  4.88926694e-02  1.40642477e-02  5.45459911e-02
 -1.21643683e-02 -9.04889591e-03  1.31142065e-01  3.61236855e-02
  3.14404210e-03 -4.31656018e-02 -3.09055783e-02  9.03958008e-02
 -5.41734546e-02  2.36948095e-02  8.67399052e-02  1.76093951e-02
  5.69346659e-02 -5.01836231e-03  7.35048056e-02 -7.29244724e-02
 -7.41323754e-02 -1.98351238e-02  3.50502692e-03  1.05247177e-01
  7.08279759e-02  1.89448497e-03  3.47607164e-03  3.99785042e-02
 -5.40249720e-02  1.58194117e-02  3.63591462e-02  2.37671584e-02
  8.58725086e-02  2.28509568e-02 -4.36649285e-02  5.17510762e-03
 -2.45188456e-02 -4.19577658e-02  1.12255034e-03  2.48288651e-33
 -2.65887771e-02 -2.86484621e-02 -3.30321975e-02  5.37317172e-02
 -7.80247077e-02  2.21811589e-02  3.24149318e-02  4.96296845e-02
 -8.62702206e-02  8.46391544e-02  3.74950767e-02 -3.34525481e-02
 -3.02885808e-02 -7.47276284e-03  1.23350266e-02 -2.65203267e-02
  8.73955488e-02 -1.95609103e-03  8.02535638e-02  7.99486488e-02
  7.22459182e-02  1.99768925e-03 -1.54694868e-03 -4.66639064e-02
  2.69138794e-02  1.89238489e-02 -7.73301721e-02  7.03658955e-03
 -3.24080512e-02 -9.30667762e-03  5.79703897e-02 -5.56225628e-02
  1.54607641e-02  3.18932813e-04  5.96499629e-02 -6.34158775e-02
  3.36106010e-02  9.55040660e-03 -8.80336612e-02 -6.72742352e-02
  7.79962316e-02 -2.88454071e-02  2.48494633e-02 -2.80625783e-02
 -5.64213702e-03 -4.21554111e-02  6.31889654e-03 -3.00324950e-02
  7.10171610e-02  9.39227864e-02  2.62732487e-02  3.16582583e-02
 -1.48495570e-01 -6.25292659e-02 -9.92393121e-03 -6.10816404e-02
 -4.43675788e-03 -1.06832292e-02 -4.69028503e-02 -5.16581051e-02
 -3.08209322e-02 -2.19034161e-02 -2.55380329e-02 -2.66045071e-02
 -3.60224545e-02 -2.15937458e-02 -3.44194956e-02 -2.14930251e-02
  1.03284352e-01 -5.21685779e-02 -4.89811301e-02  3.91070778e-03
 -2.35666614e-02  6.52862266e-02  4.28823847e-03 -5.61420294e-03
 -1.09995564e-03 -1.25706987e-02 -5.11948057e-02 -6.18220717e-02
  3.21805179e-02 -2.34193988e-02 -1.36076942e-01  1.23352088e-01
 -5.72024472e-02  8.26719329e-02  1.59463994e-02 -6.25668326e-03
 -5.10292426e-02  5.80657572e-02  4.35211919e-02 -7.49801844e-02
 -2.55077705e-02 -1.41335484e-02 -2.43333243e-02 -5.42013319e-33
  2.94356681e-02 -6.74186125e-02 -2.92509068e-02 -9.36060622e-02
 -6.66150972e-02 -7.35320477e-03  6.45757392e-02 -3.03935762e-02
 -4.15680930e-02  1.08505581e-02 -6.87915012e-02 -5.53290593e-03
  9.34650674e-02  1.50733981e-02  6.52120262e-02  6.20440915e-02
 -4.00132835e-02 -4.64485632e-03  5.11574559e-02  6.37331158e-02
 -1.77148525e-02  1.37490064e-01  2.81810127e-02  1.13404784e-02
 -9.82403662e-03  5.00926673e-02 -8.02562833e-02  9.89890024e-02
  1.29092373e-02  5.10034710e-03  6.62266742e-03 -4.52813134e-02
  2.55149673e-03  9.95064750e-02 -3.00149638e-02 -1.42317280e-01
  6.35548607e-02  2.39036344e-02 -5.70760034e-02  3.14442217e-02
  1.26950040e-01 -4.51099686e-02 -6.89389035e-02 -6.45848084e-03
  3.40576493e-03  2.47194208e-02  4.48227935e-02 -1.01233386e-02
 -3.33067141e-02  4.15328667e-02 -2.00274866e-02 -2.45709848e-02
 -3.32655460e-02 -1.09462738e-02 -4.27619703e-02  1.12929232e-02
  1.59097090e-01 -8.00066888e-02  5.27313612e-02 -2.28939950e-02
  4.25277874e-02 -5.92418388e-02  3.04925330e-02  4.31163684e-02
  4.40979563e-02 -5.17239682e-02 -2.97923870e-02 -1.24675781e-02
  1.42458960e-01  8.25724844e-03 -8.03367584e-05  6.76109502e-03
  6.51317136e-03 -7.94123635e-02  6.88725635e-02  9.69957709e-02
  1.67993661e-02 -5.51601164e-02 -2.41913311e-02 -3.01594776e-03
 -8.50403979e-02  1.06480923e-02 -2.03028731e-02  1.05567416e-02
 -1.38650173e-02 -5.43918721e-02  7.88516849e-02 -3.18015032e-02
 -2.42208354e-02  1.30227124e-02 -2.96503175e-02  4.60471846e-02
 -3.54101248e-02 -1.78843085e-02 -6.66126981e-02 -5.85854103e-08
 -6.18535616e-02 -7.48294368e-02  2.69934405e-02  7.04090744e-02
  2.30920408e-02 -7.53397197e-02  1.43584581e-02 -8.42624083e-02
 -8.31154808e-02 -6.27219379e-02 -2.43672784e-02  6.71321824e-02
 -4.15611528e-02 -8.54115039e-02  2.76977271e-02 -5.69973662e-02
 -1.78617798e-03 -1.79353319e-02 -7.21846074e-02  1.76622067e-02
 -3.78434286e-02  2.89563965e-02 -8.81831646e-02  2.57603526e-02
 -4.58621904e-02 -9.52479523e-03  3.62990685e-02  8.63664150e-02
  1.24512747e-01  1.98617410e-02  7.87081197e-02  5.28600477e-02
  3.43422070e-02 -4.25468758e-02 -6.74164295e-02  3.35555375e-02
  4.32317406e-02  1.84354745e-02  6.12042993e-02 -1.53768444e-02
  1.52707873e-02  4.10399996e-02 -5.74140064e-02 -1.14266463e-02
 -3.80762876e-03  2.04801708e-02 -4.60145026e-02 -9.43842009e-02
  1.14792690e-01 -5.78479432e-02 -1.08055010e-01 -4.20557410e-02
  7.05316779e-04  7.66659006e-02 -7.21976236e-02 -4.34650779e-02
  2.04484016e-02 -1.84257124e-02 -7.55064236e-03  3.87982801e-02
  4.19652015e-02  2.35863831e-02 -6.28700331e-02 -3.99522521e-02]"
"(index * 2) as usize;
            let start = read_u16(&mut current, &instruction_sysvar).unwrap();

            current = start as usize;
            let num_accounts = read_u16(&mut current, &instruction_sysvar).unwrap();
            current += (num_accounts as usize) * (1 + 32);
            let program_id = read_pubkey(&mut current, &instruction_sysvar).unwrap();

            if program_id != id
            {
                msg!(""Transaction had ix with program id {}"", program_id);
                return Err(MyError::SuspiciousTransaction.into());
            }
        }

        Ok(())
    }

}

#[derive(Accounts)]
#[instruction(creator_bump:u8)]
pub struct ReadMultipleInstruction<'info> {
    #[account(address = sysvar::instructions::id())]
    instruction_sysvar_account: UncheckedAccount<'info>
}

#[error_code]
pub enum MyError {
    #[msg(""No instructions found"")]
    NoInstructionFound,
    #[msg(""Suspicious transaction detected"")]
    SuspiciousTransaction
}
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364let mut idx = 0;
let num_instructions = read_u16(&mut idx, &instruction_sysvar)
.map_err(|_| MyError::NoInstructionFound)?;


for index in 0..num_instructions {
    
    let mut current = 2 + (index * 2) as usize;
    let start = read_u16(&mut current, &instruction_sysvar).unwrap();

    current = start as usize;
    let num_accounts = read_u16(&mut current, &instruction_sysvar).unwrap();
    current += (num_accounts as usize) * (1 + 32);

}
123456789101112131415 # Non Fungible Tokens (NFTs)# Làm thế nào để tạo một NFTĐể tạo một NFT bạn phải:Đăng tải ảnh lên IPFS ví như ArweaveĐăng tải json metadata lên IPFS ví như ArweaveGọi metaplex để tạo một account cho NFT# Đăng tải lên ArweaveTSPythonPress </> button to view full sourceimport fs from ""fs"";
import Arweave from ""arweave"";

(async () => {
  const arweave = Arweave.init({
    host: ""arweave.net"",
    port: 443,
    protocol: ""https"",
    timeout: 20000,
    logging: false,
  });

  // Upload image to Arweave
  const data = fs.readFileSync(""./code/nfts/arweave-upload/lowres-dog.png"");

  const transaction = await arweave.createTransaction({
    data: data,
  });

  transaction.addTag(""Content-Type"", ""image/png"");

  const wallet = JSON.parse(fs.readFileSync(""wallet.json"", ""utf-8""))
  
  await arweave.transactions.sign(transaction, wallet);

  const response = await arweave.transactions.post(transaction);
  console.log(response);

  const id = transaction.id;
  const imageUrl = id ? `https://arweave.net/${id}` : undefined;
  console.log(""imageUrl"", imageUrl);

  // Upload metadata to Arweave

  const metadata = {
    name: ""Custom NFT #1"",
    symbol: ""CNFT"",
    description: ""A description about my custom NFT #1"",
    seller_fee_basis_points: 500,
    external_url: ""https://www.customnft.com/"",
    attributes: [
      {
     ","[ 5.68605401e-03  5.11617772e-02 -4.81782220e-02 -2.38344371e-02
  8.42203666e-03 -3.76358591e-02  1.03253521e-01  3.44411954e-02
  1.10578761e-02  1.99155211e-02  7.56774619e-02  2.67128181e-02
  9.04380158e-03 -1.54753895e-02 -3.56248617e-02  7.46143097e-03
 -1.30925074e-01 -2.89194100e-02 -2.76215896e-02 -4.76578530e-03
  2.82661673e-02  7.60437995e-02 -7.76455156e-04  5.88523075e-02
 -2.91504748e-02 -2.30676625e-02 -3.52759995e-02  1.74340308e-02
 -5.04005468e-03 -7.91606680e-02  8.77517238e-02  2.83037522e-03
 -2.36899573e-02  2.23952886e-02  9.75477248e-02  9.87552330e-02
 -1.38838915e-02 -9.33425426e-02  2.94268876e-02 -3.43522653e-02
 -5.59369102e-02  4.49342951e-02 -5.43822348e-02  9.06192288e-02
  5.19024320e-02  3.80247161e-02 -7.78421313e-02 -2.62562564e-04
  8.12014751e-03  3.32735628e-02 -5.43217212e-02  1.51928347e-02
  5.78071084e-03 -2.57582199e-02 -1.01023901e-03  1.85319595e-02
  8.02472234e-03 -3.86328734e-02  3.46825942e-02 -3.25202418e-04
 -3.97696719e-02 -1.24018947e-02  6.16198070e-02 -6.09001182e-02
 -3.67121398e-02  5.52848540e-02 -7.24931434e-03 -1.87108014e-02
  2.28749420e-02  2.28343513e-02  3.92159000e-02 -3.44928354e-02
 -5.70740327e-02  5.93534485e-02 -9.02139246e-02 -1.79892369e-02
 -3.76260355e-02 -1.15216093e-03 -4.22674567e-02 -7.92929530e-02
 -8.52817446e-02 -7.32692424e-03  3.80532853e-02  3.72897759e-02
  2.55389716e-02  5.27229086e-02 -1.91554334e-03 -6.25669956e-02
  1.03844352e-01  4.15781774e-02  7.86428060e-03 -7.44588673e-02
 -3.07243410e-02  1.96734574e-02  1.55451834e-01  3.76237631e-02
  1.75380036e-02 -5.25711738e-02 -6.45812675e-02  8.81740153e-02
 -2.88887452e-02  8.04208294e-02 -2.23352276e-02 -2.80968063e-02
  5.11250421e-02  1.23615358e-02  9.45726261e-02 -4.38339189e-02
 -9.66779813e-02 -2.14452241e-02  1.23665007e-02  1.20082557e-01
 -1.78640266e-03  4.97224070e-02  2.28889398e-02  1.59662031e-02
  6.24347255e-02  2.55970415e-02 -1.82547234e-02  2.40799282e-02
  1.22083120e-01  5.61139509e-02 -6.92733005e-02  5.84422648e-02
 -1.46986172e-01 -1.05125353e-01  1.73880626e-02  5.51331316e-33
 -2.38828119e-02  1.46155776e-02 -1.31826758e-01  2.26167049e-02
  2.86117732e-03 -5.45209879e-03  2.54809596e-02  4.02329303e-02
 -1.32839590e-01  5.78321666e-02 -4.80402485e-02 -5.48148304e-02
 -4.69846316e-02  6.28638640e-03  4.67478745e-02 -3.30894589e-02
  7.34737590e-02  6.64295107e-02  5.85280769e-02  8.40711500e-03
  5.25482744e-02 -4.02918942e-02 -5.13777733e-02 -3.35832052e-02
 -1.23297460e-02  8.98255222e-03 -1.06614523e-01  1.54379839e-02
 -2.34172307e-03 -1.76115911e-02  1.27042485e-02 -6.73422171e-03
 -5.01267575e-02  2.71937530e-03  1.07203655e-01 -9.45039690e-02
  5.09173004e-03 -3.66076343e-02 -2.65674181e-02 -1.82968453e-02
  6.96456730e-02  1.26408944e-02  2.61104456e-03 -2.39340030e-03
  2.00177054e-03  1.52140725e-02 -3.87497284e-02  8.18746071e-03
  5.66566624e-02 -2.86915042e-02 -4.09252383e-02  7.03221560e-02
 -1.54079804e-02 -1.09547459e-01 -2.96654962e-02 -4.71749455e-02
  2.98134163e-02 -9.46586719e-04  1.26748653e-02  4.53085303e-02
 -2.41343491e-02  7.72394389e-02  5.50538418e-04  2.20336318e-02
 -4.12000865e-02 -5.00075221e-02 -6.07948527e-02 -5.90643100e-03
  4.05475907e-02 -4.94348928e-02 -9.60542932e-02  2.16818713e-02
  1.05193388e-02  3.96220200e-02 -7.67487809e-02 -7.04793930e-02
 -2.97831409e-02 -1.24596255e-02  2.93044988e-02 -1.08112335e-01
  1.50664141e-02 -8.62866268e-03 -5.84149547e-02  8.00856575e-02
 -2.28030980e-02  6.37117401e-02 -2.91434284e-02  7.91189820e-03
 -6.03189170e-02  9.63906050e-02  1.70721747e-02 -5.95383011e-02
 -2.32259147e-02 -6.78858534e-02 -1.95047539e-02 -8.05270054e-33
  9.87030379e-03 -3.73104811e-02 -7.74909230e-03 -3.51504683e-02
 -7.35665411e-02 -5.24963252e-02  4.23070192e-02 -3.06171435e-03
  8.21684673e-03 -1.31764039e-02 -1.79926921e-02  3.78783643e-02
  2.06779484e-02 -9.69929271e-04  4.00034934e-02  6.90801367e-02
 -7.31208026e-02 -2.14288849e-02  2.35704798e-02  3.29451896e-02
 -3.09398882e-02  1.07419081e-01  2.21852846e-02  3.86422239e-02
 -4.43949401e-02  7.62045756e-02  2.43932772e-02  6.70335889e-02
 -1.78091954e-02 -1.14818420e-02  1.67368224e-03  6.18748041e-03
 -1.88100655e-02  1.13932438e-01  1.20227132e-02 -1.15475260e-01
  4.00771908e-02  3.69474255e-02 -3.73238027e-02 -9.78498720e-03
  1.63395286e-01  6.90608174e-02 -4.90166359e-02 -3.19401436e-02
  6.36879448e-03  4.27539125e-02  2.34884247e-02  1.98146384e-02
  1.82982180e-02 -3.64276581e-02  1.97907630e-02 -4.07319181e-02
  2.90044025e-02 -1.81136653e-02 -3.81649695e-02 -1.16867863e-03
  1.06201261e-01 -1.28335923e-01  2.02885773e-02 -4.91576828e-02
  3.90269957e-03 -3.14558484e-02  1.65107492e-02 -2.16648006e-03
  7.73138404e-02 -1.15715154e-01 -6.10037781e-02 -4.64168340e-02
  8.80791992e-03  2.57139131e-02  2.56841704e-02 -3.20564620e-02
 -5.29915467e-03 -8.70181397e-02  5.73666282e-02  2.57460270e-02
 -5.77368625e-02 -7.95465782e-02 -9.67597868e-03  4.93662581e-02
 -4.42292914e-03  5.33293299e-02  2.25456189e-02  2.98767146e-02
 -1.72867498e-03 -2.64030769e-02  2.82679759e-02  5.33652604e-02
 -5.03790043e-02  3.17334547e-03 -8.51855334e-03 -5.47379255e-02
  1.78806186e-02 -3.12826745e-02 -4.07590792e-02 -5.72942973e-08
 -6.65353388e-02 -2.25606859e-02  3.62516148e-03  3.91908884e-02
  8.01487938e-02 -9.85262915e-02 -5.86814508e-02 -2.36334950e-02
 -3.97536121e-02 -8.06091949e-02 -2.94112973e-02  3.88331860e-02
 -5.96207753e-02 -5.89298680e-02  6.37317915e-03 -4.01911475e-02
 -6.74227774e-02  1.07193114e-02 -3.49744335e-02 -4.13113721e-02
  9.45550855e-03  9.28336289e-03 -3.54425907e-02 -1.80456683e-03
  1.18308607e-02 -1.76953301e-02  7.75423795e-02  1.10805064e-01
  7.45804086e-02 -2.26844288e-02  6.29302785e-02 -2.18364298e-02
  4.39939164e-02  3.86313424e-02 -8.39154199e-02 -2.43582949e-02
  7.13473707e-02 -7.59916287e-03  8.35505351e-02 -1.24813979e-02
  1.24483062e-02 -8.75063986e-03 -2.65152827e-02  3.97759266e-02
 -5.00303172e-02 -7.36056734e-03 -6.58847690e-02 -2.95293890e-02
  9.37270224e-02  9.88611486e-03  7.57904351e-03 -3.87808792e-02
  1.45505797e-02  9.34074298e-02 -2.77793910e-02 -3.00929751e-02
  8.10380839e-03 -6.08637184e-02 -5.53976558e-02  2.57956814e-02
  5.62095046e-02 -1.93545204e-02  1.89783834e-02 -5.21744117e-02]"
"  trait_type: ""NFT type"",
        value: ""Custom"",
      },
    ],
    collection: {
      name: ""Test Collection"",
      family: ""Custom NFTs"",
    },
    properties: {
      files: [
        {
          uri: imageUrl,
          type: ""image/png"",
        },
      ],
      category: ""image"",
      maxSupply: 0,
      creators: [
        {
          address: ""CBBUMHRmbVUck99mTCip5sHP16kzGj3QTYB8K3XxwmQx"",
          share: 100,
        },
      ],
    },
    image: imageUrl,
  };

  const metadataRequest = JSON.stringify(metadata);

  const metadataTransaction = await arweave.createTransaction({
    data: metadataRequest,
  });

  metadataTransaction.addTag(""Content-Type"", ""application/json"");

  await arweave.transactions.sign(metadataTransaction, wallet);

  console.log(""metadata txid"", metadataTransaction.id);

  console.log(await arweave.transactions.post(metadataTransaction));
})();
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283// 1. Upload image to Arweave
const data = fs.readFileSync(""./code/nfts/arweave-upload/lowres-dog.png"");

const transaction = await arweave.createTransaction({
  data: data,
});

transaction.addTag(""Content-Type"", ""image/png"");

const wallet = JSON.parse(fs.readFileSync(""wallet.json"", ""utf-8""))
await arweave.transactions.sign(transaction, wallet);

const response = await arweave.transactions.post(transaction);
console.log(response);

const id = transaction.id;
const imageUrl = id ? `https://arweave.net/${id}` : undefined;

// 2. Upload metadata to Arweave

const metadataRequest = JSON.stringify(metadata);

const metadataTransaction = await arweave.createTransaction({
  data: metadataRequest,
});

metadataTransaction.addTag(""Content-Type"", ""application/json"");

await arweave.transactions.sign(metadataTransaction, wallet);

await arweave.transactions.post(metadataTransaction);
12345678910111213141516171819202122232425262728293031from arweave.arweave_lib import Wallet, Transaction, API_URL
import json

# Load your arweave wallet
your_ar_wallet = Wallet('wallet.json')

with open('./code/nfts/arweave-upload/lowres-dog.png', 'rb') as f:
    img_in_bytes = f.read()

# Upload image to Arweave
transaction = Transaction(your_ar_wallet, data=img_in_bytes)
transaction.add_tag('Content-Type', 'image/png')
transaction.sign()
transaction.send()

image_url = API_URL+""/""+transaction.id

# Define metadata
metadata = {
    ""name"": ""Custom NFT #1"",
    ""symbol"": ""CNFT"",
    ""description"": ""A description about my custom NFT #1"",
    ""seller_fee_basis_points"": 500,
    ""external_url"": ""https://www.customnft.com/"",
    ""attributes"": [
        {
            ""trait_type"": ""NFT type"",
            ""value"": ""Custom""
        }
    ],
    ""collection"": {
        ""name"": ""Test Collection"",
        ""family"": ""Custom NFTs"",
    },
    ""properties"": {
        ""files"": [
            {
                ""uri"": image_url,
                ""type"": ""image/png"",
            },
        ],
        ""category"": ""image"",
     ","[ 2.22038710e-03  6.93849027e-02 -2.74668651e-04  6.58375174e-02
  1.05806522e-03 -1.64168309e-02 -1.66543927e-02  8.39903876e-02
 -8.92153289e-03 -3.06664035e-02  4.88620177e-02 -5.35765141e-02
 -5.24764732e-02  7.69396275e-02  3.03063579e-02  5.64785339e-02
 -1.31222203e-01 -2.39062198e-02 -4.45474014e-02  1.73200462e-02
  2.07360201e-02 -2.53198314e-02  1.30552948e-01 -8.91731605e-02
 -1.85417216e-02 -1.07294330e-02 -2.20811255e-02 -7.39359036e-02
  5.19991592e-02 -7.17681199e-02  1.21132381e-01  2.39464268e-02
 -2.98863836e-02  2.23413203e-02  6.35326877e-02  7.52585828e-02
 -1.36600304e-02 -2.59119701e-02 -2.46226229e-02 -5.37743419e-02
  6.46973625e-02  4.33915555e-02 -1.07517997e-02 -8.74660164e-02
 -1.46197639e-02 -1.87418088e-02  1.54890222e-02 -2.87091415e-02
  3.73097137e-02  4.02229838e-02 -5.73125109e-02 -6.64873514e-03
 -7.83226341e-02  3.55560929e-02  8.27253312e-02  5.57747670e-02
 -7.99556151e-02 -2.24393737e-02  8.84771068e-03  2.70015914e-02
  7.97157064e-02 -5.64253330e-02 -1.96816735e-02 -4.34268340e-02
  4.07758988e-02  3.91648449e-02  1.92794558e-02 -3.37716378e-02
  2.60016695e-02 -7.36363977e-02  3.80543917e-02 -1.43074049e-02
 -8.15890357e-03  1.22204311e-02 -4.33490276e-02 -3.05144908e-03
 -3.50466254e-03 -6.10321015e-03 -1.16504934e-02 -5.47392033e-02
  2.79055852e-02 -1.53428577e-02  1.91936977e-02  2.10430399e-02
  9.10604671e-02  2.78133377e-02 -9.80523676e-02 -2.51763165e-02
 -6.70776367e-02 -3.73231731e-02 -7.29443654e-02 -1.62951034e-02
 -6.86985850e-02  4.64445241e-02  2.77314931e-02  5.68702370e-02
 -6.16512727e-03 -2.69442238e-02 -1.94045883e-02  6.22542202e-02
  5.16342036e-02  3.80428159e-03  1.02925776e-02  6.82394505e-02
  3.47492248e-02  1.01462165e-02  2.33515073e-02  3.52271274e-02
 -9.47758630e-02  6.65924251e-02 -2.53833421e-02  4.67290692e-02
 -8.07113722e-02 -1.27799259e-02 -3.91131714e-02  3.41505781e-02
 -9.48129073e-02  9.92226508e-03 -2.27397289e-02  2.21622083e-02
  9.96661261e-02 -5.63922003e-02 -5.16123734e-02 -2.34918073e-02
  5.28202439e-03 -3.36158276e-02 -3.79475169e-02  7.92676689e-33
  6.73084855e-02 -1.75318870e-04  2.21950561e-02  5.57151102e-02
  1.92588232e-02 -4.83300313e-02  3.37547585e-02 -8.76381807e-03
 -1.16232835e-01 -5.71426600e-02 -7.28123402e-03  1.69834383e-02
 -9.01022181e-02  1.93535946e-02 -4.62211296e-02 -1.93485450e-02
 -4.03001830e-02  2.91188210e-02  7.68625438e-02  4.35443260e-02
 -7.68288597e-03  4.06762473e-02 -4.74560820e-02 -1.08709363e-02
 -9.95434076e-02 -6.47217482e-02 -2.86666490e-02  1.00033507e-02
 -2.76670456e-02 -2.48174593e-02  8.96111503e-02  1.59678683e-02
  4.63373922e-02  6.88431188e-02  7.31127709e-02 -5.87065779e-02
  6.86045736e-03  2.56397109e-02 -1.29728690e-01 -8.53280444e-03
  9.76393446e-02  2.33481172e-02 -5.36470488e-02 -3.10227480e-02
 -8.57479572e-02 -2.97468565e-02 -5.92079340e-03 -4.26577590e-02
 -2.75300201e-02  1.20342402e-02 -2.33471710e-02  5.87582253e-02
 -6.04496486e-02 -1.48294102e-02  4.47965004e-02  2.91727111e-03
 -3.42276990e-02  2.20968993e-03 -2.97249351e-02 -2.67549325e-02
 -2.08126828e-02  8.94599631e-02  4.98736612e-02 -9.97193344e-03
  1.70655325e-02 -5.12998272e-03  3.51891667e-02  2.07318608e-02
 -1.39665632e-02  9.13242530e-03  4.44905497e-02  8.33190531e-02
 -4.87746410e-02 -4.01251763e-02  7.87793025e-02 -3.72349471e-02
 -3.62085626e-02  2.64675617e-02 -5.18533662e-02  7.08546815e-03
  1.55622745e-03 -5.64410491e-03 -5.06568626e-02  4.22582477e-02
 -4.81829569e-02  4.54664454e-02  2.51242835e-02 -1.00044170e-02
  6.31885529e-02 -6.28377274e-02  7.02253915e-03  2.96109505e-02
 -3.12499907e-02 -8.97132158e-02 -2.53322795e-02 -7.85755672e-33
  7.60606825e-02 -2.54698358e-02 -1.60063338e-02 -2.22547632e-02
  3.21500786e-02 -1.37706997e-03  1.11741334e-01  8.43603835e-02
 -2.28523947e-02  6.78197816e-02  5.41083664e-02  1.67066429e-03
 -6.14338815e-02 -6.65263906e-02 -5.53216077e-02 -4.54999991e-02
 -2.89426465e-02 -6.88989460e-02  3.86654288e-02 -5.40930815e-02
 -1.96489766e-02  7.54792467e-02  1.03530521e-02  1.20756879e-01
 -9.11965072e-02  3.66045758e-02 -3.57165299e-02  3.04737524e-03
 -6.32690489e-02 -2.34258547e-02  1.76802184e-02  5.99347465e-02
 -5.92045933e-02  2.54681055e-02  1.08178042e-01 -6.22947402e-02
  6.09744759e-03  6.77393749e-02 -3.73865031e-02  2.47631185e-02
 -3.30414735e-02  2.86434758e-02 -2.95385607e-02  3.14208902e-02
  1.35269221e-02 -1.12376437e-01  5.37889451e-02 -2.21702713e-03
  9.77422744e-02 -9.29266587e-03  5.90282567e-02 -6.23065457e-02
  8.19963496e-03  6.11965684e-03  2.92440634e-02  3.56764980e-02
  7.20454380e-02 -1.00756638e-01  1.05092591e-02  7.17736110e-02
  4.79314663e-02 -9.88220051e-02 -8.02216753e-02 -5.40835224e-02
  3.37184779e-02 -6.78538680e-02 -1.05263710e-01 -8.80580097e-02
 -1.74758602e-02  9.88875404e-02 -8.48705545e-02 -7.88600557e-03
  6.28580227e-02 -1.64769068e-02  7.41514936e-02 -5.21639846e-02
  7.17253089e-02 -8.70268978e-03  9.48392227e-02 -8.66137743e-02
 -1.54089788e-02  3.81760485e-03 -2.04179698e-04  1.35055017e-02
  8.00571889e-02 -2.27699187e-02 -2.64114533e-02  8.74936730e-02
 -2.36660969e-02  2.58854069e-02 -1.67040748e-03 -1.37223564e-02
 -3.18817273e-02 -1.42399129e-02  7.13771358e-02 -5.75515031e-08
 -1.15587734e-01 -3.68174240e-02 -8.91839042e-02 -3.38116358e-03
  3.51249166e-02  1.87067706e-02  2.18267422e-02 -5.54567017e-02
  6.15132041e-02 -1.09427243e-01  2.63940040e-02  4.74509597e-02
 -5.25586568e-02  8.76542181e-03 -2.21939897e-03 -2.56481431e-02
  2.49629747e-02  6.12104163e-02  2.52720201e-03 -2.85841199e-03
 -4.49680500e-02 -5.86021282e-02 -3.67860980e-02 -4.51938510e-02
 -5.37269702e-03  2.87957713e-02  1.03653863e-01 -1.03395954e-02
  1.52098211e-02  5.65547720e-02 -1.27347143e-04  1.19155680e-03
  3.79871018e-02 -1.14201643e-02 -5.76103739e-02 -2.73679709e-03
  6.90900385e-02 -1.56649966e-02 -1.70615893e-02 -3.08270901e-02
  2.90953517e-02  7.81284198e-02 -4.47137393e-02 -1.72936171e-03
  2.71247383e-02 -2.43130606e-02  8.98952037e-03  1.10219613e-01
 -1.79766417e-02  9.48861465e-02  1.75509304e-02 -6.07395172e-02
 -2.64903978e-02  1.81991607e-02 -4.26732004e-02 -4.69860137e-02
  1.94211099e-02  1.27275698e-02 -3.22245844e-02  2.41166260e-02
  1.55597463e-01 -5.85263446e-02 -3.91778955e-03  2.99761334e-04]"
"  ""maxSupply"": 0,
        ""creators"": [
            {
                ""address"": ""CBBUMHRmbVUck99mTCip5sHP16kzGj3QTYB8K3XxwmQx"",
                ""share"": 100,
            },
        ],
    },
    ""image"": image_url,
}

# Upload metadata to Arweave
meta_transaction = Transaction(your_ar_wallet, data=json.dumps(metadata))
meta_transaction.add_tag('Content-Type', 'text/html')
meta_transaction.sign()
meta_transaction.send()

metadata_url = API_URL+""/""+meta_transaction.id

print(metadata_url)
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#  1. Load your arweave wallet
your_ar_wallet = Wallet('wallet.json')

#  2. Upload image to Arweave
with open('./code/nfts/arweave-upload/lowres-dog.png', 'rb') as f:
    img_in_bytes = f.read()

transaction = Transaction(your_ar_wallet, data=img_in_bytes)
transaction.add_tag('Content-Type', 'image/png')
transaction.sign()
transaction.send()

image_url = API_URL+""/""+transaction.id

#  3. Upload metadata to Arweave
meta_transaction = Transaction(your_ar_wallet, data=json.dumps(metadata))
meta_transaction.add_tag('Content-Type', 'text/html')
meta_transaction.sign()
meta_transaction.send()

metadata_url = API_URL+""/""+meta_transaction.id
123456789101112131415161718192021# Đúc NFTNếu bạn đã đăng tải ảnh và metadata, bạn có thể đúc NFT với đoạn mã bên dưới.TSPress </> button to view full sourceimport { Metaplex, keypairIdentity } from ""@metaplex-foundation/js"";
import {
  Connection,
  clusterApiUrl,
  Keypair,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import dotenv from ""dotenv"";

dotenv.config();

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const keypair = Keypair.fromSecretKey(
    Buffer.from(JSON.parse(process.env.SOLANA_KEYPAIR!.toString()))
  );

  const metaplex = new Metaplex(connection);
  metaplex.use(keypairIdentity(keypair));

  const feePayerAirdropSignature = await connection.requestAirdrop(
    keypair.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(feePayerAirdropSignature);

  const mintNFTResponse = await metaplex.nfts().create({
    uri: ""https://ffaaqinzhkt4ukhbohixfliubnvpjgyedi3f2iccrq4efh3s.arweave.net/KUAIIbk6p8oo4XHRcq0U__C2r0mwQaNl0gQow4Qp9yk"",
    maxSupply: 1,
  });

  console.log(mintNFTResponse);
})();
123456789101112131415161718192021222324252627282930313233const mintNFTResponse = await metaplex.nfts().create({
  uri: ""https://ffaaqinzhkt4ukhbohixfliubnvpjgyedi3f2iccrq4efh3s.arweave.net/KUAIIbk6p8oo4XHRcq0U__C2r0mwQaNl0gQow4Qp9yk"",
  maxSupply: 1,
});
1234Lưu ýBạn không thể đúc một NFT với một địa chỉ khác ngoài ví của bạn. Nếu bạn gặp phải vấn đề địa chỉ người tạo, bạn nên đảm bảo rằng metadata liệt kê bạn là người tạo hợp lệ.# Làm thế nào để truy vấn NFT MetadataCác Metaplex NFT có metadata được lưu trên Arweave. Để có thể truy vấn được Arweave metadata, bạn phải thông qua Metaplex PDA và giải mã dữ liệu trong account đó.TSPress </> button to view full sourceimport { Metaplex, keypairIdentity } from ""@metaplex-foundation/js"";
import { Connection, clusterApiUrl, Keypair, PublicKey } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));
  const keypair = Keypair.generate();

  const metaplex = new Metaplex(connection);
  metaplex.use(keypairIdentity(keypair));

  const mintAddress = new PublicKey(
    ""Ay1U9DWphDgc7hq58Yj1yHabt91zTzvV2YJbAWkPNbaK""
  );

  const nft = await metaplex.nfts().findByMint({ mintAddress });

  console.log(nft.json);
  /*
  {
    name: 'SMB #139',
    symbol: 'SMB',
    description: 'SMB is a collection of 5000 randomly generated 24x24 pixels NFTs on the Solana Blockchain. Each SolanaMonkey is unique and comes with different type and attributes varying in rarity.',
    seller_fee_basis_points: 600,
    image: 'https://arweave.net/tZrNpbFUizSoFnyTqP4n2e1Tf7WvP3siUwFWKMMid_Q',
    external_url: 'https://solanamonkey.business/',
    collection: { name: 'SMB Gen2', family: 'SMB' },
    attributes: [
      { trait_type: 'Attributes Count', value: 2 },
      { trait_type: 'Type', value: 'Solana' },
      {","[ 9.93941445e-03  1.97875742e-02 -7.15096295e-02  2.82371342e-02
  2.93581691e-02 -9.28169191e-02  5.22735575e-03  5.76793328e-02
 -5.91424219e-02  2.91793179e-02  1.63647756e-02  1.86285730e-02
  3.32454555e-02  3.20872143e-02 -5.67952450e-03  1.56202558e-02
 -6.77041933e-02 -7.51157776e-02 -1.00520451e-03 -1.50486017e-02
 -2.16759052e-02 -5.13022058e-02  9.92924497e-02 -7.55981579e-02
  2.90945210e-02 -3.29861194e-02 -6.17760755e-02  3.25327031e-02
  1.69222504e-02 -5.67119420e-02  9.38374028e-02 -3.64338793e-02
 -2.46038102e-02 -1.01781432e-02  6.60997331e-02  1.17571756e-01
  6.72489963e-03 -1.68526685e-03 -2.04572361e-02 -2.41135675e-02
  7.44770095e-02 -2.49683298e-03 -4.91051823e-02 -1.06098736e-02
 -4.00231332e-02  1.48043176e-02  7.39217317e-03  1.23766894e-02
  3.71538326e-02  5.26519753e-02 -1.39871404e-01  1.23209059e-02
 -3.58780026e-02  8.26584399e-02  1.29356692e-02  1.78671684e-02
 -4.99785095e-02 -6.62396997e-02  3.44286906e-03 -4.34323587e-02
  2.74970513e-02  1.54867931e-03 -1.49374092e-02 -1.71202645e-02
 -1.44418348e-02  4.71730120e-02  2.02360414e-02 -4.08237129e-02
  3.77539662e-03 -5.40209142e-03  4.34417799e-02  3.18001658e-02
 -1.40139326e-01 -2.14548837e-02 -5.45486026e-02 -2.58443914e-02
  4.07432541e-02  2.80450657e-02  3.58703313e-03 -4.63848002e-02
  5.49368821e-02 -4.53297496e-02  4.09491621e-02  4.62244451e-02
  1.06258560e-02 -4.95499410e-02 -6.05012812e-02  1.18385395e-02
 -5.32152727e-02 -1.02208495e-01  1.72751695e-02  6.20977767e-03
 -2.54979711e-02 -1.24381972e-03 -7.18105165e-03  3.95231284e-02
  4.74086870e-03  1.76360272e-02 -9.53710377e-02  7.84091204e-02
  5.96149862e-02 -3.28458808e-02  8.36033560e-03  9.86345112e-03
  1.00712463e-01 -1.76788215e-02  1.04171313e-01  5.28963916e-02
 -5.02380170e-02  5.28098494e-02 -3.18399109e-02  7.75921494e-02
 -6.28904924e-02 -1.41742639e-02  4.16258872e-02  1.21786073e-01
 -9.36851576e-02  2.56587472e-02 -3.66716534e-02 -1.08498847e-03
  8.40531066e-02  1.97544545e-02 -6.91319704e-02  1.21945729e-02
 -5.14732208e-03 -7.20527545e-02  1.00659188e-02  6.86045319e-33
  4.19765450e-02  4.06784676e-02  4.21462916e-02 -3.03430762e-02
  5.62484525e-02  1.55176595e-02  1.47735549e-03 -3.49857546e-02
 -5.36661707e-02 -1.99176297e-02 -2.87827328e-02 -1.16537195e-02
 -1.11680264e-02  2.72658058e-02 -6.34369329e-02 -3.23327407e-02
 -6.60066381e-02  5.93735985e-02  1.53762996e-01  7.18581006e-02
 -2.56862585e-02 -4.88814004e-02 -6.69093877e-02  3.39064635e-02
 -1.08464405e-01  7.14347279e-03 -3.40430401e-02 -1.75531546e-03
 -3.16048339e-02 -2.87673157e-03  2.50634588e-02  2.16920860e-02
  3.36554013e-02  1.41295150e-03 -1.45447841e-02 -1.20902710e-01
 -3.39760818e-02  3.22280340e-02 -1.00452043e-01 -3.15043167e-03
  6.09871894e-02 -2.58273501e-02 -6.74481243e-02 -3.49182039e-02
 -8.79016221e-02 -1.04598720e-02 -4.57833558e-02  3.71842496e-02
  2.66195796e-02  7.06859604e-02 -7.23511353e-03 -7.51740262e-02
  1.41555388e-02 -7.84536526e-02 -2.84194257e-02 -8.18642043e-03
 -1.13047427e-02 -7.05562811e-03  1.90449618e-02 -1.13034584e-01
  4.48464304e-02  8.21008999e-03  3.96454595e-02  8.13018531e-03
  2.41166889e-03 -2.71951333e-02  2.24616397e-02  7.34691415e-03
 -3.13645974e-02  3.48118544e-02 -3.13987508e-02  1.09020635e-01
 -2.28309426e-02 -2.16041785e-02  1.61314849e-02 -6.52202293e-02
  3.06570474e-02 -1.49757310e-03 -2.07240470e-02  7.50712380e-02
 -3.05273887e-02  1.00734003e-03 -2.32335292e-02 -4.61944416e-02
 -3.45338248e-02  1.79069452e-02  3.58751304e-02  4.08919305e-02
 -2.25191768e-02 -3.81734371e-02  1.02679459e-02  1.81948207e-02
 -2.87085008e-02 -9.08663422e-02 -4.26315702e-02 -5.90445339e-33
  6.06285334e-02 -5.87701285e-03 -1.93805713e-02 -5.47653902e-03
 -3.27247381e-02  3.77383605e-02  1.62921652e-01  1.28047958e-01
  9.29142721e-03 -4.74374089e-03  3.03979013e-02  2.36804299e-02
 -4.90229242e-02 -8.89791921e-02  6.26090681e-03 -9.50380266e-02
 -5.12961159e-03 -2.31996123e-02  6.94270656e-02 -4.25158441e-02
 -7.72176981e-02  3.25916074e-02 -2.43343245e-02  1.22234747e-01
 -8.00138861e-02  7.63802603e-02  1.28374714e-02  8.87727551e-03
 -4.23622727e-02 -3.08978651e-02  5.91913238e-02  3.84863615e-02
 -5.76566793e-02  6.53631315e-02  2.37201154e-02 -1.27925966e-02
  4.40462343e-02  8.61896574e-02 -3.30613628e-02  1.87021028e-02
  7.95162767e-02  5.89560792e-02 -4.98805754e-02  2.21230872e-02
  4.30974141e-02 -2.99031716e-02  2.28999951e-03 -4.28935736e-02
  3.34578790e-02 -1.45088127e-02  4.72530127e-02 -1.08983420e-01
 -1.15409428e-02  7.80875701e-03  4.52651605e-02  5.31014912e-02
  6.36215135e-02 -5.48866168e-02  4.66411281e-03 -1.22297490e-02
  6.37826888e-05 -2.93537937e-02 -6.20287657e-02 -5.36433421e-02
  4.20244876e-03  1.91517100e-02 -8.57091323e-02  8.53518955e-03
 -8.39196146e-02  5.09449206e-02 -6.15066104e-02  7.54280062e-03
  8.97271708e-02  2.62484588e-02  9.58984494e-02  7.62203857e-02
  6.33345991e-02  3.55968885e-02  8.40763468e-03 -6.42593801e-02
  1.25687942e-02  4.91868109e-02 -3.24419178e-02  4.10779640e-02
 -4.28067781e-02 -1.32785104e-02 -3.18710543e-02  1.35498390e-01
  8.02593399e-03 -3.25428694e-02 -2.89561935e-02  2.64634322e-02
  5.03359810e-02 -1.04062352e-02  8.80111456e-02 -4.91784107e-08
 -6.75158203e-02  4.55365665e-02 -2.31016353e-02  3.19871269e-02
 -8.20672791e-03  7.62534812e-02  4.00138199e-02 -8.89337957e-02
  7.30690733e-02 -9.07080621e-02 -1.41682643e-02 -1.49093224e-02
 -4.06789072e-02  6.57284483e-02 -5.81872351e-02  3.47231030e-02
  2.61059683e-02 -1.83830410e-02  3.20834219e-02 -7.20808581e-02
 -8.21474493e-02 -5.99260367e-02  5.53866550e-02 -9.44938138e-02
  4.46421988e-02  6.09157374e-04  4.08861041e-02  1.20771248e-02
 -3.92156616e-02 -4.85964529e-02 -1.61171909e-02 -1.90769676e-02
  3.35879624e-02  9.86239314e-03 -2.64909156e-02 -3.52695063e-02
 -4.34276201e-02 -1.48146842e-02 -1.16335824e-02 -4.31115367e-02
 -8.84581171e-03  6.88454658e-02 -4.26527746e-02 -1.01922974e-01
  3.04801892e-02  1.65379755e-02 -2.14672796e-02  4.32524271e-02
 -2.82040685e-02  6.09546863e-02 -3.00388876e-03 -6.56185225e-02
  8.13047811e-02  1.90801523e-03 -1.48473950e-02 -6.87888414e-02
  4.16086838e-02 -4.42159548e-02  4.34437618e-02  1.99415125e-02
  1.80075899e-01  3.33452150e-02 -2.15387829e-02  1.97437666e-02]"
"trait_type: 'Clothes', value: 'Orange Shirt' },
      { trait_type: 'Ears', value: 'None' },
      { trait_type: 'Mouth', value: 'None' },
      { trait_type: 'Eyes', value: 'Cool Glasses' },
      { trait_type: 'Hat', value: 'None' }
    ],
    properties: {
      files: [ [Object], [Object] ],
      category: 'image',
      creators: [ [Object] ]
    }
  }
  */
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243const connection = new Connection(clusterApiUrl(""mainnet-beta""));
const keypair = Keypair.generate();

const metaplex = new Metaplex(connection);
metaplex.use(keypairIdentity(keypair));

const mintAddress = new PublicKey(
  ""Ay1U9DWphDgc7hq58Yj1yHabt91zTzvV2YJbAWkPNbaK""
);

const nft = await metaplex.nfts().findByMint({ mintAddress });

console.log(nft.json);
12345678910111213# Làm thế nào để truy vấn chủ sở hữu của một NFTsNếu bạn có địa chỉ mint của một NFT, bạn có thể tìm được chủ sở hữu hiện tại của nó bằng truy vấn token account lớn nhất của địa chỉ mint đó.Nhớ rằng vì tổng cung của NFT là 1, và chúng không thể chia nhỏ hơn, nên chỉ có duy nhất một token account sẽ chứa token đó ở mọi lúc. Tất cả các token account khác sẽ có số dư là 0.Một khi token account lớn nhất được xác định, chúng ta có thể truy vấn chủ sỡ hữu của nó.TSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(""https://api.mainnet-beta.solana.com"");
  const tokenMint = ""9ARngHhVaCtH5JFieRdSS5Y8cdZk2TMF4tfGSWFB9iSK"";

  const largestAccounts = await connection.getTokenLargestAccounts(
    new PublicKey(tokenMint)
  );
  const largestAccountInfo = await connection.getParsedAccountInfo(
    largestAccounts.value[0].address
  );
  console.log(largestAccountInfo.value.data.parsed.info.owner);
  /*
    PublicKey {
        _bn: <BN: 6ddf6e1d765a193d9cbe146ceeb79ac1cb485ed5f5b37913a8cf5857eff00a9>
    }
     */
})();
12345678910111213141516171819const connection = new Connection(""https://api.mainnet-beta.solana.com"");
const tokenMint = ""9ARngHhVaCtH5JFieRdSS5Y8cdZk2TMF4tfGSWFB9iSK"";
const largestAccounts = await connection.getTokenLargestAccounts(
  new PublicKey(tokenMint)
);
const largestAccountInfo = await connection.getParsedAccountInfo(
  largestAccounts.value[0].address
);
console.log(largestAccountInfo.value.data.parsed.info.owner);
123456789# Làm thế nào để truy vấn địa chỉ mint của NFTNếu bạn biết khoá công khai của Candy Machine, bạn có thể truy vấn được tất cả địa chỉ NFT mint được sinh ra từ Candy Machine đó bằng cách sử dụng đoạn mã bên dưới. Chú ý rằng chúng ta có thể sử dụng bộ lọc memcmp bên dưới bởi vì, trong v1, người tạo đầu tiên luôn là địa chỉ của Candy Machine.# Candy Machine V1TSPress </> button to view full sourceimport { Connection, clusterApiUrl, PublicKey } from ""@solana/web3.js"";
import bs58 from ""bs58"";

const connection = new Connection(clusterApiUrl(""mainnet-beta""));
const MAX_NAME_LENGTH = 32;
const MAX_URI_LENGTH = 200;
const MAX_SYMBOL_LENGTH = 10;
const MAX_CREATOR_LEN = 32 + 1 + 1;
const MAX_CREATOR_LIMIT = 5;
const MAX_DATA_SIZE =
  4 +
  MAX_NAME_LENGTH +
  4 +
  MAX_SYMBOL_LENGTH +
  4 +
  MAX_URI_LENGTH +
  2 +
  1 +
  4 +
  MAX_CREATOR_LIMIT * MAX_CREATOR_LEN;
const MAX_METADATA_LEN = 1 + 32 + 32 + MAX_DATA_SIZE + 1 + 1 + 9 + 172;
const CREATOR_ARRAY_START =
  1 +
  32 +
  32 +
  4 +
  MAX_NAME_LENGTH +
  4 +
  MAX_URI_LENGTH +
 ","[ 1.57589521e-02  6.29594028e-02 -4.06182185e-02  6.44459799e-02
  1.88547745e-02  1.14007052e-02  6.00825138e-02  3.04039177e-02
 -6.99546710e-02 -1.42961321e-02  3.53492387e-02 -6.26028925e-02
 -4.07555476e-02  2.90121068e-03  4.27361317e-02  4.67292331e-02
 -1.25008091e-01 -2.98332125e-02 -2.10193321e-02  3.76289804e-03
  1.34722656e-03 -6.47540540e-02  9.41949934e-02 -6.37191087e-02
  1.54212387e-02  3.54956612e-02 -2.75653340e-02 -4.80915532e-02
  2.05065794e-02 -4.81724329e-02  1.05799191e-01  4.58307527e-02
  1.60292201e-02  7.28878528e-02 -9.45915841e-03  7.77382925e-02
  3.86331901e-02 -3.96491177e-02 -6.72505870e-02 -4.58449544e-03
  5.59540614e-02  7.48693720e-02 -8.44912231e-02 -5.97103909e-02
  3.85072939e-02 -1.89484656e-02 -6.67253956e-02  1.06849475e-02
  2.63143778e-02 -1.86759699e-02 -1.05567276e-01  2.99574733e-02
 -9.78637114e-02  6.09308854e-02  9.35037807e-03  8.51097554e-02
  2.52317172e-03 -1.46860676e-02  5.57516813e-02 -2.81506330e-02
  9.39674005e-02 -8.45868140e-02  1.94988530e-02 -3.79045755e-02
  1.63347460e-02  2.88396236e-02 -3.90862115e-03  3.61236855e-02
  3.69666852e-02 -7.62385502e-02  5.20790108e-02  2.91991197e-02
  4.07219818e-03  7.11381808e-02  7.90923554e-03  1.85110997e-02
 -3.00539937e-03 -4.74523269e-02  6.24684766e-02  2.32048221e-02
 -1.02841824e-01 -2.73852646e-02 -5.41445240e-03  4.72004823e-02
  5.01727797e-02  6.05704002e-02 -5.77020049e-02 -7.15903193e-02
 -1.31418571e-01 -4.40534241e-02 -1.09750286e-01  1.64872836e-02
 -4.52608839e-02 -3.97675578e-03  3.67691815e-02  4.07613441e-02
  3.70306745e-02 -6.14951625e-02  6.54233471e-02  1.10596292e-01
 -2.22241748e-02 -2.55145039e-02  1.34961596e-02  5.51283769e-02
  2.11159000e-03 -1.48596680e-02  3.08704916e-02 -7.94407632e-03
 -9.35153812e-02  1.52644962e-02 -4.26115319e-02  4.36345674e-02
 -4.29475196e-02 -3.41528356e-02 -7.21386671e-02  2.06267126e-02
 -1.51754115e-02  4.58913110e-02  3.95014957e-02  7.44214654e-02
  1.37758881e-01 -5.19819371e-02 -4.65643071e-02  4.48893830e-02
 -3.44636478e-02 -7.29522780e-02 -5.46871759e-02  7.49264140e-33
 -1.72891971e-02 -3.75410579e-02  1.99935287e-02  5.64897340e-03
  7.33692870e-02 -7.13091064e-03  3.01853772e-02 -2.45002769e-02
 -1.10538296e-01 -3.48120416e-03 -1.07056044e-01 -3.04505173e-02
 -4.48680893e-02 -2.67396239e-03 -1.35443667e-02 -4.59678471e-02
 -1.10640153e-02  7.12582991e-02  2.16508694e-02 -7.81754934e-05
  6.88336091e-03 -1.23676816e-02 -2.99716499e-02 -4.63485997e-03
 -5.36359139e-02 -2.32885294e-02  3.92556284e-03 -3.34366038e-02
  3.22573408e-02 -1.02827623e-02  7.15191439e-02  9.76017583e-03
  7.96356350e-02  4.77467813e-02  2.85841012e-03 -5.58710620e-02
  1.83948632e-02 -2.96181589e-02 -1.05043702e-01 -1.74295846e-02
  9.63668153e-02  1.87890753e-02 -1.09345522e-02 -1.27754519e-02
 -2.50756014e-02  1.48114190e-02  3.56409922e-02  1.15812346e-02
 -2.03543510e-02 -1.10808723e-02 -7.66706094e-02  5.08539751e-02
 -5.42140380e-03 -7.66276894e-03 -3.07252035e-02 -2.28317678e-02
  1.98379718e-02  8.98949429e-03 -4.67504710e-02 -6.62750378e-02
  5.76914335e-03  7.55416378e-02 -2.72178333e-02 -3.46155018e-02
  9.46249906e-03 -1.57458726e-02  2.50377078e-02  4.94664116e-03
 -1.22686885e-02  1.16003994e-02  3.30918431e-02  8.25767517e-02
 -8.70084465e-02 -2.49291565e-02 -4.61956523e-02 -1.50574259e-02
 -2.73938905e-02 -1.23953046e-02 -6.92351535e-02 -6.92868084e-02
 -5.38282022e-02  4.00893167e-02 -1.02849841e-01  5.93736432e-02
 -2.95798834e-02  9.16289072e-03  8.95333942e-03 -6.31887615e-02
  4.60912809e-02 -1.57138072e-02  1.69921957e-04  1.22520700e-03
 -1.35276141e-02 -1.20454140e-01 -1.18111655e-01 -6.90880201e-33
  5.80016188e-02 -2.70909928e-02  1.72939652e-03  1.60312802e-02
  3.78874764e-02  5.11417687e-02  6.80770278e-02  4.87882867e-02
 -2.46728621e-02  7.34542087e-02  8.73370618e-02 -4.34567221e-04
 -1.67060830e-02 -1.12932786e-01  3.73888202e-02  6.14692457e-02
  1.12462146e-02 -4.17932943e-02  4.27173544e-03 -2.63525806e-02
 -8.02802294e-02  7.40516707e-02  9.07435082e-03  7.86287785e-02
 -9.26259831e-02  4.25525792e-02 -7.68682268e-03 -5.71383920e-04
 -5.10910042e-02 -2.05404274e-02 -1.36370966e-02  1.26196379e-02
 -1.16150655e-01  5.83235621e-02  8.75636414e-02 -1.78784726e-03
 -2.66958773e-03  1.15988217e-02 -2.43835952e-02  3.59601453e-02
 -8.57806113e-03 -2.08044313e-02 -8.39071721e-02  2.03438960e-02
  5.43293953e-02 -9.68615785e-02  3.71154845e-02  2.70991977e-02
 -1.24042202e-02  1.21617429e-02  7.05429167e-02 -9.08712074e-02
 -7.71614909e-03 -3.54159884e-02 -3.07709146e-02  4.48884144e-02
  3.64057086e-02 -5.95219955e-02  3.72258835e-02  2.06646454e-02
  8.71023163e-02 -1.44205078e-01 -7.33674094e-02  4.60561775e-02
  4.19402458e-02 -7.32310265e-02 -6.09161891e-02 -3.17772888e-02
  2.17156075e-02  3.31768915e-02 -7.99054652e-02  9.82157141e-02
  6.12339303e-02  1.36518907e-02  6.42262027e-02 -3.66954468e-02
 -3.97926010e-02  2.70703807e-02  6.53703287e-02 -1.18760010e-02
 -3.58038619e-02  4.17674109e-02  2.26824265e-02  6.48937300e-02
  1.09157503e-01  8.61453265e-03 -8.20190925e-03  1.12398885e-01
 -5.95718436e-03  3.70780788e-02 -1.07952885e-01  3.41237299e-02
 -3.50562632e-02  4.07947004e-02  2.87787728e-02 -5.90395857e-08
 -5.50626777e-02 -2.96198018e-02 -7.30775222e-02  5.29091135e-02
  2.21630242e-02  3.57497041e-03 -4.54198420e-02 -6.31509647e-02
  2.34933421e-02 -3.01729180e-02  1.35949152e-02  6.81343675e-02
 -4.28432003e-02  1.07352603e-02  5.16958907e-02 -4.76466082e-02
 -3.40879033e-03  5.33722043e-02 -3.69790755e-02 -2.23711561e-02
  2.92189922e-02 -1.30610839e-02 -1.11759314e-02  4.43805978e-02
  4.11768109e-02 -2.77338326e-02  4.61097322e-02  9.06867534e-02
  5.05500324e-02  4.57039662e-02 -1.78220645e-02 -3.90775641e-03
  4.94878879e-03  2.66825743e-02 -6.81522340e-02  1.60830338e-02
  4.09972807e-03  4.73519303e-02 -2.75235381e-02  2.02051946e-03
  3.93990502e-02  4.24977653e-02 -7.59088024e-02  4.05756198e-02
  3.28318775e-02 -4.25592214e-02  4.64850590e-02  9.51859578e-02
  2.62874197e-02  5.78901209e-02 -9.70711187e-03 -6.64050430e-02
 -5.81383370e-02  5.45446649e-02 -9.87910107e-02 -1.24804780e-01
 -2.49109063e-02  1.89574026e-02  1.72815491e-02  2.40811277e-02
  5.16689233e-02 -5.32525172e-03 -1.38914092e-02 -6.62072375e-02]"
"4 +
  MAX_SYMBOL_LENGTH +
  2 +
  1 +
  4;

const TOKEN_METADATA_PROGRAM = new PublicKey(
  ""metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s""
);
const candyMachineId = new PublicKey(""ENTER_YOUR_CANDY_MACHINE_ID_HERE"");

const getMintAddresses = async (firstCreatorAddress: PublicKey) => {
  const metadataAccounts = await connection.getProgramAccounts(
    TOKEN_METADATA_PROGRAM,
    {
      // The mint address is located at byte 33 and lasts for 32 bytes.
      dataSlice: { offset: 33, length: 32 },

      filters: [
        // Only get Metadata accounts.
        { dataSize: MAX_METADATA_LEN },

        // Filter using the first creator.
        {
          memcmp: {
            offset: CREATOR_ARRAY_START,
            bytes: firstCreatorAddress.toBase58(),
          },
        },
      ],
    }
  );

  return metadataAccounts.map((metadataAccountInfo) =>
    bs58.encode(metadataAccountInfo.account.data)
  );
};

getMintAddresses(candyMachineId);
1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768const getMintAddresses = async (firstCreatorAddress: PublicKey) => {
  const metadataAccounts = await connection.getProgramAccounts(
    TOKEN_METADATA_PROGRAM,
    {
      // The mint address is located at byte 33 and lasts for 32 bytes.
      dataSlice: { offset: 33, length: 32 },

      filters: [
        // Only get Metadata accounts.
        { dataSize: MAX_METADATA_LEN },

        // Filter using the first creator.
        {
          memcmp: {
            offset: CREATOR_ARRAY_START,
            bytes: firstCreatorAddress.toBase58(),
          },
        },
      ],
    }
  );

  return metadataAccounts.map((metadataAccountInfo) =>
    bs58.encode(metadataAccountInfo.account.data)
  );
};

getMintAddresses(candyMachineId);
12345678910111213141516171819202122232425262728# Candy Machine V2Nếu bạn đang sử dụng Candy Machine v2, bạn sẽ cần truy cập vào địa chỉ ""Candy Machine Creator"" của nó. Địa chỉ này đơn giản là một PDA với seeds là candy_machine và địa chỉ Candy Machine v2. Một khi bạn có địa chỉ người tạo, bạn có thể sử dụng nó tương tự như cách mà chúng ta đã làm ở v1.TSPress </> button to view full sourceimport { Connection, clusterApiUrl, PublicKey } from ""@solana/web3.js"";
import bs58 from ""bs58"";

const connection = new Connection(clusterApiUrl(""mainnet-beta""));
const MAX_NAME_LENGTH = 32;
const MAX_URI_LENGTH = 200;
const MAX_SYMBOL_LENGTH = 10;
const MAX_CREATOR_LEN = 32 + 1 + 1;
const MAX_CREATOR_LIMIT = 5;
const MAX_DATA_SIZE =
  4 +
  MAX_NAME_LENGTH +
  4 +
  MAX_SYMBOL_LENGTH +
  4 +
  MAX_URI_LENGTH +
  2 +
 ","[-1.51161486e-02  5.81401438e-02 -4.47855145e-02 -1.73169598e-02
 -1.03819393e-01 -2.25996617e-02 -4.14280929e-02  1.13566771e-01
 -6.27628863e-02 -2.58023720e-02 -3.67157720e-02 -5.96972108e-02
  4.27874401e-02 -8.37934688e-02  2.23261844e-02  5.43461926e-02
 -4.14483435e-02 -1.62923802e-02 -1.53101655e-02  1.16698351e-02
  1.63888633e-01 -1.04446389e-01  1.55983949e-02 -5.84687926e-02
  8.07669293e-03  6.04823381e-02 -3.10145169e-02  2.48053391e-02
  5.20097325e-03 -8.78169481e-03  1.40909985e-01 -6.92396052e-03
  2.99579278e-02  2.73194686e-02  6.22528605e-02  4.48043235e-02
 -3.13119031e-02  2.25415751e-02  9.73709747e-02 -9.57252011e-02
  1.56453147e-03  5.23176678e-02 -7.80551285e-02  4.03314792e-02
  8.54143873e-03 -1.90531313e-02 -1.83496103e-02  2.04137973e-02
  2.25229133e-02 -4.33918275e-03 -3.02574784e-02  5.32014221e-02
 -6.79041026e-03  7.25492910e-02 -3.29218083e-03  7.95785990e-03
 -3.28566469e-02  1.12681324e-02  4.92791347e-02  7.33728409e-02
  2.58227661e-02 -2.99979541e-02  4.53859754e-02 -2.82305125e-02
 -5.98738939e-02  3.47428806e-02 -6.81193694e-02 -1.31724996e-03
  5.59946522e-03 -3.95521931e-02  5.93701098e-03 -9.98488814e-03
 -7.12148622e-02  3.37268747e-02 -3.93828470e-03 -1.26031423e-02
 -1.29833268e-02  1.55305685e-02  7.81228719e-03 -4.98105139e-02
 -1.53556680e-02  2.80866250e-02  5.38093261e-02  7.59848133e-02
  5.37091270e-02  1.13802915e-02 -4.00822936e-03 -5.79588208e-03
 -1.61780082e-02 -5.50355110e-03  3.38939615e-02 -2.65249312e-02
 -3.03656645e-02  3.79879326e-02  8.52289498e-02  1.00731468e-02
  3.66417728e-02 -3.30184475e-02 -1.07290382e-02  8.56781676e-02
 -1.10479146e-02  3.83138545e-02 -2.25079320e-02  4.65187281e-02
  1.10062234e-01 -2.09515318e-02  2.30633654e-02  7.61562726e-03
 -6.42454028e-02  6.45737275e-02 -2.69879540e-03  5.90607561e-02
 -2.65802573e-02 -3.03289369e-02 -2.80446801e-02  7.82035813e-02
 -1.30752707e-02  6.05772994e-02  3.44876535e-02 -1.22660408e-02
  9.61400643e-02 -2.46700160e-02 -6.77692518e-02 -8.60764310e-02
 -6.42273650e-02  2.55035013e-02  2.12817583e-02  1.37382978e-32
 -5.71357794e-02  3.37544531e-02  4.63097952e-02  1.13380328e-02
  8.67214345e-04  4.50921990e-02  3.72768901e-02  8.42932686e-02
  1.83091313e-02  4.81901988e-02  2.65017181e-04  9.89841670e-03
 -5.14072180e-02 -1.65018835e-03 -5.92796430e-02 -8.09591555e-04
 -1.24805188e-02  2.70686373e-02  1.67248733e-02 -5.03826607e-03
 -6.31704181e-02 -1.08608857e-01 -3.10390908e-02  2.36427803e-02
  4.82785664e-02  9.13302153e-02 -1.28136389e-02  5.64350300e-02
  5.78722730e-02  5.10940654e-03  3.58950533e-02 -4.58985567e-03
 -2.26841904e-02  3.80186946e-03  3.63953933e-02 -7.99293369e-02
 -8.15584976e-03 -1.48055714e-03 -5.01542389e-02 -7.20171109e-02
  6.36715144e-02 -4.13521519e-03 -3.90309654e-02 -5.59048243e-02
 -1.11475296e-01 -2.30497494e-03 -2.82928664e-02 -2.47856341e-02
  9.75579023e-02  5.20516485e-02  2.18763296e-02  3.23079824e-02
 -9.68702435e-02  2.97977962e-02  3.07631101e-02 -7.34374002e-02
 -4.89025861e-02  1.76990032e-02  2.18148390e-03  4.12344234e-03
 -5.19796163e-02 -1.66413411e-02  5.62458634e-02  5.60197346e-02
  5.23906499e-02  5.45175076e-02 -7.39052705e-03 -1.45714972e-02
 -1.65297985e-02  4.19177152e-02 -7.17389584e-03 -4.40533720e-02
 -4.34076749e-02 -2.59447303e-02 -7.88796172e-02 -7.68517237e-03
  3.22721340e-02 -6.57638088e-02 -9.24663246e-02 -6.30472153e-02
  2.27300413e-02  4.43300530e-02 -5.81210367e-02  7.38229007e-02
 -1.12060681e-02  1.17870998e-02 -2.05705203e-02 -6.25054613e-02
  2.80455546e-03 -2.78898869e-02 -3.58040296e-02 -6.43040389e-02
 -2.46987399e-02 -4.84783202e-03 -1.94096670e-01 -1.19372179e-32
  3.03169396e-02 -6.95836022e-02  8.30166042e-02 -9.74425487e-03
  1.66744587e-03  7.69565161e-03  3.53481136e-02  9.27309394e-02
 -2.37983204e-02  4.37584333e-02 -2.86472887e-02  2.60268059e-02
 -1.47042451e-02 -1.17765712e-02  5.03539667e-02  1.47242144e-01
  3.12185766e-05  3.04073747e-02  2.34338064e-02  2.83740088e-02
 -4.91620116e-02  1.06978200e-01 -8.91828723e-03  5.36416881e-02
 -5.40399402e-02  5.24639376e-02  4.74118831e-04  1.45477569e-02
  8.69153365e-02 -5.12733907e-02  7.67820626e-02 -3.89669463e-03
 -5.07966541e-02 -2.16594357e-02 -9.26429033e-03 -4.67073657e-02
  2.76622064e-02  3.89272161e-02 -3.64761101e-03  8.89455602e-02
  4.78733554e-02 -9.19455811e-02 -5.55197150e-02 -2.38560848e-02
  3.53730582e-02 -3.14482823e-02 -2.12017391e-02  4.59411480e-02
 -8.39694124e-03  6.56274706e-02  4.52128202e-02 -5.03959879e-02
 -7.72739574e-02 -1.29760839e-02 -7.27657005e-02 -2.42515355e-02
  4.40774448e-02 -3.09608914e-02  8.04438666e-02 -1.04829326e-01
  1.51143307e-02 -1.18746117e-01 -7.22791255e-03  2.96116900e-02
 -5.18141640e-03 -3.69428806e-02 -3.66391316e-02  2.64477544e-03
 -2.34549996e-02  2.45075282e-02  3.46998647e-02  2.51905676e-02
  8.16700514e-03 -7.47679360e-03  2.57345606e-02  7.06602335e-02
 -2.34301724e-02 -7.73507953e-02  3.31540145e-02  4.42852220e-03
 -3.78176048e-02  1.10879220e-01  8.52380097e-02 -8.60993862e-02
 -5.51976487e-02 -4.88505699e-02  2.48155575e-02  8.72424543e-02
 -1.92724299e-02  1.21982200e-02 -4.27519307e-02  2.86456887e-02
 -2.46388260e-02  3.04525997e-02  1.96004137e-02 -7.36644807e-08
  5.00129201e-02 -4.50404212e-02  4.86749643e-03  3.49907428e-02
  3.61721292e-02  6.99150488e-02 -6.96662664e-02 -2.82925274e-02
  3.20307650e-02  8.56140442e-03  2.20638495e-02  7.00588152e-02
 -7.96248913e-02 -5.34863397e-03 -6.93644881e-02 -4.84285168e-02
 -1.81596968e-02 -1.99351888e-02 -2.93127000e-02  4.32359092e-02
 -4.85832058e-02  4.17980738e-02 -1.49278110e-02 -9.23851579e-02
  6.49407208e-02 -1.01195790e-01  5.48685305e-02  6.86403811e-02
  2.03158148e-02  1.41027279e-03  7.44403573e-03  3.06489225e-02
  1.03126712e-01 -7.64297396e-02 -7.99284428e-02 -5.02761640e-02
 -3.20309252e-02 -4.58383672e-02  1.45316608e-02  8.62991158e-03
  7.73020908e-02 -2.76247859e-02 -5.95003776e-02 -9.63314716e-03
 -7.52263516e-02  2.58728303e-02 -4.95183878e-02  8.47616568e-02
  2.86599323e-02  5.48883975e-02 -8.40160847e-02 -3.97097468e-02
 -3.53827253e-02 -5.66943288e-02 -8.27062652e-02 -6.81573153e-02
 -1.58724219e-01  8.34328532e-02  4.67567556e-02 -2.76082251e-02
  9.41175781e-03  9.22424346e-03 -2.40105484e-02 -3.91832180e-02]"
"1 +
  4 +
  MAX_CREATOR_LIMIT * MAX_CREATOR_LEN;
const MAX_METADATA_LEN = 1 + 32 + 32 + MAX_DATA_SIZE + 1 + 1 + 9 + 172;
const CREATOR_ARRAY_START =
  1 +
  32 +
  32 +
  4 +
  MAX_NAME_LENGTH +
  4 +
  MAX_URI_LENGTH +
  4 +
  MAX_SYMBOL_LENGTH +
  2 +
  1 +
  4;

const TOKEN_METADATA_PROGRAM = new PublicKey(
  ""metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s""
);
const CANDY_MACHINE_V2_PROGRAM = new PublicKey(
  ""cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ""
);
const candyMachineId = new PublicKey(""ENTER_YOUR_CANDY_MACHINE_ID_HERE"");

const getMintAddresses = async (firstCreatorAddress: PublicKey) => {
  const metadataAccounts = await connection.getProgramAccounts(
    TOKEN_METADATA_PROGRAM,
    {
      // The mint address is located at byte 33 and lasts for 32 bytes.
      dataSlice: { offset: 33, length: 32 },

      filters: [
        // Only get Metadata accounts.
        { dataSize: MAX_METADATA_LEN },

        // Filter using the first creator.
        {
          memcmp: {
            offset: CREATOR_ARRAY_START,
            bytes: firstCreatorAddress.toBase58(),
          },
        },
      ],
    }
  );

  return metadataAccounts.map((metadataAccountInfo) =>
    bs58.encode(metadataAccountInfo.account.data)
  );
};

const getCandyMachineCreator = async (
  candyMachine: PublicKey
): Promise<[PublicKey, number]> =>
  PublicKey.findProgramAddress(
    [Buffer.from(""candy_machine""), candyMachine.toBuffer()],
    CANDY_MACHINE_V2_PROGRAM
  );

(async () => {
  const candyMachineCreator = await getCandyMachineCreator(candyMachineId);
  getMintAddresses(candyMachineCreator[0]);
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182const getCandyMachineCreator = async (
  candyMachine: PublicKey
): Promise<[PublicKey, number]> =>
  PublicKey.findProgramAddress(
    [Buffer.from(""candy_machine""), candyMachine.toBuffer()],
    CANDY_MACHINE_V2_PROGRAM
  );

const candyMachineCreator = await getCandyMachineCreator(candyMachineId);
getMintAddresses(candyMachineCreator[0]);
12345678910# Làm thế nào để truy vấn tất cả NFT từ một ví?Khi truy vấn tất cả NFT từ một ví, bạn sẽ cần đọc tất cả token account và sau đó suy ra từng NFT một. Tất cả có thể thực hiện chỉ bằng hàm findDataByOwneropen in new window từ thư viện Metaplex JS.TSPress </> button to view full sourceimport { Metaplex, keypairIdentity } from ""@metaplex-foundation/js"";
import { Connection, clusterApiUrl, Keypair, PublicKey } from ""@solana/web3.js"";

(async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
  const keypair = Keypair.generate();

  const metaplex = new Metaplex(connection);
  metaplex.use(keypairIdentity(keypair));

  const owner = new PublicKey(""2R4bHmSBHkHAskerTHE6GE1Fxbn31kaD5gHqpsPySVd7"");
  const allNFTs = await metaplex.nfts().findAllByOwner({ owner });

  console.log(allNFTs);
})();
123456789101112131415const connection = new Connection(clusterApiUrl(""mainnet-beta""), ""confirmed"");
const keypair = Keypair.generate();

const metaplex = new Metaplex(connection);
metaplex.use(keypairIdentity(keypair));

const owner = new PublicKey(""2R4bHmSBHkHAskerTHE6GE1Fxbn31kaD5gHqpsPySVd7"");
const allNFTs = await metaplex.nfts().findAllByOwner({ owner });

console.log(allNFTs);
12345678910 # Transaction Ngoại tuyến# Ký TransactionĐể tạo một transaction ngoại tuyến, bạn phải ký lên transaction và sau đó bất kỳ ai đều có thể gửi transaction đó lên trên mạng lưới.TSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  SystemProgram,
  LAMPORTS_PER_SOL,
  Message,
} from ""@solana/web3.js"";
import * as","[ 3.53846960e-02  3.06025930e-02 -6.32449090e-02 -6.17746860e-02
 -1.42106146e-01 -1.10541526e-02  6.14737812e-03  9.43404213e-02
 -9.64252502e-02  1.48002850e-03 -9.26909409e-03 -6.15813658e-02
  6.47826046e-02 -1.27741218e-01  2.96292012e-03  7.69827068e-02
 -3.03661488e-02 -4.10945825e-02 -5.79047352e-02 -1.67250354e-02
  1.30058125e-01 -1.15651272e-01 -1.20774535e-02 -3.86029892e-02
  1.92124285e-02  2.63684131e-02 -2.98362188e-02  3.85943316e-02
  2.43531410e-02 -5.46005480e-02  7.23039806e-02 -3.49623896e-02
  7.18472945e-03  4.04324904e-02  7.17495829e-02  7.16366470e-02
 -4.64993082e-02 -6.31880239e-02  5.58309145e-02 -7.09123537e-02
  7.62309507e-03  3.91714908e-02 -8.53728354e-02  6.49867356e-02
  1.64398849e-02 -6.10434311e-03 -6.56456947e-02 -1.74336378e-02
  7.59539083e-02  2.01934613e-02 -1.24913953e-01  1.87793039e-02
  1.19540177e-03 -1.73132289e-02 -1.19764544e-03 -2.22133659e-02
 -5.35432175e-02  3.53057943e-02  5.17057218e-02  8.09715316e-03
  7.10569993e-02 -6.29859883e-03  4.90771718e-02 -2.26834398e-02
 -1.50704160e-02 -3.04873213e-02 -3.94687578e-02 -4.42938991e-02
  2.07562742e-04 -4.62451912e-02 -1.86592713e-02  3.28433551e-02
 -5.56902923e-02  7.58465901e-02 -5.04209623e-02  8.07362329e-03
 -7.19042048e-02  1.95942800e-02 -1.45623339e-02 -1.65016893e-02
 -4.33499999e-02 -9.97240283e-03  3.82324792e-02  3.72021692e-03
  2.57729366e-02  3.97215411e-02  1.81952768e-04 -6.06214674e-03
  2.82315910e-02  2.44601425e-02 -4.24523056e-02  1.24448293e-03
  8.87507759e-03  6.91028684e-02  8.04409981e-02  1.48625346e-02
  1.53510254e-02 -5.38675040e-02 -4.28030938e-02  8.83822888e-02
 -6.59990087e-02  1.11978129e-02  2.67056320e-02  2.80102361e-02
  7.86347687e-02 -5.39922491e-02  4.03599851e-02  5.63814724e-03
 -3.19672711e-02  1.67760290e-02 -3.42768803e-02  1.14170335e-01
  2.48467289e-02 -3.07280105e-02 -2.83999387e-02  7.07314759e-02
 -6.92176353e-03  4.55485284e-02  6.49498850e-02 -1.75543763e-02
  1.25242129e-01 -7.97066092e-03 -6.58799335e-02 -5.27488701e-02
 -1.28339276e-01 -3.37379687e-02 -1.57123208e-02  1.01786497e-32
 -2.92892661e-02  8.12055077e-03  4.32126150e-02  4.62611690e-02
  9.29713249e-02  2.21404936e-02  3.88043858e-02  9.42114294e-02
 -4.92490903e-02 -1.43349171e-02 -3.61847281e-02 -5.88945523e-02
  1.84788089e-03  4.81785974e-03 -1.34872496e-02 -8.08969662e-02
  2.45184321e-02  4.21872102e-02  6.94217486e-03 -7.35270232e-02
 -4.69826758e-02 -7.79765546e-02  1.75861064e-02  2.79540792e-02
  5.12525719e-03  3.92076671e-02  1.78684108e-02  4.27168272e-02
  3.93376984e-02 -2.04050937e-03  8.01117867e-02 -1.46194482e-02
 -6.02566861e-02  3.90420258e-02  5.41999862e-02 -4.23521101e-02
  3.93846631e-02  2.00933358e-03 -3.86849642e-02 -6.30734116e-02
  7.17498176e-03 -5.12506701e-02  1.43975532e-02 -2.18271613e-02
 -8.03858638e-02 -4.00787853e-02 -2.83559430e-02 -7.26627070e-04
  5.01210755e-03  3.54328379e-02 -2.96052806e-02  6.33729175e-02
 -4.97782230e-02  8.86725169e-03 -3.40834633e-02 -4.57562134e-02
 -6.81835860e-02 -5.88675262e-03 -3.84190902e-02  3.56546082e-02
 -7.87915885e-02  8.20106789e-02  5.00564650e-02  7.81022161e-02
  2.59042047e-02  2.23696306e-02 -1.37067912e-02 -3.04943100e-02
  6.44081533e-02  2.30416395e-02  7.32520362e-03 -2.94489134e-02
 -1.11261001e-02 -4.55949791e-02 -5.89324720e-02 -4.17157896e-02
  6.93129702e-03 -6.84702396e-02 -1.04138851e-01 -9.51924920e-02
  3.31402645e-02  1.62196346e-02 -6.43517673e-02  4.68991091e-03
 -5.89649640e-02  4.13533449e-02 -4.09102812e-02 -2.91793644e-02
  3.44633460e-02  4.10424098e-02 -5.13507687e-02 -2.56939959e-02
  1.01306969e-02 -3.91085781e-02 -1.12374753e-01 -1.04430668e-32
  3.51934172e-02 -6.26875684e-02  3.58160846e-02 -1.33940522e-02
  5.47223091e-02  2.76391897e-02  1.70686617e-02 -1.63884051e-02
 -8.40764046e-02  2.69271228e-02  1.31513411e-02  4.45619971e-02
  4.10530120e-02 -1.52936270e-02  6.84366003e-02  5.01665138e-02
 -2.21926486e-03  2.23824196e-02  4.88778912e-02  8.09851289e-03
 -1.53710889e-02  1.52669609e-01 -8.55493546e-02  9.27578509e-02
 -3.80635820e-02  2.85951085e-02 -3.91988568e-02  6.94320649e-02
  2.65995637e-02 -2.13412587e-02  8.00630450e-02  2.68021971e-02
 -8.69463310e-02  5.06243929e-02  1.37174083e-02 -8.28968659e-02
  5.28129935e-02  2.43136622e-02  2.80447248e-02  6.91619590e-02
  7.27144033e-02 -1.31395668e-01 -2.60853507e-02 -1.07422015e-02
  5.41232079e-02 -2.18674783e-02  1.32744499e-02  6.72293361e-03
 -6.43370254e-03  4.66585420e-02  3.89055833e-02 -8.23450759e-02
 -6.39562234e-02 -4.29855473e-02 -7.10430276e-03 -2.57927421e-02
  1.31917279e-02 -1.80971585e-02  6.41485974e-02 -6.96310773e-02
  1.77443419e-02 -9.25658718e-02  5.27766384e-02  4.10673842e-02
  3.37849446e-02 -8.21581855e-02 -6.35054260e-02  3.12850177e-02
 -2.12739054e-02 -9.72989853e-03 -4.61203381e-02  1.16178103e-01
  2.33125128e-02  1.76389683e-02 -7.52256159e-03  5.00410758e-02
 -2.65720375e-02 -5.48625141e-02  7.40269478e-03  1.46560427e-02
 -3.07261962e-02  8.37294012e-02  8.84141251e-02 -4.09510955e-02
 -4.43899669e-02 -4.45812829e-02  3.98977399e-02  8.13116282e-02
 -8.10914263e-02  9.33704060e-03 -1.73941161e-02  2.72664241e-02
 -4.66163037e-03  4.68947813e-02  2.21558735e-02 -5.92862861e-08
  3.99967581e-02 -1.56136742e-02 -6.02994673e-02  4.97029126e-02
  6.69856966e-02  2.98514534e-02 -6.68842867e-02 -5.72074875e-02
  4.49600518e-02 -7.96161368e-02  1.10606709e-02  7.64716491e-02
 -2.19153631e-02  3.20785716e-02 -5.80701232e-02 -1.11638114e-01
 -7.66343996e-02 -3.79597694e-02  2.40695886e-02  3.29601765e-02
 -3.40805240e-02 -5.29663218e-03  3.24738934e-03 -4.28128578e-02
  8.88658762e-02 -8.52371454e-02  4.10230532e-02  5.02841920e-02
  1.87492892e-02  6.09087497e-02  2.53189038e-02  4.71298397e-02
  6.42513335e-02 -3.81242074e-02 -9.39083695e-02 -4.68051918e-02
 -3.34730595e-02 -3.40466341e-03  4.58591469e-02 -4.19098474e-02
  8.15014839e-02  2.69942116e-02 -1.79010965e-02 -4.14113048e-03
 -9.05158892e-02  2.00461783e-02  2.47656484e-03  6.58970848e-02
  4.03431356e-02  2.04372369e-02 -7.45597929e-02  2.54603866e-02
  4.50020283e-02 -5.47087938e-02 -4.64174412e-02 -3.60071734e-02
 -9.15920585e-02  7.15365261e-02  3.28734815e-02  6.33408502e-02
  1.37365991e-02 -1.78602170e-02 -1.66546833e-02 -3.98491584e-02]"
"nacl from ""tweetnacl"";
import * as bs58 from ""bs58"";

// to complete a offline transaction, I will seperate them into four steps
// 1. Create Transaction
// 2. Sign Transaction
// 3. Recover Transaction
// 4. Send Transaction

(async () => {
  // create connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  // create a example tx, alice transfer to bob and feePayer is `feePayer`
  // alice and feePayer are signer in this tx
  const feePayer = Keypair.generate();
  await connection.confirmTransaction(
    await connection.requestAirdrop(feePayer.publicKey, LAMPORTS_PER_SOL)
  );
  const alice = Keypair.generate();
  await connection.confirmTransaction(
    await connection.requestAirdrop(alice.publicKey, LAMPORTS_PER_SOL)
  );
  const bob = Keypair.generate();

  // 1. Create Transaction
  let tx = new Transaction().add(
    SystemProgram.transfer({
      fromPubkey: alice.publicKey,
      toPubkey: bob.publicKey,
      lamports: 0.1 * LAMPORTS_PER_SOL,
    })
  );
  tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;
  tx.feePayer = feePayer.publicKey;
  let realDataNeedToSign = tx.serializeMessage(); // the real data singer need to sign.

  // 2. Sign Transaction
  // use any lib you like, the main idea is to use ed25519 to sign it.
  // the return signature should be 64 bytes.
  let feePayerSignature = nacl.sign.detached(
    realDataNeedToSign,
    feePayer.secretKey
  );
  let aliceSignature = nacl.sign.detached(realDataNeedToSign, alice.secretKey);

  // 3. Recover Tranasction

  // you can verify signatures before you recovering the transaction
  let verifyFeePayerSignatureResult = nacl.sign.detached.verify(
    realDataNeedToSign,
    feePayerSignature,
    feePayer.publicKey.toBytes() // you should use the raw pubkey (32 bytes) to verify
  );
  console.log(`verify feePayer signature: ${verifyFeePayerSignatureResult}`);

  let verifyAliceSignatureResult = nacl.sign.detached.verify(
    realDataNeedToSign,
    aliceSignature,
    alice.publicKey.toBytes()
  );
  console.log(`verify alice signature: ${verifyAliceSignatureResult}`);

  // there are two ways you can recover the tx
  // 3.a Recover Tranasction (use populate then addSignauture)
  {
    let recoverTx = Transaction.populate(Message.from(realDataNeedToSign));
    recoverTx.addSignature(feePayer.publicKey, Buffer.from(feePayerSignature));
    recoverTx.addSignature(alice.publicKey, Buffer.from(aliceSignature));

    // 4. Send transaction
    console.log(
      `txhash: ${await connection.sendRawTransaction(recoverTx.serialize())}`
    );
  }

  // or

  // 3.b. Recover Tranasction (use populate with signature)
  {
    let recoverTx = Transaction.populate(Message.from(realDataNeedToSign), [
      bs58.encode(feePayerSignature),
      bs58.encode(aliceSignature),
    ]);

    // 4. Send transaction
    console.log(
      `txhash: ${await connection.sendRawTransaction(recoverTx.serialize())}`
    );
  }

  // if this process takes too long, your recent blockhash will expire (after 150 blocks).
  // you can use `durable nonce` to get rid of it.
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// there are two ways you can recover the tx
// 3.a Recover Tranasction (use populate then addSignauture)
{
  let recoverTx = Transaction.populate(Message.from(realDataNeedToSign));
  recoverTx.addSignature(feePayer.publicKey, Buffer.from(feePayerSignature));
  recoverTx.addSignature(alice.publicKey, Buffer.from(aliceSignature));

  // 4. Send transaction
  console.log(
    `txhash: ${await connection.sendRawTransaction(recoverTx.serialize())}`
  );
}

// or

// 3.b. Recover Tranasction (use populate with signature)
{
  let recoverTx = Transaction.populate(Message.from(realDataNeedToSign), [
 ","[-3.18249278e-02 -1.01470286e-02 -7.22074881e-02  5.43890111e-02
 -1.78583320e-02 -1.30565530e-02  8.07410404e-02  4.26136293e-02
  2.94832960e-02  3.38864177e-02  6.20281957e-02 -2.43210234e-02
  1.42698577e-02 -6.11437783e-02  4.74751368e-03 -1.49917079e-03
 -5.65168485e-02 -6.53352141e-02 -8.40739068e-03 -7.33908964e-03
 -3.74245234e-02 -5.15987985e-02  3.45679522e-02  1.03973141e-02
  8.22831094e-02 -8.76085758e-02  2.25194767e-02  3.50211491e-03
 -1.47525053e-02 -3.55032943e-02  4.16308753e-02  8.07623267e-02
 -9.25466642e-02 -6.23413250e-02 -1.66628808e-02  9.39129069e-02
 -1.01902457e-02  2.97752731e-02 -7.81803504e-02 -4.36562449e-02
  3.37640978e-02 -9.50178970e-03 -8.41025785e-02  1.53539097e-02
  4.88394946e-02 -3.38651538e-02 -2.57995352e-02  6.64169267e-02
  4.30337526e-02  3.37804742e-02 -6.95854053e-02  3.41183059e-02
 -7.25471601e-02  7.88824037e-02 -4.58488762e-02  9.87617373e-02
  1.33558866e-02  1.27444761e-02  7.89570883e-02 -6.15178347e-02
  8.01965073e-02  1.31316595e-02  3.30059207e-03 -3.19991522e-02
 -7.06843333e-03  8.18697885e-02  6.22754451e-03 -4.74634394e-02
 -1.49050355e-03 -5.13784364e-02 -1.11850826e-02 -2.57051960e-02
 -6.97320402e-02  2.12514624e-02 -3.06823049e-02 -1.68771651e-02
  4.99962606e-02  4.65362556e-02 -1.09782219e-01  7.79365227e-02
 -5.45056947e-02 -3.60384360e-02  7.14387512e-03  1.15794821e-04
 -2.02235486e-03  7.40807429e-02 -7.35993637e-03 -2.56303814e-03
  1.00391554e-02 -1.07287560e-02 -1.64061151e-02  6.20874800e-02
 -1.43290116e-02 -7.85917789e-02 -1.32619850e-02  1.02456182e-03
 -3.37070860e-02  3.92948575e-02  3.31900418e-02  7.73373917e-02
  4.02882881e-02 -2.12845625e-03 -5.99588193e-02 -1.45574166e-02
 -3.19531299e-02  2.80914642e-02  7.50326738e-02 -4.57857326e-02
  2.05805264e-02  1.75088011e-02  1.32114170e-02  6.33883923e-02
 -5.74210472e-03  2.83340318e-03 -3.62293944e-02  1.48173034e-01
 -4.15302217e-02  4.43933234e-02  6.60113916e-02  7.74987135e-03
  3.13768387e-02  1.72203351e-02 -5.17157651e-02 -3.98972556e-02
  2.31075622e-02 -4.77185920e-02  4.14778590e-02  4.59445714e-33
 -3.42199020e-02 -2.50885766e-02 -7.40346452e-03  3.06140240e-02
  2.35264879e-02  1.28690330e-02  6.61630332e-02  4.47451556e-03
 -9.45113748e-02 -3.06274146e-02 -7.79517144e-02 -1.16424948e-01
  6.60847947e-02 -9.25276130e-02 -5.54063655e-02 -4.86348234e-02
  1.21544199e-02  4.01119925e-02  7.30314627e-02  4.56069224e-02
 -4.57713567e-03  1.93039663e-02  3.83651033e-02  2.11187582e-02
 -6.28982764e-03  2.03611329e-02 -1.37251653e-02 -1.63539220e-02
  4.95971218e-02 -5.70096355e-03  7.07743093e-02  2.64899712e-02
 -2.39022654e-02  8.51025581e-02  3.60345095e-02  3.36843841e-02
 -2.61386894e-02 -2.11877469e-02 -1.00249261e-01 -6.54785484e-02
 -4.25724611e-02  2.22748630e-02 -5.90532087e-02  8.18868692e-04
 -8.34123567e-02 -3.51034924e-02  5.68747856e-02 -5.05710440e-03
  1.36779219e-01  2.22619213e-02 -8.58648345e-02  6.91035250e-03
  1.94174051e-02 -4.03916799e-02  2.00828183e-02 -1.91121902e-02
 -1.51638510e-02  1.41710602e-02  5.68868266e-03  3.65047380e-02
  2.54895799e-02 -3.50966975e-02 -7.93700200e-03 -7.49335065e-02
  3.83497067e-02  1.98137630e-02 -7.89184123e-02 -4.00611162e-02
 -1.46305328e-02 -1.07590482e-01 -2.63938457e-02  7.19577000e-02
  5.72915338e-02  8.39965567e-02 -1.52105941e-02 -8.39002139e-04
 -5.63054606e-02 -3.16413753e-02 -2.27487716e-03 -1.08752893e-02
 -2.48647127e-02 -5.23685887e-02 -3.39365117e-02  4.09526974e-02
  2.26433128e-02  6.35800809e-02 -4.84829303e-03 -2.76441965e-02
 -2.21739538e-04  1.27474237e-02 -1.67544205e-02  1.26387905e-02
 -4.03130427e-02 -3.14871296e-02  4.30356041e-02 -4.20946400e-33
 -4.39796550e-03 -6.30425885e-02 -9.45797935e-02  6.59497688e-03
 -8.81444011e-03  1.90203972e-02  3.15707065e-02 -1.54714426e-02
 -4.72512841e-02  4.08091061e-02  1.89508144e-02  1.60553623e-02
 -9.10372473e-03 -5.97000122e-02  3.57558802e-02 -1.26849294e-01
  6.85120821e-02 -4.01059501e-02  5.69579713e-02  1.11550037e-02
 -6.83662342e-03  4.99921218e-02 -7.25491494e-02  2.18072329e-02
 -9.20140371e-02  7.22575933e-02  6.61599683e-03  1.12102911e-01
 -5.19028716e-02  2.10542064e-02  4.02958654e-02  7.06141861e-03
 -4.45539169e-02  6.00676127e-02  6.04727771e-03 -3.69833037e-02
  1.54335275e-02  7.76364729e-02  2.53385212e-02  1.40503990e-02
  7.07198083e-02 -2.23585218e-02 -2.86737364e-02 -2.98701618e-02
  5.75577207e-02 -2.65452825e-02 -8.18512216e-03  2.29346976e-02
  3.02589089e-02  5.32113500e-02  8.04186761e-02  3.32920402e-02
 -2.53895926e-03 -4.52850433e-03 -1.95617345e-03  1.02585763e-01
  1.43972695e-01 -6.89424798e-02  8.26721191e-02 -8.09035525e-02
  2.32396293e-02 -3.45033742e-02  9.39573571e-02  5.27822925e-03
  1.14713892e-01 -2.30419114e-02 -1.69103662e-03  2.48739831e-02
  2.78372932e-02  8.16690829e-03 -1.32848874e-01  2.02792715e-02
  6.74392097e-03 -5.03604114e-03  1.50468886e-01 -1.37317078e-02
 -3.01743448e-02 -4.52007428e-02  4.43550199e-02 -1.48256496e-02
 -1.81906093e-02 -6.50939625e-03  2.38809958e-02  5.91159388e-02
  5.59058227e-02 -1.87829006e-02  2.71113012e-02  1.93173140e-02
 -1.64240587e-03 -1.67331174e-02 -3.09571698e-02 -2.51689907e-02
  3.40645341e-03 -2.23866347e-02 -4.03548926e-02 -5.96368750e-08
 -6.58798441e-02  3.10676660e-05 -5.80041222e-02  3.08327284e-02
  7.21262023e-02  4.10442688e-02  5.76270930e-03  6.42235391e-03
 -4.56351712e-02 -2.89351605e-02 -1.08084328e-01  2.23265123e-02
  5.51594375e-03 -1.73900202e-02  1.23287858e-02 -5.08100353e-02
  9.26310837e-04 -9.36355963e-02 -7.44241625e-02 -7.63358697e-02
  1.54213253e-02 -8.56658593e-02 -5.20541295e-02  9.19248816e-03
  3.39994654e-02  1.76310185e-02  1.17468387e-01  2.05758154e-01
  1.99009310e-02 -9.20543671e-02 -1.20736502e-01 -2.28950661e-02
  2.31690910e-02 -9.09102056e-03 -4.83971052e-02  1.23043284e-02
  2.30281223e-02  3.34051475e-02  6.95441887e-02  7.79861882e-02
 -1.20549975e-02  6.23373576e-02 -4.91855815e-02  9.16014612e-03
 -4.70597250e-03  3.31870280e-02 -7.37354904e-02  1.19568873e-02
  3.41592990e-02  2.51755193e-02 -3.36286873e-02 -7.23367631e-02
 -6.35828683e-03  5.28720878e-02 -4.43203673e-02 -9.13066715e-02
  3.23127843e-02 -5.03374413e-02  3.08372974e-02  4.05303538e-02
  7.49577805e-02 -3.34411673e-02 -5.31615242e-02 -1.11794420e-01]"
"  bs58.encode(feePayerSignature),
    bs58.encode(aliceSignature),
  ]);

  // 4. Send transaction
  console.log(
    `txhash: ${await connection.sendRawTransaction(recoverTx.serialize())}`
  );
}
123456789101112131415161718192021222324252627# Ký một phần TransactionKhi một transaction yêu cầu nhiều chữ ký, bạn có thể ký một phần của nó. Những chữ ký khác sẽ được ký sau đó và sẽ được gửi đi nếu đủ chữ ký cần thiết.Một vài ví dụ khi nào bạn nên dùng:Gửi một SPL token để thanh toánKý một transaction để bạn có thể kiểm tra tính đúng đắn của nó sau nàyGọi một program tuỳ chỉnh bằng một transaction yêu cầu chữ ký của bạnTrong ví dụ này Bob sẽ gửi có Alice một SPL token thể thanh toán cho cô ấy:TSPress </> button to view full sourceimport {
  createTransferCheckedInstruction,
  getAssociatedTokenAddress,
  getMint,
  getOrCreateAssociatedTokenAccount,
} from ""@solana/spl-token"";
import {
  clusterApiUrl,
  Connection,
  Keypair,
  LAMPORTS_PER_SOL,
  PublicKey,
  SystemProgram,
  Transaction,
} from ""@solana/web3.js"";
import base58 from ""bs58"";

/* The transaction:
 * - sends 0.01 SOL from Alice to Bob
 * - sends 1 token from Bob to Alice
 * - is partially signed by Bob, so Alice can approve + send it
 */

(async () => {
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const alicePublicKey = new PublicKey(
    ""5YNmS1R9nNSCDzb5a7mMJ1dwK9uHeAAF4CmPEwKgVWr8""
  );
  const bobKeypair = Keypair.fromSecretKey(
    base58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );
  const tokenAddress = new PublicKey(
    ""Gh9ZwEmdLJ8DscKNTkTqPbNwLNNBjuSzaG9Vp2KGtKJr""
  );
  const bobTokenAddress = await getAssociatedTokenAddress(
    tokenAddress,
    bobKeypair.publicKey
  );

  // Alice may not have a token account, so Bob creates one if not
  const aliceTokenAccount = await getOrCreateAssociatedTokenAccount(
    connection,
    bobKeypair, // Bob pays the fee to create it
    tokenAddress, // which token the account is for
    alicePublicKey // who the token account is for
  );

  // Get the details about the token mint
  const tokenMint = await getMint(connection, tokenAddress);

  // Get a recent blockhash to include in the transaction
  const { blockhash } = await connection.getLatestBlockhash(""finalized"");

  const transaction = new Transaction({
    recentBlockhash: blockhash,
    // Alice pays the transaction fee
    feePayer: alicePublicKey,
  });

  // Transfer 0.01 SOL from Alice -> Bob
  transaction.add(
    SystemProgram.transfer({
      fromPubkey: alicePublicKey,
      toPubkey: bobKeypair.publicKey,
      lamports: 0.01 * LAMPORTS_PER_SOL,
    })
  );

  // Transfer 1 token from Bob -> Alice
  transaction.add(
    createTransferCheckedInstruction(
      bobTokenAddress, // source
      tokenAddress, // mint
      aliceTokenAccount.address, // destination
      bobKeypair.publicKey, // owner of source account
      1 * 10 ** tokenMint.decimals, // amount to transfer
      tokenMint.decimals // decimals of token
    )
  );

","[-7.91117474e-02  1.49419960e-02 -6.31712154e-02 -8.17650333e-02
 -9.45060253e-02  1.56550203e-02  5.72060458e-02  2.50235852e-02
  1.09429009e-01  4.47289571e-02  1.14823386e-01 -3.43202092e-02
  4.05309014e-02 -7.26949573e-02 -5.12545090e-03 -4.90209982e-02
 -6.48068786e-02  1.16284061e-02 -7.87013695e-02 -5.15404344e-02
  2.12234515e-03  4.71764849e-03 -5.11133857e-02 -9.24316794e-03
 -1.64805464e-02 -7.94228725e-03  6.24070829e-03  5.32573126e-02
 -3.01488652e-03 -7.68051818e-02  5.78038255e-03  1.24726154e-01
 -4.43339981e-02 -1.04659796e-03  8.52028057e-02  3.71870361e-02
  8.12508911e-03 -4.14103530e-02  3.48589532e-02 -6.00488000e-02
 -6.65829182e-02 -1.55885760e-02 -8.20499510e-02 -2.53960211e-02
  9.35685709e-02 -1.14836190e-02 -4.04779501e-02 -2.83158501e-03
 -2.33872607e-02 -5.34446202e-02 -3.54476422e-02  8.94269720e-02
  1.63620487e-02  7.04316795e-02 -5.92060983e-02 -9.34068114e-02
 -6.14976436e-02  3.73450704e-02  6.81145266e-02 -3.37893777e-02
 -4.07990031e-02  3.86008397e-02 -4.76128012e-02 -1.81115232e-02
 -1.66154969e-02 -5.72277512e-03 -6.71130121e-02 -8.69242251e-02
 -1.62094105e-02  2.43925434e-02 -5.90651855e-02 -5.13732880e-02
 -1.46489218e-01  5.88012785e-02 -6.12354316e-02  1.63498204e-02
 -4.89489816e-04  3.03249452e-02 -7.66111771e-03 -7.55603462e-02
  2.27592476e-02 -3.54151912e-02  6.74315616e-02 -2.08023991e-02
 -3.86422314e-02  5.61250858e-02 -9.70626175e-02  7.28404596e-02
  1.33695714e-02 -3.86494654e-03  4.55352254e-02  7.00107068e-02
  4.34603654e-02 -4.46196413e-03 -2.91867163e-02 -3.08646038e-02
 -3.17395478e-03  8.47044587e-02 -2.01110821e-03  7.96454400e-02
  7.07377866e-02  6.79680109e-02 -1.78239066e-02 -2.16261018e-02
 -2.11223997e-02  9.60466545e-03  8.77874568e-02 -1.75421350e-02
  4.98573557e-02 -6.89433813e-02 -5.42341918e-02  1.65109728e-02
 -1.16943661e-02 -1.01403475e-01 -1.23071764e-02  9.10449028e-02
 -6.05206788e-02  3.78774963e-02 -4.25309204e-02  3.51538472e-02
  1.51775768e-02 -8.03618040e-03 -1.18495367e-01  3.19451876e-02
 -6.07913807e-02 -6.54880106e-02  1.06412224e-01  1.96623779e-32
 -4.68251482e-02 -3.98014253e-03  1.05586266e-02 -9.66178849e-02
  2.02159043e-02  4.88195801e-03 -1.95572674e-02  3.62225855e-03
 -1.03853785e-01 -3.29320952e-02 -5.49815148e-02 -1.35451511e-01
 -4.04768214e-02 -4.89165969e-02  3.90615053e-02 -3.66929546e-02
  3.08675691e-02 -5.44329472e-02  5.22403345e-02  2.19486039e-02
  2.66039036e-02 -1.52068939e-02  3.88956480e-02  2.25100964e-02
  3.72521840e-02  4.82850261e-02 -2.20025759e-02 -9.58015323e-02
  4.38475311e-02  3.70076261e-02  3.38098630e-02  6.80901762e-03
 -4.08358164e-02 -2.99712247e-03 -7.49488100e-02 -3.28930058e-02
  2.40561459e-02 -3.10614482e-02 -6.34042472e-02 -2.62248274e-02
  3.06722173e-03  2.76387278e-02 -7.21194297e-02  1.21936370e-02
 -5.60095869e-02  4.63733561e-02  3.63763012e-02  4.86991042e-03
  1.16564520e-01  1.87391490e-02 -4.16559391e-02  2.91912016e-02
 -4.24936712e-02 -1.58107430e-02  5.11094034e-02 -7.01680332e-02
  1.28782280e-02 -2.80656256e-02 -5.29330270e-03  3.49188820e-02
 -8.37076397e-04 -4.00823541e-02  6.95559233e-02  4.24581096e-02
  1.00704422e-02 -5.75126596e-02 -1.84241123e-02 -2.68789176e-02
 -2.12590862e-02 -1.02128629e-02 -8.57595950e-02  8.42291303e-03
  5.20684272e-02  1.63281299e-02 -5.42807020e-02 -2.77837832e-02
  3.74799557e-02 -1.67332143e-02 -2.72967424e-02  5.42608239e-02
 -1.81037560e-02 -5.50976060e-02 -2.67963335e-02 -3.40261497e-02
  5.61808497e-02  6.06081448e-02  4.50931229e-02 -3.67837138e-02
  4.46148999e-02 -1.77365132e-02 -1.08556952e-02 -2.93052034e-03
  3.31904553e-02  4.38507088e-02  3.01187485e-03 -1.77814150e-32
 -1.36091718e-02  5.56264296e-02 -6.87346831e-02  3.37938666e-02
 -4.52113301e-02  5.87096997e-03 -5.30425506e-03  1.27924597e-02
  3.83886229e-03  1.53280944e-02 -6.09622849e-03 -1.24403182e-02
 -1.06209498e-02  2.78292820e-02  8.35497603e-02 -4.78443429e-02
  1.81454998e-02  6.15779608e-02 -1.75859816e-02  1.12780808e-02
 -5.70189487e-03  5.59262596e-02 -7.26667345e-02  5.80521077e-02
  2.85580358e-03  5.94758540e-02 -1.80734787e-02  9.56850424e-02
  3.27369757e-03  4.95335758e-02  4.36485931e-02 -1.84214339e-02
 -5.98580055e-02  8.69357213e-02  9.45028197e-03 -1.29209012e-01
  1.26809403e-01  9.88047197e-02  1.31581808e-02  4.46204655e-02
  4.50839549e-02  2.47090701e-02 -3.02710198e-02  4.57436964e-02
  1.88629385e-02 -6.36259839e-02  3.09783835e-02 -2.24583242e-02
  2.93016490e-02 -2.15037167e-02  9.56638008e-02  2.10162308e-02
  3.68534103e-02  1.51940400e-03  2.35551875e-02  4.61257286e-02
  7.63487443e-02 -6.46230876e-02 -4.98541743e-02 -1.35314167e-01
 -2.15504374e-02 -3.32093574e-02  7.94907063e-02 -9.28734243e-03
  1.29809126e-01 -3.09475586e-02  3.03164329e-02  4.62903753e-02
  5.02044074e-02 -1.10817611e-01 -2.56607998e-02 -6.76520169e-02
 -4.52650636e-02  3.83093022e-02  9.68933254e-02  1.50762051e-02
 -2.48693433e-02 -5.19554690e-03 -2.28420347e-02  5.37782460e-02
 -7.69551024e-02  2.77888309e-02 -6.30849367e-03  2.67538745e-02
  1.97812673e-02 -1.25561161e-02 -2.03372054e-02  9.56423208e-03
  3.80006805e-02 -5.08844443e-02 -1.15469620e-02  3.93678136e-02
  3.85601670e-02  6.40317649e-02 -3.85349989e-02 -6.21246912e-08
 -3.94288339e-02 -1.52898043e-01 -6.06438220e-02 -1.58319483e-03
  8.11060369e-02 -1.87594164e-02 -2.11455040e-02 -5.69205247e-02
 -4.54182588e-02 -6.05988950e-02  2.69438419e-03 -2.29066610e-02
 -5.64078316e-02 -5.53705469e-02  1.65652577e-02  1.92880500e-02
  2.55149081e-02 -3.70951407e-02 -2.02129539e-02 -5.00515699e-02
  8.03081989e-02 -3.55736143e-03  5.51407598e-03  2.97044707e-03
 -7.07803145e-02  2.15063896e-02  2.20624525e-02  1.51182979e-01
 -5.01135923e-02 -6.50675893e-02 -5.27462829e-03 -2.34492701e-02
  2.67952606e-02 -2.83774324e-02 -9.71374102e-03 -1.28617855e-02
  6.50424138e-02  2.17445455e-02 -1.78200696e-02  5.09061515e-02
  4.80304845e-02 -6.95367828e-02  8.19045003e-04  1.23822726e-02
  7.93691352e-03 -6.57236297e-03  2.69996319e-02 -3.20688188e-02
  8.03489015e-02 -3.90602127e-02 -6.53239712e-02 -1.77147370e-02
  5.17353825e-02  6.92597702e-02  8.61045998e-03 -1.83062311e-02
 -1.87278294e-03  1.95234474e-02  6.33808598e-02  1.52435200e-02
  7.95113817e-02  5.02061732e-02 -4.28129099e-02 -8.54190215e-02]"
" // Partial sign as Bob
  transaction.partialSign(bobKeypair);

  // Serialize the transaction and convert to base64 to return it
  const serializedTransaction = transaction.serialize({
    // We will need Alice to deserialize and sign the transaction
    requireAllSignatures: false,
  });
  const transactionBase64 = serializedTransaction.toString(""base64"");
  return transactionBase64;

  // The caller of this can convert it back to a transaction object:
  const recoveredTransaction = Transaction.from(
    Buffer.from(transactionBase64, ""base64"")
  );
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899// 1. Add an instruction to send the token from Bob to Alice
transaction.add(
  createTransferCheckedInstruction(
    bobTokenAddress, // source
    tokenAddress, // mint
    aliceTokenAccount.address, // destination
    bobKeypair.publicKey, // owner of source account
    1 * 10 ** tokenMint.decimals, // amount to transfer
    tokenMint.decimals // decimals of token
  )
);

// 2. Bob partially signs the transaction
transaction.partialSign(bobKeypair);

// 3. Serialize the transaction without requiring all signatures
const serializedTransaction = transaction.serialize({
  requireAllSignatures: false,
});

// 4. Alice can deserialize the transaction
const recoveredTransaction = Transaction.from(
  Buffer.from(transactionBase64, ""base64"")
);
123456789101112131415161718192021222324# Nonce vĩnh viễnRecentBlockhash là một giá trị quan trọng cho một transaction. Transaction của bạn sẽ bị từ chối nếu bạn sử dụng một blockhash đã quá hạn (sau 150 blocks). Bạ có thể sử dụng durable nonce để có được một blockhash không bao giờ hết hạn. Để kích hoạt cơ chế, transaction của bạn phảiSử dụng một nonce lưu trong nonce account như là blockhash hiện tạiĐặt cơ chế nonce advance trong chỉ thị đầu tiên# Tạo Nonce AccountTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  Keypair,
  Transaction,
  NONCE_ACCOUNT_LENGTH,
  SystemProgram,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const feePayer = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  const nonceAccountAuth = Keypair.generate();

  let nonceAccount = Keypair.generate();
  console.log(`nonce account: ${nonceAccount.publicKey.toBase58()}`);

  let tx = new Transaction().add(
    // create nonce account
    SystemProgram.createAccount({
      fromPubkey: feePayer.publicKey,
      newAccountPubkey: nonceAccount.publicKey,
      lamports: await connection.getMinimumBalanceForRentExemption(
        NONCE_ACCOUNT_LENGTH
      ),
      space: NONCE_ACCOUNT_LENGTH,
      programId: SystemProgram.programId,
    }),
    // init nonce account
    SystemProgram.nonceInitialize({
      noncePubkey: nonceAccount.publicKey, // nonce account pubkey
      authorizedPubkey: nonceAccountAuth.publicKey, // nonce account authority (for advance and close)
    })
  );

  console.log(
    `txhash: ${await connection.sendTransaction(tx, [feePayer, nonceAccount])}`
  );
})();
12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849let tx = new Transaction().add(
  // create nonce account
  SystemProgram.createAccount({
    fromPubkey: feePayer.publicKey,
    newAccountPubkey: nonceAccount.publicKey,
    lamports: await connection.getMinimumBalanceForRentExemption(
      NONCE_ACCOUNT_LENGTH
    ),
    space: NONCE_ACCOUNT_LENGTH,
  ","[ 4.87154117e-03  6.02626242e-02 -4.43017595e-02 -2.19664760e-02
 -1.33275256e-01  2.95663439e-02 -2.09425716e-03  1.09991468e-01
 -2.34315190e-02  3.72420549e-02 -4.34739254e-02 -1.61818266e-02
 -1.32228509e-02 -1.91130359e-02  1.25644833e-01 -1.82128046e-02
 -6.82049291e-03  1.00833625e-01 -2.08564661e-02  3.96202430e-02
  1.34162008e-04 -6.41556680e-02  7.41459941e-03 -6.88097849e-02
  6.52174279e-02  1.27121611e-02  5.31236157e-02 -4.62060273e-02
 -4.30437028e-02  4.76273261e-02  4.87320945e-02  4.00252454e-02
 -2.50082072e-02 -3.90860476e-02 -1.70191769e-02  1.30299553e-01
 -2.76232921e-02  1.09332604e-02  7.59086683e-02 -8.61272141e-02
 -2.86085680e-02  5.80432341e-02 -9.59336162e-02  2.40018126e-02
  1.96485613e-02  2.14854926e-02  2.94307433e-02  4.51858863e-02
  2.99978033e-02 -1.92115514e-03  3.83668318e-02  8.98141135e-03
  4.19036895e-02  8.22645724e-02 -6.25499785e-02 -1.21376282e-02
 -2.84957117e-03  1.38484463e-02  3.55045311e-02  3.14547978e-02
 -1.21094892e-02 -4.27783467e-03  3.74511699e-03 -5.23819290e-02
 -6.45794049e-02 -1.28096491e-02 -1.59913898e-02 -4.61620875e-02
  7.16549996e-03  2.27491595e-02  1.58284493e-02 -4.08654474e-02
 -1.08951643e-01 -4.48692441e-02 -1.66511945e-02 -2.51079015e-02
  4.49021496e-02  4.42408621e-02 -3.42657343e-02  6.73742546e-03
  3.14176567e-02 -2.88803019e-02  1.18587613e-01  9.82656144e-03
 -4.77663055e-03  4.67908904e-02 -1.55830700e-02  4.06865701e-02
 -6.99182153e-02 -3.21880057e-02 -7.27223754e-02 -1.57206245e-02
  4.07326221e-02 -6.63604215e-02  6.58375472e-02 -4.50836532e-02
  1.56761706e-02  2.76381969e-02  4.01158221e-02  5.92533275e-02
  3.75863388e-02  1.52139366e-02 -3.22014205e-02 -2.21477766e-02
  7.07898661e-02  5.39356917e-02  3.85688581e-02 -9.61327087e-03
  1.27054453e-02 -1.83358137e-02 -1.61524285e-02  6.52298704e-02
 -3.12473308e-02 -2.09965132e-04  3.95084321e-02  1.72003824e-02
 -4.55495194e-02  1.78444609e-02 -1.12500042e-02 -9.83439386e-03
  5.73835671e-02 -8.29880685e-02 -4.18963060e-02  7.42849484e-02
 -3.58302556e-02 -3.61186229e-02  9.49810743e-02  2.19849806e-33
 -3.68237458e-02  1.13570048e-02 -1.62867624e-02 -2.27486957e-02
 -2.11689360e-02  4.53370325e-02  3.88385616e-02  2.47852714e-03
 -3.43518630e-02  4.27510310e-03 -1.98416784e-02 -5.60090505e-02
 -1.62432827e-02  5.53724058e-02 -9.85918120e-02 -2.58118901e-02
 -7.57758468e-02  1.89036652e-02  9.59725752e-02  6.03796467e-02
 -4.80952039e-02  1.45213958e-02 -5.94212115e-02  3.94656472e-02
 -3.19883451e-02 -9.22743697e-03  2.51502171e-02 -3.27901244e-02
 -9.61160474e-03 -2.46835947e-02  4.04465981e-02 -1.29031716e-04
 -1.95451193e-02  2.22758688e-02  1.93179958e-02 -6.57531247e-02
  1.96435302e-02  2.51621399e-02 -8.30689445e-02 -4.10715118e-02
  6.55333698e-02 -1.26793915e-02 -9.22508463e-02 -2.47756559e-02
 -6.10442422e-02  1.68369128e-03  3.77410166e-02 -8.28373712e-03
  1.79059908e-01 -8.85576010e-03 -1.63821951e-02  7.95955360e-02
 -1.59327884e-03 -5.57625778e-02 -2.68825050e-02 -5.24187312e-02
  1.33553986e-02  1.82570722e-02 -5.78703210e-02 -2.43790243e-02
 -3.29518802e-02  3.23743224e-02  6.53671250e-02 -4.85110618e-02
 -3.28394100e-02  3.19665335e-02 -4.86060604e-02 -6.20078146e-02
 -5.64671569e-02 -7.93223158e-02 -5.55914603e-02  1.80934742e-02
  1.99215822e-02  1.94375180e-02 -4.23675738e-02  5.63803501e-02
  2.30542198e-02  5.31549603e-02  1.93149764e-02 -7.21213296e-02
 -1.66160427e-02  3.47884260e-02 -4.05608788e-02  1.71617623e-02
  1.82522573e-02  3.22656929e-02 -8.32836628e-02 -8.94786865e-02
 -5.76815084e-02 -2.43450496e-02  4.50146608e-02 -7.94019029e-02
 -3.70683894e-02  6.03934415e-02  2.08331030e-02 -3.75583669e-33
  2.30698586e-02 -6.99847005e-03 -3.17057930e-02  3.04501764e-02
 -4.47904468e-02  1.13782296e-02  1.20098777e-02  4.19236235e-02
 -6.74002096e-02 -1.79080490e-03 -8.07803422e-02 -2.08458081e-02
 -2.49352716e-02  1.23427976e-02 -1.05204964e-02 -3.13423052e-02
 -1.59826521e-02  7.97694772e-02  2.55276053e-03 -3.47172618e-02
  7.37042502e-02  3.21127474e-02 -3.40537797e-03  3.50048207e-02
 -4.13664430e-02  6.46895319e-02 -2.89370436e-02  7.27449059e-02
  3.77729833e-02 -1.30158225e-02  4.46135737e-03  9.65844095e-03
  6.85208812e-02 -2.62283627e-02 -3.61475907e-02 -1.27062604e-01
  4.30851094e-02  6.71755299e-02  5.28563699e-03  3.64637887e-03
  3.18724029e-02 -7.37525076e-02  1.93116423e-02  5.86771779e-02
  1.17939830e-01 -3.95804606e-02 -3.46884951e-02  1.26739582e-02
  7.26999938e-02  1.26936778e-01  4.92124110e-02  5.12206852e-02
 -6.92707226e-02 -3.98993678e-03 -2.49097981e-02  1.78931449e-02
  7.64342248e-02 -6.79999441e-02  6.64811656e-02 -6.10516556e-02
 -4.23772335e-02 -4.70908023e-02  1.53106287e-01  5.82635077e-03
  9.82667357e-02  5.11431368e-03 -1.22056319e-03  3.26861907e-03
  3.04674124e-03  4.72262762e-02 -8.72471370e-04  3.51500101e-02
  4.84612472e-02  5.37980758e-02  1.90664366e-01  6.00129273e-03
 -4.71589155e-03 -1.13948472e-01  2.42969543e-02 -6.67332858e-03
 -4.07180190e-02 -3.08123324e-02  1.50009189e-02  5.79683520e-02
  1.74860284e-02 -2.16823090e-02 -8.79574660e-03  2.42071711e-02
 -4.74801138e-02 -2.59906240e-02  2.06188299e-03  2.71348488e-02
  5.38993478e-02 -1.09319724e-01  6.75907079e-03 -5.34780469e-08
  1.91317946e-02 -5.04631363e-02 -3.43825482e-02  3.95558029e-03
 -1.00648189e-02  4.79140319e-02 -4.71856929e-02 -4.28286418e-02
 -1.45241478e-02 -6.19275309e-02 -1.08610824e-01  3.36075127e-02
 -3.42298001e-02 -6.00455925e-02 -1.63808409e-02 -6.08402081e-02
  5.51822446e-02 -1.31256044e-01 -4.34469730e-02 -5.99195249e-03
 -2.24789437e-02 -5.43976836e-02  2.38854289e-02 -2.69977041e-02
  4.90429290e-02 -4.15550098e-02  8.56249630e-02  1.84073195e-01
  2.22065765e-02 -8.07927474e-02 -1.01780668e-01  5.22579849e-02
 -1.02194734e-02 -2.01504659e-02 -6.23300038e-02 -1.25054112e-02
  7.98394978e-02 -2.22212374e-02  3.62487929e-03 -1.18963309e-02
 -6.28002267e-03 -2.19718483e-03 -4.39228714e-02  3.18650715e-02
 -1.19051971e-02  3.12999524e-02 -2.62930635e-02  3.23049352e-02
  1.03985900e-02  2.60318797e-02  1.26794726e-02 -3.59103829e-02
 -1.92761160e-02  1.99446119e-02 -1.03858285e-01 -1.66545808e-03
 -8.61468092e-02 -2.50880346e-02  1.26756221e-01  3.34187821e-02
  2.87110358e-02  4.92326990e-02 -4.97191288e-02 -9.49465632e-02]"
" programId: SystemProgram.programId,
  }),
  // init nonce account
  SystemProgram.nonceInitialize({
    noncePubkey: nonceAccount.publicKey, // nonce account pubkey
    authorizedPubkey: nonceAccountAuth.publicKey, // nonce account authority (for advance and close)
  })
);

console.log(
  `txhash: ${await connection.sendTransaction(tx, [feePayer, nonceAccount])}`
);
123456789101112131415161718192021# Truy vấn Nonce AccountTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  NonceAccount,
} from ""@solana/web3.js"";

(async () => {
  // connection
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");

  const nonceAccountPubkey = new PublicKey(
    ""7H18z3v3rZEoKiwY3kh8DLn9eFT6nFCQ2m4kiC7RZ3a4""
  );

  let accountInfo = await connection.getAccountInfo(nonceAccountPubkey);
  let nonceAccount = NonceAccount.fromAccountData(accountInfo.data);
  console.log(`nonce: ${nonceAccount.nonce}`);
  console.log(`authority: ${nonceAccount.authorizedPubkey.toBase58()}`);
  console.log(`fee calculator: ${JSON.stringify(nonceAccount.feeCalculator)}`);
})();
12345678910111213141516171819202122let accountInfo = await connection.getAccountInfo(nonceAccountPubkey);
let nonceAccount = NonceAccount.fromAccountData(accountInfo.data);
12# Sử dụng Nonce AccountTSPress </> button to view full sourceimport {
  clusterApiUrl,
  Connection,
  PublicKey,
  Keypair,
  Transaction,
  SystemProgram,
  NonceAccount,
  LAMPORTS_PER_SOL,
} from ""@solana/web3.js"";
import * as bs58 from ""bs58"";

(async () => {
  // Setup our connection and wallet
  const connection = new Connection(clusterApiUrl(""devnet""), ""confirmed"");
  const feePayer = Keypair.generate();

  // Fund our wallet with 1 SOL
  const airdropSignature = await connection.requestAirdrop(
    feePayer.publicKey,
    LAMPORTS_PER_SOL
  );
  await connection.confirmTransaction(airdropSignature);

  // G2FAbFQPFa5qKXCetoFZQEvF9BVvCKbvUZvodpVidnoY
  const nonceAccountAuth = Keypair.fromSecretKey(
    bs58.decode(
      ""4NMwxzmYj2uvHuq8xoqhY8RXg63KSVJM1DXkpbmkUY7YQWuoyQgFnnzn6yo3CMnqZasnNPNuAT2TLwQsCaKkUddp""
    )
  );

  const nonceAccountPubkey = new PublicKey(
    ""7H18z3v3rZEoKiwY3kh8DLn9eFT6nFCQ2m4kiC7RZ3a4""
  );
  let nonceAccountInfo = await connection.getAccountInfo(nonceAccountPubkey);
  let nonceAccount = NonceAccount.fromAccountData(nonceAccountInfo.data);

  let tx = new Transaction().add(
    // nonce advance must be the first insturction
    SystemProgram.nonceAdvance({
      noncePubkey: nonceAccountPubkey,
      authorizedPubkey: nonceAccountAuth.publicKey,
    }),
    // after that, you do what you really want to do, here we append a transfer instruction as an example.
    SystemProgram.transfer({
      fromPubkey: feePayer.publicKey,
      toPubkey: nonceAccountAuth.publicKey,
      lamports: 1,
    })
  );
  // assign `nonce` as recentBlockhash
  tx.recentBlockhash = nonceAccount.nonce;
  tx.feePayer = feePayer.publicKey;
  tx.sign(
    feePayer,
    nonceAccountAuth
  ); /* fee payer + nonce account authority + ... */

  console.log(`txhash: ${await connection.sendRawTransaction(tx.serialize())}`);
})();
123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960let tx = new Transaction().add(
  // nonce advance must be the first insturction
  SystemProgram.nonceAdvance({
    noncePubkey: nonceAccountPubkey,
    authorizedPubkey: nonceAccountAuth.publicKey,
  }),
  // after that, you do what you really want to do, here we append a transfer instruction as an example.
  SystemProgram.transfer({
    fromPubkey: feePayer.publicKey,
    toPubkey: nonceAccountAuth.publicKey,
    lamports: 1,
  })
);
// assign `nonce` as recentBlockhash
tx.recentBlockhash = nonceAccount.nonce;
tx.feePayer = feePayer.publicKey;
tx.sign(
  feePayer,
  nonceAccountAuth
); /* fee payer + nonce account authority + ... */

console.log(`txhash: ${await connection.sendRawTransaction(tx.serialize())}`);
12345678910111213141516171819202122 # Dịch vụ tên miền# Dịch vụ đăng ký tên miềnDịch vụ đăng ký tên miền lưu trữ thông tin về tên miền. Nó được cấu tạo bởi 2 phần:Phần mào đầuPhàn dữ liệuDữ liệu cho tên miền lưu được","[-6.10290095e-02 -2.31455322e-02 -1.29824787e-01 -4.25437428e-02
  2.36221533e-02 -7.81159252e-02  5.41104283e-03 -8.63840431e-03
  5.81628904e-02  2.35106330e-02  3.31706218e-02 -1.04411744e-01
 -9.10259970e-03 -7.98598006e-02 -1.04517005e-02  1.81136187e-02
 -4.52393927e-02 -9.13244262e-02  3.56930904e-02 -5.05453907e-02
  3.89652513e-02 -1.10389115e-02  3.13037224e-02 -3.72553617e-02
 -1.88896561e-03 -4.87718321e-02 -2.21237782e-02 -3.41914780e-02
 -3.20417099e-02  4.96469485e-03  2.09435187e-02  9.22632404e-03
 -2.99173761e-02 -2.21008155e-02  7.27843866e-02  6.52142093e-02
  2.61916593e-03 -1.72584150e-02 -3.04501038e-03 -9.80921648e-03
 -1.94156505e-02  4.29283418e-02 -1.14041954e-01  3.42097282e-02
  5.14953993e-02 -8.70277956e-02 -1.15593351e-01  5.54321916e-04
 -2.40859389e-02 -3.42776105e-02 -8.33495930e-02 -4.19643940e-03
 -2.07556393e-02  8.46387818e-03 -8.86361971e-02  3.08440030e-02
  1.26929162e-02  4.38908972e-02  7.25381225e-02 -4.47336957e-02
  7.05822855e-02 -1.82570964e-02  5.54356910e-02 -2.55799647e-02
 -1.08811716e-02  4.38064337e-02 -2.23500337e-02 -1.89877814e-03
 -1.82404357e-03 -7.86696821e-02 -7.96665344e-03 -5.47499675e-03
 -8.74036178e-02  1.62310414e-02 -4.01955955e-02 -6.54397607e-02
  1.06132766e-02  8.11937675e-02 -2.15750169e-02 -1.42861493e-02
 -2.88069192e-02 -4.59751487e-02  7.35257706e-03  1.28654972e-01
  2.54649539e-02  5.96822724e-02 -7.74852112e-02 -5.13577908e-02
  4.17517833e-02  1.84093434e-02 -8.28135163e-02  5.54494001e-02
 -5.77514954e-02  1.60248531e-03  3.47740911e-02  3.30083258e-02
 -1.67427119e-02  5.97621799e-02 -1.02350101e-01  1.35185435e-01
  3.92195955e-02 -1.27218049e-02 -7.14427903e-02 -2.58624256e-02
  3.21356952e-02 -9.82739497e-03  9.73413065e-02 -4.85785082e-02
  4.40744385e-02  4.76536155e-02 -1.37121032e-03  5.55685423e-02
 -4.00345698e-02  1.50157018e-02 -3.21875773e-02  5.52282408e-02
  6.87637553e-02  5.62297329e-02  1.05857372e-01  3.94103937e-02
  7.21288696e-02  2.21803766e-02 -3.36211920e-02 -6.15051650e-02
  5.19460347e-03  7.23138172e-03  5.86416051e-02  1.36755485e-32
 -3.11136153e-02 -2.96277571e-02 -4.49885475e-03 -1.14153884e-02
 -1.06046684e-02 -3.70885134e-02  4.47787531e-02 -1.18751545e-02
 -1.00759186e-01 -1.09406710e-02 -9.73183662e-02  1.56406220e-02
  3.90644334e-02 -9.96656939e-02 -3.06699891e-02 -7.44127110e-02
  2.94189900e-02  3.23777944e-02  7.32564777e-02 -3.40038389e-02
  7.90582784e-03  1.07251164e-02  2.86883041e-02 -5.22709172e-03
  4.92921472e-03  2.89260915e-05 -5.96805401e-02  5.47603145e-03
  2.47530676e-02  2.41198819e-02  5.98658323e-02  4.65189517e-02
  9.60844476e-03  5.82945719e-02  2.90114805e-02 -4.42488417e-02
  3.01796291e-03 -4.43044938e-02 -8.42265412e-02  4.28796886e-03
  8.03149492e-03 -3.85816284e-02  1.23843097e-03 -5.67553304e-02
 -6.34661019e-02 -5.46904542e-02  4.01064083e-02  1.44788325e-02
  6.85167834e-02  3.97060104e-02 -7.51274005e-02  2.24923771e-02
 -1.34908017e-02 -7.56448135e-02  2.01718546e-02 -4.01156843e-02
 -3.14267464e-02  1.91677660e-02  4.11974126e-03 -1.40101081e-04
 -1.87068507e-02 -5.50832674e-02  1.25873173e-02  1.95630863e-02
 -2.44085081e-02 -8.38264730e-03 -9.71489325e-02  2.01894883e-02
  4.48904969e-02 -6.17210642e-02 -3.93986516e-02  3.30560915e-02
  3.84220816e-02  9.38242897e-02 -3.47639155e-03 -3.69229913e-02
 -1.26389763e-03  9.45184305e-02 -6.40811771e-02  6.65692985e-03
  8.19928870e-02 -6.73452914e-02 -7.04628825e-02  8.19558650e-02
  5.97234555e-02  5.10742143e-02 -3.56391855e-02  1.82961114e-02
  1.89449626e-03  6.35598153e-02  7.79469609e-02  3.18084732e-02
 -8.91224593e-02 -1.91729311e-02 -2.70147771e-02 -1.35265663e-32
 -4.45863791e-03 -9.29269008e-03 -9.83317718e-02 -7.78899565e-02
  2.22216360e-02  5.25944121e-02  7.85286259e-03 -1.98746473e-02
  6.76939869e-03 -1.53620457e-02  7.10249618e-02  1.44760124e-02
  2.02609804e-02 -3.61315161e-02  9.17915720e-04  6.26963452e-02
  6.38143793e-02  1.45365205e-02 -2.70273052e-02 -2.60111429e-02
  1.57276113e-02  1.11743741e-01 -5.76511323e-02  9.28491354e-03
 -5.52213304e-02 -3.21776755e-02 -6.65933192e-02  1.02231957e-01
 -1.01376154e-01 -3.11958324e-02  1.02750719e-01  1.87820047e-02
 -1.06933922e-01  4.66125421e-02 -3.58368345e-02 -7.75596350e-02
 -1.89826153e-02  6.03892095e-02 -2.18406077e-02  2.22738646e-02
  6.31615296e-02 -2.16967370e-02 -7.67970085e-03  2.26225238e-02
  5.17864991e-03  3.76456529e-02  1.19079929e-02 -8.19345191e-02
 -3.95545363e-02  6.63068071e-02  1.80072598e-02 -6.87076002e-02
  6.25058562e-02 -2.42273621e-02 -3.17006670e-02  9.07471180e-02
  7.30521679e-02 -5.41951740e-04  8.89882073e-02 -1.93899069e-02
  9.71850902e-02 -1.30835637e-01  1.58389602e-02  2.67758556e-02
  1.16439439e-01 -4.07728180e-02 -5.45753725e-03  1.36262774e-01
  9.97358337e-02  1.37578035e-02 -3.20710167e-02 -1.17313722e-02
 -2.75228992e-02 -4.58670855e-02  1.08352341e-02 -7.79207097e-03
 -1.80798899e-02 -2.19122451e-02 -3.74169573e-02  1.39858248e-02
 -1.11932668e-03  3.24520953e-02 -1.46811223e-03 -3.17526758e-02
  5.37231490e-02 -4.80324328e-02 -1.83126368e-02 -6.43571001e-03
 -4.51320447e-02  4.77042682e-02 -3.02746799e-02  1.76033769e-02
 -7.47271478e-02  2.46847663e-02  3.43276225e-02 -6.83424872e-08
 -9.59423603e-04  5.17659448e-03 -3.80889326e-02  4.56342623e-02
  8.91700611e-02  6.83545023e-02 -2.35697050e-02 -5.89358173e-02
 -7.75890201e-02 -4.02079076e-02 -4.85159196e-02 -1.42711019e-02
 -1.09547274e-02 -3.31019312e-02  1.78293828e-02 -2.76580434e-02
 -5.42822201e-03  3.93292010e-02 -5.85888105e-04 -7.99221471e-02
  2.18416043e-02 -2.87881419e-02 -1.57126393e-02  1.83964819e-02
  1.77318957e-02 -1.94216445e-02  6.25214726e-02  7.53818154e-02
  2.58207954e-02 -5.76747693e-02 -1.04036771e-01  8.27992801e-03
  3.23718484e-03 -2.95969956e-02 -1.51398003e-01  6.99476078e-02
  1.04728518e-02  1.30587947e-02 -1.01066427e-02 -3.04652285e-02
  1.48255527e-02  1.13448776e-01 -1.16754444e-02  3.29829082e-02
 -5.20942621e-02  4.00299691e-02 -3.07540726e-02  4.10741828e-02
  1.00120500e-01 -2.89242938e-02  1.43463481e-02 -4.33289632e-02
  1.65035147e-02  1.46780804e-01  3.31754014e-02 -1.03233317e-02
 -4.12711315e-03  1.13774678e-02 -3.02215777e-02  1.04304478e-01
  5.81143349e-02  1.67388674e-02 -1.25371320e-02 -3.62791494e-02]"
"đứng trước bởi một phần mào đầu, bên dưới là cấu trúc của phần mào đầu trong JS:TSPress </> button to view full sourceimport { PublicKey } from ""@solana/web3.js"";
import { Schema } from ""borsh"";

export class NameRegistryState {
  parentName: PublicKey;
  owner: PublicKey;
  class: PublicKey;
  data: Buffer | undefined;

  static HEADER_LEN = 96;

  static schema: Schema = new Map([
    [
      NameRegistryState,
      {
        kind: ""struct"",
        fields: [
          [""parentName"", [32]],
          [""owner"", [32]],
          [""class"", [32]],
        ],
      },
    ],
  ]);
  constructor(obj: {
    parentName: Uint8Array;
    owner: Uint8Array;
    class: Uint8Array;
  }) {
    this.parentName = new PublicKey(obj.parentName);
    this.owner = new PublicKey(obj.owner);
    this.class = new PublicKey(obj.class);
  }
}
12345678910111213141516171819202122232425262728293031323334export class NameRegistryState {
  parentName: PublicKey;
  owner: PublicKey;
  class: PublicKey;
  data: Buffer | undefined;

  static HEADER_LEN = 96;

  static schema: Schema = new Map([
    [
      NameRegistryState,
      {
        kind: ""struct"",
        fields: [
          [""parentName"", [32]],
          [""owner"", [32]],
          [""class"", [32]],
        ],
      },
    ],
  ]);
  constructor(obj: {
    parentName: Uint8Array;
    owner: Uint8Array;
    class: Uint8Array;
  }) {
    this.parentName = new PublicKey(obj.parentName);
    this.owner = new PublicKey(obj.owner);
    this.class = new PublicKey(obj.class);
  }
}
12345678910111213141516171819202122232425262728293031# Phân giải tên miền SOLTên miền .SOL là các tên miền độc nhất, dễ đọc, và có thể chuyển đổi thành khoá công khai. Nhiều ví sử dụng chúng như là một tuỳ chọn khác cho việc gửi nhận token và SOL. Bạn có chuyển đổi tên miền .SOL thành khoá công khai tương ứng với ví dụ bên dưới:TSPress </> button to view full sourceimport {
  getHashedName,
  getNameAccountKey,
  NameRegistryState,
} from ""@bonfida/spl-name-service"";

import { Connection, clusterApiUrl, PublicKey } from ""@solana/web3.js"";

(async () => {
  const domain = ""levi.sol"";
  const hashedName = await getHashedName(domain.replace("".sol"", """"));
  const nameAccountKey = await getNameAccountKey(
    hashedName,
    undefined,
    new PublicKey(""58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx"") // SOL TLD Authority
  );
  const owner = await NameRegistryState.retrieve(
    new Connection(clusterApiUrl(""mainnet-beta"")),
    nameAccountKey
  );
  console.log(owner.registry.owner.toBase58());
  // JUskoxS2PTiaBpxfGaAPgf3cUNhdeYFGMKdL6mZKKfR
})();
1234567891011121314151617181920212223const domain = ""levi.sol"";
const hashedName = await getHashedName(domain.replace("".sol"", """"));
const nameAccountKey = await getNameAccountKey(
  hashedName,
","[-5.55581599e-02  3.42177786e-02 -9.15465057e-02 -1.50943846e-02
 -3.24008279e-02 -6.80994056e-03  1.97480805e-02  2.37549730e-02
 -2.46238653e-02  2.72698374e-03  5.51734045e-02 -1.21109851e-01
 -6.02559745e-02 -3.93257365e-02  4.88871261e-02  6.68518841e-02
 -1.56482667e-01 -7.02820867e-02 -2.42233388e-02 -4.99371178e-02
  4.61174361e-02 -2.21918547e-03 -1.13989580e-02 -2.22531166e-02
 -1.69496685e-02  1.55712785e-02  4.57553156e-02  2.56295223e-02
  2.67678909e-02 -2.55966019e-02  4.21613781e-03  4.29516099e-03
  2.32558474e-02  1.72941247e-04 -2.02853214e-02  9.68470424e-02
 -6.14553364e-03 -1.23889726e-02  6.11523017e-02 -1.17111374e-02
 -2.77136862e-02  9.30089951e-02 -1.67713910e-02 -8.58703479e-02
  6.60514683e-02 -5.15164295e-03 -8.86020064e-03 -2.17681285e-02
 -7.89429620e-03  6.94763567e-03 -9.63397473e-02  7.13499309e-03
  5.08961035e-03  7.48073729e-03 -2.96740886e-02  7.02926666e-02
 -8.33328366e-02  4.15679738e-02 -4.64371219e-03  2.27850229e-02
  1.94645133e-02  7.20510585e-03  4.62178178e-02 -3.57900672e-02
  4.53994945e-02 -1.01306681e-02 -1.62029564e-02  1.39785437e-02
  8.24609678e-03 -5.00499643e-03  1.04856798e-02 -1.61976088e-02
  1.76182035e-02  5.51722310e-02 -6.73849434e-02 -6.23835623e-02
 -6.91301152e-02  5.03595397e-02 -2.25276127e-02 -5.48399091e-02
  2.02709939e-02 -2.45354418e-02  1.73656549e-02  3.38600539e-02
  1.75263640e-02  8.18358958e-02 -3.31498459e-02 -1.10244386e-01
 -4.71447781e-02  3.89906764e-02 -5.70531143e-03 -4.99115996e-02
  1.36193754e-02  7.47658312e-02  1.59742162e-02  6.20507374e-02
  2.83691846e-03  6.54947245e-03 -7.68357143e-02  1.21808156e-01
 -2.35419651e-03  3.89939826e-03 -1.85969323e-02 -5.75873954e-03
 -1.61250383e-02 -5.00077121e-02  5.47405705e-02 -2.60024052e-02
 -1.29940033e-01  4.38632667e-02 -3.70233618e-02  1.12022102e-01
 -6.74786344e-02 -7.84247816e-02 -7.90785104e-02 -3.81623991e-02
 -2.51434986e-02 -6.20594770e-02  7.56065696e-02 -2.26022173e-02
  1.09993003e-01 -2.10968382e-03 -8.26334506e-02 -1.19360639e-02
  1.15379998e-02 -2.85729151e-02  1.12360716e-02  1.07838529e-32
  6.12594895e-02  3.53291929e-02 -5.93802333e-02  5.57692982e-02
  5.12285531e-03 -2.70165130e-02  8.13422874e-02  1.59823906e-03
 -1.40168935e-01  3.19818174e-03 -4.90563980e-04 -4.39590216e-02
 -2.86325105e-02 -7.37974718e-02  1.79265402e-02 -4.78251325e-03
 -6.51024655e-02  4.41293158e-02 -1.39210012e-03 -3.69890481e-02
  1.56372096e-02  6.78660125e-02 -3.84307653e-02 -9.10360366e-03
  3.78857888e-02  7.70526081e-02 -1.32543799e-02  4.60500307e-02
 -8.26752186e-02  1.81877185e-02  1.39420569e-01  2.54817232e-02
 -1.51582183e-02 -5.80101497e-02  3.52623276e-02 -6.71603009e-02
  8.62999121e-04  7.84263853e-03 -1.02789320e-01 -4.29648459e-02
  1.22295000e-01 -7.02933744e-02 -8.69708695e-03  2.93059293e-02
 -8.29867199e-02  8.07182584e-03 -2.73387823e-02 -1.84710920e-02
  3.43599194e-03 -2.04341915e-02 -1.07753269e-01  1.71955563e-02
 -4.84464653e-02  5.28263263e-02  5.08669131e-02 -3.44157219e-02
 -7.12223873e-02  6.74596280e-02  8.25442001e-03  3.34860981e-02
 -6.67426214e-02  3.02949175e-02 -2.96786726e-02  9.53616127e-02
 -7.93251842e-02 -7.79721932e-03 -1.81960985e-02 -6.28338661e-03
  8.21991712e-02 -1.38645247e-01  1.61933880e-02 -2.28427351e-02
  2.15569530e-02  1.38236592e-02  1.21200169e-02 -3.45894210e-02
 -4.74262387e-02 -3.71135063e-02 -3.79015058e-02 -2.78952718e-02
 -7.24242255e-03 -5.00910990e-02 -7.33316038e-03  7.04695880e-02
  1.62893347e-02 -2.68606958e-03 -1.17863314e-02 -1.83728933e-02
  3.05872317e-02  7.76356310e-02 -5.22155017e-02 -1.27888946e-02
 -1.46713771e-03 -8.03271383e-02 -5.25741018e-02 -9.81946120e-33
  9.78523791e-02 -1.58336423e-02 -1.03790918e-02 -3.97291705e-02
 -1.17861778e-02 -2.77620219e-02  1.98386945e-02  4.73667271e-02
 -3.16852629e-02  9.86731611e-03  5.20787248e-03  3.12988907e-02
  6.34920821e-02  2.47112941e-02  2.19866317e-02  9.81201753e-02
  1.92896370e-02 -6.42628223e-02  2.65405979e-03 -4.17562313e-02
  1.05434842e-02  1.03018925e-01 -5.51607646e-02  3.03390641e-02
 -6.86853454e-02  7.09265424e-03 -2.59555764e-02  8.95852968e-02
  1.98392943e-02  5.38078994e-02  4.13296968e-02 -1.49694849e-02
 -9.19812620e-02  7.87530243e-02 -5.04560396e-03 -6.23817965e-02
  1.41730774e-02  1.22143418e-01 -4.43137512e-02  6.58640116e-02
 -2.07057167e-02  5.88377658e-03  4.19465563e-04  7.54869496e-03
  2.61209961e-02 -1.47585375e-02  6.85518906e-02  3.91144976e-02
 -3.39618772e-02  7.96528347e-03  4.83912230e-02 -7.50817060e-02
 -1.80245321e-02 -1.08871721e-01  5.49206585e-02 -9.53180622e-03
  2.17463970e-02 -1.14744574e-01 -2.16619242e-02  1.65673848e-02
  7.09250867e-02 -1.43699452e-01  5.56796603e-03  6.10568151e-02
  5.97758517e-02 -4.96659167e-02 -3.14660743e-02  3.46396118e-02
  5.61111569e-02  2.86669820e-03 -5.39276898e-02 -1.79098323e-02
  3.91625278e-02  9.97918844e-03  9.94947329e-02  1.36277666e-02
 -3.98035720e-02  8.50298777e-02  1.17514476e-01  9.79024544e-03
 -1.16910264e-02 -5.81892952e-02  6.88843504e-02 -3.57931405e-02
  5.89262843e-02 -6.90304115e-02 -1.13201188e-02 -7.90629419e-04
 -2.54764166e-02 -1.61264464e-02 -1.75580774e-02 -1.30664576e-02
 -1.59768090e-02  4.07079309e-02  5.54216616e-02 -6.38333617e-08
 -8.67679492e-02 -7.36997873e-02 -2.04520747e-02 -1.76458096e-03
 -3.22227329e-02 -6.30005151e-02  6.94739595e-02  1.06993914e-02
 -3.74020194e-03 -6.79942146e-02 -3.86472158e-02  8.40255842e-02
  3.64583954e-02  4.83710393e-02  7.88698625e-03 -8.50284100e-02
 -3.72788385e-02  7.70142674e-02 -3.65728810e-02 -1.18979216e-02
  5.55274263e-02 -3.40617746e-02  4.50862423e-02  4.07846794e-02
  1.08564466e-01  9.46296903e-04 -2.99032442e-02  1.12358658e-02
  2.32748743e-02  5.40004559e-02 -9.69793275e-03  4.45727482e-02
  1.02974787e-01  2.90533006e-02  2.28636079e-02 -3.16402093e-02
  2.49340497e-02  4.62272391e-03 -3.32392305e-02  2.37098038e-02
  4.59481552e-02 -5.38951624e-03 -7.35417083e-02  2.81615406e-02
  5.38361669e-02  6.86714565e-03 -1.16705000e-02  9.15921330e-02
  8.50385278e-02 -5.09030186e-02 -2.91202124e-02 -2.23354176e-02
  2.76457276e-02  2.64857132e-02 -2.11518779e-02 -9.13286861e-03
 -4.21158923e-03  1.02261081e-01  6.75872061e-03  2.23128274e-02
  3.25786881e-02  8.18089768e-02 -1.75079238e-02 -8.38990696e-03]"
" undefined,
  new PublicKey(""58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx"") // SOL TLD Authority
);
const owner = await NameRegistryState.retrieve(
  new Connection(clusterApiUrl(""mainnet-beta"")),
  nameAccountKey
);
console.log(owner.registry.owner.toBase58());
// JUskoxS2PTiaBpxfGaAPgf3cUNhdeYFGMKdL6mZKKfR
12345678910111213# Tra cứu ngượcTra cứu ngược có thể được sử dụng để phân giải tên miền từ khoá công khai của nó.TSPress </> button to view full sourceimport { performReverseLookup } from ""@bonfida/spl-name-service"";
import { PublicKey, Connection, clusterApiUrl } from ""@solana/web3.js"";

async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));
  // Public key of bonfida.sol
  const domainKey = new PublicKey(
    ""Crf8hzfthWGbGbLTVCiqRqV5MVnbpHB1L9KQMd6gsinb""
  );

  const domainName = await performReverseLookup(connection, domainKey); // bonfida
};
123456789101112// Public key of bonfida.sol
const domainKey = new PublicKey(""Crf8hzfthWGbGbLTVCiqRqV5MVnbpHB1L9KQMd6gsinb"");

const domainName = await performReverseLookup(connection, domainKey); // bonfida
1234# Tra cứu tên miền conĐể phân giải một tên miền con bạn cần phải:Truy vấn khoá của tên miền chaTruy vấn khoá của tên miền conTruy vấn thông tin accountTSPress </> button to view full sourceimport {
  getHashedName,
  getNameAccountKey,
  NameRegistryState,
  getDNSRecordAddress,
} from ""@bonfida/spl-name-service"";
import { Connection, clusterApiUrl, PublicKey } from ""@solana/web3.js"";

async () => {
  const SOL_TLD_AUTHORITY = new PublicKey(
    ""58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx""
  );
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));

  // Resolution of demo.bonfida.sol

  const parentDomain = ""bonfida"";
  const subDomain = ""demo"";

  // Step 1
  const hashedParentDomain = await getHashedName(parentDomain);
  const parentDomainKey = await getNameAccountKey(
    hashedParentDomain,
    undefined,
    SOL_TLD_AUTHORITY
  );

  // Step 2
  const subDomainKey = await getDNSRecordAddress(parentDomainKey, subDomain);

  // Step 3
  const registry = await NameRegistryState.retrieve(connection, subDomainKey);
};
123456789101112131415161718192021222324252627282930313233const parentDomain = ""bonfida"";
const subDomain = ""demo"";

// Step 1
const hashedParentDomain = await getHashedName(parentDomain);
const parentDomainKey = await getNameAccountKey(
  hashedParentDomain,
  undefined,
  SOL_TLD_AUTHORITY
);

// Step 2
const subDomainKey = await getDNSRecordAddress(parentDomainKey, subDomain);

// Step 3
const registry = await NameRegistryState.retrieve(connection, subDomainKey);
12345678910111213141516# Tìm tất cả tên miền được sở hữu bởi một khoá công khaiBạn có thể truy vấn tất cả tên miền của một ví bằng hàm getProgramAccounts với bộ lọc memcmpTSPress </> button to view full sourceimport { Connection, PublicKey } from ""@solana/web3.js"";
import { NAME_PROGRAM_ID } from ""@bonfida/spl-name-service"";

export async function findOwnedNameAccountsForUser(
  connection: Connection,
  userAccount: PublicKey
): Promise<PublicKey[]> {
  const filters = [
    {
      memcmp: {
        offset: 32,
        bytes: userAccount.toBase58(),
      },
    },
  ];
  const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {
    filters,
  });
  return accounts.map((a) => a.publicKey);
}
1234567891011121314151617181920export async function findOwnedNameAccountsForUser(
  connection: Connection,
  userAccount: PublicKey
): Promise<PublicKey[]> {
  const filters = [
    {
      memcmp: {
        offset: 32,
        bytes: userAccount.toBase58(),
      },
    },
  ];
  const accounts = await connection.getProgramAccounts(NAME_PROGRAM_ID, {
    filters,
  });
  return accounts.map((a) => a.publicKey);
}
1234567891011121314151617# Phân giải một Twitter HandleTwitter handles có thể được đăng ký trên dịch tên miền Solanaopen in new window và được dùng giống như tên miền .SOLTSPress","[-9.05957147e-02 -6.38970807e-02 -8.58606026e-02 -2.58630142e-02
 -5.21428883e-02 -9.73129645e-03  4.32247184e-02 -5.03067672e-03
  7.35405087e-02  4.41454798e-02  6.93564937e-02 -5.49312010e-02
 -1.90891586e-02 -7.32048824e-02 -6.81739720e-03  3.30277276e-03
 -6.69738501e-02 -1.05570637e-01 -3.10866684e-02 -4.47354205e-02
 -3.34085934e-02 -4.54955511e-02 -4.85118739e-02 -3.39320041e-02
  7.15440651e-03 -2.10595857e-02 -7.96748176e-02  2.52283048e-02
  2.23529316e-03  5.77887287e-03 -1.21550364e-02  5.29684760e-02
  3.65881957e-02  2.35640258e-02  6.65894449e-02  1.32027194e-01
  4.85676154e-02 -2.30156276e-02 -5.50791100e-02  2.50604954e-02
  4.62327898e-02  4.34868746e-02 -5.59342615e-02 -3.87462974e-02
  5.06996587e-02  4.47030030e-02 -7.05016032e-02  3.55819315e-02
 -4.14541587e-02 -5.90982963e-04 -1.20963588e-01  7.51178898e-03
 -1.65982824e-02 -1.22905215e-02 -5.70651703e-02  7.56159574e-02
 -4.21679243e-02  6.26762286e-02  5.32009527e-02 -5.50863519e-02
  3.85257341e-02 -5.52676618e-02  4.68544029e-02 -5.43723479e-02
  3.18365768e-02 -4.00642194e-02 -6.62853345e-02 -5.95735535e-02
  5.41536659e-02 -6.10376894e-02 -1.64697692e-02  3.92968953e-02
  3.18318680e-02  4.39369865e-02 -5.33690974e-02 -2.65583657e-02
 -8.57558325e-02  2.99469680e-02  3.44504714e-02  1.43309068e-02
  9.37839597e-03  3.05729695e-02  1.52645512e-02  4.17270213e-02
  4.08753827e-02  8.69112462e-02 -5.24314530e-02 -6.35624230e-02
 -2.10172567e-03 -2.92510390e-02 -6.44929335e-02 -8.67948402e-03
 -1.43775819e-02 -2.33901069e-02  3.36138196e-02  7.61188120e-02
 -9.25970147e-04  3.68626937e-02 -6.36586100e-02  5.78054860e-02
 -3.71870659e-02 -7.97579996e-03 -1.86574776e-02 -9.36385803e-03
 -3.30490060e-02 -4.25890507e-03 -1.67676434e-02 -1.62689928e-02
  3.31701413e-02  3.42549011e-02 -7.18512759e-02  7.45582357e-02
 -3.29823606e-03 -8.76547024e-02 -5.53141385e-02  2.61440538e-02
  3.08019985e-02 -5.74702173e-02  6.62679374e-02  2.32092272e-02
  6.23449832e-02 -1.00225680e-01 -7.83578083e-02 -7.93160591e-03
 -3.76935340e-02  6.08638823e-02  3.68264169e-02  1.63546000e-32
 -1.70362592e-02  5.91799431e-02  4.33831103e-02  2.46810894e-02
  2.99786702e-02 -5.25390245e-02  7.35827023e-03 -1.18767498e-02
 -1.18300222e-01 -1.33549599e-02 -8.57855156e-02  3.24567370e-02
  3.36963497e-02 -1.53227657e-01 -1.35430396e-02 -6.40441244e-03
  5.24415113e-02  5.69748133e-02  2.50934307e-02 -2.33354867e-02
  1.85169987e-02  2.74132211e-02  4.91240434e-02  1.97437368e-02
 -2.81551015e-02  8.05335585e-03 -1.48514081e-02  7.08034355e-03
  7.84823298e-02  1.18628275e-02  1.21017635e-01  1.54578332e-02
 -5.80074452e-02 -3.89792323e-02  2.28974987e-02 -1.32271405e-02
  6.03422262e-02 -2.73113996e-02 -1.38837010e-01  1.30712045e-02
  3.96170728e-02 -5.93223516e-03 -6.10610321e-02  1.26498779e-02
 -2.30344944e-02 -6.32553995e-02 -3.04247113e-03 -1.87015142e-02
  1.23711392e-01  2.55422685e-02 -1.03678331e-01 -2.92039998e-02
 -1.66834667e-02  1.32759959e-02  2.12931167e-02  1.74373817e-02
  9.37686954e-03  2.49251127e-02 -3.64192426e-02 -8.89095291e-03
 -3.19140926e-02 -6.24427758e-02 -2.99038514e-02  5.80715649e-02
  3.41782980e-02 -1.02136903e-01 -4.28245962e-03  5.17578311e-02
  5.37854135e-02 -4.65350300e-02  2.26646680e-02 -2.86981575e-02
 -4.93091159e-03  1.25540093e-01  2.60351859e-02 -5.57459816e-02
  5.99448220e-04 -9.14015528e-03 -7.35788420e-02  1.25614111e-04
  2.91305166e-02 -5.81654813e-03 -7.66919181e-02  4.21004295e-02
  1.32219866e-02  5.16924411e-02  4.71216068e-03 -3.97049561e-02
  7.43974820e-02  4.89575006e-02  7.91775063e-03  2.65555345e-02
 -2.80609578e-02  4.36020978e-02 -1.15793467e-01 -1.56596433e-32
  2.73433570e-02 -4.29134145e-02 -9.44265872e-02 -3.41009684e-02
 -3.26774865e-02  2.14724019e-02 -2.95202155e-02  1.07825240e-02
  2.42513642e-02 -9.72127076e-03  9.58801657e-02 -3.12405415e-02
  7.67461285e-02 -1.01769492e-02  6.68479130e-02  6.62679151e-02
  2.63479701e-03 -2.52247676e-02 -1.73789319e-02  3.08715440e-02
 -6.51639029e-02 -1.96280088e-02 -5.44670112e-02  3.99466977e-02
 -1.05247162e-01  5.66095226e-02  5.48964785e-03  7.42231533e-02
 -6.27565607e-02 -1.60151832e-02 -1.18382182e-02  3.32614370e-02
 -1.38838083e-01  1.19775973e-01 -4.63521965e-02 -9.02596712e-02
  2.35422049e-02 -2.66107693e-02 -2.78880857e-02 -3.80116850e-02
  6.57881573e-02  9.29268356e-03 -3.76980938e-02 -1.67601015e-02
  2.63982993e-02 -6.45821393e-02  6.45451695e-02  9.97594092e-03
 -3.00312750e-02  7.05471123e-03  7.94255063e-02 -7.61225075e-02
 -4.72727086e-04 -2.20503043e-02  3.31482827e-03  1.02109931e-01
  1.08022045e-03  7.67403701e-03  3.51728755e-03 -2.98796501e-03
  8.85415673e-02 -9.93487388e-02 -4.44797352e-02  1.45719901e-01
  8.01206976e-02 -3.20880264e-02 -4.54090200e-02  8.03368837e-02
  6.65978342e-02 -5.16145937e-02 -1.19071819e-01  1.40630789e-02
  2.04293411e-02 -8.74806289e-03  2.05865521e-02 -6.62631914e-03
 -7.14304820e-02  3.65991332e-02  8.02334026e-03  3.32895033e-02
 -2.08729785e-02  3.19684334e-02 -1.13498820e-02 -6.78643212e-02
  7.79942200e-02  9.56799276e-03  8.90495554e-02  1.11033343e-01
 -3.12135890e-02  1.19416285e-02 -1.52436690e-02 -2.99650971e-02
 -6.50212094e-02  6.87423497e-02  4.06005010e-02 -6.94229314e-08
 -4.93560219e-03  7.50421211e-02 -7.77402595e-02 -3.10225151e-02
  3.19914594e-02 -3.96047235e-02  4.85302508e-02 -5.16875684e-02
 -3.06550842e-02  9.75328591e-03 -2.41800137e-02  5.36735170e-02
 -9.78298113e-03  5.10398969e-02 -1.14795873e-02 -7.95859843e-03
 -4.88390625e-02  4.04532067e-02  2.79067978e-02 -1.83713138e-02
  2.24566776e-02 -7.16891810e-02  4.88582365e-02  2.56920848e-02
  1.61650088e-02 -7.47236330e-03  3.12264860e-02  8.80290568e-02
 -2.89102495e-02 -3.06774080e-02 -9.40041021e-02  2.43803137e-03
  2.19582953e-02 -2.84654293e-02 -4.84364331e-02  5.36446385e-02
  3.62376310e-02  1.73749924e-02  2.09214203e-02  1.70023572e-02
  6.18817024e-02  7.09265545e-02 -2.53513083e-02  7.33781978e-03
 -4.00124528e-02  8.48829597e-02  7.46507868e-02  5.80149889e-02
  8.14335793e-02 -6.32855073e-02 -6.40863627e-02 -2.93687843e-02
 -1.46058137e-02  2.92983260e-02 -4.09787036e-02  4.75808419e-02
 -7.07817674e-02  5.61034828e-02 -1.48175983e-02 -2.77372333e-03
 -3.40123475e-03  2.79481467e-02 -5.11319637e-02 -3.80755067e-02]"
"</> button to view full sourceimport { PublicKey, clusterApiUrl, Connection } from ""@solana/web3.js"";
import { getHandleAndRegistryKey } from ""@bonfida/spl-name-service"";

async () => {
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));
  // Pubkey of the wallet you want to retrieve the Twitter handle
  const pubkey = new PublicKey(""FidaeBkZkvDqi1GXNEwB8uWmj9Ngx2HXSS5nyGRuVFcZ"");

  const [handle, registryKey] = await getHandleAndRegistryKey(
    connection,
    pubkey
  );
};
12345678910111213// Pubkey of the wallet you want to retrieve the Twitter handle
const pubkey = new PublicKey(""FidaeBkZkvDqi1GXNEwB8uWmj9Ngx2HXSS5nyGRuVFcZ"");

const [handle, registryKey] = await getHandleAndRegistryKey(connection, pubkey);
1234# Tra cứu ngược của một Twitter HandleĐể tìm địa chỉ SOL tương ứng với một Twitter handle, bạn có thể thực hiện tra cứu ngượcTSPress </> button to view full sourceimport { getTwitterRegistry } from ""@bonfida/spl-name-service"";
import { Connection, clusterApiUrl } from ""@solana/web3.js"";

async () => {
  const handle = ""bonfida"";
  const connection = new Connection(clusterApiUrl(""mainnet-beta""));

  const registry = await getTwitterRegistry(connection, handle);
};
123456789const handle = ""bonfida"";

const registry = await getTwitterRegistry(connection, handle);
123","[-2.94694081e-02  4.09568055e-03 -1.38522938e-01 -2.01825406e-02
 -4.48992383e-03  8.99546407e-03  4.27226815e-03  2.02888716e-02
  5.35856634e-02 -1.49824545e-02  1.58910744e-03 -1.86988413e-02
 -3.07781436e-02 -8.54446739e-02  4.74684276e-02 -1.81813503e-03
 -1.04212530e-01 -8.43714401e-02  4.40442897e-02  6.00699289e-03
 -2.34834775e-02 -5.02940314e-03 -1.32686282e-02 -4.94525060e-02
 -2.13571228e-02 -1.11210207e-03  2.41489243e-03 -3.53896432e-02
 -3.37400660e-02  4.41344082e-02  6.07815981e-02  7.26271942e-02
  9.49443132e-03 -1.15910266e-02  1.83397206e-03  1.04870908e-01
  1.49447261e-03  4.31716368e-02  3.19730304e-02  6.22476684e-04
  3.99048142e-02  1.27712861e-02 -7.10819438e-02  6.01623720e-03
  2.70948261e-02 -7.78778046e-02 -8.47613215e-02  2.57345978e-02
 -5.44623993e-02 -7.49826257e-04 -8.84422436e-02 -6.23320602e-02
 -3.36216837e-02  3.26881409e-02 -6.63497448e-02  6.32254258e-02
 -7.68427225e-03  5.44367135e-02  8.69500116e-02  2.28673266e-03
  6.79322779e-02 -1.55361453e-02  2.88297832e-02 -2.83138081e-02
 -4.87760082e-02 -2.76222583e-02 -2.50256825e-02 -1.62908826e-02
  2.25727651e-02 -1.12014383e-01 -3.87330391e-02 -1.80216264e-02
 -2.45783236e-02 -3.11805159e-02 -4.00489606e-02 -3.71770710e-02
  3.60024278e-03 -1.04462053e-03 -2.62872968e-02  7.32883587e-02
  2.14478616e-02 -4.49707583e-02  2.17383746e-02  1.38883799e-01
  1.95806175e-02  8.63550827e-02 -8.76550972e-02 -3.16380747e-02
  1.04572100e-03 -2.32831258e-02 -8.54683965e-02  3.06446105e-02
 -8.49802047e-02 -2.72071343e-02  2.03760955e-02  1.10373862e-01
 -5.03996201e-02 -1.68054122e-02 -6.77685887e-02  9.02623013e-02
  3.86260226e-02  3.62389692e-04 -6.74829260e-02 -6.33018911e-02
  2.14476679e-02 -1.43701630e-02  5.93039915e-02 -3.45832668e-02
  2.60145683e-02  5.62593788e-02 -1.79633442e-02  9.95651335e-02
 -2.18993127e-02 -4.24546935e-02  1.80963855e-02  2.54334789e-02
  9.05465335e-02  6.06315620e-02  1.35784894e-01  2.25095600e-02
  3.72498333e-02  1.75190798e-03 -1.89912319e-02 -3.30562070e-02
 -1.24488939e-02  5.57543449e-02 -3.30231078e-02  8.92904407e-33
  5.67693226e-02  1.45817045e-02  5.37854508e-02  1.93804353e-02
 -1.79191176e-02 -4.46859933e-02  9.68426019e-02 -2.23813858e-02
 -9.19188783e-02 -2.59702783e-02 -6.50115684e-02  1.93517387e-03
  4.79615002e-04 -1.13707550e-01 -1.28112137e-01 -1.81473438e-02
 -4.52618822e-02  5.49218766e-02  1.76198781e-02 -5.63869290e-02
 -2.71140635e-02 -3.58595811e-02  2.97269151e-02  1.42583651e-02
  6.83302656e-02 -2.36935145e-03  3.96931991e-02  5.50531112e-02
  4.79343435e-04  1.18969698e-02  6.74535558e-02  3.79218347e-02
 -1.03737749e-01 -1.51732378e-02  5.72222956e-02 -4.73841578e-02
  6.22424819e-02  2.11423095e-02 -1.57866180e-01 -1.44178187e-02
  2.20345352e-02 -3.08355242e-02 -5.46514010e-03 -3.82400043e-02
 -3.38645205e-02  2.59975102e-02  2.23575328e-02  2.23593414e-02
  1.15579203e-01 -6.34106668e-03 -8.91230255e-02 -3.69914770e-02
 -4.03648615e-02 -2.42611114e-02 -5.46691520e-03  4.70492430e-03
 -1.74464136e-02  4.45671976e-02  4.20777611e-02 -2.15918552e-02
 -3.38981152e-02 -3.74945737e-02  3.40557843e-02  3.88334654e-02
  6.02392890e-02  2.86926050e-03 -7.34181106e-02  2.74034683e-02
 -2.44120173e-02 -2.41457690e-02 -1.04638478e-02  3.61966528e-02
 -4.16621240e-03 -4.41187806e-03  1.99594162e-02 -7.73534819e-04
 -2.06396654e-02  2.94776112e-02 -4.10809144e-02  9.02605336e-03
  7.88953230e-02 -3.17623094e-02 -2.12515164e-02  4.61245477e-02
  1.76909789e-02  4.25672755e-02  5.83281592e-02 -6.98499903e-02
  3.16257216e-02  1.65175069e-02 -1.38520896e-02  3.40342335e-03
 -3.57629731e-02 -8.54038522e-02 -9.17421877e-02 -9.04678746e-33
  1.90497320e-02 -7.06172511e-02 -4.27704230e-02 -8.72475803e-02
 -6.06122147e-03 -4.38217167e-03  3.07908305e-03 -3.69660999e-03
 -8.29271879e-03  4.38401811e-02  7.88631514e-02  2.27160323e-02
 -1.23739336e-02 -4.48697694e-02 -2.15926357e-02  1.11330181e-01
  8.97765905e-02 -3.51591595e-02  4.39677900e-03 -5.30218445e-02
 -4.73154224e-02 -5.35873920e-02  9.24248528e-03  3.88284326e-02
 -1.16236024e-01 -1.91798285e-02  5.46936281e-02  6.76389039e-02
 -9.18730274e-02 -2.11753175e-02  4.77633737e-02  5.09292912e-03
 -6.83449954e-02  1.57837078e-01 -8.54491070e-02 -3.46687548e-02
 -2.49851588e-02  2.34053731e-02  6.34502769e-02 -7.03241676e-03
  7.01611266e-02 -6.77512512e-02 -4.43530381e-02  3.28089707e-02
 -1.24598444e-02 -3.70519422e-02  2.80064940e-02 -2.77816951e-02
 -5.28045036e-02  5.46534359e-02  8.71830061e-02 -4.22276556e-02
 -1.25981197e-02 -2.04493012e-02  1.32466564e-02  4.33456823e-02
  3.89638953e-02  2.38050744e-02 -3.61586623e-02 -3.39872278e-02
  7.99143836e-02 -9.44521725e-02 -9.77967456e-02  7.16754943e-02
  8.09523985e-02 -7.85269737e-02 -2.89227571e-02  8.60528462e-03
 -6.45943778e-03  3.33624668e-02 -5.97769096e-02  8.57175700e-03
  4.28011119e-02  3.22125144e-02  9.81488973e-02  4.53007743e-02
 -6.57525612e-03  1.43130068e-02  2.05801018e-02  6.24015518e-02
  4.97113690e-02 -3.90751883e-02 -1.10382214e-02 -9.33756828e-02
  1.98381878e-02 -3.23936753e-02  4.29648310e-02  8.18177760e-02
  6.95278542e-03 -2.06898320e-02 -4.06144373e-02  5.46618886e-02
 -2.70295106e-02  8.84578843e-03  9.62744355e-02 -5.65336364e-08
 -5.33724762e-02  7.98415102e-04 -5.44779599e-02  4.07280251e-02
 -5.21665905e-03  1.02209799e-01  1.71061326e-02 -2.98392940e-02
 -4.06971294e-03  1.44572016e-02 -1.04467064e-01  1.61748789e-02
 -1.32385585e-02  5.55408448e-02 -2.76169982e-02 -3.48570086e-02
 -9.51704942e-03 -1.94078144e-02  3.51233147e-02 -6.45010872e-03
  4.76682149e-02 -2.59446092e-02  5.12273125e-02  1.48313884e-02
  1.02934048e-01 -2.48532575e-02 -6.23988360e-02  2.95814071e-02
  1.60354767e-02 -6.72578141e-02 -7.40474313e-02 -3.21676396e-02
  2.26548384e-03 -4.84702028e-02 -1.04391828e-01  7.97787905e-02
 -2.26539411e-02 -3.81606482e-02  3.54278050e-02  8.35750327e-02
  2.11980715e-02  2.62236968e-02 -7.82774165e-02 -9.17569175e-03
 -1.13334902e-01  7.01632202e-02  9.95732189e-05  6.66789934e-02
  5.75179607e-02  8.77628289e-03 -7.29740597e-03 -4.67982329e-02
  4.88636978e-02  4.88275141e-02 -8.06862190e-02  2.18344908e-02
 -6.19142987e-02  4.90641780e-02 -1.42614776e-03  6.44881511e-03
 -1.86456796e-02  4.61666845e-02 -5.40544204e-02  1.03978738e-02]"
